#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1552;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4159 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4170 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4181 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4192 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _468 = (_461 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _469 = (_461 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _470 = (_461 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4203 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    float _547 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _541;
    float _550 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _542;
    float _553 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _543;
    float _560 = ((_541 - _547) * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) + _547;
    float _561 = ((_542 - _550) * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) + _550;
    float _562 = ((_543 - _553) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) + _553;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    float _651 = ((_623.x - _642) * _461) + _642;
    float _652 = ((_623.y - _643) * _461) + _643;
    float _653 = ((_623.z - _644) * _461) + _644;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _678 = ((_665.z - _653) * _534) + _653;
    float _681 = ((((_665.x - _651) * _534) + _651) * 2.0) + (-1.0);
    float _682 = ((((_665.y - _652) * _534) + _652) * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _4214 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _688 = sqrt(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _739 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _742 = ((isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : min(_739, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _751 = (_742 - ((((((_729 - _730) * cbMtdParam._m0[24u].z) + _730) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _742))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4235 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _759 = (_752 * ((_581.x * cbMtdParam._m0[18u].x) - _560)) + _560;
    float _760 = (_752 * ((_581.y * cbMtdParam._m0[18u].y) - _561)) + _561;
    float _761 = (_752 * ((_581.z * cbMtdParam._m0[18u].z) - _562)) + _562;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _801 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_775 - _776) * cbMtdParam._m0[24u].w) + _776) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4246 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _802 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _810 = ((((cbMtdParam._m0[10u].x - _759) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _802) + _759;
    float _811 = ((((cbMtdParam._m0[10u].y - _760) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _802) + _760;
    float _812 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _761)) * _802) + _761;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _840 = _838.x;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _840) * _461) + _840;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _858) * _534) + _858;
    float _879 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _875) * cbMtdParam._m0[19u].z) + _875;
    float _881 = _879 - (_879 * _752);
    float _883 = _881 - (_881 * _802);
    float _888 = (((_600.z - _678) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _678;
    float _892 = ((_702.z - _888) * cbMtdParam._m0[19u].w) + _888;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _913 = (_906.x * 2.0) + (-1.0);
    float _914 = (_906.y * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4257 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _923 = (_752 * (_906.z - _892)) + _892;
    float _926 = ((cbMtdParam._m0[23u].x - _923) * _802) + _923;
    vec4 _947 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _953 = (_947.x * 2.0) + (-1.0);
    float _954 = (_947.y * 2.0) + (-1.0);
    float _955 = dot(vec2(_953, _954), vec2(_953, _954));
    float _4268 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _969 = (_681 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_600.x * 2.0) + (-1.0)))) + (((_702.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _970 = (_682 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_600.y * 2.0) + (-1.0)))) + (((_702.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _982 = (((_913 - _969) + (cbMtdParam._m0[21u].x * _969)) * _752) + _969;
    float _983 = (((_914 - _970) + (cbMtdParam._m0[21u].x * _970)) * _752) + _970;
    float _984 = (_752 * (sqrt(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) - _688)) + _688;
    float _995 = (((_953 - _982) + (_982 * cbMtdParam._m0[22u].z)) * _802) + _982;
    float _996 = (((_954 - _983) + (_983 * cbMtdParam._m0[22u].z)) * _802) + _983;
    float _997 = ((sqrt(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) - _984) * _802) + _984;
    float _999 = cbMtdParam._m0[22u].x + _702.w;
    float _1002 = fma(_997, _263 * NORMAL.x, fma(_996, _270 * TANGENT.x, (_256 * _248) * _995));
    float _1005 = fma(_997, _263 * NORMAL.y, fma(_996, _270 * TANGENT.y, (_256 * _249) * _995));
    float _1008 = fma(_997, _263 * NORMAL.z, fma(_996, _270 * TANGENT.z, (_256 * _250) * _995));
    float _1012 = inversesqrt(dot(vec3(_1002, _1005, _1008), vec3(_1002, _1005, _1008)));
    float _1013 = _1012 * _1002;
    float _1014 = _1012 * _1005;
    float _1015 = _1012 * _1008;
    float _4279 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _1016 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4301 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4312 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4323 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4334 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _1021 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _1035 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1085 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1075);
    float _1086 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1075);
    float _1087 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1075);
    float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
    float _1092 = _1085 * _1091;
    float _1093 = _1086 * _1091;
    float _1094 = _1087 * _1091;
    float _1100 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1101 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1119 = fma(_1015, cbSceneParam._m0[5u].z, fma(_1014, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1013));
    float _1122 = fma(_1015, cbSceneParam._m0[6u].z, fma(_1014, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1013));
    float _1125 = fma(_1015, cbSceneParam._m0[7u].z, fma(_1014, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1013));
    uint _1139 = (_295 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1145 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * cbInstanceData._m0[_1139].x;
    float _1146 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * cbInstanceData._m0[_1139].y;
    float _1147 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * cbInstanceData._m0[_1139].z;
    float _4345 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _4356 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _4367 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _1151 = 1.0 - _1021;
    float _1152 = _1148 * _1151;
    float _1153 = _1149 * _1151;
    float _1154 = _1150 * _1151;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1021;
    float _1160 = (_1149 + (-0.039999999105930328369140625)) * _1021;
    float _1161 = (_1150 + (-0.039999999105930328369140625)) * _1021;
    float _1162 = _1159 + 0.039999999105930328369140625;
    float _1164 = _1160 + 0.039999999105930328369140625;
    float _1165 = _1161 + 0.039999999105930328369140625;
    vec4 _1174 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1100, cbSceneParam._m0[86u].y * _1101));
    float _1178 = ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * TEXCOORD_5.w) * _1174.x;
    float _1179 = dot(vec3(_1013, _1014, _1015), vec3(_1092, _1093, _1094));
    float _1182 = _1179 * 2.0;
    float _1186 = (_1182 * _1013) - _1092;
    float _1187 = (_1182 * _1014) - _1093;
    float _1188 = (_1182 * _1015) - _1094;
    float _1192 = abs(dot(vec3(_1092, _1093, _1094), vec3(_1013, _1014, _1015)));
    float _4378 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1194 = sqrt(_1016);
    float _1207 = exp2((_1194 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1194 * 3.0));
    float _1213 = (1.0 - _1207) * ((_1194 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1214 = _1207 * _1194;
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1276 = fma(_1250, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242));
        float _1280 = fma(_1250, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242));
        float _1284 = fma(_1250, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242));
        float _1309 = _1242 + _1013;
        float _1310 = _1246 + _1014;
        float _1311 = _1250 + _1015;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1276;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1280;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1284;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1276 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1280 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1284 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_1013, _1014, _1015), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4426 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_1013, _1014, _1015), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4459 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_1013, _1014, _1015), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4492 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1590 = fma(_1250, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242));
        float _1594 = fma(_1250, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242));
        float _1598 = fma(_1250, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242));
        float _1621 = _1242 + _1013;
        float _1622 = _1246 + _1014;
        float _1623 = _1250 + _1015;
        float _1633 = fma(_1623, cbModelParam._m0[30u].z, fma(_1622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1621)) - _1590;
        float _1634 = fma(_1623, cbModelParam._m0[31u].z, fma(_1622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1621)) - _1594;
        float _1635 = fma(_1623, cbModelParam._m0[32u].z, fma(_1622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1621)) - _1598;
        float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
        float _1652 = ((_1639 * _1633) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1590 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1653 = ((_1639 * _1634) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1594 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1654 = ((_1639 * _1635) / cbModelParam._m0[35u].z) + ((((((_1598 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        float _1689 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1656.x + (-0.5));
        float _1691 = _1689 * (_1656.y + (-0.5));
        float _1692 = _1689 * (_1656.z + (-0.5));
        float _1699 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1663.x + (-0.5));
        float _1701 = _1699 * (_1663.y + (-0.5));
        float _1702 = _1699 * (_1663.z + (-0.5));
        float _1709 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1670.x + (-0.5));
        float _1711 = _1709 * (_1670.y + (-0.5));
        float _1712 = _1709 * (_1670.z + (-0.5));
        float _1719 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1677.x + (-0.5));
        float _1721 = _1719 * (_1677.y + (-0.5));
        float _1722 = _1719 * (_1677.z + (-0.5));
        float _1723 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1724 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = _1690 * 0.5;
        float _1727 = _1700 * 0.5;
        float _1728 = _1710 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_1013, _1014, _1015), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4533 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1723 + 9.9999997473787516355514526367188e-06);
        float _4544 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4555 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_1753 + 1.0))) + _1758) * _1723;
        float _1768 = _1691 * 0.5;
        float _1769 = _1701 * 0.5;
        float _1770 = _1711 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_1013, _1014, _1015), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4566 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1724 + 9.9999997473787516355514526367188e-06);
        float _4577 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4588 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_1795 + 1.0))) + _1800) * _1724;
        float _1810 = _1692 * 0.5;
        float _1811 = _1702 * 0.5;
        float _1812 = _1712 * 0.5;
        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
        float _1818 = (_1813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1813);
        float _1826 = (dot(vec3(_1013, _1014, _1015), vec3(_1818 * _1810, _1818 * _1811, _1818 * _1812)) + 1.0) * 0.5;
        float _4599 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1835 = sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4610 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1837 = _1836 * 2.0;
        float _1841 = (1.0 - _1836) / (_1836 + 1.0);
        float _4621 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _1851 = ((((1.0 - _1842) * (_1837 + 2.0)) * exp2(log2(isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_1837 + 1.0))) + _1842) * _1725;
        _1859 = _1692;
        _1860 = _1691;
        _1861 = _1690;
        _1862 = _1702;
        _1863 = _1701;
        _1864 = _1700;
        _1865 = _1712;
        _1866 = _1711;
        _1867 = _1710;
        _1868 = _1725;
        _1869 = _1724;
        _1870 = _1723;
        _1871 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1872 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
    }
    else
    {
        _1859 = _1552;
        _1860 = _1552;
        _1861 = _1552;
        _1862 = _1552;
        _1863 = _1552;
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = _1552;
        _1871 = 0.0;
        _1872 = 0.0;
        _1873 = 0.0;
    }
    float _1883 = (cbModelParam._m0[1u].x * (_1871 - _1564)) + _1564;
    float _1884 = (cbModelParam._m0[1u].x * (_1872 - _1565)) + _1565;
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1566)) + _1566;
    float _1906 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1883));
    float _1927 = _1186 * 0.5;
    float _1928 = _1187 * 0.5;
    float _1929 = _1188 * 0.5;
    float _1930 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1933 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1860, _1863, _1866, _1869));
    float _1936 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1859, _1862, _1865, _1868));
    float _1970;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1943 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1947 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1951 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1958 = dot(vec4(cbModelParam._m0[39u]), vec4(_1927, _1928, _1929, 1.0));
        _1970 = dot(vec3(isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1958) ? 0.0 : (isnan(0.0) ? _1958 : max(0.0, _1958))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1970 = 1.0;
    }
    float _1981;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1972 = dot(vec4(cbModelParam._m0[40u]), vec4(_1927, _1928, _1929, 1.0));
        _1981 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1972) ? 0.0 : (isnan(0.0) ? _1972 : max(0.0, _1972))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1981 = 1.0;
    }
    float _1985 = (_1981 * cbModelParam._m0[1u].x) + (_1970 * (1.0 - cbModelParam._m0[1u].x));
    float _1995 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1016);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1995 : min(cbModelParam._m0[25u].z, _1995));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2043 = fma(_1250, cbModelParam._m0[13u].z, fma(_1246, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1242)) + cbModelParam._m0[13u].w;
        float _2047 = fma(_1250, cbModelParam._m0[14u].z, fma(_1246, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1242)) + cbModelParam._m0[14u].w;
        float _2051 = fma(_1250, cbModelParam._m0[15u].z, fma(_1246, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1242)) + cbModelParam._m0[15u].w;
        float _2054 = fma(_1188, cbModelParam._m0[13u].z, fma(_1187, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186));
        float _2057 = fma(_1188, cbModelParam._m0[14u].z, fma(_1187, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186));
        float _2060 = fma(_1188, cbModelParam._m0[15u].z, fma(_1187, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186));
        float _2088;
        if (_2054 > 0.0)
        {
            _2088 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2088 = frontier_phi_14_12_ladder;
        }
        float _2259;
        if (_2057 > 0.0)
        {
            _2259 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2259 = frontier_phi_23_19_ladder;
        }
        float _2554;
        if (_2060 > 0.0)
        {
            _2554 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2554 = frontier_phi_35_30_ladder;
        }
        float _2556 = isnan(_2259) ? _2088 : (isnan(_2088) ? _2259 : min(_2088, _2259));
        float _2557 = isnan(_2554) ? _2556 : (isnan(_2556) ? _2554 : min(_2556, _2554));
        float _2561 = (_2557 * _2054) + _2043;
        float _2562 = (_2557 * _2057) + _2047;
        float _2563 = (_2557 * _2060) + _2051;
        float _2564 = _2557 * 9.9999997473787516355514526367188e-05;
        float _2566 = (-1.0) - _2564;
        float _2568 = _2564 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2563 > _2568) || ((_2563 < _2566) || ((_2562 > _2568) || ((_2562 < _2566) || ((_2561 < _2566) || (_2561 > _2568))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2563, cbModelParam._m0[9u].z, fma(_2562, cbModelParam._m0[9u].y, _2561 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2563, cbModelParam._m0[10u].z, fma(_2562, cbModelParam._m0[10u].y, _2561 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2563, cbModelParam._m0[11u].z, fma(_2562, cbModelParam._m0[11u].y, _2561 * cbModelParam._m0[11u].x))), _1996);
            frontier_phi_13_35_ladder = _2708.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2708.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2708.x * cbModelParam._m0[1u].y;
        }
        _2076 = frontier_phi_13_35_ladder_2;
        _2078 = frontier_phi_13_35_ladder_1;
        _2080 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2064 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1186, _1187, _1188), _1996);
        _2076 = _2064.x * cbModelParam._m0[1u].y;
        _2078 = _2064.y * cbModelParam._m0[1u].y;
        _2080 = _2064.z * cbModelParam._m0[1u].y;
    }
    float _2084 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1016);
    float _2085 = isnan(_2084) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2084 : min(cbModelParam._m0[25u].w, _2084));
    float _2174;
    float _2176;
    float _2178;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2138 = fma(_1250, cbModelParam._m0[21u].z, fma(_1246, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1242)) + cbModelParam._m0[21u].w;
        float _2142 = fma(_1250, cbModelParam._m0[22u].z, fma(_1246, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1242)) + cbModelParam._m0[22u].w;
        float _2146 = fma(_1250, cbModelParam._m0[23u].z, fma(_1246, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1242)) + cbModelParam._m0[23u].w;
        float _2149 = fma(_1188, cbModelParam._m0[21u].z, fma(_1187, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186));
        float _2152 = fma(_1188, cbModelParam._m0[22u].z, fma(_1187, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186));
        float _2155 = fma(_1188, cbModelParam._m0[23u].z, fma(_1187, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186));
        float _2264;
        if (_2149 > 0.0)
        {
            _2264 = abs((1.0 - _2138) / _2149);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2138 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2264 = frontier_phi_25_21_ladder;
        }
        float _2581;
        if (_2152 > 0.0)
        {
            _2581 = abs((1.0 - _2142) / _2152);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2142 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2581 = frontier_phi_37_32_ladder;
        }
        float _2919;
        if (_2155 > 0.0)
        {
            _2919 = abs((1.0 - _2146) / _2155);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2146 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2919 = frontier_phi_47_44_ladder;
        }
        float _2921 = isnan(_2581) ? _2264 : (isnan(_2264) ? _2581 : min(_2264, _2581));
        float _2922 = isnan(_2919) ? _2921 : (isnan(_2921) ? _2919 : min(_2921, _2919));
        float _2926 = (_2922 * _2149) + _2138;
        float _2927 = (_2922 * _2152) + _2142;
        float _2928 = (_2922 * _2155) + _2146;
        float _2929 = _2922 * 9.9999997473787516355514526367188e-05;
        float _2930 = (-1.0) - _2929;
        float _2932 = _2929 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2928 > _2932) || ((_2928 < _2930) || ((_2927 > _2932) || ((_2927 < _2930) || ((_2926 < _2930) || (_2926 > _2932))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3050 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2928, cbModelParam._m0[17u].z, fma(_2927, cbModelParam._m0[17u].y, _2926 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2928, cbModelParam._m0[18u].z, fma(_2927, cbModelParam._m0[18u].y, _2926 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2928, cbModelParam._m0[19u].z, fma(_2927, cbModelParam._m0[19u].y, _2926 * cbModelParam._m0[19u].x))), _2085);
            frontier_phi_22_47_ladder = _3050.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3050.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3050.x * cbModelParam._m0[1u].z;
        }
        _2174 = frontier_phi_22_47_ladder_2;
        _2176 = frontier_phi_22_47_ladder_1;
        _2178 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1186, _1187, _1188), _2085);
        _2174 = _2158.x * cbModelParam._m0[1u].z;
        _2176 = _2158.y * cbModelParam._m0[1u].z;
        _2178 = _2158.z * cbModelParam._m0[1u].z;
    }
    float _2191 = (((_1213 * _1162) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2174 - _2076)) + _2076);
    float _2193 = (((_1213 * _1164) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2176 - _2078)) + _2078);
    float _2195 = (((_1213 * _1165) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2178 - _2080)) + _2080);
    float _2198 = fma(_2195, cbSceneParam._m0[89u].z, fma(_2193, cbSceneParam._m0[89u].y, _2191 * cbSceneParam._m0[89u].x));
    float _2201 = fma(_2195, cbSceneParam._m0[90u].z, fma(_2193, cbSceneParam._m0[90u].y, _2191 * cbSceneParam._m0[90u].x));
    float _2204 = fma(_2195, cbSceneParam._m0[91u].z, fma(_2193, cbSceneParam._m0[91u].y, _2191 * cbSceneParam._m0[91u].x));
    float _2238 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2242 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2246 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2251 = _2238 / _2250;
    float _2252 = _2242 / _2250;
    float _2253 = _2246 / _2250;
    float _2400;
    float _2401;
    float _2402;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2280 = ((uint(_2253 > cbSceneParam._m0[59u].y) + uint(_2253 > cbSceneParam._m0[59u].x)) + uint(_2253 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2281 = _2280 + 43u;
        uint _2289 = _2280 + 44u;
        uint _2297 = _2280 + 45u;
        uint _2305 = _2280 + 46u;
        float _2316 = fma(_2250, cbSceneParam._m0[_2281].w, fma(_2246, cbSceneParam._m0[_2281].z, fma(_2242, cbSceneParam._m0[_2281].y, _2238 * cbSceneParam._m0[_2281].x)));
        float _2320 = fma(_2250, cbSceneParam._m0[_2289].w, fma(_2246, cbSceneParam._m0[_2289].z, fma(_2242, cbSceneParam._m0[_2289].y, _2238 * cbSceneParam._m0[_2289].x)));
        float _2328 = fma(_2250, cbSceneParam._m0[_2305].w, fma(_2246, cbSceneParam._m0[_2305].z, fma(_2242, cbSceneParam._m0[_2305].y, _2238 * cbSceneParam._m0[_2305].x)));
        float _2333 = cbSceneParam._m0[33u].z * _2328;
        float _2335 = cbSceneParam._m0[33u].w * _2328;
        float _2338 = fma(_2250, cbSceneParam._m0[_2297].w, fma(_2246, cbSceneParam._m0[_2297].z, fma(_2242, cbSceneParam._m0[_2297].y, _2238 * cbSceneParam._m0[_2297].x))) / _2328;
        float _2386 = (cbSceneParam._m0[33u].x - sqrt(((_2252 * _2252) + (_2251 * _2251)) + (_2253 * _2253))) * cbSceneParam._m0[33u].y;
        float _4747 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2393 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2333 + _2316) / _2328, (_2335 + _2320) / _2328), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2335 + _2316) / _2328, (_2320 - _2333) / _2328), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2316 - _2333) / _2328, (_2320 - _2335) / _2328), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2316 - _2335) / _2328, (_2333 + _2320) / _2328), _2338), 0.0)).x), vec4(0.25)));
        _2400 = 1.0 - (_2393 * cbSceneParam._m0[34u].x);
        _2401 = 1.0 - (_2393 * cbSceneParam._m0[34u].y);
        _2402 = 1.0 - (_2393 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2400 = 1.0;
        _2401 = 1.0;
        _2402 = 1.0;
    }
    float _2466;
    float _2468;
    float _2470;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2454 = fma(_2250, cbSceneParam._m0[63u].w, fma(_2246, cbSceneParam._m0[63u].z, fma(_2242, cbSceneParam._m0[63u].y, _2238 * cbSceneParam._m0[63u].x)));
        float _2455 = fma(_2250, cbSceneParam._m0[60u].w, fma(_2246, cbSceneParam._m0[60u].z, fma(_2242, cbSceneParam._m0[60u].y, _2238 * cbSceneParam._m0[60u].x))) / _2454;
        float _2456 = fma(_2250, cbSceneParam._m0[61u].w, fma(_2246, cbSceneParam._m0[61u].z, fma(_2242, cbSceneParam._m0[61u].y, _2238 * cbSceneParam._m0[61u].x))) / _2454;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2455 >= cbSceneParam._m0[64u].x) && (_2456 >= cbSceneParam._m0[64u].y)) && (_2455 <= cbSceneParam._m0[64u].z)) && (_2456 <= cbSceneParam._m0[64u].w))
        {
            float _2594 = fma(_2250, cbSceneParam._m0[62u].w, fma(_2246, cbSceneParam._m0[62u].z, fma(_2242, cbSceneParam._m0[62u].y, _2238 * cbSceneParam._m0[62u].x))) / _2454;
            float _2598 = isnan(cbSceneParam._m0[41u].w) ? _2594 : (isnan(_2594) ? cbSceneParam._m0[41u].w : max(_2594, cbSceneParam._m0[41u].w));
            float _2641 = (cbSceneParam._m0[33u].x - sqrt(((_2252 * _2252) + (_2251 * _2251)) + (_2253 * _2253))) * cbSceneParam._m0[33u].y;
            float _4763 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
            float _2648 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2455, cbSceneParam._m0[33u].w + _2456), _2598), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2455, _2456 - cbSceneParam._m0[33u].z), _2598), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2455 - cbSceneParam._m0[33u].z, _2456 - cbSceneParam._m0[33u].w), _2598), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2455 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2456), _2598), 0.0)).x), vec4(0.25)));
            float _2652 = 1.0 - (_2648 * cbSceneParam._m0[34u].x);
            float _2653 = 1.0 - (_2648 * cbSceneParam._m0[34u].y);
            float _2654 = 1.0 - (_2648 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2654) ? _2402 : (isnan(_2402) ? _2654 : min(_2402, _2654));
            frontier_phi_34_33_ladder_1 = isnan(_2653) ? _2401 : (isnan(_2401) ? _2653 : min(_2401, _2653));
            frontier_phi_34_33_ladder_2 = isnan(_2652) ? _2400 : (isnan(_2400) ? _2652 : min(_2400, _2652));
        }
        else
        {
            frontier_phi_34_33_ladder = _2402;
            frontier_phi_34_33_ladder_1 = _2401;
            frontier_phi_34_33_ladder_2 = _2400;
        }
        _2466 = frontier_phi_34_33_ladder_2;
        _2468 = frontier_phi_34_33_ladder_1;
        _2470 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2466 = _2400;
        _2468 = _2401;
        _2470 = _2402;
    }
    uvec4 _2475 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2477 = _2475.x * 14u;
    uint _2478 = _2477 + 13u;
    float _2485 = _1178 + (-1.0);
    float _2490 = (cbLight._m0[_2478].x * _2485) + 1.0;
    float _2491 = (cbLight._m0[_2478].y * _2485) + 1.0;
    float _2492 = (cbLight._m0[_2478].z * _2485) + 1.0;
    float _2493 = (cbLight._m0[_2478].w * _2485) + 1.0;
    uint _2494 = _2477 + 5u;
    float _2500 = isnan(1.0) ? _2491 : (isnan(_2491) ? 1.0 : min(_2491, 1.0));
    uint _2504 = _2477 + 4u;
    float _2513 = isnan(1.0) ? _2490 : (isnan(_2490) ? 1.0 : min(_2490, 1.0));
    uint _2517 = _2477 | 1u;
    float _2528 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_1013, _1014, _1015));
    float _2531 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_1013, _1014, _1015));
    float _4799 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _4810 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2536 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * 0.3183098733425140380859375;
    float _2538 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * 0.3183098733425140380859375;
    float _2545 = ((cbLight._m0[_2494].x * _2500) * _2538) + (((cbLight._m0[_2504].x * _2466) * _2513) * _2536);
    float _2546 = ((_2500 * cbLight._m0[_2494].y) * _2538) + (((cbLight._m0[_2504].y * _2468) * _2513) * _2536);
    float _2547 = ((_2500 * cbLight._m0[_2494].z) * _2538) + (((cbLight._m0[_2504].z * _2470) * _2513) * _2536);
    uvec4 _2551 = floatBitsToUint(cbLight._m0[_2477 + 12u]);
    bool _2553 = _2551.x == 0u;
    float _2655;
    float _2657;
    float _2659;
    if (_2553)
    {
        _2655 = _2545;
        _2657 = _2546;
        _2659 = _2547;
    }
    else
    {
        uint _2663 = _2477 + 6u;
        float _2679 = (dot(vec3(cbLight._m0[_2477 + 2u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2680 = _2679 * _2679;
        float _4821 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        float _2681 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
        float _2682 = isnan(1.0) ? _2492 : (isnan(_2492) ? 1.0 : min(_2492, 1.0));
        _2655 = (((cbLight._m0[_2663].x * 0.3183098733425140380859375) * _2681) * _2682) + _2545;
        _2657 = (((cbLight._m0[_2663].y * 0.3183098733425140380859375) * _2681) * _2682) + _2546;
        _2659 = (((cbLight._m0[_2663].z * 0.3183098733425140380859375) * _2681) * _2682) + _2547;
    }
    bool _2662 = _2551.y == 0u;
    float _2717;
    float _2719;
    float _2721;
    if (_2662)
    {
        _2717 = _2655;
        _2719 = _2657;
        _2721 = _2659;
    }
    else
    {
        uint _2890 = _2477 + 7u;
        float _2906 = (dot(vec3(cbLight._m0[_2477 + 3u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2907 = _2906 * _2906;
        float _4837 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2908 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2909 = isnan(1.0) ? _2493 : (isnan(_2493) ? 1.0 : min(_2493, 1.0));
        _2717 = (((cbLight._m0[_2890].x * 0.3183098733425140380859375) * _2908) * _2909) + _2655;
        _2719 = (((cbLight._m0[_2890].y * 0.3183098733425140380859375) * _2908) * _2909) + _2657;
        _2721 = (((cbLight._m0[_2890].z * 0.3183098733425140380859375) * _2908) * _2909) + _2659;
    }
    uint _2724 = _2477 + 8u;
    float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2477].w)) * _1016) * 0.949999988079071044921875);
    float _2738 = _2737 * _2737;
    float _2739 = cbLight._m0[_2477].x + _1092;
    float _2740 = cbLight._m0[_2477].y + _1093;
    float _2741 = cbLight._m0[_2477].z + _1094;
    float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
    float _2746 = _2745 * _2739;
    float _2747 = _2745 * _2740;
    float _2748 = _2745 * _2741;
    float _2749 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2477].xyz));
    float _4853 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2752 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
    float _4864 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _2753 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
    float _2754 = dot(vec3(_1013, _1014, _1015), vec3(_2746, _2747, _2748));
    float _4875 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
    float _2757 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _2758 = dot(vec3(cbLight._m0[_2477].xyz), vec3(_2746, _2747, _2748));
    float _4886 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2762 = _2738 * _2738;
    float _2766 = ((_2757 * _2757) * (_2762 + (-1.0))) + 1.0;
    float _2774 = exp2(log2(1.0 - (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) * 5.0);
    float _2775 = 0.959999978542327880859375 - _1159;
    float _2777 = 0.959999978542327880859375 - _1160;
    float _2778 = 0.959999978542327880859375 - _1161;
    float _2785 = 1.0 - _2738;
    float _2796 = (0.5 / (((_2753 * ((_2752 * _2785) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2753 * _2785) + _2738) * _2752))) * _2752;
    float _4897 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2798 = (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2762 / ((_2766 * _2766) * 3.141590118408203125));
    uint _2812 = _2477 + 9u;
    float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _1016) * 0.949999988079071044921875);
    float _2824 = _2823 * _2823;
    float _2825 = cbLight._m0[_2517].x + _1092;
    float _2826 = cbLight._m0[_2517].y + _1093;
    float _2827 = cbLight._m0[_2517].z + _1094;
    float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
    float _2832 = _2831 * _2825;
    float _2833 = _2831 * _2826;
    float _2834 = _2831 * _2827;
    float _2835 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2517].xyz));
    float _4908 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
    float _2838 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
    float _2839 = dot(vec3(_1013, _1014, _1015), vec3(_2832, _2833, _2834));
    float _4919 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
    float _2842 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
    float _2843 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2832, _2833, _2834));
    float _4930 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2847 = _2824 * _2824;
    float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
    float _2858 = exp2(log2(1.0 - (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) * 5.0);
    float _2865 = 1.0 - _2824;
    float _2875 = (0.5 / (((_2753 * ((_2838 * _2865) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2753 * _2865) + _2824) * _2838))) * _2838;
    float _4941 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
    float _2877 = (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
    float _2887 = (((((_2858 * _2775) + _1162) * cbLight._m0[_2812].x) * _2877) * _2500) + ((((cbLight._m0[_2724].x * _2466) * ((_2774 * _2775) + _1162)) * _2798) * _2513);
    float _2888 = (((((_2858 * _2777) + _1164) * cbLight._m0[_2812].y) * _2877) * _2500) + ((((cbLight._m0[_2724].y * _2468) * ((_2774 * _2777) + _1164)) * _2798) * _2513);
    float _2889 = (((((_2858 * _2778) + _1165) * cbLight._m0[_2812].z) * _2877) * _2500) + ((((cbLight._m0[_2724].z * _2470) * ((_2774 * _2778) + _1165)) * _2798) * _2513);
    float _2945;
    float _2947;
    float _2949;
    if (_2553)
    {
        _2945 = _2887;
        _2947 = _2888;
        _2949 = _2889;
    }
    else
    {
        uint _2951 = _2477 + 2u;
        uint _2955 = _2477 + 10u;
        float _2969 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2951].w)) * _1016) * 0.949999988079071044921875);
        float _2970 = _2969 * _2969;
        float _2971 = cbLight._m0[_2951].x + _1092;
        float _2972 = cbLight._m0[_2951].y + _1093;
        float _2973 = cbLight._m0[_2951].z + _1094;
        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
        float _2978 = _2977 * _2971;
        float _2979 = _2977 * _2972;
        float _2980 = _2977 * _2973;
        float _2981 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2951].xyz));
        float _4952 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2984 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
        float _2985 = dot(vec3(_1013, _1014, _1015), vec3(_2978, _2979, _2980));
        float _4963 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2988 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
        float _2989 = dot(vec3(cbLight._m0[_2951].xyz), vec3(_2978, _2979, _2980));
        float _4974 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2993 = _2970 * _2970;
        float _2997 = ((_2988 * _2988) * (_2993 + (-1.0))) + 1.0;
        float _3004 = exp2(log2(1.0 - (isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0)))) * 5.0);
        float _3011 = 1.0 - _2970;
        float _3021 = (0.5 / (((_2753 * ((_2984 * _3011) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2753 * _3011) + _2970) * _2984))) * _2984;
        float _4985 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3023 = (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * (_2993 / ((_2997 * _2997) * 3.141590118408203125));
        float _3024 = isnan(1.0) ? _2492 : (isnan(_2492) ? 1.0 : min(_2492, 1.0));
        _2945 = (((((_3004 * _2775) + _1162) * cbLight._m0[_2955].x) * _3023) * _3024) + _2887;
        _2947 = (((((_3004 * _2777) + _1164) * cbLight._m0[_2955].y) * _3023) * _3024) + _2888;
        _2949 = (((((_3004 * _2778) + _1165) * cbLight._m0[_2955].z) * _3023) * _3024) + _2889;
    }
    float _3055;
    float _3057;
    float _3059;
    if (_2662)
    {
        _3055 = _2945;
        _3057 = _2947;
        _3059 = _2949;
    }
    else
    {
        uint _3066 = _2477 + 3u;
        uint _3070 = _2477 + 11u;
        float _3084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3066].w)) * _1016) * 0.949999988079071044921875);
        float _3085 = _3084 * _3084;
        float _3086 = cbLight._m0[_3066].x + _1092;
        float _3087 = cbLight._m0[_3066].y + _1093;
        float _3088 = cbLight._m0[_3066].z + _1094;
        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
        float _3093 = _3092 * _3086;
        float _3094 = _3092 * _3087;
        float _3095 = _3092 * _3088;
        float _3096 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_3066].xyz));
        float _5001 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        float _3099 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
        float _3100 = dot(vec3(_1013, _1014, _1015), vec3(_3093, _3094, _3095));
        float _5012 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        float _3103 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
        float _3104 = dot(vec3(cbLight._m0[_3066].xyz), vec3(_3093, _3094, _3095));
        float _5023 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3108 = _3085 * _3085;
        float _3112 = ((_3103 * _3103) * (_3108 + (-1.0))) + 1.0;
        float _3119 = exp2(log2(1.0 - (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) * 5.0);
        float _3126 = 1.0 - _3085;
        float _3136 = (0.5 / (((_2753 * ((_3099 * _3126) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_2753 * _3126) + _3085) * _3099))) * _3099;
        float _5034 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
        float _3138 = (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_3108 / ((_3112 * _3112) * 3.141590118408203125));
        float _3139 = isnan(1.0) ? _2493 : (isnan(_2493) ? 1.0 : min(_2493, 1.0));
        _3055 = (((((_3119 * _2775) + _1162) * cbLight._m0[_3070].x) * _3138) * _3139) + _2945;
        _3057 = (((((_3119 * _2777) + _1164) * cbLight._m0[_3070].y) * _3138) * _3139) + _2947;
        _3059 = (((((_3119 * _2778) + _1165) * cbLight._m0[_3070].z) * _3138) * _3139) + _2949;
    }
    float _3205;
    float _3207;
    float _3209;
    float _3211;
    float _3213;
    float _3215;
    if (_2475.y == 0u)
    {
        uvec4 _3160 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3161 = _3160.x;
        uint _3172 = uint((float(_3160.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1101) / _3161))) + floor(float(uint(cbSceneParam._m0[85u].x * _1100) / _3161)));
        float _3182 = (log2(_2253 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3183 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
        uint _3186 = uint(isnan(14.0) ? _3183 : (isnan(_3183) ? 14.0 : min(_3183, 14.0)));
        uvec4 _3191 = texelFetch(g_lightClusterGridBuffer, int(((_3186 << 2u) + (_3172 << 6u)) >> 2u));
        uint _3192 = _3191.x;
        uint _3193 = _3160.z;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        if (((((1u << ((_3193 >> 4u) & 15u)) + 4294967295u) & _3192) == 0u) || ((_3193 & 240u) == 0u))
        {
            _3272 = 0.0;
            _3274 = 0.0;
            _3276 = 0.0;
            _3278 = 0.0;
            _3280 = 0.0;
            _3282 = 0.0;
        }
        else
        {
            float _3273;
            float _3275;
            float _3277;
            float _3279;
            float _3281;
            float _3283;
            float _3417 = 0.0;
            float _3418 = 0.0;
            float _3419 = 0.0;
            float _3420 = 0.0;
            float _3421 = 0.0;
            float _3422 = 0.0;
            uint _3423 = 0u;
            uint _3432;
            bool _3433;
            for (;;)
            {
                _3432 = texelFetch(g_lightClassification, int((((_3186 << 5u) + (_3172 << 9u)) + (_3423 << 2u)) >> 2u)).x;
                _3433 = _3432 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3433)
                {
                    frontier_phi_66_pred = _3422;
                    frontier_phi_66_pred_1 = _3421;
                    frontier_phi_66_pred_2 = _3420;
                    frontier_phi_66_pred_3 = _3419;
                    frontier_phi_66_pred_4 = _3418;
                    frontier_phi_66_pred_5 = _3417;
                }
                else
                {
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    float _3546;
                    uint _3547;
                    _3541 = _3417;
                    _3542 = _3418;
                    _3543 = _3419;
                    _3544 = _3420;
                    _3545 = _3421;
                    _3546 = _3422;
                    _3547 = _3432;
                    float _3473;
                    float _3474;
                    float _3475;
                    float _3476;
                    float _3477;
                    float _3478;
                    for (;;)
                    {
                        uint _3551 = uint(findLSB(_3547)) + (_3423 << 5u);
                        uint _3548 = (_3547 + 4294967295u) & _3547;
                        uint _3553 = _3551 * 48u;
                        vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 3u)).x));
                        uint _3573 = (_3551 * 48u) + 4u;
                        vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3573)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3573 + 3u)).x));
                        uint _3592 = (_3551 * 48u) + 8u;
                        vec3 _3603 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3592)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3592 + 2u)).x));
                        float _3607 = _3567.x - _2251;
                        float _3608 = _3567.y - _2252;
                        float _3609 = _3567.z - _2253;
                        float _3610 = dot(vec3(_3607, _3608, _3609), vec3(_3607, _3608, _3609));
                        float _3613 = inversesqrt(_3610);
                        float _3614 = _3613 * _3607;
                        float _3615 = _3613 * _3608;
                        float _3616 = _3613 * _3609;
                        float _3617 = dot(vec3(_1119, _1122, _1125), vec3(_3614, _3615, _3616));
                        float _3622 = 1.0 - (_3610 * _3567.w);
                        float _5060 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3623 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                        float _3624 = sqrt(_3610) * _3586.w;
                        float _3627 = 1.39999997615814208984375 / (_3624 + 1.39999997615814208984375);
                        float _3628 = _3627 * _3627;
                        float _3631 = ((1.0 - _3628) * _3617) + _3628;
                        float _3634 = _3624 * _3624;
                        float _3638 = ((isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0))) * _3623) / ((_3634 * 0.699999988079071044921875) + 1.0);
                        float _3642 = (-0.0) - _2251;
                        float _3643 = (-0.0) - _2252;
                        float _3644 = (-0.0) - _2253;
                        float _3648 = inversesqrt(dot(vec3(_3642, _3643, _3644), vec3(_3642, _3643, _3644)));
                        float _3649 = _3648 * _3642;
                        float _3650 = _3648 * _3643;
                        float _3651 = _3648 * _3644;
                        float _3658 = exp2(log2(1.0 / ((_3634 * 3.5) + 5.0)) * 0.25);
                        float _3659 = 1.0 - _1194;
                        float _3666 = sqrt(1.0 - ((1.0 - (_3659 * _3659)) * (1.0 - (_3658 * _3658))));
                        float _3667 = _3666 * _3666;
                        float _3668 = _3667 * _3667;
                        float _3669 = _3649 + _3614;
                        float _3670 = _3650 + _3615;
                        float _3671 = _3651 + _3616;
                        float _3675 = inversesqrt(dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671)));
                        float _3679 = dot(vec3(_1119, _1122, _1125), vec3(_3649, _3650, _3651));
                        float _5076 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3682 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                        float _3683 = dot(vec3(_1119, _1122, _1125), vec3(_3675 * _3669, _3675 * _3670, _3675 * _3671));
                        float _5087 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                        float _3686 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
                        float _3690 = ((_3686 * _3686) * (_3668 + (-1.0))) + 1.0;
                        float _3691 = _3627 * _3667;
                        float _3692 = _3691 * _3691;
                        float _3695 = ((1.0 - _3692) * _3617) + _3692;
                        float _5098 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3696 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                        float _3697 = 1.0 - _3667;
                        float _3707 = (0.5 / (((_3696 * ((_3682 * _3697) + _3667)) + 9.9999999392252902907785028219223e-09) + (((_3696 * _3697) + _3667) * _3682))) * _3696;
                        float _5109 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3718 = (((_3668 * 3.1415927410125732421875) * (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0)))) / ((_3690 * _3690) * ((_3634 * 2.1991131305694580078125) + 3.141590118408203125))) * _3623;
                        _3476 = (_3638 * _3586.x) + _3544;
                        _3477 = (_3638 * _3586.y) + _3545;
                        _3478 = (_3638 * _3586.z) + _3546;
                        _3473 = (_3718 * _3603.x) + _3541;
                        _3474 = (_3718 * _3603.y) + _3542;
                        _3475 = (_3718 * _3603.z) + _3543;
                        if (_3548 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3541 = _3473;
                            _3542 = _3474;
                            _3543 = _3475;
                            _3544 = _3476;
                            _3545 = _3477;
                            _3546 = _3478;
                            _3547 = _3548;
                        }
                    }
                    frontier_phi_66_pred = _3478;
                    frontier_phi_66_pred_1 = _3477;
                    frontier_phi_66_pred_2 = _3476;
                    frontier_phi_66_pred_3 = _3475;
                    frontier_phi_66_pred_4 = _3474;
                    frontier_phi_66_pred_5 = _3473;
                }
                _3283 = frontier_phi_66_pred;
                _3281 = frontier_phi_66_pred_1;
                _3279 = frontier_phi_66_pred_2;
                _3277 = frontier_phi_66_pred_3;
                _3275 = frontier_phi_66_pred_4;
                _3273 = frontier_phi_66_pred_5;
                uint _3424 = _3423 + 1u;
                if (_3424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3417 = _3273;
                    _3418 = _3275;
                    _3419 = _3277;
                    _3420 = _3279;
                    _3421 = _3281;
                    _3422 = _3283;
                    _3423 = _3424;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3272 = _3273;
            _3274 = _3275;
            _3276 = _3277;
            _3278 = _3279;
            _3280 = _3281;
            _3282 = _3283;
        }
        uvec4 _3286 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3287 = _3286.z;
        uint _3289 = (_3287 >> 8u) & 15u;
        float _3385;
        float _3387;
        float _3389;
        float _3391;
        float _3393;
        float _3395;
        if (((4294967295u << _3289) & _3192) == 0u)
        {
            _3385 = _3272;
            _3387 = _3274;
            _3389 = _3276;
            _3391 = _3278;
            _3393 = _3280;
            _3395 = _3282;
        }
        else
        {
            float _3410 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
            float _3411 = _3410 * _2251;
            float _3412 = _3410 * _2252;
            float _3413 = _3410 * _2253;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3289 < ((_3287 >> 12u) & 15u))
            {
                float _3386;
                float _3388;
                float _3390;
                float _3392;
                float _3394;
                float _3396;
                float _3524 = _3272;
                float _3525 = _3274;
                float _3526 = _3276;
                float _3527 = _3278;
                float _3528 = _3280;
                float _3529 = _3282;
                uint _3530 = _3289;
                uint _3539;
                bool _3540;
                for (;;)
                {
                    _3539 = texelFetch(g_lightClassification, int((((_3186 << 5u) + (_3172 << 9u)) + (_3530 << 2u)) >> 2u)).x;
                    _3540 = _3539 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3540)
                    {
                        frontier_phi_72_pred = _3529;
                        frontier_phi_72_pred_1 = _3528;
                        frontier_phi_72_pred_2 = _3527;
                        frontier_phi_72_pred_3 = _3526;
                        frontier_phi_72_pred_4 = _3525;
                        frontier_phi_72_pred_5 = _3524;
                    }
                    else
                    {
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _3736 = _3524;
                        float _3737 = _3525;
                        float _3738 = _3526;
                        float _3739 = _3527;
                        float _3740 = _3528;
                        float _3741 = _3529;
                        uint _3742 = _3539;
                        uint _3743;
                        vec4 _3768;
                        float _3769;
                        vec4 _3784;
                        vec3 _3796;
                        vec4 _3811;
                        vec4 _3826;
                        float _3872;
                        bool _3873;
                        for (;;)
                        {
                            uint _3753 = ((_3530 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3742));
                            _3743 = (_3742 + 4294967295u) & _3742;
                            uint _3755 = _3753 * 40u;
                            _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            _3769 = _3768.w;
                            uint _3771 = (_3753 * 40u) + 4u;
                            _3784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 3u)).x));
                            uint _3786 = (_3753 * 40u) + 8u;
                            _3796 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 2u)).x));
                            uint _3798 = (_3753 * 40u) + 16u;
                            _3811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3798 + 3u)).x));
                            uint _3813 = (_3753 * 40u) + 20u;
                            _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            uint _3828 = (_3753 * 40u) + 24u;
                            vec4 _3841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3828 + 3u)).x));
                            uint _3847 = (_3753 * 40u) + 28u;
                            vec4 _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            _3872 = fma(_2253, _3860.z, fma(_2252, _3860.y, _3860.x * _2251)) + _3860.w;
                            _3873 = !((fma(_2253, _3841.z, fma(_2252, _3841.y, _3841.x * _2251)) + _3841.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3873)
                            {
                                float _3900 = _3768.x - _2251;
                                float _3901 = _3768.y - _2252;
                                float _3902 = _3768.z - _2253;
                                float _3903 = dot(vec3(_3900, _3901, _3902), vec3(_3900, _3901, _3902));
                                float _3906 = inversesqrt(_3903);
                                float _3907 = _3906 * _3900;
                                float _3908 = _3906 * _3901;
                                float _3909 = _3906 * _3902;
                                float _3913 = 1.0 - (_3903 / (_3769 * _3769));
                                float _5120 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                                float _3918 = sqrt(_3903) * _3784.w;
                                float _3920 = 1.39999997615814208984375 / (_3918 + 1.39999997615814208984375);
                                float _3921 = _3920 * _3920;
                                float _3924 = ((1.0 - _3921) * dot(vec3(_3907, _3908, _3909), vec3(_1119, _1122, _1125))) + _3921;
                                float _3927 = _3918 * _3918;
                                float _3931 = (fma(_2253, _3811.z, fma(_2252, _3811.y, _3811.x * _2251)) + _3811.w) / _3872;
                                float _3932 = (fma(_2253, _3826.z, fma(_2252, _3826.y, _3826.x * _2251)) + _3826.w) / _3872;
                                float _3936 = 1.0 - dot(vec2(_3931, _3932), vec2(_3931, _3932));
                                float _5136 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3937 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                                float _3938 = _3937 * (((isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0))) * _3914) / ((_3927 * 0.699999988079071044921875) + 1.0));
                                float _3950 = exp2(log2(1.0 / ((_3927 * 3.5) + 5.0)) * 0.25);
                                float _3951 = 1.0 - _1194;
                                float _3958 = sqrt(1.0 - ((1.0 - (_3951 * _3951)) * (1.0 - (_3950 * _3950))));
                                float _3959 = _3958 * _3958;
                                float _3960 = _3959 * _3959;
                                float _3961 = _3907 - _3411;
                                float _3962 = _3908 - _3412;
                                float _3963 = _3909 - _3413;
                                float _3967 = inversesqrt(dot(vec3(_3961, _3962, _3963), vec3(_3961, _3962, _3963)));
                                float _3971 = dot(vec3(_1119, _1122, _1125), vec3((-0.0) - _3411, (-0.0) - _3412, (-0.0) - _3413));
                                float _5147 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3974 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
                                float _3975 = dot(vec3(_1119, _1122, _1125), vec3(_3967 * _3961, _3967 * _3962, _3967 * _3963));
                                float _5158 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3978 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                                float _3982 = ((_3978 * _3978) * (_3960 + (-1.0))) + 1.0;
                                float _3983 = _3920 * _3959;
                                float _3984 = _3983 * _3983;
                                float _3990 = ((1.0 - _3984) * dot(vec3(_1119, _1122, _1125), vec3(_3907, _3908, _3909))) + _3984;
                                float _5169 = isnan(0.0) ? _3990 : (isnan(_3990) ? 0.0 : max(_3990, 0.0));
                                float _3991 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
                                float _3992 = 1.0 - _3959;
                                float _4002 = (0.5 / (((_3991 * ((_3974 * _3992) + _3959)) + 9.9999999392252902907785028219223e-09) + (((_3991 * _3992) + _3959) * _3974))) * _3991;
                                float _5180 = isnan(0.0) ? _4002 : (isnan(_4002) ? 0.0 : max(_4002, 0.0));
                                float _4012 = (_3937 * _3914) * (((_3960 * 3.1415927410125732421875) * (isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0)))) / ((_3982 * _3982) * ((_3927 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3938 * _3784.y;
                                frontier_phi_78_pred_1 = _3938 * _3784.x;
                                frontier_phi_78_pred_2 = _4012 * _3796.z;
                                frontier_phi_78_pred_3 = _4012 * _3796.y;
                                frontier_phi_78_pred_4 = _4012 * _3796.x;
                                frontier_phi_78_pred_5 = _3938 * _3784.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4020 = frontier_phi_78_pred;
                            _4019 = frontier_phi_78_pred_1;
                            _4018 = frontier_phi_78_pred_2;
                            _4017 = frontier_phi_78_pred_3;
                            _4016 = frontier_phi_78_pred_4;
                            _4021 = frontier_phi_78_pred_5;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            _3728 = _4021 + _3741;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            if (_3743 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3743;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3728;
                        frontier_phi_72_pred_1 = _3727;
                        frontier_phi_72_pred_2 = _3726;
                        frontier_phi_72_pred_3 = _3725;
                        frontier_phi_72_pred_4 = _3724;
                        frontier_phi_72_pred_5 = _3723;
                    }
                    _3396 = frontier_phi_72_pred;
                    _3394 = frontier_phi_72_pred_1;
                    _3392 = frontier_phi_72_pred_2;
                    _3390 = frontier_phi_72_pred_3;
                    _3388 = frontier_phi_72_pred_4;
                    _3386 = frontier_phi_72_pred_5;
                    uint _3531 = _3530 + 1u;
                    if (_3531 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3524 = _3386;
                        _3525 = _3388;
                        _3526 = _3390;
                        _3527 = _3392;
                        _3528 = _3394;
                        _3529 = _3396;
                        _3530 = _3531;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3396;
                frontier_phi_60_61_ladder_1 = _3394;
                frontier_phi_60_61_ladder_2 = _3390;
                frontier_phi_60_61_ladder_3 = _3388;
                frontier_phi_60_61_ladder_4 = _3386;
                frontier_phi_60_61_ladder_5 = _3392;
            }
            else
            {
                frontier_phi_60_61_ladder = _3282;
                frontier_phi_60_61_ladder_1 = _3280;
                frontier_phi_60_61_ladder_2 = _3276;
                frontier_phi_60_61_ladder_3 = _3274;
                frontier_phi_60_61_ladder_4 = _3272;
                frontier_phi_60_61_ladder_5 = _3278;
            }
            _3385 = frontier_phi_60_61_ladder_4;
            _3387 = frontier_phi_60_61_ladder_3;
            _3389 = frontier_phi_60_61_ladder_2;
            _3391 = frontier_phi_60_61_ladder_5;
            _3393 = frontier_phi_60_61_ladder_1;
            _3395 = frontier_phi_60_61_ladder;
        }
        float _3400 = isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0));
        _3205 = (_3400 * _3391) + _2717;
        _3207 = (_3400 * _3393) + _2719;
        _3209 = (_3400 * _3395) + _2721;
        _3211 = ((_3385 * _1162) * _3400) + _3055;
        _3213 = ((_3387 * _1164) * _3400) + _3057;
        _3215 = ((_3389 * _1165) * _3400) + _3059;
    }
    else
    {
        _3205 = _2717;
        _3207 = _2719;
        _3209 = _2721;
        _3211 = _3055;
        _3213 = _3057;
        _3215 = _3059;
    }
    float _5196 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _5207 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _5218 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    uint _3235 = _295 + 6u;
    float _3243 = _1100 / cbSceneParam._m0[86u].x;
    float _3244 = _1101 / cbSceneParam._m0[86u].y;
    vec4 _3258 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3243, _3244, (log2((isnan(cbSceneParam._m0[77u].w) ? _1035 : (isnan(_1035) ? cbSceneParam._m0[77u].w : min(_1035, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3260 = _3258.x;
    float _3261 = _3258.y;
    float _3262 = _3258.z;
    float _3263 = _3258.w;
    float _3335;
    float _3337;
    float _3339;
    float _3341;
    if (_1035 > cbSceneParam._m0[78u].w)
    {
        float _3297 = isnan(_1035) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1035 : min(cbSceneParam._m0[80u].w, _1035));
        float _3298 = _3297 / _1035;
        float _3309 = _3298 * _1085;
        float _3310 = _1086 * _3298;
        float _3311 = (-0.0) - _3310;
        float _3313 = _3298 * _1087;
        float _3315 = (cbSceneParam._m0[77u].w * _3311) / _3297;
        float _3316 = _3315 + cbSceneParam._m0[79u].w;
        float _3317 = cbSceneParam._m0[79u].w - _3310;
        float _3323 = sqrt(((_3309 * _3309) + (_3310 * _3310)) + (_3313 * _3313));
        float _3326 = (1.0 - (cbSceneParam._m0[77u].w / _3297)) * _3323;
        float _3331 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3333 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3486;
        if (abs((_3311 - _3315) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3486 = ((((_3316 > 0.0) ? exp2(_3331 * _3316) : (2.0 - exp2(_3333 * _3316))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3326;
        }
        else
        {
            float _3446 = 1.0 / cbSceneParam._m0[80u].x;
            float _3447 = isnan(_3317) ? _3316 : (isnan(_3316) ? _3317 : max(_3316, _3317));
            float _3448 = isnan(_3317) ? _3316 : (isnan(_3316) ? _3317 : min(_3316, _3317));
            float _3457 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : min(_3447, 0.0));
            float _3458 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : min(_3448, 0.0));
            _3486 = ((abs(_3323 / _3311) * cbSceneParam._m0[80u].y) * ((((_3457 - _3458) * 2.0) - ((exp2(_3331 * (isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0)))) - exp2(_3331 * (isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))))) * _3446)) - ((exp2(_3333 * _3457) - exp2(_3333 * _3458)) * _3446))) + (_3326 * cbSceneParam._m0[80u].z);
        }
        vec4 _3488 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3243, _3244, 1.0), 0.0);
        float _3497 = exp2((_3486 * (-1.44269502162933349609375)) * (1.0 - _3488.w));
        float _3498 = log2(_3497);
        float _3514 = log2(_3263);
        _3335 = (exp2(_3514 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].x)) * _3488.x) / cbSceneParam._m0[78u].x)) + _3260;
        _3337 = (exp2(_3514 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].y)) * _3488.y) / cbSceneParam._m0[78u].y)) + _3261;
        _3339 = (exp2(_3514 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3498 * cbSceneParam._m0[78u].z)) * _3488.z) / cbSceneParam._m0[78u].z)) + _3262;
        _3341 = _3497 * _3263;
    }
    else
    {
        _3335 = _3260;
        _3337 = _3261;
        _3339 = _3262;
        _3341 = _3263;
    }
    float _3353 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3354 = _3353 == 3.0;
    float _3355 = log2(_3341);
    float _3362 = exp2(_3355 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0))) * (_3205 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1178))) + ((_3211 + ((isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3363 = exp2(_3355 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5207 : (isnan(_5207) ? 1.0 : min(_5207, 1.0))) * (_3207 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1178))) + ((_3213 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3364 = exp2(_3355 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0))) * (_3209 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1178))) + ((_3215 + ((isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3373 = (_3353 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3373 * (_3354 ? _3362 : (_3362 + (cbSceneParam._m0[72u].w * _3335)));
    SV_Target.y = _3373 * (_3354 ? _3363 : (_3363 + (cbSceneParam._m0[72u].w * _3337)));
    SV_Target.z = _3373 * (_3354 ? _3364 : (_3364 + (cbSceneParam._m0[72u].w * _3339)));
    SV_Target.w = cbInstanceData._m0[_3235].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3235].w;
}


