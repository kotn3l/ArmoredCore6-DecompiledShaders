#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1728;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4334 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4345 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4356 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _392 = _387.x * cbMtdParam._m0[11u].x;
    float _393 = _387.y * cbMtdParam._m0[11u].y;
    float _394 = _387.z * cbMtdParam._m0[11u].z;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _481 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _498 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _432.x) * 2.0) - ((((_469 - _481) * cbMtdParam._m0[23u].w) + _481) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4367 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _506 = (_499 * ((_413.x * cbMtdParam._m0[12u].x) - _392)) + _392;
    float _507 = (_499 * ((_413.y * cbMtdParam._m0[12u].y) - _393)) + _393;
    float _508 = (_499 * ((_413.z * cbMtdParam._m0[12u].z) - _394)) + _394;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _571 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _432.y) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[23u].w) + _557) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4378 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _579 = (_572 * ((_525.x * cbMtdParam._m0[13u].x) - _506)) + _506;
    float _580 = (_572 * ((_525.y * cbMtdParam._m0[13u].y) - _507)) + _507;
    float _581 = (_572 * ((_525.z * cbMtdParam._m0[13u].z) - _508)) + _508;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _619 = _617.x;
    float _629 = dot(vec4(_619, _617.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _641 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _432.z) * 2.0) - ((((_619 - _629) * cbMtdParam._m0[23u].w) + _629) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4389 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _652 = (_361.x * cbMtdParam._m0[9u].x) * ((_642 * ((_600.x * cbMtdParam._m0[14u].x) - _579)) + _579);
    float _653 = (_361.y * cbMtdParam._m0[9u].y) * ((_642 * ((_600.y * cbMtdParam._m0[14u].y) - _580)) + _580);
    float _654 = (_361.z * cbMtdParam._m0[9u].z) * ((_642 * ((_600.z * cbMtdParam._m0[14u].z) - _581)) + _581);
    float _658 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _652;
    float _661 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _653;
    float _664 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _654;
    float _672 = (((_652 - _658) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) + _658) * 4.55000019073486328125;
    float _674 = (((_653 - _661) * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) + _661) * 4.55000019073486328125;
    float _676 = (((_654 - _664) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) + _664) * 4.55000019073486328125;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _324) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _325) + cbTextureTilingScale._m0[14u].w));
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _755 = _753.x;
    float _756 = _753.y;
    float _757 = _753.z;
    float _764 = ((_736.x - _755) * _499) + _755;
    float _765 = ((_736.y - _756) * _499) + _756;
    float _766 = ((_736.z - _757) * _499) + _757;
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _789 = ((_778.x - _764) * _572) + _764;
    float _790 = ((_778.y - _765) * _572) + _765;
    float _791 = ((_778.z - _766) * _572) + _766;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _816 = ((_803.z - _791) * _642) + _791;
    float _819 = ((((_803.x - _789) * _642) + _789) * 2.0) + (-1.0);
    float _820 = ((((_803.y - _790) * _642) + _790) * 2.0) + (-1.0);
    float _821 = dot(vec2(_819, _820), vec2(_819, _820));
    float _4400 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _826 = sqrt(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))));
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _865 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _867 = _865.x;
    float _868 = 1.0 - _867;
    float _876 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _879 = ((isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : min(_876, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _888 = (_879 - ((((((_867 - _868) * cbMtdParam._m0[24u].z) + _868) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _879))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4421 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _889 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _896 = (_889 * ((_694.x * cbMtdParam._m0[18u].x) - _672)) + _672;
    float _897 = (_889 * ((_694.y * cbMtdParam._m0[18u].y) - _674)) + _674;
    float _898 = (_889 * ((_694.z * cbMtdParam._m0[18u].z) - _676)) + _676;
    float _913 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _914 = _913 * TEXCOORD.z;
    float _915 = _913 * TEXCOORD.w;
    vec4 _927 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _914) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _915) + cbTextureTilingScale._m0[19u].w));
    float _929 = _927.x;
    float _930 = 1.0 - _929;
    float _955 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_929 - _930) * cbMtdParam._m0[24u].w) + _930) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4432 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _956 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _964 = ((((cbMtdParam._m0[10u].x - _896) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _956) + _896;
    float _965 = ((((cbMtdParam._m0[10u].y - _897) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _956) + _897;
    float _966 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _898)) * _956) + _898;
    vec4 _992 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _994 = _992.x;
    float _1011 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _994) * _499) + _994;
    float _1028 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _1011) * _572) + _1011;
    float _1045 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _1028) * _642) + _1028;
    float _1051 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1045) * cbMtdParam._m0[19u].z) + _1045;
    float _1053 = _1051 - (_1051 * _889);
    float _1055 = _1053 - (_1053 * _956);
    float _1060 = (((_713.z - _816) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _816;
    float _1064 = ((_840.z - _1060) * cbMtdParam._m0[19u].w) + _1060;
    vec4 _1080 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1087 = (_1080.x * 2.0) + (-1.0);
    float _1088 = (_1080.y * 2.0) + (-1.0);
    float _1089 = dot(vec2(_1087, _1088), vec2(_1087, _1088));
    float _4443 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1097 = (_889 * (_1080.z - _1064)) + _1064;
    float _1100 = ((cbMtdParam._m0[23u].x - _1097) * _956) + _1097;
    vec4 _1123 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _914) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _915) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1129 = (_1123.x * 2.0) + (-1.0);
    float _1130 = (_1123.y * 2.0) + (-1.0);
    float _1131 = dot(vec2(_1129, _1130), vec2(_1129, _1130));
    float _4454 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _1145 = (_819 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_713.x * 2.0) + (-1.0)))) + (((_840.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1146 = (_820 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_713.y * 2.0) + (-1.0)))) + (((_840.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1158 = (((_1087 - _1145) + (cbMtdParam._m0[21u].x * _1145)) * _889) + _1145;
    float _1159 = (((_1088 - _1146) + (cbMtdParam._m0[21u].x * _1146)) * _889) + _1146;
    float _1160 = (_889 * (sqrt(1.0 - (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) - _826)) + _826;
    float _1171 = (((_1129 - _1158) + (_1158 * cbMtdParam._m0[22u].z)) * _956) + _1158;
    float _1172 = (((_1130 - _1159) + (_1159 * cbMtdParam._m0[22u].z)) * _956) + _1159;
    float _1173 = ((sqrt(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) - _1160) * _956) + _1160;
    float _1175 = cbMtdParam._m0[22u].x + _840.w;
    float _1178 = fma(_1173, _273 * NORMAL.x, fma(_1172, _280 * TANGENT.x, (_266 * _258) * _1171));
    float _1181 = fma(_1173, _273 * NORMAL.y, fma(_1172, _280 * TANGENT.y, (_266 * _259) * _1171));
    float _1184 = fma(_1173, _273 * NORMAL.z, fma(_1172, _280 * TANGENT.z, (_266 * _260) * _1171));
    float _1188 = inversesqrt(dot(vec3(_1178, _1181, _1184), vec3(_1178, _1181, _1184)));
    float _1189 = _1188 * _1178;
    float _1190 = _1188 * _1181;
    float _1191 = _1188 * _1184;
    float _4465 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1192 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _4476 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _4487 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4498 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4509 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4520 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1197 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _1211 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1251);
    float _1262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1251);
    float _1263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1251);
    float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
    float _1268 = _1261 * _1267;
    float _1269 = _1262 * _1267;
    float _1270 = _1263 * _1267;
    float _1276 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1277 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1295 = fma(_1191, cbSceneParam._m0[5u].z, fma(_1190, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1189));
    float _1298 = fma(_1191, cbSceneParam._m0[6u].z, fma(_1190, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1189));
    float _1301 = fma(_1191, cbSceneParam._m0[7u].z, fma(_1190, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1189));
    uint _1315 = (_305 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1321 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * cbInstanceData._m0[_1315].x;
    float _1322 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * cbInstanceData._m0[_1315].y;
    float _1323 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * cbInstanceData._m0[_1315].z;
    float _4531 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1324 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _1325 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _4553 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    float _1326 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _1327 = 1.0 - _1197;
    float _1328 = _1324 * _1327;
    float _1329 = _1325 * _1327;
    float _1330 = _1326 * _1327;
    float _1335 = (_1324 + (-0.039999999105930328369140625)) * _1197;
    float _1336 = (_1325 + (-0.039999999105930328369140625)) * _1197;
    float _1337 = (_1326 + (-0.039999999105930328369140625)) * _1197;
    float _1338 = _1335 + 0.039999999105930328369140625;
    float _1340 = _1336 + 0.039999999105930328369140625;
    float _1341 = _1337 + 0.039999999105930328369140625;
    vec4 _1350 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1276, cbSceneParam._m0[86u].y * _1277));
    float _1354 = ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * TEXCOORD_5.w) * _1350.x;
    float _1355 = dot(vec3(_1189, _1190, _1191), vec3(_1268, _1269, _1270));
    float _1358 = _1355 * 2.0;
    float _1362 = (_1358 * _1189) - _1268;
    float _1363 = (_1358 * _1190) - _1269;
    float _1364 = (_1358 * _1191) - _1270;
    float _1368 = abs(dot(vec3(_1268, _1269, _1270), vec3(_1189, _1190, _1191)));
    float _4564 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
    float _1370 = sqrt(_1192);
    float _1383 = exp2((_1370 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1370 * 3.0));
    float _1389 = (1.0 - _1383) * ((_1370 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1390 = _1383 * _1370;
    float _1418 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1422 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1426 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1727;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1452 = fma(_1426, cbModelParam._m0[26u].z, fma(_1422, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1418));
        float _1456 = fma(_1426, cbModelParam._m0[27u].z, fma(_1422, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1418));
        float _1460 = fma(_1426, cbModelParam._m0[28u].z, fma(_1422, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1418));
        float _1485 = _1418 + _1189;
        float _1486 = _1422 + _1190;
        float _1487 = _1426 + _1191;
        float _1497 = fma(_1487, cbModelParam._m0[26u].z, fma(_1486, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1485)) - _1452;
        float _1498 = fma(_1487, cbModelParam._m0[27u].z, fma(_1486, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1485)) - _1456;
        float _1499 = fma(_1487, cbModelParam._m0[28u].z, fma(_1486, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1485)) - _1460;
        float _1503 = inversesqrt(dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499)));
        float _1516 = ((_1503 * _1497) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1452 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1503 * _1498) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1456 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1503 * _1499) / cbModelParam._m0[34u].z) + ((((((_1460 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1516, _1517, _1518), 0.0);
        float _1555 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1521.x + (-0.5));
        float _1557 = _1555 * (_1521.y + (-0.5));
        float _1558 = _1555 * (_1521.z + (-0.5));
        float _1565 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1528.x + (-0.5));
        float _1567 = _1565 * (_1528.y + (-0.5));
        float _1568 = _1565 * (_1528.z + (-0.5));
        float _1575 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1535.x + (-0.5));
        float _1577 = _1575 * (_1535.y + (-0.5));
        float _1578 = _1575 * (_1535.z + (-0.5));
        float _1585 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1542.x + (-0.5));
        float _1587 = _1585 * (_1542.y + (-0.5));
        float _1588 = _1585 * (_1542.z + (-0.5));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = _1556 * 0.5;
        float _1593 = _1566 * 0.5;
        float _1594 = _1576 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1609 = (dot(vec3(_1189, _1190, _1191), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1619 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4612 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1621 + 1.0))) + _1626) * _1589;
        float _1636 = _1557 * 0.5;
        float _1637 = _1567 * 0.5;
        float _1638 = _1577 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_1189, _1190, _1191), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4623 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4634 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4645 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_1663 + 1.0))) + _1668) * _1590;
        float _1678 = _1558 * 0.5;
        float _1679 = _1568 * 0.5;
        float _1680 = _1578 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_1189, _1190, _1191), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4656 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4667 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4678 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_1705 + 1.0))) + _1710) * _1591;
        _1727 = _1558;
        _1729 = _1557;
        _1730 = _1556;
        _1731 = _1568;
        _1732 = _1567;
        _1733 = _1566;
        _1734 = _1578;
        _1735 = _1577;
        _1736 = _1576;
        _1737 = _1591;
        _1738 = _1590;
        _1739 = _1589;
        _1740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
    }
    else
    {
        _1727 = _1728;
        _1729 = _1728;
        _1730 = _1728;
        _1731 = _1728;
        _1732 = _1728;
        _1733 = _1728;
        _1734 = _1728;
        _1735 = _1728;
        _1736 = _1728;
        _1737 = _1728;
        _1738 = _1728;
        _1739 = _1728;
        _1740 = 0.0;
        _1741 = 0.0;
        _1742 = 0.0;
    }
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    float _2047;
    float _2048;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1765 = fma(_1426, cbModelParam._m0[30u].z, fma(_1422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418));
        float _1769 = fma(_1426, cbModelParam._m0[31u].z, fma(_1422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418));
        float _1773 = fma(_1426, cbModelParam._m0[32u].z, fma(_1422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418));
        float _1796 = _1418 + _1189;
        float _1797 = _1422 + _1190;
        float _1798 = _1426 + _1191;
        float _1808 = fma(_1798, cbModelParam._m0[30u].z, fma(_1797, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1796)) - _1765;
        float _1809 = fma(_1798, cbModelParam._m0[31u].z, fma(_1797, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1796)) - _1769;
        float _1810 = fma(_1798, cbModelParam._m0[32u].z, fma(_1797, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1796)) - _1773;
        float _1814 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
        float _1827 = ((_1814 * _1808) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1765 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1828 = ((_1814 * _1809) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1769 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1829 = ((_1814 * _1810) / cbModelParam._m0[35u].z) + ((((((_1773 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1831 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1827, _1828, _1829), 0.0);
        vec4 _1838 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1827, _1828, _1829), 0.0);
        vec4 _1845 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1827, _1828, _1829), 0.0);
        vec4 _1852 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1827, _1828, _1829), 0.0);
        float _1864 = exp2((_1831.w + (-0.5)) * 20.0) * 2.0;
        float _1865 = _1864 * (_1831.x + (-0.5));
        float _1866 = _1864 * (_1831.y + (-0.5));
        float _1867 = _1864 * (_1831.z + (-0.5));
        float _1874 = exp2((_1838.w + (-0.5)) * 20.0) * 2.0;
        float _1875 = _1874 * (_1838.x + (-0.5));
        float _1876 = _1874 * (_1838.y + (-0.5));
        float _1877 = _1874 * (_1838.z + (-0.5));
        float _1884 = exp2((_1845.w + (-0.5)) * 20.0) * 2.0;
        float _1885 = _1884 * (_1845.x + (-0.5));
        float _1886 = _1884 * (_1845.y + (-0.5));
        float _1887 = _1884 * (_1845.z + (-0.5));
        float _1894 = exp2((_1852.w + (-0.5)) * 20.0) * 2.0;
        float _1895 = _1894 * (_1852.x + (-0.5));
        float _1896 = _1894 * (_1852.y + (-0.5));
        float _1897 = _1894 * (_1852.z + (-0.5));
        float _1898 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1899 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1900 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1901 = _1865 * 0.5;
        float _1902 = _1875 * 0.5;
        float _1903 = _1885 * 0.5;
        float _1904 = dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903));
        float _1909 = (_1904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1904);
        float _1917 = (dot(vec3(_1189, _1190, _1191), vec3(_1909 * _1901, _1909 * _1902, _1909 * _1903)) + 1.0) * 0.5;
        float _4719 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1926 = sqrt(((_1902 * _1902) + (_1901 * _1901)) + (_1903 * _1903)) / (_1898 + 9.9999997473787516355514526367188e-06);
        float _4730 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _1928 = _1927 * 2.0;
        float _1932 = (1.0 - _1927) / (_1927 + 1.0);
        float _4741 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
        float _1933 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _1942 = ((((1.0 - _1933) * (_1928 + 2.0)) * exp2(log2(isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_1928 + 1.0))) + _1933) * _1898;
        float _1943 = _1866 * 0.5;
        float _1944 = _1876 * 0.5;
        float _1945 = _1886 * 0.5;
        float _1946 = dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945));
        float _1951 = (_1946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1946);
        float _1959 = (dot(vec3(_1189, _1190, _1191), vec3(_1951 * _1943, _1951 * _1944, _1951 * _1945)) + 1.0) * 0.5;
        float _4752 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1968 = sqrt(((_1944 * _1944) + (_1943 * _1943)) + (_1945 * _1945)) / (_1899 + 9.9999997473787516355514526367188e-06);
        float _4763 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _1970 = _1969 * 2.0;
        float _1974 = (1.0 - _1969) / (_1969 + 1.0);
        float _4774 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1975 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _1984 = ((((1.0 - _1975) * (_1970 + 2.0)) * exp2(log2(isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_1970 + 1.0))) + _1975) * _1899;
        float _1985 = _1867 * 0.5;
        float _1986 = _1877 * 0.5;
        float _1987 = _1887 * 0.5;
        float _1988 = dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987));
        float _1993 = (_1988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1988);
        float _2001 = (dot(vec3(_1189, _1190, _1191), vec3(_1993 * _1985, _1993 * _1986, _1993 * _1987)) + 1.0) * 0.5;
        float _4785 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2010 = sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987)) / (_1900 + 9.9999997473787516355514526367188e-06);
        float _4796 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2012 = _2011 * 2.0;
        float _2016 = (1.0 - _2011) / (_2011 + 1.0);
        float _4807 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2017 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2026 = ((((1.0 - _2017) * (_2012 + 2.0)) * exp2(log2(isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2012 + 1.0))) + _2017) * _1900;
        _2034 = _1867;
        _2035 = _1866;
        _2036 = _1865;
        _2037 = _1877;
        _2038 = _1876;
        _2039 = _1875;
        _2040 = _1887;
        _2041 = _1886;
        _2042 = _1885;
        _2043 = _1900;
        _2044 = _1899;
        _2045 = _1898;
        _2046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)));
        _2047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0)));
        _2048 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
    }
    else
    {
        _2034 = _1728;
        _2035 = _1728;
        _2036 = _1728;
        _2037 = _1728;
        _2038 = _1728;
        _2039 = _1728;
        _2040 = _1728;
        _2041 = _1728;
        _2042 = _1728;
        _2043 = _1728;
        _2044 = _1728;
        _2045 = _1728;
        _2046 = 0.0;
        _2047 = 0.0;
        _2048 = 0.0;
    }
    float _2058 = (cbModelParam._m0[1u].x * (_2046 - _1740)) + _1740;
    float _2059 = (cbModelParam._m0[1u].x * (_2047 - _1741)) + _1741;
    float _2060 = (cbModelParam._m0[1u].x * (_2048 - _1742)) + _1742;
    float _2081 = fma(_2060, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2058 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2060, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2058 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2060, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2058));
    float _2102 = _1362 * 0.5;
    float _2103 = _1363 * 0.5;
    float _2104 = _1364 * 0.5;
    float _2105 = dot(vec4(_2102, _2103, _2104, 1.0), vec4(_2036, _2039, _2042, _2045));
    float _2108 = dot(vec4(_2102, _2103, _2104, 1.0), vec4(_2035, _2038, _2041, _2044));
    float _2111 = dot(vec4(_2102, _2103, _2104, 1.0), vec4(_2034, _2037, _2040, _2043));
    float _2145;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2118 = dot(vec4(_2102, _2103, _2104, 1.0), vec4(_1727, _1731, _1734, _1737));
        float _2122 = dot(vec4(_2102, _2103, _2104, 1.0), vec4(_1729, _1732, _1735, _1738));
        float _2126 = dot(vec4(_2102, _2103, _2104, 1.0), vec4(_1730, _1733, _1736, _1739));
        float _2133 = dot(vec4(cbModelParam._m0[39u]), vec4(_2102, _2103, _2104, 1.0));
        _2145 = dot(vec3(isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0)), isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0)), isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2133) ? 0.0 : (isnan(0.0) ? _2133 : max(0.0, _2133))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2145 = 1.0;
    }
    float _2156;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2147 = dot(vec4(cbModelParam._m0[40u]), vec4(_2102, _2103, _2104, 1.0));
        _2156 = dot(vec3(isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0)), isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0)), isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2147) ? 0.0 : (isnan(0.0) ? _2147 : max(0.0, _2147))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2156 = 1.0;
    }
    float _2160 = (_2156 * cbModelParam._m0[1u].x) + (_2145 * (1.0 - cbModelParam._m0[1u].x));
    float _2170 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1192);
    float _2171 = isnan(_2170) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2170 : min(cbModelParam._m0[25u].z, _2170));
    float _2251;
    float _2253;
    float _2255;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2218 = fma(_1426, cbModelParam._m0[13u].z, fma(_1422, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1418)) + cbModelParam._m0[13u].w;
        float _2222 = fma(_1426, cbModelParam._m0[14u].z, fma(_1422, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1418)) + cbModelParam._m0[14u].w;
        float _2226 = fma(_1426, cbModelParam._m0[15u].z, fma(_1422, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1418)) + cbModelParam._m0[15u].w;
        float _2229 = fma(_1364, cbModelParam._m0[13u].z, fma(_1363, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1362));
        float _2232 = fma(_1364, cbModelParam._m0[14u].z, fma(_1363, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1362));
        float _2235 = fma(_1364, cbModelParam._m0[15u].z, fma(_1363, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1362));
        float _2263;
        if (_2229 > 0.0)
        {
            _2263 = abs((1.0 - _2218) / _2229);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2218 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2263 = frontier_phi_14_12_ladder;
        }
        float _2434;
        if (_2232 > 0.0)
        {
            _2434 = abs((1.0 - _2222) / _2232);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2232 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2222 + 1.0) / _2232);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2434 = frontier_phi_23_19_ladder;
        }
        float _2729;
        if (_2235 > 0.0)
        {
            _2729 = abs((1.0 - _2226) / _2235);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2235 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2226 + 1.0) / _2235);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2729 = frontier_phi_35_30_ladder;
        }
        float _2731 = isnan(_2434) ? _2263 : (isnan(_2263) ? _2434 : min(_2263, _2434));
        float _2732 = isnan(_2729) ? _2731 : (isnan(_2731) ? _2729 : min(_2731, _2729));
        float _2736 = (_2732 * _2229) + _2218;
        float _2737 = (_2732 * _2232) + _2222;
        float _2738 = (_2732 * _2235) + _2226;
        float _2739 = _2732 * 9.9999997473787516355514526367188e-05;
        float _2741 = (-1.0) - _2739;
        float _2743 = _2739 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2738 > _2743) || ((_2738 < _2741) || ((_2737 > _2743) || ((_2737 < _2741) || ((_2736 < _2741) || (_2736 > _2743))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2738, cbModelParam._m0[9u].z, fma(_2737, cbModelParam._m0[9u].y, _2736 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2738, cbModelParam._m0[10u].z, fma(_2737, cbModelParam._m0[10u].y, _2736 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2738, cbModelParam._m0[11u].z, fma(_2737, cbModelParam._m0[11u].y, _2736 * cbModelParam._m0[11u].x))), _2171);
            frontier_phi_13_35_ladder = _2883.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2883.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2883.x * cbModelParam._m0[1u].y;
        }
        _2251 = frontier_phi_13_35_ladder_2;
        _2253 = frontier_phi_13_35_ladder_1;
        _2255 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2239 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1362, _1363, _1364), _2171);
        _2251 = _2239.x * cbModelParam._m0[1u].y;
        _2253 = _2239.y * cbModelParam._m0[1u].y;
        _2255 = _2239.z * cbModelParam._m0[1u].y;
    }
    float _2259 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1192);
    float _2260 = isnan(_2259) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2259 : min(cbModelParam._m0[25u].w, _2259));
    float _2349;
    float _2351;
    float _2353;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2313 = fma(_1426, cbModelParam._m0[21u].z, fma(_1422, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1418)) + cbModelParam._m0[21u].w;
        float _2317 = fma(_1426, cbModelParam._m0[22u].z, fma(_1422, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1418)) + cbModelParam._m0[22u].w;
        float _2321 = fma(_1426, cbModelParam._m0[23u].z, fma(_1422, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1418)) + cbModelParam._m0[23u].w;
        float _2324 = fma(_1364, cbModelParam._m0[21u].z, fma(_1363, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1362));
        float _2327 = fma(_1364, cbModelParam._m0[22u].z, fma(_1363, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1362));
        float _2330 = fma(_1364, cbModelParam._m0[23u].z, fma(_1363, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1362));
        float _2439;
        if (_2324 > 0.0)
        {
            _2439 = abs((1.0 - _2313) / _2324);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2324 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2313 + 1.0) / _2324);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2439 = frontier_phi_25_21_ladder;
        }
        float _2756;
        if (_2327 > 0.0)
        {
            _2756 = abs((1.0 - _2317) / _2327);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2327 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2317 + 1.0) / _2327);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2756 = frontier_phi_37_32_ladder;
        }
        float _3094;
        if (_2330 > 0.0)
        {
            _3094 = abs((1.0 - _2321) / _2330);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2330 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2321 + 1.0) / _2330);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3094 = frontier_phi_47_44_ladder;
        }
        float _3096 = isnan(_2756) ? _2439 : (isnan(_2439) ? _2756 : min(_2439, _2756));
        float _3097 = isnan(_3094) ? _3096 : (isnan(_3096) ? _3094 : min(_3096, _3094));
        float _3101 = (_3097 * _2324) + _2313;
        float _3102 = (_3097 * _2327) + _2317;
        float _3103 = (_3097 * _2330) + _2321;
        float _3104 = _3097 * 9.9999997473787516355514526367188e-05;
        float _3105 = (-1.0) - _3104;
        float _3107 = _3104 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3103 > _3107) || ((_3103 < _3105) || ((_3102 > _3107) || ((_3102 < _3105) || ((_3101 < _3105) || (_3101 > _3107))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3225 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3103, cbModelParam._m0[17u].z, fma(_3102, cbModelParam._m0[17u].y, _3101 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3103, cbModelParam._m0[18u].z, fma(_3102, cbModelParam._m0[18u].y, _3101 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3103, cbModelParam._m0[19u].z, fma(_3102, cbModelParam._m0[19u].y, _3101 * cbModelParam._m0[19u].x))), _2260);
            frontier_phi_22_47_ladder = _3225.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3225.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3225.x * cbModelParam._m0[1u].z;
        }
        _2349 = frontier_phi_22_47_ladder_2;
        _2351 = frontier_phi_22_47_ladder_1;
        _2353 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2333 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1362, _1363, _1364), _2260);
        _2349 = _2333.x * cbModelParam._m0[1u].z;
        _2351 = _2333.y * cbModelParam._m0[1u].z;
        _2353 = _2333.z * cbModelParam._m0[1u].z;
    }
    float _2366 = (((_1389 * _1338) + _1390) * _1354) * ((cbModelParam._m0[1u].w * (_2349 - _2251)) + _2251);
    float _2368 = (((_1389 * _1340) + _1390) * _1354) * ((cbModelParam._m0[1u].w * (_2351 - _2253)) + _2253);
    float _2370 = (((_1389 * _1341) + _1390) * _1354) * ((cbModelParam._m0[1u].w * (_2353 - _2255)) + _2255);
    float _2373 = fma(_2370, cbSceneParam._m0[89u].z, fma(_2368, cbSceneParam._m0[89u].y, _2366 * cbSceneParam._m0[89u].x));
    float _2376 = fma(_2370, cbSceneParam._m0[90u].z, fma(_2368, cbSceneParam._m0[90u].y, _2366 * cbSceneParam._m0[90u].x));
    float _2379 = fma(_2370, cbSceneParam._m0[91u].z, fma(_2368, cbSceneParam._m0[91u].y, _2366 * cbSceneParam._m0[91u].x));
    float _2413 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2417 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2421 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2425 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2426 = _2413 / _2425;
    float _2427 = _2417 / _2425;
    float _2428 = _2421 / _2425;
    float _2575;
    float _2576;
    float _2577;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2455 = ((uint(_2428 > cbSceneParam._m0[59u].y) + uint(_2428 > cbSceneParam._m0[59u].x)) + uint(_2428 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2456 = _2455 + 43u;
        uint _2464 = _2455 + 44u;
        uint _2472 = _2455 + 45u;
        uint _2480 = _2455 + 46u;
        float _2491 = fma(_2425, cbSceneParam._m0[_2456].w, fma(_2421, cbSceneParam._m0[_2456].z, fma(_2417, cbSceneParam._m0[_2456].y, _2413 * cbSceneParam._m0[_2456].x)));
        float _2495 = fma(_2425, cbSceneParam._m0[_2464].w, fma(_2421, cbSceneParam._m0[_2464].z, fma(_2417, cbSceneParam._m0[_2464].y, _2413 * cbSceneParam._m0[_2464].x)));
        float _2503 = fma(_2425, cbSceneParam._m0[_2480].w, fma(_2421, cbSceneParam._m0[_2480].z, fma(_2417, cbSceneParam._m0[_2480].y, _2413 * cbSceneParam._m0[_2480].x)));
        float _2508 = cbSceneParam._m0[33u].z * _2503;
        float _2510 = cbSceneParam._m0[33u].w * _2503;
        float _2513 = fma(_2425, cbSceneParam._m0[_2472].w, fma(_2421, cbSceneParam._m0[_2472].z, fma(_2417, cbSceneParam._m0[_2472].y, _2413 * cbSceneParam._m0[_2472].x))) / _2503;
        float _2561 = (cbSceneParam._m0[33u].x - sqrt(((_2427 * _2427) + (_2426 * _2426)) + (_2428 * _2428))) * cbSceneParam._m0[33u].y;
        float _4933 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2568 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2508 + _2491) / _2503, (_2510 + _2495) / _2503), _2513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2510 + _2491) / _2503, (_2495 - _2508) / _2503), _2513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2491 - _2508) / _2503, (_2495 - _2510) / _2503), _2513), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2491 - _2510) / _2503, (_2508 + _2495) / _2503), _2513), 0.0)).x), vec4(0.25)));
        _2575 = 1.0 - (_2568 * cbSceneParam._m0[34u].x);
        _2576 = 1.0 - (_2568 * cbSceneParam._m0[34u].y);
        _2577 = 1.0 - (_2568 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2575 = 1.0;
        _2576 = 1.0;
        _2577 = 1.0;
    }
    float _2641;
    float _2643;
    float _2645;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2629 = fma(_2425, cbSceneParam._m0[63u].w, fma(_2421, cbSceneParam._m0[63u].z, fma(_2417, cbSceneParam._m0[63u].y, _2413 * cbSceneParam._m0[63u].x)));
        float _2630 = fma(_2425, cbSceneParam._m0[60u].w, fma(_2421, cbSceneParam._m0[60u].z, fma(_2417, cbSceneParam._m0[60u].y, _2413 * cbSceneParam._m0[60u].x))) / _2629;
        float _2631 = fma(_2425, cbSceneParam._m0[61u].w, fma(_2421, cbSceneParam._m0[61u].z, fma(_2417, cbSceneParam._m0[61u].y, _2413 * cbSceneParam._m0[61u].x))) / _2629;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2630 >= cbSceneParam._m0[64u].x) && (_2631 >= cbSceneParam._m0[64u].y)) && (_2630 <= cbSceneParam._m0[64u].z)) && (_2631 <= cbSceneParam._m0[64u].w))
        {
            float _2769 = fma(_2425, cbSceneParam._m0[62u].w, fma(_2421, cbSceneParam._m0[62u].z, fma(_2417, cbSceneParam._m0[62u].y, _2413 * cbSceneParam._m0[62u].x))) / _2629;
            float _2773 = isnan(cbSceneParam._m0[41u].w) ? _2769 : (isnan(_2769) ? cbSceneParam._m0[41u].w : max(_2769, cbSceneParam._m0[41u].w));
            float _2816 = (cbSceneParam._m0[33u].x - sqrt(((_2427 * _2427) + (_2426 * _2426)) + (_2428 * _2428))) * cbSceneParam._m0[33u].y;
            float _4949 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
            float _2823 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2630, cbSceneParam._m0[33u].w + _2631), _2773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2630, _2631 - cbSceneParam._m0[33u].z), _2773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2630 - cbSceneParam._m0[33u].z, _2631 - cbSceneParam._m0[33u].w), _2773), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2630 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2631), _2773), 0.0)).x), vec4(0.25)));
            float _2827 = 1.0 - (_2823 * cbSceneParam._m0[34u].x);
            float _2828 = 1.0 - (_2823 * cbSceneParam._m0[34u].y);
            float _2829 = 1.0 - (_2823 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2829) ? _2577 : (isnan(_2577) ? _2829 : min(_2577, _2829));
            frontier_phi_34_33_ladder_1 = isnan(_2828) ? _2576 : (isnan(_2576) ? _2828 : min(_2576, _2828));
            frontier_phi_34_33_ladder_2 = isnan(_2827) ? _2575 : (isnan(_2575) ? _2827 : min(_2575, _2827));
        }
        else
        {
            frontier_phi_34_33_ladder = _2577;
            frontier_phi_34_33_ladder_1 = _2576;
            frontier_phi_34_33_ladder_2 = _2575;
        }
        _2641 = frontier_phi_34_33_ladder_2;
        _2643 = frontier_phi_34_33_ladder_1;
        _2645 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2641 = _2575;
        _2643 = _2576;
        _2645 = _2577;
    }
    uvec4 _2650 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2652 = _2650.x * 14u;
    uint _2653 = _2652 + 13u;
    float _2660 = _1354 + (-1.0);
    float _2665 = (cbLight._m0[_2653].x * _2660) + 1.0;
    float _2666 = (cbLight._m0[_2653].y * _2660) + 1.0;
    float _2667 = (cbLight._m0[_2653].z * _2660) + 1.0;
    float _2668 = (cbLight._m0[_2653].w * _2660) + 1.0;
    uint _2669 = _2652 + 5u;
    float _2675 = isnan(1.0) ? _2666 : (isnan(_2666) ? 1.0 : min(_2666, 1.0));
    uint _2679 = _2652 + 4u;
    float _2688 = isnan(1.0) ? _2665 : (isnan(_2665) ? 1.0 : min(_2665, 1.0));
    uint _2692 = _2652 | 1u;
    float _2703 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_1189, _1190, _1191));
    float _2706 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_1189, _1190, _1191));
    float _4985 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _4996 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2711 = (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0))) * 0.3183098733425140380859375;
    float _2713 = (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * 0.3183098733425140380859375;
    float _2720 = ((cbLight._m0[_2669].x * _2675) * _2713) + (((cbLight._m0[_2679].x * _2641) * _2688) * _2711);
    float _2721 = ((_2675 * cbLight._m0[_2669].y) * _2713) + (((cbLight._m0[_2679].y * _2643) * _2688) * _2711);
    float _2722 = ((_2675 * cbLight._m0[_2669].z) * _2713) + (((cbLight._m0[_2679].z * _2645) * _2688) * _2711);
    uvec4 _2726 = floatBitsToUint(cbLight._m0[_2652 + 12u]);
    bool _2728 = _2726.x == 0u;
    float _2830;
    float _2832;
    float _2834;
    if (_2728)
    {
        _2830 = _2720;
        _2832 = _2721;
        _2834 = _2722;
    }
    else
    {
        uint _2838 = _2652 + 6u;
        float _2854 = (dot(vec3(cbLight._m0[_2652 + 2u].xyz), vec3(_1189, _1190, _1191)) * 0.5) + 0.5;
        float _2855 = _2854 * _2854;
        float _5007 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2856 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _2857 = isnan(1.0) ? _2667 : (isnan(_2667) ? 1.0 : min(_2667, 1.0));
        _2830 = (((cbLight._m0[_2838].x * 0.3183098733425140380859375) * _2856) * _2857) + _2720;
        _2832 = (((cbLight._m0[_2838].y * 0.3183098733425140380859375) * _2856) * _2857) + _2721;
        _2834 = (((cbLight._m0[_2838].z * 0.3183098733425140380859375) * _2856) * _2857) + _2722;
    }
    bool _2837 = _2726.y == 0u;
    float _2892;
    float _2894;
    float _2896;
    if (_2837)
    {
        _2892 = _2830;
        _2894 = _2832;
        _2896 = _2834;
    }
    else
    {
        uint _3065 = _2652 + 7u;
        float _3081 = (dot(vec3(cbLight._m0[_2652 + 3u].xyz), vec3(_1189, _1190, _1191)) * 0.5) + 0.5;
        float _3082 = _3081 * _3081;
        float _5023 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
        float _3083 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
        float _3084 = isnan(1.0) ? _2668 : (isnan(_2668) ? 1.0 : min(_2668, 1.0));
        _2892 = (((cbLight._m0[_3065].x * 0.3183098733425140380859375) * _3083) * _3084) + _2830;
        _2894 = (((cbLight._m0[_3065].y * 0.3183098733425140380859375) * _3083) * _3084) + _2832;
        _2896 = (((cbLight._m0[_3065].z * 0.3183098733425140380859375) * _3083) * _3084) + _2834;
    }
    uint _2899 = _2652 + 8u;
    float _2912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _1192) * 0.949999988079071044921875);
    float _2913 = _2912 * _2912;
    float _2914 = cbLight._m0[_2652].x + _1268;
    float _2915 = cbLight._m0[_2652].y + _1269;
    float _2916 = cbLight._m0[_2652].z + _1270;
    float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
    float _2921 = _2920 * _2914;
    float _2922 = _2920 * _2915;
    float _2923 = _2920 * _2916;
    float _2924 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_2652].xyz));
    float _5039 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
    float _2927 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
    float _5050 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
    float _2928 = isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0));
    float _2929 = dot(vec3(_1189, _1190, _1191), vec3(_2921, _2922, _2923));
    float _5061 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
    float _2932 = isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0));
    float _2933 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2921, _2922, _2923));
    float _5072 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
    float _2937 = _2913 * _2913;
    float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
    float _2949 = exp2(log2(1.0 - (isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0)))) * 5.0);
    float _2950 = 0.959999978542327880859375 - _1335;
    float _2952 = 0.959999978542327880859375 - _1336;
    float _2953 = 0.959999978542327880859375 - _1337;
    float _2960 = 1.0 - _2913;
    float _2971 = (0.5 / (((_2928 * ((_2927 * _2960) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _2960) + _2913) * _2927))) * _2927;
    float _5083 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
    float _2973 = (isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
    uint _2987 = _2652 + 9u;
    float _2998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _1192) * 0.949999988079071044921875);
    float _2999 = _2998 * _2998;
    float _3000 = cbLight._m0[_2692].x + _1268;
    float _3001 = cbLight._m0[_2692].y + _1269;
    float _3002 = cbLight._m0[_2692].z + _1270;
    float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
    float _3007 = _3006 * _3000;
    float _3008 = _3006 * _3001;
    float _3009 = _3006 * _3002;
    float _3010 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_2692].xyz));
    float _5094 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
    float _3013 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
    float _3014 = dot(vec3(_1189, _1190, _1191), vec3(_3007, _3008, _3009));
    float _5105 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
    float _3017 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
    float _3018 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_3007, _3008, _3009));
    float _5116 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
    float _3022 = _2999 * _2999;
    float _3026 = ((_3017 * _3017) * (_3022 + (-1.0))) + 1.0;
    float _3033 = exp2(log2(1.0 - (isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0)))) * 5.0);
    float _3040 = 1.0 - _2999;
    float _3050 = (0.5 / (((_2928 * ((_3013 * _3040) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _3040) + _2999) * _3013))) * _3013;
    float _5127 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
    float _3052 = (isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0))) * (_3022 / ((_3026 * _3026) * 3.141590118408203125));
    float _3062 = (((((_3033 * _2950) + _1338) * cbLight._m0[_2987].x) * _3052) * _2675) + ((((cbLight._m0[_2899].x * _2641) * ((_2949 * _2950) + _1338)) * _2973) * _2688);
    float _3063 = (((((_3033 * _2952) + _1340) * cbLight._m0[_2987].y) * _3052) * _2675) + ((((cbLight._m0[_2899].y * _2643) * ((_2949 * _2952) + _1340)) * _2973) * _2688);
    float _3064 = (((((_3033 * _2953) + _1341) * cbLight._m0[_2987].z) * _3052) * _2675) + ((((cbLight._m0[_2899].z * _2645) * ((_2949 * _2953) + _1341)) * _2973) * _2688);
    float _3120;
    float _3122;
    float _3124;
    if (_2728)
    {
        _3120 = _3062;
        _3122 = _3063;
        _3124 = _3064;
    }
    else
    {
        uint _3126 = _2652 + 2u;
        uint _3130 = _2652 + 10u;
        float _3144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3126].w)) * _1192) * 0.949999988079071044921875);
        float _3145 = _3144 * _3144;
        float _3146 = cbLight._m0[_3126].x + _1268;
        float _3147 = cbLight._m0[_3126].y + _1269;
        float _3148 = cbLight._m0[_3126].z + _1270;
        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
        float _3153 = _3152 * _3146;
        float _3154 = _3152 * _3147;
        float _3155 = _3152 * _3148;
        float _3156 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_3126].xyz));
        float _5138 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
        float _3159 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
        float _3160 = dot(vec3(_1189, _1190, _1191), vec3(_3153, _3154, _3155));
        float _5149 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
        float _3163 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
        float _3164 = dot(vec3(cbLight._m0[_3126].xyz), vec3(_3153, _3154, _3155));
        float _5160 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
        float _3168 = _3145 * _3145;
        float _3172 = ((_3163 * _3163) * (_3168 + (-1.0))) + 1.0;
        float _3179 = exp2(log2(1.0 - (isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0)))) * 5.0);
        float _3186 = 1.0 - _3145;
        float _3196 = (0.5 / (((_2928 * ((_3159 * _3186) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _3186) + _3145) * _3159))) * _3159;
        float _5171 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
        float _3198 = (isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0))) * (_3168 / ((_3172 * _3172) * 3.141590118408203125));
        float _3199 = isnan(1.0) ? _2667 : (isnan(_2667) ? 1.0 : min(_2667, 1.0));
        _3120 = (((((_3179 * _2950) + _1338) * cbLight._m0[_3130].x) * _3198) * _3199) + _3062;
        _3122 = (((((_3179 * _2952) + _1340) * cbLight._m0[_3130].y) * _3198) * _3199) + _3063;
        _3124 = (((((_3179 * _2953) + _1341) * cbLight._m0[_3130].z) * _3198) * _3199) + _3064;
    }
    float _3230;
    float _3232;
    float _3234;
    if (_2837)
    {
        _3230 = _3120;
        _3232 = _3122;
        _3234 = _3124;
    }
    else
    {
        uint _3241 = _2652 + 3u;
        uint _3245 = _2652 + 11u;
        float _3259 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3241].w)) * _1192) * 0.949999988079071044921875);
        float _3260 = _3259 * _3259;
        float _3261 = cbLight._m0[_3241].x + _1268;
        float _3262 = cbLight._m0[_3241].y + _1269;
        float _3263 = cbLight._m0[_3241].z + _1270;
        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
        float _3268 = _3267 * _3261;
        float _3269 = _3267 * _3262;
        float _3270 = _3267 * _3263;
        float _3271 = dot(vec3(_1189, _1190, _1191), vec3(cbLight._m0[_3241].xyz));
        float _5187 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
        float _3274 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
        float _3275 = dot(vec3(_1189, _1190, _1191), vec3(_3268, _3269, _3270));
        float _5198 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
        float _3278 = isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0));
        float _3279 = dot(vec3(cbLight._m0[_3241].xyz), vec3(_3268, _3269, _3270));
        float _5209 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
        float _3283 = _3260 * _3260;
        float _3287 = ((_3278 * _3278) * (_3283 + (-1.0))) + 1.0;
        float _3294 = exp2(log2(1.0 - (isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0)))) * 5.0);
        float _3301 = 1.0 - _3260;
        float _3311 = (0.5 / (((_2928 * ((_3274 * _3301) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _3301) + _3260) * _3274))) * _3274;
        float _5220 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
        float _3313 = (isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0))) * (_3283 / ((_3287 * _3287) * 3.141590118408203125));
        float _3314 = isnan(1.0) ? _2668 : (isnan(_2668) ? 1.0 : min(_2668, 1.0));
        _3230 = (((((_3294 * _2950) + _1338) * cbLight._m0[_3245].x) * _3313) * _3314) + _3120;
        _3232 = (((((_3294 * _2952) + _1340) * cbLight._m0[_3245].y) * _3313) * _3314) + _3122;
        _3234 = (((((_3294 * _2953) + _1341) * cbLight._m0[_3245].z) * _3313) * _3314) + _3124;
    }
    float _3380;
    float _3382;
    float _3384;
    float _3386;
    float _3388;
    float _3390;
    if (_2650.y == 0u)
    {
        uvec4 _3335 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3336 = _3335.x;
        uint _3347 = uint((float(_3335.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1277) / _3336))) + floor(float(uint(cbSceneParam._m0[85u].x * _1276) / _3336)));
        float _3357 = (log2(_2428 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3358 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
        uint _3361 = uint(isnan(14.0) ? _3358 : (isnan(_3358) ? 14.0 : min(_3358, 14.0)));
        uvec4 _3366 = texelFetch(g_lightClusterGridBuffer, int(((_3361 << 2u) + (_3347 << 6u)) >> 2u));
        uint _3367 = _3366.x;
        uint _3368 = _3335.z;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        float _3455;
        float _3457;
        if (((((1u << ((_3368 >> 4u) & 15u)) + 4294967295u) & _3367) == 0u) || ((_3368 & 240u) == 0u))
        {
            _3447 = 0.0;
            _3449 = 0.0;
            _3451 = 0.0;
            _3453 = 0.0;
            _3455 = 0.0;
            _3457 = 0.0;
        }
        else
        {
            float _3448;
            float _3450;
            float _3452;
            float _3454;
            float _3456;
            float _3458;
            float _3592 = 0.0;
            float _3593 = 0.0;
            float _3594 = 0.0;
            float _3595 = 0.0;
            float _3596 = 0.0;
            float _3597 = 0.0;
            uint _3598 = 0u;
            uint _3607;
            bool _3608;
            for (;;)
            {
                _3607 = texelFetch(g_lightClassification, int((((_3361 << 5u) + (_3347 << 9u)) + (_3598 << 2u)) >> 2u)).x;
                _3608 = _3607 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3608)
                {
                    frontier_phi_66_pred = _3597;
                    frontier_phi_66_pred_1 = _3596;
                    frontier_phi_66_pred_2 = _3595;
                    frontier_phi_66_pred_3 = _3594;
                    frontier_phi_66_pred_4 = _3593;
                    frontier_phi_66_pred_5 = _3592;
                }
                else
                {
                    float _3716;
                    float _3717;
                    float _3718;
                    float _3719;
                    float _3720;
                    float _3721;
                    uint _3722;
                    _3716 = _3592;
                    _3717 = _3593;
                    _3718 = _3594;
                    _3719 = _3595;
                    _3720 = _3596;
                    _3721 = _3597;
                    _3722 = _3607;
                    float _3648;
                    float _3649;
                    float _3650;
                    float _3651;
                    float _3652;
                    float _3653;
                    for (;;)
                    {
                        uint _3726 = uint(findLSB(_3722)) + (_3598 << 5u);
                        uint _3723 = (_3722 + 4294967295u) & _3722;
                        uint _3728 = _3726 * 48u;
                        vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3728)).x, texelFetch(g_PointLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3728 + 3u)).x));
                        uint _3748 = (_3726 * 48u) + 4u;
                        vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3748)).x, texelFetch(g_PointLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3748 + 3u)).x));
                        uint _3767 = (_3726 * 48u) + 8u;
                        vec3 _3778 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3767)).x, texelFetch(g_PointLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3767 + 2u)).x));
                        float _3782 = _3742.x - _2426;
                        float _3783 = _3742.y - _2427;
                        float _3784 = _3742.z - _2428;
                        float _3785 = dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784));
                        float _3788 = inversesqrt(_3785);
                        float _3789 = _3788 * _3782;
                        float _3790 = _3788 * _3783;
                        float _3791 = _3788 * _3784;
                        float _3792 = dot(vec3(_1295, _1298, _1301), vec3(_3789, _3790, _3791));
                        float _3797 = 1.0 - (_3785 * _3742.w);
                        float _5246 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                        float _3798 = isnan(1.0) ? _5246 : (isnan(_5246) ? 1.0 : min(_5246, 1.0));
                        float _3799 = sqrt(_3785) * _3761.w;
                        float _3802 = 1.39999997615814208984375 / (_3799 + 1.39999997615814208984375);
                        float _3803 = _3802 * _3802;
                        float _3806 = ((1.0 - _3803) * _3792) + _3803;
                        float _3809 = _3799 * _3799;
                        float _3813 = ((isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0))) * _3798) / ((_3809 * 0.699999988079071044921875) + 1.0);
                        float _3817 = (-0.0) - _2426;
                        float _3818 = (-0.0) - _2427;
                        float _3819 = (-0.0) - _2428;
                        float _3823 = inversesqrt(dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819)));
                        float _3824 = _3823 * _3817;
                        float _3825 = _3823 * _3818;
                        float _3826 = _3823 * _3819;
                        float _3833 = exp2(log2(1.0 / ((_3809 * 3.5) + 5.0)) * 0.25);
                        float _3834 = 1.0 - _1370;
                        float _3841 = sqrt(1.0 - ((1.0 - (_3834 * _3834)) * (1.0 - (_3833 * _3833))));
                        float _3842 = _3841 * _3841;
                        float _3843 = _3842 * _3842;
                        float _3844 = _3824 + _3789;
                        float _3845 = _3825 + _3790;
                        float _3846 = _3826 + _3791;
                        float _3850 = inversesqrt(dot(vec3(_3844, _3845, _3846), vec3(_3844, _3845, _3846)));
                        float _3854 = dot(vec3(_1295, _1298, _1301), vec3(_3824, _3825, _3826));
                        float _5262 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                        float _3857 = isnan(1.0) ? _5262 : (isnan(_5262) ? 1.0 : min(_5262, 1.0));
                        float _3858 = dot(vec3(_1295, _1298, _1301), vec3(_3850 * _3844, _3850 * _3845, _3850 * _3846));
                        float _5273 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                        float _3861 = isnan(1.0) ? _5273 : (isnan(_5273) ? 1.0 : min(_5273, 1.0));
                        float _3865 = ((_3861 * _3861) * (_3843 + (-1.0))) + 1.0;
                        float _3866 = _3802 * _3842;
                        float _3867 = _3866 * _3866;
                        float _3870 = ((1.0 - _3867) * _3792) + _3867;
                        float _5284 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                        float _3871 = isnan(1.0) ? _5284 : (isnan(_5284) ? 1.0 : min(_5284, 1.0));
                        float _3872 = 1.0 - _3842;
                        float _3882 = (0.5 / (((_3871 * ((_3857 * _3872) + _3842)) + 9.9999999392252902907785028219223e-09) + (((_3871 * _3872) + _3842) * _3857))) * _3871;
                        float _5295 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                        float _3893 = (((_3843 * 3.1415927410125732421875) * (isnan(1.0) ? _5295 : (isnan(_5295) ? 1.0 : min(_5295, 1.0)))) / ((_3865 * _3865) * ((_3809 * 2.1991131305694580078125) + 3.141590118408203125))) * _3798;
                        _3651 = (_3813 * _3761.x) + _3719;
                        _3652 = (_3813 * _3761.y) + _3720;
                        _3653 = (_3813 * _3761.z) + _3721;
                        _3648 = (_3893 * _3778.x) + _3716;
                        _3649 = (_3893 * _3778.y) + _3717;
                        _3650 = (_3893 * _3778.z) + _3718;
                        if (_3723 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3716 = _3648;
                            _3717 = _3649;
                            _3718 = _3650;
                            _3719 = _3651;
                            _3720 = _3652;
                            _3721 = _3653;
                            _3722 = _3723;
                        }
                    }
                    frontier_phi_66_pred = _3653;
                    frontier_phi_66_pred_1 = _3652;
                    frontier_phi_66_pred_2 = _3651;
                    frontier_phi_66_pred_3 = _3650;
                    frontier_phi_66_pred_4 = _3649;
                    frontier_phi_66_pred_5 = _3648;
                }
                _3458 = frontier_phi_66_pred;
                _3456 = frontier_phi_66_pred_1;
                _3454 = frontier_phi_66_pred_2;
                _3452 = frontier_phi_66_pred_3;
                _3450 = frontier_phi_66_pred_4;
                _3448 = frontier_phi_66_pred_5;
                uint _3599 = _3598 + 1u;
                if (_3599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3592 = _3448;
                    _3593 = _3450;
                    _3594 = _3452;
                    _3595 = _3454;
                    _3596 = _3456;
                    _3597 = _3458;
                    _3598 = _3599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3447 = _3448;
            _3449 = _3450;
            _3451 = _3452;
            _3453 = _3454;
            _3455 = _3456;
            _3457 = _3458;
        }
        uvec4 _3461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3462 = _3461.z;
        uint _3464 = (_3462 >> 8u) & 15u;
        float _3560;
        float _3562;
        float _3564;
        float _3566;
        float _3568;
        float _3570;
        if (((4294967295u << _3464) & _3367) == 0u)
        {
            _3560 = _3447;
            _3562 = _3449;
            _3564 = _3451;
            _3566 = _3453;
            _3568 = _3455;
            _3570 = _3457;
        }
        else
        {
            float _3585 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
            float _3586 = _3585 * _2426;
            float _3587 = _3585 * _2427;
            float _3588 = _3585 * _2428;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3464 < ((_3462 >> 12u) & 15u))
            {
                float _3561;
                float _3563;
                float _3565;
                float _3567;
                float _3569;
                float _3571;
                float _3699 = _3447;
                float _3700 = _3449;
                float _3701 = _3451;
                float _3702 = _3453;
                float _3703 = _3455;
                float _3704 = _3457;
                uint _3705 = _3464;
                uint _3714;
                bool _3715;
                for (;;)
                {
                    _3714 = texelFetch(g_lightClassification, int((((_3361 << 5u) + (_3347 << 9u)) + (_3705 << 2u)) >> 2u)).x;
                    _3715 = _3714 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3715)
                    {
                        frontier_phi_72_pred = _3704;
                        frontier_phi_72_pred_1 = _3703;
                        frontier_phi_72_pred_2 = _3702;
                        frontier_phi_72_pred_3 = _3701;
                        frontier_phi_72_pred_4 = _3700;
                        frontier_phi_72_pred_5 = _3699;
                    }
                    else
                    {
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _4191;
                        float _4192;
                        float _4193;
                        float _4194;
                        float _4195;
                        float _4196;
                        float _3911 = _3699;
                        float _3912 = _3700;
                        float _3913 = _3701;
                        float _3914 = _3702;
                        float _3915 = _3703;
                        float _3916 = _3704;
                        uint _3917 = _3714;
                        uint _3918;
                        vec4 _3943;
                        float _3944;
                        vec4 _3959;
                        vec3 _3971;
                        vec4 _3986;
                        vec4 _4001;
                        float _4047;
                        bool _4048;
                        for (;;)
                        {
                            uint _3928 = ((_3705 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3917));
                            _3918 = (_3917 + 4294967295u) & _3917;
                            uint _3930 = _3928 * 40u;
                            _3943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 3u)).x));
                            _3944 = _3943.w;
                            uint _3946 = (_3928 * 40u) + 4u;
                            _3959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 3u)).x));
                            uint _3961 = (_3928 * 40u) + 8u;
                            _3971 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3961 + 2u)).x));
                            uint _3973 = (_3928 * 40u) + 16u;
                            _3986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 3u)).x));
                            uint _3988 = (_3928 * 40u) + 20u;
                            _4001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3988 + 3u)).x));
                            uint _4003 = (_3928 * 40u) + 24u;
                            vec4 _4016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4003 + 3u)).x));
                            uint _4022 = (_3928 * 40u) + 28u;
                            vec4 _4035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4022 + 3u)).x));
                            _4047 = fma(_2428, _4035.z, fma(_2427, _4035.y, _4035.x * _2426)) + _4035.w;
                            _4048 = !((fma(_2428, _4016.z, fma(_2427, _4016.y, _4016.x * _2426)) + _4016.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_4048)
                            {
                                float _4075 = _3943.x - _2426;
                                float _4076 = _3943.y - _2427;
                                float _4077 = _3943.z - _2428;
                                float _4078 = dot(vec3(_4075, _4076, _4077), vec3(_4075, _4076, _4077));
                                float _4081 = inversesqrt(_4078);
                                float _4082 = _4081 * _4075;
                                float _4083 = _4081 * _4076;
                                float _4084 = _4081 * _4077;
                                float _4088 = 1.0 - (_4078 / (_3944 * _3944));
                                float _5306 = isnan(0.0) ? _4088 : (isnan(_4088) ? 0.0 : max(_4088, 0.0));
                                float _4089 = isnan(1.0) ? _5306 : (isnan(_5306) ? 1.0 : min(_5306, 1.0));
                                float _4093 = sqrt(_4078) * _3959.w;
                                float _4095 = 1.39999997615814208984375 / (_4093 + 1.39999997615814208984375);
                                float _4096 = _4095 * _4095;
                                float _4099 = ((1.0 - _4096) * dot(vec3(_4082, _4083, _4084), vec3(_1295, _1298, _1301))) + _4096;
                                float _4102 = _4093 * _4093;
                                float _4106 = (fma(_2428, _3986.z, fma(_2427, _3986.y, _3986.x * _2426)) + _3986.w) / _4047;
                                float _4107 = (fma(_2428, _4001.z, fma(_2427, _4001.y, _4001.x * _2426)) + _4001.w) / _4047;
                                float _4111 = 1.0 - dot(vec2(_4106, _4107), vec2(_4106, _4107));
                                float _5322 = isnan(0.0) ? _4111 : (isnan(_4111) ? 0.0 : max(_4111, 0.0));
                                float _4112 = isnan(1.0) ? _5322 : (isnan(_5322) ? 1.0 : min(_5322, 1.0));
                                float _4113 = _4112 * (((isnan(0.0) ? _4099 : (isnan(_4099) ? 0.0 : max(_4099, 0.0))) * _4089) / ((_4102 * 0.699999988079071044921875) + 1.0));
                                float _4125 = exp2(log2(1.0 / ((_4102 * 3.5) + 5.0)) * 0.25);
                                float _4126 = 1.0 - _1370;
                                float _4133 = sqrt(1.0 - ((1.0 - (_4126 * _4126)) * (1.0 - (_4125 * _4125))));
                                float _4134 = _4133 * _4133;
                                float _4135 = _4134 * _4134;
                                float _4136 = _4082 - _3586;
                                float _4137 = _4083 - _3587;
                                float _4138 = _4084 - _3588;
                                float _4142 = inversesqrt(dot(vec3(_4136, _4137, _4138), vec3(_4136, _4137, _4138)));
                                float _4146 = dot(vec3(_1295, _1298, _1301), vec3((-0.0) - _3586, (-0.0) - _3587, (-0.0) - _3588));
                                float _5333 = isnan(0.0) ? _4146 : (isnan(_4146) ? 0.0 : max(_4146, 0.0));
                                float _4149 = isnan(1.0) ? _5333 : (isnan(_5333) ? 1.0 : min(_5333, 1.0));
                                float _4150 = dot(vec3(_1295, _1298, _1301), vec3(_4142 * _4136, _4142 * _4137, _4142 * _4138));
                                float _5344 = isnan(0.0) ? _4150 : (isnan(_4150) ? 0.0 : max(_4150, 0.0));
                                float _4153 = isnan(1.0) ? _5344 : (isnan(_5344) ? 1.0 : min(_5344, 1.0));
                                float _4157 = ((_4153 * _4153) * (_4135 + (-1.0))) + 1.0;
                                float _4158 = _4095 * _4134;
                                float _4159 = _4158 * _4158;
                                float _4165 = ((1.0 - _4159) * dot(vec3(_1295, _1298, _1301), vec3(_4082, _4083, _4084))) + _4159;
                                float _5355 = isnan(0.0) ? _4165 : (isnan(_4165) ? 0.0 : max(_4165, 0.0));
                                float _4166 = isnan(1.0) ? _5355 : (isnan(_5355) ? 1.0 : min(_5355, 1.0));
                                float _4167 = 1.0 - _4134;
                                float _4177 = (0.5 / (((_4166 * ((_4149 * _4167) + _4134)) + 9.9999999392252902907785028219223e-09) + (((_4166 * _4167) + _4134) * _4149))) * _4166;
                                float _5366 = isnan(0.0) ? _4177 : (isnan(_4177) ? 0.0 : max(_4177, 0.0));
                                float _4187 = (_4112 * _4089) * (((_4135 * 3.1415927410125732421875) * (isnan(1.0) ? _5366 : (isnan(_5366) ? 1.0 : min(_5366, 1.0)))) / ((_4157 * _4157) * ((_4102 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4113 * _3959.y;
                                frontier_phi_78_pred_1 = _4113 * _3959.x;
                                frontier_phi_78_pred_2 = _4187 * _3971.z;
                                frontier_phi_78_pred_3 = _4187 * _3971.y;
                                frontier_phi_78_pred_4 = _4187 * _3971.x;
                                frontier_phi_78_pred_5 = _4113 * _3959.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4195 = frontier_phi_78_pred;
                            _4194 = frontier_phi_78_pred_1;
                            _4193 = frontier_phi_78_pred_2;
                            _4192 = frontier_phi_78_pred_3;
                            _4191 = frontier_phi_78_pred_4;
                            _4196 = frontier_phi_78_pred_5;
                            _3901 = _4194 + _3914;
                            _3902 = _4195 + _3915;
                            _3903 = _4196 + _3916;
                            _3898 = _4191 + _3911;
                            _3899 = _4192 + _3912;
                            _3900 = _4193 + _3913;
                            if (_3918 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3911 = _3898;
                                _3912 = _3899;
                                _3913 = _3900;
                                _3914 = _3901;
                                _3915 = _3902;
                                _3916 = _3903;
                                _3917 = _3918;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3903;
                        frontier_phi_72_pred_1 = _3902;
                        frontier_phi_72_pred_2 = _3901;
                        frontier_phi_72_pred_3 = _3900;
                        frontier_phi_72_pred_4 = _3899;
                        frontier_phi_72_pred_5 = _3898;
                    }
                    _3571 = frontier_phi_72_pred;
                    _3569 = frontier_phi_72_pred_1;
                    _3567 = frontier_phi_72_pred_2;
                    _3565 = frontier_phi_72_pred_3;
                    _3563 = frontier_phi_72_pred_4;
                    _3561 = frontier_phi_72_pred_5;
                    uint _3706 = _3705 + 1u;
                    if (_3706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3699 = _3561;
                        _3700 = _3563;
                        _3701 = _3565;
                        _3702 = _3567;
                        _3703 = _3569;
                        _3704 = _3571;
                        _3705 = _3706;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3571;
                frontier_phi_60_61_ladder_1 = _3569;
                frontier_phi_60_61_ladder_2 = _3565;
                frontier_phi_60_61_ladder_3 = _3563;
                frontier_phi_60_61_ladder_4 = _3561;
                frontier_phi_60_61_ladder_5 = _3567;
            }
            else
            {
                frontier_phi_60_61_ladder = _3457;
                frontier_phi_60_61_ladder_1 = _3455;
                frontier_phi_60_61_ladder_2 = _3451;
                frontier_phi_60_61_ladder_3 = _3449;
                frontier_phi_60_61_ladder_4 = _3447;
                frontier_phi_60_61_ladder_5 = _3453;
            }
            _3560 = frontier_phi_60_61_ladder_4;
            _3562 = frontier_phi_60_61_ladder_3;
            _3564 = frontier_phi_60_61_ladder_2;
            _3566 = frontier_phi_60_61_ladder_5;
            _3568 = frontier_phi_60_61_ladder_1;
            _3570 = frontier_phi_60_61_ladder;
        }
        float _3575 = isnan(1.0) ? _1354 : (isnan(_1354) ? 1.0 : min(_1354, 1.0));
        _3380 = (_3575 * _3566) + _2892;
        _3382 = (_3575 * _3568) + _2894;
        _3384 = (_3575 * _3570) + _2896;
        _3386 = ((_3560 * _1338) * _3575) + _3230;
        _3388 = ((_3562 * _1340) * _3575) + _3232;
        _3390 = ((_3564 * _1341) * _3575) + _3234;
    }
    else
    {
        _3380 = _2892;
        _3382 = _2894;
        _3384 = _2896;
        _3386 = _3230;
        _3388 = _3232;
        _3390 = _3234;
    }
    float _5382 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _5393 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _5404 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    uint _3410 = _305 + 6u;
    float _3418 = _1276 / cbSceneParam._m0[86u].x;
    float _3419 = _1277 / cbSceneParam._m0[86u].y;
    vec4 _3433 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3418, _3419, (log2((isnan(cbSceneParam._m0[77u].w) ? _1211 : (isnan(_1211) ? cbSceneParam._m0[77u].w : min(_1211, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3435 = _3433.x;
    float _3436 = _3433.y;
    float _3437 = _3433.z;
    float _3438 = _3433.w;
    float _3510;
    float _3512;
    float _3514;
    float _3516;
    if (_1211 > cbSceneParam._m0[78u].w)
    {
        float _3472 = isnan(_1211) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1211 : min(cbSceneParam._m0[80u].w, _1211));
        float _3473 = _3472 / _1211;
        float _3484 = _3473 * _1261;
        float _3485 = _1262 * _3473;
        float _3486 = (-0.0) - _3485;
        float _3488 = _3473 * _1263;
        float _3490 = (cbSceneParam._m0[77u].w * _3486) / _3472;
        float _3491 = _3490 + cbSceneParam._m0[79u].w;
        float _3492 = cbSceneParam._m0[79u].w - _3485;
        float _3498 = sqrt(((_3484 * _3484) + (_3485 * _3485)) + (_3488 * _3488));
        float _3501 = (1.0 - (cbSceneParam._m0[77u].w / _3472)) * _3498;
        float _3506 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3508 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3661;
        if (abs((_3486 - _3490) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3661 = ((((_3491 > 0.0) ? exp2(_3506 * _3491) : (2.0 - exp2(_3508 * _3491))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3501;
        }
        else
        {
            float _3621 = 1.0 / cbSceneParam._m0[80u].x;
            float _3622 = isnan(_3492) ? _3491 : (isnan(_3491) ? _3492 : max(_3491, _3492));
            float _3623 = isnan(_3492) ? _3491 : (isnan(_3491) ? _3492 : min(_3491, _3492));
            float _3632 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : min(_3622, 0.0));
            float _3633 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : min(_3623, 0.0));
            _3661 = ((abs(_3498 / _3486) * cbSceneParam._m0[80u].y) * ((((_3632 - _3633) * 2.0) - ((exp2(_3506 * (isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0)))) - exp2(_3506 * (isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0))))) * _3621)) - ((exp2(_3508 * _3632) - exp2(_3508 * _3633)) * _3621))) + (_3501 * cbSceneParam._m0[80u].z);
        }
        vec4 _3663 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3418, _3419, 1.0), 0.0);
        float _3672 = exp2((_3661 * (-1.44269502162933349609375)) * (1.0 - _3663.w));
        float _3673 = log2(_3672);
        float _3689 = log2(_3438);
        _3510 = (exp2(_3689 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3673 * cbSceneParam._m0[78u].x)) * _3663.x) / cbSceneParam._m0[78u].x)) + _3435;
        _3512 = (exp2(_3689 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3673 * cbSceneParam._m0[78u].y)) * _3663.y) / cbSceneParam._m0[78u].y)) + _3436;
        _3514 = (exp2(_3689 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3673 * cbSceneParam._m0[78u].z)) * _3663.z) / cbSceneParam._m0[78u].z)) + _3437;
        _3516 = _3672 * _3438;
    }
    else
    {
        _3510 = _3435;
        _3512 = _3436;
        _3514 = _3437;
        _3516 = _3438;
    }
    float _3528 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3529 = _3528 == 3.0;
    float _3530 = log2(_3516);
    float _3537 = exp2(_3530 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5382 : (isnan(_5382) ? 1.0 : min(_5382, 1.0))) * (_3380 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1354))) + ((_3386 + ((isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0))) * _2160)) * cbPerFrame._m0[3u].x));
    float _3538 = exp2(_3530 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5393 : (isnan(_5393) ? 1.0 : min(_5393, 1.0))) * (_3382 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1354))) + ((_3388 + ((isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0))) * _2160)) * cbPerFrame._m0[3u].x));
    float _3539 = exp2(_3530 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5404 : (isnan(_5404) ? 1.0 : min(_5404, 1.0))) * (_3384 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1354))) + ((_3390 + ((isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0))) * _2160)) * cbPerFrame._m0[3u].x));
    float _3548 = (_3528 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3548 * (_3529 ? _3537 : (_3537 + (cbSceneParam._m0[72u].w * _3510)));
    SV_Target.y = _3548 * (_3529 ? _3538 : (_3538 + (cbSceneParam._m0[72u].w * _3512)));
    SV_Target.z = _3548 * (_3529 ? _3539 : (_3539 + (cbSceneParam._m0[72u].w * _3514)));
    SV_Target.w = cbInstanceData._m0[_3410].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3410].w;
}


