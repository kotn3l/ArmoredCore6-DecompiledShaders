#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3954;
float _3955;
float _3956;
float _3957;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _393 = _391.x;
    float _405 = dot(vec4(_393, _391.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_393 - _405) * cbMtdParam._m0[23u].w) + _405) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _436 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_423 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317);
    float _439 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_423 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318);
    float _442 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_423 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319);
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    float _511 = ((_481.z - _502) * _423) + _502;
    float _514 = ((((_481.x - _500) * _423) + _500) * 2.0) + (-1.0);
    float _516 = ((((_481.y - _501) * _423) + _501) * 2.0) + (-1.0);
    float _517 = dot(vec2(_514, _516), vec2(_514, _516));
    float _3977 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _565 = _563.x;
    float _566 = 1.0 - _565;
    float _582 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_565 - _566) * cbMtdParam._m0[24u].z) + _566) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3988 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _590 = (_583 * ((_461.x * cbMtdParam._m0[18u].x) - _436)) + _436;
    float _591 = (_583 * ((_461.y * cbMtdParam._m0[18u].y) - _439)) + _439;
    float _592 = (_583 * ((_461.z * cbMtdParam._m0[18u].z) - _442)) + _442;
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _620 = _618.x;
    float _637 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _620) * _423) + _620;
    float _641 = ((_604.x - _637) * cbMtdParam._m0[19u].z) + _637;
    float _643 = _641 - (_641 * _583);
    float _647 = (cbMtdParam._m0[19u].w * (_538.z - _511)) + _511;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _667 = (_660.x * 2.0) + (-1.0);
    float _668 = (_660.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3999 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _677 = (_583 * (_660.z - _647)) + _647;
    float _680 = (((_538.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _514;
    float _681 = (((_538.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _516;
    float _693 = (((_667 - _680) + (cbMtdParam._m0[21u].x * _680)) * _583) + _680;
    float _694 = (((_668 - _681) + (cbMtdParam._m0[21u].x * _681)) * _583) + _681;
    float _695 = (_583 * (sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _522)) + _522;
    float _697 = cbMtdParam._m0[22u].x + _538.w;
    float _700 = fma(_695, _235 * NORMAL.x, fma(_694, _242 * TANGENT.x, (_228 * _220) * _693));
    float _703 = fma(_695, _235 * NORMAL.y, fma(_694, _242 * TANGENT.y, (_228 * _221) * _693));
    float _706 = fma(_695, _235 * NORMAL.z, fma(_694, _242 * TANGENT.z, (_228 * _222) * _693));
    float _710 = inversesqrt(dot(vec3(_700, _703, _706), vec3(_700, _703, _706)));
    float _711 = _710 * _700;
    float _712 = _710 * _703;
    float _713 = _710 * _706;
    float _4010 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _714 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4032 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4043 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4054 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4065 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _719 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _784 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _774);
    float _785 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _774);
    float _786 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _774);
    float _790 = inversesqrt(dot(vec3(_784, _785, _786), vec3(_784, _785, _786)));
    float _791 = _784 * _790;
    float _792 = _785 * _790;
    float _793 = _786 * _790;
    vec4 _798 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _800 = _798.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _972 = sqrt(((_784 * _784) + (_785 * _785)) + (_786 * _786));
        float _978 = (cbMatDynParam._m0[5u].x * _972) + cbMatDynParam._m0[5u].y;
        float _4076 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _983 = (cbMatDynParam._m0[5u].z * _972) + cbMatDynParam._m0[5u].w;
        float _4087 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) - _979)) + _979) < ((_800 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _811 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _812 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _830 = fma(_713, cbSceneParam._m0[5u].z, fma(_712, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _711));
    float _833 = fma(_713, cbSceneParam._m0[6u].z, fma(_712, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _711));
    float _836 = fma(_713, cbSceneParam._m0[7u].z, fma(_712, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _711));
    uint _849 = _248 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_850].z;
    float _4098 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _862 = 1.0 - _719;
    float _863 = _859 * _862;
    float _864 = _860 * _862;
    float _865 = _861 * _862;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _719;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _719;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _719;
    float _873 = _870 + 0.039999999105930328369140625;
    float _875 = _871 + 0.039999999105930328369140625;
    float _876 = _872 + 0.039999999105930328369140625;
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _811, cbSceneParam._m0[86u].y * _812));
    float _889 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * TEXCOORD_5.w) * _885.x;
    float _890 = dot(vec3(_711, _712, _713), vec3(_791, _792, _793));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _711) - _791;
    float _898 = (_893 * _712) - _792;
    float _899 = (_893 * _713) - _793;
    float _903 = abs(dot(vec3(_791, _792, _793), vec3(_711, _712, _713)));
    float _4131 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_714);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _924 = (1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _925 = _918 * _905;
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _1019 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _1023 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1048 = _953 + _711;
        float _1049 = _957 + _712;
        float _1050 = _961 + _713;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_711, _712, _713), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4179 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_711, _712, _713), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4212 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_711, _712, _713), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4245 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1337 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1341 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1364 = _953 + _711;
        float _1365 = _957 + _712;
        float _1366 = _961 + _713;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_711, _712, _713), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4308 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_711, _712, _713), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4341 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_711, _712, _713), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4374 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1291;
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = _1291;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1303)) + _1303;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1304)) + _1304;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1305)) + _1305;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _897 * 0.5;
    float _1671 = _898 * 0.5;
    float _1672 = _899 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _714);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1800 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1803 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1831 = frontier_phi_17_15_ladder;
        }
        float _2002;
        if (_1800 > 0.0)
        {
            _2002 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2002 = frontier_phi_26_22_ladder;
        }
        float _2297;
        if (_1803 > 0.0)
        {
            _2297 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2297 = frontier_phi_38_33_ladder;
        }
        float _2299 = isnan(_2002) ? _1831 : (isnan(_1831) ? _2002 : min(_1831, _2002));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1797) + _1786;
        float _2305 = (_2300 * _1800) + _1790;
        float _2306 = (_2300 * _1803) + _1794;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2309 = (-1.0) - _2307;
        float _2311 = _2307 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2306 > _2311) || ((_2306 < _2309) || ((_2305 > _2311) || ((_2305 < _2309) || ((_2304 < _2309) || (_2304 > _2311))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2306, cbModelParam._m0[9u].z, fma(_2305, cbModelParam._m0[9u].y, _2304 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2306, cbModelParam._m0[10u].z, fma(_2305, cbModelParam._m0[10u].y, _2304 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2306, cbModelParam._m0[11u].z, fma(_2305, cbModelParam._m0[11u].y, _2304 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_16_38_ladder = _2451.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2451.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2451.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_16_38_ladder_2;
        _1821 = frontier_phi_16_38_ladder_1;
        _1823 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _714);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1881 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1885 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1889 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1892 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1895 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1898 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2007;
        if (_1892 > 0.0)
        {
            _2007 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2007 = frontier_phi_28_24_ladder;
        }
        float _2324;
        if (_1895 > 0.0)
        {
            _2324 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2324 = frontier_phi_40_35_ladder;
        }
        float _2662;
        if (_1898 > 0.0)
        {
            _2662 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2662 = frontier_phi_50_47_ladder;
        }
        float _2664 = isnan(_2324) ? _2007 : (isnan(_2007) ? _2324 : min(_2007, _2324));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _1892) + _1881;
        float _2670 = (_2665 * _1895) + _1885;
        float _2671 = (_2665 * _1898) + _1889;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2673 = (-1.0) - _2672;
        float _2675 = _2672 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2671 > _2675) || ((_2671 < _2673) || ((_2670 > _2675) || ((_2670 < _2673) || ((_2669 < _2673) || (_2669 > _2675))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2671, cbModelParam._m0[17u].z, fma(_2670, cbModelParam._m0[17u].y, _2669 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2671, cbModelParam._m0[18u].z, fma(_2670, cbModelParam._m0[18u].y, _2669 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2671, cbModelParam._m0[19u].z, fma(_2670, cbModelParam._m0[19u].y, _2669 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_25_50_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1917 = frontier_phi_25_50_ladder_2;
        _1919 = frontier_phi_25_50_ladder_1;
        _1921 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1828);
        _1917 = _1901.x * cbModelParam._m0[1u].z;
        _1919 = _1901.y * cbModelParam._m0[1u].z;
        _1921 = _1901.z * cbModelParam._m0[1u].z;
    }
    float _1934 = (((_924 * _873) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1936 = (((_924 * _875) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1919 - _1821)) + _1821);
    float _1938 = (((_924 * _876) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1941 = fma(_1938, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1934 * cbSceneParam._m0[89u].x));
    float _1944 = fma(_1938, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1934 * cbSceneParam._m0[90u].x));
    float _1947 = fma(_1938, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1934 * cbSceneParam._m0[91u].x));
    float _1981 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1985 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1994 = _1981 / _1993;
    float _1995 = _1985 / _1993;
    float _1996 = _1989 / _1993;
    float _2143;
    float _2144;
    float _2145;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2023 = ((uint(_1996 > cbSceneParam._m0[59u].y) + uint(_1996 > cbSceneParam._m0[59u].x)) + uint(_1996 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2024 = _2023 + 43u;
        uint _2032 = _2023 + 44u;
        uint _2040 = _2023 + 45u;
        uint _2048 = _2023 + 46u;
        float _2059 = fma(_1993, cbSceneParam._m0[_2024].w, fma(_1989, cbSceneParam._m0[_2024].z, fma(_1985, cbSceneParam._m0[_2024].y, _1981 * cbSceneParam._m0[_2024].x)));
        float _2063 = fma(_1993, cbSceneParam._m0[_2032].w, fma(_1989, cbSceneParam._m0[_2032].z, fma(_1985, cbSceneParam._m0[_2032].y, _1981 * cbSceneParam._m0[_2032].x)));
        float _2071 = fma(_1993, cbSceneParam._m0[_2048].w, fma(_1989, cbSceneParam._m0[_2048].z, fma(_1985, cbSceneParam._m0[_2048].y, _1981 * cbSceneParam._m0[_2048].x)));
        float _2076 = cbSceneParam._m0[33u].z * _2071;
        float _2078 = cbSceneParam._m0[33u].w * _2071;
        float _2081 = fma(_1993, cbSceneParam._m0[_2040].w, fma(_1989, cbSceneParam._m0[_2040].z, fma(_1985, cbSceneParam._m0[_2040].y, _1981 * cbSceneParam._m0[_2040].x))) / _2071;
        float _2129 = (cbSceneParam._m0[33u].x - sqrt(((_1995 * _1995) + (_1994 * _1994)) + (_1996 * _1996))) * cbSceneParam._m0[33u].y;
        float _4500 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2136 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2076 + _2059) / _2071, (_2078 + _2063) / _2071), _2081), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2078 + _2059) / _2071, (_2063 - _2076) / _2071), _2081), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 - _2076) / _2071, (_2063 - _2078) / _2071), _2081), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2059 - _2078) / _2071, (_2076 + _2063) / _2071), _2081), 0.0)).x), vec4(0.25)));
        _2143 = 1.0 - (_2136 * cbSceneParam._m0[34u].x);
        _2144 = 1.0 - (_2136 * cbSceneParam._m0[34u].y);
        _2145 = 1.0 - (_2136 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2143 = 1.0;
        _2144 = 1.0;
        _2145 = 1.0;
    }
    float _2209;
    float _2211;
    float _2213;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2197 = fma(_1993, cbSceneParam._m0[63u].w, fma(_1989, cbSceneParam._m0[63u].z, fma(_1985, cbSceneParam._m0[63u].y, _1981 * cbSceneParam._m0[63u].x)));
        float _2198 = fma(_1993, cbSceneParam._m0[60u].w, fma(_1989, cbSceneParam._m0[60u].z, fma(_1985, cbSceneParam._m0[60u].y, _1981 * cbSceneParam._m0[60u].x))) / _2197;
        float _2199 = fma(_1993, cbSceneParam._m0[61u].w, fma(_1989, cbSceneParam._m0[61u].z, fma(_1985, cbSceneParam._m0[61u].y, _1981 * cbSceneParam._m0[61u].x))) / _2197;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2198 >= cbSceneParam._m0[64u].x) && (_2199 >= cbSceneParam._m0[64u].y)) && (_2198 <= cbSceneParam._m0[64u].z)) && (_2199 <= cbSceneParam._m0[64u].w))
        {
            float _2337 = fma(_1993, cbSceneParam._m0[62u].w, fma(_1989, cbSceneParam._m0[62u].z, fma(_1985, cbSceneParam._m0[62u].y, _1981 * cbSceneParam._m0[62u].x))) / _2197;
            float _2341 = isnan(cbSceneParam._m0[41u].w) ? _2337 : (isnan(_2337) ? cbSceneParam._m0[41u].w : max(_2337, cbSceneParam._m0[41u].w));
            float _2384 = (cbSceneParam._m0[33u].x - sqrt(((_1995 * _1995) + (_1994 * _1994)) + (_1996 * _1996))) * cbSceneParam._m0[33u].y;
            float _4516 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
            float _2391 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2198, cbSceneParam._m0[33u].w + _2199), _2341), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2198, _2199 - cbSceneParam._m0[33u].z), _2341), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2198 - cbSceneParam._m0[33u].z, _2199 - cbSceneParam._m0[33u].w), _2341), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2198 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2199), _2341), 0.0)).x), vec4(0.25)));
            float _2395 = 1.0 - (_2391 * cbSceneParam._m0[34u].x);
            float _2396 = 1.0 - (_2391 * cbSceneParam._m0[34u].y);
            float _2397 = 1.0 - (_2391 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2397) ? _2145 : (isnan(_2145) ? _2397 : min(_2145, _2397));
            frontier_phi_37_36_ladder_1 = isnan(_2396) ? _2144 : (isnan(_2144) ? _2396 : min(_2144, _2396));
            frontier_phi_37_36_ladder_2 = isnan(_2395) ? _2143 : (isnan(_2143) ? _2395 : min(_2143, _2395));
        }
        else
        {
            frontier_phi_37_36_ladder = _2145;
            frontier_phi_37_36_ladder_1 = _2144;
            frontier_phi_37_36_ladder_2 = _2143;
        }
        _2209 = frontier_phi_37_36_ladder_2;
        _2211 = frontier_phi_37_36_ladder_1;
        _2213 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2209 = _2143;
        _2211 = _2144;
        _2213 = _2145;
    }
    uvec4 _2218 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2220 = _2218.x * 14u;
    uint _2221 = _2220 + 13u;
    float _2228 = _889 + (-1.0);
    float _2233 = (cbLight._m0[_2221].x * _2228) + 1.0;
    float _2234 = (cbLight._m0[_2221].y * _2228) + 1.0;
    float _2235 = (cbLight._m0[_2221].z * _2228) + 1.0;
    float _2236 = (cbLight._m0[_2221].w * _2228) + 1.0;
    uint _2237 = _2220 + 5u;
    float _2243 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2247 = _2220 + 4u;
    float _2256 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
    uint _2260 = _2220 | 1u;
    float _2271 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_711, _712, _713));
    float _2274 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_711, _712, _713));
    float _4552 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _4563 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2279 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.3183098733425140380859375;
    float _2281 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * 0.3183098733425140380859375;
    float _2288 = ((cbLight._m0[_2237].x * _2243) * _2281) + (((cbLight._m0[_2247].x * _2209) * _2256) * _2279);
    float _2289 = ((_2243 * cbLight._m0[_2237].y) * _2281) + (((cbLight._m0[_2247].y * _2211) * _2256) * _2279);
    float _2290 = ((_2243 * cbLight._m0[_2237].z) * _2281) + (((cbLight._m0[_2247].z * _2213) * _2256) * _2279);
    uvec4 _2294 = floatBitsToUint(cbLight._m0[_2220 + 12u]);
    bool _2296 = _2294.x == 0u;
    float _2398;
    float _2400;
    float _2402;
    if (_2296)
    {
        _2398 = _2288;
        _2400 = _2289;
        _2402 = _2290;
    }
    else
    {
        uint _2406 = _2220 + 6u;
        float _2422 = (dot(vec3(cbLight._m0[_2220 + 2u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4574 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2425 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2398 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2288;
        _2400 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2289;
        _2402 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2290;
    }
    bool _2405 = _2294.y == 0u;
    float _2460;
    float _2462;
    float _2464;
    if (_2405)
    {
        _2460 = _2398;
        _2462 = _2400;
        _2464 = _2402;
    }
    else
    {
        uint _2633 = _2220 + 7u;
        float _2649 = (dot(vec3(cbLight._m0[_2220 + 3u].xyz), vec3(_711, _712, _713)) * 0.5) + 0.5;
        float _2650 = _2649 * _2649;
        float _4590 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2651 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2652 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2460 = (((cbLight._m0[_2633].x * 0.3183098733425140380859375) * _2651) * _2652) + _2398;
        _2462 = (((cbLight._m0[_2633].y * 0.3183098733425140380859375) * _2651) * _2652) + _2400;
        _2464 = (((cbLight._m0[_2633].z * 0.3183098733425140380859375) * _2651) * _2652) + _2402;
    }
    uint _2467 = _2220 + 8u;
    float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _714) * 0.949999988079071044921875);
    float _2481 = _2480 * _2480;
    float _2482 = cbLight._m0[_2220].x + _791;
    float _2483 = cbLight._m0[_2220].y + _792;
    float _2484 = cbLight._m0[_2220].z + _793;
    float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
    float _2489 = _2488 * _2482;
    float _2490 = _2488 * _2483;
    float _2491 = _2488 * _2484;
    float _2492 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2220].xyz));
    float _4606 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _4617 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2496 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2497 = dot(vec3(_711, _712, _713), vec3(_2489, _2490, _2491));
    float _4628 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2501 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2489, _2490, _2491));
    float _4639 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2505 = _2481 * _2481;
    float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
    float _2518 = 0.959999978542327880859375 - _870;
    float _2520 = 0.959999978542327880859375 - _871;
    float _2521 = 0.959999978542327880859375 - _872;
    float _2528 = 1.0 - _2481;
    float _2539 = (0.5 / (((_2496 * ((_2495 * _2528) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2528) + _2481) * _2495))) * _2495;
    float _4650 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
    uint _2555 = _2220 + 9u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _714) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2260].x + _791;
    float _2569 = cbLight._m0[_2260].y + _792;
    float _2570 = cbLight._m0[_2260].z + _793;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2260].xyz));
    float _4661 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2582 = dot(vec3(_711, _712, _713), vec3(_2575, _2576, _2577));
    float _4672 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2586 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2575, _2576, _2577));
    float _4683 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2590 = _2567 * _2567;
    float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
    float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
    float _2608 = 1.0 - _2567;
    float _2618 = (0.5 / (((_2496 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2608) + _2567) * _2581))) * _2581;
    float _4694 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
    float _2630 = (((((_2601 * _2518) + _873) * cbLight._m0[_2555].x) * _2620) * _2243) + ((((cbLight._m0[_2467].x * _2209) * ((_2517 * _2518) + _873)) * _2541) * _2256);
    float _2631 = (((((_2601 * _2520) + _875) * cbLight._m0[_2555].y) * _2620) * _2243) + ((((cbLight._m0[_2467].y * _2211) * ((_2517 * _2520) + _875)) * _2541) * _2256);
    float _2632 = (((((_2601 * _2521) + _876) * cbLight._m0[_2555].z) * _2620) * _2243) + ((((cbLight._m0[_2467].z * _2213) * ((_2517 * _2521) + _876)) * _2541) * _2256);
    float _2688;
    float _2690;
    float _2692;
    if (_2296)
    {
        _2688 = _2630;
        _2690 = _2631;
        _2692 = _2632;
    }
    else
    {
        uint _2694 = _2220 + 2u;
        uint _2698 = _2220 + 10u;
        float _2712 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2694].w)) * _714) * 0.949999988079071044921875);
        float _2713 = _2712 * _2712;
        float _2714 = cbLight._m0[_2694].x + _791;
        float _2715 = cbLight._m0[_2694].y + _792;
        float _2716 = cbLight._m0[_2694].z + _793;
        float _2720 = inversesqrt(dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716)));
        float _2721 = _2720 * _2714;
        float _2722 = _2720 * _2715;
        float _2723 = _2720 * _2716;
        float _2724 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2694].xyz));
        float _4705 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2728 = dot(vec3(_711, _712, _713), vec3(_2721, _2722, _2723));
        float _4716 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2732 = dot(vec3(cbLight._m0[_2694].xyz), vec3(_2721, _2722, _2723));
        float _4727 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2736 = _2713 * _2713;
        float _2740 = ((_2731 * _2731) * (_2736 + (-1.0))) + 1.0;
        float _2747 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
        float _2754 = 1.0 - _2713;
        float _2764 = (0.5 / (((_2496 * ((_2727 * _2754) + _2713)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2754) + _2713) * _2727))) * _2727;
        float _4738 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2766 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2736 / ((_2740 * _2740) * 3.141590118408203125));
        float _2767 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
        _2688 = (((((_2747 * _2518) + _873) * cbLight._m0[_2698].x) * _2766) * _2767) + _2630;
        _2690 = (((((_2747 * _2520) + _875) * cbLight._m0[_2698].y) * _2766) * _2767) + _2631;
        _2692 = (((((_2747 * _2521) + _876) * cbLight._m0[_2698].z) * _2766) * _2767) + _2632;
    }
    float _2798;
    float _2800;
    float _2802;
    if (_2405)
    {
        _2798 = _2688;
        _2800 = _2690;
        _2802 = _2692;
    }
    else
    {
        uint _2809 = _2220 + 3u;
        uint _2813 = _2220 + 11u;
        float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2809].w)) * _714) * 0.949999988079071044921875);
        float _2828 = _2827 * _2827;
        float _2829 = cbLight._m0[_2809].x + _791;
        float _2830 = cbLight._m0[_2809].y + _792;
        float _2831 = cbLight._m0[_2809].z + _793;
        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
        float _2836 = _2835 * _2829;
        float _2837 = _2835 * _2830;
        float _2838 = _2835 * _2831;
        float _2839 = dot(vec3(_711, _712, _713), vec3(cbLight._m0[_2809].xyz));
        float _4754 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2843 = dot(vec3(_711, _712, _713), vec3(_2836, _2837, _2838));
        float _4765 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2847 = dot(vec3(cbLight._m0[_2809].xyz), vec3(_2836, _2837, _2838));
        float _4776 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2851 = _2828 * _2828;
        float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
        float _2862 = exp2(log2(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) * 5.0);
        float _2869 = 1.0 - _2828;
        float _2879 = (0.5 / (((_2496 * ((_2842 * _2869) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2869) + _2828) * _2842))) * _2842;
        float _4787 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2881 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
        float _2882 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2798 = (((((_2862 * _2518) + _873) * cbLight._m0[_2813].x) * _2881) * _2882) + _2688;
        _2800 = (((((_2862 * _2520) + _875) * cbLight._m0[_2813].y) * _2881) * _2882) + _2690;
        _2802 = (((((_2862 * _2521) + _876) * cbLight._m0[_2813].z) * _2881) * _2882) + _2692;
    }
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_2218.y == 0u)
    {
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.x;
        uint _2915 = uint((float(_2903.y) * floor(float(uint(cbSceneParam._m0[85u].y * _812) / _2904))) + floor(float(uint(cbSceneParam._m0[85u].x * _811) / _2904)));
        float _2925 = (log2(_1996 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2926 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        uint _2929 = uint(isnan(14.0) ? _2926 : (isnan(_2926) ? 14.0 : min(_2926, 14.0)));
        uvec4 _2934 = texelFetch(g_lightClusterGridBuffer, int(((_2929 << 2u) + (_2915 << 6u)) >> 2u));
        uint _2935 = _2934.x;
        uint _2936 = _2903.z;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        if (((((1u << ((_2936 >> 4u) & 15u)) + 4294967295u) & _2935) == 0u) || ((_2936 & 240u) == 0u))
        {
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
        }
        else
        {
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            uint _3174 = 0u;
            uint _3183;
            bool _3184;
            for (;;)
            {
                _3183 = texelFetch(g_lightClassification, int((((_2929 << 5u) + (_2915 << 9u)) + (_3174 << 2u)) >> 2u)).x;
                _3184 = _3183 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3184)
                {
                    frontier_phi_71_pred = _3173;
                    frontier_phi_71_pred_1 = _3172;
                    frontier_phi_71_pred_2 = _3171;
                    frontier_phi_71_pred_3 = _3170;
                    frontier_phi_71_pred_4 = _3169;
                    frontier_phi_71_pred_5 = _3168;
                }
                else
                {
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    uint _3319;
                    _3313 = _3168;
                    _3314 = _3169;
                    _3315 = _3170;
                    _3316 = _3171;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3183;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    for (;;)
                    {
                        uint _3323 = uint(findLSB(_3319)) + (_3174 << 5u);
                        uint _3320 = (_3319 + 4294967295u) & _3319;
                        uint _3325 = _3323 * 48u;
                        vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 3u)).x));
                        uint _3345 = (_3323 * 48u) + 4u;
                        vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 3u)).x));
                        uint _3364 = (_3323 * 48u) + 8u;
                        vec3 _3375 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x));
                        float _3379 = _3339.x - _1994;
                        float _3380 = _3339.y - _1995;
                        float _3381 = _3339.z - _1996;
                        float _3382 = dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381));
                        float _3385 = inversesqrt(_3382);
                        float _3386 = _3385 * _3379;
                        float _3387 = _3385 * _3380;
                        float _3388 = _3385 * _3381;
                        float _3389 = dot(vec3(_830, _833, _836), vec3(_3386, _3387, _3388));
                        float _3394 = 1.0 - (_3382 * _3339.w);
                        float _4813 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3395 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3396 = sqrt(_3382) * _3358.w;
                        float _3399 = 1.39999997615814208984375 / (_3396 + 1.39999997615814208984375);
                        float _3400 = _3399 * _3399;
                        float _3403 = ((1.0 - _3400) * _3389) + _3400;
                        float _3406 = _3396 * _3396;
                        float _3410 = ((isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))) * _3395) / ((_3406 * 0.699999988079071044921875) + 1.0);
                        float _3414 = (-0.0) - _1994;
                        float _3415 = (-0.0) - _1995;
                        float _3416 = (-0.0) - _1996;
                        float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                        float _3421 = _3420 * _3414;
                        float _3422 = _3420 * _3415;
                        float _3423 = _3420 * _3416;
                        float _3430 = exp2(log2(1.0 / ((_3406 * 3.5) + 5.0)) * 0.25);
                        float _3431 = 1.0 - _905;
                        float _3438 = sqrt(1.0 - ((1.0 - (_3431 * _3431)) * (1.0 - (_3430 * _3430))));
                        float _3439 = _3438 * _3438;
                        float _3440 = _3439 * _3439;
                        float _3441 = _3421 + _3386;
                        float _3442 = _3422 + _3387;
                        float _3443 = _3423 + _3388;
                        float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                        float _3451 = dot(vec3(_830, _833, _836), vec3(_3421, _3422, _3423));
                        float _4829 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3454 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3455 = dot(vec3(_830, _833, _836), vec3(_3447 * _3441, _3447 * _3442, _3447 * _3443));
                        float _4840 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3458 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3462 = ((_3458 * _3458) * (_3440 + (-1.0))) + 1.0;
                        float _3463 = _3399 * _3439;
                        float _3464 = _3463 * _3463;
                        float _3467 = ((1.0 - _3464) * _3389) + _3464;
                        float _4851 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3468 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3469 = 1.0 - _3439;
                        float _3479 = (0.5 / (((_3468 * ((_3454 * _3469) + _3439)) + 9.9999999392252902907785028219223e-09) + (((_3468 * _3469) + _3439) * _3454))) * _3468;
                        float _4862 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3490 = (((_3440 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3462 * _3462) * ((_3406 * 2.1991131305694580078125) + 3.141590118408203125))) * _3395;
                        _3243 = (_3410 * _3358.x) + _3316;
                        _3244 = (_3410 * _3358.y) + _3317;
                        _3245 = (_3410 * _3358.z) + _3318;
                        _3240 = (_3490 * _3375.x) + _3313;
                        _3241 = (_3490 * _3375.y) + _3314;
                        _3242 = (_3490 * _3375.z) + _3315;
                        if (_3320 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3313 = _3240;
                            _3314 = _3241;
                            _3315 = _3242;
                            _3316 = _3243;
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3320;
                        }
                    }
                    frontier_phi_71_pred = _3245;
                    frontier_phi_71_pred_1 = _3244;
                    frontier_phi_71_pred_2 = _3243;
                    frontier_phi_71_pred_3 = _3242;
                    frontier_phi_71_pred_4 = _3241;
                    frontier_phi_71_pred_5 = _3240;
                }
                _3026 = frontier_phi_71_pred;
                _3024 = frontier_phi_71_pred_1;
                _3022 = frontier_phi_71_pred_2;
                _3020 = frontier_phi_71_pred_3;
                _3018 = frontier_phi_71_pred_4;
                _3016 = frontier_phi_71_pred_5;
                uint _3175 = _3174 + 1u;
                if (_3175 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3168 = _3016;
                    _3169 = _3018;
                    _3170 = _3020;
                    _3171 = _3022;
                    _3172 = _3024;
                    _3173 = _3026;
                    _3174 = _3175;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
        }
        uvec4 _3029 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3030 = _3029.z;
        uint _3032 = (_3030 >> 8u) & 15u;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        if (((4294967295u << _3032) & _2935) == 0u)
        {
            _3136 = _3015;
            _3138 = _3017;
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
            _3146 = _3025;
        }
        else
        {
            float _3161 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
            float _3162 = _3161 * _1994;
            float _3163 = _3161 * _1995;
            float _3164 = _3161 * _1996;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3032 < ((_3030 >> 12u) & 15u))
            {
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3296 = _3015;
                float _3297 = _3017;
                float _3298 = _3019;
                float _3299 = _3021;
                float _3300 = _3023;
                float _3301 = _3025;
                uint _3302 = _3032;
                uint _3311;
                bool _3312;
                for (;;)
                {
                    _3311 = texelFetch(g_lightClassification, int((((_2929 << 5u) + (_2915 << 9u)) + (_3302 << 2u)) >> 2u)).x;
                    _3312 = _3311 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3312)
                    {
                        frontier_phi_82_pred = _3301;
                        frontier_phi_82_pred_1 = _3300;
                        frontier_phi_82_pred_2 = _3299;
                        frontier_phi_82_pred_3 = _3298;
                        frontier_phi_82_pred_4 = _3297;
                        frontier_phi_82_pred_5 = _3296;
                    }
                    else
                    {
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3517 = _3296;
                        float _3518 = _3297;
                        float _3519 = _3298;
                        float _3520 = _3299;
                        float _3521 = _3300;
                        float _3522 = _3301;
                        uint _3523 = _3311;
                        uint _3524;
                        vec4 _3549;
                        float _3550;
                        vec4 _3565;
                        vec3 _3577;
                        vec4 _3592;
                        vec4 _3608;
                        float _3654;
                        bool _3655;
                        for (;;)
                        {
                            uint _3534 = ((_3302 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3523));
                            _3524 = (_3523 + 4294967295u) & _3523;
                            uint _3536 = _3534 * 40u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            _3550 = _3549.w;
                            uint _3552 = (_3534 * 40u) + 4u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3534 * 40u) + 8u;
                            _3577 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x));
                            uint _3579 = (_3534 * 40u) + 16u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3595 = (_3534 * 40u) + 20u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3534 * 40u) + 24u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3629 = (_3534 * 40u) + 28u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3654 = fma(_1996, _3642.z, fma(_1995, _3642.y, _3642.x * _1994)) + _3642.w;
                            _3655 = !((fma(_1996, _3623.z, fma(_1995, _3623.y, _3623.x * _1994)) + _3623.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3655)
                            {
                                float _3682 = _3549.x - _1994;
                                float _3683 = _3549.y - _1995;
                                float _3684 = _3549.z - _1996;
                                float _3685 = dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684));
                                float _3688 = inversesqrt(_3685);
                                float _3689 = _3688 * _3682;
                                float _3690 = _3688 * _3683;
                                float _3691 = _3688 * _3684;
                                float _3695 = 1.0 - (_3685 / (_3550 * _3550));
                                float _4873 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3700 = sqrt(_3685) * _3565.w;
                                float _3702 = 1.39999997615814208984375 / (_3700 + 1.39999997615814208984375);
                                float _3703 = _3702 * _3702;
                                float _3706 = ((1.0 - _3703) * dot(vec3(_3689, _3690, _3691), vec3(_830, _833, _836))) + _3703;
                                float _3709 = _3700 * _3700;
                                float _3713 = (fma(_1996, _3592.z, fma(_1995, _3592.y, _3592.x * _1994)) + _3592.w) / _3654;
                                float _3714 = (fma(_1996, _3608.z, fma(_1995, _3608.y, _3608.x * _1994)) + _3608.w) / _3654;
                                float _3718 = 1.0 - dot(vec2(_3713, _3714), vec2(_3713, _3714));
                                float _4889 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3719 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3720 = _3719 * (((isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0))) * _3696) / ((_3709 * 0.699999988079071044921875) + 1.0));
                                float _3732 = exp2(log2(1.0 / ((_3709 * 3.5) + 5.0)) * 0.25);
                                float _3733 = 1.0 - _905;
                                float _3740 = sqrt(1.0 - ((1.0 - (_3733 * _3733)) * (1.0 - (_3732 * _3732))));
                                float _3741 = _3740 * _3740;
                                float _3742 = _3741 * _3741;
                                float _3743 = _3689 - _3162;
                                float _3744 = _3690 - _3163;
                                float _3745 = _3691 - _3164;
                                float _3749 = inversesqrt(dot(vec3(_3743, _3744, _3745), vec3(_3743, _3744, _3745)));
                                float _3753 = dot(vec3(_830, _833, _836), vec3((-0.0) - _3162, (-0.0) - _3163, (-0.0) - _3164));
                                float _4900 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3757 = dot(vec3(_830, _833, _836), vec3(_3749 * _3743, _3749 * _3744, _3749 * _3745));
                                float _4911 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3764 = ((_3760 * _3760) * (_3742 + (-1.0))) + 1.0;
                                float _3765 = _3702 * _3741;
                                float _3766 = _3765 * _3765;
                                float _3772 = ((1.0 - _3766) * dot(vec3(_830, _833, _836), vec3(_3689, _3690, _3691))) + _3766;
                                float _4922 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3774 = 1.0 - _3741;
                                float _3784 = (0.5 / (((_3773 * ((_3756 * _3774) + _3741)) + 9.9999999392252902907785028219223e-09) + (((_3773 * _3774) + _3741) * _3756))) * _3773;
                                float _4933 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3794 = (_3719 * _3696) * (((_3742 * 3.1415927410125732421875) * (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) / ((_3764 * _3764) * ((_3709 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3720 * _3565.z;
                                frontier_phi_88_pred_1 = _3720 * _3565.y;
                                frontier_phi_88_pred_2 = _3720 * _3565.x;
                                frontier_phi_88_pred_3 = _3794 * _3577.z;
                                frontier_phi_88_pred_4 = _3794 * _3577.y;
                                frontier_phi_88_pred_5 = _3794 * _3577.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3803 = frontier_phi_88_pred;
                            _3802 = frontier_phi_88_pred_1;
                            _3801 = frontier_phi_88_pred_2;
                            _3800 = frontier_phi_88_pred_3;
                            _3799 = frontier_phi_88_pred_4;
                            _3798 = frontier_phi_88_pred_5;
                            _3507 = _3801 + _3520;
                            _3508 = _3802 + _3521;
                            _3509 = _3803 + _3522;
                            _3504 = _3798 + _3517;
                            _3505 = _3799 + _3518;
                            _3506 = _3800 + _3519;
                            if (_3524 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3524;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3509;
                        frontier_phi_82_pred_1 = _3508;
                        frontier_phi_82_pred_2 = _3507;
                        frontier_phi_82_pred_3 = _3506;
                        frontier_phi_82_pred_4 = _3505;
                        frontier_phi_82_pred_5 = _3504;
                    }
                    _3147 = frontier_phi_82_pred;
                    _3145 = frontier_phi_82_pred_1;
                    _3143 = frontier_phi_82_pred_2;
                    _3141 = frontier_phi_82_pred_3;
                    _3139 = frontier_phi_82_pred_4;
                    _3137 = frontier_phi_82_pred_5;
                    uint _3303 = _3302 + 1u;
                    if (_3303 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3296 = _3137;
                        _3297 = _3139;
                        _3298 = _3141;
                        _3299 = _3143;
                        _3300 = _3145;
                        _3301 = _3147;
                        _3302 = _3303;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3143;
                frontier_phi_63_64_ladder_1 = _3147;
                frontier_phi_63_64_ladder_2 = _3145;
                frontier_phi_63_64_ladder_3 = _3141;
                frontier_phi_63_64_ladder_4 = _3139;
                frontier_phi_63_64_ladder_5 = _3137;
            }
            else
            {
                frontier_phi_63_64_ladder = _3021;
                frontier_phi_63_64_ladder_1 = _3025;
                frontier_phi_63_64_ladder_2 = _3023;
                frontier_phi_63_64_ladder_3 = _3019;
                frontier_phi_63_64_ladder_4 = _3017;
                frontier_phi_63_64_ladder_5 = _3015;
            }
            _3136 = frontier_phi_63_64_ladder_5;
            _3138 = frontier_phi_63_64_ladder_4;
            _3140 = frontier_phi_63_64_ladder_3;
            _3142 = frontier_phi_63_64_ladder;
            _3144 = frontier_phi_63_64_ladder_2;
            _3146 = frontier_phi_63_64_ladder_1;
        }
        float _3151 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2948 = (_3151 * _3142) + _2460;
        _2950 = (_3151 * _3144) + _2462;
        _2952 = (_3151 * _3146) + _2464;
        _2954 = ((_3136 * _873) * _3151) + _2798;
        _2956 = ((_3138 * _875) * _3151) + _2800;
        _2958 = ((_3140 * _876) * _3151) + _2802;
    }
    else
    {
        _2948 = _2460;
        _2950 = _2462;
        _2952 = _2464;
        _2954 = _2798;
        _2956 = _2800;
        _2958 = _2802;
    }
    float _4949 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4960 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4971 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2975 = ((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2948 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _889))) + ((_2954 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2976 = ((isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2950 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _889))) + ((_2956 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2977 = ((isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_2952 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _889))) + ((_2958 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    uint _2978 = _248 + 6u;
    float _2986 = _811 / cbSceneParam._m0[86u].x;
    float _2987 = _812 / cbSceneParam._m0[86u].y;
    vec4 _3001 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2986, _2987, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3003 = _3001.x;
    float _3004 = _3001.y;
    float _3005 = _3001.z;
    float _3006 = _3001.w;
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _3040 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _3041 = _3040 / _733;
        float _3052 = _3041 * _784;
        float _3053 = _785 * _3041;
        float _3054 = (-0.0) - _3053;
        float _3056 = _3041 * _786;
        float _3058 = (cbSceneParam._m0[77u].w * _3054) / _3040;
        float _3059 = _3058 + cbSceneParam._m0[79u].w;
        float _3060 = cbSceneParam._m0[79u].w - _3053;
        float _3066 = sqrt(((_3052 * _3052) + (_3053 * _3053)) + (_3056 * _3056));
        float _3069 = (1.0 - (cbSceneParam._m0[77u].w / _3040)) * _3066;
        float _3074 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3076 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3253;
        if (abs((_3054 - _3058) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3253 = ((((_3059 > 0.0) ? exp2(_3074 * _3059) : (2.0 - exp2(_3076 * _3059))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3069;
        }
        else
        {
            float _3197 = 1.0 / cbSceneParam._m0[80u].x;
            float _3198 = isnan(_3060) ? _3059 : (isnan(_3059) ? _3060 : max(_3059, _3060));
            float _3199 = isnan(_3060) ? _3059 : (isnan(_3059) ? _3060 : min(_3059, _3060));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            float _3209 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : min(_3199, 0.0));
            _3253 = ((abs(_3066 / _3054) * cbSceneParam._m0[80u].y) * ((((_3208 - _3209) * 2.0) - ((exp2(_3074 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0)))) - exp2(_3074 * (isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))))) * _3197)) - ((exp2(_3076 * _3208) - exp2(_3076 * _3209)) * _3197))) + (_3069 * cbSceneParam._m0[80u].z);
        }
        vec4 _3255 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2986, _2987, 1.0), 0.0);
        float _3264 = exp2((_3253 * (-1.44269502162933349609375)) * (1.0 - _3255.w));
        float _3265 = log2(_3264);
        float _3281 = log2(_3006);
        _3078 = (exp2(_3281 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].x)) * _3255.x) / cbSceneParam._m0[78u].x)) + _3003;
        _3080 = (exp2(_3281 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].y)) * _3255.y) / cbSceneParam._m0[78u].y)) + _3004;
        _3082 = (exp2(_3281 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3265 * cbSceneParam._m0[78u].z)) * _3255.z) / cbSceneParam._m0[78u].z)) + _3005;
        _3084 = _3264 * _3006;
    }
    else
    {
        _3078 = _3003;
        _3080 = _3004;
        _3082 = _3005;
        _3084 = _3006;
    }
    bool _3291;
    vec4 _3094;
    vec4 _3116;
    float _3118;
    float _3122;
    float _3123;
    float _3124;
    float _3125;
    bool _3135;
    for (;;)
    {
        _3094 = cbMatDynParam._m0[0u];
        float _3096 = roundEven(_3094.y);
        bool _3097 = _3096 == 3.0;
        float _3098 = log2(_3084);
        float _3105 = exp2(_3098 * cbSceneParam._m0[78u].x) * _2975;
        float _3106 = exp2(_3098 * cbSceneParam._m0[78u].y) * _2976;
        float _3107 = exp2(_3098 * cbSceneParam._m0[78u].z) * _2977;
        float _3114 = _800 + (-0.5);
        _3116 = cbMtdParam._m0[1u];
        _3118 = _3116.y * _3114;
        float _3121 = (_3096 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3122 = _3121 * (_3097 ? _3105 : (_3105 + (cbSceneParam._m0[72u].w * _3078)));
        _3123 = _3121 * (_3097 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3080)));
        _3124 = _3121 * (_3097 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3082)));
        _3125 = _3114 * 0.999000012874603271484375;
        _3135 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3135)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _3125) < 0.5)
            {
                _3291 = true;
                break;
            }
        }
        uint _3232 = _849 + uint(_3094.w);
        if ((cbInstanceData._m0[_3232].w < 1.0) && ((cbInstanceData._m0[_3232].w + _3125) < 0.5))
        {
            _3291 = true;
            break;
        }
        if ((_3118 + 1.0) < _3116.x)
        {
            _3291 = true;
            break;
        }
        _3291 = false;
        break;
    }
    float _3495;
    if (_3291)
    {
        discard_state = true;
        _3495 = 0.0;
    }
    else
    {
        _3495 = cbInstanceData._m0[_2978].w;
    }
    SV_Target.x = _3122;
    SV_Target.y = _3123;
    SV_Target.z = _3124;
    SV_Target.w = _3495;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2978].w;
    discard_exit();
}


