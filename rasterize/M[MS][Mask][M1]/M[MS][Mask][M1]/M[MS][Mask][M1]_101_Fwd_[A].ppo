#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1378;
float _3757;
float _3758;
float _3759;
float _3760;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _391 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_379 - _391) * cbMtdParam._m0[23u].w) + _391) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3769 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _416 = (_409 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _417 = (_409 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _418 = (_409 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _435 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _455 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _457 = _455.x;
    float _467 = dot(vec4(_457, _455.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _481 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_457 - _467) * cbMtdParam._m0[23u].w) + _467) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3780 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _489 = (_482 * ((_435.x * cbMtdParam._m0[13u].x) - _416)) + _416;
    float _490 = (_482 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417;
    float _491 = (_482 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _529 = _527.x;
    float _539 = dot(vec4(_529, _527.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _551 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _338.z) * 2.0) - ((((_529 - _539) * cbMtdParam._m0[23u].w) + _539) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3791 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _559 = (_552 * ((_510.x * cbMtdParam._m0[14u].x) - _489)) + _489;
    float _560 = (_552 * ((_510.y * cbMtdParam._m0[14u].y) - _490)) + _490;
    float _561 = (_552 * ((_510.z * cbMtdParam._m0[14u].z) - _491)) + _491;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    float _602 = ((_574.x - _593) * _409) + _593;
    float _603 = ((_574.y - _594) * _409) + _594;
    float _604 = ((_574.z - _595) * _409) + _595;
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _627 = ((_616.x - _602) * _482) + _602;
    float _628 = ((_616.y - _603) * _482) + _603;
    float _629 = ((_616.z - _604) * _482) + _604;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _654 = ((_641.z - _629) * _552) + _629;
    float _657 = ((((_641.x - _627) * _552) + _627) * 2.0) + (-1.0);
    float _659 = ((((_641.y - _628) * _552) + _628) * 2.0) + (-1.0);
    float _660 = dot(vec2(_657, _659), vec2(_657, _659));
    float _3802 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _691 = (((_679.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _657;
    float _692 = (((_679.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _659;
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _720 = _718.x;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _720) * _409) + _720;
    float _756 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _738) * _482) + _738;
    float _774 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _270) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _271) + cbTextureTilingScale._m0[10u].w)).x - _756) * _552) + _756;
    float _778 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _774) * cbMtdParam._m0[19u].z) + _774;
    float _782 = (cbMtdParam._m0[19u].w * (_679.z - _654)) + _654;
    float _784 = cbMtdParam._m0[22u].x + _679.w;
    float _787 = fma(_665, _237 * NORMAL.x, fma(_692, _244 * TANGENT.x, (_230 * _222) * _691));
    float _790 = fma(_665, _237 * NORMAL.y, fma(_692, _244 * TANGENT.y, (_230 * _223) * _691));
    float _793 = fma(_665, _237 * NORMAL.z, fma(_692, _244 * TANGENT.z, (_230 * _224) * _691));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _3813 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _801 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _3835 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3846 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3857 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3868 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _806 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    vec4 _884 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _886 = _884.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1058 = sqrt(((_870 * _870) + (_871 * _871)) + (_872 * _872));
        float _1064 = (cbMatDynParam._m0[5u].x * _1058) + cbMatDynParam._m0[5u].y;
        float _3879 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1069 = (cbMatDynParam._m0[5u].z * _1058) + cbMatDynParam._m0[5u].w;
        float _3890 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) - _1065)) + _1065) < ((_886 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _897 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _898 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _916 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _919 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _922 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _935 = _250 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_936].z;
    float _3901 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _948 = 1.0 - _806;
    float _949 = _945 * _948;
    float _950 = _946 * _948;
    float _951 = _947 * _948;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _806;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _806;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _806;
    float _959 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    vec4 _971 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _897, cbSceneParam._m0[86u].y * _898));
    float _975 = ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * TEXCOORD_5.w) * _971.x;
    float _976 = dot(vec3(_798, _799, _800), vec3(_877, _878, _879));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _798) - _877;
    float _984 = (_979 * _799) - _878;
    float _985 = (_979 * _800) - _879;
    float _989 = abs(dot(vec3(_877, _878, _879), vec3(_798, _799, _800)));
    float _3934 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_801);
    float _1004 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1010 = (1.0 - _1004) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1011 = _1004 * _991;
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1106 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1110 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1135 = _1039 + _798;
        float _1136 = _1043 + _799;
        float _1137 = _1047 + _800;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_798, _799, _800), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3982 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_798, _799, _800), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4015 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_798, _799, _800), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4048 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1422 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1426 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1449 = _1039 + _798;
        float _1450 = _1043 + _799;
        float _1451 = _1047 + _800;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_798, _799, _800), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4111 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_798, _799, _800), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4144 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_798, _799, _800), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4177 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1378;
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1390)) + _1390;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1391)) + _1391;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1392)) + _1392;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _983 * 0.5;
    float _1756 = _984 * 0.5;
    float _1757 = _985 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1886 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1889 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1917 = frontier_phi_17_15_ladder;
        }
        float _2120;
        if (_1886 > 0.0)
        {
            _2120 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2120 = frontier_phi_26_22_ladder;
        }
        float _2374;
        if (_1889 > 0.0)
        {
            _2374 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2374 = frontier_phi_38_33_ladder;
        }
        float _2376 = isnan(_2120) ? _1917 : (isnan(_1917) ? _2120 : min(_1917, _2120));
        float _2377 = isnan(_2374) ? _2376 : (isnan(_2376) ? _2374 : min(_2376, _2374));
        float _2381 = (_2377 * _1883) + _1872;
        float _2382 = (_2377 * _1886) + _1876;
        float _2383 = (_2377 * _1889) + _1880;
        float _2384 = _2377 * 9.9999997473787516355514526367188e-05;
        float _2386 = (-1.0) - _2384;
        float _2388 = _2384 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2383 > _2388) || ((_2383 < _2386) || ((_2382 > _2388) || ((_2382 < _2386) || ((_2381 < _2386) || (_2381 > _2388))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2383, cbModelParam._m0[9u].z, fma(_2382, cbModelParam._m0[9u].y, _2381 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2383, cbModelParam._m0[10u].z, fma(_2382, cbModelParam._m0[10u].y, _2381 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2383, cbModelParam._m0[11u].z, fma(_2382, cbModelParam._m0[11u].y, _2381 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_16_38_ladder = _2511.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2511.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2511.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_16_38_ladder_2;
        _1907 = frontier_phi_16_38_ladder_1;
        _1909 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1824);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1982 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1985 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2125;
        if (_1979 > 0.0)
        {
            _2125 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2125 = frontier_phi_28_24_ladder;
        }
        float _2401;
        if (_1982 > 0.0)
        {
            _2401 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2401 = frontier_phi_40_35_ladder;
        }
        float _2614;
        if (_1985 > 0.0)
        {
            _2614 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2614 = frontier_phi_49_46_ladder;
        }
        float _2616 = isnan(_2401) ? _2125 : (isnan(_2125) ? _2401 : min(_2125, _2401));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _1979) + _1968;
        float _2622 = (_2617 * _1982) + _1972;
        float _2623 = (_2617 * _1985) + _1976;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2624;
        float _2627 = _2624 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2623 > _2627) || ((_2623 < _2625) || ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 < _2625) || (_2621 > _2627))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2623, cbModelParam._m0[17u].z, fma(_2622, cbModelParam._m0[17u].y, _2621 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2623, cbModelParam._m0[18u].z, fma(_2622, cbModelParam._m0[18u].y, _2621 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2623, cbModelParam._m0[19u].z, fma(_2622, cbModelParam._m0[19u].y, _2621 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_25_49_ladder = _2822.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2822.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2822.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_25_49_ladder_2;
        _2006 = frontier_phi_25_49_ladder_1;
        _2008 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1914);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1010 * _959) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2023 = (((_1010 * _961) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2025 = (((_1010 * _962) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    uvec4 _2044 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2046 = _2044.x * 14u;
    uint _2047 = _2046 + 13u;
    float _2054 = _975 + (-1.0);
    float _2059 = (cbLight._m0[_2047].x * _2054) + 1.0;
    float _2060 = (cbLight._m0[_2047].y * _2054) + 1.0;
    float _2061 = (cbLight._m0[_2047].z * _2054) + 1.0;
    float _2062 = (cbLight._m0[_2047].w * _2054) + 1.0;
    uint _2063 = _2046 + 5u;
    float _2069 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
    uint _2073 = _2046 + 4u;
    float _2079 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2083 = _2046 | 1u;
    float _2094 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_798, _799, _800));
    float _2097 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_798, _799, _800));
    float _4313 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _4324 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * 0.3183098733425140380859375;
    float _2104 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2111 = ((cbLight._m0[_2063].x * _2069) * _2104) + ((cbLight._m0[_2073].x * _2079) * _2102);
    float _2112 = ((_2069 * cbLight._m0[_2063].y) * _2104) + ((_2079 * cbLight._m0[_2073].y) * _2102);
    float _2113 = ((_2069 * cbLight._m0[_2063].z) * _2104) + ((_2079 * cbLight._m0[_2073].z) * _2102);
    uvec4 _2117 = floatBitsToUint(cbLight._m0[_2046 + 12u]);
    bool _2119 = _2117.x == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2119)
    {
        _2130 = _2111;
        _2132 = _2112;
        _2134 = _2113;
    }
    else
    {
        uint _2138 = _2046 + 6u;
        float _2154 = (dot(vec3(cbLight._m0[_2046 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4335 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2157 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2130 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _2111;
        _2132 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _2112;
        _2134 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _2113;
    }
    bool _2137 = _2117.y == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2137)
    {
        _2175 = _2130;
        _2177 = _2132;
        _2179 = _2134;
    }
    else
    {
        uint _2345 = _2046 + 7u;
        float _2361 = (dot(vec3(cbLight._m0[_2046 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2362 = _2361 * _2361;
        float _4351 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2363 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2364 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2175 = (((cbLight._m0[_2345].x * 0.3183098733425140380859375) * _2363) * _2364) + _2130;
        _2177 = (((cbLight._m0[_2345].y * 0.3183098733425140380859375) * _2363) * _2364) + _2132;
        _2179 = (((cbLight._m0[_2345].z * 0.3183098733425140380859375) * _2363) * _2364) + _2134;
    }
    uint _2182 = _2046 + 8u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _801) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2046].x + _877;
    float _2198 = cbLight._m0[_2046].y + _878;
    float _2199 = cbLight._m0[_2046].z + _879;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2046].xyz));
    float _4367 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2211 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2212 = dot(vec3(_798, _799, _800), vec3(_2204, _2205, _2206));
    float _4389 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2204, _2205, _2206));
    float _4400 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2196 * _2196;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2232 = exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0);
    float _2233 = 0.959999978542327880859375 - _956;
    float _2235 = 0.959999978542327880859375 - _957;
    float _2236 = 0.959999978542327880859375 - _958;
    float _2243 = 1.0 - _2196;
    float _2254 = (0.5 / (((_2211 * ((_2210 * _2243) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2243) + _2196) * _2210))) * _2210;
    float _4411 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    uint _2267 = _2046 + 9u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _801) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2083].x + _877;
    float _2281 = cbLight._m0[_2083].y + _878;
    float _2282 = cbLight._m0[_2083].z + _879;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2083].xyz));
    float _4422 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2294 = dot(vec3(_798, _799, _800), vec3(_2287, _2288, _2289));
    float _4433 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2287, _2288, _2289));
    float _4444 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2279 * _2279;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0);
    float _2320 = 1.0 - _2279;
    float _2330 = (0.5 / (((_2211 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2320) + _2279) * _2293))) * _2293;
    float _4455 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    float _2342 = (((((_2313 * _2233) + _959) * cbLight._m0[_2267].x) * _2332) * _2069) + (((((_2232 * _2233) + _959) * cbLight._m0[_2182].x) * _2256) * _2079);
    float _2343 = (((((_2313 * _2235) + _961) * cbLight._m0[_2267].y) * _2332) * _2069) + (((((_2232 * _2235) + _961) * cbLight._m0[_2182].y) * _2256) * _2079);
    float _2344 = (((((_2313 * _2236) + _962) * cbLight._m0[_2267].z) * _2332) * _2069) + (((((_2232 * _2236) + _962) * cbLight._m0[_2182].z) * _2256) * _2079);
    float _2406;
    float _2408;
    float _2410;
    if (_2119)
    {
        _2406 = _2342;
        _2408 = _2343;
        _2410 = _2344;
    }
    else
    {
        uint _2412 = _2046 + 2u;
        uint _2416 = _2046 + 10u;
        float _2430 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2412].w)) * _801) * 0.949999988079071044921875);
        float _2431 = _2430 * _2430;
        float _2432 = cbLight._m0[_2412].x + _877;
        float _2433 = cbLight._m0[_2412].y + _878;
        float _2434 = cbLight._m0[_2412].z + _879;
        float _2438 = inversesqrt(dot(vec3(_2432, _2433, _2434), vec3(_2432, _2433, _2434)));
        float _2439 = _2438 * _2432;
        float _2440 = _2438 * _2433;
        float _2441 = _2438 * _2434;
        float _2442 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2412].xyz));
        float _4466 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2446 = dot(vec3(_798, _799, _800), vec3(_2439, _2440, _2441));
        float _4477 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2449 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2450 = dot(vec3(cbLight._m0[_2412].xyz), vec3(_2439, _2440, _2441));
        float _4488 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2454 = _2431 * _2431;
        float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
        float _2465 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
        float _2472 = 1.0 - _2431;
        float _2482 = (0.5 / (((_2211 * ((_2445 * _2472) + _2431)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2472) + _2431) * _2445))) * _2445;
        float _4499 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2484 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
        float _2485 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2406 = (((((_2465 * _2233) + _959) * cbLight._m0[_2416].x) * _2484) * _2485) + _2342;
        _2408 = (((((_2465 * _2235) + _961) * cbLight._m0[_2416].y) * _2484) * _2485) + _2343;
        _2410 = (((((_2465 * _2236) + _962) * cbLight._m0[_2416].z) * _2484) * _2485) + _2344;
    }
    float _2520;
    float _2522;
    float _2524;
    if (_2137)
    {
        _2520 = _2406;
        _2522 = _2408;
        _2524 = _2410;
    }
    else
    {
        uint _2531 = _2046 + 3u;
        uint _2535 = _2046 + 11u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _801) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _877;
        float _2552 = cbLight._m0[_2531].y + _878;
        float _2553 = cbLight._m0[_2531].z + _879;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2531].xyz));
        float _4515 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2565 = dot(vec3(_798, _799, _800), vec3(_2558, _2559, _2560));
        float _4526 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4537 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
        float _2591 = 1.0 - _2550;
        float _2601 = (0.5 / (((_2211 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2591) + _2550) * _2564))) * _2564;
        float _4548 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2603 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2604 = isnan(1.0) ? _2062 : (isnan(_2062) ? 1.0 : min(_2062, 1.0));
        _2520 = (((((_2584 * _2233) + _959) * cbLight._m0[_2535].x) * _2603) * _2604) + _2406;
        _2522 = (((((_2584 * _2235) + _961) * cbLight._m0[_2535].y) * _2603) * _2604) + _2408;
        _2524 = (((((_2584 * _2236) + _962) * cbLight._m0[_2535].z) * _2603) * _2604) + _2410;
    }
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_2044.y == 0u)
    {
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2679;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2679;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2679;
        uvec4 _2694 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2695 = _2694.x;
        uint _2706 = uint((float(_2694.y) * floor(float(uint(cbSceneParam._m0[85u].y * _898) / _2695))) + floor(float(uint(cbSceneParam._m0[85u].x * _897) / _2695)));
        float _2716 = (log2(_2682 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2717 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        uint _2720 = uint(isnan(14.0) ? _2717 : (isnan(_2717) ? 14.0 : min(_2717, 14.0)));
        uvec4 _2725 = texelFetch(g_lightClusterGridBuffer, int(((_2720 << 2u) + (_2706 << 6u)) >> 2u));
        uint _2726 = _2725.x;
        uint _2727 = _2694.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2727 >> 4u) & 15u)) + 4294967295u) & _2726) == 0u) || ((_2727 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            uint _2986 = 0u;
            uint _2995;
            bool _2996;
            for (;;)
            {
                _2995 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                _2996 = _2995 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2996)
                {
                    frontier_phi_66_pred = _2980;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                else
                {
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    uint _3131;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2995;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    for (;;)
                    {
                        uint _3135 = uint(findLSB(_3131)) + (_2986 << 5u);
                        uint _3132 = (_3131 + 4294967295u) & _3131;
                        uint _3137 = _3135 * 48u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3157 = (_3135 * 48u) + 4u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3176 = (_3135 * 48u) + 8u;
                        vec3 _3187 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x));
                        float _3191 = _3151.x - _2680;
                        float _3192 = _3151.y - _2681;
                        float _3193 = _3151.z - _2682;
                        float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                        float _3197 = inversesqrt(_3194);
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3201 = dot(vec3(_916, _919, _922), vec3(_3198, _3199, _3200));
                        float _3206 = 1.0 - (_3194 * _3151.w);
                        float _4574 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3208 = sqrt(_3194) * _3170.w;
                        float _3211 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3201) + _3212;
                        float _3218 = _3208 * _3208;
                        float _3222 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3207) / ((_3218 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _2680;
                        float _3227 = (-0.0) - _2681;
                        float _3228 = (-0.0) - _2682;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3243 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                        float _3244 = 1.0 - _991;
                        float _3251 = sqrt(1.0 - ((1.0 - (_3244 * _3244)) * (1.0 - (_3243 * _3243))));
                        float _3252 = _3251 * _3251;
                        float _3253 = _3252 * _3252;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3256 = _3235 + _3200;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3264 = dot(vec3(_916, _919, _922), vec3(_3233, _3234, _3235));
                        float _4590 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3268 = dot(vec3(_916, _919, _922), vec3(_3260 * _3254, _3260 * _3255, _3260 * _3256));
                        float _4601 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3275 = ((_3271 * _3271) * (_3253 + (-1.0))) + 1.0;
                        float _3276 = _3211 * _3252;
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3201) + _3277;
                        float _4612 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3281 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3282 = 1.0 - _3252;
                        float _3292 = (0.5 / (((_3281 * ((_3267 * _3282) + _3252)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3252) * _3267))) * _3281;
                        float _4623 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3303 = (((_3253 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3275 * _3275) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125))) * _3207;
                        _3055 = (_3222 * _3170.x) + _3128;
                        _3056 = (_3222 * _3170.y) + _3129;
                        _3057 = (_3222 * _3170.z) + _3130;
                        _3052 = (_3303 * _3187.x) + _3125;
                        _3053 = (_3303 * _3187.y) + _3126;
                        _3054 = (_3303 * _3187.z) + _3127;
                        if (_3132 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3132;
                        }
                    }
                    frontier_phi_66_pred = _3052;
                    frontier_phi_66_pred_1 = _3057;
                    frontier_phi_66_pred_2 = _3056;
                    frontier_phi_66_pred_3 = _3055;
                    frontier_phi_66_pred_4 = _3054;
                    frontier_phi_66_pred_5 = _3053;
                }
                _2828 = frontier_phi_66_pred;
                _2838 = frontier_phi_66_pred_1;
                _2836 = frontier_phi_66_pred_2;
                _2834 = frontier_phi_66_pred_3;
                _2832 = frontier_phi_66_pred_4;
                _2830 = frontier_phi_66_pred_5;
                uint _2987 = _2986 + 1u;
                if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2980 = _2828;
                    _2981 = _2830;
                    _2982 = _2832;
                    _2983 = _2834;
                    _2984 = _2836;
                    _2985 = _2838;
                    _2986 = _2987;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((4294967295u << _2844) & _2726) == 0u)
        {
            _2948 = _2827;
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
            _2956 = _2835;
            _2958 = _2837;
        }
        else
        {
            float _2973 = inversesqrt(dot(vec3(_2680, _2681, _2682), vec3(_2680, _2681, _2682)));
            float _2974 = _2973 * _2680;
            float _2975 = _2973 * _2681;
            float _2976 = _2973 * _2682;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _3108 = _2827;
                float _3109 = _2829;
                float _3110 = _2831;
                float _3111 = _2833;
                float _3112 = _2835;
                float _3113 = _2837;
                uint _3114 = _2844;
                uint _3123;
                bool _3124;
                for (;;)
                {
                    _3123 = texelFetch(g_lightClassification, int((((_2720 << 5u) + (_2706 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                    _3124 = _3123 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3124)
                    {
                        frontier_phi_77_pred = _3113;
                        frontier_phi_77_pred_1 = _3112;
                        frontier_phi_77_pred_2 = _3111;
                        frontier_phi_77_pred_3 = _3110;
                        frontier_phi_77_pred_4 = _3109;
                        frontier_phi_77_pred_5 = _3108;
                    }
                    else
                    {
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        uint _3336 = _3123;
                        uint _3337;
                        vec4 _3362;
                        float _3363;
                        vec4 _3378;
                        vec3 _3390;
                        vec4 _3405;
                        vec4 _3420;
                        float _3466;
                        bool _3467;
                        for (;;)
                        {
                            uint _3347 = ((_3114 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3336));
                            _3337 = (_3336 + 4294967295u) & _3336;
                            uint _3349 = _3347 * 40u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3363 = _3362.w;
                            uint _3365 = (_3347 * 40u) + 4u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3347 * 40u) + 8u;
                            _3390 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x));
                            uint _3392 = (_3347 * 40u) + 16u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3347 * 40u) + 20u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3347 * 40u) + 24u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3441 = (_3347 * 40u) + 28u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3466 = fma(_2682, _3454.z, fma(_2681, _3454.y, _3454.x * _2680)) + _3454.w;
                            _3467 = !((fma(_2682, _3435.z, fma(_2681, _3435.y, _3435.x * _2680)) + _3435.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3467)
                            {
                                float _3494 = _3362.x - _2680;
                                float _3495 = _3362.y - _2681;
                                float _3496 = _3362.z - _2682;
                                float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                                float _3500 = inversesqrt(_3497);
                                float _3501 = _3500 * _3494;
                                float _3502 = _3500 * _3495;
                                float _3503 = _3500 * _3496;
                                float _3507 = 1.0 - (_3497 / (_3363 * _3363));
                                float _4634 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3512 = sqrt(_3497) * _3378.w;
                                float _3514 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                                float _3515 = _3514 * _3514;
                                float _3518 = ((1.0 - _3515) * dot(vec3(_3501, _3502, _3503), vec3(_916, _919, _922))) + _3515;
                                float _3521 = _3512 * _3512;
                                float _3525 = (fma(_2682, _3405.z, fma(_2681, _3405.y, _3405.x * _2680)) + _3405.w) / _3466;
                                float _3526 = (fma(_2682, _3420.z, fma(_2681, _3420.y, _3420.x * _2680)) + _3420.w) / _3466;
                                float _3530 = 1.0 - dot(vec2(_3525, _3526), vec2(_3525, _3526));
                                float _4650 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3532 = _3531 * (((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3508) / ((_3521 * 0.699999988079071044921875) + 1.0));
                                float _3544 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                                float _3545 = 1.0 - _991;
                                float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                                float _3553 = _3552 * _3552;
                                float _3554 = _3553 * _3553;
                                float _3555 = _3501 - _2974;
                                float _3556 = _3502 - _2975;
                                float _3557 = _3503 - _2976;
                                float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                                float _3565 = dot(vec3(_916, _919, _922), vec3((-0.0) - _2974, (-0.0) - _2975, (-0.0) - _2976));
                                float _4661 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3569 = dot(vec3(_916, _919, _922), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                                float _4672 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                                float _3577 = _3514 * _3553;
                                float _3578 = _3577 * _3577;
                                float _3584 = ((1.0 - _3578) * dot(vec3(_916, _919, _922), vec3(_3501, _3502, _3503))) + _3578;
                                float _4683 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3586 = 1.0 - _3553;
                                float _3596 = (0.5 / (((_3585 * ((_3568 * _3586) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3553) * _3568))) * _3585;
                                float _4694 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3606 = (_3531 * _3508) * (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) / ((_3576 * _3576) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3532 * _3378.y;
                                frontier_phi_83_pred_1 = _3532 * _3378.x;
                                frontier_phi_83_pred_2 = _3606 * _3390.z;
                                frontier_phi_83_pred_3 = _3606 * _3390.y;
                                frontier_phi_83_pred_4 = _3606 * _3390.x;
                                frontier_phi_83_pred_5 = _3532 * _3378.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3614 = frontier_phi_83_pred;
                            _3613 = frontier_phi_83_pred_1;
                            _3612 = frontier_phi_83_pred_2;
                            _3611 = frontier_phi_83_pred_3;
                            _3610 = frontier_phi_83_pred_4;
                            _3615 = frontier_phi_83_pred_5;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            _3322 = _3615 + _3335;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            if (_3337 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3337;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3322;
                        frontier_phi_77_pred_1 = _3321;
                        frontier_phi_77_pred_2 = _3320;
                        frontier_phi_77_pred_3 = _3319;
                        frontier_phi_77_pred_4 = _3318;
                        frontier_phi_77_pred_5 = _3317;
                    }
                    _2959 = frontier_phi_77_pred;
                    _2957 = frontier_phi_77_pred_1;
                    _2955 = frontier_phi_77_pred_2;
                    _2953 = frontier_phi_77_pred_3;
                    _2951 = frontier_phi_77_pred_4;
                    _2949 = frontier_phi_77_pred_5;
                    uint _3115 = _3114 + 1u;
                    if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3108 = _2949;
                        _3109 = _2951;
                        _3110 = _2953;
                        _3111 = _2955;
                        _3112 = _2957;
                        _3113 = _2959;
                        _3114 = _3115;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2953;
                frontier_phi_58_59_ladder_1 = _2959;
                frontier_phi_58_59_ladder_2 = _2957;
                frontier_phi_58_59_ladder_3 = _2955;
                frontier_phi_58_59_ladder_4 = _2951;
                frontier_phi_58_59_ladder_5 = _2949;
            }
            else
            {
                frontier_phi_58_59_ladder = _2831;
                frontier_phi_58_59_ladder_1 = _2837;
                frontier_phi_58_59_ladder_2 = _2835;
                frontier_phi_58_59_ladder_3 = _2833;
                frontier_phi_58_59_ladder_4 = _2829;
                frontier_phi_58_59_ladder_5 = _2827;
            }
            _2948 = frontier_phi_58_59_ladder_5;
            _2950 = frontier_phi_58_59_ladder_4;
            _2952 = frontier_phi_58_59_ladder;
            _2954 = frontier_phi_58_59_ladder_3;
            _2956 = frontier_phi_58_59_ladder_2;
            _2958 = frontier_phi_58_59_ladder_1;
        }
        float _2963 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _2739 = (_2963 * _2954) + _2175;
        _2741 = (_2963 * _2956) + _2177;
        _2743 = (_2963 * _2958) + _2179;
        _2745 = ((_2948 * _959) * _2963) + _2520;
        _2747 = ((_2950 * _961) * _2963) + _2522;
        _2749 = ((_2952 * _962) * _2963) + _2524;
    }
    else
    {
        _2739 = _2175;
        _2741 = _2177;
        _2743 = _2179;
        _2745 = _2520;
        _2747 = _2522;
        _2749 = _2524;
    }
    float _4710 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4721 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4732 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _2766 = ((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2739 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _975))) + ((_2745 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2741 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _975))) + ((_2747 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _2768 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2743 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _975))) + ((_2749 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    uint _2769 = _250 + 6u;
    float _2777 = _897 / cbSceneParam._m0[86u].x;
    float _2778 = _898 / cbSceneParam._m0[86u].y;
    vec4 _2792 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2794 = _2792.x;
    float _2795 = _2792.y;
    float _2796 = _2792.z;
    float _2797 = _2792.w;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _2853 = _2852 / _820;
        float _2864 = _2853 * _870;
        float _2865 = _871 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2868 = _2853 * _872;
        float _2870 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2871 = _2870 + cbSceneParam._m0[79u].w;
        float _2872 = cbSceneParam._m0[79u].w - _2865;
        float _2878 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2868 * _2868));
        float _2881 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2878;
        float _2886 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2888 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3065;
        if (abs((_2866 - _2870) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3065 = ((((_2871 > 0.0) ? exp2(_2886 * _2871) : (2.0 - exp2(_2888 * _2871))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2881;
        }
        else
        {
            float _3009 = 1.0 / cbSceneParam._m0[80u].x;
            float _3010 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : max(_2871, _2872));
            float _3011 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : min(_2871, _2872));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            _3065 = ((abs(_2878 / _2866) * cbSceneParam._m0[80u].y) * ((((_3020 - _3021) * 2.0) - ((exp2(_2886 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0)))) - exp2(_2886 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))))) * _3009)) - ((exp2(_2888 * _3020) - exp2(_2888 * _3021)) * _3009))) + (_2881 * cbSceneParam._m0[80u].z);
        }
        vec4 _3067 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2777, _2778, 1.0), 0.0);
        float _3076 = exp2((_3065 * (-1.44269502162933349609375)) * (1.0 - _3067.w));
        float _3077 = log2(_3076);
        float _3093 = log2(_2797);
        _2890 = (exp2(_3093 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].x)) * _3067.x) / cbSceneParam._m0[78u].x)) + _2794;
        _2892 = (exp2(_3093 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].y)) * _3067.y) / cbSceneParam._m0[78u].y)) + _2795;
        _2894 = (exp2(_3093 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3077 * cbSceneParam._m0[78u].z)) * _3067.z) / cbSceneParam._m0[78u].z)) + _2796;
        _2896 = _3076 * _2797;
    }
    else
    {
        _2890 = _2794;
        _2892 = _2795;
        _2894 = _2796;
        _2896 = _2797;
    }
    bool _3103;
    vec4 _2906;
    vec4 _2928;
    float _2930;
    float _2934;
    float _2935;
    float _2936;
    float _2937;
    bool _2947;
    for (;;)
    {
        _2906 = cbMatDynParam._m0[0u];
        float _2908 = roundEven(_2906.y);
        bool _2909 = _2908 == 3.0;
        float _2910 = log2(_2896);
        float _2917 = exp2(_2910 * cbSceneParam._m0[78u].x) * _2766;
        float _2918 = exp2(_2910 * cbSceneParam._m0[78u].y) * _2767;
        float _2919 = exp2(_2910 * cbSceneParam._m0[78u].z) * _2768;
        float _2926 = _886 + (-0.5);
        _2928 = cbMtdParam._m0[1u];
        _2930 = _2928.y * _2926;
        float _2933 = (_2908 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2934 = _2933 * (_2909 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2890)));
        _2935 = _2933 * (_2909 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2892)));
        _2936 = _2933 * (_2909 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2894)));
        _2937 = _2926 * 0.999000012874603271484375;
        _2947 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2947)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2937) < 0.5)
            {
                _3103 = true;
                break;
            }
        }
        uint _3044 = _935 + uint(_2906.w);
        if ((cbInstanceData._m0[_3044].w < 1.0) && ((cbInstanceData._m0[_3044].w + _2937) < 0.5))
        {
            _3103 = true;
            break;
        }
        if ((_2930 + 1.0) < _2928.x)
        {
            _3103 = true;
            break;
        }
        _3103 = false;
        break;
    }
    float _3308;
    if (_3103)
    {
        discard_state = true;
        _3308 = 0.0;
    }
    else
    {
        _3308 = cbInstanceData._m0[_2769].w;
    }
    SV_Target.x = _2934;
    SV_Target.y = _2935;
    SV_Target.z = _2936;
    SV_Target.w = _3308;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2769].w;
    discard_exit();
}


