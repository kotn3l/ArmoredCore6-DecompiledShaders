#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1366;
float _3745;
float _3746;
float _3747;
float _3748;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3757 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3768 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3779 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[23u].w) + _417) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3790 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _442 = (_435 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _443 = (_435 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _444 = (_435 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    float _448 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _442;
    float _451 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _443;
    float _454 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _444;
    float _461 = ((_442 - _448) * (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) + _448;
    float _462 = ((_443 - _451) * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) + _451;
    float _463 = ((_444 - _454) * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) + _454;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _559 = ((_529.z - _550) * _435) + _550;
    float _562 = ((((_529.x - _548) * _435) + _548) * 2.0) + (-1.0);
    float _563 = ((((_529.y - _549) * _435) + _549) * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3801 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _601 = (_562 + ((((_502.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_589.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _602 = (_563 + ((((_502.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_589.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = fma(_569, _239, fma(_602, _246, _601 * _232));
    float _608 = fma(_569, _240, fma(_602, _247, _601 * _233));
    float _611 = fma(_569, _241, fma(_602, _248, _601 * _234));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _654 = (cbMtdParam._m0[19u].x + dot(vec4(_615 * _605, _615 * _608, _615 * _611, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_644 - _645) * cbMtdParam._m0[24u].z) + _645) * cbMtdParam._m0[21u].z);
    float _3812 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _662 = (_655 * ((_482.x * cbMtdParam._m0[18u].x) - _461)) + _461;
    float _663 = (_655 * ((_482.y * cbMtdParam._m0[18u].y) - _462)) + _462;
    float _664 = (_655 * ((_482.z * cbMtdParam._m0[18u].z) - _463)) + _463;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _692 = _690.x;
    float _710 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _692) * _435) + _692;
    float _714 = ((_676.x - _710) * cbMtdParam._m0[19u].z) + _710;
    float _716 = _714 - (_714 * _655);
    float _721 = (((_502.z - _559) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _559;
    float _725 = ((_589.z - _721) * cbMtdParam._m0[19u].w) + _721;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _745 = (_738.x * 2.0) + (-1.0);
    float _746 = (_738.y * 2.0) + (-1.0);
    float _747 = dot(vec2(_745, _746), vec2(_745, _746));
    float _3823 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _755 = ((_738.z - _725) * _655) + _725;
    float _765 = ((sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) - _569) * _655) + _569;
    float _768 = (((_745 - _601) * _655) + _601) + (cbMtdParam._m0[21u].x * _601);
    float _769 = (((_746 - _602) * _655) + _602) + (cbMtdParam._m0[21u].x * _602);
    float _771 = cbMtdParam._m0[22u].x + _589.w;
    float _774 = fma(_765, _239, fma(_769, _246, _768 * _232));
    float _777 = fma(_765, _240, fma(_769, _247, _768 * _233));
    float _780 = fma(_765, _241, fma(_769, _248, _768 * _234));
    float _784 = inversesqrt(dot(vec3(_774, _777, _780), vec3(_774, _777, _780)));
    float _785 = _784 * _774;
    float _786 = _784 * _777;
    float _787 = _784 * _780;
    float _3834 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _788 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _3856 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3867 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3878 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3889 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _793 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _858 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _848);
    float _859 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _848);
    float _860 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _848);
    float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
    float _865 = _858 * _864;
    float _866 = _859 * _864;
    float _867 = _860 * _864;
    vec4 _872 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _874 = _872.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1046 = sqrt(((_858 * _858) + (_859 * _859)) + (_860 * _860));
        float _1052 = (cbMatDynParam._m0[5u].x * _1046) + cbMatDynParam._m0[5u].y;
        float _3900 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1057 = (cbMatDynParam._m0[5u].z * _1046) + cbMatDynParam._m0[5u].w;
        float _3911 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) - _1053)) + _1053) < ((_874 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _885 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _886 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _904 = fma(_787, cbSceneParam._m0[5u].z, fma(_786, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _785));
    float _907 = fma(_787, cbSceneParam._m0[6u].z, fma(_786, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _785));
    float _910 = fma(_787, cbSceneParam._m0[7u].z, fma(_786, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _785));
    uint _923 = _272 + 9u;
    uint _924 = _923 + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_924].z;
    float _3922 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _936 = 1.0 - _793;
    float _937 = _933 * _936;
    float _938 = _934 * _936;
    float _939 = _935 * _936;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _793;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _793;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _793;
    float _947 = _944 + 0.039999999105930328369140625;
    float _949 = _945 + 0.039999999105930328369140625;
    float _950 = _946 + 0.039999999105930328369140625;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _885, cbSceneParam._m0[86u].y * _886));
    float _963 = ((isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * TEXCOORD_5.w) * _959.x;
    float _964 = dot(vec3(_785, _786, _787), vec3(_865, _866, _867));
    float _967 = _964 * 2.0;
    float _971 = (_967 * _785) - _865;
    float _972 = (_967 * _786) - _866;
    float _973 = (_967 * _787) - _867;
    float _977 = abs(dot(vec3(_865, _866, _867), vec3(_785, _786, _787)));
    float _3955 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _979 = sqrt(_788);
    float _992 = exp2((_979 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_979 * 3.0));
    float _998 = (1.0 - _992) * ((_979 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _999 = _992 * _979;
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1035, cbModelParam._m0[26u].z, fma(_1031, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027));
        float _1094 = fma(_1035, cbModelParam._m0[27u].z, fma(_1031, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027));
        float _1098 = fma(_1035, cbModelParam._m0[28u].z, fma(_1031, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027));
        float _1123 = _1027 + _785;
        float _1124 = _1031 + _786;
        float _1125 = _1035 + _787;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_785, _786, _787), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4003 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_785, _786, _787), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4036 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_785, _786, _787), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4069 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1408 = fma(_1035, cbModelParam._m0[30u].z, fma(_1031, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1027));
        float _1412 = fma(_1035, cbModelParam._m0[31u].z, fma(_1031, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1027));
        float _1416 = fma(_1035, cbModelParam._m0[32u].z, fma(_1031, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1027));
        float _1439 = _1027 + _785;
        float _1440 = _1031 + _786;
        float _1441 = _1035 + _787;
        float _1451 = fma(_1441, cbModelParam._m0[30u].z, fma(_1440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1439)) - _1408;
        float _1452 = fma(_1441, cbModelParam._m0[31u].z, fma(_1440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1439)) - _1412;
        float _1453 = fma(_1441, cbModelParam._m0[32u].z, fma(_1440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1439)) - _1416;
        float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
        float _1470 = ((_1457 * _1451) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1408 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1457 * _1452) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1412 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1457 * _1453) / cbModelParam._m0[35u].z) + ((((((_1416 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        float _1507 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1474.x + (-0.5));
        float _1509 = _1507 * (_1474.y + (-0.5));
        float _1510 = _1507 * (_1474.z + (-0.5));
        float _1517 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1481.x + (-0.5));
        float _1519 = _1517 * (_1481.y + (-0.5));
        float _1520 = _1517 * (_1481.z + (-0.5));
        float _1527 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1488.x + (-0.5));
        float _1529 = _1527 * (_1488.y + (-0.5));
        float _1530 = _1527 * (_1488.z + (-0.5));
        float _1537 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1495.x + (-0.5));
        float _1539 = _1537 * (_1495.y + (-0.5));
        float _1540 = _1537 * (_1495.z + (-0.5));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = _1508 * 0.5;
        float _1545 = _1518 * 0.5;
        float _1546 = _1528 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_785, _786, _787), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4132 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1571 + 1.0))) + _1576) * _1541;
        float _1586 = _1509 * 0.5;
        float _1587 = _1519 * 0.5;
        float _1588 = _1529 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_785, _786, _787), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4165 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1613 + 1.0))) + _1618) * _1542;
        float _1628 = _1510 * 0.5;
        float _1629 = _1520 * 0.5;
        float _1630 = _1530 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_785, _786, _787), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4198 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1655 + 1.0))) + _1660) * _1543;
        _1677 = _1510;
        _1678 = _1509;
        _1679 = _1508;
        _1680 = _1520;
        _1681 = _1519;
        _1682 = _1518;
        _1683 = _1530;
        _1684 = _1529;
        _1685 = _1528;
        _1686 = _1543;
        _1687 = _1542;
        _1688 = _1541;
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
    }
    else
    {
        _1677 = _1366;
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = _1366;
        _1686 = _1366;
        _1687 = _1366;
        _1688 = _1366;
        _1689 = 0.0;
        _1690 = 0.0;
        _1691 = 0.0;
    }
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1378)) + _1378;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1379)) + _1379;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1380)) + _1380;
    float _1724 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1701));
    float _1745 = _971 * 0.5;
    float _1746 = _972 * 0.5;
    float _1747 = _973 * 0.5;
    float _1748 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1751 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1754 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1761 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1765 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1769 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1776 = dot(vec4(cbModelParam._m0[39u]), vec4(_1745, _1746, _1747, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1745, _1746, _1747, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _788);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1035, cbModelParam._m0[13u].z, fma(_1031, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1027)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1035, cbModelParam._m0[14u].z, fma(_1031, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1027)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1035, cbModelParam._m0[15u].z, fma(_1031, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1027)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_973, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971));
        float _1875 = fma(_973, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971));
        float _1878 = fma(_973, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1906 = frontier_phi_17_15_ladder;
        }
        float _2108;
        if (_1875 > 0.0)
        {
            _2108 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2108 = frontier_phi_26_22_ladder;
        }
        float _2362;
        if (_1878 > 0.0)
        {
            _2362 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2362 = frontier_phi_38_33_ladder;
        }
        float _2364 = isnan(_2108) ? _1906 : (isnan(_1906) ? _2108 : min(_1906, _2108));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1872) + _1861;
        float _2370 = (_2365 * _1875) + _1865;
        float _2371 = (_2365 * _1878) + _1869;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2372;
        float _2376 = _2372 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 > _2376) || ((_2370 < _2374) || ((_2369 < _2374) || (_2369 > _2376))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_16_38_ladder = _2499.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2499.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2499.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_16_38_ladder_2;
        _1896 = frontier_phi_16_38_ladder_1;
        _1898 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_971, _972, _973), _1814);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _788);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1035, cbModelParam._m0[21u].z, fma(_1031, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1027)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1035, cbModelParam._m0[22u].z, fma(_1031, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1027)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1035, cbModelParam._m0[23u].z, fma(_1031, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1027)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_973, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971));
        float _1970 = fma(_973, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971));
        float _1973 = fma(_973, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971));
        float _2113;
        if (_1967 > 0.0)
        {
            _2113 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2113 = frontier_phi_28_24_ladder;
        }
        float _2389;
        if (_1970 > 0.0)
        {
            _2389 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2389 = frontier_phi_40_35_ladder;
        }
        float _2602;
        if (_1973 > 0.0)
        {
            _2602 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2602 = frontier_phi_49_46_ladder;
        }
        float _2604 = isnan(_2389) ? _2113 : (isnan(_2113) ? _2389 : min(_2113, _2389));
        float _2605 = isnan(_2602) ? _2604 : (isnan(_2604) ? _2602 : min(_2604, _2602));
        float _2609 = (_2605 * _1967) + _1956;
        float _2610 = (_2605 * _1970) + _1960;
        float _2611 = (_2605 * _1973) + _1964;
        float _2612 = _2605 * 9.9999997473787516355514526367188e-05;
        float _2613 = (-1.0) - _2612;
        float _2615 = _2612 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2611 > _2615) || ((_2611 < _2613) || ((_2610 > _2615) || ((_2610 < _2613) || ((_2609 < _2613) || (_2609 > _2615))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2810 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2611, cbModelParam._m0[17u].z, fma(_2610, cbModelParam._m0[17u].y, _2609 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2611, cbModelParam._m0[18u].z, fma(_2610, cbModelParam._m0[18u].y, _2609 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2611, cbModelParam._m0[19u].z, fma(_2610, cbModelParam._m0[19u].y, _2609 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_25_49_ladder = _2810.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2810.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2810.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_25_49_ladder_2;
        _1994 = frontier_phi_25_49_ladder_1;
        _1996 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_971, _972, _973), _1903);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2009 = (((_998 * _947) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2011 = (((_998 * _949) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1994 - _1896)) + _1896);
    float _2013 = (((_998 * _950) + _999) * _963) * ((cbModelParam._m0[1u].w * (_1996 - _1898)) + _1898);
    float _2016 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2011, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2011, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2011, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _963 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2067 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2071 = _2034 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_785, _786, _787));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_785, _786, _787));
    float _4334 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4345 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2051].x * _2057) * _2092) + ((cbLight._m0[_2061].x * _2067) * _2090);
    float _2100 = ((_2057 * cbLight._m0[_2051].y) * _2092) + ((_2067 * cbLight._m0[_2061].y) * _2090);
    float _2101 = ((_2057 * cbLight._m0[_2051].z) * _2092) + ((_2067 * cbLight._m0[_2061].z) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2107)
    {
        _2118 = _2099;
        _2120 = _2100;
        _2122 = _2101;
    }
    else
    {
        uint _2126 = _2034 + 6u;
        float _2142 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4356 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2145 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2118 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _2099;
        _2120 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _2100;
        _2122 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _2101;
    }
    bool _2125 = _2105.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2125)
    {
        _2163 = _2118;
        _2165 = _2120;
        _2167 = _2122;
    }
    else
    {
        uint _2333 = _2034 + 7u;
        float _2349 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_785, _786, _787)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4372 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2352 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2163 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2118;
        _2165 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2120;
        _2167 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2122;
    }
    uint _2170 = _2034 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _788) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_2034].x + _865;
    float _2186 = cbLight._m0[_2034].y + _866;
    float _2187 = cbLight._m0[_2034].z + _867;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2034].xyz));
    float _4388 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _2199 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2200 = dot(vec3(_785, _786, _787), vec3(_2192, _2193, _2194));
    float _4410 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2192, _2193, _2194));
    float _4421 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
    float _2221 = 0.959999978542327880859375 - _944;
    float _2223 = 0.959999978542327880859375 - _945;
    float _2224 = 0.959999978542327880859375 - _946;
    float _2231 = 1.0 - _2184;
    float _2242 = (0.5 / (((_2199 * ((_2198 * _2231) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2231) + _2184) * _2198))) * _2198;
    float _4432 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2255 = _2034 + 9u;
    float _2266 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _788) * 0.949999988079071044921875);
    float _2267 = _2266 * _2266;
    float _2268 = cbLight._m0[_2071].x + _865;
    float _2269 = cbLight._m0[_2071].y + _866;
    float _2270 = cbLight._m0[_2071].z + _867;
    float _2274 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
    float _2275 = _2274 * _2268;
    float _2276 = _2274 * _2269;
    float _2277 = _2274 * _2270;
    float _2278 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2071].xyz));
    float _4443 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2282 = dot(vec3(_785, _786, _787), vec3(_2275, _2276, _2277));
    float _4454 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2275, _2276, _2277));
    float _4465 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2267 * _2267;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2301 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2308 = 1.0 - _2267;
    float _2318 = (0.5 / (((_2199 * ((_2281 * _2308) + _2267)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2308) + _2267) * _2281))) * _2281;
    float _4476 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2320 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    float _2330 = (((((_2301 * _2221) + _947) * cbLight._m0[_2255].x) * _2320) * _2057) + (((((_2220 * _2221) + _947) * cbLight._m0[_2170].x) * _2244) * _2067);
    float _2331 = (((((_2301 * _2223) + _949) * cbLight._m0[_2255].y) * _2320) * _2057) + (((((_2220 * _2223) + _949) * cbLight._m0[_2170].y) * _2244) * _2067);
    float _2332 = (((((_2301 * _2224) + _950) * cbLight._m0[_2255].z) * _2320) * _2057) + (((((_2220 * _2224) + _950) * cbLight._m0[_2170].z) * _2244) * _2067);
    float _2394;
    float _2396;
    float _2398;
    if (_2107)
    {
        _2394 = _2330;
        _2396 = _2331;
        _2398 = _2332;
    }
    else
    {
        uint _2400 = _2034 + 2u;
        uint _2404 = _2034 + 10u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _788) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _865;
        float _2421 = cbLight._m0[_2400].y + _866;
        float _2422 = cbLight._m0[_2400].z + _867;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2400].xyz));
        float _4487 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2434 = dot(vec3(_785, _786, _787), vec3(_2427, _2428, _2429));
        float _4498 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4509 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2460 = 1.0 - _2419;
        float _2470 = (0.5 / (((_2199 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2460) + _2419) * _2433))) * _2433;
        float _4520 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2394 = (((((_2453 * _2221) + _947) * cbLight._m0[_2404].x) * _2472) * _2473) + _2330;
        _2396 = (((((_2453 * _2223) + _949) * cbLight._m0[_2404].y) * _2472) * _2473) + _2331;
        _2398 = (((((_2453 * _2224) + _950) * cbLight._m0[_2404].z) * _2472) * _2473) + _2332;
    }
    float _2508;
    float _2510;
    float _2512;
    if (_2125)
    {
        _2508 = _2394;
        _2510 = _2396;
        _2512 = _2398;
    }
    else
    {
        uint _2519 = _2034 + 3u;
        uint _2523 = _2034 + 11u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _788) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _865;
        float _2540 = cbLight._m0[_2519].y + _866;
        float _2541 = cbLight._m0[_2519].z + _867;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_785, _786, _787), vec3(cbLight._m0[_2519].xyz));
        float _4536 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2553 = dot(vec3(_785, _786, _787), vec3(_2546, _2547, _2548));
        float _4547 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4558 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2572 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2579 = 1.0 - _2538;
        float _2589 = (0.5 / (((_2199 * ((_2552 * _2579) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2579) + _2538) * _2552))) * _2552;
        float _4569 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2508 = (((((_2572 * _2221) + _947) * cbLight._m0[_2523].x) * _2591) * _2592) + _2394;
        _2510 = (((((_2572 * _2223) + _949) * cbLight._m0[_2523].y) * _2591) * _2592) + _2396;
        _2512 = (((((_2572 * _2224) + _950) * cbLight._m0[_2523].z) * _2591) * _2592) + _2398;
    }
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_2032.y == 0u)
    {
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2667;
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2667;
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2667;
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.x;
        uint _2694 = uint((float(_2682.y) * floor(float(uint(cbSceneParam._m0[85u].y * _886) / _2683))) + floor(float(uint(cbSceneParam._m0[85u].x * _885) / _2683)));
        float _2704 = (log2(_2670 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2705 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        uint _2708 = uint(isnan(14.0) ? _2705 : (isnan(_2705) ? 14.0 : min(_2705, 14.0)));
        uvec4 _2713 = texelFetch(g_lightClusterGridBuffer, int(((_2708 << 2u) + (_2694 << 6u)) >> 2u));
        uint _2714 = _2713.x;
        uint _2715 = _2682.z;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        if (((((1u << ((_2715 >> 4u) & 15u)) + 4294967295u) & _2714) == 0u) || ((_2715 & 240u) == 0u))
        {
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
        }
        else
        {
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            uint _2974 = 0u;
            uint _2983;
            bool _2984;
            for (;;)
            {
                _2983 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_2974 << 2u)) >> 2u)).x;
                _2984 = _2983 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2984)
                {
                    frontier_phi_66_pred = _2968;
                    frontier_phi_66_pred_1 = _2973;
                    frontier_phi_66_pred_2 = _2972;
                    frontier_phi_66_pred_3 = _2971;
                    frontier_phi_66_pred_4 = _2970;
                    frontier_phi_66_pred_5 = _2969;
                }
                else
                {
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    uint _3119;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2983;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    for (;;)
                    {
                        uint _3123 = uint(findLSB(_3119)) + (_2974 << 5u);
                        uint _3120 = (_3119 + 4294967295u) & _3119;
                        uint _3125 = _3123 * 48u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 3u)).x));
                        uint _3145 = (_3123 * 48u) + 4u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 3u)).x));
                        uint _3164 = (_3123 * 48u) + 8u;
                        vec3 _3175 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x));
                        float _3179 = _3139.x - _2668;
                        float _3180 = _3139.y - _2669;
                        float _3181 = _3139.z - _2670;
                        float _3182 = dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181));
                        float _3185 = inversesqrt(_3182);
                        float _3186 = _3185 * _3179;
                        float _3187 = _3185 * _3180;
                        float _3188 = _3185 * _3181;
                        float _3189 = dot(vec3(_904, _907, _910), vec3(_3186, _3187, _3188));
                        float _3194 = 1.0 - (_3182 * _3139.w);
                        float _4595 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3195 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3196 = sqrt(_3182) * _3158.w;
                        float _3199 = 1.39999997615814208984375 / (_3196 + 1.39999997615814208984375);
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3189) + _3200;
                        float _3206 = _3196 * _3196;
                        float _3210 = ((isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))) * _3195) / ((_3206 * 0.699999988079071044921875) + 1.0);
                        float _3214 = (-0.0) - _2668;
                        float _3215 = (-0.0) - _2669;
                        float _3216 = (-0.0) - _2670;
                        float _3220 = inversesqrt(dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216)));
                        float _3221 = _3220 * _3214;
                        float _3222 = _3220 * _3215;
                        float _3223 = _3220 * _3216;
                        float _3231 = exp2(log2(1.0 / ((_3206 * 3.5) + 5.0)) * 0.25);
                        float _3232 = 1.0 - _979;
                        float _3239 = sqrt(1.0 - ((1.0 - (_3232 * _3232)) * (1.0 - (_3231 * _3231))));
                        float _3240 = _3239 * _3239;
                        float _3241 = _3240 * _3240;
                        float _3242 = _3221 + _3186;
                        float _3243 = _3222 + _3187;
                        float _3244 = _3223 + _3188;
                        float _3248 = inversesqrt(dot(vec3(_3242, _3243, _3244), vec3(_3242, _3243, _3244)));
                        float _3252 = dot(vec3(_904, _907, _910), vec3(_3221, _3222, _3223));
                        float _4611 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3255 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3256 = dot(vec3(_904, _907, _910), vec3(_3248 * _3242, _3248 * _3243, _3248 * _3244));
                        float _4622 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3259 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3263 = ((_3259 * _3259) * (_3241 + (-1.0))) + 1.0;
                        float _3264 = _3199 * _3240;
                        float _3265 = _3264 * _3264;
                        float _3268 = ((1.0 - _3265) * _3189) + _3265;
                        float _4633 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3270 = 1.0 - _3240;
                        float _3280 = (0.5 / (((_3269 * ((_3255 * _3270) + _3240)) + 9.9999999392252902907785028219223e-09) + (((_3269 * _3270) + _3240) * _3255))) * _3269;
                        float _4644 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                        float _3291 = (((_3241 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3263 * _3263) * ((_3206 * 2.1991131305694580078125) + 3.141590118408203125))) * _3195;
                        _3043 = (_3210 * _3158.x) + _3116;
                        _3044 = (_3210 * _3158.y) + _3117;
                        _3045 = (_3210 * _3158.z) + _3118;
                        _3040 = (_3291 * _3175.x) + _3113;
                        _3041 = (_3291 * _3175.y) + _3114;
                        _3042 = (_3291 * _3175.z) + _3115;
                        if (_3120 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3120;
                        }
                    }
                    frontier_phi_66_pred = _3040;
                    frontier_phi_66_pred_1 = _3045;
                    frontier_phi_66_pred_2 = _3044;
                    frontier_phi_66_pred_3 = _3043;
                    frontier_phi_66_pred_4 = _3042;
                    frontier_phi_66_pred_5 = _3041;
                }
                _2816 = frontier_phi_66_pred;
                _2826 = frontier_phi_66_pred_1;
                _2824 = frontier_phi_66_pred_2;
                _2822 = frontier_phi_66_pred_3;
                _2820 = frontier_phi_66_pred_4;
                _2818 = frontier_phi_66_pred_5;
                uint _2975 = _2974 + 1u;
                if (_2975 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2968 = _2816;
                    _2969 = _2818;
                    _2970 = _2820;
                    _2971 = _2822;
                    _2972 = _2824;
                    _2973 = _2826;
                    _2974 = _2975;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
        }
        uvec4 _2829 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2830 = _2829.z;
        uint _2832 = (_2830 >> 8u) & 15u;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((4294967295u << _2832) & _2714) == 0u)
        {
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
            _2946 = _2825;
        }
        else
        {
            float _2961 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
            float _2962 = _2961 * _2668;
            float _2963 = _2961 * _2669;
            float _2964 = _2961 * _2670;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2832 < ((_2830 >> 12u) & 15u))
            {
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _3096 = _2815;
                float _3097 = _2817;
                float _3098 = _2819;
                float _3099 = _2821;
                float _3100 = _2823;
                float _3101 = _2825;
                uint _3102 = _2832;
                uint _3111;
                bool _3112;
                for (;;)
                {
                    _3111 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                    _3112 = _3111 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3112)
                    {
                        frontier_phi_77_pred = _3101;
                        frontier_phi_77_pred_1 = _3100;
                        frontier_phi_77_pred_2 = _3099;
                        frontier_phi_77_pred_3 = _3098;
                        frontier_phi_77_pred_4 = _3097;
                        frontier_phi_77_pred_5 = _3096;
                    }
                    else
                    {
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3318 = _3096;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        float _3321 = _3099;
                        float _3322 = _3100;
                        float _3323 = _3101;
                        uint _3324 = _3111;
                        uint _3325;
                        vec4 _3350;
                        float _3351;
                        vec4 _3366;
                        vec3 _3378;
                        vec4 _3393;
                        vec4 _3408;
                        float _3454;
                        bool _3455;
                        for (;;)
                        {
                            uint _3335 = ((_3102 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3324));
                            _3325 = (_3324 + 4294967295u) & _3324;
                            uint _3337 = _3335 * 40u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            _3351 = _3350.w;
                            uint _3353 = (_3335 * 40u) + 4u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3335 * 40u) + 8u;
                            _3378 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x));
                            uint _3380 = (_3335 * 40u) + 16u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3335 * 40u) + 20u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3410 = (_3335 * 40u) + 24u;
                            vec4 _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3429 = (_3335 * 40u) + 28u;
                            vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            _3454 = fma(_2670, _3442.z, fma(_2669, _3442.y, _3442.x * _2668)) + _3442.w;
                            _3455 = !((fma(_2670, _3423.z, fma(_2669, _3423.y, _3423.x * _2668)) + _3423.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3455)
                            {
                                float _3482 = _3350.x - _2668;
                                float _3483 = _3350.y - _2669;
                                float _3484 = _3350.z - _2670;
                                float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                                float _3488 = inversesqrt(_3485);
                                float _3489 = _3488 * _3482;
                                float _3490 = _3488 * _3483;
                                float _3491 = _3488 * _3484;
                                float _3495 = 1.0 - (_3485 / (_3351 * _3351));
                                float _4655 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3500 = sqrt(_3485) * _3366.w;
                                float _3502 = 1.39999997615814208984375 / (_3500 + 1.39999997615814208984375);
                                float _3503 = _3502 * _3502;
                                float _3506 = ((1.0 - _3503) * dot(vec3(_3489, _3490, _3491), vec3(_904, _907, _910))) + _3503;
                                float _3509 = _3500 * _3500;
                                float _3513 = (fma(_2670, _3393.z, fma(_2669, _3393.y, _3393.x * _2668)) + _3393.w) / _3454;
                                float _3514 = (fma(_2670, _3408.z, fma(_2669, _3408.y, _3408.x * _2668)) + _3408.w) / _3454;
                                float _3518 = 1.0 - dot(vec2(_3513, _3514), vec2(_3513, _3514));
                                float _4671 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3520 = _3519 * (((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3496) / ((_3509 * 0.699999988079071044921875) + 1.0));
                                float _3532 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                                float _3533 = 1.0 - _979;
                                float _3540 = sqrt(1.0 - ((1.0 - (_3533 * _3533)) * (1.0 - (_3532 * _3532))));
                                float _3541 = _3540 * _3540;
                                float _3542 = _3541 * _3541;
                                float _3543 = _3489 - _2962;
                                float _3544 = _3490 - _2963;
                                float _3545 = _3491 - _2964;
                                float _3549 = inversesqrt(dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545)));
                                float _3553 = dot(vec3(_904, _907, _910), vec3((-0.0) - _2962, (-0.0) - _2963, (-0.0) - _2964));
                                float _4682 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3556 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3557 = dot(vec3(_904, _907, _910), vec3(_3549 * _3543, _3549 * _3544, _3549 * _3545));
                                float _4693 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3560 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3564 = ((_3560 * _3560) * (_3542 + (-1.0))) + 1.0;
                                float _3565 = _3502 * _3541;
                                float _3566 = _3565 * _3565;
                                float _3572 = ((1.0 - _3566) * dot(vec3(_904, _907, _910), vec3(_3489, _3490, _3491))) + _3566;
                                float _4704 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3574 = 1.0 - _3541;
                                float _3584 = (0.5 / (((_3573 * ((_3556 * _3574) + _3541)) + 9.9999999392252902907785028219223e-09) + (((_3573 * _3574) + _3541) * _3556))) * _3573;
                                float _4715 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3594 = (_3519 * _3496) * (((_3542 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3564 * _3564) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3520 * _3366.y;
                                frontier_phi_83_pred_1 = _3520 * _3366.x;
                                frontier_phi_83_pred_2 = _3594 * _3378.z;
                                frontier_phi_83_pred_3 = _3594 * _3378.y;
                                frontier_phi_83_pred_4 = _3594 * _3378.x;
                                frontier_phi_83_pred_5 = _3520 * _3366.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3602 = frontier_phi_83_pred;
                            _3601 = frontier_phi_83_pred_1;
                            _3600 = frontier_phi_83_pred_2;
                            _3599 = frontier_phi_83_pred_3;
                            _3598 = frontier_phi_83_pred_4;
                            _3603 = frontier_phi_83_pred_5;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            _3310 = _3603 + _3323;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            if (_3325 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3325;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3310;
                        frontier_phi_77_pred_1 = _3309;
                        frontier_phi_77_pred_2 = _3308;
                        frontier_phi_77_pred_3 = _3307;
                        frontier_phi_77_pred_4 = _3306;
                        frontier_phi_77_pred_5 = _3305;
                    }
                    _2947 = frontier_phi_77_pred;
                    _2945 = frontier_phi_77_pred_1;
                    _2943 = frontier_phi_77_pred_2;
                    _2941 = frontier_phi_77_pred_3;
                    _2939 = frontier_phi_77_pred_4;
                    _2937 = frontier_phi_77_pred_5;
                    uint _3103 = _3102 + 1u;
                    if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3096 = _2937;
                        _3097 = _2939;
                        _3098 = _2941;
                        _3099 = _2943;
                        _3100 = _2945;
                        _3101 = _2947;
                        _3102 = _3103;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2941;
                frontier_phi_58_59_ladder_1 = _2947;
                frontier_phi_58_59_ladder_2 = _2945;
                frontier_phi_58_59_ladder_3 = _2943;
                frontier_phi_58_59_ladder_4 = _2939;
                frontier_phi_58_59_ladder_5 = _2937;
            }
            else
            {
                frontier_phi_58_59_ladder = _2819;
                frontier_phi_58_59_ladder_1 = _2825;
                frontier_phi_58_59_ladder_2 = _2823;
                frontier_phi_58_59_ladder_3 = _2821;
                frontier_phi_58_59_ladder_4 = _2817;
                frontier_phi_58_59_ladder_5 = _2815;
            }
            _2936 = frontier_phi_58_59_ladder_5;
            _2938 = frontier_phi_58_59_ladder_4;
            _2940 = frontier_phi_58_59_ladder;
            _2942 = frontier_phi_58_59_ladder_3;
            _2944 = frontier_phi_58_59_ladder_2;
            _2946 = frontier_phi_58_59_ladder_1;
        }
        float _2951 = isnan(1.0) ? _963 : (isnan(_963) ? 1.0 : min(_963, 1.0));
        _2727 = (_2951 * _2942) + _2163;
        _2729 = (_2951 * _2944) + _2165;
        _2731 = (_2951 * _2946) + _2167;
        _2733 = ((_2936 * _947) * _2951) + _2508;
        _2735 = ((_2938 * _949) * _2951) + _2510;
        _2737 = ((_2940 * _950) * _2951) + _2512;
    }
    else
    {
        _2727 = _2163;
        _2729 = _2165;
        _2731 = _2167;
        _2733 = _2508;
        _2735 = _2510;
        _2737 = _2512;
    }
    float _4731 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4742 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4753 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2754 = ((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2727 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _963))) + ((_2733 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _2755 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2729 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _963))) + ((_2735 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _2756 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2731 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _963))) + ((_2737 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    uint _2757 = _272 + 6u;
    float _2765 = _885 / cbSceneParam._m0[86u].x;
    float _2766 = _886 / cbSceneParam._m0[86u].y;
    vec4 _2780 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2765, _2766, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2782 = _2780.x;
    float _2783 = _2780.y;
    float _2784 = _2780.z;
    float _2785 = _2780.w;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _2840 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _2841 = _2840 / _807;
        float _2852 = _2841 * _858;
        float _2853 = _859 * _2841;
        float _2854 = (-0.0) - _2853;
        float _2856 = _2841 * _860;
        float _2858 = (cbSceneParam._m0[77u].w * _2854) / _2840;
        float _2859 = _2858 + cbSceneParam._m0[79u].w;
        float _2860 = cbSceneParam._m0[79u].w - _2853;
        float _2866 = sqrt(((_2852 * _2852) + (_2853 * _2853)) + (_2856 * _2856));
        float _2869 = (1.0 - (cbSceneParam._m0[77u].w / _2840)) * _2866;
        float _2874 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2876 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3053;
        if (abs((_2854 - _2858) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3053 = ((((_2859 > 0.0) ? exp2(_2874 * _2859) : (2.0 - exp2(_2876 * _2859))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2869;
        }
        else
        {
            float _2997 = 1.0 / cbSceneParam._m0[80u].x;
            float _2998 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : max(_2859, _2860));
            float _2999 = isnan(_2860) ? _2859 : (isnan(_2859) ? _2860 : min(_2859, _2860));
            float _3008 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : min(_2998, 0.0));
            float _3009 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : min(_2999, 0.0));
            _3053 = ((abs(_2866 / _2854) * cbSceneParam._m0[80u].y) * ((((_3008 - _3009) * 2.0) - ((exp2(_2874 * (isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0)))) - exp2(_2874 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))))) * _2997)) - ((exp2(_2876 * _3008) - exp2(_2876 * _3009)) * _2997))) + (_2869 * cbSceneParam._m0[80u].z);
        }
        vec4 _3055 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2765, _2766, 1.0), 0.0);
        float _3064 = exp2((_3053 * (-1.44269502162933349609375)) * (1.0 - _3055.w));
        float _3065 = log2(_3064);
        float _3081 = log2(_2785);
        _2878 = (exp2(_3081 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].x)) * _3055.x) / cbSceneParam._m0[78u].x)) + _2782;
        _2880 = (exp2(_3081 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].y)) * _3055.y) / cbSceneParam._m0[78u].y)) + _2783;
        _2882 = (exp2(_3081 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].z)) * _3055.z) / cbSceneParam._m0[78u].z)) + _2784;
        _2884 = _3064 * _2785;
    }
    else
    {
        _2878 = _2782;
        _2880 = _2783;
        _2882 = _2784;
        _2884 = _2785;
    }
    bool _3091;
    vec4 _2894;
    vec4 _2916;
    float _2918;
    float _2922;
    float _2923;
    float _2924;
    float _2925;
    bool _2935;
    for (;;)
    {
        _2894 = cbMatDynParam._m0[0u];
        float _2896 = roundEven(_2894.y);
        bool _2897 = _2896 == 3.0;
        float _2898 = log2(_2884);
        float _2905 = exp2(_2898 * cbSceneParam._m0[78u].x) * _2754;
        float _2906 = exp2(_2898 * cbSceneParam._m0[78u].y) * _2755;
        float _2907 = exp2(_2898 * cbSceneParam._m0[78u].z) * _2756;
        float _2914 = _874 + (-0.5);
        _2916 = cbMtdParam._m0[1u];
        _2918 = _2916.y * _2914;
        float _2921 = (_2896 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2922 = _2921 * (_2897 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2878)));
        _2923 = _2921 * (_2897 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2880)));
        _2924 = _2921 * (_2897 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2882)));
        _2925 = _2914 * 0.999000012874603271484375;
        _2935 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2935)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2925) < 0.5)
            {
                _3091 = true;
                break;
            }
        }
        uint _3032 = _923 + uint(_2894.w);
        if ((cbInstanceData._m0[_3032].w < 1.0) && ((cbInstanceData._m0[_3032].w + _2925) < 0.5))
        {
            _3091 = true;
            break;
        }
        if ((_2918 + 1.0) < _2916.x)
        {
            _3091 = true;
            break;
        }
        _3091 = false;
        break;
    }
    float _3296;
    if (_3091)
    {
        discard_state = true;
        _3296 = 0.0;
    }
    else
    {
        _3296 = cbInstanceData._m0[_2757].w;
    }
    SV_Target.x = _2922;
    SV_Target.y = _2923;
    SV_Target.z = _2924;
    SV_Target.w = _3296;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2757].w;
    discard_exit();
}


