#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1592;
float _3970;
float _3971;
float _3972;
float _3973;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3982 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3993 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4004 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4015 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _468 = (_461 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _469 = (_461 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _470 = (_461 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4026 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    float _547 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _541;
    float _550 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _542;
    float _553 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _543;
    float _560 = ((_541 - _547) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) + _547;
    float _561 = ((_542 - _550) * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) + _550;
    float _562 = ((_543 - _553) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) + _553;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    float _651 = ((_623.x - _642) * _461) + _642;
    float _652 = ((_623.y - _643) * _461) + _643;
    float _653 = ((_623.z - _644) * _461) + _644;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _678 = ((_665.z - _653) * _534) + _653;
    float _681 = ((((_665.x - _651) * _534) + _651) * 2.0) + (-1.0);
    float _682 = ((((_665.y - _652) * _534) + _652) * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _4037 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _688 = sqrt(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _739 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _742 = ((isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : min(_739, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _751 = (_742 - ((((((_729 - _730) * cbMtdParam._m0[24u].z) + _730) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _742))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4058 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _759 = (_752 * ((_581.x * cbMtdParam._m0[18u].x) - _560)) + _560;
    float _760 = (_752 * ((_581.y * cbMtdParam._m0[18u].y) - _561)) + _561;
    float _761 = (_752 * ((_581.z * cbMtdParam._m0[18u].z) - _562)) + _562;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _801 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_775 - _776) * cbMtdParam._m0[24u].w) + _776) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4069 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _802 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _810 = ((((cbMtdParam._m0[10u].x - _759) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _802) + _759;
    float _811 = ((((cbMtdParam._m0[10u].y - _760) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _802) + _760;
    float _812 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _761)) * _802) + _761;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _840 = _838.x;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _840) * _461) + _840;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _858) * _534) + _858;
    float _879 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _875) * cbMtdParam._m0[19u].z) + _875;
    float _881 = _879 - (_879 * _752);
    float _883 = _881 - (_881 * _802);
    float _888 = (((_600.z - _678) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _678;
    float _892 = ((_702.z - _888) * cbMtdParam._m0[19u].w) + _888;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _913 = (_906.x * 2.0) + (-1.0);
    float _914 = (_906.y * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4080 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _923 = (_752 * (_906.z - _892)) + _892;
    float _926 = ((cbMtdParam._m0[23u].x - _923) * _802) + _923;
    vec4 _947 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _953 = (_947.x * 2.0) + (-1.0);
    float _954 = (_947.y * 2.0) + (-1.0);
    float _955 = dot(vec2(_953, _954), vec2(_953, _954));
    float _4091 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _969 = (_681 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_600.x * 2.0) + (-1.0)))) + (((_702.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _970 = (_682 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_600.y * 2.0) + (-1.0)))) + (((_702.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _982 = (((_913 - _969) + (cbMtdParam._m0[21u].x * _969)) * _752) + _969;
    float _983 = (((_914 - _970) + (cbMtdParam._m0[21u].x * _970)) * _752) + _970;
    float _984 = (_752 * (sqrt(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) - _688)) + _688;
    float _995 = (((_953 - _982) + (_982 * cbMtdParam._m0[22u].z)) * _802) + _982;
    float _996 = (((_954 - _983) + (_983 * cbMtdParam._m0[22u].z)) * _802) + _983;
    float _997 = ((sqrt(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) - _984) * _802) + _984;
    float _999 = cbMtdParam._m0[22u].x + _702.w;
    float _1002 = fma(_997, _263 * NORMAL.x, fma(_996, _270 * TANGENT.x, (_256 * _248) * _995));
    float _1005 = fma(_997, _263 * NORMAL.y, fma(_996, _270 * TANGENT.y, (_256 * _249) * _995));
    float _1008 = fma(_997, _263 * NORMAL.z, fma(_996, _270 * TANGENT.z, (_256 * _250) * _995));
    float _1012 = inversesqrt(dot(vec3(_1002, _1005, _1008), vec3(_1002, _1005, _1008)));
    float _1013 = _1012 * _1002;
    float _1014 = _1012 * _1005;
    float _1015 = _1012 * _1008;
    float _4102 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _1016 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4124 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4135 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4146 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4157 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _1021 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _1035 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1085 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1075);
    float _1086 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1075);
    float _1087 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1075);
    float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
    float _1092 = _1085 * _1091;
    float _1093 = _1086 * _1091;
    float _1094 = _1087 * _1091;
    vec4 _1099 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1101 = _1099.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1273 = sqrt(((_1085 * _1085) + (_1086 * _1086)) + (_1087 * _1087));
        float _1279 = (cbMatDynParam._m0[5u].x * _1273) + cbMatDynParam._m0[5u].y;
        float _4168 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1284 = (cbMatDynParam._m0[5u].z * _1273) + cbMatDynParam._m0[5u].w;
        float _4179 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) - _1280)) + _1280) < ((_1101 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1112 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1113 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1131 = fma(_1015, cbSceneParam._m0[5u].z, fma(_1014, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1013));
    float _1134 = fma(_1015, cbSceneParam._m0[6u].z, fma(_1014, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1013));
    float _1137 = fma(_1015, cbSceneParam._m0[7u].z, fma(_1014, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1013));
    uint _1150 = _295 + 9u;
    uint _1151 = _1150 + uint(cbMatDynParam._m0[0u].w);
    float _1157 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_1151].x;
    float _1158 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_1151].y;
    float _1159 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_1151].z;
    float _4190 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _4201 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _1163 = 1.0 - _1021;
    float _1164 = _1160 * _1163;
    float _1165 = _1161 * _1163;
    float _1166 = _1162 * _1163;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1021;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1021;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1021;
    float _1174 = _1171 + 0.039999999105930328369140625;
    float _1176 = _1172 + 0.039999999105930328369140625;
    float _1177 = _1173 + 0.039999999105930328369140625;
    vec4 _1186 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1112, cbSceneParam._m0[86u].y * _1113));
    float _1190 = ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * TEXCOORD_5.w) * _1186.x;
    float _1191 = dot(vec3(_1013, _1014, _1015), vec3(_1092, _1093, _1094));
    float _1194 = _1191 * 2.0;
    float _1198 = (_1194 * _1013) - _1092;
    float _1199 = (_1194 * _1014) - _1093;
    float _1200 = (_1194 * _1015) - _1094;
    float _1204 = abs(dot(vec3(_1092, _1093, _1094), vec3(_1013, _1014, _1015)));
    float _4223 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1206 = sqrt(_1016);
    float _1219 = exp2((_1206 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1206 * 3.0));
    float _1225 = (1.0 - _1219) * ((_1206 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1226 = _1219 * _1206;
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1262 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1591;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1316 = fma(_1262, cbModelParam._m0[26u].z, fma(_1258, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254));
        float _1320 = fma(_1262, cbModelParam._m0[27u].z, fma(_1258, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254));
        float _1324 = fma(_1262, cbModelParam._m0[28u].z, fma(_1258, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254));
        float _1349 = _1254 + _1013;
        float _1350 = _1258 + _1014;
        float _1351 = _1262 + _1015;
        float _1361 = fma(_1351, cbModelParam._m0[26u].z, fma(_1350, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1349)) - _1316;
        float _1362 = fma(_1351, cbModelParam._m0[27u].z, fma(_1350, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1349)) - _1320;
        float _1363 = fma(_1351, cbModelParam._m0[28u].z, fma(_1350, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1349)) - _1324;
        float _1367 = inversesqrt(dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363)));
        float _1380 = ((_1367 * _1361) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1316 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1367 * _1362) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1320 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1367 * _1363) / cbModelParam._m0[34u].z) + ((((((_1324 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1380, _1381, _1382), 0.0);
        float _1419 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1385.x + (-0.5));
        float _1421 = _1419 * (_1385.y + (-0.5));
        float _1422 = _1419 * (_1385.z + (-0.5));
        float _1429 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1392.x + (-0.5));
        float _1431 = _1429 * (_1392.y + (-0.5));
        float _1432 = _1429 * (_1392.z + (-0.5));
        float _1439 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1399.x + (-0.5));
        float _1441 = _1439 * (_1399.y + (-0.5));
        float _1442 = _1439 * (_1399.z + (-0.5));
        float _1449 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1406.x + (-0.5));
        float _1451 = _1449 * (_1406.y + (-0.5));
        float _1452 = _1449 * (_1406.z + (-0.5));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = _1420 * 0.5;
        float _1457 = _1430 * 0.5;
        float _1458 = _1440 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1473 = (dot(vec3(_1013, _1014, _1015), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1483 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4271 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1485 + 1.0))) + _1490) * _1453;
        float _1500 = _1421 * 0.5;
        float _1501 = _1431 * 0.5;
        float _1502 = _1441 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_1013, _1014, _1015), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4304 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1527 + 1.0))) + _1532) * _1454;
        float _1542 = _1422 * 0.5;
        float _1543 = _1432 * 0.5;
        float _1544 = _1442 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_1013, _1014, _1015), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4337 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1569 + 1.0))) + _1574) * _1455;
        _1591 = _1422;
        _1593 = _1421;
        _1594 = _1420;
        _1595 = _1432;
        _1596 = _1431;
        _1597 = _1430;
        _1598 = _1442;
        _1599 = _1441;
        _1600 = _1440;
        _1601 = _1455;
        _1602 = _1454;
        _1603 = _1453;
        _1604 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1605 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1606 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1592;
        _1593 = _1592;
        _1594 = _1592;
        _1595 = _1592;
        _1596 = _1592;
        _1597 = _1592;
        _1598 = _1592;
        _1599 = _1592;
        _1600 = _1592;
        _1601 = _1592;
        _1602 = _1592;
        _1603 = _1592;
        _1604 = 0.0;
        _1605 = 0.0;
        _1606 = 0.0;
    }
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1633 = fma(_1262, cbModelParam._m0[30u].z, fma(_1258, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254));
        float _1637 = fma(_1262, cbModelParam._m0[31u].z, fma(_1258, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254));
        float _1641 = fma(_1262, cbModelParam._m0[32u].z, fma(_1258, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254));
        float _1664 = _1254 + _1013;
        float _1665 = _1258 + _1014;
        float _1666 = _1262 + _1015;
        float _1676 = fma(_1666, cbModelParam._m0[30u].z, fma(_1665, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1664)) - _1633;
        float _1677 = fma(_1666, cbModelParam._m0[31u].z, fma(_1665, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1664)) - _1637;
        float _1678 = fma(_1666, cbModelParam._m0[32u].z, fma(_1665, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1664)) - _1641;
        float _1682 = inversesqrt(dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678)));
        float _1695 = ((_1682 * _1676) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1633 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1696 = ((_1682 * _1677) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1637 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1697 = ((_1682 * _1678) / cbModelParam._m0[35u].z) + ((((((_1641 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1695, _1696, _1697), 0.0);
        float _1732 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1733 = _1732 * (_1699.x + (-0.5));
        float _1734 = _1732 * (_1699.y + (-0.5));
        float _1735 = _1732 * (_1699.z + (-0.5));
        float _1742 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1743 = _1742 * (_1706.x + (-0.5));
        float _1744 = _1742 * (_1706.y + (-0.5));
        float _1745 = _1742 * (_1706.z + (-0.5));
        float _1752 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1713.x + (-0.5));
        float _1754 = _1752 * (_1713.y + (-0.5));
        float _1755 = _1752 * (_1713.z + (-0.5));
        float _1762 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1720.x + (-0.5));
        float _1764 = _1762 * (_1720.y + (-0.5));
        float _1765 = _1762 * (_1720.z + (-0.5));
        float _1766 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1767 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1769 = _1733 * 0.5;
        float _1770 = _1743 * 0.5;
        float _1771 = _1753 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_1013, _1014, _1015), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1766 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4400 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1796 + 1.0))) + _1801) * _1766;
        float _1811 = _1734 * 0.5;
        float _1812 = _1744 * 0.5;
        float _1813 = _1754 * 0.5;
        float _1814 = dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813));
        float _1819 = (_1814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1814);
        float _1827 = (dot(vec3(_1013, _1014, _1015), vec3(_1819 * _1811, _1819 * _1812, _1819 * _1813)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1836 = sqrt(((_1812 * _1812) + (_1811 * _1811)) + (_1813 * _1813)) / (_1767 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1838 = _1837 * 2.0;
        float _1842 = (1.0 - _1837) / (_1837 + 1.0);
        float _4433 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1852 = ((((1.0 - _1843) * (_1838 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1838 + 1.0))) + _1843) * _1767;
        float _1853 = _1735 * 0.5;
        float _1854 = _1745 * 0.5;
        float _1855 = _1755 * 0.5;
        float _1856 = dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855));
        float _1861 = (_1856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1856);
        float _1869 = (dot(vec3(_1013, _1014, _1015), vec3(_1861 * _1853, _1861 * _1854, _1861 * _1855)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1878 = sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855)) / (_1768 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1880 = _1879 * 2.0;
        float _1884 = (1.0 - _1879) / (_1879 + 1.0);
        float _4466 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1894 = ((((1.0 - _1885) * (_1880 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1880 + 1.0))) + _1885) * _1768;
        _1902 = _1735;
        _1903 = _1734;
        _1904 = _1733;
        _1905 = _1745;
        _1906 = _1744;
        _1907 = _1743;
        _1908 = _1755;
        _1909 = _1754;
        _1910 = _1753;
        _1911 = _1768;
        _1912 = _1767;
        _1913 = _1766;
        _1914 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
        _1915 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
        _1916 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)));
    }
    else
    {
        _1902 = _1592;
        _1903 = _1592;
        _1904 = _1592;
        _1905 = _1592;
        _1906 = _1592;
        _1907 = _1592;
        _1908 = _1592;
        _1909 = _1592;
        _1910 = _1592;
        _1911 = _1592;
        _1912 = _1592;
        _1913 = _1592;
        _1914 = 0.0;
        _1915 = 0.0;
        _1916 = 0.0;
    }
    float _1926 = (cbModelParam._m0[1u].x * (_1914 - _1604)) + _1604;
    float _1927 = (cbModelParam._m0[1u].x * (_1915 - _1605)) + _1605;
    float _1928 = (cbModelParam._m0[1u].x * (_1916 - _1606)) + _1606;
    float _1949 = fma(_1928, cbSceneParam._m0[89u].z, fma(_1927, cbSceneParam._m0[89u].y, _1926 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1928, cbSceneParam._m0[90u].z, fma(_1927, cbSceneParam._m0[90u].y, _1926 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1928, cbSceneParam._m0[91u].z, fma(_1927, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1926));
    float _1970 = _1198 * 0.5;
    float _1971 = _1199 * 0.5;
    float _1972 = _1200 * 0.5;
    float _1973 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1904, _1907, _1910, _1913));
    float _1976 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1903, _1906, _1909, _1912));
    float _1979 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1902, _1905, _1908, _1911));
    float _2013;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1986 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1591, _1595, _1598, _1601));
        float _1990 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1593, _1596, _1599, _1602));
        float _1994 = dot(vec4(_1970, _1971, _1972, 1.0), vec4(_1594, _1597, _1600, _1603));
        float _2001 = dot(vec4(cbModelParam._m0[39u]), vec4(_1970, _1971, _1972, 1.0));
        _2013 = dot(vec3(isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2001) ? 0.0 : (isnan(0.0) ? _2001 : max(0.0, _2001))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2013 = 1.0;
    }
    float _2024;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2015 = dot(vec4(cbModelParam._m0[40u]), vec4(_1970, _1971, _1972, 1.0));
        _2024 = dot(vec3(isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2015) ? 0.0 : (isnan(0.0) ? _2015 : max(0.0, _2015))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2024 = 1.0;
    }
    float _2028 = (_2024 * cbModelParam._m0[1u].x) + (_2013 * (1.0 - cbModelParam._m0[1u].x));
    float _2038 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1016);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2038 : min(cbModelParam._m0[25u].z, _2038));
    float _2119;
    float _2121;
    float _2123;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2086 = fma(_1262, cbModelParam._m0[13u].z, fma(_1258, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1254)) + cbModelParam._m0[13u].w;
        float _2090 = fma(_1262, cbModelParam._m0[14u].z, fma(_1258, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1254)) + cbModelParam._m0[14u].w;
        float _2094 = fma(_1262, cbModelParam._m0[15u].z, fma(_1258, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1254)) + cbModelParam._m0[15u].w;
        float _2097 = fma(_1200, cbModelParam._m0[13u].z, fma(_1199, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1198));
        float _2100 = fma(_1200, cbModelParam._m0[14u].z, fma(_1199, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1198));
        float _2103 = fma(_1200, cbModelParam._m0[15u].z, fma(_1199, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1198));
        float _2131;
        if (_2097 > 0.0)
        {
            _2131 = abs((1.0 - _2086) / _2097);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2086 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2131 = frontier_phi_17_15_ladder;
        }
        float _2333;
        if (_2100 > 0.0)
        {
            _2333 = abs((1.0 - _2090) / _2100);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2090 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2333 = frontier_phi_26_22_ladder;
        }
        float _2587;
        if (_2103 > 0.0)
        {
            _2587 = abs((1.0 - _2094) / _2103);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2094 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2587 = frontier_phi_38_33_ladder;
        }
        float _2589 = isnan(_2333) ? _2131 : (isnan(_2131) ? _2333 : min(_2131, _2333));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _2097) + _2086;
        float _2595 = (_2590 * _2100) + _2090;
        float _2596 = (_2590 * _2103) + _2094;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2597;
        float _2601 = _2597 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 > _2601) || ((_2595 < _2599) || ((_2594 < _2599) || (_2594 > _2601))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2596, cbModelParam._m0[9u].z, fma(_2595, cbModelParam._m0[9u].y, _2594 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2596, cbModelParam._m0[10u].z, fma(_2595, cbModelParam._m0[10u].y, _2594 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2596, cbModelParam._m0[11u].z, fma(_2595, cbModelParam._m0[11u].y, _2594 * cbModelParam._m0[11u].x))), _2039);
            frontier_phi_16_38_ladder = _2724.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2724.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2724.x * cbModelParam._m0[1u].y;
        }
        _2119 = frontier_phi_16_38_ladder_2;
        _2121 = frontier_phi_16_38_ladder_1;
        _2123 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2107 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1198, _1199, _1200), _2039);
        _2119 = _2107.x * cbModelParam._m0[1u].y;
        _2121 = _2107.y * cbModelParam._m0[1u].y;
        _2123 = _2107.z * cbModelParam._m0[1u].y;
    }
    float _2127 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1016);
    float _2128 = isnan(_2127) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2127 : min(cbModelParam._m0[25u].w, _2127));
    float _2217;
    float _2219;
    float _2221;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2181 = fma(_1262, cbModelParam._m0[21u].z, fma(_1258, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1254)) + cbModelParam._m0[21u].w;
        float _2185 = fma(_1262, cbModelParam._m0[22u].z, fma(_1258, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1254)) + cbModelParam._m0[22u].w;
        float _2189 = fma(_1262, cbModelParam._m0[23u].z, fma(_1258, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1254)) + cbModelParam._m0[23u].w;
        float _2192 = fma(_1200, cbModelParam._m0[21u].z, fma(_1199, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1198));
        float _2195 = fma(_1200, cbModelParam._m0[22u].z, fma(_1199, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1198));
        float _2198 = fma(_1200, cbModelParam._m0[23u].z, fma(_1199, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1198));
        float _2338;
        if (_2192 > 0.0)
        {
            _2338 = abs((1.0 - _2181) / _2192);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2192 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2181 + 1.0) / _2192);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2338 = frontier_phi_28_24_ladder;
        }
        float _2614;
        if (_2195 > 0.0)
        {
            _2614 = abs((1.0 - _2185) / _2195);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2185 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2614 = frontier_phi_40_35_ladder;
        }
        float _2827;
        if (_2198 > 0.0)
        {
            _2827 = abs((1.0 - _2189) / _2198);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2189 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2827 = frontier_phi_49_46_ladder;
        }
        float _2829 = isnan(_2614) ? _2338 : (isnan(_2338) ? _2614 : min(_2338, _2614));
        float _2830 = isnan(_2827) ? _2829 : (isnan(_2829) ? _2827 : min(_2829, _2827));
        float _2834 = (_2830 * _2192) + _2181;
        float _2835 = (_2830 * _2195) + _2185;
        float _2836 = (_2830 * _2198) + _2189;
        float _2837 = _2830 * 9.9999997473787516355514526367188e-05;
        float _2838 = (-1.0) - _2837;
        float _2840 = _2837 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2836 > _2840) || ((_2836 < _2838) || ((_2835 > _2840) || ((_2835 < _2838) || ((_2834 < _2838) || (_2834 > _2840))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3035 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2836, cbModelParam._m0[17u].z, fma(_2835, cbModelParam._m0[17u].y, _2834 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2836, cbModelParam._m0[18u].z, fma(_2835, cbModelParam._m0[18u].y, _2834 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2836, cbModelParam._m0[19u].z, fma(_2835, cbModelParam._m0[19u].y, _2834 * cbModelParam._m0[19u].x))), _2128);
            frontier_phi_25_49_ladder = _3035.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3035.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3035.x * cbModelParam._m0[1u].z;
        }
        _2217 = frontier_phi_25_49_ladder_2;
        _2219 = frontier_phi_25_49_ladder_1;
        _2221 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2201 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1198, _1199, _1200), _2128);
        _2217 = _2201.x * cbModelParam._m0[1u].z;
        _2219 = _2201.y * cbModelParam._m0[1u].z;
        _2221 = _2201.z * cbModelParam._m0[1u].z;
    }
    float _2234 = (((_1225 * _1174) + _1226) * _1190) * ((cbModelParam._m0[1u].w * (_2217 - _2119)) + _2119);
    float _2236 = (((_1225 * _1176) + _1226) * _1190) * ((cbModelParam._m0[1u].w * (_2219 - _2121)) + _2121);
    float _2238 = (((_1225 * _1177) + _1226) * _1190) * ((cbModelParam._m0[1u].w * (_2221 - _2123)) + _2123);
    float _2241 = fma(_2238, cbSceneParam._m0[89u].z, fma(_2236, cbSceneParam._m0[89u].y, _2234 * cbSceneParam._m0[89u].x));
    float _2244 = fma(_2238, cbSceneParam._m0[90u].z, fma(_2236, cbSceneParam._m0[90u].y, _2234 * cbSceneParam._m0[90u].x));
    float _2247 = fma(_2238, cbSceneParam._m0[91u].z, fma(_2236, cbSceneParam._m0[91u].y, _2234 * cbSceneParam._m0[91u].x));
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2267 = _1190 + (-1.0);
    float _2272 = (cbLight._m0[_2260].x * _2267) + 1.0;
    float _2273 = (cbLight._m0[_2260].y * _2267) + 1.0;
    float _2274 = (cbLight._m0[_2260].z * _2267) + 1.0;
    float _2275 = (cbLight._m0[_2260].w * _2267) + 1.0;
    uint _2276 = _2259 + 5u;
    float _2282 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2286 = _2259 + 4u;
    float _2292 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2296 = _2259 | 1u;
    float _2307 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_1013, _1014, _1015));
    float _2310 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_1013, _1014, _1015));
    float _4602 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _4613 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2315 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * 0.3183098733425140380859375;
    float _2317 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * 0.3183098733425140380859375;
    float _2324 = ((cbLight._m0[_2276].x * _2282) * _2317) + ((cbLight._m0[_2286].x * _2292) * _2315);
    float _2325 = ((_2282 * cbLight._m0[_2276].y) * _2317) + ((_2292 * cbLight._m0[_2286].y) * _2315);
    float _2326 = ((_2282 * cbLight._m0[_2276].z) * _2317) + ((_2292 * cbLight._m0[_2286].z) * _2315);
    uvec4 _2330 = floatBitsToUint(cbLight._m0[_2259 + 12u]);
    bool _2332 = _2330.x == 0u;
    float _2343;
    float _2345;
    float _2347;
    if (_2332)
    {
        _2343 = _2324;
        _2345 = _2325;
        _2347 = _2326;
    }
    else
    {
        uint _2351 = _2259 + 6u;
        float _2367 = (dot(vec3(cbLight._m0[_2259 + 2u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2368 = _2367 * _2367;
        float _4624 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2369 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2370 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2343 = (((cbLight._m0[_2351].x * 0.3183098733425140380859375) * _2369) * _2370) + _2324;
        _2345 = (((cbLight._m0[_2351].y * 0.3183098733425140380859375) * _2369) * _2370) + _2325;
        _2347 = (((cbLight._m0[_2351].z * 0.3183098733425140380859375) * _2369) * _2370) + _2326;
    }
    bool _2350 = _2330.y == 0u;
    float _2388;
    float _2390;
    float _2392;
    if (_2350)
    {
        _2388 = _2343;
        _2390 = _2345;
        _2392 = _2347;
    }
    else
    {
        uint _2558 = _2259 + 7u;
        float _2574 = (dot(vec3(cbLight._m0[_2259 + 3u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2575 = _2574 * _2574;
        float _4640 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2576 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2577 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2388 = (((cbLight._m0[_2558].x * 0.3183098733425140380859375) * _2576) * _2577) + _2343;
        _2390 = (((cbLight._m0[_2558].y * 0.3183098733425140380859375) * _2576) * _2577) + _2345;
        _2392 = (((cbLight._m0[_2558].z * 0.3183098733425140380859375) * _2576) * _2577) + _2347;
    }
    uint _2395 = _2259 + 8u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _1016) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2259].x + _1092;
    float _2411 = cbLight._m0[_2259].y + _1093;
    float _2412 = cbLight._m0[_2259].z + _1094;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2259].xyz));
    float _4656 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _4667 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _2424 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2425 = dot(vec3(_1013, _1014, _1015), vec3(_2417, _2418, _2419));
    float _4678 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2417, _2418, _2419));
    float _4689 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2409 * _2409;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2445 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
    float _2446 = 0.959999978542327880859375 - _1171;
    float _2448 = 0.959999978542327880859375 - _1172;
    float _2449 = 0.959999978542327880859375 - _1173;
    float _2456 = 1.0 - _2409;
    float _2467 = (0.5 / (((_2424 * ((_2423 * _2456) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2456) + _2409) * _2423))) * _2423;
    float _4700 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    uint _2480 = _2259 + 9u;
    float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _1016) * 0.949999988079071044921875);
    float _2492 = _2491 * _2491;
    float _2493 = cbLight._m0[_2296].x + _1092;
    float _2494 = cbLight._m0[_2296].y + _1093;
    float _2495 = cbLight._m0[_2296].z + _1094;
    float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
    float _2500 = _2499 * _2493;
    float _2501 = _2499 * _2494;
    float _2502 = _2499 * _2495;
    float _2503 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2296].xyz));
    float _4711 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
    float _2507 = dot(vec3(_1013, _1014, _1015), vec3(_2500, _2501, _2502));
    float _4722 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2500, _2501, _2502));
    float _4733 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2492 * _2492;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) * 5.0);
    float _2533 = 1.0 - _2492;
    float _2543 = (0.5 / (((_2424 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2533) + _2492) * _2506))) * _2506;
    float _4744 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2545 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    float _2555 = (((((_2526 * _2446) + _1174) * cbLight._m0[_2480].x) * _2545) * _2282) + (((((_2445 * _2446) + _1174) * cbLight._m0[_2395].x) * _2469) * _2292);
    float _2556 = (((((_2526 * _2448) + _1176) * cbLight._m0[_2480].y) * _2545) * _2282) + (((((_2445 * _2448) + _1176) * cbLight._m0[_2395].y) * _2469) * _2292);
    float _2557 = (((((_2526 * _2449) + _1177) * cbLight._m0[_2480].z) * _2545) * _2282) + (((((_2445 * _2449) + _1177) * cbLight._m0[_2395].z) * _2469) * _2292);
    float _2619;
    float _2621;
    float _2623;
    if (_2332)
    {
        _2619 = _2555;
        _2621 = _2556;
        _2623 = _2557;
    }
    else
    {
        uint _2625 = _2259 + 2u;
        uint _2629 = _2259 + 10u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _1016) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _1092;
        float _2646 = cbLight._m0[_2625].y + _1093;
        float _2647 = cbLight._m0[_2625].z + _1094;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2625].xyz));
        float _4755 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2659 = dot(vec3(_1013, _1014, _1015), vec3(_2652, _2653, _2654));
        float _4766 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4777 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2424 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2685) + _2644) * _2658))) * _2658;
        float _4788 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2619 = (((((_2678 * _2446) + _1174) * cbLight._m0[_2629].x) * _2697) * _2698) + _2555;
        _2621 = (((((_2678 * _2448) + _1176) * cbLight._m0[_2629].y) * _2697) * _2698) + _2556;
        _2623 = (((((_2678 * _2449) + _1177) * cbLight._m0[_2629].z) * _2697) * _2698) + _2557;
    }
    float _2733;
    float _2735;
    float _2737;
    if (_2350)
    {
        _2733 = _2619;
        _2735 = _2621;
        _2737 = _2623;
    }
    else
    {
        uint _2744 = _2259 + 3u;
        uint _2748 = _2259 + 11u;
        float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2744].w)) * _1016) * 0.949999988079071044921875);
        float _2763 = _2762 * _2762;
        float _2764 = cbLight._m0[_2744].x + _1092;
        float _2765 = cbLight._m0[_2744].y + _1093;
        float _2766 = cbLight._m0[_2744].z + _1094;
        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
        float _2771 = _2770 * _2764;
        float _2772 = _2770 * _2765;
        float _2773 = _2770 * _2766;
        float _2774 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2744].xyz));
        float _4804 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2778 = dot(vec3(_1013, _1014, _1015), vec3(_2771, _2772, _2773));
        float _4815 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2782 = dot(vec3(cbLight._m0[_2744].xyz), vec3(_2771, _2772, _2773));
        float _4826 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2786 = _2763 * _2763;
        float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
        float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0)))) * 5.0);
        float _2804 = 1.0 - _2763;
        float _2814 = (0.5 / (((_2424 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2424 * _2804) + _2763) * _2777))) * _2777;
        float _4837 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2733 = (((((_2797 * _2446) + _1174) * cbLight._m0[_2748].x) * _2816) * _2817) + _2619;
        _2735 = (((((_2797 * _2448) + _1176) * cbLight._m0[_2748].y) * _2816) * _2817) + _2621;
        _2737 = (((((_2797 * _2449) + _1177) * cbLight._m0[_2748].z) * _2816) * _2817) + _2623;
    }
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_2257.y == 0u)
    {
        float _2892 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2892;
        float _2894 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2892;
        float _2895 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2892;
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.x;
        uint _2919 = uint((float(_2907.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1113) / _2908))) + floor(float(uint(cbSceneParam._m0[85u].x * _1112) / _2908)));
        float _2929 = (log2(_2895 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2930 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        uint _2933 = uint(isnan(14.0) ? _2930 : (isnan(_2930) ? 14.0 : min(_2930, 14.0)));
        uvec4 _2938 = texelFetch(g_lightClusterGridBuffer, int(((_2933 << 2u) + (_2919 << 6u)) >> 2u));
        uint _2939 = _2938.x;
        uint _2940 = _2907.z;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((((1u << ((_2940 >> 4u) & 15u)) + 4294967295u) & _2939) == 0u) || ((_2940 & 240u) == 0u))
        {
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
        }
        else
        {
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            uint _3199 = 0u;
            uint _3208;
            bool _3209;
            for (;;)
            {
                _3208 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                _3209 = _3208 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3209)
                {
                    frontier_phi_66_pred = _3193;
                    frontier_phi_66_pred_1 = _3198;
                    frontier_phi_66_pred_2 = _3197;
                    frontier_phi_66_pred_3 = _3196;
                    frontier_phi_66_pred_4 = _3195;
                    frontier_phi_66_pred_5 = _3194;
                }
                else
                {
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    uint _3344;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3208;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    for (;;)
                    {
                        uint _3348 = uint(findLSB(_3344)) + (_3199 << 5u);
                        uint _3345 = (_3344 + 4294967295u) & _3344;
                        uint _3350 = _3348 * 48u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3370 = (_3348 * 48u) + 4u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3389 = (_3348 * 48u) + 8u;
                        vec3 _3400 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x));
                        float _3404 = _3364.x - _2893;
                        float _3405 = _3364.y - _2894;
                        float _3406 = _3364.z - _2895;
                        float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                        float _3410 = inversesqrt(_3407);
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3414 = dot(vec3(_1131, _1134, _1137), vec3(_3411, _3412, _3413));
                        float _3419 = 1.0 - (_3407 * _3364.w);
                        float _4863 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                        float _3421 = sqrt(_3407) * _3383.w;
                        float _3424 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                        float _3425 = _3424 * _3424;
                        float _3428 = ((1.0 - _3425) * _3414) + _3425;
                        float _3431 = _3421 * _3421;
                        float _3435 = ((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3420) / ((_3431 * 0.699999988079071044921875) + 1.0);
                        float _3439 = (-0.0) - _2893;
                        float _3440 = (-0.0) - _2894;
                        float _3441 = (-0.0) - _2895;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3456 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                        float _3457 = 1.0 - _1206;
                        float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                        float _3465 = _3464 * _3464;
                        float _3466 = _3465 * _3465;
                        float _3467 = _3446 + _3411;
                        float _3468 = _3447 + _3412;
                        float _3469 = _3448 + _3413;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3477 = dot(vec3(_1131, _1134, _1137), vec3(_3446, _3447, _3448));
                        float _4879 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3480 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                        float _3481 = dot(vec3(_1131, _1134, _1137), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                        float _4890 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3484 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                        float _3489 = _3424 * _3465;
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3414) + _3490;
                        float _4901 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3495 = 1.0 - _3465;
                        float _3505 = (0.5 / (((_3494 * ((_3480 * _3495) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3465) * _3480))) * _3494;
                        float _4912 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3516 = (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) / ((_3488 * _3488) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125))) * _3420;
                        _3268 = (_3435 * _3383.x) + _3341;
                        _3269 = (_3435 * _3383.y) + _3342;
                        _3270 = (_3435 * _3383.z) + _3343;
                        _3265 = (_3516 * _3400.x) + _3338;
                        _3266 = (_3516 * _3400.y) + _3339;
                        _3267 = (_3516 * _3400.z) + _3340;
                        if (_3345 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3345;
                        }
                    }
                    frontier_phi_66_pred = _3265;
                    frontier_phi_66_pred_1 = _3270;
                    frontier_phi_66_pred_2 = _3269;
                    frontier_phi_66_pred_3 = _3268;
                    frontier_phi_66_pred_4 = _3267;
                    frontier_phi_66_pred_5 = _3266;
                }
                _3041 = frontier_phi_66_pred;
                _3051 = frontier_phi_66_pred_1;
                _3049 = frontier_phi_66_pred_2;
                _3047 = frontier_phi_66_pred_3;
                _3045 = frontier_phi_66_pred_4;
                _3043 = frontier_phi_66_pred_5;
                uint _3200 = _3199 + 1u;
                if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3193 = _3041;
                    _3194 = _3043;
                    _3195 = _3045;
                    _3196 = _3047;
                    _3197 = _3049;
                    _3198 = _3051;
                    _3199 = _3200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
        }
        uvec4 _3054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3055 = _3054.z;
        uint _3057 = (_3055 >> 8u) & 15u;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        if (((4294967295u << _3057) & _2939) == 0u)
        {
            _3161 = _3040;
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
            _3171 = _3050;
        }
        else
        {
            float _3186 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
            float _3187 = _3186 * _2893;
            float _3188 = _3186 * _2894;
            float _3189 = _3186 * _2895;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3057 < ((_3055 >> 12u) & 15u))
            {
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3321 = _3040;
                float _3322 = _3042;
                float _3323 = _3044;
                float _3324 = _3046;
                float _3325 = _3048;
                float _3326 = _3050;
                uint _3327 = _3057;
                uint _3336;
                bool _3337;
                for (;;)
                {
                    _3336 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3327 << 2u)) >> 2u)).x;
                    _3337 = _3336 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3337)
                    {
                        frontier_phi_77_pred = _3326;
                        frontier_phi_77_pred_1 = _3325;
                        frontier_phi_77_pred_2 = _3324;
                        frontier_phi_77_pred_3 = _3323;
                        frontier_phi_77_pred_4 = _3322;
                        frontier_phi_77_pred_5 = _3321;
                    }
                    else
                    {
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3543 = _3321;
                        float _3544 = _3322;
                        float _3545 = _3323;
                        float _3546 = _3324;
                        float _3547 = _3325;
                        float _3548 = _3326;
                        uint _3549 = _3336;
                        uint _3550;
                        vec4 _3575;
                        float _3576;
                        vec4 _3591;
                        vec3 _3603;
                        vec4 _3618;
                        vec4 _3633;
                        float _3679;
                        bool _3680;
                        for (;;)
                        {
                            uint _3560 = ((_3327 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3549));
                            _3550 = (_3549 + 4294967295u) & _3549;
                            uint _3562 = _3560 * 40u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3576 = _3575.w;
                            uint _3578 = (_3560 * 40u) + 4u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3593 = (_3560 * 40u) + 8u;
                            _3603 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x));
                            uint _3605 = (_3560 * 40u) + 16u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3560 * 40u) + 20u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3560 * 40u) + 24u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3654 = (_3560 * 40u) + 28u;
                            vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            _3679 = fma(_2895, _3667.z, fma(_2894, _3667.y, _3667.x * _2893)) + _3667.w;
                            _3680 = !((fma(_2895, _3648.z, fma(_2894, _3648.y, _3648.x * _2893)) + _3648.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3680)
                            {
                                float _3707 = _3575.x - _2893;
                                float _3708 = _3575.y - _2894;
                                float _3709 = _3575.z - _2895;
                                float _3710 = dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709));
                                float _3713 = inversesqrt(_3710);
                                float _3714 = _3713 * _3707;
                                float _3715 = _3713 * _3708;
                                float _3716 = _3713 * _3709;
                                float _3720 = 1.0 - (_3710 / (_3576 * _3576));
                                float _4923 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3721 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3725 = sqrt(_3710) * _3591.w;
                                float _3727 = 1.39999997615814208984375 / (_3725 + 1.39999997615814208984375);
                                float _3728 = _3727 * _3727;
                                float _3731 = ((1.0 - _3728) * dot(vec3(_3714, _3715, _3716), vec3(_1131, _1134, _1137))) + _3728;
                                float _3734 = _3725 * _3725;
                                float _3738 = (fma(_2895, _3618.z, fma(_2894, _3618.y, _3618.x * _2893)) + _3618.w) / _3679;
                                float _3739 = (fma(_2895, _3633.z, fma(_2894, _3633.y, _3633.x * _2893)) + _3633.w) / _3679;
                                float _3743 = 1.0 - dot(vec2(_3738, _3739), vec2(_3738, _3739));
                                float _4939 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                                float _3745 = _3744 * (((isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0))) * _3721) / ((_3734 * 0.699999988079071044921875) + 1.0));
                                float _3757 = exp2(log2(1.0 / ((_3734 * 3.5) + 5.0)) * 0.25);
                                float _3758 = 1.0 - _1206;
                                float _3765 = sqrt(1.0 - ((1.0 - (_3758 * _3758)) * (1.0 - (_3757 * _3757))));
                                float _3766 = _3765 * _3765;
                                float _3767 = _3766 * _3766;
                                float _3768 = _3714 - _3187;
                                float _3769 = _3715 - _3188;
                                float _3770 = _3716 - _3189;
                                float _3774 = inversesqrt(dot(vec3(_3768, _3769, _3770), vec3(_3768, _3769, _3770)));
                                float _3778 = dot(vec3(_1131, _1134, _1137), vec3((-0.0) - _3187, (-0.0) - _3188, (-0.0) - _3189));
                                float _4950 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3781 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3782 = dot(vec3(_1131, _1134, _1137), vec3(_3774 * _3768, _3774 * _3769, _3774 * _3770));
                                float _4961 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3785 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3789 = ((_3785 * _3785) * (_3767 + (-1.0))) + 1.0;
                                float _3790 = _3727 * _3766;
                                float _3791 = _3790 * _3790;
                                float _3797 = ((1.0 - _3791) * dot(vec3(_1131, _1134, _1137), vec3(_3714, _3715, _3716))) + _3791;
                                float _4972 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3798 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3799 = 1.0 - _3766;
                                float _3809 = (0.5 / (((_3798 * ((_3781 * _3799) + _3766)) + 9.9999999392252902907785028219223e-09) + (((_3798 * _3799) + _3766) * _3781))) * _3798;
                                float _4983 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3819 = (_3744 * _3721) * (((_3767 * 3.1415927410125732421875) * (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) / ((_3789 * _3789) * ((_3734 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3745 * _3591.y;
                                frontier_phi_83_pred_1 = _3745 * _3591.x;
                                frontier_phi_83_pred_2 = _3819 * _3603.z;
                                frontier_phi_83_pred_3 = _3819 * _3603.y;
                                frontier_phi_83_pred_4 = _3819 * _3603.x;
                                frontier_phi_83_pred_5 = _3745 * _3591.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3827 = frontier_phi_83_pred;
                            _3826 = frontier_phi_83_pred_1;
                            _3825 = frontier_phi_83_pred_2;
                            _3824 = frontier_phi_83_pred_3;
                            _3823 = frontier_phi_83_pred_4;
                            _3828 = frontier_phi_83_pred_5;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            if (_3550 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3550;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3535;
                        frontier_phi_77_pred_1 = _3534;
                        frontier_phi_77_pred_2 = _3533;
                        frontier_phi_77_pred_3 = _3532;
                        frontier_phi_77_pred_4 = _3531;
                        frontier_phi_77_pred_5 = _3530;
                    }
                    _3172 = frontier_phi_77_pred;
                    _3170 = frontier_phi_77_pred_1;
                    _3168 = frontier_phi_77_pred_2;
                    _3166 = frontier_phi_77_pred_3;
                    _3164 = frontier_phi_77_pred_4;
                    _3162 = frontier_phi_77_pred_5;
                    uint _3328 = _3327 + 1u;
                    if (_3328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3321 = _3162;
                        _3322 = _3164;
                        _3323 = _3166;
                        _3324 = _3168;
                        _3325 = _3170;
                        _3326 = _3172;
                        _3327 = _3328;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3166;
                frontier_phi_58_59_ladder_1 = _3172;
                frontier_phi_58_59_ladder_2 = _3170;
                frontier_phi_58_59_ladder_3 = _3168;
                frontier_phi_58_59_ladder_4 = _3164;
                frontier_phi_58_59_ladder_5 = _3162;
            }
            else
            {
                frontier_phi_58_59_ladder = _3044;
                frontier_phi_58_59_ladder_1 = _3050;
                frontier_phi_58_59_ladder_2 = _3048;
                frontier_phi_58_59_ladder_3 = _3046;
                frontier_phi_58_59_ladder_4 = _3042;
                frontier_phi_58_59_ladder_5 = _3040;
            }
            _3161 = frontier_phi_58_59_ladder_5;
            _3163 = frontier_phi_58_59_ladder_4;
            _3165 = frontier_phi_58_59_ladder;
            _3167 = frontier_phi_58_59_ladder_3;
            _3169 = frontier_phi_58_59_ladder_2;
            _3171 = frontier_phi_58_59_ladder_1;
        }
        float _3176 = isnan(1.0) ? _1190 : (isnan(_1190) ? 1.0 : min(_1190, 1.0));
        _2952 = (_3176 * _3167) + _2388;
        _2954 = (_3176 * _3169) + _2390;
        _2956 = (_3176 * _3171) + _2392;
        _2958 = ((_3161 * _1174) * _3176) + _2733;
        _2960 = ((_3163 * _1176) * _3176) + _2735;
        _2962 = ((_3165 * _1177) * _3176) + _2737;
    }
    else
    {
        _2952 = _2388;
        _2954 = _2390;
        _2956 = _2392;
        _2958 = _2733;
        _2960 = _2735;
        _2962 = _2737;
    }
    float _4999 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _5010 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _5021 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _2979 = ((isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2952 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1190))) + ((_2958 + ((isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0))) * _2028)) * cbPerFrame._m0[3u].x);
    float _2980 = ((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_2954 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1190))) + ((_2960 + ((isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0))) * _2028)) * cbPerFrame._m0[3u].x);
    float _2981 = ((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_2956 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1190))) + ((_2962 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2028)) * cbPerFrame._m0[3u].x);
    uint _2982 = _295 + 6u;
    float _2990 = _1112 / cbSceneParam._m0[86u].x;
    float _2991 = _1113 / cbSceneParam._m0[86u].y;
    vec4 _3005 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2990, _2991, (log2((isnan(cbSceneParam._m0[77u].w) ? _1035 : (isnan(_1035) ? cbSceneParam._m0[77u].w : min(_1035, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3007 = _3005.x;
    float _3008 = _3005.y;
    float _3009 = _3005.z;
    float _3010 = _3005.w;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    if (_1035 > cbSceneParam._m0[78u].w)
    {
        float _3065 = isnan(_1035) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1035 : min(cbSceneParam._m0[80u].w, _1035));
        float _3066 = _3065 / _1035;
        float _3077 = _3066 * _1085;
        float _3078 = _1086 * _3066;
        float _3079 = (-0.0) - _3078;
        float _3081 = _3066 * _1087;
        float _3083 = (cbSceneParam._m0[77u].w * _3079) / _3065;
        float _3084 = _3083 + cbSceneParam._m0[79u].w;
        float _3085 = cbSceneParam._m0[79u].w - _3078;
        float _3091 = sqrt(((_3077 * _3077) + (_3078 * _3078)) + (_3081 * _3081));
        float _3094 = (1.0 - (cbSceneParam._m0[77u].w / _3065)) * _3091;
        float _3099 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3101 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3278;
        if (abs((_3079 - _3083) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3278 = ((((_3084 > 0.0) ? exp2(_3099 * _3084) : (2.0 - exp2(_3101 * _3084))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3094;
        }
        else
        {
            float _3222 = 1.0 / cbSceneParam._m0[80u].x;
            float _3223 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : max(_3084, _3085));
            float _3224 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : min(_3084, _3085));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            _3278 = ((abs(_3091 / _3079) * cbSceneParam._m0[80u].y) * ((((_3233 - _3234) * 2.0) - ((exp2(_3099 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0)))) - exp2(_3099 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))))) * _3222)) - ((exp2(_3101 * _3233) - exp2(_3101 * _3234)) * _3222))) + (_3094 * cbSceneParam._m0[80u].z);
        }
        vec4 _3280 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2990, _2991, 1.0), 0.0);
        float _3289 = exp2((_3278 * (-1.44269502162933349609375)) * (1.0 - _3280.w));
        float _3290 = log2(_3289);
        float _3306 = log2(_3010);
        _3103 = (exp2(_3306 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].x)) * _3280.x) / cbSceneParam._m0[78u].x)) + _3007;
        _3105 = (exp2(_3306 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].y)) * _3280.y) / cbSceneParam._m0[78u].y)) + _3008;
        _3107 = (exp2(_3306 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].z)) * _3280.z) / cbSceneParam._m0[78u].z)) + _3009;
        _3109 = _3289 * _3010;
    }
    else
    {
        _3103 = _3007;
        _3105 = _3008;
        _3107 = _3009;
        _3109 = _3010;
    }
    bool _3316;
    vec4 _3119;
    vec4 _3141;
    float _3143;
    float _3147;
    float _3148;
    float _3149;
    float _3150;
    bool _3160;
    for (;;)
    {
        _3119 = cbMatDynParam._m0[0u];
        float _3121 = roundEven(_3119.y);
        bool _3122 = _3121 == 3.0;
        float _3123 = log2(_3109);
        float _3130 = exp2(_3123 * cbSceneParam._m0[78u].x) * _2979;
        float _3131 = exp2(_3123 * cbSceneParam._m0[78u].y) * _2980;
        float _3132 = exp2(_3123 * cbSceneParam._m0[78u].z) * _2981;
        float _3139 = _1101 + (-0.5);
        _3141 = cbMtdParam._m0[1u];
        _3143 = _3141.y * _3139;
        float _3146 = (_3121 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3147 = _3146 * (_3122 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3103)));
        _3148 = _3146 * (_3122 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3105)));
        _3149 = _3146 * (_3122 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3107)));
        _3150 = _3139 * 0.999000012874603271484375;
        _3160 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3160)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3150) < 0.5)
            {
                _3316 = true;
                break;
            }
        }
        uint _3257 = _1150 + uint(_3119.w);
        if ((cbInstanceData._m0[_3257].w < 1.0) && ((cbInstanceData._m0[_3257].w + _3150) < 0.5))
        {
            _3316 = true;
            break;
        }
        if ((_3143 + 1.0) < _3141.x)
        {
            _3316 = true;
            break;
        }
        _3316 = false;
        break;
    }
    float _3521;
    if (_3316)
    {
        discard_state = true;
        _3521 = 0.0;
    }
    else
    {
        _3521 = cbInstanceData._m0[_2982].w;
    }
    SV_Target.x = _3147;
    SV_Target.y = _3148;
    SV_Target.z = _3149;
    SV_Target.w = _3521;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2982].w;
    discard_exit();
}


