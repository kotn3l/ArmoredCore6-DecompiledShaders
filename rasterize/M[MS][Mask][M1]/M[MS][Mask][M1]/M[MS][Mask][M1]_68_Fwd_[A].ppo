#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1569;
float _3949;
float _3950;
float _3951;
float _3952;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3961 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3972 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3983 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3994 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _466 = (_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _467 = (_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _468 = (_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4005 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    float _545 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _539;
    float _548 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _540;
    float _551 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _541;
    float _558 = ((_539 - _545) * (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) + _545;
    float _559 = ((_540 - _548) * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) + _548;
    float _560 = ((_541 - _551) * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) + _551;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _459) + _619;
    float _629 = ((_600.y - _620) * _459) + _620;
    float _630 = ((_600.z - _621) * _459) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _655 = ((_642.z - _630) * _532) + _630;
    float _658 = ((((_642.x - _628) * _532) + _628) * 2.0) + (-1.0);
    float _659 = ((((_642.y - _629) * _532) + _629) * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _4016 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _706 = _704.x;
    float _707 = 1.0 - _706;
    float _716 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _719 = ((isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : min(_716, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _728 = (_719 - ((((((_706 - _707) * cbMtdParam._m0[24u].z) + _707) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _719))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4037 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _729 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _736 = (_729 * (cbMtdParam._m0[17u].x - _558)) + _558;
    float _737 = (_729 * (cbMtdParam._m0[17u].y - _559)) + _559;
    float _738 = (_729 * (cbMtdParam._m0[17u].z - _560)) + _560;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _778 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_752 - _753) * cbMtdParam._m0[24u].w) + _753) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4048 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _787 = ((((cbMtdParam._m0[10u].x - _736) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _779) + _736;
    float _788 = ((((cbMtdParam._m0[10u].y - _737) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _779) + _737;
    float _789 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _738)) * _779) + _738;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _817 = _815.x;
    float _835 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _817) * _459) + _817;
    float _852 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _835) * _532) + _835;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _852) * cbMtdParam._m0[19u].z) + _852;
    float _858 = _856 - (_856 * _729);
    float _860 = _858 - (_858 * _779);
    float _865 = (((_577.z - _655) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _655;
    float _869 = ((_679.z - _865) * cbMtdParam._m0[19u].w) + _865;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _890 = (_883.x * 2.0) + (-1.0);
    float _891 = (_883.y * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _4059 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _900 = (_729 * (_883.z - _869)) + _869;
    float _903 = ((cbMtdParam._m0[23u].x - _900) * _779) + _900;
    vec4 _924 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _930 = (_924.x * 2.0) + (-1.0);
    float _931 = (_924.y * 2.0) + (-1.0);
    float _932 = dot(vec2(_930, _931), vec2(_930, _931));
    float _4070 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _946 = (_658 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_577.x * 2.0) + (-1.0)))) + (((_679.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _947 = (_659 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_577.y * 2.0) + (-1.0)))) + (((_679.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _959 = (((_890 - _946) + (cbMtdParam._m0[21u].x * _946)) * _729) + _946;
    float _960 = (((_891 - _947) + (cbMtdParam._m0[21u].x * _947)) * _729) + _947;
    float _961 = (_729 * (sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) - _665)) + _665;
    float _972 = (((_930 - _959) + (_959 * cbMtdParam._m0[22u].z)) * _779) + _959;
    float _973 = (((_931 - _960) + (_960 * cbMtdParam._m0[22u].z)) * _779) + _960;
    float _974 = ((sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) - _961) * _779) + _961;
    float _976 = cbMtdParam._m0[22u].x + _679.w;
    float _979 = fma(_974, _261 * NORMAL.x, fma(_973, _268 * TANGENT.x, (_254 * _246) * _972));
    float _982 = fma(_974, _261 * NORMAL.y, fma(_973, _268 * TANGENT.y, (_254 * _247) * _972));
    float _985 = fma(_974, _261 * NORMAL.z, fma(_973, _268 * TANGENT.z, (_254 * _248) * _972));
    float _989 = inversesqrt(dot(vec3(_979, _982, _985), vec3(_979, _982, _985)));
    float _990 = _989 * _979;
    float _991 = _989 * _982;
    float _992 = _989 * _985;
    float _4081 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _993 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4103 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4114 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4125 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4136 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _998 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1012 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1062 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1052);
    float _1063 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1052);
    float _1064 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1052);
    float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
    float _1069 = _1062 * _1068;
    float _1070 = _1063 * _1068;
    float _1071 = _1064 * _1068;
    vec4 _1076 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1078 = _1076.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1250 = sqrt(((_1062 * _1062) + (_1063 * _1063)) + (_1064 * _1064));
        float _1256 = (cbMatDynParam._m0[5u].x * _1250) + cbMatDynParam._m0[5u].y;
        float _4147 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1261 = (cbMatDynParam._m0[5u].z * _1250) + cbMatDynParam._m0[5u].w;
        float _4158 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) - _1257)) + _1257) < ((_1078 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1089 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1090 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1108 = fma(_992, cbSceneParam._m0[5u].z, fma(_991, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _990));
    float _1111 = fma(_992, cbSceneParam._m0[6u].z, fma(_991, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _990));
    float _1114 = fma(_992, cbSceneParam._m0[7u].z, fma(_991, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _990));
    uint _1127 = _293 + 9u;
    uint _1128 = _1127 + uint(cbMatDynParam._m0[0u].w);
    float _1134 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_1128].x;
    float _1135 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_1128].y;
    float _1136 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_1128].z;
    float _4169 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1137 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _4180 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1138 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1139 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _1140 = 1.0 - _998;
    float _1141 = _1137 * _1140;
    float _1142 = _1138 * _1140;
    float _1143 = _1139 * _1140;
    float _1148 = (_1137 + (-0.039999999105930328369140625)) * _998;
    float _1149 = (_1138 + (-0.039999999105930328369140625)) * _998;
    float _1150 = (_1139 + (-0.039999999105930328369140625)) * _998;
    float _1151 = _1148 + 0.039999999105930328369140625;
    float _1153 = _1149 + 0.039999999105930328369140625;
    float _1154 = _1150 + 0.039999999105930328369140625;
    vec4 _1163 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1089, cbSceneParam._m0[86u].y * _1090));
    float _1167 = ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * TEXCOORD_5.w) * _1163.x;
    float _1168 = dot(vec3(_990, _991, _992), vec3(_1069, _1070, _1071));
    float _1171 = _1168 * 2.0;
    float _1175 = (_1171 * _990) - _1069;
    float _1176 = (_1171 * _991) - _1070;
    float _1177 = (_1171 * _992) - _1071;
    float _1181 = abs(dot(vec3(_1069, _1070, _1071), vec3(_990, _991, _992)));
    float _4202 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1183 = sqrt(_993);
    float _1196 = exp2((_1183 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1183 * 3.0));
    float _1202 = (1.0 - _1196) * ((_1183 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1203 = _1196 * _1183;
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1568;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1293 = fma(_1239, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231));
        float _1297 = fma(_1239, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231));
        float _1301 = fma(_1239, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231));
        float _1326 = _1231 + _990;
        float _1327 = _1235 + _991;
        float _1328 = _1239 + _992;
        float _1338 = fma(_1328, cbModelParam._m0[26u].z, fma(_1327, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1326)) - _1293;
        float _1339 = fma(_1328, cbModelParam._m0[27u].z, fma(_1327, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1326)) - _1297;
        float _1340 = fma(_1328, cbModelParam._m0[28u].z, fma(_1327, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1326)) - _1301;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1293 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1297 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[34u].z) + ((((((_1301 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1396 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1362.x + (-0.5));
        float _1398 = _1396 * (_1362.y + (-0.5));
        float _1399 = _1396 * (_1362.z + (-0.5));
        float _1406 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1369.x + (-0.5));
        float _1408 = _1406 * (_1369.y + (-0.5));
        float _1409 = _1406 * (_1369.z + (-0.5));
        float _1416 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1376.x + (-0.5));
        float _1418 = _1416 * (_1376.y + (-0.5));
        float _1419 = _1416 * (_1376.z + (-0.5));
        float _1426 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1383.x + (-0.5));
        float _1428 = _1426 * (_1383.y + (-0.5));
        float _1429 = _1426 * (_1383.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1450 = (dot(vec3(_990, _991, _992), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1460 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4250 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1462 + 1.0))) + _1467) * _1430;
        float _1477 = _1398 * 0.5;
        float _1478 = _1408 * 0.5;
        float _1479 = _1418 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_990, _991, _992), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4283 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1504 + 1.0))) + _1509) * _1431;
        float _1519 = _1399 * 0.5;
        float _1520 = _1409 * 0.5;
        float _1521 = _1419 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_990, _991, _992), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4316 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1546 + 1.0))) + _1551) * _1432;
        _1568 = _1399;
        _1570 = _1398;
        _1571 = _1397;
        _1572 = _1409;
        _1573 = _1408;
        _1574 = _1407;
        _1575 = _1419;
        _1576 = _1418;
        _1577 = _1417;
        _1578 = _1432;
        _1579 = _1431;
        _1580 = _1430;
        _1581 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1582 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1583 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1569;
        _1570 = _1569;
        _1571 = _1569;
        _1572 = _1569;
        _1573 = _1569;
        _1574 = _1569;
        _1575 = _1569;
        _1576 = _1569;
        _1577 = _1569;
        _1578 = _1569;
        _1579 = _1569;
        _1580 = _1569;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1610 = fma(_1239, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231));
        float _1614 = fma(_1239, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231));
        float _1618 = fma(_1239, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231));
        float _1641 = _1231 + _990;
        float _1642 = _1235 + _991;
        float _1643 = _1239 + _992;
        float _1653 = fma(_1643, cbModelParam._m0[30u].z, fma(_1642, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1641)) - _1610;
        float _1654 = fma(_1643, cbModelParam._m0[31u].z, fma(_1642, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1641)) - _1614;
        float _1655 = fma(_1643, cbModelParam._m0[32u].z, fma(_1642, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1641)) - _1618;
        float _1659 = inversesqrt(dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655)));
        float _1672 = ((_1659 * _1653) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1610 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1673 = ((_1659 * _1654) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1614 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1674 = ((_1659 * _1655) / cbModelParam._m0[35u].z) + ((((((_1618 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1676 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        vec4 _1683 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        vec4 _1690 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        vec4 _1697 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1672, _1673, _1674), 0.0);
        float _1709 = exp2((_1676.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1676.x + (-0.5));
        float _1711 = _1709 * (_1676.y + (-0.5));
        float _1712 = _1709 * (_1676.z + (-0.5));
        float _1719 = exp2((_1683.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1683.x + (-0.5));
        float _1721 = _1719 * (_1683.y + (-0.5));
        float _1722 = _1719 * (_1683.z + (-0.5));
        float _1729 = exp2((_1690.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1690.x + (-0.5));
        float _1731 = _1729 * (_1690.y + (-0.5));
        float _1732 = _1729 * (_1690.z + (-0.5));
        float _1739 = exp2((_1697.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1697.x + (-0.5));
        float _1741 = _1739 * (_1697.y + (-0.5));
        float _1742 = _1739 * (_1697.z + (-0.5));
        float _1743 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1744 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = _1710 * 0.5;
        float _1747 = _1720 * 0.5;
        float _1748 = _1730 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_990, _991, _992), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1743 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4379 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1773 + 1.0))) + _1778) * _1743;
        float _1788 = _1711 * 0.5;
        float _1789 = _1721 * 0.5;
        float _1790 = _1731 * 0.5;
        float _1791 = dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790));
        float _1796 = (_1791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1791);
        float _1804 = (dot(vec3(_990, _991, _992), vec3(_1796 * _1788, _1796 * _1789, _1796 * _1790)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790)) / (_1744 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1815 = _1814 * 2.0;
        float _1819 = (1.0 - _1814) / (_1814 + 1.0);
        float _4412 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1829 = ((((1.0 - _1820) * (_1815 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1815 + 1.0))) + _1820) * _1744;
        float _1830 = _1712 * 0.5;
        float _1831 = _1722 * 0.5;
        float _1832 = _1732 * 0.5;
        float _1833 = dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832));
        float _1838 = (_1833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1833);
        float _1846 = (dot(vec3(_990, _991, _992), vec3(_1838 * _1830, _1838 * _1831, _1838 * _1832)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1855 = sqrt(((_1831 * _1831) + (_1830 * _1830)) + (_1832 * _1832)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1857 = _1856 * 2.0;
        float _1861 = (1.0 - _1856) / (_1856 + 1.0);
        float _4445 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1871 = ((((1.0 - _1862) * (_1857 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1857 + 1.0))) + _1862) * _1745;
        _1879 = _1712;
        _1880 = _1711;
        _1881 = _1710;
        _1882 = _1722;
        _1883 = _1721;
        _1884 = _1720;
        _1885 = _1732;
        _1886 = _1731;
        _1887 = _1730;
        _1888 = _1745;
        _1889 = _1744;
        _1890 = _1743;
        _1891 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
        _1892 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)));
        _1893 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)));
    }
    else
    {
        _1879 = _1569;
        _1880 = _1569;
        _1881 = _1569;
        _1882 = _1569;
        _1883 = _1569;
        _1884 = _1569;
        _1885 = _1569;
        _1886 = _1569;
        _1887 = _1569;
        _1888 = _1569;
        _1889 = _1569;
        _1890 = _1569;
        _1891 = 0.0;
        _1892 = 0.0;
        _1893 = 0.0;
    }
    float _1903 = (cbModelParam._m0[1u].x * (_1891 - _1581)) + _1581;
    float _1904 = (cbModelParam._m0[1u].x * (_1892 - _1582)) + _1582;
    float _1905 = (cbModelParam._m0[1u].x * (_1893 - _1583)) + _1583;
    float _1926 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1903));
    float _1947 = _1175 * 0.5;
    float _1948 = _1176 * 0.5;
    float _1949 = _1177 * 0.5;
    float _1950 = dot(vec4(_1947, _1948, _1949, 1.0), vec4(_1881, _1884, _1887, _1890));
    float _1953 = dot(vec4(_1947, _1948, _1949, 1.0), vec4(_1880, _1883, _1886, _1889));
    float _1956 = dot(vec4(_1947, _1948, _1949, 1.0), vec4(_1879, _1882, _1885, _1888));
    float _1990;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1963 = dot(vec4(_1947, _1948, _1949, 1.0), vec4(_1568, _1572, _1575, _1578));
        float _1967 = dot(vec4(_1947, _1948, _1949, 1.0), vec4(_1570, _1573, _1576, _1579));
        float _1971 = dot(vec4(_1947, _1948, _1949, 1.0), vec4(_1571, _1574, _1577, _1580));
        float _1978 = dot(vec4(cbModelParam._m0[39u]), vec4(_1947, _1948, _1949, 1.0));
        _1990 = dot(vec3(isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1978) ? 0.0 : (isnan(0.0) ? _1978 : max(0.0, _1978))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1990 = 1.0;
    }
    float _2001;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1992 = dot(vec4(cbModelParam._m0[40u]), vec4(_1947, _1948, _1949, 1.0));
        _2001 = dot(vec3(isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1992) ? 0.0 : (isnan(0.0) ? _1992 : max(0.0, _1992))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2001 = 1.0;
    }
    float _2005 = (_2001 * cbModelParam._m0[1u].x) + (_1990 * (1.0 - cbModelParam._m0[1u].x));
    float _2015 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _993);
    float _2016 = isnan(_2015) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2015 : min(cbModelParam._m0[25u].z, _2015));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2064 = fma(_1239, cbModelParam._m0[13u].z, fma(_1235, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1231)) + cbModelParam._m0[13u].w;
        float _2068 = fma(_1239, cbModelParam._m0[14u].z, fma(_1235, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1231)) + cbModelParam._m0[14u].w;
        float _2072 = fma(_1239, cbModelParam._m0[15u].z, fma(_1235, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1231)) + cbModelParam._m0[15u].w;
        float _2075 = fma(_1177, cbModelParam._m0[13u].z, fma(_1176, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175));
        float _2078 = fma(_1177, cbModelParam._m0[14u].z, fma(_1176, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175));
        float _2081 = fma(_1177, cbModelParam._m0[15u].z, fma(_1176, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175));
        float _2109;
        if (_2075 > 0.0)
        {
            _2109 = abs((1.0 - _2064) / _2075);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2064 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2109 = frontier_phi_17_15_ladder;
        }
        float _2312;
        if (_2078 > 0.0)
        {
            _2312 = abs((1.0 - _2068) / _2078);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2068 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2312 = frontier_phi_26_22_ladder;
        }
        float _2566;
        if (_2081 > 0.0)
        {
            _2566 = abs((1.0 - _2072) / _2081);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2072 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2566 = frontier_phi_38_33_ladder;
        }
        float _2568 = isnan(_2312) ? _2109 : (isnan(_2109) ? _2312 : min(_2109, _2312));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _2075) + _2064;
        float _2574 = (_2569 * _2078) + _2068;
        float _2575 = (_2569 * _2081) + _2072;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2576;
        float _2580 = _2576 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 > _2580) || ((_2574 < _2578) || ((_2573 < _2578) || (_2573 > _2580))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2575, cbModelParam._m0[9u].z, fma(_2574, cbModelParam._m0[9u].y, _2573 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2575, cbModelParam._m0[10u].z, fma(_2574, cbModelParam._m0[10u].y, _2573 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2575, cbModelParam._m0[11u].z, fma(_2574, cbModelParam._m0[11u].y, _2573 * cbModelParam._m0[11u].x))), _2016);
            frontier_phi_16_38_ladder = _2703.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2703.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2703.x * cbModelParam._m0[1u].y;
        }
        _2097 = frontier_phi_16_38_ladder_2;
        _2099 = frontier_phi_16_38_ladder_1;
        _2101 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2085 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1175, _1176, _1177), _2016);
        _2097 = _2085.x * cbModelParam._m0[1u].y;
        _2099 = _2085.y * cbModelParam._m0[1u].y;
        _2101 = _2085.z * cbModelParam._m0[1u].y;
    }
    float _2105 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _993);
    float _2106 = isnan(_2105) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2105 : min(cbModelParam._m0[25u].w, _2105));
    float _2196;
    float _2198;
    float _2200;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2160 = fma(_1239, cbModelParam._m0[21u].z, fma(_1235, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1231)) + cbModelParam._m0[21u].w;
        float _2164 = fma(_1239, cbModelParam._m0[22u].z, fma(_1235, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1231)) + cbModelParam._m0[22u].w;
        float _2168 = fma(_1239, cbModelParam._m0[23u].z, fma(_1235, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1231)) + cbModelParam._m0[23u].w;
        float _2171 = fma(_1177, cbModelParam._m0[21u].z, fma(_1176, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175));
        float _2174 = fma(_1177, cbModelParam._m0[22u].z, fma(_1176, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175));
        float _2177 = fma(_1177, cbModelParam._m0[23u].z, fma(_1176, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175));
        float _2317;
        if (_2171 > 0.0)
        {
            _2317 = abs((1.0 - _2160) / _2171);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2171 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2160 + 1.0) / _2171);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2317 = frontier_phi_28_24_ladder;
        }
        float _2593;
        if (_2174 > 0.0)
        {
            _2593 = abs((1.0 - _2164) / _2174);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2164 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2593 = frontier_phi_40_35_ladder;
        }
        float _2806;
        if (_2177 > 0.0)
        {
            _2806 = abs((1.0 - _2168) / _2177);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2168 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2806 = frontier_phi_49_46_ladder;
        }
        float _2808 = isnan(_2593) ? _2317 : (isnan(_2317) ? _2593 : min(_2317, _2593));
        float _2809 = isnan(_2806) ? _2808 : (isnan(_2808) ? _2806 : min(_2808, _2806));
        float _2813 = (_2809 * _2171) + _2160;
        float _2814 = (_2809 * _2174) + _2164;
        float _2815 = (_2809 * _2177) + _2168;
        float _2816 = _2809 * 9.9999997473787516355514526367188e-05;
        float _2817 = (-1.0) - _2816;
        float _2819 = _2816 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2815 > _2819) || ((_2815 < _2817) || ((_2814 > _2819) || ((_2814 < _2817) || ((_2813 < _2817) || (_2813 > _2819))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2815, cbModelParam._m0[17u].z, fma(_2814, cbModelParam._m0[17u].y, _2813 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2815, cbModelParam._m0[18u].z, fma(_2814, cbModelParam._m0[18u].y, _2813 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2815, cbModelParam._m0[19u].z, fma(_2814, cbModelParam._m0[19u].y, _2813 * cbModelParam._m0[19u].x))), _2106);
            frontier_phi_25_49_ladder = _3014.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3014.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3014.x * cbModelParam._m0[1u].z;
        }
        _2196 = frontier_phi_25_49_ladder_2;
        _2198 = frontier_phi_25_49_ladder_1;
        _2200 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2180 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1175, _1176, _1177), _2106);
        _2196 = _2180.x * cbModelParam._m0[1u].z;
        _2198 = _2180.y * cbModelParam._m0[1u].z;
        _2200 = _2180.z * cbModelParam._m0[1u].z;
    }
    float _2213 = (((_1202 * _1151) + _1203) * _1167) * ((cbModelParam._m0[1u].w * (_2196 - _2097)) + _2097);
    float _2215 = (((_1202 * _1153) + _1203) * _1167) * ((cbModelParam._m0[1u].w * (_2198 - _2099)) + _2099);
    float _2217 = (((_1202 * _1154) + _1203) * _1167) * ((cbModelParam._m0[1u].w * (_2200 - _2101)) + _2101);
    float _2220 = fma(_2217, cbSceneParam._m0[89u].z, fma(_2215, cbSceneParam._m0[89u].y, _2213 * cbSceneParam._m0[89u].x));
    float _2223 = fma(_2217, cbSceneParam._m0[90u].z, fma(_2215, cbSceneParam._m0[90u].y, _2213 * cbSceneParam._m0[90u].x));
    float _2226 = fma(_2217, cbSceneParam._m0[91u].z, fma(_2215, cbSceneParam._m0[91u].y, _2213 * cbSceneParam._m0[91u].x));
    uvec4 _2236 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2238 = _2236.x * 14u;
    uint _2239 = _2238 + 13u;
    float _2246 = _1167 + (-1.0);
    float _2251 = (cbLight._m0[_2239].x * _2246) + 1.0;
    float _2252 = (cbLight._m0[_2239].y * _2246) + 1.0;
    float _2253 = (cbLight._m0[_2239].z * _2246) + 1.0;
    float _2254 = (cbLight._m0[_2239].w * _2246) + 1.0;
    uint _2255 = _2238 + 5u;
    float _2261 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
    uint _2265 = _2238 + 4u;
    float _2271 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
    uint _2275 = _2238 | 1u;
    float _2286 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_990, _991, _992));
    float _2289 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_990, _991, _992));
    float _4581 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _4592 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2294 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * 0.3183098733425140380859375;
    float _2296 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * 0.3183098733425140380859375;
    float _2303 = ((cbLight._m0[_2255].x * _2261) * _2296) + ((cbLight._m0[_2265].x * _2271) * _2294);
    float _2304 = ((_2261 * cbLight._m0[_2255].y) * _2296) + ((_2271 * cbLight._m0[_2265].y) * _2294);
    float _2305 = ((_2261 * cbLight._m0[_2255].z) * _2296) + ((_2271 * cbLight._m0[_2265].z) * _2294);
    uvec4 _2309 = floatBitsToUint(cbLight._m0[_2238 + 12u]);
    bool _2311 = _2309.x == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2311)
    {
        _2322 = _2303;
        _2324 = _2304;
        _2326 = _2305;
    }
    else
    {
        uint _2330 = _2238 + 6u;
        float _2346 = (dot(vec3(cbLight._m0[_2238 + 2u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2347 = _2346 * _2346;
        float _4603 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2348 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2349 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2322 = (((cbLight._m0[_2330].x * 0.3183098733425140380859375) * _2348) * _2349) + _2303;
        _2324 = (((cbLight._m0[_2330].y * 0.3183098733425140380859375) * _2348) * _2349) + _2304;
        _2326 = (((cbLight._m0[_2330].z * 0.3183098733425140380859375) * _2348) * _2349) + _2305;
    }
    bool _2329 = _2309.y == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2329)
    {
        _2367 = _2322;
        _2369 = _2324;
        _2371 = _2326;
    }
    else
    {
        uint _2537 = _2238 + 7u;
        float _2553 = (dot(vec3(cbLight._m0[_2238 + 3u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2554 = _2553 * _2553;
        float _4619 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2555 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2556 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2367 = (((cbLight._m0[_2537].x * 0.3183098733425140380859375) * _2555) * _2556) + _2322;
        _2369 = (((cbLight._m0[_2537].y * 0.3183098733425140380859375) * _2555) * _2556) + _2324;
        _2371 = (((cbLight._m0[_2537].z * 0.3183098733425140380859375) * _2555) * _2556) + _2326;
    }
    uint _2374 = _2238 + 8u;
    float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _993) * 0.949999988079071044921875);
    float _2388 = _2387 * _2387;
    float _2389 = cbLight._m0[_2238].x + _1069;
    float _2390 = cbLight._m0[_2238].y + _1070;
    float _2391 = cbLight._m0[_2238].z + _1071;
    float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
    float _2396 = _2395 * _2389;
    float _2397 = _2395 * _2390;
    float _2398 = _2395 * _2391;
    float _2399 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2238].xyz));
    float _4635 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _4646 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _2403 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2404 = dot(vec3(_990, _991, _992), vec3(_2396, _2397, _2398));
    float _4657 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2407 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2408 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2396, _2397, _2398));
    float _4668 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2412 = _2388 * _2388;
    float _2416 = ((_2407 * _2407) * (_2412 + (-1.0))) + 1.0;
    float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
    float _2425 = 0.959999978542327880859375 - _1148;
    float _2427 = 0.959999978542327880859375 - _1149;
    float _2428 = 0.959999978542327880859375 - _1150;
    float _2435 = 1.0 - _2388;
    float _2446 = (0.5 / (((_2403 * ((_2402 * _2435) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2403 * _2435) + _2388) * _2402))) * _2402;
    float _4679 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2412 / ((_2416 * _2416) * 3.141590118408203125));
    uint _2459 = _2238 + 9u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _993) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2275].x + _1069;
    float _2473 = cbLight._m0[_2275].y + _1070;
    float _2474 = cbLight._m0[_2275].z + _1071;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2275].xyz));
    float _4690 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2486 = dot(vec3(_990, _991, _992), vec3(_2479, _2480, _2481));
    float _4701 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _2490 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2479, _2480, _2481));
    float _4712 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = _2471 * _2471;
    float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
    float _2505 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
    float _2512 = 1.0 - _2471;
    float _2522 = (0.5 / (((_2403 * ((_2485 * _2512) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2403 * _2512) + _2471) * _2485))) * _2485;
    float _4723 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2524 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
    float _2534 = (((((_2505 * _2425) + _1151) * cbLight._m0[_2459].x) * _2524) * _2261) + (((((_2424 * _2425) + _1151) * cbLight._m0[_2374].x) * _2448) * _2271);
    float _2535 = (((((_2505 * _2427) + _1153) * cbLight._m0[_2459].y) * _2524) * _2261) + (((((_2424 * _2427) + _1153) * cbLight._m0[_2374].y) * _2448) * _2271);
    float _2536 = (((((_2505 * _2428) + _1154) * cbLight._m0[_2459].z) * _2524) * _2261) + (((((_2424 * _2428) + _1154) * cbLight._m0[_2374].z) * _2448) * _2271);
    float _2598;
    float _2600;
    float _2602;
    if (_2311)
    {
        _2598 = _2534;
        _2600 = _2535;
        _2602 = _2536;
    }
    else
    {
        uint _2604 = _2238 + 2u;
        uint _2608 = _2238 + 10u;
        float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2604].w)) * _993) * 0.949999988079071044921875);
        float _2623 = _2622 * _2622;
        float _2624 = cbLight._m0[_2604].x + _1069;
        float _2625 = cbLight._m0[_2604].y + _1070;
        float _2626 = cbLight._m0[_2604].z + _1071;
        float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
        float _2631 = _2630 * _2624;
        float _2632 = _2630 * _2625;
        float _2633 = _2630 * _2626;
        float _2634 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2604].xyz));
        float _4734 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2638 = dot(vec3(_990, _991, _992), vec3(_2631, _2632, _2633));
        float _4745 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2642 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_2631, _2632, _2633));
        float _4756 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2646 = _2623 * _2623;
        float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
        float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0);
        float _2664 = 1.0 - _2623;
        float _2674 = (0.5 / (((_2403 * ((_2637 * _2664) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2403 * _2664) + _2623) * _2637))) * _2637;
        float _4767 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2253 : (isnan(_2253) ? 1.0 : min(_2253, 1.0));
        _2598 = (((((_2657 * _2425) + _1151) * cbLight._m0[_2608].x) * _2676) * _2677) + _2534;
        _2600 = (((((_2657 * _2427) + _1153) * cbLight._m0[_2608].y) * _2676) * _2677) + _2535;
        _2602 = (((((_2657 * _2428) + _1154) * cbLight._m0[_2608].z) * _2676) * _2677) + _2536;
    }
    float _2712;
    float _2714;
    float _2716;
    if (_2329)
    {
        _2712 = _2598;
        _2714 = _2600;
        _2716 = _2602;
    }
    else
    {
        uint _2723 = _2238 + 3u;
        uint _2727 = _2238 + 11u;
        float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2723].w)) * _993) * 0.949999988079071044921875);
        float _2742 = _2741 * _2741;
        float _2743 = cbLight._m0[_2723].x + _1069;
        float _2744 = cbLight._m0[_2723].y + _1070;
        float _2745 = cbLight._m0[_2723].z + _1071;
        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
        float _2750 = _2749 * _2743;
        float _2751 = _2749 * _2744;
        float _2752 = _2749 * _2745;
        float _2753 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2723].xyz));
        float _4783 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2757 = dot(vec3(_990, _991, _992), vec3(_2750, _2751, _2752));
        float _4794 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2761 = dot(vec3(cbLight._m0[_2723].xyz), vec3(_2750, _2751, _2752));
        float _4805 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2765 = _2742 * _2742;
        float _2769 = ((_2760 * _2760) * (_2765 + (-1.0))) + 1.0;
        float _2776 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2783 = 1.0 - _2742;
        float _2793 = (0.5 / (((_2403 * ((_2756 * _2783) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2403 * _2783) + _2742) * _2756))) * _2756;
        float _4816 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2795 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2765 / ((_2769 * _2769) * 3.141590118408203125));
        float _2796 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
        _2712 = (((((_2776 * _2425) + _1151) * cbLight._m0[_2727].x) * _2795) * _2796) + _2598;
        _2714 = (((((_2776 * _2427) + _1153) * cbLight._m0[_2727].y) * _2795) * _2796) + _2600;
        _2716 = (((((_2776 * _2428) + _1154) * cbLight._m0[_2727].z) * _2795) * _2796) + _2602;
    }
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_2236.y == 0u)
    {
        float _2871 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2872 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2871;
        float _2873 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2871;
        float _2874 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2871;
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.x;
        uint _2898 = uint((float(_2886.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1090) / _2887))) + floor(float(uint(cbSceneParam._m0[85u].x * _1089) / _2887)));
        float _2908 = (log2(_2874 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2909 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        uint _2912 = uint(isnan(14.0) ? _2909 : (isnan(_2909) ? 14.0 : min(_2909, 14.0)));
        uvec4 _2917 = texelFetch(g_lightClusterGridBuffer, int(((_2912 << 2u) + (_2898 << 6u)) >> 2u));
        uint _2918 = _2917.x;
        uint _2919 = _2886.z;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((((1u << ((_2919 >> 4u) & 15u)) + 4294967295u) & _2918) == 0u) || ((_2919 & 240u) == 0u))
        {
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
        }
        else
        {
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            uint _3178 = 0u;
            uint _3187;
            bool _3188;
            for (;;)
            {
                _3187 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                _3188 = _3187 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3188)
                {
                    frontier_phi_66_pred = _3172;
                    frontier_phi_66_pred_1 = _3177;
                    frontier_phi_66_pred_2 = _3176;
                    frontier_phi_66_pred_3 = _3175;
                    frontier_phi_66_pred_4 = _3174;
                    frontier_phi_66_pred_5 = _3173;
                }
                else
                {
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    uint _3323;
                    _3317 = _3172;
                    _3318 = _3173;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3187;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    for (;;)
                    {
                        uint _3327 = uint(findLSB(_3323)) + (_3178 << 5u);
                        uint _3324 = (_3323 + 4294967295u) & _3323;
                        uint _3329 = _3327 * 48u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3349 = (_3327 * 48u) + 4u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3368 = (_3327 * 48u) + 8u;
                        vec3 _3379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x));
                        float _3383 = _3343.x - _2872;
                        float _3384 = _3343.y - _2873;
                        float _3385 = _3343.z - _2874;
                        float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                        float _3389 = inversesqrt(_3386);
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3393 = dot(vec3(_1108, _1111, _1114), vec3(_3390, _3391, _3392));
                        float _3398 = 1.0 - (_3386 * _3343.w);
                        float _4842 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3400 = sqrt(_3386) * _3362.w;
                        float _3403 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3393) + _3404;
                        float _3410 = _3400 * _3400;
                        float _3414 = ((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3399) / ((_3410 * 0.699999988079071044921875) + 1.0);
                        float _3418 = (-0.0) - _2872;
                        float _3419 = (-0.0) - _2873;
                        float _3420 = (-0.0) - _2874;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3435 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                        float _3436 = 1.0 - _1183;
                        float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                        float _3444 = _3443 * _3443;
                        float _3445 = _3444 * _3444;
                        float _3446 = _3425 + _3390;
                        float _3447 = _3426 + _3391;
                        float _3448 = _3427 + _3392;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3456 = dot(vec3(_1108, _1111, _1114), vec3(_3425, _3426, _3427));
                        float _4858 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3460 = dot(vec3(_1108, _1111, _1114), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                        float _4869 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                        float _3468 = _3403 * _3444;
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3393) + _3469;
                        float _4880 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                        float _3474 = 1.0 - _3444;
                        float _3484 = (0.5 / (((_3473 * ((_3459 * _3474) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3444) * _3459))) * _3473;
                        float _4891 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3495 = (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3467 * _3467) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125))) * _3399;
                        _3247 = (_3414 * _3362.x) + _3320;
                        _3248 = (_3414 * _3362.y) + _3321;
                        _3249 = (_3414 * _3362.z) + _3322;
                        _3244 = (_3495 * _3379.x) + _3317;
                        _3245 = (_3495 * _3379.y) + _3318;
                        _3246 = (_3495 * _3379.z) + _3319;
                        if (_3324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3317 = _3244;
                            _3318 = _3245;
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3324;
                        }
                    }
                    frontier_phi_66_pred = _3244;
                    frontier_phi_66_pred_1 = _3249;
                    frontier_phi_66_pred_2 = _3248;
                    frontier_phi_66_pred_3 = _3247;
                    frontier_phi_66_pred_4 = _3246;
                    frontier_phi_66_pred_5 = _3245;
                }
                _3020 = frontier_phi_66_pred;
                _3030 = frontier_phi_66_pred_1;
                _3028 = frontier_phi_66_pred_2;
                _3026 = frontier_phi_66_pred_3;
                _3024 = frontier_phi_66_pred_4;
                _3022 = frontier_phi_66_pred_5;
                uint _3179 = _3178 + 1u;
                if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3172 = _3020;
                    _3173 = _3022;
                    _3174 = _3024;
                    _3175 = _3026;
                    _3176 = _3028;
                    _3177 = _3030;
                    _3178 = _3179;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
        }
        uvec4 _3033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3034 = _3033.z;
        uint _3036 = (_3034 >> 8u) & 15u;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        if (((4294967295u << _3036) & _2918) == 0u)
        {
            _3140 = _3019;
            _3142 = _3021;
            _3144 = _3023;
            _3146 = _3025;
            _3148 = _3027;
            _3150 = _3029;
        }
        else
        {
            float _3165 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
            float _3166 = _3165 * _2872;
            float _3167 = _3165 * _2873;
            float _3168 = _3165 * _2874;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3036 < ((_3034 >> 12u) & 15u))
            {
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3300 = _3019;
                float _3301 = _3021;
                float _3302 = _3023;
                float _3303 = _3025;
                float _3304 = _3027;
                float _3305 = _3029;
                uint _3306 = _3036;
                uint _3315;
                bool _3316;
                for (;;)
                {
                    _3315 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                    _3316 = _3315 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3316)
                    {
                        frontier_phi_77_pred = _3305;
                        frontier_phi_77_pred_1 = _3304;
                        frontier_phi_77_pred_2 = _3303;
                        frontier_phi_77_pred_3 = _3302;
                        frontier_phi_77_pred_4 = _3301;
                        frontier_phi_77_pred_5 = _3300;
                    }
                    else
                    {
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3522 = _3300;
                        float _3523 = _3301;
                        float _3524 = _3302;
                        float _3525 = _3303;
                        float _3526 = _3304;
                        float _3527 = _3305;
                        uint _3528 = _3315;
                        uint _3529;
                        vec4 _3554;
                        float _3555;
                        vec4 _3570;
                        vec3 _3582;
                        vec4 _3597;
                        vec4 _3612;
                        float _3658;
                        bool _3659;
                        for (;;)
                        {
                            uint _3539 = ((_3306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3528));
                            _3529 = (_3528 + 4294967295u) & _3528;
                            uint _3541 = _3539 * 40u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            _3555 = _3554.w;
                            uint _3557 = (_3539 * 40u) + 4u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3539 * 40u) + 8u;
                            _3582 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x));
                            uint _3584 = (_3539 * 40u) + 16u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3539 * 40u) + 20u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3539 * 40u) + 24u;
                            vec4 _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3633 = (_3539 * 40u) + 28u;
                            vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            _3658 = fma(_2874, _3646.z, fma(_2873, _3646.y, _3646.x * _2872)) + _3646.w;
                            _3659 = !((fma(_2874, _3627.z, fma(_2873, _3627.y, _3627.x * _2872)) + _3627.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3659)
                            {
                                float _3686 = _3554.x - _2872;
                                float _3687 = _3554.y - _2873;
                                float _3688 = _3554.z - _2874;
                                float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                                float _3692 = inversesqrt(_3689);
                                float _3693 = _3692 * _3686;
                                float _3694 = _3692 * _3687;
                                float _3695 = _3692 * _3688;
                                float _3699 = 1.0 - (_3689 / (_3555 * _3555));
                                float _4902 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3704 = sqrt(_3689) * _3570.w;
                                float _3706 = 1.39999997615814208984375 / (_3704 + 1.39999997615814208984375);
                                float _3707 = _3706 * _3706;
                                float _3710 = ((1.0 - _3707) * dot(vec3(_3693, _3694, _3695), vec3(_1108, _1111, _1114))) + _3707;
                                float _3713 = _3704 * _3704;
                                float _3717 = (fma(_2874, _3597.z, fma(_2873, _3597.y, _3597.x * _2872)) + _3597.w) / _3658;
                                float _3718 = (fma(_2874, _3612.z, fma(_2873, _3612.y, _3612.x * _2872)) + _3612.w) / _3658;
                                float _3722 = 1.0 - dot(vec2(_3717, _3718), vec2(_3717, _3718));
                                float _4918 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3724 = _3723 * (((isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0))) * _3700) / ((_3713 * 0.699999988079071044921875) + 1.0));
                                float _3736 = exp2(log2(1.0 / ((_3713 * 3.5) + 5.0)) * 0.25);
                                float _3737 = 1.0 - _1183;
                                float _3744 = sqrt(1.0 - ((1.0 - (_3737 * _3737)) * (1.0 - (_3736 * _3736))));
                                float _3745 = _3744 * _3744;
                                float _3746 = _3745 * _3745;
                                float _3747 = _3693 - _3166;
                                float _3748 = _3694 - _3167;
                                float _3749 = _3695 - _3168;
                                float _3753 = inversesqrt(dot(vec3(_3747, _3748, _3749), vec3(_3747, _3748, _3749)));
                                float _3757 = dot(vec3(_1108, _1111, _1114), vec3((-0.0) - _3166, (-0.0) - _3167, (-0.0) - _3168));
                                float _4929 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3760 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3761 = dot(vec3(_1108, _1111, _1114), vec3(_3753 * _3747, _3753 * _3748, _3753 * _3749));
                                float _4940 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3764 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3768 = ((_3764 * _3764) * (_3746 + (-1.0))) + 1.0;
                                float _3769 = _3706 * _3745;
                                float _3770 = _3769 * _3769;
                                float _3776 = ((1.0 - _3770) * dot(vec3(_1108, _1111, _1114), vec3(_3693, _3694, _3695))) + _3770;
                                float _4951 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3778 = 1.0 - _3745;
                                float _3788 = (0.5 / (((_3777 * ((_3760 * _3778) + _3745)) + 9.9999999392252902907785028219223e-09) + (((_3777 * _3778) + _3745) * _3760))) * _3777;
                                float _4962 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3798 = (_3723 * _3700) * (((_3746 * 3.1415927410125732421875) * (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) / ((_3768 * _3768) * ((_3713 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3724 * _3570.y;
                                frontier_phi_83_pred_1 = _3724 * _3570.x;
                                frontier_phi_83_pred_2 = _3798 * _3582.z;
                                frontier_phi_83_pred_3 = _3798 * _3582.y;
                                frontier_phi_83_pred_4 = _3798 * _3582.x;
                                frontier_phi_83_pred_5 = _3724 * _3570.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3806 = frontier_phi_83_pred;
                            _3805 = frontier_phi_83_pred_1;
                            _3804 = frontier_phi_83_pred_2;
                            _3803 = frontier_phi_83_pred_3;
                            _3802 = frontier_phi_83_pred_4;
                            _3807 = frontier_phi_83_pred_5;
                            _3512 = _3805 + _3525;
                            _3513 = _3806 + _3526;
                            _3514 = _3807 + _3527;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            if (_3529 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3529;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3514;
                        frontier_phi_77_pred_1 = _3513;
                        frontier_phi_77_pred_2 = _3512;
                        frontier_phi_77_pred_3 = _3511;
                        frontier_phi_77_pred_4 = _3510;
                        frontier_phi_77_pred_5 = _3509;
                    }
                    _3151 = frontier_phi_77_pred;
                    _3149 = frontier_phi_77_pred_1;
                    _3147 = frontier_phi_77_pred_2;
                    _3145 = frontier_phi_77_pred_3;
                    _3143 = frontier_phi_77_pred_4;
                    _3141 = frontier_phi_77_pred_5;
                    uint _3307 = _3306 + 1u;
                    if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3300 = _3141;
                        _3301 = _3143;
                        _3302 = _3145;
                        _3303 = _3147;
                        _3304 = _3149;
                        _3305 = _3151;
                        _3306 = _3307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3145;
                frontier_phi_58_59_ladder_1 = _3151;
                frontier_phi_58_59_ladder_2 = _3149;
                frontier_phi_58_59_ladder_3 = _3147;
                frontier_phi_58_59_ladder_4 = _3143;
                frontier_phi_58_59_ladder_5 = _3141;
            }
            else
            {
                frontier_phi_58_59_ladder = _3023;
                frontier_phi_58_59_ladder_1 = _3029;
                frontier_phi_58_59_ladder_2 = _3027;
                frontier_phi_58_59_ladder_3 = _3025;
                frontier_phi_58_59_ladder_4 = _3021;
                frontier_phi_58_59_ladder_5 = _3019;
            }
            _3140 = frontier_phi_58_59_ladder_5;
            _3142 = frontier_phi_58_59_ladder_4;
            _3144 = frontier_phi_58_59_ladder;
            _3146 = frontier_phi_58_59_ladder_3;
            _3148 = frontier_phi_58_59_ladder_2;
            _3150 = frontier_phi_58_59_ladder_1;
        }
        float _3155 = isnan(1.0) ? _1167 : (isnan(_1167) ? 1.0 : min(_1167, 1.0));
        _2931 = (_3155 * _3146) + _2367;
        _2933 = (_3155 * _3148) + _2369;
        _2935 = (_3155 * _3150) + _2371;
        _2937 = ((_3140 * _1151) * _3155) + _2712;
        _2939 = ((_3142 * _1153) * _3155) + _2714;
        _2941 = ((_3144 * _1154) * _3155) + _2716;
    }
    else
    {
        _2931 = _2367;
        _2933 = _2369;
        _2935 = _2371;
        _2937 = _2712;
        _2939 = _2714;
        _2941 = _2716;
    }
    float _4978 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _4989 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _5000 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _2958 = ((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2931 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1167))) + ((_2937 + ((isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0))) * _2005)) * cbPerFrame._m0[3u].x);
    float _2959 = ((isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_2933 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1167))) + ((_2939 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _2005)) * cbPerFrame._m0[3u].x);
    float _2960 = ((isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_2935 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1167))) + ((_2941 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2005)) * cbPerFrame._m0[3u].x);
    uint _2961 = _293 + 6u;
    float _2969 = _1089 / cbSceneParam._m0[86u].x;
    float _2970 = _1090 / cbSceneParam._m0[86u].y;
    vec4 _2984 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, (log2((isnan(cbSceneParam._m0[77u].w) ? _1012 : (isnan(_1012) ? cbSceneParam._m0[77u].w : min(_1012, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2986 = _2984.x;
    float _2987 = _2984.y;
    float _2988 = _2984.z;
    float _2989 = _2984.w;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_1012 > cbSceneParam._m0[78u].w)
    {
        float _3044 = isnan(_1012) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1012 : min(cbSceneParam._m0[80u].w, _1012));
        float _3045 = _3044 / _1012;
        float _3056 = _3045 * _1062;
        float _3057 = _1063 * _3045;
        float _3058 = (-0.0) - _3057;
        float _3060 = _3045 * _1064;
        float _3062 = (cbSceneParam._m0[77u].w * _3058) / _3044;
        float _3063 = _3062 + cbSceneParam._m0[79u].w;
        float _3064 = cbSceneParam._m0[79u].w - _3057;
        float _3070 = sqrt(((_3056 * _3056) + (_3057 * _3057)) + (_3060 * _3060));
        float _3073 = (1.0 - (cbSceneParam._m0[77u].w / _3044)) * _3070;
        float _3078 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3080 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3257;
        if (abs((_3058 - _3062) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3257 = ((((_3063 > 0.0) ? exp2(_3078 * _3063) : (2.0 - exp2(_3080 * _3063))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3073;
        }
        else
        {
            float _3201 = 1.0 / cbSceneParam._m0[80u].x;
            float _3202 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : max(_3063, _3064));
            float _3203 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : min(_3063, _3064));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            float _3213 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : min(_3203, 0.0));
            _3257 = ((abs(_3070 / _3058) * cbSceneParam._m0[80u].y) * ((((_3212 - _3213) * 2.0) - ((exp2(_3078 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0)))) - exp2(_3078 * (isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))))) * _3201)) - ((exp2(_3080 * _3212) - exp2(_3080 * _3213)) * _3201))) + (_3073 * cbSceneParam._m0[80u].z);
        }
        vec4 _3259 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, 1.0), 0.0);
        float _3268 = exp2((_3257 * (-1.44269502162933349609375)) * (1.0 - _3259.w));
        float _3269 = log2(_3268);
        float _3285 = log2(_2989);
        _3082 = (exp2(_3285 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].x)) * _3259.x) / cbSceneParam._m0[78u].x)) + _2986;
        _3084 = (exp2(_3285 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].y)) * _3259.y) / cbSceneParam._m0[78u].y)) + _2987;
        _3086 = (exp2(_3285 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].z)) * _3259.z) / cbSceneParam._m0[78u].z)) + _2988;
        _3088 = _3268 * _2989;
    }
    else
    {
        _3082 = _2986;
        _3084 = _2987;
        _3086 = _2988;
        _3088 = _2989;
    }
    bool _3295;
    vec4 _3098;
    vec4 _3120;
    float _3122;
    float _3126;
    float _3127;
    float _3128;
    float _3129;
    bool _3139;
    for (;;)
    {
        _3098 = cbMatDynParam._m0[0u];
        float _3100 = roundEven(_3098.y);
        bool _3101 = _3100 == 3.0;
        float _3102 = log2(_3088);
        float _3109 = exp2(_3102 * cbSceneParam._m0[78u].x) * _2958;
        float _3110 = exp2(_3102 * cbSceneParam._m0[78u].y) * _2959;
        float _3111 = exp2(_3102 * cbSceneParam._m0[78u].z) * _2960;
        float _3118 = _1078 + (-0.5);
        _3120 = cbMtdParam._m0[1u];
        _3122 = _3120.y * _3118;
        float _3125 = (_3100 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3126 = _3125 * (_3101 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3082)));
        _3127 = _3125 * (_3101 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
        _3128 = _3125 * (_3101 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
        _3129 = _3118 * 0.999000012874603271484375;
        _3139 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3139)
        {
            if ((cbInstanceData._m0[_293 + 7u].x + _3129) < 0.5)
            {
                _3295 = true;
                break;
            }
        }
        uint _3236 = _1127 + uint(_3098.w);
        if ((cbInstanceData._m0[_3236].w < 1.0) && ((cbInstanceData._m0[_3236].w + _3129) < 0.5))
        {
            _3295 = true;
            break;
        }
        if ((_3122 + 1.0) < _3120.x)
        {
            _3295 = true;
            break;
        }
        _3295 = false;
        break;
    }
    float _3500;
    if (_3295)
    {
        discard_state = true;
        _3500 = 0.0;
    }
    else
    {
        _3500 = cbInstanceData._m0[_2961].w;
    }
    SV_Target.x = _3126;
    SV_Target.y = _3127;
    SV_Target.z = _3128;
    SV_Target.w = _3500;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2961].w;
    discard_exit();
}


