#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1415;
float _4076;
float _4077;
float _4078;
float _4079;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _366.x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[23u].w) + _416) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4088 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _441 = (_434 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _442 = (_434 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _443 = (_434 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _460 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _480 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _482 = _480.x;
    float _492 = dot(vec4(_482, _480.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _506 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _366.y) * 2.0) - ((((_482 - _492) * cbMtdParam._m0[23u].w) + _492) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4099 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _520 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_507 * ((_460.x * cbMtdParam._m0[13u].x) - _441)) + _441);
    float _523 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_507 * ((_460.y * cbMtdParam._m0[13u].y) - _442)) + _442);
    float _526 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_507 * ((_460.z * cbMtdParam._m0[13u].z) - _443)) + _443);
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _584 = _582.x;
    float _585 = _582.y;
    float _586 = _582.z;
    float _593 = ((_565.x - _584) * _434) + _584;
    float _594 = ((_565.y - _585) * _434) + _585;
    float _595 = ((_565.z - _586) * _434) + _586;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _620 = ((_607.z - _595) * _507) + _595;
    float _623 = ((((_607.x - _593) * _507) + _593) * 2.0) + (-1.0);
    float _625 = ((((_607.y - _594) * _507) + _594) * 2.0) + (-1.0);
    float _626 = dot(vec2(_623, _625), vec2(_623, _625));
    float _4110 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _672 = _670.x;
    float _673 = 1.0 - _672;
    float _689 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_672 - _673) * cbMtdParam._m0[24u].z) + _673) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4121 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _697 = (_690 * ((_545.x * cbMtdParam._m0[18u].x) - _520)) + _520;
    float _698 = (_690 * ((_545.y * cbMtdParam._m0[18u].y) - _523)) + _523;
    float _699 = (_690 * ((_545.z * cbMtdParam._m0[18u].z) - _526)) + _526;
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _727 = _725.x;
    float _744 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _727) * _434) + _727;
    float _761 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _744) * _507) + _744;
    float _765 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _761) * cbMtdParam._m0[19u].z) + _761;
    float _767 = _765 - (_765 * _690);
    float _771 = (cbMtdParam._m0[19u].w * (_645.z - _620)) + _620;
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _791 = (_784.x * 2.0) + (-1.0);
    float _792 = (_784.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _4132 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _801 = (_690 * (_784.z - _771)) + _771;
    float _804 = (((_645.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _623;
    float _805 = (((_645.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _625;
    float _817 = (((_791 - _804) + (cbMtdParam._m0[21u].x * _804)) * _690) + _804;
    float _818 = (((_792 - _805) + (cbMtdParam._m0[21u].x * _805)) * _690) + _805;
    float _819 = (_690 * (sqrt(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) - _631)) + _631;
    float _821 = cbMtdParam._m0[22u].x + _645.w;
    float _824 = fma(_819, _243 * NORMAL.x, fma(_818, _250 * TANGENT.x, (_236 * _228) * _817));
    float _827 = fma(_819, _243 * NORMAL.y, fma(_818, _250 * TANGENT.y, (_236 * _229) * _817));
    float _830 = fma(_819, _243 * NORMAL.z, fma(_818, _250 * TANGENT.z, (_236 * _230) * _817));
    float _834 = inversesqrt(dot(vec3(_824, _827, _830), vec3(_824, _827, _830)));
    float _835 = _834 * _824;
    float _836 = _834 * _827;
    float _837 = _834 * _830;
    float _4143 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _838 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4165 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _4176 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _4187 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4198 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _843 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _857 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _908 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _898);
    float _909 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _898);
    float _910 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _898);
    float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
    float _915 = _908 * _914;
    float _916 = _909 * _914;
    float _917 = _910 * _914;
    vec4 _922 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _924 = _922.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1096 = sqrt(((_908 * _908) + (_909 * _909)) + (_910 * _910));
        float _1102 = (cbMatDynParam._m0[5u].x * _1096) + cbMatDynParam._m0[5u].y;
        float _4209 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1107 = (cbMatDynParam._m0[5u].z * _1096) + cbMatDynParam._m0[5u].w;
        float _4220 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) - _1103)) + _1103) < ((_924 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _935 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _936 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _954 = fma(_837, cbSceneParam._m0[5u].z, fma(_836, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _835));
    float _957 = fma(_837, cbSceneParam._m0[6u].z, fma(_836, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _835));
    float _960 = fma(_837, cbSceneParam._m0[7u].z, fma(_836, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _835));
    uint _973 = _256 + 9u;
    uint _974 = _973 + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_974].z;
    float _4231 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _986 = 1.0 - _843;
    float _987 = _983 * _986;
    float _988 = _984 * _986;
    float _989 = _985 * _986;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _843;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _843;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _843;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _935, cbSceneParam._m0[86u].y * _936));
    float _1013 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * TEXCOORD_5.w) * _1009.x;
    float _1014 = dot(vec3(_835, _836, _837), vec3(_915, _916, _917));
    float _1017 = _1014 * 2.0;
    float _1021 = (_1017 * _835) - _915;
    float _1022 = (_1017 * _836) - _916;
    float _1023 = (_1017 * _837) - _917;
    float _1027 = abs(dot(vec3(_915, _916, _917), vec3(_835, _836, _837)));
    float _4264 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1029 = sqrt(_838);
    float _1042 = exp2((_1029 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1029 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1029 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1029;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1414;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1139 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1143 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1147 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1172 = _1077 + _835;
        float _1173 = _1081 + _836;
        float _1174 = _1085 + _837;
        float _1184 = fma(_1174, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172)) - _1139;
        float _1185 = fma(_1174, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172)) - _1143;
        float _1186 = fma(_1174, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172)) - _1147;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1139 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1143 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[34u].z) + ((((((_1147 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1242 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1208.x + (-0.5));
        float _1244 = _1242 * (_1208.y + (-0.5));
        float _1245 = _1242 * (_1208.z + (-0.5));
        float _1252 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1215.x + (-0.5));
        float _1254 = _1252 * (_1215.y + (-0.5));
        float _1255 = _1252 * (_1215.z + (-0.5));
        float _1262 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1222.x + (-0.5));
        float _1264 = _1262 * (_1222.y + (-0.5));
        float _1265 = _1262 * (_1222.z + (-0.5));
        float _1272 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1229.x + (-0.5));
        float _1274 = _1272 * (_1229.y + (-0.5));
        float _1275 = _1272 * (_1229.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1296 = (dot(vec3(_835, _836, _837), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1306 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4312 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1308 + 1.0))) + _1313) * _1276;
        float _1323 = _1244 * 0.5;
        float _1324 = _1254 * 0.5;
        float _1325 = _1264 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_835, _836, _837), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4345 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1350 + 1.0))) + _1355) * _1277;
        float _1365 = _1245 * 0.5;
        float _1366 = _1255 * 0.5;
        float _1367 = _1265 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_835, _836, _837), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4378 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1392 + 1.0))) + _1397) * _1278;
        _1414 = _1245;
        _1416 = _1244;
        _1417 = _1243;
        _1418 = _1255;
        _1419 = _1254;
        _1420 = _1253;
        _1421 = _1265;
        _1422 = _1264;
        _1423 = _1263;
        _1424 = _1278;
        _1425 = _1277;
        _1426 = _1276;
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1415;
        _1416 = _1415;
        _1417 = _1415;
        _1418 = _1415;
        _1419 = _1415;
        _1420 = _1415;
        _1421 = _1415;
        _1422 = _1415;
        _1423 = _1415;
        _1424 = _1415;
        _1425 = _1415;
        _1426 = _1415;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1456 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1460 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1464 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1487 = _1077 + _835;
        float _1488 = _1081 + _836;
        float _1489 = _1085 + _837;
        float _1499 = fma(_1489, cbModelParam._m0[30u].z, fma(_1488, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1487)) - _1456;
        float _1500 = fma(_1489, cbModelParam._m0[31u].z, fma(_1488, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1487)) - _1460;
        float _1501 = fma(_1489, cbModelParam._m0[32u].z, fma(_1488, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1487)) - _1464;
        float _1505 = inversesqrt(dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501)));
        float _1518 = ((_1505 * _1499) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1456 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1505 * _1500) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1460 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1520 = ((_1505 * _1501) / cbModelParam._m0[35u].z) + ((((((_1464 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1518, _1519, _1520), 0.0);
        float _1555 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1522.x + (-0.5));
        float _1557 = _1555 * (_1522.y + (-0.5));
        float _1558 = _1555 * (_1522.z + (-0.5));
        float _1565 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1529.x + (-0.5));
        float _1567 = _1565 * (_1529.y + (-0.5));
        float _1568 = _1565 * (_1529.z + (-0.5));
        float _1575 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1536.x + (-0.5));
        float _1577 = _1575 * (_1536.y + (-0.5));
        float _1578 = _1575 * (_1536.z + (-0.5));
        float _1585 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1543.x + (-0.5));
        float _1587 = _1585 * (_1543.y + (-0.5));
        float _1588 = _1585 * (_1543.z + (-0.5));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1592 = _1556 * 0.5;
        float _1593 = _1566 * 0.5;
        float _1594 = _1576 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_835, _836, _837), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4419 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4430 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4441 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_1619 + 1.0))) + _1624) * _1589;
        float _1634 = _1557 * 0.5;
        float _1635 = _1567 * 0.5;
        float _1636 = _1577 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_835, _836, _837), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4452 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4463 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4474 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_1661 + 1.0))) + _1666) * _1590;
        float _1676 = _1558 * 0.5;
        float _1677 = _1568 * 0.5;
        float _1678 = _1578 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_835, _836, _837), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4485 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1591 + 9.9999997473787516355514526367188e-06);
        float _4496 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4507 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_1703 + 1.0))) + _1708) * _1591;
        _1725 = _1558;
        _1726 = _1557;
        _1727 = _1556;
        _1728 = _1568;
        _1729 = _1567;
        _1730 = _1566;
        _1731 = _1578;
        _1732 = _1577;
        _1733 = _1576;
        _1734 = _1591;
        _1735 = _1590;
        _1736 = _1589;
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1739 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
    }
    else
    {
        _1725 = _1415;
        _1726 = _1415;
        _1727 = _1415;
        _1728 = _1415;
        _1729 = _1415;
        _1730 = _1415;
        _1731 = _1415;
        _1732 = _1415;
        _1733 = _1415;
        _1734 = _1415;
        _1735 = _1415;
        _1736 = _1415;
        _1737 = 0.0;
        _1738 = 0.0;
        _1739 = 0.0;
    }
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1427)) + _1427;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1428)) + _1428;
    float _1751 = (cbModelParam._m0[1u].x * (_1739 - _1429)) + _1429;
    float _1772 = fma(_1751, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1751, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1751, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1749));
    float _1793 = _1021 * 0.5;
    float _1794 = _1022 * 0.5;
    float _1795 = _1023 * 0.5;
    float _1796 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1727, _1730, _1733, _1736));
    float _1799 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1802 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1836;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1809 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1414, _1418, _1421, _1424));
        float _1813 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1817 = dot(vec4(_1793, _1794, _1795, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1824 = dot(vec4(cbModelParam._m0[39u]), vec4(_1793, _1794, _1795, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1847;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1838 = dot(vec4(cbModelParam._m0[40u]), vec4(_1793, _1794, _1795, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1851 = (_1847 * cbModelParam._m0[1u].x) + (_1836 * (1.0 - cbModelParam._m0[1u].x));
    float _1861 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _838);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1861 : min(cbModelParam._m0[25u].z, _1861));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1909 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1913 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1917 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1920 = fma(_1023, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021));
        float _1923 = fma(_1023, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021));
        float _1926 = fma(_1023, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021));
        float _1954;
        if (_1920 > 0.0)
        {
            _1954 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1954 = frontier_phi_17_15_ladder;
        }
        float _2125;
        if (_1923 > 0.0)
        {
            _2125 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2125 = frontier_phi_26_22_ladder;
        }
        float _2420;
        if (_1926 > 0.0)
        {
            _2420 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2420 = frontier_phi_38_33_ladder;
        }
        float _2422 = isnan(_2125) ? _1954 : (isnan(_1954) ? _2125 : min(_1954, _2125));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1920) + _1909;
        float _2428 = (_2423 * _1923) + _1913;
        float _2429 = (_2423 * _1926) + _1917;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2430;
        float _2434 = _2430 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 > _2434) || ((_2428 < _2432) || ((_2427 < _2432) || (_2427 > _2434))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2574 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2429, cbModelParam._m0[9u].z, fma(_2428, cbModelParam._m0[9u].y, _2427 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2429, cbModelParam._m0[10u].z, fma(_2428, cbModelParam._m0[10u].y, _2427 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2429, cbModelParam._m0[11u].z, fma(_2428, cbModelParam._m0[11u].y, _2427 * cbModelParam._m0[11u].x))), _1862);
            frontier_phi_16_38_ladder = _2574.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2574.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2574.x * cbModelParam._m0[1u].y;
        }
        _1942 = frontier_phi_16_38_ladder_2;
        _1944 = frontier_phi_16_38_ladder_1;
        _1946 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1021, _1022, _1023), _1862);
        _1942 = _1930.x * cbModelParam._m0[1u].y;
        _1944 = _1930.y * cbModelParam._m0[1u].y;
        _1946 = _1930.z * cbModelParam._m0[1u].y;
    }
    float _1950 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _838);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1950 : min(cbModelParam._m0[25u].w, _1950));
    float _2040;
    float _2042;
    float _2044;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2004 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _2008 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _2012 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _2015 = fma(_1023, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021));
        float _2018 = fma(_1023, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021));
        float _2021 = fma(_1023, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021));
        float _2130;
        if (_2015 > 0.0)
        {
            _2130 = abs((1.0 - _2004) / _2015);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2004 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2130 = frontier_phi_28_24_ladder;
        }
        float _2447;
        if (_2018 > 0.0)
        {
            _2447 = abs((1.0 - _2008) / _2018);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2008 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2447 = frontier_phi_40_35_ladder;
        }
        float _2785;
        if (_2021 > 0.0)
        {
            _2785 = abs((1.0 - _2012) / _2021);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2012 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2785 = frontier_phi_50_47_ladder;
        }
        float _2787 = isnan(_2447) ? _2130 : (isnan(_2130) ? _2447 : min(_2130, _2447));
        float _2788 = isnan(_2785) ? _2787 : (isnan(_2787) ? _2785 : min(_2787, _2785));
        float _2792 = (_2788 * _2015) + _2004;
        float _2793 = (_2788 * _2018) + _2008;
        float _2794 = (_2788 * _2021) + _2012;
        float _2795 = _2788 * 9.9999997473787516355514526367188e-05;
        float _2796 = (-1.0) - _2795;
        float _2798 = _2795 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2794 > _2798) || ((_2794 < _2796) || ((_2793 > _2798) || ((_2793 < _2796) || ((_2792 < _2796) || (_2792 > _2798))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2794, cbModelParam._m0[17u].z, fma(_2793, cbModelParam._m0[17u].y, _2792 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2794, cbModelParam._m0[18u].z, fma(_2793, cbModelParam._m0[18u].y, _2792 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2794, cbModelParam._m0[19u].z, fma(_2793, cbModelParam._m0[19u].y, _2792 * cbModelParam._m0[19u].x))), _1951);
            frontier_phi_25_50_ladder = _2916.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2916.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2916.x * cbModelParam._m0[1u].z;
        }
        _2040 = frontier_phi_25_50_ladder_2;
        _2042 = frontier_phi_25_50_ladder_1;
        _2044 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1021, _1022, _1023), _1951);
        _2040 = _2024.x * cbModelParam._m0[1u].z;
        _2042 = _2024.y * cbModelParam._m0[1u].z;
        _2044 = _2024.z * cbModelParam._m0[1u].z;
    }
    float _2057 = (((_1048 * _997) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2040 - _1942)) + _1942);
    float _2059 = (((_1048 * _999) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2042 - _1944)) + _1944);
    float _2061 = (((_1048 * _1000) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2044 - _1946)) + _1946);
    float _2064 = fma(_2061, cbSceneParam._m0[89u].z, fma(_2059, cbSceneParam._m0[89u].y, _2057 * cbSceneParam._m0[89u].x));
    float _2067 = fma(_2061, cbSceneParam._m0[90u].z, fma(_2059, cbSceneParam._m0[90u].y, _2057 * cbSceneParam._m0[90u].x));
    float _2070 = fma(_2061, cbSceneParam._m0[91u].z, fma(_2059, cbSceneParam._m0[91u].y, _2057 * cbSceneParam._m0[91u].x));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2117 = _2104 / _2116;
    float _2118 = _2108 / _2116;
    float _2119 = _2112 / _2116;
    float _2266;
    float _2267;
    float _2268;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2146 = ((uint(_2119 > cbSceneParam._m0[59u].y) + uint(_2119 > cbSceneParam._m0[59u].x)) + uint(_2119 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2147 = _2146 + 43u;
        uint _2155 = _2146 + 44u;
        uint _2163 = _2146 + 45u;
        uint _2171 = _2146 + 46u;
        float _2182 = fma(_2116, cbSceneParam._m0[_2147].w, fma(_2112, cbSceneParam._m0[_2147].z, fma(_2108, cbSceneParam._m0[_2147].y, _2104 * cbSceneParam._m0[_2147].x)));
        float _2186 = fma(_2116, cbSceneParam._m0[_2155].w, fma(_2112, cbSceneParam._m0[_2155].z, fma(_2108, cbSceneParam._m0[_2155].y, _2104 * cbSceneParam._m0[_2155].x)));
        float _2194 = fma(_2116, cbSceneParam._m0[_2171].w, fma(_2112, cbSceneParam._m0[_2171].z, fma(_2108, cbSceneParam._m0[_2171].y, _2104 * cbSceneParam._m0[_2171].x)));
        float _2199 = cbSceneParam._m0[33u].z * _2194;
        float _2201 = cbSceneParam._m0[33u].w * _2194;
        float _2204 = fma(_2116, cbSceneParam._m0[_2163].w, fma(_2112, cbSceneParam._m0[_2163].z, fma(_2108, cbSceneParam._m0[_2163].y, _2104 * cbSceneParam._m0[_2163].x))) / _2194;
        float _2252 = (cbSceneParam._m0[33u].x - sqrt(((_2118 * _2118) + (_2117 * _2117)) + (_2119 * _2119))) * cbSceneParam._m0[33u].y;
        float _4633 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2259 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2199 + _2182) / _2194, (_2201 + _2186) / _2194), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2201 + _2182) / _2194, (_2186 - _2199) / _2194), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 - _2199) / _2194, (_2186 - _2201) / _2194), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2182 - _2201) / _2194, (_2199 + _2186) / _2194), _2204), 0.0)).x), vec4(0.25)));
        _2266 = 1.0 - (_2259 * cbSceneParam._m0[34u].x);
        _2267 = 1.0 - (_2259 * cbSceneParam._m0[34u].y);
        _2268 = 1.0 - (_2259 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2266 = 1.0;
        _2267 = 1.0;
        _2268 = 1.0;
    }
    float _2332;
    float _2334;
    float _2336;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2320 = fma(_2116, cbSceneParam._m0[63u].w, fma(_2112, cbSceneParam._m0[63u].z, fma(_2108, cbSceneParam._m0[63u].y, _2104 * cbSceneParam._m0[63u].x)));
        float _2321 = fma(_2116, cbSceneParam._m0[60u].w, fma(_2112, cbSceneParam._m0[60u].z, fma(_2108, cbSceneParam._m0[60u].y, _2104 * cbSceneParam._m0[60u].x))) / _2320;
        float _2322 = fma(_2116, cbSceneParam._m0[61u].w, fma(_2112, cbSceneParam._m0[61u].z, fma(_2108, cbSceneParam._m0[61u].y, _2104 * cbSceneParam._m0[61u].x))) / _2320;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2321 >= cbSceneParam._m0[64u].x) && (_2322 >= cbSceneParam._m0[64u].y)) && (_2321 <= cbSceneParam._m0[64u].z)) && (_2322 <= cbSceneParam._m0[64u].w))
        {
            float _2460 = fma(_2116, cbSceneParam._m0[62u].w, fma(_2112, cbSceneParam._m0[62u].z, fma(_2108, cbSceneParam._m0[62u].y, _2104 * cbSceneParam._m0[62u].x))) / _2320;
            float _2464 = isnan(cbSceneParam._m0[41u].w) ? _2460 : (isnan(_2460) ? cbSceneParam._m0[41u].w : max(_2460, cbSceneParam._m0[41u].w));
            float _2507 = (cbSceneParam._m0[33u].x - sqrt(((_2118 * _2118) + (_2117 * _2117)) + (_2119 * _2119))) * cbSceneParam._m0[33u].y;
            float _4649 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
            float _2514 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2321, cbSceneParam._m0[33u].w + _2322), _2464), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2321, _2322 - cbSceneParam._m0[33u].z), _2464), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2321 - cbSceneParam._m0[33u].z, _2322 - cbSceneParam._m0[33u].w), _2464), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2321 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2322), _2464), 0.0)).x), vec4(0.25)));
            float _2518 = 1.0 - (_2514 * cbSceneParam._m0[34u].x);
            float _2519 = 1.0 - (_2514 * cbSceneParam._m0[34u].y);
            float _2520 = 1.0 - (_2514 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2520) ? _2268 : (isnan(_2268) ? _2520 : min(_2268, _2520));
            frontier_phi_37_36_ladder_1 = isnan(_2519) ? _2267 : (isnan(_2267) ? _2519 : min(_2267, _2519));
            frontier_phi_37_36_ladder_2 = isnan(_2518) ? _2266 : (isnan(_2266) ? _2518 : min(_2266, _2518));
        }
        else
        {
            frontier_phi_37_36_ladder = _2268;
            frontier_phi_37_36_ladder_1 = _2267;
            frontier_phi_37_36_ladder_2 = _2266;
        }
        _2332 = frontier_phi_37_36_ladder_2;
        _2334 = frontier_phi_37_36_ladder_1;
        _2336 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2332 = _2266;
        _2334 = _2267;
        _2336 = _2268;
    }
    uvec4 _2341 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2343 = _2341.x * 14u;
    uint _2344 = _2343 + 13u;
    float _2351 = _1013 + (-1.0);
    float _2356 = (cbLight._m0[_2344].x * _2351) + 1.0;
    float _2357 = (cbLight._m0[_2344].y * _2351) + 1.0;
    float _2358 = (cbLight._m0[_2344].z * _2351) + 1.0;
    float _2359 = (cbLight._m0[_2344].w * _2351) + 1.0;
    uint _2360 = _2343 + 5u;
    float _2366 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
    uint _2370 = _2343 + 4u;
    float _2379 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
    uint _2383 = _2343 | 1u;
    float _2394 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_835, _836, _837));
    float _2397 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_835, _836, _837));
    float _4685 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _4696 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2402 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2404 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * 0.3183098733425140380859375;
    float _2411 = ((cbLight._m0[_2360].x * _2366) * _2404) + (((cbLight._m0[_2370].x * _2332) * _2379) * _2402);
    float _2412 = ((_2366 * cbLight._m0[_2360].y) * _2404) + (((cbLight._m0[_2370].y * _2334) * _2379) * _2402);
    float _2413 = ((_2366 * cbLight._m0[_2360].z) * _2404) + (((cbLight._m0[_2370].z * _2336) * _2379) * _2402);
    uvec4 _2417 = floatBitsToUint(cbLight._m0[_2343 + 12u]);
    bool _2419 = _2417.x == 0u;
    float _2521;
    float _2523;
    float _2525;
    if (_2419)
    {
        _2521 = _2411;
        _2523 = _2412;
        _2525 = _2413;
    }
    else
    {
        uint _2529 = _2343 + 6u;
        float _2545 = (dot(vec3(cbLight._m0[_2343 + 2u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2546 = _2545 * _2545;
        float _4707 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2547 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2548 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2521 = (((cbLight._m0[_2529].x * 0.3183098733425140380859375) * _2547) * _2548) + _2411;
        _2523 = (((cbLight._m0[_2529].y * 0.3183098733425140380859375) * _2547) * _2548) + _2412;
        _2525 = (((cbLight._m0[_2529].z * 0.3183098733425140380859375) * _2547) * _2548) + _2413;
    }
    bool _2528 = _2417.y == 0u;
    float _2583;
    float _2585;
    float _2587;
    if (_2528)
    {
        _2583 = _2521;
        _2585 = _2523;
        _2587 = _2525;
    }
    else
    {
        uint _2756 = _2343 + 7u;
        float _2772 = (dot(vec3(cbLight._m0[_2343 + 3u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2773 = _2772 * _2772;
        float _4723 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2774 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2775 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2583 = (((cbLight._m0[_2756].x * 0.3183098733425140380859375) * _2774) * _2775) + _2521;
        _2585 = (((cbLight._m0[_2756].y * 0.3183098733425140380859375) * _2774) * _2775) + _2523;
        _2587 = (((cbLight._m0[_2756].z * 0.3183098733425140380859375) * _2774) * _2775) + _2525;
    }
    uint _2590 = _2343 + 8u;
    float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _838) * 0.949999988079071044921875);
    float _2604 = _2603 * _2603;
    float _2605 = cbLight._m0[_2343].x + _915;
    float _2606 = cbLight._m0[_2343].y + _916;
    float _2607 = cbLight._m0[_2343].z + _917;
    float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
    float _2612 = _2611 * _2605;
    float _2613 = _2611 * _2606;
    float _2614 = _2611 * _2607;
    float _2615 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2343].xyz));
    float _4739 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _4750 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2619 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2620 = dot(vec3(_835, _836, _837), vec3(_2612, _2613, _2614));
    float _4761 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _2624 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2612, _2613, _2614));
    float _4772 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2628 = _2604 * _2604;
    float _2632 = ((_2623 * _2623) * (_2628 + (-1.0))) + 1.0;
    float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0)))) * 5.0);
    float _2641 = 0.959999978542327880859375 - _994;
    float _2643 = 0.959999978542327880859375 - _995;
    float _2644 = 0.959999978542327880859375 - _996;
    float _2651 = 1.0 - _2604;
    float _2662 = (0.5 / (((_2619 * ((_2618 * _2651) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2651) + _2604) * _2618))) * _2618;
    float _4783 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2664 = (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2628 / ((_2632 * _2632) * 3.141590118408203125));
    uint _2678 = _2343 + 9u;
    float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _838) * 0.949999988079071044921875);
    float _2690 = _2689 * _2689;
    float _2691 = cbLight._m0[_2383].x + _915;
    float _2692 = cbLight._m0[_2383].y + _916;
    float _2693 = cbLight._m0[_2383].z + _917;
    float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
    float _2698 = _2697 * _2691;
    float _2699 = _2697 * _2692;
    float _2700 = _2697 * _2693;
    float _2701 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2383].xyz));
    float _4794 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2705 = dot(vec3(_835, _836, _837), vec3(_2698, _2699, _2700));
    float _4805 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
    float _2709 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2698, _2699, _2700));
    float _4816 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2713 = _2690 * _2690;
    float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
    float _2724 = exp2(log2(1.0 - (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) * 5.0);
    float _2731 = 1.0 - _2690;
    float _2741 = (0.5 / (((_2619 * ((_2704 * _2731) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2731) + _2690) * _2704))) * _2704;
    float _4827 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2743 = (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
    float _2753 = (((((_2724 * _2641) + _997) * cbLight._m0[_2678].x) * _2743) * _2366) + ((((cbLight._m0[_2590].x * _2332) * ((_2640 * _2641) + _997)) * _2664) * _2379);
    float _2754 = (((((_2724 * _2643) + _999) * cbLight._m0[_2678].y) * _2743) * _2366) + ((((cbLight._m0[_2590].y * _2334) * ((_2640 * _2643) + _999)) * _2664) * _2379);
    float _2755 = (((((_2724 * _2644) + _1000) * cbLight._m0[_2678].z) * _2743) * _2366) + ((((cbLight._m0[_2590].z * _2336) * ((_2640 * _2644) + _1000)) * _2664) * _2379);
    float _2811;
    float _2813;
    float _2815;
    if (_2419)
    {
        _2811 = _2753;
        _2813 = _2754;
        _2815 = _2755;
    }
    else
    {
        uint _2817 = _2343 + 2u;
        uint _2821 = _2343 + 10u;
        float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2817].w)) * _838) * 0.949999988079071044921875);
        float _2836 = _2835 * _2835;
        float _2837 = cbLight._m0[_2817].x + _915;
        float _2838 = cbLight._m0[_2817].y + _916;
        float _2839 = cbLight._m0[_2817].z + _917;
        float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
        float _2844 = _2843 * _2837;
        float _2845 = _2843 * _2838;
        float _2846 = _2843 * _2839;
        float _2847 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2817].xyz));
        float _4838 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2850 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2851 = dot(vec3(_835, _836, _837), vec3(_2844, _2845, _2846));
        float _4849 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2854 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2855 = dot(vec3(cbLight._m0[_2817].xyz), vec3(_2844, _2845, _2846));
        float _4860 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2859 = _2836 * _2836;
        float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
        float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) * 5.0);
        float _2877 = 1.0 - _2836;
        float _2887 = (0.5 / (((_2619 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2877) + _2836) * _2850))) * _2850;
        float _4871 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2889 = (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
        float _2890 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2811 = (((((_2870 * _2641) + _997) * cbLight._m0[_2821].x) * _2889) * _2890) + _2753;
        _2813 = (((((_2870 * _2643) + _999) * cbLight._m0[_2821].y) * _2889) * _2890) + _2754;
        _2815 = (((((_2870 * _2644) + _1000) * cbLight._m0[_2821].z) * _2889) * _2890) + _2755;
    }
    float _2921;
    float _2923;
    float _2925;
    if (_2528)
    {
        _2921 = _2811;
        _2923 = _2813;
        _2925 = _2815;
    }
    else
    {
        uint _2932 = _2343 + 3u;
        uint _2936 = _2343 + 11u;
        float _2950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2932].w)) * _838) * 0.949999988079071044921875);
        float _2951 = _2950 * _2950;
        float _2952 = cbLight._m0[_2932].x + _915;
        float _2953 = cbLight._m0[_2932].y + _916;
        float _2954 = cbLight._m0[_2932].z + _917;
        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
        float _2959 = _2958 * _2952;
        float _2960 = _2958 * _2953;
        float _2961 = _2958 * _2954;
        float _2962 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2932].xyz));
        float _4887 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2965 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2966 = dot(vec3(_835, _836, _837), vec3(_2959, _2960, _2961));
        float _4898 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2969 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
        float _2970 = dot(vec3(cbLight._m0[_2932].xyz), vec3(_2959, _2960, _2961));
        float _4909 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2974 = _2951 * _2951;
        float _2978 = ((_2969 * _2969) * (_2974 + (-1.0))) + 1.0;
        float _2985 = exp2(log2(1.0 - (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) * 5.0);
        float _2992 = 1.0 - _2951;
        float _3002 = (0.5 / (((_2619 * ((_2965 * _2992) + _2951)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2992) + _2951) * _2965))) * _2965;
        float _4920 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
        float _3004 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2974 / ((_2978 * _2978) * 3.141590118408203125));
        float _3005 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2921 = (((((_2985 * _2641) + _997) * cbLight._m0[_2936].x) * _3004) * _3005) + _2811;
        _2923 = (((((_2985 * _2643) + _999) * cbLight._m0[_2936].y) * _3004) * _3005) + _2813;
        _2925 = (((((_2985 * _2644) + _1000) * cbLight._m0[_2936].z) * _3004) * _3005) + _2815;
    }
    float _3071;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    if (_2341.y == 0u)
    {
        uvec4 _3026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3027 = _3026.x;
        uint _3038 = uint((float(_3026.y) * floor(float(uint(cbSceneParam._m0[85u].y * _936) / _3027))) + floor(float(uint(cbSceneParam._m0[85u].x * _935) / _3027)));
        float _3048 = (log2(_2119 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3049 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        uint _3052 = uint(isnan(14.0) ? _3049 : (isnan(_3049) ? 14.0 : min(_3049, 14.0)));
        uvec4 _3057 = texelFetch(g_lightClusterGridBuffer, int(((_3052 << 2u) + (_3038 << 6u)) >> 2u));
        uint _3058 = _3057.x;
        uint _3059 = _3026.z;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((((1u << ((_3059 >> 4u) & 15u)) + 4294967295u) & _3058) == 0u) || ((_3059 & 240u) == 0u))
        {
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
            _3146 = 0.0;
            _3148 = 0.0;
        }
        else
        {
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3147;
            float _3149;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            uint _3297 = 0u;
            uint _3306;
            bool _3307;
            for (;;)
            {
                _3306 = texelFetch(g_lightClassification, int((((_3052 << 5u) + (_3038 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                _3307 = _3306 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3307)
                {
                    frontier_phi_71_pred = _3296;
                    frontier_phi_71_pred_1 = _3295;
                    frontier_phi_71_pred_2 = _3294;
                    frontier_phi_71_pred_3 = _3293;
                    frontier_phi_71_pred_4 = _3292;
                    frontier_phi_71_pred_5 = _3291;
                }
                else
                {
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    uint _3442;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3306;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    for (;;)
                    {
                        uint _3446 = uint(findLSB(_3442)) + (_3297 << 5u);
                        uint _3443 = (_3442 + 4294967295u) & _3442;
                        uint _3448 = _3446 * 48u;
                        vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 3u)).x));
                        uint _3468 = (_3446 * 48u) + 4u;
                        vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3468)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3468 + 3u)).x));
                        uint _3487 = (_3446 * 48u) + 8u;
                        vec3 _3498 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3487)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 2u)).x));
                        float _3502 = _3462.x - _2117;
                        float _3503 = _3462.y - _2118;
                        float _3504 = _3462.z - _2119;
                        float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                        float _3508 = inversesqrt(_3505);
                        float _3509 = _3508 * _3502;
                        float _3510 = _3508 * _3503;
                        float _3511 = _3508 * _3504;
                        float _3512 = dot(vec3(_954, _957, _960), vec3(_3509, _3510, _3511));
                        float _3517 = 1.0 - (_3505 * _3462.w);
                        float _4946 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3518 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3519 = sqrt(_3505) * _3481.w;
                        float _3522 = 1.39999997615814208984375 / (_3519 + 1.39999997615814208984375);
                        float _3523 = _3522 * _3522;
                        float _3526 = ((1.0 - _3523) * _3512) + _3523;
                        float _3529 = _3519 * _3519;
                        float _3533 = ((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3518) / ((_3529 * 0.699999988079071044921875) + 1.0);
                        float _3537 = (-0.0) - _2117;
                        float _3538 = (-0.0) - _2118;
                        float _3539 = (-0.0) - _2119;
                        float _3543 = inversesqrt(dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539)));
                        float _3544 = _3543 * _3537;
                        float _3545 = _3543 * _3538;
                        float _3546 = _3543 * _3539;
                        float _3553 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                        float _3554 = 1.0 - _1029;
                        float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                        float _3562 = _3561 * _3561;
                        float _3563 = _3562 * _3562;
                        float _3564 = _3544 + _3509;
                        float _3565 = _3545 + _3510;
                        float _3566 = _3546 + _3511;
                        float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                        float _3574 = dot(vec3(_954, _957, _960), vec3(_3544, _3545, _3546));
                        float _4962 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3577 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3578 = dot(vec3(_954, _957, _960), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                        float _4973 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                        float _3581 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                        float _3586 = _3522 * _3562;
                        float _3587 = _3586 * _3586;
                        float _3590 = ((1.0 - _3587) * _3512) + _3587;
                        float _4984 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3591 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3592 = 1.0 - _3562;
                        float _3602 = (0.5 / (((_3591 * ((_3577 * _3592) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3591 * _3592) + _3562) * _3577))) * _3591;
                        float _4995 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3613 = (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0)))) / ((_3585 * _3585) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125))) * _3518;
                        _3366 = (_3533 * _3481.x) + _3439;
                        _3367 = (_3533 * _3481.y) + _3440;
                        _3368 = (_3533 * _3481.z) + _3441;
                        _3363 = (_3613 * _3498.x) + _3436;
                        _3364 = (_3613 * _3498.y) + _3437;
                        _3365 = (_3613 * _3498.z) + _3438;
                        if (_3443 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3443;
                        }
                    }
                    frontier_phi_71_pred = _3368;
                    frontier_phi_71_pred_1 = _3367;
                    frontier_phi_71_pred_2 = _3366;
                    frontier_phi_71_pred_3 = _3365;
                    frontier_phi_71_pred_4 = _3364;
                    frontier_phi_71_pred_5 = _3363;
                }
                _3149 = frontier_phi_71_pred;
                _3147 = frontier_phi_71_pred_1;
                _3145 = frontier_phi_71_pred_2;
                _3143 = frontier_phi_71_pred_3;
                _3141 = frontier_phi_71_pred_4;
                _3139 = frontier_phi_71_pred_5;
                uint _3298 = _3297 + 1u;
                if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3291 = _3139;
                    _3292 = _3141;
                    _3293 = _3143;
                    _3294 = _3145;
                    _3295 = _3147;
                    _3296 = _3149;
                    _3297 = _3298;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
            _3146 = _3147;
            _3148 = _3149;
        }
        uvec4 _3152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3153 = _3152.z;
        uint _3155 = (_3153 >> 8u) & 15u;
        float _3259;
        float _3261;
        float _3263;
        float _3265;
        float _3267;
        float _3269;
        if (((4294967295u << _3155) & _3058) == 0u)
        {
            _3259 = _3138;
            _3261 = _3140;
            _3263 = _3142;
            _3265 = _3144;
            _3267 = _3146;
            _3269 = _3148;
        }
        else
        {
            float _3284 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
            float _3285 = _3284 * _2117;
            float _3286 = _3284 * _2118;
            float _3287 = _3284 * _2119;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3155 < ((_3153 >> 12u) & 15u))
            {
                float _3260;
                float _3262;
                float _3264;
                float _3266;
                float _3268;
                float _3270;
                float _3419 = _3138;
                float _3420 = _3140;
                float _3421 = _3142;
                float _3422 = _3144;
                float _3423 = _3146;
                float _3424 = _3148;
                uint _3425 = _3155;
                uint _3434;
                bool _3435;
                for (;;)
                {
                    _3434 = texelFetch(g_lightClassification, int((((_3052 << 5u) + (_3038 << 9u)) + (_3425 << 2u)) >> 2u)).x;
                    _3435 = _3434 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3435)
                    {
                        frontier_phi_82_pred = _3424;
                        frontier_phi_82_pred_1 = _3423;
                        frontier_phi_82_pred_2 = _3422;
                        frontier_phi_82_pred_3 = _3421;
                        frontier_phi_82_pred_4 = _3420;
                        frontier_phi_82_pred_5 = _3419;
                    }
                    else
                    {
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3640 = _3419;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        float _3643 = _3422;
                        float _3644 = _3423;
                        float _3645 = _3424;
                        uint _3646 = _3434;
                        uint _3647;
                        vec4 _3672;
                        float _3673;
                        vec4 _3688;
                        vec3 _3700;
                        vec4 _3715;
                        vec4 _3730;
                        float _3776;
                        bool _3777;
                        for (;;)
                        {
                            uint _3657 = ((_3425 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3646));
                            _3647 = (_3646 + 4294967295u) & _3646;
                            uint _3659 = _3657 * 40u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3673 = _3672.w;
                            uint _3675 = (_3657 * 40u) + 4u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            uint _3690 = (_3657 * 40u) + 8u;
                            _3700 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x));
                            uint _3702 = (_3657 * 40u) + 16u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3657 * 40u) + 20u;
                            _3730 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 3u)).x));
                            uint _3732 = (_3657 * 40u) + 24u;
                            vec4 _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3751 = (_3657 * 40u) + 28u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            _3776 = fma(_2119, _3764.z, fma(_2118, _3764.y, _3764.x * _2117)) + _3764.w;
                            _3777 = !((fma(_2119, _3745.z, fma(_2118, _3745.y, _3745.x * _2117)) + _3745.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3777)
                            {
                                float _3804 = _3672.x - _2117;
                                float _3805 = _3672.y - _2118;
                                float _3806 = _3672.z - _2119;
                                float _3807 = dot(vec3(_3804, _3805, _3806), vec3(_3804, _3805, _3806));
                                float _3810 = inversesqrt(_3807);
                                float _3811 = _3810 * _3804;
                                float _3812 = _3810 * _3805;
                                float _3813 = _3810 * _3806;
                                float _3817 = 1.0 - (_3807 / (_3673 * _3673));
                                float _5006 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3822 = sqrt(_3807) * _3688.w;
                                float _3824 = 1.39999997615814208984375 / (_3822 + 1.39999997615814208984375);
                                float _3825 = _3824 * _3824;
                                float _3828 = ((1.0 - _3825) * dot(vec3(_3811, _3812, _3813), vec3(_954, _957, _960))) + _3825;
                                float _3831 = _3822 * _3822;
                                float _3835 = (fma(_2119, _3715.z, fma(_2118, _3715.y, _3715.x * _2117)) + _3715.w) / _3776;
                                float _3836 = (fma(_2119, _3730.z, fma(_2118, _3730.y, _3730.x * _2117)) + _3730.w) / _3776;
                                float _3840 = 1.0 - dot(vec2(_3835, _3836), vec2(_3835, _3836));
                                float _5022 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3842 = _3841 * (((isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0))) * _3818) / ((_3831 * 0.699999988079071044921875) + 1.0));
                                float _3854 = exp2(log2(1.0 / ((_3831 * 3.5) + 5.0)) * 0.25);
                                float _3855 = 1.0 - _1029;
                                float _3862 = sqrt(1.0 - ((1.0 - (_3855 * _3855)) * (1.0 - (_3854 * _3854))));
                                float _3863 = _3862 * _3862;
                                float _3864 = _3863 * _3863;
                                float _3865 = _3811 - _3285;
                                float _3866 = _3812 - _3286;
                                float _3867 = _3813 - _3287;
                                float _3871 = inversesqrt(dot(vec3(_3865, _3866, _3867), vec3(_3865, _3866, _3867)));
                                float _3875 = dot(vec3(_954, _957, _960), vec3((-0.0) - _3285, (-0.0) - _3286, (-0.0) - _3287));
                                float _5033 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3879 = dot(vec3(_954, _957, _960), vec3(_3871 * _3865, _3871 * _3866, _3871 * _3867));
                                float _5044 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3882 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3886 = ((_3882 * _3882) * (_3864 + (-1.0))) + 1.0;
                                float _3887 = _3824 * _3863;
                                float _3888 = _3887 * _3887;
                                float _3894 = ((1.0 - _3888) * dot(vec3(_954, _957, _960), vec3(_3811, _3812, _3813))) + _3888;
                                float _5055 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3895 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                                float _3896 = 1.0 - _3863;
                                float _3906 = (0.5 / (((_3895 * ((_3878 * _3896) + _3863)) + 9.9999999392252902907785028219223e-09) + (((_3895 * _3896) + _3863) * _3878))) * _3895;
                                float _5066 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3916 = (_3841 * _3818) * (((_3864 * 3.1415927410125732421875) * (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0)))) / ((_3886 * _3886) * ((_3831 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3842 * _3688.z;
                                frontier_phi_88_pred_1 = _3842 * _3688.y;
                                frontier_phi_88_pred_2 = _3842 * _3688.x;
                                frontier_phi_88_pred_3 = _3916 * _3700.z;
                                frontier_phi_88_pred_4 = _3916 * _3700.y;
                                frontier_phi_88_pred_5 = _3916 * _3700.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3925 = frontier_phi_88_pred;
                            _3924 = frontier_phi_88_pred_1;
                            _3923 = frontier_phi_88_pred_2;
                            _3922 = frontier_phi_88_pred_3;
                            _3921 = frontier_phi_88_pred_4;
                            _3920 = frontier_phi_88_pred_5;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            if (_3647 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3647;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3632;
                        frontier_phi_82_pred_1 = _3631;
                        frontier_phi_82_pred_2 = _3630;
                        frontier_phi_82_pred_3 = _3629;
                        frontier_phi_82_pred_4 = _3628;
                        frontier_phi_82_pred_5 = _3627;
                    }
                    _3270 = frontier_phi_82_pred;
                    _3268 = frontier_phi_82_pred_1;
                    _3266 = frontier_phi_82_pred_2;
                    _3264 = frontier_phi_82_pred_3;
                    _3262 = frontier_phi_82_pred_4;
                    _3260 = frontier_phi_82_pred_5;
                    uint _3426 = _3425 + 1u;
                    if (_3426 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3419 = _3260;
                        _3420 = _3262;
                        _3421 = _3264;
                        _3422 = _3266;
                        _3423 = _3268;
                        _3424 = _3270;
                        _3425 = _3426;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3266;
                frontier_phi_63_64_ladder_1 = _3270;
                frontier_phi_63_64_ladder_2 = _3268;
                frontier_phi_63_64_ladder_3 = _3264;
                frontier_phi_63_64_ladder_4 = _3262;
                frontier_phi_63_64_ladder_5 = _3260;
            }
            else
            {
                frontier_phi_63_64_ladder = _3144;
                frontier_phi_63_64_ladder_1 = _3148;
                frontier_phi_63_64_ladder_2 = _3146;
                frontier_phi_63_64_ladder_3 = _3142;
                frontier_phi_63_64_ladder_4 = _3140;
                frontier_phi_63_64_ladder_5 = _3138;
            }
            _3259 = frontier_phi_63_64_ladder_5;
            _3261 = frontier_phi_63_64_ladder_4;
            _3263 = frontier_phi_63_64_ladder_3;
            _3265 = frontier_phi_63_64_ladder;
            _3267 = frontier_phi_63_64_ladder_2;
            _3269 = frontier_phi_63_64_ladder_1;
        }
        float _3274 = isnan(1.0) ? _1013 : (isnan(_1013) ? 1.0 : min(_1013, 1.0));
        _3071 = (_3274 * _3265) + _2583;
        _3073 = (_3274 * _3267) + _2585;
        _3075 = (_3274 * _3269) + _2587;
        _3077 = ((_3259 * _997) * _3274) + _2921;
        _3079 = ((_3261 * _999) * _3274) + _2923;
        _3081 = ((_3263 * _1000) * _3274) + _2925;
    }
    else
    {
        _3071 = _2583;
        _3073 = _2585;
        _3075 = _2587;
        _3077 = _2921;
        _3079 = _2923;
        _3081 = _2925;
    }
    float _5082 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _5093 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _5104 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _3098 = ((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3071 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1013))) + ((_3077 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1851)) * cbPerFrame._m0[3u].x);
    float _3099 = ((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3073 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1013))) + ((_3079 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1851)) * cbPerFrame._m0[3u].x);
    float _3100 = ((isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0))) * (_3075 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1013))) + ((_3081 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1851)) * cbPerFrame._m0[3u].x);
    uint _3101 = _256 + 6u;
    float _3109 = _935 / cbSceneParam._m0[86u].x;
    float _3110 = _936 / cbSceneParam._m0[86u].y;
    vec4 _3124 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, (log2((isnan(cbSceneParam._m0[77u].w) ? _857 : (isnan(_857) ? cbSceneParam._m0[77u].w : min(_857, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3126 = _3124.x;
    float _3127 = _3124.y;
    float _3128 = _3124.z;
    float _3129 = _3124.w;
    float _3201;
    float _3203;
    float _3205;
    float _3207;
    if (_857 > cbSceneParam._m0[78u].w)
    {
        float _3163 = isnan(_857) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _857 : min(cbSceneParam._m0[80u].w, _857));
        float _3164 = _3163 / _857;
        float _3175 = _3164 * _908;
        float _3176 = _909 * _3164;
        float _3177 = (-0.0) - _3176;
        float _3179 = _3164 * _910;
        float _3181 = (cbSceneParam._m0[77u].w * _3177) / _3163;
        float _3182 = _3181 + cbSceneParam._m0[79u].w;
        float _3183 = cbSceneParam._m0[79u].w - _3176;
        float _3189 = sqrt(((_3175 * _3175) + (_3176 * _3176)) + (_3179 * _3179));
        float _3192 = (1.0 - (cbSceneParam._m0[77u].w / _3163)) * _3189;
        float _3197 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3199 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3376;
        if (abs((_3177 - _3181) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3376 = ((((_3182 > 0.0) ? exp2(_3197 * _3182) : (2.0 - exp2(_3199 * _3182))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3192;
        }
        else
        {
            float _3320 = 1.0 / cbSceneParam._m0[80u].x;
            float _3321 = isnan(_3183) ? _3182 : (isnan(_3182) ? _3183 : max(_3182, _3183));
            float _3322 = isnan(_3183) ? _3182 : (isnan(_3182) ? _3183 : min(_3182, _3183));
            float _3331 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : min(_3321, 0.0));
            float _3332 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : min(_3322, 0.0));
            _3376 = ((abs(_3189 / _3177) * cbSceneParam._m0[80u].y) * ((((_3331 - _3332) * 2.0) - ((exp2(_3197 * (isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0)))) - exp2(_3197 * (isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))))) * _3320)) - ((exp2(_3199 * _3331) - exp2(_3199 * _3332)) * _3320))) + (_3192 * cbSceneParam._m0[80u].z);
        }
        vec4 _3378 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3109, _3110, 1.0), 0.0);
        float _3387 = exp2((_3376 * (-1.44269502162933349609375)) * (1.0 - _3378.w));
        float _3388 = log2(_3387);
        float _3404 = log2(_3129);
        _3201 = (exp2(_3404 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].x)) * _3378.x) / cbSceneParam._m0[78u].x)) + _3126;
        _3203 = (exp2(_3404 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].y)) * _3378.y) / cbSceneParam._m0[78u].y)) + _3127;
        _3205 = (exp2(_3404 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].z)) * _3378.z) / cbSceneParam._m0[78u].z)) + _3128;
        _3207 = _3387 * _3129;
    }
    else
    {
        _3201 = _3126;
        _3203 = _3127;
        _3205 = _3128;
        _3207 = _3129;
    }
    bool _3414;
    vec4 _3217;
    vec4 _3239;
    float _3241;
    float _3245;
    float _3246;
    float _3247;
    float _3248;
    bool _3258;
    for (;;)
    {
        _3217 = cbMatDynParam._m0[0u];
        float _3219 = roundEven(_3217.y);
        bool _3220 = _3219 == 3.0;
        float _3221 = log2(_3207);
        float _3228 = exp2(_3221 * cbSceneParam._m0[78u].x) * _3098;
        float _3229 = exp2(_3221 * cbSceneParam._m0[78u].y) * _3099;
        float _3230 = exp2(_3221 * cbSceneParam._m0[78u].z) * _3100;
        float _3237 = _924 + (-0.5);
        _3239 = cbMtdParam._m0[1u];
        _3241 = _3239.y * _3237;
        float _3244 = (_3219 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3245 = _3244 * (_3220 ? _3228 : (_3228 + (cbSceneParam._m0[72u].w * _3201)));
        _3246 = _3244 * (_3220 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3203)));
        _3247 = _3244 * (_3220 ? _3230 : (_3230 + (cbSceneParam._m0[72u].w * _3205)));
        _3248 = _3237 * 0.999000012874603271484375;
        _3258 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3258)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3248) < 0.5)
            {
                _3414 = true;
                break;
            }
        }
        uint _3355 = _973 + uint(_3217.w);
        if ((cbInstanceData._m0[_3355].w < 1.0) && ((cbInstanceData._m0[_3355].w + _3248) < 0.5))
        {
            _3414 = true;
            break;
        }
        if ((_3241 + 1.0) < _3239.x)
        {
            _3414 = true;
            break;
        }
        _3414 = false;
        break;
    }
    float _3618;
    if (_3414)
    {
        discard_state = true;
        _3618 = 0.0;
    }
    else
    {
        _3618 = cbInstanceData._m0[_3101].w;
    }
    SV_Target.x = _3245;
    SV_Target.y = _3246;
    SV_Target.z = _3247;
    SV_Target.w = _3618;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3101].w;
    discard_exit();
}


