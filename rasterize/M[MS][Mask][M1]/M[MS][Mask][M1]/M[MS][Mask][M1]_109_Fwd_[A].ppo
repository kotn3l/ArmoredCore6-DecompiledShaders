#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1621;
float _4000;
float _4001;
float _4002;
float _4003;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4012 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4023 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4034 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _473 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _490 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_461 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4045 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _498 = (_491 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _499 = (_491 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _500 = (_491 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _549 = dot(vec4(_539, _537.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _563 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_539 - _549) * cbMtdParam._m0[23u].w) + _549) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4056 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _571 = (_564 * ((_517.x * cbMtdParam._m0[13u].x) - _498)) + _498;
    float _572 = (_564 * ((_517.y * cbMtdParam._m0[13u].y) - _499)) + _499;
    float _573 = (_564 * ((_517.z * cbMtdParam._m0[13u].z) - _500)) + _500;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _621 = dot(vec4(_611, _609.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _633 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _424.z) * 2.0) - ((((_611 - _621) * cbMtdParam._m0[23u].w) + _621) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4067 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _644 = (_353.x * cbMtdParam._m0[9u].x) * ((_634 * ((_592.x * cbMtdParam._m0[14u].x) - _571)) + _571);
    float _645 = (_353.y * cbMtdParam._m0[9u].y) * ((_634 * ((_592.y * cbMtdParam._m0[14u].y) - _572)) + _572);
    float _646 = (_353.z * cbMtdParam._m0[9u].z) * ((_634 * ((_592.z * cbMtdParam._m0[14u].z) - _573)) + _573);
    float _650 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _644;
    float _653 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _645;
    float _656 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _646;
    float _664 = (((_644 - _650) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) + _650) * 4.55000019073486328125;
    float _666 = (((_645 - _653) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) + _653) * 4.55000019073486328125;
    float _668 = (((_646 - _656) * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) + _656) * 4.55000019073486328125;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _491) + _722;
    float _732 = ((_703.y - _723) * _491) + _723;
    float _733 = ((_703.z - _724) * _491) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _564) + _731;
    float _757 = ((_745.y - _732) * _564) + _732;
    float _758 = ((_745.z - _733) * _564) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _634) + _758;
    float _786 = ((((_770.x - _756) * _634) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _634) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4078 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))));
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _825 = (_786 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_680.x * 2.0) + (-1.0)))) + (((_813.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _826 = (_787 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_680.y * 2.0) + (-1.0)))) + (((_813.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _840 = _838.x;
    float _841 = 1.0 - _840;
    float _869 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_840 - _841) * cbMtdParam._m0[24u].w) + _841) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4089 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _870 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _878 = ((((cbMtdParam._m0[10u].x - _664) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _870) + _664;
    float _879 = ((((cbMtdParam._m0[10u].y - _666) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _870) + _666;
    float _880 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _668)) * _870) + _668;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _908 = _906.x;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _908) * _491) + _908;
    float _943 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _925) * _564) + _925;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _316) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _317) + cbTextureTilingScale._m0[10u].w)).x - _943) * _634) + _943;
    float _964 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _960) * cbMtdParam._m0[19u].z) + _960;
    float _966 = _964 - (_964 * _870);
    float _971 = (((_680.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _975 = ((_813.z - _971) * cbMtdParam._m0[19u].w) + _971;
    float _979 = ((cbMtdParam._m0[23u].x - _975) * _870) + _975;
    vec4 _1000 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1006 = (_1000.x * 2.0) + (-1.0);
    float _1007 = (_1000.y * 2.0) + (-1.0);
    float _1008 = dot(vec2(_1006, _1007), vec2(_1006, _1007));
    float _4100 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1024 = (_870 * (((cbMtdParam._m0[22u].z * _825) - _825) + _1006)) + _825;
    float _1025 = (_870 * (((cbMtdParam._m0[22u].z * _826) - _826) + _1007)) + _826;
    float _1026 = (_870 * (sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) - _793)) + _793;
    float _1028 = cbMtdParam._m0[22u].x + _813.w;
    float _1031 = fma(_1026, _265 * NORMAL.x, fma(_1025, _272 * TANGENT.x, (_258 * _250) * _1024));
    float _1034 = fma(_1026, _265 * NORMAL.y, fma(_1025, _272 * TANGENT.y, (_258 * _251) * _1024));
    float _1037 = fma(_1026, _265 * NORMAL.z, fma(_1025, _272 * TANGENT.z, (_258 * _252) * _1024));
    float _1041 = inversesqrt(dot(vec3(_1031, _1034, _1037), vec3(_1031, _1034, _1037)));
    float _1042 = _1041 * _1031;
    float _1043 = _1041 * _1034;
    float _1044 = _1041 * _1037;
    float _4111 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _1045 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4133 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4144 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4155 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4166 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _1050 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _1064 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1114 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1104);
    float _1115 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1104);
    float _1116 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1104);
    float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
    float _1121 = _1114 * _1120;
    float _1122 = _1115 * _1120;
    float _1123 = _1116 * _1120;
    vec4 _1128 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1130 = _1128.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1302 = sqrt(((_1114 * _1114) + (_1115 * _1115)) + (_1116 * _1116));
        float _1308 = (cbMatDynParam._m0[5u].x * _1302) + cbMatDynParam._m0[5u].y;
        float _4177 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1313 = (cbMatDynParam._m0[5u].z * _1302) + cbMatDynParam._m0[5u].w;
        float _4188 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) - _1309)) + _1309) < ((_1130 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1141 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1142 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1160 = fma(_1044, cbSceneParam._m0[5u].z, fma(_1043, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1042));
    float _1163 = fma(_1044, cbSceneParam._m0[6u].z, fma(_1043, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1042));
    float _1166 = fma(_1044, cbSceneParam._m0[7u].z, fma(_1043, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1042));
    uint _1179 = _297 + 9u;
    uint _1180 = _1179 + uint(cbMatDynParam._m0[0u].w);
    float _1186 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_1180].x;
    float _1187 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1180].y;
    float _1188 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1180].z;
    float _4199 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _1192 = 1.0 - _1050;
    float _1193 = _1189 * _1192;
    float _1194 = _1190 * _1192;
    float _1195 = _1191 * _1192;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1050;
    float _1201 = (_1190 + (-0.039999999105930328369140625)) * _1050;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1050;
    float _1203 = _1200 + 0.039999999105930328369140625;
    float _1205 = _1201 + 0.039999999105930328369140625;
    float _1206 = _1202 + 0.039999999105930328369140625;
    vec4 _1215 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1141, cbSceneParam._m0[86u].y * _1142));
    float _1219 = ((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * TEXCOORD_5.w) * _1215.x;
    float _1220 = dot(vec3(_1042, _1043, _1044), vec3(_1121, _1122, _1123));
    float _1223 = _1220 * 2.0;
    float _1227 = (_1223 * _1042) - _1121;
    float _1228 = (_1223 * _1043) - _1122;
    float _1229 = (_1223 * _1044) - _1123;
    float _1233 = abs(dot(vec3(_1121, _1122, _1123), vec3(_1042, _1043, _1044)));
    float _4232 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1235 = sqrt(_1045);
    float _1248 = exp2((_1235 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1235 * 3.0));
    float _1254 = (1.0 - _1248) * ((_1235 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1255 = _1248 * _1235;
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1620;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1345 = fma(_1291, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283));
        float _1349 = fma(_1291, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283));
        float _1353 = fma(_1291, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283));
        float _1378 = _1283 + _1042;
        float _1379 = _1287 + _1043;
        float _1380 = _1291 + _1044;
        float _1390 = fma(_1380, cbModelParam._m0[26u].z, fma(_1379, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1378)) - _1345;
        float _1391 = fma(_1380, cbModelParam._m0[27u].z, fma(_1379, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1378)) - _1349;
        float _1392 = fma(_1380, cbModelParam._m0[28u].z, fma(_1379, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1378)) - _1353;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1345 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1349 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[34u].z) + ((((((_1353 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1448 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1414.x + (-0.5));
        float _1450 = _1448 * (_1414.y + (-0.5));
        float _1451 = _1448 * (_1414.z + (-0.5));
        float _1458 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1421.x + (-0.5));
        float _1460 = _1458 * (_1421.y + (-0.5));
        float _1461 = _1458 * (_1421.z + (-0.5));
        float _1468 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1428.x + (-0.5));
        float _1470 = _1468 * (_1428.y + (-0.5));
        float _1471 = _1468 * (_1428.z + (-0.5));
        float _1478 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1435.x + (-0.5));
        float _1480 = _1478 * (_1435.y + (-0.5));
        float _1481 = _1478 * (_1435.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1502 = (dot(vec3(_1042, _1043, _1044), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1512 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4280 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1514 + 1.0))) + _1519) * _1482;
        float _1529 = _1450 * 0.5;
        float _1530 = _1460 * 0.5;
        float _1531 = _1470 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_1042, _1043, _1044), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4313 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1556 + 1.0))) + _1561) * _1483;
        float _1571 = _1451 * 0.5;
        float _1572 = _1461 * 0.5;
        float _1573 = _1471 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_1042, _1043, _1044), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4346 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1598 + 1.0))) + _1603) * _1484;
        _1620 = _1451;
        _1622 = _1450;
        _1623 = _1449;
        _1624 = _1461;
        _1625 = _1460;
        _1626 = _1459;
        _1627 = _1471;
        _1628 = _1470;
        _1629 = _1469;
        _1630 = _1484;
        _1631 = _1483;
        _1632 = _1482;
        _1633 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1634 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1635 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1621;
        _1622 = _1621;
        _1623 = _1621;
        _1624 = _1621;
        _1625 = _1621;
        _1626 = _1621;
        _1627 = _1621;
        _1628 = _1621;
        _1629 = _1621;
        _1630 = _1621;
        _1631 = _1621;
        _1632 = _1621;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1661 = fma(_1291, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283));
        float _1665 = fma(_1291, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283));
        float _1669 = fma(_1291, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283));
        float _1692 = _1283 + _1042;
        float _1693 = _1287 + _1043;
        float _1694 = _1291 + _1044;
        float _1704 = fma(_1694, cbModelParam._m0[30u].z, fma(_1693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1692)) - _1661;
        float _1705 = fma(_1694, cbModelParam._m0[31u].z, fma(_1693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1692)) - _1665;
        float _1706 = fma(_1694, cbModelParam._m0[32u].z, fma(_1693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1692)) - _1669;
        float _1710 = inversesqrt(dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706)));
        float _1723 = ((_1710 * _1704) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1661 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1724 = ((_1710 * _1705) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1665 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1725 = ((_1710 * _1706) / cbModelParam._m0[35u].z) + ((((((_1669 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1723, _1724, _1725), 0.0);
        float _1760 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1727.x + (-0.5));
        float _1762 = _1760 * (_1727.y + (-0.5));
        float _1763 = _1760 * (_1727.z + (-0.5));
        float _1770 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1734.x + (-0.5));
        float _1772 = _1770 * (_1734.y + (-0.5));
        float _1773 = _1770 * (_1734.z + (-0.5));
        float _1780 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1781 = _1780 * (_1741.x + (-0.5));
        float _1782 = _1780 * (_1741.y + (-0.5));
        float _1783 = _1780 * (_1741.z + (-0.5));
        float _1790 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1791 = _1790 * (_1748.x + (-0.5));
        float _1792 = _1790 * (_1748.y + (-0.5));
        float _1793 = _1790 * (_1748.z + (-0.5));
        float _1794 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1795 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1796 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1797 = _1761 * 0.5;
        float _1798 = _1771 * 0.5;
        float _1799 = _1781 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_1042, _1043, _1044), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1794 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4409 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1824 + 1.0))) + _1829) * _1794;
        float _1839 = _1762 * 0.5;
        float _1840 = _1772 * 0.5;
        float _1841 = _1782 * 0.5;
        float _1842 = dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841));
        float _1847 = (_1842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1842);
        float _1855 = (dot(vec3(_1042, _1043, _1044), vec3(_1847 * _1839, _1847 * _1840, _1847 * _1841)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841)) / (_1795 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1866 = _1865 * 2.0;
        float _1870 = (1.0 - _1865) / (_1865 + 1.0);
        float _4442 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1880 = ((((1.0 - _1871) * (_1866 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1866 + 1.0))) + _1871) * _1795;
        float _1881 = _1763 * 0.5;
        float _1882 = _1773 * 0.5;
        float _1883 = _1783 * 0.5;
        float _1884 = dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883));
        float _1889 = (_1884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1884);
        float _1897 = (dot(vec3(_1042, _1043, _1044), vec3(_1889 * _1881, _1889 * _1882, _1889 * _1883)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1906 = sqrt(((_1882 * _1882) + (_1881 * _1881)) + (_1883 * _1883)) / (_1796 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1908 = _1907 * 2.0;
        float _1912 = (1.0 - _1907) / (_1907 + 1.0);
        float _4475 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1922 = ((((1.0 - _1913) * (_1908 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1908 + 1.0))) + _1913) * _1796;
        _1930 = _1763;
        _1931 = _1762;
        _1932 = _1761;
        _1933 = _1773;
        _1934 = _1772;
        _1935 = _1771;
        _1936 = _1783;
        _1937 = _1782;
        _1938 = _1781;
        _1939 = _1796;
        _1940 = _1795;
        _1941 = _1794;
        _1942 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
        _1943 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)));
        _1944 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)));
    }
    else
    {
        _1930 = _1621;
        _1931 = _1621;
        _1932 = _1621;
        _1933 = _1621;
        _1934 = _1621;
        _1935 = _1621;
        _1936 = _1621;
        _1937 = _1621;
        _1938 = _1621;
        _1939 = _1621;
        _1940 = _1621;
        _1941 = _1621;
        _1942 = 0.0;
        _1943 = 0.0;
        _1944 = 0.0;
    }
    float _1954 = (cbModelParam._m0[1u].x * (_1942 - _1633)) + _1633;
    float _1955 = (cbModelParam._m0[1u].x * (_1943 - _1634)) + _1634;
    float _1956 = (cbModelParam._m0[1u].x * (_1944 - _1635)) + _1635;
    float _1977 = fma(_1956, cbSceneParam._m0[89u].z, fma(_1955, cbSceneParam._m0[89u].y, _1954 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1956, cbSceneParam._m0[90u].z, fma(_1955, cbSceneParam._m0[90u].y, _1954 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1956, cbSceneParam._m0[91u].z, fma(_1955, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1954));
    float _1998 = _1227 * 0.5;
    float _1999 = _1228 * 0.5;
    float _2000 = _1229 * 0.5;
    float _2001 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1932, _1935, _1938, _1941));
    float _2004 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1931, _1934, _1937, _1940));
    float _2007 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1930, _1933, _1936, _1939));
    float _2041;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2014 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1620, _1624, _1627, _1630));
        float _2018 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1622, _1625, _1628, _1631));
        float _2022 = dot(vec4(_1998, _1999, _2000, 1.0), vec4(_1623, _1626, _1629, _1632));
        float _2029 = dot(vec4(cbModelParam._m0[39u]), vec4(_1998, _1999, _2000, 1.0));
        _2041 = dot(vec3(isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)), isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2029) ? 0.0 : (isnan(0.0) ? _2029 : max(0.0, _2029))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2041 = 1.0;
    }
    float _2052;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2043 = dot(vec4(cbModelParam._m0[40u]), vec4(_1998, _1999, _2000, 1.0));
        _2052 = dot(vec3(isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2043) ? 0.0 : (isnan(0.0) ? _2043 : max(0.0, _2043))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2052 = 1.0;
    }
    float _2056 = (_2052 * cbModelParam._m0[1u].x) + (_2041 * (1.0 - cbModelParam._m0[1u].x));
    float _2066 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1045);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2066 : min(cbModelParam._m0[25u].z, _2066));
    float _2148;
    float _2150;
    float _2152;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2115 = fma(_1291, cbModelParam._m0[13u].z, fma(_1287, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1283)) + cbModelParam._m0[13u].w;
        float _2119 = fma(_1291, cbModelParam._m0[14u].z, fma(_1287, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1283)) + cbModelParam._m0[14u].w;
        float _2123 = fma(_1291, cbModelParam._m0[15u].z, fma(_1287, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1283)) + cbModelParam._m0[15u].w;
        float _2126 = fma(_1229, cbModelParam._m0[13u].z, fma(_1228, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1227));
        float _2129 = fma(_1229, cbModelParam._m0[14u].z, fma(_1228, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1227));
        float _2132 = fma(_1229, cbModelParam._m0[15u].z, fma(_1228, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1227));
        float _2160;
        if (_2126 > 0.0)
        {
            _2160 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2160 = frontier_phi_17_15_ladder;
        }
        float _2363;
        if (_2129 > 0.0)
        {
            _2363 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2363 = frontier_phi_26_22_ladder;
        }
        float _2617;
        if (_2132 > 0.0)
        {
            _2617 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2617 = frontier_phi_38_33_ladder;
        }
        float _2619 = isnan(_2363) ? _2160 : (isnan(_2160) ? _2363 : min(_2160, _2363));
        float _2620 = isnan(_2617) ? _2619 : (isnan(_2619) ? _2617 : min(_2619, _2617));
        float _2624 = (_2620 * _2126) + _2115;
        float _2625 = (_2620 * _2129) + _2119;
        float _2626 = (_2620 * _2132) + _2123;
        float _2627 = _2620 * 9.9999997473787516355514526367188e-05;
        float _2629 = (-1.0) - _2627;
        float _2631 = _2627 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2626 > _2631) || ((_2626 < _2629) || ((_2625 > _2631) || ((_2625 < _2629) || ((_2624 < _2629) || (_2624 > _2631))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2626, cbModelParam._m0[9u].z, fma(_2625, cbModelParam._m0[9u].y, _2624 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2626, cbModelParam._m0[10u].z, fma(_2625, cbModelParam._m0[10u].y, _2624 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2626, cbModelParam._m0[11u].z, fma(_2625, cbModelParam._m0[11u].y, _2624 * cbModelParam._m0[11u].x))), _2067);
            frontier_phi_16_38_ladder = _2754.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2754.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2754.x * cbModelParam._m0[1u].y;
        }
        _2148 = frontier_phi_16_38_ladder_2;
        _2150 = frontier_phi_16_38_ladder_1;
        _2152 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2136 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1227, _1228, _1229), _2067);
        _2148 = _2136.x * cbModelParam._m0[1u].y;
        _2150 = _2136.y * cbModelParam._m0[1u].y;
        _2152 = _2136.z * cbModelParam._m0[1u].y;
    }
    float _2156 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1045);
    float _2157 = isnan(_2156) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2156 : min(cbModelParam._m0[25u].w, _2156));
    float _2247;
    float _2249;
    float _2251;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2211 = fma(_1291, cbModelParam._m0[21u].z, fma(_1287, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1283)) + cbModelParam._m0[21u].w;
        float _2215 = fma(_1291, cbModelParam._m0[22u].z, fma(_1287, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1283)) + cbModelParam._m0[22u].w;
        float _2219 = fma(_1291, cbModelParam._m0[23u].z, fma(_1287, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1283)) + cbModelParam._m0[23u].w;
        float _2222 = fma(_1229, cbModelParam._m0[21u].z, fma(_1228, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1227));
        float _2225 = fma(_1229, cbModelParam._m0[22u].z, fma(_1228, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1227));
        float _2228 = fma(_1229, cbModelParam._m0[23u].z, fma(_1228, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1227));
        float _2368;
        if (_2222 > 0.0)
        {
            _2368 = abs((1.0 - _2211) / _2222);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2222 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2211 + 1.0) / _2222);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2368 = frontier_phi_28_24_ladder;
        }
        float _2644;
        if (_2225 > 0.0)
        {
            _2644 = abs((1.0 - _2215) / _2225);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2215 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2644 = frontier_phi_40_35_ladder;
        }
        float _2857;
        if (_2228 > 0.0)
        {
            _2857 = abs((1.0 - _2219) / _2228);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2219 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2857 = frontier_phi_49_46_ladder;
        }
        float _2859 = isnan(_2644) ? _2368 : (isnan(_2368) ? _2644 : min(_2368, _2644));
        float _2860 = isnan(_2857) ? _2859 : (isnan(_2859) ? _2857 : min(_2859, _2857));
        float _2864 = (_2860 * _2222) + _2211;
        float _2865 = (_2860 * _2225) + _2215;
        float _2866 = (_2860 * _2228) + _2219;
        float _2867 = _2860 * 9.9999997473787516355514526367188e-05;
        float _2868 = (-1.0) - _2867;
        float _2870 = _2867 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2866 > _2870) || ((_2866 < _2868) || ((_2865 > _2870) || ((_2865 < _2868) || ((_2864 < _2868) || (_2864 > _2870))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2866, cbModelParam._m0[17u].z, fma(_2865, cbModelParam._m0[17u].y, _2864 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2866, cbModelParam._m0[18u].z, fma(_2865, cbModelParam._m0[18u].y, _2864 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2866, cbModelParam._m0[19u].z, fma(_2865, cbModelParam._m0[19u].y, _2864 * cbModelParam._m0[19u].x))), _2157);
            frontier_phi_25_49_ladder = _3065.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3065.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3065.x * cbModelParam._m0[1u].z;
        }
        _2247 = frontier_phi_25_49_ladder_2;
        _2249 = frontier_phi_25_49_ladder_1;
        _2251 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2231 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1227, _1228, _1229), _2157);
        _2247 = _2231.x * cbModelParam._m0[1u].z;
        _2249 = _2231.y * cbModelParam._m0[1u].z;
        _2251 = _2231.z * cbModelParam._m0[1u].z;
    }
    float _2264 = (((_1254 * _1203) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2247 - _2148)) + _2148);
    float _2266 = (((_1254 * _1205) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2249 - _2150)) + _2150);
    float _2268 = (((_1254 * _1206) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2251 - _2152)) + _2152);
    float _2271 = fma(_2268, cbSceneParam._m0[89u].z, fma(_2266, cbSceneParam._m0[89u].y, _2264 * cbSceneParam._m0[89u].x));
    float _2274 = fma(_2268, cbSceneParam._m0[90u].z, fma(_2266, cbSceneParam._m0[90u].y, _2264 * cbSceneParam._m0[90u].x));
    float _2277 = fma(_2268, cbSceneParam._m0[91u].z, fma(_2266, cbSceneParam._m0[91u].y, _2264 * cbSceneParam._m0[91u].x));
    uvec4 _2287 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2289 = _2287.x * 14u;
    uint _2290 = _2289 + 13u;
    float _2297 = _1219 + (-1.0);
    float _2302 = (cbLight._m0[_2290].x * _2297) + 1.0;
    float _2303 = (cbLight._m0[_2290].y * _2297) + 1.0;
    float _2304 = (cbLight._m0[_2290].z * _2297) + 1.0;
    float _2305 = (cbLight._m0[_2290].w * _2297) + 1.0;
    uint _2306 = _2289 + 5u;
    float _2312 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2316 = _2289 + 4u;
    float _2322 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2326 = _2289 | 1u;
    float _2337 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_1042, _1043, _1044));
    float _2340 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_1042, _1043, _1044));
    float _4611 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _4622 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2345 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2347 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2354 = ((cbLight._m0[_2306].x * _2312) * _2347) + ((cbLight._m0[_2316].x * _2322) * _2345);
    float _2355 = ((_2312 * cbLight._m0[_2306].y) * _2347) + ((_2322 * cbLight._m0[_2316].y) * _2345);
    float _2356 = ((_2312 * cbLight._m0[_2306].z) * _2347) + ((_2322 * cbLight._m0[_2316].z) * _2345);
    uvec4 _2360 = floatBitsToUint(cbLight._m0[_2289 + 12u]);
    bool _2362 = _2360.x == 0u;
    float _2373;
    float _2375;
    float _2377;
    if (_2362)
    {
        _2373 = _2354;
        _2375 = _2355;
        _2377 = _2356;
    }
    else
    {
        uint _2381 = _2289 + 6u;
        float _2397 = (dot(vec3(cbLight._m0[_2289 + 2u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4633 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2400 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2373 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2354;
        _2375 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2355;
        _2377 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2356;
    }
    bool _2380 = _2360.y == 0u;
    float _2418;
    float _2420;
    float _2422;
    if (_2380)
    {
        _2418 = _2373;
        _2420 = _2375;
        _2422 = _2377;
    }
    else
    {
        uint _2588 = _2289 + 7u;
        float _2604 = (dot(vec3(cbLight._m0[_2289 + 3u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2605 = _2604 * _2604;
        float _4649 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2606 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2607 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2418 = (((cbLight._m0[_2588].x * 0.3183098733425140380859375) * _2606) * _2607) + _2373;
        _2420 = (((cbLight._m0[_2588].y * 0.3183098733425140380859375) * _2606) * _2607) + _2375;
        _2422 = (((cbLight._m0[_2588].z * 0.3183098733425140380859375) * _2606) * _2607) + _2377;
    }
    uint _2425 = _2289 + 8u;
    float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _1045) * 0.949999988079071044921875);
    float _2439 = _2438 * _2438;
    float _2440 = cbLight._m0[_2289].x + _1121;
    float _2441 = cbLight._m0[_2289].y + _1122;
    float _2442 = cbLight._m0[_2289].z + _1123;
    float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
    float _2447 = _2446 * _2440;
    float _2448 = _2446 * _2441;
    float _2449 = _2446 * _2442;
    float _2450 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2289].xyz));
    float _4665 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _4676 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _2454 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2455 = dot(vec3(_1042, _1043, _1044), vec3(_2447, _2448, _2449));
    float _4687 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2447, _2448, _2449));
    float _4698 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2439 * _2439;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2475 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
    float _2476 = 0.959999978542327880859375 - _1200;
    float _2478 = 0.959999978542327880859375 - _1201;
    float _2479 = 0.959999978542327880859375 - _1202;
    float _2486 = 1.0 - _2439;
    float _2497 = (0.5 / (((_2454 * ((_2453 * _2486) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2486) + _2439) * _2453))) * _2453;
    float _4709 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    uint _2510 = _2289 + 9u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _1045) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2326].x + _1121;
    float _2524 = cbLight._m0[_2326].y + _1122;
    float _2525 = cbLight._m0[_2326].z + _1123;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2326].xyz));
    float _4720 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2537 = dot(vec3(_1042, _1043, _1044), vec3(_2530, _2531, _2532));
    float _4731 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2541 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2530, _2531, _2532));
    float _4742 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2545 = _2522 * _2522;
    float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
    float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0);
    float _2563 = 1.0 - _2522;
    float _2573 = (0.5 / (((_2454 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2563) + _2522) * _2536))) * _2536;
    float _4753 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
    float _2585 = (((((_2556 * _2476) + _1203) * cbLight._m0[_2510].x) * _2575) * _2312) + (((((_2475 * _2476) + _1203) * cbLight._m0[_2425].x) * _2499) * _2322);
    float _2586 = (((((_2556 * _2478) + _1205) * cbLight._m0[_2510].y) * _2575) * _2312) + (((((_2475 * _2478) + _1205) * cbLight._m0[_2425].y) * _2499) * _2322);
    float _2587 = (((((_2556 * _2479) + _1206) * cbLight._m0[_2510].z) * _2575) * _2312) + (((((_2475 * _2479) + _1206) * cbLight._m0[_2425].z) * _2499) * _2322);
    float _2649;
    float _2651;
    float _2653;
    if (_2362)
    {
        _2649 = _2585;
        _2651 = _2586;
        _2653 = _2587;
    }
    else
    {
        uint _2655 = _2289 + 2u;
        uint _2659 = _2289 + 10u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _1045) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _1121;
        float _2676 = cbLight._m0[_2655].y + _1122;
        float _2677 = cbLight._m0[_2655].z + _1123;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2655].xyz));
        float _4764 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2689 = dot(vec3(_1042, _1043, _1044), vec3(_2682, _2683, _2684));
        float _4775 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4786 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0);
        float _2715 = 1.0 - _2674;
        float _2725 = (0.5 / (((_2454 * ((_2688 * _2715) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2715) + _2674) * _2688))) * _2688;
        float _4797 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2649 = (((((_2708 * _2476) + _1203) * cbLight._m0[_2659].x) * _2727) * _2728) + _2585;
        _2651 = (((((_2708 * _2478) + _1205) * cbLight._m0[_2659].y) * _2727) * _2728) + _2586;
        _2653 = (((((_2708 * _2479) + _1206) * cbLight._m0[_2659].z) * _2727) * _2728) + _2587;
    }
    float _2763;
    float _2765;
    float _2767;
    if (_2380)
    {
        _2763 = _2649;
        _2765 = _2651;
        _2767 = _2653;
    }
    else
    {
        uint _2774 = _2289 + 3u;
        uint _2778 = _2289 + 11u;
        float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2774].w)) * _1045) * 0.949999988079071044921875);
        float _2793 = _2792 * _2792;
        float _2794 = cbLight._m0[_2774].x + _1121;
        float _2795 = cbLight._m0[_2774].y + _1122;
        float _2796 = cbLight._m0[_2774].z + _1123;
        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
        float _2801 = _2800 * _2794;
        float _2802 = _2800 * _2795;
        float _2803 = _2800 * _2796;
        float _2804 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2774].xyz));
        float _4813 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2808 = dot(vec3(_1042, _1043, _1044), vec3(_2801, _2802, _2803));
        float _4824 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2812 = dot(vec3(cbLight._m0[_2774].xyz), vec3(_2801, _2802, _2803));
        float _4835 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2816 = _2793 * _2793;
        float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
        float _2827 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
        float _2834 = 1.0 - _2793;
        float _2844 = (0.5 / (((_2454 * ((_2807 * _2834) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2834) + _2793) * _2807))) * _2807;
        float _4846 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2763 = (((((_2827 * _2476) + _1203) * cbLight._m0[_2778].x) * _2846) * _2847) + _2649;
        _2765 = (((((_2827 * _2478) + _1205) * cbLight._m0[_2778].y) * _2846) * _2847) + _2651;
        _2767 = (((((_2827 * _2479) + _1206) * cbLight._m0[_2778].z) * _2846) * _2847) + _2653;
    }
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_2287.y == 0u)
    {
        float _2922 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2923 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2922;
        float _2924 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2922;
        float _2925 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2922;
        uvec4 _2937 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2938 = _2937.x;
        uint _2949 = uint((float(_2937.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1142) / _2938))) + floor(float(uint(cbSceneParam._m0[85u].x * _1141) / _2938)));
        float _2959 = (log2(_2925 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2960 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        uint _2963 = uint(isnan(14.0) ? _2960 : (isnan(_2960) ? 14.0 : min(_2960, 14.0)));
        uvec4 _2968 = texelFetch(g_lightClusterGridBuffer, int(((_2963 << 2u) + (_2949 << 6u)) >> 2u));
        uint _2969 = _2968.x;
        uint _2970 = _2937.z;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((((1u << ((_2970 >> 4u) & 15u)) + 4294967295u) & _2969) == 0u) || ((_2970 & 240u) == 0u))
        {
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
        }
        else
        {
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3081;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            uint _3229 = 0u;
            uint _3238;
            bool _3239;
            for (;;)
            {
                _3238 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3229 << 2u)) >> 2u)).x;
                _3239 = _3238 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3239)
                {
                    frontier_phi_66_pred = _3223;
                    frontier_phi_66_pred_1 = _3228;
                    frontier_phi_66_pred_2 = _3227;
                    frontier_phi_66_pred_3 = _3226;
                    frontier_phi_66_pred_4 = _3225;
                    frontier_phi_66_pred_5 = _3224;
                }
                else
                {
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    uint _3374;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3238;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    for (;;)
                    {
                        uint _3378 = uint(findLSB(_3374)) + (_3229 << 5u);
                        uint _3375 = (_3374 + 4294967295u) & _3374;
                        uint _3380 = _3378 * 48u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 3u)).x));
                        uint _3400 = (_3378 * 48u) + 4u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3419 = (_3378 * 48u) + 8u;
                        vec3 _3430 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x));
                        float _3434 = _3394.x - _2923;
                        float _3435 = _3394.y - _2924;
                        float _3436 = _3394.z - _2925;
                        float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                        float _3440 = inversesqrt(_3437);
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3444 = dot(vec3(_1160, _1163, _1166), vec3(_3441, _3442, _3443));
                        float _3449 = 1.0 - (_3437 * _3394.w);
                        float _4872 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3451 = sqrt(_3437) * _3413.w;
                        float _3454 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3444) + _3455;
                        float _3461 = _3451 * _3451;
                        float _3465 = ((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3450) / ((_3461 * 0.699999988079071044921875) + 1.0);
                        float _3469 = (-0.0) - _2923;
                        float _3470 = (-0.0) - _2924;
                        float _3471 = (-0.0) - _2925;
                        float _3475 = inversesqrt(dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471)));
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3486 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                        float _3487 = 1.0 - _1235;
                        float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                        float _3495 = _3494 * _3494;
                        float _3496 = _3495 * _3495;
                        float _3497 = _3476 + _3441;
                        float _3498 = _3477 + _3442;
                        float _3499 = _3478 + _3443;
                        float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                        float _3507 = dot(vec3(_1160, _1163, _1166), vec3(_3476, _3477, _3478));
                        float _4888 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3510 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3511 = dot(vec3(_1160, _1163, _1166), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                        float _4899 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3514 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                        float _3519 = _3454 * _3495;
                        float _3520 = _3519 * _3519;
                        float _3523 = ((1.0 - _3520) * _3444) + _3520;
                        float _4910 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3524 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3525 = 1.0 - _3495;
                        float _3535 = (0.5 / (((_3524 * ((_3510 * _3525) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3524 * _3525) + _3495) * _3510))) * _3524;
                        float _4921 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3546 = (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3518 * _3518) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125))) * _3450;
                        _3298 = (_3465 * _3413.x) + _3371;
                        _3299 = (_3465 * _3413.y) + _3372;
                        _3300 = (_3465 * _3413.z) + _3373;
                        _3295 = (_3546 * _3430.x) + _3368;
                        _3296 = (_3546 * _3430.y) + _3369;
                        _3297 = (_3546 * _3430.z) + _3370;
                        if (_3375 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3375;
                        }
                    }
                    frontier_phi_66_pred = _3295;
                    frontier_phi_66_pred_1 = _3300;
                    frontier_phi_66_pred_2 = _3299;
                    frontier_phi_66_pred_3 = _3298;
                    frontier_phi_66_pred_4 = _3297;
                    frontier_phi_66_pred_5 = _3296;
                }
                _3071 = frontier_phi_66_pred;
                _3081 = frontier_phi_66_pred_1;
                _3079 = frontier_phi_66_pred_2;
                _3077 = frontier_phi_66_pred_3;
                _3075 = frontier_phi_66_pred_4;
                _3073 = frontier_phi_66_pred_5;
                uint _3230 = _3229 + 1u;
                if (_3230 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3223 = _3071;
                    _3224 = _3073;
                    _3225 = _3075;
                    _3226 = _3077;
                    _3227 = _3079;
                    _3228 = _3081;
                    _3229 = _3230;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
        }
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.z;
        uint _3087 = (_3085 >> 8u) & 15u;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        if (((4294967295u << _3087) & _2969) == 0u)
        {
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
        }
        else
        {
            float _3216 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
            float _3217 = _3216 * _2923;
            float _3218 = _3216 * _2924;
            float _3219 = _3216 * _2925;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3087 < ((_3085 >> 12u) & 15u))
            {
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3351 = _3070;
                float _3352 = _3072;
                float _3353 = _3074;
                float _3354 = _3076;
                float _3355 = _3078;
                float _3356 = _3080;
                uint _3357 = _3087;
                uint _3366;
                bool _3367;
                for (;;)
                {
                    _3366 = texelFetch(g_lightClassification, int((((_2963 << 5u) + (_2949 << 9u)) + (_3357 << 2u)) >> 2u)).x;
                    _3367 = _3366 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3367)
                    {
                        frontier_phi_77_pred = _3356;
                        frontier_phi_77_pred_1 = _3355;
                        frontier_phi_77_pred_2 = _3354;
                        frontier_phi_77_pred_3 = _3353;
                        frontier_phi_77_pred_4 = _3352;
                        frontier_phi_77_pred_5 = _3351;
                    }
                    else
                    {
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3573 = _3351;
                        float _3574 = _3352;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        uint _3579 = _3366;
                        uint _3580;
                        vec4 _3605;
                        float _3606;
                        vec4 _3621;
                        vec3 _3633;
                        vec4 _3648;
                        vec4 _3663;
                        float _3709;
                        bool _3710;
                        for (;;)
                        {
                            uint _3590 = ((_3357 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3579));
                            _3580 = (_3579 + 4294967295u) & _3579;
                            uint _3592 = _3590 * 40u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            _3606 = _3605.w;
                            uint _3608 = (_3590 * 40u) + 4u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3590 * 40u) + 8u;
                            _3633 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x));
                            uint _3635 = (_3590 * 40u) + 16u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3590 * 40u) + 20u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3590 * 40u) + 24u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3684 = (_3590 * 40u) + 28u;
                            vec4 _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            _3709 = fma(_2925, _3697.z, fma(_2924, _3697.y, _3697.x * _2923)) + _3697.w;
                            _3710 = !((fma(_2925, _3678.z, fma(_2924, _3678.y, _3678.x * _2923)) + _3678.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3710)
                            {
                                float _3737 = _3605.x - _2923;
                                float _3738 = _3605.y - _2924;
                                float _3739 = _3605.z - _2925;
                                float _3740 = dot(vec3(_3737, _3738, _3739), vec3(_3737, _3738, _3739));
                                float _3743 = inversesqrt(_3740);
                                float _3744 = _3743 * _3737;
                                float _3745 = _3743 * _3738;
                                float _3746 = _3743 * _3739;
                                float _3750 = 1.0 - (_3740 / (_3606 * _3606));
                                float _4932 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3755 = sqrt(_3740) * _3621.w;
                                float _3757 = 1.39999997615814208984375 / (_3755 + 1.39999997615814208984375);
                                float _3758 = _3757 * _3757;
                                float _3761 = ((1.0 - _3758) * dot(vec3(_3744, _3745, _3746), vec3(_1160, _1163, _1166))) + _3758;
                                float _3764 = _3755 * _3755;
                                float _3768 = (fma(_2925, _3648.z, fma(_2924, _3648.y, _3648.x * _2923)) + _3648.w) / _3709;
                                float _3769 = (fma(_2925, _3663.z, fma(_2924, _3663.y, _3663.x * _2923)) + _3663.w) / _3709;
                                float _3773 = 1.0 - dot(vec2(_3768, _3769), vec2(_3768, _3769));
                                float _4948 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3775 = _3774 * (((isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0))) * _3751) / ((_3764 * 0.699999988079071044921875) + 1.0));
                                float _3787 = exp2(log2(1.0 / ((_3764 * 3.5) + 5.0)) * 0.25);
                                float _3788 = 1.0 - _1235;
                                float _3795 = sqrt(1.0 - ((1.0 - (_3788 * _3788)) * (1.0 - (_3787 * _3787))));
                                float _3796 = _3795 * _3795;
                                float _3797 = _3796 * _3796;
                                float _3798 = _3744 - _3217;
                                float _3799 = _3745 - _3218;
                                float _3800 = _3746 - _3219;
                                float _3804 = inversesqrt(dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800)));
                                float _3808 = dot(vec3(_1160, _1163, _1166), vec3((-0.0) - _3217, (-0.0) - _3218, (-0.0) - _3219));
                                float _4959 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3811 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3812 = dot(vec3(_1160, _1163, _1166), vec3(_3804 * _3798, _3804 * _3799, _3804 * _3800));
                                float _4970 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3815 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3819 = ((_3815 * _3815) * (_3797 + (-1.0))) + 1.0;
                                float _3820 = _3757 * _3796;
                                float _3821 = _3820 * _3820;
                                float _3827 = ((1.0 - _3821) * dot(vec3(_1160, _1163, _1166), vec3(_3744, _3745, _3746))) + _3821;
                                float _4981 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3829 = 1.0 - _3796;
                                float _3839 = (0.5 / (((_3828 * ((_3811 * _3829) + _3796)) + 9.9999999392252902907785028219223e-09) + (((_3828 * _3829) + _3796) * _3811))) * _3828;
                                float _4992 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3849 = (_3774 * _3751) * (((_3797 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3819 * _3819) * ((_3764 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3775 * _3621.y;
                                frontier_phi_83_pred_1 = _3775 * _3621.x;
                                frontier_phi_83_pred_2 = _3849 * _3633.z;
                                frontier_phi_83_pred_3 = _3849 * _3633.y;
                                frontier_phi_83_pred_4 = _3849 * _3633.x;
                                frontier_phi_83_pred_5 = _3775 * _3621.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3857 = frontier_phi_83_pred;
                            _3856 = frontier_phi_83_pred_1;
                            _3855 = frontier_phi_83_pred_2;
                            _3854 = frontier_phi_83_pred_3;
                            _3853 = frontier_phi_83_pred_4;
                            _3858 = frontier_phi_83_pred_5;
                            _3563 = _3856 + _3576;
                            _3564 = _3857 + _3577;
                            _3565 = _3858 + _3578;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            if (_3580 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3580;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3565;
                        frontier_phi_77_pred_1 = _3564;
                        frontier_phi_77_pred_2 = _3563;
                        frontier_phi_77_pred_3 = _3562;
                        frontier_phi_77_pred_4 = _3561;
                        frontier_phi_77_pred_5 = _3560;
                    }
                    _3202 = frontier_phi_77_pred;
                    _3200 = frontier_phi_77_pred_1;
                    _3198 = frontier_phi_77_pred_2;
                    _3196 = frontier_phi_77_pred_3;
                    _3194 = frontier_phi_77_pred_4;
                    _3192 = frontier_phi_77_pred_5;
                    uint _3358 = _3357 + 1u;
                    if (_3358 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3351 = _3192;
                        _3352 = _3194;
                        _3353 = _3196;
                        _3354 = _3198;
                        _3355 = _3200;
                        _3356 = _3202;
                        _3357 = _3358;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3196;
                frontier_phi_58_59_ladder_1 = _3202;
                frontier_phi_58_59_ladder_2 = _3200;
                frontier_phi_58_59_ladder_3 = _3198;
                frontier_phi_58_59_ladder_4 = _3194;
                frontier_phi_58_59_ladder_5 = _3192;
            }
            else
            {
                frontier_phi_58_59_ladder = _3074;
                frontier_phi_58_59_ladder_1 = _3080;
                frontier_phi_58_59_ladder_2 = _3078;
                frontier_phi_58_59_ladder_3 = _3076;
                frontier_phi_58_59_ladder_4 = _3072;
                frontier_phi_58_59_ladder_5 = _3070;
            }
            _3191 = frontier_phi_58_59_ladder_5;
            _3193 = frontier_phi_58_59_ladder_4;
            _3195 = frontier_phi_58_59_ladder;
            _3197 = frontier_phi_58_59_ladder_3;
            _3199 = frontier_phi_58_59_ladder_2;
            _3201 = frontier_phi_58_59_ladder_1;
        }
        float _3206 = isnan(1.0) ? _1219 : (isnan(_1219) ? 1.0 : min(_1219, 1.0));
        _2982 = (_3206 * _3197) + _2418;
        _2984 = (_3206 * _3199) + _2420;
        _2986 = (_3206 * _3201) + _2422;
        _2988 = ((_3191 * _1203) * _3206) + _2763;
        _2990 = ((_3193 * _1205) * _3206) + _2765;
        _2992 = ((_3195 * _1206) * _3206) + _2767;
    }
    else
    {
        _2982 = _2418;
        _2984 = _2420;
        _2986 = _2422;
        _2988 = _2763;
        _2990 = _2765;
        _2992 = _2767;
    }
    float _5008 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _5019 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _5030 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _3009 = ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2982 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1219))) + ((_2988 + ((isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0))) * _2056)) * cbPerFrame._m0[3u].x);
    float _3010 = ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2984 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1219))) + ((_2990 + ((isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0))) * _2056)) * cbPerFrame._m0[3u].x);
    float _3011 = ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2986 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1219))) + ((_2992 + ((isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0))) * _2056)) * cbPerFrame._m0[3u].x);
    uint _3012 = _297 + 6u;
    float _3020 = _1141 / cbSceneParam._m0[86u].x;
    float _3021 = _1142 / cbSceneParam._m0[86u].y;
    vec4 _3035 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, (log2((isnan(cbSceneParam._m0[77u].w) ? _1064 : (isnan(_1064) ? cbSceneParam._m0[77u].w : min(_1064, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3037 = _3035.x;
    float _3038 = _3035.y;
    float _3039 = _3035.z;
    float _3040 = _3035.w;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    if (_1064 > cbSceneParam._m0[78u].w)
    {
        float _3095 = isnan(_1064) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1064 : min(cbSceneParam._m0[80u].w, _1064));
        float _3096 = _3095 / _1064;
        float _3107 = _3096 * _1114;
        float _3108 = _1115 * _3096;
        float _3109 = (-0.0) - _3108;
        float _3111 = _3096 * _1116;
        float _3113 = (cbSceneParam._m0[77u].w * _3109) / _3095;
        float _3114 = _3113 + cbSceneParam._m0[79u].w;
        float _3115 = cbSceneParam._m0[79u].w - _3108;
        float _3121 = sqrt(((_3107 * _3107) + (_3108 * _3108)) + (_3111 * _3111));
        float _3124 = (1.0 - (cbSceneParam._m0[77u].w / _3095)) * _3121;
        float _3129 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3131 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3308;
        if (abs((_3109 - _3113) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3308 = ((((_3114 > 0.0) ? exp2(_3129 * _3114) : (2.0 - exp2(_3131 * _3114))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3124;
        }
        else
        {
            float _3252 = 1.0 / cbSceneParam._m0[80u].x;
            float _3253 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : max(_3114, _3115));
            float _3254 = isnan(_3115) ? _3114 : (isnan(_3114) ? _3115 : min(_3114, _3115));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            float _3264 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : min(_3254, 0.0));
            _3308 = ((abs(_3121 / _3109) * cbSceneParam._m0[80u].y) * ((((_3263 - _3264) * 2.0) - ((exp2(_3129 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0)))) - exp2(_3129 * (isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0))))) * _3252)) - ((exp2(_3131 * _3263) - exp2(_3131 * _3264)) * _3252))) + (_3124 * cbSceneParam._m0[80u].z);
        }
        vec4 _3310 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3020, _3021, 1.0), 0.0);
        float _3319 = exp2((_3308 * (-1.44269502162933349609375)) * (1.0 - _3310.w));
        float _3320 = log2(_3319);
        float _3336 = log2(_3040);
        _3133 = (exp2(_3336 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].x)) * _3310.x) / cbSceneParam._m0[78u].x)) + _3037;
        _3135 = (exp2(_3336 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].y)) * _3310.y) / cbSceneParam._m0[78u].y)) + _3038;
        _3137 = (exp2(_3336 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3320 * cbSceneParam._m0[78u].z)) * _3310.z) / cbSceneParam._m0[78u].z)) + _3039;
        _3139 = _3319 * _3040;
    }
    else
    {
        _3133 = _3037;
        _3135 = _3038;
        _3137 = _3039;
        _3139 = _3040;
    }
    bool _3346;
    vec4 _3149;
    vec4 _3171;
    float _3173;
    float _3177;
    float _3178;
    float _3179;
    float _3180;
    bool _3190;
    for (;;)
    {
        _3149 = cbMatDynParam._m0[0u];
        float _3151 = roundEven(_3149.y);
        bool _3152 = _3151 == 3.0;
        float _3153 = log2(_3139);
        float _3160 = exp2(_3153 * cbSceneParam._m0[78u].x) * _3009;
        float _3161 = exp2(_3153 * cbSceneParam._m0[78u].y) * _3010;
        float _3162 = exp2(_3153 * cbSceneParam._m0[78u].z) * _3011;
        float _3169 = _1130 + (-0.5);
        _3171 = cbMtdParam._m0[1u];
        _3173 = _3171.y * _3169;
        float _3176 = (_3151 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3177 = _3176 * (_3152 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3133)));
        _3178 = _3176 * (_3152 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3135)));
        _3179 = _3176 * (_3152 ? _3162 : (_3162 + (cbSceneParam._m0[72u].w * _3137)));
        _3180 = _3169 * 0.999000012874603271484375;
        _3190 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3190)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3180) < 0.5)
            {
                _3346 = true;
                break;
            }
        }
        uint _3287 = _1179 + uint(_3149.w);
        if ((cbInstanceData._m0[_3287].w < 1.0) && ((cbInstanceData._m0[_3287].w + _3180) < 0.5))
        {
            _3346 = true;
            break;
        }
        if ((_3173 + 1.0) < _3171.x)
        {
            _3346 = true;
            break;
        }
        _3346 = false;
        break;
    }
    float _3551;
    if (_3346)
    {
        discard_state = true;
        _3551 = 0.0;
    }
    else
    {
        _3551 = cbInstanceData._m0[_3012].w;
    }
    SV_Target.x = _3177;
    SV_Target.y = _3178;
    SV_Target.z = _3179;
    SV_Target.w = _3551;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3012].w;
    discard_exit();
}


