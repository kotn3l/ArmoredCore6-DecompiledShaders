#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1644;
float _4045;
float _4046;
float _4047;
float _4048;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4057 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4068 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4079 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _379 = _374.x * cbMtdParam._m0[11u].x;
    float _380 = _374.y * cbMtdParam._m0[11u].y;
    float _381 = _374.z * cbMtdParam._m0[11u].z;
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _419.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4090 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _493 = (_486 * ((_400.x * cbMtdParam._m0[12u].x) - _379)) + _379;
    float _494 = (_486 * ((_400.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _495 = (_486 * ((_400.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _419.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4101 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _566 = (_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493;
    float _567 = (_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494;
    float _568 = (_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _606 = _604.x;
    float _616 = dot(vec4(_606, _604.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _628 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _419.z) * 2.0) - ((((_606 - _616) * cbMtdParam._m0[23u].w) + _616) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4112 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _639 = (_348.x * cbMtdParam._m0[9u].x) * ((_629 * ((_587.x * cbMtdParam._m0[14u].x) - _566)) + _566);
    float _640 = (_348.y * cbMtdParam._m0[9u].y) * ((_629 * ((_587.y * cbMtdParam._m0[14u].y) - _567)) + _567);
    float _641 = (_348.z * cbMtdParam._m0[9u].z) * ((_629 * ((_587.z * cbMtdParam._m0[14u].z) - _568)) + _568);
    float _645 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _639;
    float _648 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _640;
    float _651 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _641;
    float _659 = (((_639 - _645) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) + _645) * 4.55000019073486328125;
    float _661 = (((_640 - _648) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) + _648) * 4.55000019073486328125;
    float _663 = (((_641 - _651) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) + _651) * 4.55000019073486328125;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _311) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _312) + cbTextureTilingScale._m0[14u].w));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _742 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _744 = _742.x;
    float _745 = _742.y;
    float _746 = _742.z;
    float _753 = ((_725.x - _744) * _486) + _744;
    float _754 = ((_725.y - _745) * _486) + _745;
    float _755 = ((_725.z - _746) * _486) + _746;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _778 = ((_767.x - _753) * _559) + _753;
    float _779 = ((_767.y - _754) * _559) + _754;
    float _780 = ((_767.z - _755) * _559) + _755;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _805 = ((_792.z - _780) * _629) + _780;
    float _808 = ((((_792.x - _778) * _629) + _778) * 2.0) + (-1.0);
    float _809 = ((((_792.y - _779) * _629) + _779) * 2.0) + (-1.0);
    float _810 = dot(vec2(_808, _809), vec2(_808, _809));
    float _4123 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _815 = sqrt(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))));
    vec4 _833 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _845 = (_808 + ((((_700.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_833.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _846 = (_809 + ((((_700.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_833.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _849 = fma(_815, _259, fma(_846, _266, _845 * _252));
    float _852 = fma(_815, _260, fma(_846, _267, _845 * _253));
    float _855 = fma(_815, _261, fma(_846, _268, _845 * _254));
    float _859 = inversesqrt(dot(vec3(_849, _852, _855), vec3(_849, _852, _855)));
    vec4 _886 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _888 = _886.x;
    float _889 = 1.0 - _888;
    float _897 = (cbMtdParam._m0[19u].x + dot(vec4(_859 * _849, _859 * _852, _859 * _855, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_888 - _889) * cbMtdParam._m0[24u].z) + _889) * cbMtdParam._m0[21u].z);
    float _4134 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _898 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _905 = (_898 * ((_681.x * cbMtdParam._m0[18u].x) - _659)) + _659;
    float _906 = (_898 * ((_681.y * cbMtdParam._m0[18u].y) - _661)) + _661;
    float _907 = (_898 * ((_681.z * cbMtdParam._m0[18u].z) - _663)) + _663;
    vec4 _933 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _935 = _933.x;
    float _952 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _935) * _486) + _935;
    float _969 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _952) * _559) + _952;
    float _987 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _969) * _629) + _969;
    float _991 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _987) * cbMtdParam._m0[19u].z) + _987;
    float _993 = _991 - (_991 * _898);
    float _998 = (((_700.z - _805) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _805;
    float _1002 = ((_833.z - _998) * cbMtdParam._m0[19u].w) + _998;
    vec4 _1015 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _1022 = (_1015.x * 2.0) + (-1.0);
    float _1023 = (_1015.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4145 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1032 = ((_1015.z - _1002) * _898) + _1002;
    float _1042 = ((sqrt(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) - _815) * _898) + _815;
    float _1045 = (((_1022 - _845) * _898) + _845) + (cbMtdParam._m0[21u].x * _845);
    float _1046 = (((_1023 - _846) * _898) + _846) + (cbMtdParam._m0[21u].x * _846);
    float _1050 = cbMtdParam._m0[22u].x + _833.w;
    float _1053 = fma(_1042, _259, fma(_1046, _266, _1045 * _252));
    float _1056 = fma(_1042, _260, fma(_1046, _267, _1045 * _253));
    float _1059 = fma(_1042, _261, fma(_1046, _268, _1045 * _254));
    float _1063 = inversesqrt(dot(vec3(_1053, _1056, _1059), vec3(_1053, _1056, _1059)));
    float _1064 = _1063 * _1053;
    float _1065 = _1063 * _1056;
    float _1066 = _1063 * _1059;
    float _4156 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1067 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _4178 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4189 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4200 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4211 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1072 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _1086 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1126 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1136 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1126);
    float _1137 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1126);
    float _1138 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1126);
    float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
    float _1143 = _1136 * _1142;
    float _1144 = _1137 * _1142;
    float _1145 = _1138 * _1142;
    vec4 _1150 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1152 = _1150.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1324 = sqrt(((_1136 * _1136) + (_1137 * _1137)) + (_1138 * _1138));
        float _1330 = (cbMatDynParam._m0[5u].x * _1324) + cbMatDynParam._m0[5u].y;
        float _4222 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1335 = (cbMatDynParam._m0[5u].z * _1324) + cbMatDynParam._m0[5u].w;
        float _4233 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) - _1331)) + _1331) < ((_1152 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1163 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1164 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1182 = fma(_1066, cbSceneParam._m0[5u].z, fma(_1065, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1064));
    float _1185 = fma(_1066, cbSceneParam._m0[6u].z, fma(_1065, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1064));
    float _1188 = fma(_1066, cbSceneParam._m0[7u].z, fma(_1065, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1064));
    uint _1201 = _292 + 9u;
    uint _1202 = _1201 + uint(cbMatDynParam._m0[0u].w);
    float _1208 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * cbInstanceData._m0[_1202].x;
    float _1209 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * cbInstanceData._m0[_1202].y;
    float _1210 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_1202].z;
    float _4244 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1212 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _1214 = 1.0 - _1072;
    float _1215 = _1211 * _1214;
    float _1216 = _1212 * _1214;
    float _1217 = _1213 * _1214;
    float _1222 = (_1211 + (-0.039999999105930328369140625)) * _1072;
    float _1223 = (_1212 + (-0.039999999105930328369140625)) * _1072;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1072;
    float _1225 = _1222 + 0.039999999105930328369140625;
    float _1227 = _1223 + 0.039999999105930328369140625;
    float _1228 = _1224 + 0.039999999105930328369140625;
    vec4 _1237 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1163, cbSceneParam._m0[86u].y * _1164));
    float _1241 = ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * TEXCOORD_5.w) * _1237.x;
    float _1242 = dot(vec3(_1064, _1065, _1066), vec3(_1143, _1144, _1145));
    float _1245 = _1242 * 2.0;
    float _1249 = (_1245 * _1064) - _1143;
    float _1250 = (_1245 * _1065) - _1144;
    float _1251 = (_1245 * _1066) - _1145;
    float _1255 = abs(dot(vec3(_1143, _1144, _1145), vec3(_1064, _1065, _1066)));
    float _4277 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    float _1257 = sqrt(_1067);
    float _1270 = exp2((_1257 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1257 * 3.0));
    float _1276 = (1.0 - _1270) * ((_1257 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1277 = _1270 * _1257;
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1309 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1643;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1368 = fma(_1313, cbModelParam._m0[26u].z, fma(_1309, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1305));
        float _1372 = fma(_1313, cbModelParam._m0[27u].z, fma(_1309, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1305));
        float _1376 = fma(_1313, cbModelParam._m0[28u].z, fma(_1309, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1305));
        float _1401 = _1305 + _1064;
        float _1402 = _1309 + _1065;
        float _1403 = _1313 + _1066;
        float _1413 = fma(_1403, cbModelParam._m0[26u].z, fma(_1402, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1401)) - _1368;
        float _1414 = fma(_1403, cbModelParam._m0[27u].z, fma(_1402, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1401)) - _1372;
        float _1415 = fma(_1403, cbModelParam._m0[28u].z, fma(_1402, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1401)) - _1376;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1368 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1372 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[34u].z) + ((((((_1376 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1471 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1437.x + (-0.5));
        float _1473 = _1471 * (_1437.y + (-0.5));
        float _1474 = _1471 * (_1437.z + (-0.5));
        float _1481 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1444.x + (-0.5));
        float _1483 = _1481 * (_1444.y + (-0.5));
        float _1484 = _1481 * (_1444.z + (-0.5));
        float _1491 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1451.x + (-0.5));
        float _1493 = _1491 * (_1451.y + (-0.5));
        float _1494 = _1491 * (_1451.z + (-0.5));
        float _1501 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1458.x + (-0.5));
        float _1503 = _1501 * (_1458.y + (-0.5));
        float _1504 = _1501 * (_1458.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1525 = (dot(vec3(_1064, _1065, _1066), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1535 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4325 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1537 + 1.0))) + _1542) * _1505;
        float _1552 = _1473 * 0.5;
        float _1553 = _1483 * 0.5;
        float _1554 = _1493 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_1064, _1065, _1066), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4358 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1579 + 1.0))) + _1584) * _1506;
        float _1594 = _1474 * 0.5;
        float _1595 = _1484 * 0.5;
        float _1596 = _1494 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_1064, _1065, _1066), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4391 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1621 + 1.0))) + _1626) * _1507;
        _1643 = _1474;
        _1645 = _1473;
        _1646 = _1472;
        _1647 = _1484;
        _1648 = _1483;
        _1649 = _1482;
        _1650 = _1494;
        _1651 = _1493;
        _1652 = _1492;
        _1653 = _1507;
        _1654 = _1506;
        _1655 = _1505;
        _1656 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1657 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1658 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1644;
        _1645 = _1644;
        _1646 = _1644;
        _1647 = _1644;
        _1648 = _1644;
        _1649 = _1644;
        _1650 = _1644;
        _1651 = _1644;
        _1652 = _1644;
        _1653 = _1644;
        _1654 = _1644;
        _1655 = _1644;
        _1656 = 0.0;
        _1657 = 0.0;
        _1658 = 0.0;
    }
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1684 = fma(_1313, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305));
        float _1688 = fma(_1313, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305));
        float _1692 = fma(_1313, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305));
        float _1715 = _1305 + _1064;
        float _1716 = _1309 + _1065;
        float _1717 = _1313 + _1066;
        float _1727 = fma(_1717, cbModelParam._m0[30u].z, fma(_1716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1715)) - _1684;
        float _1728 = fma(_1717, cbModelParam._m0[31u].z, fma(_1716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1715)) - _1688;
        float _1729 = fma(_1717, cbModelParam._m0[32u].z, fma(_1716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1715)) - _1692;
        float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
        float _1746 = ((_1733 * _1727) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1684 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1747 = ((_1733 * _1728) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1688 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1748 = ((_1733 * _1729) / cbModelParam._m0[35u].z) + ((((((_1692 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1750 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1757 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1764 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1771 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        float _1783 = exp2((_1750.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1750.x + (-0.5));
        float _1785 = _1783 * (_1750.y + (-0.5));
        float _1786 = _1783 * (_1750.z + (-0.5));
        float _1793 = exp2((_1757.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1757.x + (-0.5));
        float _1795 = _1793 * (_1757.y + (-0.5));
        float _1796 = _1793 * (_1757.z + (-0.5));
        float _1803 = exp2((_1764.w + (-0.5)) * 20.0) * 2.0;
        float _1804 = _1803 * (_1764.x + (-0.5));
        float _1805 = _1803 * (_1764.y + (-0.5));
        float _1806 = _1803 * (_1764.z + (-0.5));
        float _1813 = exp2((_1771.w + (-0.5)) * 20.0) * 2.0;
        float _1814 = _1813 * (_1771.x + (-0.5));
        float _1815 = _1813 * (_1771.y + (-0.5));
        float _1816 = _1813 * (_1771.z + (-0.5));
        float _1817 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1818 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1819 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1820 = _1784 * 0.5;
        float _1821 = _1794 * 0.5;
        float _1822 = _1804 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1064, _1065, _1066), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1817 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4454 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1847 + 1.0))) + _1852) * _1817;
        float _1862 = _1785 * 0.5;
        float _1863 = _1795 * 0.5;
        float _1864 = _1805 * 0.5;
        float _1865 = dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864));
        float _1870 = (_1865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1865);
        float _1878 = (dot(vec3(_1064, _1065, _1066), vec3(_1870 * _1862, _1870 * _1863, _1870 * _1864)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1887 = sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864)) / (_1818 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1889 = _1888 * 2.0;
        float _1893 = (1.0 - _1888) / (_1888 + 1.0);
        float _4487 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1903 = ((((1.0 - _1894) * (_1889 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1889 + 1.0))) + _1894) * _1818;
        float _1904 = _1786 * 0.5;
        float _1905 = _1796 * 0.5;
        float _1906 = _1806 * 0.5;
        float _1907 = dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906));
        float _1912 = (_1907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1907);
        float _1920 = (dot(vec3(_1064, _1065, _1066), vec3(_1912 * _1904, _1912 * _1905, _1912 * _1906)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1929 = sqrt(((_1905 * _1905) + (_1904 * _1904)) + (_1906 * _1906)) / (_1819 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1931 = _1930 * 2.0;
        float _1935 = (1.0 - _1930) / (_1930 + 1.0);
        float _4520 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1945 = ((((1.0 - _1936) * (_1931 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1931 + 1.0))) + _1936) * _1819;
        _1953 = _1786;
        _1954 = _1785;
        _1955 = _1784;
        _1956 = _1796;
        _1957 = _1795;
        _1958 = _1794;
        _1959 = _1806;
        _1960 = _1805;
        _1961 = _1804;
        _1962 = _1819;
        _1963 = _1818;
        _1964 = _1817;
        _1965 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
        _1966 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)));
        _1967 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)));
    }
    else
    {
        _1953 = _1644;
        _1954 = _1644;
        _1955 = _1644;
        _1956 = _1644;
        _1957 = _1644;
        _1958 = _1644;
        _1959 = _1644;
        _1960 = _1644;
        _1961 = _1644;
        _1962 = _1644;
        _1963 = _1644;
        _1964 = _1644;
        _1965 = 0.0;
        _1966 = 0.0;
        _1967 = 0.0;
    }
    float _1977 = (cbModelParam._m0[1u].x * (_1965 - _1656)) + _1656;
    float _1978 = (cbModelParam._m0[1u].x * (_1966 - _1657)) + _1657;
    float _1979 = (cbModelParam._m0[1u].x * (_1967 - _1658)) + _1658;
    float _2000 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1977));
    float _2021 = _1249 * 0.5;
    float _2022 = _1250 * 0.5;
    float _2023 = _1251 * 0.5;
    float _2024 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1955, _1958, _1961, _1964));
    float _2027 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1954, _1957, _1960, _1963));
    float _2030 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1953, _1956, _1959, _1962));
    float _2064;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2037 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1643, _1647, _1650, _1653));
        float _2041 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1645, _1648, _1651, _1654));
        float _2045 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1646, _1649, _1652, _1655));
        float _2052 = dot(vec4(cbModelParam._m0[39u]), vec4(_2021, _2022, _2023, 1.0));
        _2064 = dot(vec3(isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2052) ? 0.0 : (isnan(0.0) ? _2052 : max(0.0, _2052))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2064 = 1.0;
    }
    float _2075;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2066 = dot(vec4(cbModelParam._m0[40u]), vec4(_2021, _2022, _2023, 1.0));
        _2075 = dot(vec3(isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)), isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2066) ? 0.0 : (isnan(0.0) ? _2066 : max(0.0, _2066))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2075 = 1.0;
    }
    float _2079 = (_2075 * cbModelParam._m0[1u].x) + (_2064 * (1.0 - cbModelParam._m0[1u].x));
    float _2089 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1067);
    float _2090 = isnan(_2089) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2089 : min(cbModelParam._m0[25u].z, _2089));
    float _2170;
    float _2172;
    float _2174;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2137 = fma(_1313, cbModelParam._m0[13u].z, fma(_1309, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1305)) + cbModelParam._m0[13u].w;
        float _2141 = fma(_1313, cbModelParam._m0[14u].z, fma(_1309, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1305)) + cbModelParam._m0[14u].w;
        float _2145 = fma(_1313, cbModelParam._m0[15u].z, fma(_1309, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1305)) + cbModelParam._m0[15u].w;
        float _2148 = fma(_1251, cbModelParam._m0[13u].z, fma(_1250, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1249));
        float _2151 = fma(_1251, cbModelParam._m0[14u].z, fma(_1250, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1249));
        float _2154 = fma(_1251, cbModelParam._m0[15u].z, fma(_1250, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1249));
        float _2182;
        if (_2148 > 0.0)
        {
            _2182 = abs((1.0 - _2137) / _2148);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2137 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2182 = frontier_phi_17_15_ladder;
        }
        float _2405;
        if (_2151 > 0.0)
        {
            _2405 = abs((1.0 - _2141) / _2151);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2141 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2405 = frontier_phi_26_22_ladder;
        }
        float _2662;
        if (_2154 > 0.0)
        {
            _2662 = abs((1.0 - _2145) / _2154);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2145 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2662 = frontier_phi_38_33_ladder;
        }
        float _2664 = isnan(_2405) ? _2182 : (isnan(_2182) ? _2405 : min(_2182, _2405));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _2148) + _2137;
        float _2670 = (_2665 * _2151) + _2141;
        float _2671 = (_2665 * _2154) + _2145;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2672;
        float _2676 = _2672 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 > _2676) || ((_2670 < _2674) || ((_2669 < _2674) || (_2669 > _2676))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2671, cbModelParam._m0[9u].z, fma(_2670, cbModelParam._m0[9u].y, _2669 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2671, cbModelParam._m0[10u].z, fma(_2670, cbModelParam._m0[10u].y, _2669 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2671, cbModelParam._m0[11u].z, fma(_2670, cbModelParam._m0[11u].y, _2669 * cbModelParam._m0[11u].x))), _2090);
            frontier_phi_16_38_ladder = _2799.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2799.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2799.x * cbModelParam._m0[1u].y;
        }
        _2170 = frontier_phi_16_38_ladder_2;
        _2172 = frontier_phi_16_38_ladder_1;
        _2174 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2158 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1249, _1250, _1251), _2090);
        _2170 = _2158.x * cbModelParam._m0[1u].y;
        _2172 = _2158.y * cbModelParam._m0[1u].y;
        _2174 = _2158.z * cbModelParam._m0[1u].y;
    }
    float _2178 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1067);
    float _2179 = isnan(_2178) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2178 : min(cbModelParam._m0[25u].w, _2178));
    float _2268;
    float _2270;
    float _2272;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2232 = fma(_1313, cbModelParam._m0[21u].z, fma(_1309, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1305)) + cbModelParam._m0[21u].w;
        float _2236 = fma(_1313, cbModelParam._m0[22u].z, fma(_1309, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1305)) + cbModelParam._m0[22u].w;
        float _2240 = fma(_1313, cbModelParam._m0[23u].z, fma(_1309, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1305)) + cbModelParam._m0[23u].w;
        float _2243 = fma(_1251, cbModelParam._m0[21u].z, fma(_1250, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1249));
        float _2246 = fma(_1251, cbModelParam._m0[22u].z, fma(_1250, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1249));
        float _2249 = fma(_1251, cbModelParam._m0[23u].z, fma(_1250, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1249));
        float _2410;
        if (_2243 > 0.0)
        {
            _2410 = abs((1.0 - _2232) / _2243);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2243 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2232 + 1.0) / _2243);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2410 = frontier_phi_28_24_ladder;
        }
        float _2689;
        if (_2246 > 0.0)
        {
            _2689 = abs((1.0 - _2236) / _2246);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2246 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2236 + 1.0) / _2246);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2689 = frontier_phi_40_35_ladder;
        }
        float _2902;
        if (_2249 > 0.0)
        {
            _2902 = abs((1.0 - _2240) / _2249);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2249 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2240 + 1.0) / _2249);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2902 = frontier_phi_49_46_ladder;
        }
        float _2904 = isnan(_2689) ? _2410 : (isnan(_2410) ? _2689 : min(_2410, _2689));
        float _2905 = isnan(_2902) ? _2904 : (isnan(_2904) ? _2902 : min(_2904, _2902));
        float _2909 = (_2905 * _2243) + _2232;
        float _2910 = (_2905 * _2246) + _2236;
        float _2911 = (_2905 * _2249) + _2240;
        float _2912 = _2905 * 9.9999997473787516355514526367188e-05;
        float _2913 = (-1.0) - _2912;
        float _2915 = _2912 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2911 > _2915) || ((_2911 < _2913) || ((_2910 > _2915) || ((_2910 < _2913) || ((_2909 < _2913) || (_2909 > _2915))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2911, cbModelParam._m0[17u].z, fma(_2910, cbModelParam._m0[17u].y, _2909 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2911, cbModelParam._m0[18u].z, fma(_2910, cbModelParam._m0[18u].y, _2909 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2911, cbModelParam._m0[19u].z, fma(_2910, cbModelParam._m0[19u].y, _2909 * cbModelParam._m0[19u].x))), _2179);
            frontier_phi_25_49_ladder = _3110.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3110.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3110.x * cbModelParam._m0[1u].z;
        }
        _2268 = frontier_phi_25_49_ladder_2;
        _2270 = frontier_phi_25_49_ladder_1;
        _2272 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1249, _1250, _1251), _2179);
        _2268 = _2252.x * cbModelParam._m0[1u].z;
        _2270 = _2252.y * cbModelParam._m0[1u].z;
        _2272 = _2252.z * cbModelParam._m0[1u].z;
    }
    float _2285 = (((_1276 * _1225) + _1277) * _1241) * ((cbModelParam._m0[1u].w * (_2268 - _2170)) + _2170);
    float _2287 = (((_1276 * _1227) + _1277) * _1241) * ((cbModelParam._m0[1u].w * (_2270 - _2172)) + _2172);
    float _2289 = (((_1276 * _1228) + _1277) * _1241) * ((cbModelParam._m0[1u].w * (_2272 - _2174)) + _2174);
    float _2292 = fma(_2289, cbSceneParam._m0[89u].z, fma(_2287, cbSceneParam._m0[89u].y, _2285 * cbSceneParam._m0[89u].x));
    float _2295 = fma(_2289, cbSceneParam._m0[90u].z, fma(_2287, cbSceneParam._m0[90u].y, _2285 * cbSceneParam._m0[90u].x));
    float _2298 = fma(_2289, cbSceneParam._m0[91u].z, fma(_2287, cbSceneParam._m0[91u].y, _2285 * cbSceneParam._m0[91u].x));
    vec4 _2306 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1163, _1164));
    float _2308 = _2306.w;
    float _2320 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2308);
    float _2321 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2308);
    float _2322 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2308);
    uvec4 _2326 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2328 = _2326.x * 14u;
    uint _2329 = _2328 + 13u;
    float _2336 = _1241 + (-1.0);
    float _2341 = (cbLight._m0[_2329].x * _2336) + 1.0;
    float _2342 = (cbLight._m0[_2329].y * _2336) + 1.0;
    float _2343 = (cbLight._m0[_2329].z * _2336) + 1.0;
    float _2344 = (cbLight._m0[_2329].w * _2336) + 1.0;
    uint _2345 = _2328 + 5u;
    float _2351 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
    uint _2355 = _2328 + 4u;
    float _2364 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
    uint _2368 = _2328 | 1u;
    float _2379 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_1064, _1065, _1066));
    float _2382 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_1064, _1065, _1066));
    float _4656 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _4667 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2387 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2389 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2396 = ((cbLight._m0[_2345].x * _2351) * _2389) + (((cbLight._m0[_2355].x * _2320) * _2364) * _2387);
    float _2397 = ((_2351 * cbLight._m0[_2345].y) * _2389) + (((cbLight._m0[_2355].y * _2321) * _2364) * _2387);
    float _2398 = ((_2351 * cbLight._m0[_2345].z) * _2389) + (((cbLight._m0[_2355].z * _2322) * _2364) * _2387);
    uvec4 _2402 = floatBitsToUint(cbLight._m0[_2328 + 12u]);
    bool _2404 = _2402.x == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2404)
    {
        _2415 = _2396;
        _2417 = _2397;
        _2419 = _2398;
    }
    else
    {
        uint _2423 = _2328 + 6u;
        float _2439 = (dot(vec3(cbLight._m0[_2328 + 2u].xyz), vec3(_1064, _1065, _1066)) * 0.5) + 0.5;
        float _2440 = _2439 * _2439;
        float _4678 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2441 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2442 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2415 = (((cbLight._m0[_2423].x * 0.3183098733425140380859375) * _2441) * _2442) + _2396;
        _2417 = (((cbLight._m0[_2423].y * 0.3183098733425140380859375) * _2441) * _2442) + _2397;
        _2419 = (((cbLight._m0[_2423].z * 0.3183098733425140380859375) * _2441) * _2442) + _2398;
    }
    bool _2422 = _2402.y == 0u;
    float _2460;
    float _2462;
    float _2464;
    if (_2422)
    {
        _2460 = _2415;
        _2462 = _2417;
        _2464 = _2419;
    }
    else
    {
        uint _2633 = _2328 + 7u;
        float _2649 = (dot(vec3(cbLight._m0[_2328 + 3u].xyz), vec3(_1064, _1065, _1066)) * 0.5) + 0.5;
        float _2650 = _2649 * _2649;
        float _4694 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2651 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2652 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2460 = (((cbLight._m0[_2633].x * 0.3183098733425140380859375) * _2651) * _2652) + _2415;
        _2462 = (((cbLight._m0[_2633].y * 0.3183098733425140380859375) * _2651) * _2652) + _2417;
        _2464 = (((cbLight._m0[_2633].z * 0.3183098733425140380859375) * _2651) * _2652) + _2419;
    }
    uint _2467 = _2328 + 8u;
    float _2480 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2328].w)) * _1067) * 0.949999988079071044921875);
    float _2481 = _2480 * _2480;
    float _2482 = cbLight._m0[_2328].x + _1143;
    float _2483 = cbLight._m0[_2328].y + _1144;
    float _2484 = cbLight._m0[_2328].z + _1145;
    float _2488 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
    float _2489 = _2488 * _2482;
    float _2490 = _2488 * _2483;
    float _2491 = _2488 * _2484;
    float _2492 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2328].xyz));
    float _4710 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _4721 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _2496 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2497 = dot(vec3(_1064, _1065, _1066), vec3(_2489, _2490, _2491));
    float _4732 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2501 = dot(vec3(cbLight._m0[_2328].xyz), vec3(_2489, _2490, _2491));
    float _4743 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2505 = _2481 * _2481;
    float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
    float _2517 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2518 = 0.959999978542327880859375 - _1222;
    float _2520 = 0.959999978542327880859375 - _1223;
    float _2521 = 0.959999978542327880859375 - _1224;
    float _2528 = 1.0 - _2481;
    float _2539 = (0.5 / (((_2496 * ((_2495 * _2528) + _2481)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2528) + _2481) * _2495))) * _2495;
    float _4754 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
    uint _2555 = _2328 + 9u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _1067) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2368].x + _1143;
    float _2569 = cbLight._m0[_2368].y + _1144;
    float _2570 = cbLight._m0[_2368].z + _1145;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2368].xyz));
    float _4765 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2582 = dot(vec3(_1064, _1065, _1066), vec3(_2575, _2576, _2577));
    float _4776 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2586 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2575, _2576, _2577));
    float _4787 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2590 = _2567 * _2567;
    float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
    float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2608 = 1.0 - _2567;
    float _2618 = (0.5 / (((_2496 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2608) + _2567) * _2581))) * _2581;
    float _4798 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
    float _2630 = (((((_2601 * _2518) + _1225) * cbLight._m0[_2555].x) * _2620) * _2351) + ((((cbLight._m0[_2467].x * _2320) * ((_2517 * _2518) + _1225)) * _2541) * _2364);
    float _2631 = (((((_2601 * _2520) + _1227) * cbLight._m0[_2555].y) * _2620) * _2351) + ((((cbLight._m0[_2467].y * _2321) * ((_2517 * _2520) + _1227)) * _2541) * _2364);
    float _2632 = (((((_2601 * _2521) + _1228) * cbLight._m0[_2555].z) * _2620) * _2351) + ((((cbLight._m0[_2467].z * _2322) * ((_2517 * _2521) + _1228)) * _2541) * _2364);
    float _2694;
    float _2696;
    float _2698;
    if (_2404)
    {
        _2694 = _2630;
        _2696 = _2631;
        _2698 = _2632;
    }
    else
    {
        uint _2700 = _2328 + 2u;
        uint _2704 = _2328 + 10u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _1067) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _1143;
        float _2721 = cbLight._m0[_2700].y + _1144;
        float _2722 = cbLight._m0[_2700].z + _1145;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2700].xyz));
        float _4809 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2734 = dot(vec3(_1064, _1065, _1066), vec3(_2727, _2728, _2729));
        float _4820 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4831 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2753 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2760 = 1.0 - _2719;
        float _2770 = (0.5 / (((_2496 * ((_2733 * _2760) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2760) + _2719) * _2733))) * _2733;
        float _4842 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2772 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2773 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2694 = (((((_2753 * _2518) + _1225) * cbLight._m0[_2704].x) * _2772) * _2773) + _2630;
        _2696 = (((((_2753 * _2520) + _1227) * cbLight._m0[_2704].y) * _2772) * _2773) + _2631;
        _2698 = (((((_2753 * _2521) + _1228) * cbLight._m0[_2704].z) * _2772) * _2773) + _2632;
    }
    float _2808;
    float _2810;
    float _2812;
    if (_2422)
    {
        _2808 = _2694;
        _2810 = _2696;
        _2812 = _2698;
    }
    else
    {
        uint _2819 = _2328 + 3u;
        uint _2823 = _2328 + 11u;
        float _2837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2819].w)) * _1067) * 0.949999988079071044921875);
        float _2838 = _2837 * _2837;
        float _2839 = cbLight._m0[_2819].x + _1143;
        float _2840 = cbLight._m0[_2819].y + _1144;
        float _2841 = cbLight._m0[_2819].z + _1145;
        float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
        float _2846 = _2845 * _2839;
        float _2847 = _2845 * _2840;
        float _2848 = _2845 * _2841;
        float _2849 = dot(vec3(_1064, _1065, _1066), vec3(cbLight._m0[_2819].xyz));
        float _4858 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2853 = dot(vec3(_1064, _1065, _1066), vec3(_2846, _2847, _2848));
        float _4869 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2856 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2857 = dot(vec3(cbLight._m0[_2819].xyz), vec3(_2846, _2847, _2848));
        float _4880 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2861 = _2838 * _2838;
        float _2865 = ((_2856 * _2856) * (_2861 + (-1.0))) + 1.0;
        float _2872 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
        float _2879 = 1.0 - _2838;
        float _2889 = (0.5 / (((_2496 * ((_2852 * _2879) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2496 * _2879) + _2838) * _2852))) * _2852;
        float _4891 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2891 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2861 / ((_2865 * _2865) * 3.141590118408203125));
        float _2892 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
        _2808 = (((((_2872 * _2518) + _1225) * cbLight._m0[_2823].x) * _2891) * _2892) + _2694;
        _2810 = (((((_2872 * _2520) + _1227) * cbLight._m0[_2823].y) * _2891) * _2892) + _2696;
        _2812 = (((((_2872 * _2521) + _1228) * cbLight._m0[_2823].z) * _2891) * _2892) + _2698;
    }
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    if (_2326.y == 0u)
    {
        float _2967 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2968 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2967;
        float _2969 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2967;
        float _2970 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2967;
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.x;
        uint _2994 = uint((float(_2982.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1164) / _2983))) + floor(float(uint(cbSceneParam._m0[85u].x * _1163) / _2983)));
        float _3004 = (log2(_2970 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3005 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        uint _3008 = uint(isnan(14.0) ? _3005 : (isnan(_3005) ? 14.0 : min(_3005, 14.0)));
        uvec4 _3013 = texelFetch(g_lightClusterGridBuffer, int(((_3008 << 2u) + (_2994 << 6u)) >> 2u));
        uint _3014 = _3013.x;
        uint _3015 = _2982.z;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        if (((((1u << ((_3015 >> 4u) & 15u)) + 4294967295u) & _3014) == 0u) || ((_3015 & 240u) == 0u))
        {
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
            _3125 = 0.0;
        }
        else
        {
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3126;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            float _3273 = 0.0;
            uint _3274 = 0u;
            uint _3283;
            bool _3284;
            for (;;)
            {
                _3283 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3274 << 2u)) >> 2u)).x;
                _3284 = _3283 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3284)
                {
                    frontier_phi_66_pred = _3268;
                    frontier_phi_66_pred_1 = _3273;
                    frontier_phi_66_pred_2 = _3272;
                    frontier_phi_66_pred_3 = _3271;
                    frontier_phi_66_pred_4 = _3270;
                    frontier_phi_66_pred_5 = _3269;
                }
                else
                {
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    uint _3419;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3272;
                    _3418 = _3273;
                    _3419 = _3283;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    for (;;)
                    {
                        uint _3423 = uint(findLSB(_3419)) + (_3274 << 5u);
                        uint _3420 = (_3419 + 4294967295u) & _3419;
                        uint _3425 = _3423 * 48u;
                        vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 3u)).x));
                        uint _3445 = (_3423 * 48u) + 4u;
                        vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3464 = (_3423 * 48u) + 8u;
                        vec3 _3475 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3464)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 2u)).x));
                        float _3479 = _3439.x - _2968;
                        float _3480 = _3439.y - _2969;
                        float _3481 = _3439.z - _2970;
                        float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                        float _3485 = inversesqrt(_3482);
                        float _3486 = _3485 * _3479;
                        float _3487 = _3485 * _3480;
                        float _3488 = _3485 * _3481;
                        float _3489 = dot(vec3(_1182, _1185, _1188), vec3(_3486, _3487, _3488));
                        float _3494 = 1.0 - (_3482 * _3439.w);
                        float _4917 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3495 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3496 = sqrt(_3482) * _3458.w;
                        float _3499 = 1.39999997615814208984375 / (_3496 + 1.39999997615814208984375);
                        float _3500 = _3499 * _3499;
                        float _3503 = ((1.0 - _3500) * _3489) + _3500;
                        float _3506 = _3496 * _3496;
                        float _3510 = ((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3495) / ((_3506 * 0.699999988079071044921875) + 1.0);
                        float _3514 = (-0.0) - _2968;
                        float _3515 = (-0.0) - _2969;
                        float _3516 = (-0.0) - _2970;
                        float _3520 = inversesqrt(dot(vec3(_3514, _3515, _3516), vec3(_3514, _3515, _3516)));
                        float _3521 = _3520 * _3514;
                        float _3522 = _3520 * _3515;
                        float _3523 = _3520 * _3516;
                        float _3531 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                        float _3532 = 1.0 - _1257;
                        float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                        float _3540 = _3539 * _3539;
                        float _3541 = _3540 * _3540;
                        float _3542 = _3521 + _3486;
                        float _3543 = _3522 + _3487;
                        float _3544 = _3523 + _3488;
                        float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                        float _3552 = dot(vec3(_1182, _1185, _1188), vec3(_3521, _3522, _3523));
                        float _4933 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3555 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3556 = dot(vec3(_1182, _1185, _1188), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                        float _4944 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                        float _3559 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                        float _3564 = _3499 * _3540;
                        float _3565 = _3564 * _3564;
                        float _3568 = ((1.0 - _3565) * _3489) + _3565;
                        float _4955 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3569 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3570 = 1.0 - _3540;
                        float _3580 = (0.5 / (((_3569 * ((_3555 * _3570) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3569 * _3570) + _3540) * _3555))) * _3569;
                        float _4966 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3591 = (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3563 * _3563) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125))) * _3495;
                        _3343 = (_3510 * _3458.x) + _3416;
                        _3344 = (_3510 * _3458.y) + _3417;
                        _3345 = (_3510 * _3458.z) + _3418;
                        _3340 = (_3591 * _3475.x) + _3413;
                        _3341 = (_3591 * _3475.y) + _3414;
                        _3342 = (_3591 * _3475.z) + _3415;
                        if (_3420 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3344;
                            _3418 = _3345;
                            _3419 = _3420;
                        }
                    }
                    frontier_phi_66_pred = _3340;
                    frontier_phi_66_pred_1 = _3345;
                    frontier_phi_66_pred_2 = _3344;
                    frontier_phi_66_pred_3 = _3343;
                    frontier_phi_66_pred_4 = _3342;
                    frontier_phi_66_pred_5 = _3341;
                }
                _3116 = frontier_phi_66_pred;
                _3126 = frontier_phi_66_pred_1;
                _3124 = frontier_phi_66_pred_2;
                _3122 = frontier_phi_66_pred_3;
                _3120 = frontier_phi_66_pred_4;
                _3118 = frontier_phi_66_pred_5;
                uint _3275 = _3274 + 1u;
                if (_3275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3268 = _3116;
                    _3269 = _3118;
                    _3270 = _3120;
                    _3271 = _3122;
                    _3272 = _3124;
                    _3273 = _3126;
                    _3274 = _3275;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
            _3125 = _3126;
        }
        uvec4 _3129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3130 = _3129.z;
        uint _3132 = (_3130 >> 8u) & 15u;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        if (((4294967295u << _3132) & _3014) == 0u)
        {
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
            _3242 = _3121;
            _3244 = _3123;
            _3246 = _3125;
        }
        else
        {
            float _3261 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
            float _3262 = _3261 * _2968;
            float _3263 = _3261 * _2969;
            float _3264 = _3261 * _2970;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3132 < ((_3130 >> 12u) & 15u))
            {
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3247;
                float _3396 = _3115;
                float _3397 = _3117;
                float _3398 = _3119;
                float _3399 = _3121;
                float _3400 = _3123;
                float _3401 = _3125;
                uint _3402 = _3132;
                uint _3411;
                bool _3412;
                for (;;)
                {
                    _3411 = texelFetch(g_lightClassification, int((((_3008 << 5u) + (_2994 << 9u)) + (_3402 << 2u)) >> 2u)).x;
                    _3412 = _3411 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3412)
                    {
                        frontier_phi_77_pred = _3401;
                        frontier_phi_77_pred_1 = _3400;
                        frontier_phi_77_pred_2 = _3399;
                        frontier_phi_77_pred_3 = _3398;
                        frontier_phi_77_pred_4 = _3397;
                        frontier_phi_77_pred_5 = _3396;
                    }
                    else
                    {
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3902;
                        float _3903;
                        float _3618 = _3396;
                        float _3619 = _3397;
                        float _3620 = _3398;
                        float _3621 = _3399;
                        float _3622 = _3400;
                        float _3623 = _3401;
                        uint _3624 = _3411;
                        uint _3625;
                        vec4 _3650;
                        float _3651;
                        vec4 _3666;
                        vec3 _3678;
                        vec4 _3693;
                        vec4 _3708;
                        float _3754;
                        bool _3755;
                        for (;;)
                        {
                            uint _3635 = ((_3402 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3624));
                            _3625 = (_3624 + 4294967295u) & _3624;
                            uint _3637 = _3635 * 40u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            _3651 = _3650.w;
                            uint _3653 = (_3635 * 40u) + 4u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3635 * 40u) + 8u;
                            _3678 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x));
                            uint _3680 = (_3635 * 40u) + 16u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            uint _3695 = (_3635 * 40u) + 20u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3710 = (_3635 * 40u) + 24u;
                            vec4 _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3729 = (_3635 * 40u) + 28u;
                            vec4 _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            _3754 = fma(_2970, _3742.z, fma(_2969, _3742.y, _3742.x * _2968)) + _3742.w;
                            _3755 = !((fma(_2970, _3723.z, fma(_2969, _3723.y, _3723.x * _2968)) + _3723.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3755)
                            {
                                float _3782 = _3650.x - _2968;
                                float _3783 = _3650.y - _2969;
                                float _3784 = _3650.z - _2970;
                                float _3785 = dot(vec3(_3782, _3783, _3784), vec3(_3782, _3783, _3784));
                                float _3788 = inversesqrt(_3785);
                                float _3789 = _3788 * _3782;
                                float _3790 = _3788 * _3783;
                                float _3791 = _3788 * _3784;
                                float _3795 = 1.0 - (_3785 / (_3651 * _3651));
                                float _4977 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3796 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3800 = sqrt(_3785) * _3666.w;
                                float _3802 = 1.39999997615814208984375 / (_3800 + 1.39999997615814208984375);
                                float _3803 = _3802 * _3802;
                                float _3806 = ((1.0 - _3803) * dot(vec3(_3789, _3790, _3791), vec3(_1182, _1185, _1188))) + _3803;
                                float _3809 = _3800 * _3800;
                                float _3813 = (fma(_2970, _3693.z, fma(_2969, _3693.y, _3693.x * _2968)) + _3693.w) / _3754;
                                float _3814 = (fma(_2970, _3708.z, fma(_2969, _3708.y, _3708.x * _2968)) + _3708.w) / _3754;
                                float _3818 = 1.0 - dot(vec2(_3813, _3814), vec2(_3813, _3814));
                                float _4993 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3820 = _3819 * (((isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0))) * _3796) / ((_3809 * 0.699999988079071044921875) + 1.0));
                                float _3832 = exp2(log2(1.0 / ((_3809 * 3.5) + 5.0)) * 0.25);
                                float _3833 = 1.0 - _1257;
                                float _3840 = sqrt(1.0 - ((1.0 - (_3833 * _3833)) * (1.0 - (_3832 * _3832))));
                                float _3841 = _3840 * _3840;
                                float _3842 = _3841 * _3841;
                                float _3843 = _3789 - _3262;
                                float _3844 = _3790 - _3263;
                                float _3845 = _3791 - _3264;
                                float _3849 = inversesqrt(dot(vec3(_3843, _3844, _3845), vec3(_3843, _3844, _3845)));
                                float _3853 = dot(vec3(_1182, _1185, _1188), vec3((-0.0) - _3262, (-0.0) - _3263, (-0.0) - _3264));
                                float _5004 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3856 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3857 = dot(vec3(_1182, _1185, _1188), vec3(_3849 * _3843, _3849 * _3844, _3849 * _3845));
                                float _5015 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3860 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3864 = ((_3860 * _3860) * (_3842 + (-1.0))) + 1.0;
                                float _3865 = _3802 * _3841;
                                float _3866 = _3865 * _3865;
                                float _3872 = ((1.0 - _3866) * dot(vec3(_1182, _1185, _1188), vec3(_3789, _3790, _3791))) + _3866;
                                float _5026 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3873 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3874 = 1.0 - _3841;
                                float _3884 = (0.5 / (((_3873 * ((_3856 * _3874) + _3841)) + 9.9999999392252902907785028219223e-09) + (((_3873 * _3874) + _3841) * _3856))) * _3873;
                                float _5037 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3894 = (_3819 * _3796) * (((_3842 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3864 * _3864) * ((_3809 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3820 * _3666.y;
                                frontier_phi_83_pred_1 = _3820 * _3666.x;
                                frontier_phi_83_pred_2 = _3894 * _3678.z;
                                frontier_phi_83_pred_3 = _3894 * _3678.y;
                                frontier_phi_83_pred_4 = _3894 * _3678.x;
                                frontier_phi_83_pred_5 = _3820 * _3666.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3902 = frontier_phi_83_pred;
                            _3901 = frontier_phi_83_pred_1;
                            _3900 = frontier_phi_83_pred_2;
                            _3899 = frontier_phi_83_pred_3;
                            _3898 = frontier_phi_83_pred_4;
                            _3903 = frontier_phi_83_pred_5;
                            _3608 = _3901 + _3621;
                            _3609 = _3902 + _3622;
                            _3610 = _3903 + _3623;
                            _3605 = _3898 + _3618;
                            _3606 = _3899 + _3619;
                            _3607 = _3900 + _3620;
                            if (_3625 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3608;
                                _3622 = _3609;
                                _3623 = _3610;
                                _3624 = _3625;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3610;
                        frontier_phi_77_pred_1 = _3609;
                        frontier_phi_77_pred_2 = _3608;
                        frontier_phi_77_pred_3 = _3607;
                        frontier_phi_77_pred_4 = _3606;
                        frontier_phi_77_pred_5 = _3605;
                    }
                    _3247 = frontier_phi_77_pred;
                    _3245 = frontier_phi_77_pred_1;
                    _3243 = frontier_phi_77_pred_2;
                    _3241 = frontier_phi_77_pred_3;
                    _3239 = frontier_phi_77_pred_4;
                    _3237 = frontier_phi_77_pred_5;
                    uint _3403 = _3402 + 1u;
                    if (_3403 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3396 = _3237;
                        _3397 = _3239;
                        _3398 = _3241;
                        _3399 = _3243;
                        _3400 = _3245;
                        _3401 = _3247;
                        _3402 = _3403;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3241;
                frontier_phi_58_59_ladder_1 = _3247;
                frontier_phi_58_59_ladder_2 = _3245;
                frontier_phi_58_59_ladder_3 = _3243;
                frontier_phi_58_59_ladder_4 = _3239;
                frontier_phi_58_59_ladder_5 = _3237;
            }
            else
            {
                frontier_phi_58_59_ladder = _3119;
                frontier_phi_58_59_ladder_1 = _3125;
                frontier_phi_58_59_ladder_2 = _3123;
                frontier_phi_58_59_ladder_3 = _3121;
                frontier_phi_58_59_ladder_4 = _3117;
                frontier_phi_58_59_ladder_5 = _3115;
            }
            _3236 = frontier_phi_58_59_ladder_5;
            _3238 = frontier_phi_58_59_ladder_4;
            _3240 = frontier_phi_58_59_ladder;
            _3242 = frontier_phi_58_59_ladder_3;
            _3244 = frontier_phi_58_59_ladder_2;
            _3246 = frontier_phi_58_59_ladder_1;
        }
        float _3251 = isnan(1.0) ? _1241 : (isnan(_1241) ? 1.0 : min(_1241, 1.0));
        _3027 = (_3251 * _3242) + _2460;
        _3029 = (_3251 * _3244) + _2462;
        _3031 = (_3251 * _3246) + _2464;
        _3033 = ((_3236 * _1225) * _3251) + _2808;
        _3035 = ((_3238 * _1227) * _3251) + _2810;
        _3037 = ((_3240 * _1228) * _3251) + _2812;
    }
    else
    {
        _3027 = _2460;
        _3029 = _2462;
        _3031 = _2464;
        _3033 = _2808;
        _3035 = _2810;
        _3037 = _2812;
    }
    float _5053 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _5064 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _5075 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _3054 = ((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3027 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1241))) + ((_3033 + ((isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))) * _2079)) * cbPerFrame._m0[3u].x);
    float _3055 = ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3029 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1241))) + ((_3035 + ((isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))) * _2079)) * cbPerFrame._m0[3u].x);
    float _3056 = ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3031 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1241))) + ((_3037 + ((isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0))) * _2079)) * cbPerFrame._m0[3u].x);
    uint _3057 = _292 + 6u;
    float _3065 = _1163 / cbSceneParam._m0[86u].x;
    float _3066 = _1164 / cbSceneParam._m0[86u].y;
    vec4 _3080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, (log2((isnan(cbSceneParam._m0[77u].w) ? _1086 : (isnan(_1086) ? cbSceneParam._m0[77u].w : min(_1086, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3082 = _3080.x;
    float _3083 = _3080.y;
    float _3084 = _3080.z;
    float _3085 = _3080.w;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    if (_1086 > cbSceneParam._m0[78u].w)
    {
        float _3140 = isnan(_1086) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1086 : min(cbSceneParam._m0[80u].w, _1086));
        float _3141 = _3140 / _1086;
        float _3152 = _3141 * _1136;
        float _3153 = _1137 * _3141;
        float _3154 = (-0.0) - _3153;
        float _3156 = _3141 * _1138;
        float _3158 = (cbSceneParam._m0[77u].w * _3154) / _3140;
        float _3159 = _3158 + cbSceneParam._m0[79u].w;
        float _3160 = cbSceneParam._m0[79u].w - _3153;
        float _3166 = sqrt(((_3152 * _3152) + (_3153 * _3153)) + (_3156 * _3156));
        float _3169 = (1.0 - (cbSceneParam._m0[77u].w / _3140)) * _3166;
        float _3174 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3176 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3353;
        if (abs((_3154 - _3158) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3353 = ((((_3159 > 0.0) ? exp2(_3174 * _3159) : (2.0 - exp2(_3176 * _3159))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3169;
        }
        else
        {
            float _3297 = 1.0 / cbSceneParam._m0[80u].x;
            float _3298 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : max(_3159, _3160));
            float _3299 = isnan(_3160) ? _3159 : (isnan(_3159) ? _3160 : min(_3159, _3160));
            float _3308 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : min(_3298, 0.0));
            float _3309 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : min(_3299, 0.0));
            _3353 = ((abs(_3166 / _3154) * cbSceneParam._m0[80u].y) * ((((_3308 - _3309) * 2.0) - ((exp2(_3174 * (isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0)))) - exp2(_3174 * (isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0))))) * _3297)) - ((exp2(_3176 * _3308) - exp2(_3176 * _3309)) * _3297))) + (_3169 * cbSceneParam._m0[80u].z);
        }
        vec4 _3355 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3065, _3066, 1.0), 0.0);
        float _3364 = exp2((_3353 * (-1.44269502162933349609375)) * (1.0 - _3355.w));
        float _3365 = log2(_3364);
        float _3381 = log2(_3085);
        _3178 = (exp2(_3381 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].x)) * _3355.x) / cbSceneParam._m0[78u].x)) + _3082;
        _3180 = (exp2(_3381 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].y)) * _3355.y) / cbSceneParam._m0[78u].y)) + _3083;
        _3182 = (exp2(_3381 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3365 * cbSceneParam._m0[78u].z)) * _3355.z) / cbSceneParam._m0[78u].z)) + _3084;
        _3184 = _3364 * _3085;
    }
    else
    {
        _3178 = _3082;
        _3180 = _3083;
        _3182 = _3084;
        _3184 = _3085;
    }
    bool _3391;
    vec4 _3194;
    vec4 _3216;
    float _3218;
    float _3222;
    float _3223;
    float _3224;
    float _3225;
    bool _3235;
    for (;;)
    {
        _3194 = cbMatDynParam._m0[0u];
        float _3196 = roundEven(_3194.y);
        bool _3197 = _3196 == 3.0;
        float _3198 = log2(_3184);
        float _3205 = exp2(_3198 * cbSceneParam._m0[78u].x) * _3054;
        float _3206 = exp2(_3198 * cbSceneParam._m0[78u].y) * _3055;
        float _3207 = exp2(_3198 * cbSceneParam._m0[78u].z) * _3056;
        float _3214 = _1152 + (-0.5);
        _3216 = cbMtdParam._m0[1u];
        _3218 = _3216.y * _3214;
        float _3221 = (_3196 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3222 = _3221 * (_3197 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3178)));
        _3223 = _3221 * (_3197 ? _3206 : (_3206 + (cbSceneParam._m0[72u].w * _3180)));
        _3224 = _3221 * (_3197 ? _3207 : (_3207 + (cbSceneParam._m0[72u].w * _3182)));
        _3225 = _3214 * 0.999000012874603271484375;
        _3235 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3235)
        {
            if ((cbInstanceData._m0[_292 + 7u].x + _3225) < 0.5)
            {
                _3391 = true;
                break;
            }
        }
        uint _3332 = _1201 + uint(_3194.w);
        if ((cbInstanceData._m0[_3332].w < 1.0) && ((cbInstanceData._m0[_3332].w + _3225) < 0.5))
        {
            _3391 = true;
            break;
        }
        if ((_3218 + 1.0) < _3216.x)
        {
            _3391 = true;
            break;
        }
        _3391 = false;
        break;
    }
    float _3596;
    if (_3391)
    {
        discard_state = true;
        _3596 = 0.0;
    }
    else
    {
        _3596 = cbInstanceData._m0[_3057].w;
    }
    SV_Target.x = _3222;
    SV_Target.y = _3223;
    SV_Target.z = _3224;
    SV_Target.w = _3596;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3057].w;
    discard_exit();
}


