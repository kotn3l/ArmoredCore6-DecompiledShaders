#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1598;
float _4260;
float _4261;
float _4262;
float _4263;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _257 = _256 * _248;
    float _258 = _256 * _249;
    float _259 = _256 * _250;
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = _263 * NORMAL.x;
    float _265 = _263 * NORMAL.y;
    float _266 = _263 * NORMAL.z;
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = _270 * TANGENT.x;
    float _272 = _270 * TANGENT.y;
    float _273 = _270 * TANGENT.z;
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4272 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4283 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4294 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4305 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _468 = (_461 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _469 = (_461 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _470 = (_461 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4316 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    float _547 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _541;
    float _550 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _542;
    float _553 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _543;
    float _560 = ((_541 - _547) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) + _547;
    float _561 = ((_542 - _550) * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) + _550;
    float _562 = ((_543 - _553) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) + _553;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = _621.x;
    float _624 = _621.y;
    float _625 = _621.z;
    float _632 = ((_604.x - _623) * _461) + _623;
    float _633 = ((_604.y - _624) * _461) + _624;
    float _634 = ((_604.z - _625) * _461) + _625;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _659 = ((_646.z - _634) * _534) + _634;
    float _662 = ((((_646.x - _632) * _534) + _632) * 2.0) + (-1.0);
    float _663 = ((((_646.y - _633) * _534) + _633) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _4327 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _699 = (_662 + ((((_579.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_687.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _700 = (_663 + ((((_579.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_687.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _703 = fma(_669, _264, fma(_700, _271, _699 * _257));
    float _706 = fma(_669, _265, fma(_700, _272, _699 * _258));
    float _709 = fma(_669, _266, fma(_700, _273, _699 * _259));
    float _713 = inversesqrt(dot(vec3(_703, _706, _709), vec3(_703, _706, _709)));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _742 = _740.x;
    float _743 = 1.0 - _742;
    float _752 = (cbMtdParam._m0[19u].x + dot(vec4(_713 * _703, _713 * _706, _713 * _709, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_742 - _743) * cbMtdParam._m0[24u].z) + _743) * cbMtdParam._m0[21u].z);
    float _4338 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _753 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _755 = (-0.0) - cbMtdParam._m0[24u].x;
    float _757 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
    float _765 = _753 - ((_753 * TEXCOORD_8.x) * _758);
    float _766 = _753 - ((_753 * TEXCOORD_8.y) * _758);
    float _767 = _753 - ((_753 * TEXCOORD_8.z) * _758);
    float _774 = (_765 * (cbMtdParam._m0[17u].x - _560)) + _560;
    float _775 = (_766 * (cbMtdParam._m0[17u].y - _561)) + _561;
    float _776 = (_767 * (cbMtdParam._m0[17u].z - _562)) + _562;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _790 = _788.x;
    float _791 = 1.0 - _790;
    float _817 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_790 - _791) * cbMtdParam._m0[24u].w) + _791) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4359 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _818 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _826 = ((((cbMtdParam._m0[10u].x - _774) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _818) + _774;
    float _827 = ((((cbMtdParam._m0[10u].y - _775) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _818) + _775;
    float _828 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _776)) * _818) + _776;
    vec4 _854 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _856 = _854.x;
    float _874 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _856) * _461) + _856;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _874) * _534) + _874;
    float _895 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _891) * cbMtdParam._m0[19u].z) + _891;
    float _897 = _895 - (_895 * _765);
    float _899 = _897 - (_897 * _818);
    float _904 = (((_579.z - _659) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _659;
    float _908 = ((_687.z - _904) * cbMtdParam._m0[19u].w) + _904;
    vec4 _922 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _929 = (_922.x * 2.0) + (-1.0);
    float _930 = (_922.y * 2.0) + (-1.0);
    float _931 = dot(vec2(_929, _930), vec2(_929, _930));
    float _4370 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _939 = ((_922.z - _908) * _765) + _908;
    float _942 = ((cbMtdParam._m0[23u].x - _939) * _818) + _939;
    vec4 _963 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _969 = (_963.x * 2.0) + (-1.0);
    float _970 = (_963.y * 2.0) + (-1.0);
    float _971 = dot(vec2(_969, _970), vec2(_969, _970));
    float _4381 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _986 = ((sqrt(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) - _669) * _767) + _669;
    float _989 = (((_929 - _699) * _765) + _699) + (cbMtdParam._m0[21u].x * _699);
    float _990 = (((_930 - _700) * _766) + _700) + (cbMtdParam._m0[21u].x * _700);
    float _1001 = (((_969 - _989) + (_989 * cbMtdParam._m0[22u].z)) * _818) + _989;
    float _1002 = (((_970 - _990) + (_990 * cbMtdParam._m0[22u].z)) * _818) + _990;
    float _1003 = (_818 * (sqrt(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) - _986)) + _986;
    float _1005 = cbMtdParam._m0[22u].x + _687.w;
    float _1008 = fma(_1003, _264, fma(_1002, _271, _1001 * _257));
    float _1011 = fma(_1003, _265, fma(_1002, _272, _1001 * _258));
    float _1014 = fma(_1003, _266, fma(_1002, _273, _1001 * _259));
    float _1018 = inversesqrt(dot(vec3(_1008, _1011, _1014), vec3(_1008, _1011, _1014)));
    float _1019 = _1018 * _1008;
    float _1020 = _1018 * _1011;
    float _1021 = _1018 * _1014;
    float _4392 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _1022 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4414 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4425 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4436 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4447 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _1027 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _1041 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1091 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1081);
    float _1092 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1081);
    float _1093 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1081);
    float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
    float _1098 = _1091 * _1097;
    float _1099 = _1092 * _1097;
    float _1100 = _1093 * _1097;
    vec4 _1105 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1107 = _1105.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1279 = sqrt(((_1091 * _1091) + (_1092 * _1092)) + (_1093 * _1093));
        float _1285 = (cbMatDynParam._m0[5u].x * _1279) + cbMatDynParam._m0[5u].y;
        float _4458 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1290 = (cbMatDynParam._m0[5u].z * _1279) + cbMatDynParam._m0[5u].w;
        float _4469 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) - _1286)) + _1286) < ((_1107 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1118 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1119 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1137 = fma(_1021, cbSceneParam._m0[5u].z, fma(_1020, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1019));
    float _1140 = fma(_1021, cbSceneParam._m0[6u].z, fma(_1020, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1019));
    float _1143 = fma(_1021, cbSceneParam._m0[7u].z, fma(_1020, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1019));
    uint _1156 = _295 + 9u;
    uint _1157 = _1156 + uint(cbMatDynParam._m0[0u].w);
    float _1163 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * cbInstanceData._m0[_1157].x;
    float _1164 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) * cbInstanceData._m0[_1157].y;
    float _1165 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * cbInstanceData._m0[_1157].z;
    float _4480 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _4491 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _1167 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1168 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _1169 = 1.0 - _1027;
    float _1170 = _1166 * _1169;
    float _1171 = _1167 * _1169;
    float _1172 = _1168 * _1169;
    float _1177 = (_1166 + (-0.039999999105930328369140625)) * _1027;
    float _1178 = (_1167 + (-0.039999999105930328369140625)) * _1027;
    float _1179 = (_1168 + (-0.039999999105930328369140625)) * _1027;
    float _1180 = _1177 + 0.039999999105930328369140625;
    float _1182 = _1178 + 0.039999999105930328369140625;
    float _1183 = _1179 + 0.039999999105930328369140625;
    vec4 _1192 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1118, cbSceneParam._m0[86u].y * _1119));
    float _1196 = ((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * TEXCOORD_5.w) * _1192.x;
    float _1197 = dot(vec3(_1019, _1020, _1021), vec3(_1098, _1099, _1100));
    float _1200 = _1197 * 2.0;
    float _1204 = (_1200 * _1019) - _1098;
    float _1205 = (_1200 * _1020) - _1099;
    float _1206 = (_1200 * _1021) - _1100;
    float _1210 = abs(dot(vec3(_1098, _1099, _1100), vec3(_1019, _1020, _1021)));
    float _4513 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1212 = sqrt(_1022);
    float _1225 = exp2((_1212 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1212 * 3.0));
    float _1231 = (1.0 - _1225) * ((_1212 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1232 = _1225 * _1212;
    float _1260 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1264 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1268 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1597;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1322 = fma(_1268, cbModelParam._m0[26u].z, fma(_1264, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1260));
        float _1326 = fma(_1268, cbModelParam._m0[27u].z, fma(_1264, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1260));
        float _1330 = fma(_1268, cbModelParam._m0[28u].z, fma(_1264, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1260));
        float _1355 = _1260 + _1019;
        float _1356 = _1264 + _1020;
        float _1357 = _1268 + _1021;
        float _1367 = fma(_1357, cbModelParam._m0[26u].z, fma(_1356, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1355)) - _1322;
        float _1368 = fma(_1357, cbModelParam._m0[27u].z, fma(_1356, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1355)) - _1326;
        float _1369 = fma(_1357, cbModelParam._m0[28u].z, fma(_1356, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1355)) - _1330;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1322 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1326 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[34u].z) + ((((((_1330 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1425 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1391.x + (-0.5));
        float _1427 = _1425 * (_1391.y + (-0.5));
        float _1428 = _1425 * (_1391.z + (-0.5));
        float _1435 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1398.x + (-0.5));
        float _1437 = _1435 * (_1398.y + (-0.5));
        float _1438 = _1435 * (_1398.z + (-0.5));
        float _1445 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1405.x + (-0.5));
        float _1447 = _1445 * (_1405.y + (-0.5));
        float _1448 = _1445 * (_1405.z + (-0.5));
        float _1455 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1412.x + (-0.5));
        float _1457 = _1455 * (_1412.y + (-0.5));
        float _1458 = _1455 * (_1412.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1479 = (dot(vec3(_1019, _1020, _1021), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4539 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1489 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4550 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4561 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_1491 + 1.0))) + _1496) * _1459;
        float _1506 = _1427 * 0.5;
        float _1507 = _1437 * 0.5;
        float _1508 = _1447 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_1019, _1020, _1021), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4594 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1533 + 1.0))) + _1538) * _1460;
        float _1548 = _1428 * 0.5;
        float _1549 = _1438 * 0.5;
        float _1550 = _1448 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_1019, _1020, _1021), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4605 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4616 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4627 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_1575 + 1.0))) + _1580) * _1461;
        _1597 = _1428;
        _1599 = _1427;
        _1600 = _1426;
        _1601 = _1438;
        _1602 = _1437;
        _1603 = _1436;
        _1604 = _1448;
        _1605 = _1447;
        _1606 = _1446;
        _1607 = _1461;
        _1608 = _1460;
        _1609 = _1459;
        _1610 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1611 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1612 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1598;
        _1599 = _1598;
        _1600 = _1598;
        _1601 = _1598;
        _1602 = _1598;
        _1603 = _1598;
        _1604 = _1598;
        _1605 = _1598;
        _1606 = _1598;
        _1607 = _1598;
        _1608 = _1598;
        _1609 = _1598;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1639 = fma(_1268, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260));
        float _1643 = fma(_1268, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260));
        float _1647 = fma(_1268, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260));
        float _1670 = _1260 + _1019;
        float _1671 = _1264 + _1020;
        float _1672 = _1268 + _1021;
        float _1682 = fma(_1672, cbModelParam._m0[30u].z, fma(_1671, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1670)) - _1639;
        float _1683 = fma(_1672, cbModelParam._m0[31u].z, fma(_1671, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1670)) - _1643;
        float _1684 = fma(_1672, cbModelParam._m0[32u].z, fma(_1671, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1670)) - _1647;
        float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
        float _1701 = ((_1688 * _1682) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1639 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1702 = ((_1688 * _1683) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1643 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1703 = ((_1688 * _1684) / cbModelParam._m0[35u].z) + ((((((_1647 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1705 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1701, _1702, _1703), 0.0);
        float _1738 = exp2((_1705.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1705.x + (-0.5));
        float _1740 = _1738 * (_1705.y + (-0.5));
        float _1741 = _1738 * (_1705.z + (-0.5));
        float _1748 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1712.x + (-0.5));
        float _1750 = _1748 * (_1712.y + (-0.5));
        float _1751 = _1748 * (_1712.z + (-0.5));
        float _1758 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1719.x + (-0.5));
        float _1760 = _1758 * (_1719.y + (-0.5));
        float _1761 = _1758 * (_1719.z + (-0.5));
        float _1768 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1726.x + (-0.5));
        float _1770 = _1768 * (_1726.y + (-0.5));
        float _1771 = _1768 * (_1726.z + (-0.5));
        float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1775 = _1739 * 0.5;
        float _1776 = _1749 * 0.5;
        float _1777 = _1759 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_1019, _1020, _1021), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4668 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1772 + 9.9999997473787516355514526367188e-06);
        float _4679 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4690 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_1802 + 1.0))) + _1807) * _1772;
        float _1817 = _1740 * 0.5;
        float _1818 = _1750 * 0.5;
        float _1819 = _1760 * 0.5;
        float _1820 = dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819));
        float _1825 = (_1820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1820);
        float _1833 = (dot(vec3(_1019, _1020, _1021), vec3(_1825 * _1817, _1825 * _1818, _1825 * _1819)) + 1.0) * 0.5;
        float _4701 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819)) / (_1773 + 9.9999997473787516355514526367188e-06);
        float _4712 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _1844 = _1843 * 2.0;
        float _1848 = (1.0 - _1843) / (_1843 + 1.0);
        float _4723 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _1858 = ((((1.0 - _1849) * (_1844 + 2.0)) * exp2(log2(isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_1844 + 1.0))) + _1849) * _1773;
        float _1859 = _1741 * 0.5;
        float _1860 = _1751 * 0.5;
        float _1861 = _1761 * 0.5;
        float _1862 = dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861));
        float _1867 = (_1862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1862);
        float _1875 = (dot(vec3(_1019, _1020, _1021), vec3(_1867 * _1859, _1867 * _1860, _1867 * _1861)) + 1.0) * 0.5;
        float _4734 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1884 = sqrt(((_1860 * _1860) + (_1859 * _1859)) + (_1861 * _1861)) / (_1774 + 9.9999997473787516355514526367188e-06);
        float _4745 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _1886 = _1885 * 2.0;
        float _1890 = (1.0 - _1885) / (_1885 + 1.0);
        float _4756 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1891 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _1900 = ((((1.0 - _1891) * (_1886 + 2.0)) * exp2(log2(isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_1886 + 1.0))) + _1891) * _1774;
        _1908 = _1741;
        _1909 = _1740;
        _1910 = _1739;
        _1911 = _1751;
        _1912 = _1750;
        _1913 = _1749;
        _1914 = _1761;
        _1915 = _1760;
        _1916 = _1759;
        _1917 = _1774;
        _1918 = _1773;
        _1919 = _1772;
        _1920 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
        _1921 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)));
        _1922 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)));
    }
    else
    {
        _1908 = _1598;
        _1909 = _1598;
        _1910 = _1598;
        _1911 = _1598;
        _1912 = _1598;
        _1913 = _1598;
        _1914 = _1598;
        _1915 = _1598;
        _1916 = _1598;
        _1917 = _1598;
        _1918 = _1598;
        _1919 = _1598;
        _1920 = 0.0;
        _1921 = 0.0;
        _1922 = 0.0;
    }
    float _1932 = (cbModelParam._m0[1u].x * (_1920 - _1610)) + _1610;
    float _1933 = (cbModelParam._m0[1u].x * (_1921 - _1611)) + _1611;
    float _1934 = (cbModelParam._m0[1u].x * (_1922 - _1612)) + _1612;
    float _1955 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1932 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1932 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1932));
    float _1976 = _1204 * 0.5;
    float _1977 = _1205 * 0.5;
    float _1978 = _1206 * 0.5;
    float _1979 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1910, _1913, _1916, _1919));
    float _1982 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1909, _1912, _1915, _1918));
    float _1985 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1908, _1911, _1914, _1917));
    float _2019;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1992 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1597, _1601, _1604, _1607));
        float _1996 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1599, _1602, _1605, _1608));
        float _2000 = dot(vec4(_1976, _1977, _1978, 1.0), vec4(_1600, _1603, _1606, _1609));
        float _2007 = dot(vec4(cbModelParam._m0[39u]), vec4(_1976, _1977, _1978, 1.0));
        _2019 = dot(vec3(isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)), isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2007) ? 0.0 : (isnan(0.0) ? _2007 : max(0.0, _2007))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2019 = 1.0;
    }
    float _2030;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2021 = dot(vec4(cbModelParam._m0[40u]), vec4(_1976, _1977, _1978, 1.0));
        _2030 = dot(vec3(isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2021) ? 0.0 : (isnan(0.0) ? _2021 : max(0.0, _2021))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2030 = 1.0;
    }
    float _2034 = (_2030 * cbModelParam._m0[1u].x) + (_2019 * (1.0 - cbModelParam._m0[1u].x));
    float _2044 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1022);
    float _2045 = isnan(_2044) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2044 : min(cbModelParam._m0[25u].z, _2044));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2093 = fma(_1268, cbModelParam._m0[13u].z, fma(_1264, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1260)) + cbModelParam._m0[13u].w;
        float _2097 = fma(_1268, cbModelParam._m0[14u].z, fma(_1264, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1260)) + cbModelParam._m0[14u].w;
        float _2101 = fma(_1268, cbModelParam._m0[15u].z, fma(_1264, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1260)) + cbModelParam._m0[15u].w;
        float _2104 = fma(_1206, cbModelParam._m0[13u].z, fma(_1205, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1204));
        float _2107 = fma(_1206, cbModelParam._m0[14u].z, fma(_1205, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1204));
        float _2110 = fma(_1206, cbModelParam._m0[15u].z, fma(_1205, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1204));
        float _2138;
        if (_2104 > 0.0)
        {
            _2138 = abs((1.0 - _2093) / _2104);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2093 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2138 = frontier_phi_17_15_ladder;
        }
        float _2310;
        if (_2107 > 0.0)
        {
            _2310 = abs((1.0 - _2097) / _2107);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2097 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2310 = frontier_phi_26_22_ladder;
        }
        float _2605;
        if (_2110 > 0.0)
        {
            _2605 = abs((1.0 - _2101) / _2110);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2101 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2605 = frontier_phi_38_33_ladder;
        }
        float _2607 = isnan(_2310) ? _2138 : (isnan(_2138) ? _2310 : min(_2138, _2310));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _2104) + _2093;
        float _2613 = (_2608 * _2107) + _2097;
        float _2614 = (_2608 * _2110) + _2101;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2615;
        float _2619 = _2615 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 > _2619) || ((_2613 < _2617) || ((_2612 < _2617) || (_2612 > _2619))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2614, cbModelParam._m0[9u].z, fma(_2613, cbModelParam._m0[9u].y, _2612 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2614, cbModelParam._m0[10u].z, fma(_2613, cbModelParam._m0[10u].y, _2612 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2614, cbModelParam._m0[11u].z, fma(_2613, cbModelParam._m0[11u].y, _2612 * cbModelParam._m0[11u].x))), _2045);
            frontier_phi_16_38_ladder = _2759.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2759.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2759.x * cbModelParam._m0[1u].y;
        }
        _2126 = frontier_phi_16_38_ladder_2;
        _2128 = frontier_phi_16_38_ladder_1;
        _2130 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1204, _1205, _1206), _2045);
        _2126 = _2114.x * cbModelParam._m0[1u].y;
        _2128 = _2114.y * cbModelParam._m0[1u].y;
        _2130 = _2114.z * cbModelParam._m0[1u].y;
    }
    float _2134 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1022);
    float _2135 = isnan(_2134) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2134 : min(cbModelParam._m0[25u].w, _2134));
    float _2225;
    float _2227;
    float _2229;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2189 = fma(_1268, cbModelParam._m0[21u].z, fma(_1264, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1260)) + cbModelParam._m0[21u].w;
        float _2193 = fma(_1268, cbModelParam._m0[22u].z, fma(_1264, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1260)) + cbModelParam._m0[22u].w;
        float _2197 = fma(_1268, cbModelParam._m0[23u].z, fma(_1264, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1260)) + cbModelParam._m0[23u].w;
        float _2200 = fma(_1206, cbModelParam._m0[21u].z, fma(_1205, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1204));
        float _2203 = fma(_1206, cbModelParam._m0[22u].z, fma(_1205, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1204));
        float _2206 = fma(_1206, cbModelParam._m0[23u].z, fma(_1205, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1204));
        float _2315;
        if (_2200 > 0.0)
        {
            _2315 = abs((1.0 - _2189) / _2200);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2189 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2315 = frontier_phi_28_24_ladder;
        }
        float _2632;
        if (_2203 > 0.0)
        {
            _2632 = abs((1.0 - _2193) / _2203);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2193 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2632 = frontier_phi_40_35_ladder;
        }
        float _2970;
        if (_2206 > 0.0)
        {
            _2970 = abs((1.0 - _2197) / _2206);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2197 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2970 = frontier_phi_50_47_ladder;
        }
        float _2972 = isnan(_2632) ? _2315 : (isnan(_2315) ? _2632 : min(_2315, _2632));
        float _2973 = isnan(_2970) ? _2972 : (isnan(_2972) ? _2970 : min(_2972, _2970));
        float _2977 = (_2973 * _2200) + _2189;
        float _2978 = (_2973 * _2203) + _2193;
        float _2979 = (_2973 * _2206) + _2197;
        float _2980 = _2973 * 9.9999997473787516355514526367188e-05;
        float _2981 = (-1.0) - _2980;
        float _2983 = _2980 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2979 > _2983) || ((_2979 < _2981) || ((_2978 > _2983) || ((_2978 < _2981) || ((_2977 < _2981) || (_2977 > _2983))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3101 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2979, cbModelParam._m0[17u].z, fma(_2978, cbModelParam._m0[17u].y, _2977 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2979, cbModelParam._m0[18u].z, fma(_2978, cbModelParam._m0[18u].y, _2977 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2979, cbModelParam._m0[19u].z, fma(_2978, cbModelParam._m0[19u].y, _2977 * cbModelParam._m0[19u].x))), _2135);
            frontier_phi_25_50_ladder = _3101.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3101.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3101.x * cbModelParam._m0[1u].z;
        }
        _2225 = frontier_phi_25_50_ladder_2;
        _2227 = frontier_phi_25_50_ladder_1;
        _2229 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2209 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1204, _1205, _1206), _2135);
        _2225 = _2209.x * cbModelParam._m0[1u].z;
        _2227 = _2209.y * cbModelParam._m0[1u].z;
        _2229 = _2209.z * cbModelParam._m0[1u].z;
    }
    float _2242 = (((_1231 * _1180) + _1232) * _1196) * ((cbModelParam._m0[1u].w * (_2225 - _2126)) + _2126);
    float _2244 = (((_1231 * _1182) + _1232) * _1196) * ((cbModelParam._m0[1u].w * (_2227 - _2128)) + _2128);
    float _2246 = (((_1231 * _1183) + _1232) * _1196) * ((cbModelParam._m0[1u].w * (_2229 - _2130)) + _2130);
    float _2249 = fma(_2246, cbSceneParam._m0[89u].z, fma(_2244, cbSceneParam._m0[89u].y, _2242 * cbSceneParam._m0[89u].x));
    float _2252 = fma(_2246, cbSceneParam._m0[90u].z, fma(_2244, cbSceneParam._m0[90u].y, _2242 * cbSceneParam._m0[90u].x));
    float _2255 = fma(_2246, cbSceneParam._m0[91u].z, fma(_2244, cbSceneParam._m0[91u].y, _2242 * cbSceneParam._m0[91u].x));
    float _2289 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2293 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2297 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2301 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2302 = _2289 / _2301;
    float _2303 = _2293 / _2301;
    float _2304 = _2297 / _2301;
    float _2451;
    float _2452;
    float _2453;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2331 = ((uint(_2304 > cbSceneParam._m0[59u].y) + uint(_2304 > cbSceneParam._m0[59u].x)) + uint(_2304 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2332 = _2331 + 43u;
        uint _2340 = _2331 + 44u;
        uint _2348 = _2331 + 45u;
        uint _2356 = _2331 + 46u;
        float _2367 = fma(_2301, cbSceneParam._m0[_2332].w, fma(_2297, cbSceneParam._m0[_2332].z, fma(_2293, cbSceneParam._m0[_2332].y, _2289 * cbSceneParam._m0[_2332].x)));
        float _2371 = fma(_2301, cbSceneParam._m0[_2340].w, fma(_2297, cbSceneParam._m0[_2340].z, fma(_2293, cbSceneParam._m0[_2340].y, _2289 * cbSceneParam._m0[_2340].x)));
        float _2379 = fma(_2301, cbSceneParam._m0[_2356].w, fma(_2297, cbSceneParam._m0[_2356].z, fma(_2293, cbSceneParam._m0[_2356].y, _2289 * cbSceneParam._m0[_2356].x)));
        float _2384 = cbSceneParam._m0[33u].z * _2379;
        float _2386 = cbSceneParam._m0[33u].w * _2379;
        float _2389 = fma(_2301, cbSceneParam._m0[_2348].w, fma(_2297, cbSceneParam._m0[_2348].z, fma(_2293, cbSceneParam._m0[_2348].y, _2289 * cbSceneParam._m0[_2348].x))) / _2379;
        float _2437 = (cbSceneParam._m0[33u].x - sqrt(((_2303 * _2303) + (_2302 * _2302)) + (_2304 * _2304))) * cbSceneParam._m0[33u].y;
        float _4882 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2444 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2384 + _2367) / _2379, (_2386 + _2371) / _2379), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2386 + _2367) / _2379, (_2371 - _2384) / _2379), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2367 - _2384) / _2379, (_2371 - _2386) / _2379), _2389), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2367 - _2386) / _2379, (_2384 + _2371) / _2379), _2389), 0.0)).x), vec4(0.25)));
        _2451 = 1.0 - (_2444 * cbSceneParam._m0[34u].x);
        _2452 = 1.0 - (_2444 * cbSceneParam._m0[34u].y);
        _2453 = 1.0 - (_2444 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2451 = 1.0;
        _2452 = 1.0;
        _2453 = 1.0;
    }
    float _2517;
    float _2519;
    float _2521;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2505 = fma(_2301, cbSceneParam._m0[63u].w, fma(_2297, cbSceneParam._m0[63u].z, fma(_2293, cbSceneParam._m0[63u].y, _2289 * cbSceneParam._m0[63u].x)));
        float _2506 = fma(_2301, cbSceneParam._m0[60u].w, fma(_2297, cbSceneParam._m0[60u].z, fma(_2293, cbSceneParam._m0[60u].y, _2289 * cbSceneParam._m0[60u].x))) / _2505;
        float _2507 = fma(_2301, cbSceneParam._m0[61u].w, fma(_2297, cbSceneParam._m0[61u].z, fma(_2293, cbSceneParam._m0[61u].y, _2289 * cbSceneParam._m0[61u].x))) / _2505;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2506 >= cbSceneParam._m0[64u].x) && (_2507 >= cbSceneParam._m0[64u].y)) && (_2506 <= cbSceneParam._m0[64u].z)) && (_2507 <= cbSceneParam._m0[64u].w))
        {
            float _2645 = fma(_2301, cbSceneParam._m0[62u].w, fma(_2297, cbSceneParam._m0[62u].z, fma(_2293, cbSceneParam._m0[62u].y, _2289 * cbSceneParam._m0[62u].x))) / _2505;
            float _2649 = isnan(cbSceneParam._m0[41u].w) ? _2645 : (isnan(_2645) ? cbSceneParam._m0[41u].w : max(_2645, cbSceneParam._m0[41u].w));
            float _2692 = (cbSceneParam._m0[33u].x - sqrt(((_2303 * _2303) + (_2302 * _2302)) + (_2304 * _2304))) * cbSceneParam._m0[33u].y;
            float _4898 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
            float _2699 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2506, cbSceneParam._m0[33u].w + _2507), _2649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2506, _2507 - cbSceneParam._m0[33u].z), _2649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2506 - cbSceneParam._m0[33u].z, _2507 - cbSceneParam._m0[33u].w), _2649), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2506 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2507), _2649), 0.0)).x), vec4(0.25)));
            float _2703 = 1.0 - (_2699 * cbSceneParam._m0[34u].x);
            float _2704 = 1.0 - (_2699 * cbSceneParam._m0[34u].y);
            float _2705 = 1.0 - (_2699 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2705) ? _2453 : (isnan(_2453) ? _2705 : min(_2453, _2705));
            frontier_phi_37_36_ladder_1 = isnan(_2704) ? _2452 : (isnan(_2452) ? _2704 : min(_2452, _2704));
            frontier_phi_37_36_ladder_2 = isnan(_2703) ? _2451 : (isnan(_2451) ? _2703 : min(_2451, _2703));
        }
        else
        {
            frontier_phi_37_36_ladder = _2453;
            frontier_phi_37_36_ladder_1 = _2452;
            frontier_phi_37_36_ladder_2 = _2451;
        }
        _2517 = frontier_phi_37_36_ladder_2;
        _2519 = frontier_phi_37_36_ladder_1;
        _2521 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2517 = _2451;
        _2519 = _2452;
        _2521 = _2453;
    }
    uvec4 _2526 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2528 = _2526.x * 14u;
    uint _2529 = _2528 + 13u;
    float _2536 = _1196 + (-1.0);
    float _2541 = (cbLight._m0[_2529].x * _2536) + 1.0;
    float _2542 = (cbLight._m0[_2529].y * _2536) + 1.0;
    float _2543 = (cbLight._m0[_2529].z * _2536) + 1.0;
    float _2544 = (cbLight._m0[_2529].w * _2536) + 1.0;
    uint _2545 = _2528 + 5u;
    float _2551 = isnan(1.0) ? _2542 : (isnan(_2542) ? 1.0 : min(_2542, 1.0));
    uint _2555 = _2528 + 4u;
    float _2564 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
    uint _2568 = _2528 | 1u;
    float _2579 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_1019, _1020, _1021));
    float _2582 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_1019, _1020, _1021));
    float _4934 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _4945 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2587 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * 0.3183098733425140380859375;
    float _2589 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * 0.3183098733425140380859375;
    float _2596 = ((cbLight._m0[_2545].x * _2551) * _2589) + (((cbLight._m0[_2555].x * _2517) * _2564) * _2587);
    float _2597 = ((_2551 * cbLight._m0[_2545].y) * _2589) + (((cbLight._m0[_2555].y * _2519) * _2564) * _2587);
    float _2598 = ((_2551 * cbLight._m0[_2545].z) * _2589) + (((cbLight._m0[_2555].z * _2521) * _2564) * _2587);
    uvec4 _2602 = floatBitsToUint(cbLight._m0[_2528 + 12u]);
    bool _2604 = _2602.x == 0u;
    float _2706;
    float _2708;
    float _2710;
    if (_2604)
    {
        _2706 = _2596;
        _2708 = _2597;
        _2710 = _2598;
    }
    else
    {
        uint _2714 = _2528 + 6u;
        float _2730 = (dot(vec3(cbLight._m0[_2528 + 2u].xyz), vec3(_1019, _1020, _1021)) * 0.5) + 0.5;
        float _2731 = _2730 * _2730;
        float _4956 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2732 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _2733 = isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0));
        _2706 = (((cbLight._m0[_2714].x * 0.3183098733425140380859375) * _2732) * _2733) + _2596;
        _2708 = (((cbLight._m0[_2714].y * 0.3183098733425140380859375) * _2732) * _2733) + _2597;
        _2710 = (((cbLight._m0[_2714].z * 0.3183098733425140380859375) * _2732) * _2733) + _2598;
    }
    bool _2713 = _2602.y == 0u;
    float _2768;
    float _2770;
    float _2772;
    if (_2713)
    {
        _2768 = _2706;
        _2770 = _2708;
        _2772 = _2710;
    }
    else
    {
        uint _2941 = _2528 + 7u;
        float _2957 = (dot(vec3(cbLight._m0[_2528 + 3u].xyz), vec3(_1019, _1020, _1021)) * 0.5) + 0.5;
        float _2958 = _2957 * _2957;
        float _4972 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2959 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _2960 = isnan(1.0) ? _2544 : (isnan(_2544) ? 1.0 : min(_2544, 1.0));
        _2768 = (((cbLight._m0[_2941].x * 0.3183098733425140380859375) * _2959) * _2960) + _2706;
        _2770 = (((cbLight._m0[_2941].y * 0.3183098733425140380859375) * _2959) * _2960) + _2708;
        _2772 = (((cbLight._m0[_2941].z * 0.3183098733425140380859375) * _2959) * _2960) + _2710;
    }
    uint _2775 = _2528 + 8u;
    float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _1022) * 0.949999988079071044921875);
    float _2789 = _2788 * _2788;
    float _2790 = cbLight._m0[_2528].x + _1098;
    float _2791 = cbLight._m0[_2528].y + _1099;
    float _2792 = cbLight._m0[_2528].z + _1100;
    float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
    float _2797 = _2796 * _2790;
    float _2798 = _2796 * _2791;
    float _2799 = _2796 * _2792;
    float _2800 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2528].xyz));
    float _4988 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2803 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
    float _4999 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _2804 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
    float _2805 = dot(vec3(_1019, _1020, _1021), vec3(_2797, _2798, _2799));
    float _5010 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2808 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
    float _2809 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2797, _2798, _2799));
    float _5021 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2813 = _2789 * _2789;
    float _2817 = ((_2808 * _2808) * (_2813 + (-1.0))) + 1.0;
    float _2825 = exp2(log2(1.0 - (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) * 5.0);
    float _2826 = 0.959999978542327880859375 - _1177;
    float _2828 = 0.959999978542327880859375 - _1178;
    float _2829 = 0.959999978542327880859375 - _1179;
    float _2836 = 1.0 - _2789;
    float _2847 = (0.5 / (((_2804 * ((_2803 * _2836) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2804 * _2836) + _2789) * _2803))) * _2803;
    float _5032 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2849 = (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2813 / ((_2817 * _2817) * 3.141590118408203125));
    uint _2863 = _2528 + 9u;
    float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2568].w)) * _1022) * 0.949999988079071044921875);
    float _2875 = _2874 * _2874;
    float _2876 = cbLight._m0[_2568].x + _1098;
    float _2877 = cbLight._m0[_2568].y + _1099;
    float _2878 = cbLight._m0[_2568].z + _1100;
    float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
    float _2883 = _2882 * _2876;
    float _2884 = _2882 * _2877;
    float _2885 = _2882 * _2878;
    float _2886 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2568].xyz));
    float _5043 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
    float _2889 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
    float _2890 = dot(vec3(_1019, _1020, _1021), vec3(_2883, _2884, _2885));
    float _5054 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
    float _2893 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
    float _2894 = dot(vec3(cbLight._m0[_2568].xyz), vec3(_2883, _2884, _2885));
    float _5065 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2898 = _2875 * _2875;
    float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
    float _2909 = exp2(log2(1.0 - (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0)))) * 5.0);
    float _2916 = 1.0 - _2875;
    float _2926 = (0.5 / (((_2804 * ((_2889 * _2916) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2804 * _2916) + _2875) * _2889))) * _2889;
    float _5076 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
    float _2928 = (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
    float _2938 = (((((_2909 * _2826) + _1180) * cbLight._m0[_2863].x) * _2928) * _2551) + ((((cbLight._m0[_2775].x * _2517) * ((_2825 * _2826) + _1180)) * _2849) * _2564);
    float _2939 = (((((_2909 * _2828) + _1182) * cbLight._m0[_2863].y) * _2928) * _2551) + ((((cbLight._m0[_2775].y * _2519) * ((_2825 * _2828) + _1182)) * _2849) * _2564);
    float _2940 = (((((_2909 * _2829) + _1183) * cbLight._m0[_2863].z) * _2928) * _2551) + ((((cbLight._m0[_2775].z * _2521) * ((_2825 * _2829) + _1183)) * _2849) * _2564);
    float _2996;
    float _2998;
    float _3000;
    if (_2604)
    {
        _2996 = _2938;
        _2998 = _2939;
        _3000 = _2940;
    }
    else
    {
        uint _3002 = _2528 + 2u;
        uint _3006 = _2528 + 10u;
        float _3020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3002].w)) * _1022) * 0.949999988079071044921875);
        float _3021 = _3020 * _3020;
        float _3022 = cbLight._m0[_3002].x + _1098;
        float _3023 = cbLight._m0[_3002].y + _1099;
        float _3024 = cbLight._m0[_3002].z + _1100;
        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
        float _3029 = _3028 * _3022;
        float _3030 = _3028 * _3023;
        float _3031 = _3028 * _3024;
        float _3032 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_3002].xyz));
        float _5087 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3035 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
        float _3036 = dot(vec3(_1019, _1020, _1021), vec3(_3029, _3030, _3031));
        float _5098 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3039 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
        float _3040 = dot(vec3(cbLight._m0[_3002].xyz), vec3(_3029, _3030, _3031));
        float _5109 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3044 = _3021 * _3021;
        float _3048 = ((_3039 * _3039) * (_3044 + (-1.0))) + 1.0;
        float _3055 = exp2(log2(1.0 - (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0)))) * 5.0);
        float _3062 = 1.0 - _3021;
        float _3072 = (0.5 / (((_2804 * ((_3035 * _3062) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_2804 * _3062) + _3021) * _3035))) * _3035;
        float _5120 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3074 = (isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3044 / ((_3048 * _3048) * 3.141590118408203125));
        float _3075 = isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0));
        _2996 = (((((_3055 * _2826) + _1180) * cbLight._m0[_3006].x) * _3074) * _3075) + _2938;
        _2998 = (((((_3055 * _2828) + _1182) * cbLight._m0[_3006].y) * _3074) * _3075) + _2939;
        _3000 = (((((_3055 * _2829) + _1183) * cbLight._m0[_3006].z) * _3074) * _3075) + _2940;
    }
    float _3106;
    float _3108;
    float _3110;
    if (_2713)
    {
        _3106 = _2996;
        _3108 = _2998;
        _3110 = _3000;
    }
    else
    {
        uint _3117 = _2528 + 3u;
        uint _3121 = _2528 + 11u;
        float _3135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3117].w)) * _1022) * 0.949999988079071044921875);
        float _3136 = _3135 * _3135;
        float _3137 = cbLight._m0[_3117].x + _1098;
        float _3138 = cbLight._m0[_3117].y + _1099;
        float _3139 = cbLight._m0[_3117].z + _1100;
        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
        float _3144 = _3143 * _3137;
        float _3145 = _3143 * _3138;
        float _3146 = _3143 * _3139;
        float _3147 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_3117].xyz));
        float _5136 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        float _3150 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
        float _3151 = dot(vec3(_1019, _1020, _1021), vec3(_3144, _3145, _3146));
        float _5147 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
        float _3154 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
        float _3155 = dot(vec3(cbLight._m0[_3117].xyz), vec3(_3144, _3145, _3146));
        float _5158 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
        float _3159 = _3136 * _3136;
        float _3163 = ((_3154 * _3154) * (_3159 + (-1.0))) + 1.0;
        float _3170 = exp2(log2(1.0 - (isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0)))) * 5.0);
        float _3177 = 1.0 - _3136;
        float _3187 = (0.5 / (((_2804 * ((_3150 * _3177) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_2804 * _3177) + _3136) * _3150))) * _3150;
        float _5169 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
        float _3189 = (isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0))) * (_3159 / ((_3163 * _3163) * 3.141590118408203125));
        float _3190 = isnan(1.0) ? _2544 : (isnan(_2544) ? 1.0 : min(_2544, 1.0));
        _3106 = (((((_3170 * _2826) + _1180) * cbLight._m0[_3121].x) * _3189) * _3190) + _2996;
        _3108 = (((((_3170 * _2828) + _1182) * cbLight._m0[_3121].y) * _3189) * _3190) + _2998;
        _3110 = (((((_3170 * _2829) + _1183) * cbLight._m0[_3121].z) * _3189) * _3190) + _3000;
    }
    float _3256;
    float _3258;
    float _3260;
    float _3262;
    float _3264;
    float _3266;
    if (_2526.y == 0u)
    {
        uvec4 _3211 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3212 = _3211.x;
        uint _3223 = uint((float(_3211.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1119) / _3212))) + floor(float(uint(cbSceneParam._m0[85u].x * _1118) / _3212)));
        float _3233 = (log2(_2304 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3234 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
        uint _3237 = uint(isnan(14.0) ? _3234 : (isnan(_3234) ? 14.0 : min(_3234, 14.0)));
        uvec4 _3242 = texelFetch(g_lightClusterGridBuffer, int(((_3237 << 2u) + (_3223 << 6u)) >> 2u));
        uint _3243 = _3242.x;
        uint _3244 = _3211.z;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        if (((((1u << ((_3244 >> 4u) & 15u)) + 4294967295u) & _3243) == 0u) || ((_3244 & 240u) == 0u))
        {
            _3323 = 0.0;
            _3325 = 0.0;
            _3327 = 0.0;
            _3329 = 0.0;
            _3331 = 0.0;
            _3333 = 0.0;
        }
        else
        {
            float _3324;
            float _3326;
            float _3328;
            float _3330;
            float _3332;
            float _3334;
            float _3475 = 0.0;
            float _3476 = 0.0;
            float _3477 = 0.0;
            float _3478 = 0.0;
            float _3479 = 0.0;
            float _3480 = 0.0;
            uint _3481 = 0u;
            uint _3490;
            bool _3491;
            for (;;)
            {
                _3490 = texelFetch(g_lightClassification, int((((_3237 << 5u) + (_3223 << 9u)) + (_3481 << 2u)) >> 2u)).x;
                _3491 = _3490 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3491)
                {
                    frontier_phi_71_pred = _3480;
                    frontier_phi_71_pred_1 = _3479;
                    frontier_phi_71_pred_2 = _3478;
                    frontier_phi_71_pred_3 = _3477;
                    frontier_phi_71_pred_4 = _3476;
                    frontier_phi_71_pred_5 = _3475;
                }
                else
                {
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    float _3624;
                    float _3625;
                    uint _3626;
                    _3620 = _3475;
                    _3621 = _3476;
                    _3622 = _3477;
                    _3623 = _3478;
                    _3624 = _3479;
                    _3625 = _3480;
                    _3626 = _3490;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    for (;;)
                    {
                        uint _3630 = uint(findLSB(_3626)) + (_3481 << 5u);
                        uint _3627 = (_3626 + 4294967295u) & _3626;
                        uint _3632 = _3630 * 48u;
                        vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3632)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 3u)).x));
                        uint _3652 = (_3630 * 48u) + 4u;
                        vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3652)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 3u)).x));
                        uint _3671 = (_3630 * 48u) + 8u;
                        vec3 _3682 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3671)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 2u)).x));
                        float _3686 = _3646.x - _2302;
                        float _3687 = _3646.y - _2303;
                        float _3688 = _3646.z - _2304;
                        float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                        float _3692 = inversesqrt(_3689);
                        float _3693 = _3692 * _3686;
                        float _3694 = _3692 * _3687;
                        float _3695 = _3692 * _3688;
                        float _3696 = dot(vec3(_1137, _1140, _1143), vec3(_3693, _3694, _3695));
                        float _3701 = 1.0 - (_3689 * _3646.w);
                        float _5195 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                        float _3702 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
                        float _3703 = sqrt(_3689) * _3665.w;
                        float _3706 = 1.39999997615814208984375 / (_3703 + 1.39999997615814208984375);
                        float _3707 = _3706 * _3706;
                        float _3710 = ((1.0 - _3707) * _3696) + _3707;
                        float _3713 = _3703 * _3703;
                        float _3717 = ((isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0))) * _3702) / ((_3713 * 0.699999988079071044921875) + 1.0);
                        float _3721 = (-0.0) - _2302;
                        float _3722 = (-0.0) - _2303;
                        float _3723 = (-0.0) - _2304;
                        float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                        float _3728 = _3727 * _3721;
                        float _3729 = _3727 * _3722;
                        float _3730 = _3727 * _3723;
                        float _3737 = exp2(log2(1.0 / ((_3713 * 3.5) + 5.0)) * 0.25);
                        float _3738 = 1.0 - _1212;
                        float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                        float _3746 = _3745 * _3745;
                        float _3747 = _3746 * _3746;
                        float _3748 = _3728 + _3693;
                        float _3749 = _3729 + _3694;
                        float _3750 = _3730 + _3695;
                        float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                        float _3758 = dot(vec3(_1137, _1140, _1143), vec3(_3728, _3729, _3730));
                        float _5211 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                        float _3761 = isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0));
                        float _3762 = dot(vec3(_1137, _1140, _1143), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                        float _5222 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3765 = isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0));
                        float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                        float _3770 = _3706 * _3746;
                        float _3771 = _3770 * _3770;
                        float _3774 = ((1.0 - _3771) * _3696) + _3771;
                        float _5233 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                        float _3775 = isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0));
                        float _3776 = 1.0 - _3746;
                        float _3786 = (0.5 / (((_3775 * ((_3761 * _3776) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3775 * _3776) + _3746) * _3761))) * _3775;
                        float _5244 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                        float _3797 = (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0)))) / ((_3769 * _3769) * ((_3713 * 2.1991131305694580078125) + 3.141590118408203125))) * _3702;
                        _3550 = (_3717 * _3665.x) + _3623;
                        _3551 = (_3717 * _3665.y) + _3624;
                        _3552 = (_3717 * _3665.z) + _3625;
                        _3547 = (_3797 * _3682.x) + _3620;
                        _3548 = (_3797 * _3682.y) + _3621;
                        _3549 = (_3797 * _3682.z) + _3622;
                        if (_3627 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3620 = _3547;
                            _3621 = _3548;
                            _3622 = _3549;
                            _3623 = _3550;
                            _3624 = _3551;
                            _3625 = _3552;
                            _3626 = _3627;
                        }
                    }
                    frontier_phi_71_pred = _3552;
                    frontier_phi_71_pred_1 = _3551;
                    frontier_phi_71_pred_2 = _3550;
                    frontier_phi_71_pred_3 = _3549;
                    frontier_phi_71_pred_4 = _3548;
                    frontier_phi_71_pred_5 = _3547;
                }
                _3334 = frontier_phi_71_pred;
                _3332 = frontier_phi_71_pred_1;
                _3330 = frontier_phi_71_pred_2;
                _3328 = frontier_phi_71_pred_3;
                _3326 = frontier_phi_71_pred_4;
                _3324 = frontier_phi_71_pred_5;
                uint _3482 = _3481 + 1u;
                if (_3482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3475 = _3324;
                    _3476 = _3326;
                    _3477 = _3328;
                    _3478 = _3330;
                    _3479 = _3332;
                    _3480 = _3334;
                    _3481 = _3482;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3323 = _3324;
            _3325 = _3326;
            _3327 = _3328;
            _3329 = _3330;
            _3331 = _3332;
            _3333 = _3334;
        }
        uvec4 _3337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3338 = _3337.z;
        uint _3340 = (_3338 >> 8u) & 15u;
        float _3443;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        if (((4294967295u << _3340) & _3243) == 0u)
        {
            _3443 = _3323;
            _3445 = _3325;
            _3447 = _3327;
            _3449 = _3329;
            _3451 = _3331;
            _3453 = _3333;
        }
        else
        {
            float _3468 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
            float _3469 = _3468 * _2302;
            float _3470 = _3468 * _2303;
            float _3471 = _3468 * _2304;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3340 < ((_3338 >> 12u) & 15u))
            {
                float _3444;
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3454;
                float _3603 = _3323;
                float _3604 = _3325;
                float _3605 = _3327;
                float _3606 = _3329;
                float _3607 = _3331;
                float _3608 = _3333;
                uint _3609 = _3340;
                uint _3618;
                bool _3619;
                for (;;)
                {
                    _3618 = texelFetch(g_lightClassification, int((((_3237 << 5u) + (_3223 << 9u)) + (_3609 << 2u)) >> 2u)).x;
                    _3619 = _3618 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3619)
                    {
                        frontier_phi_82_pred = _3608;
                        frontier_phi_82_pred_1 = _3607;
                        frontier_phi_82_pred_2 = _3606;
                        frontier_phi_82_pred_3 = _3605;
                        frontier_phi_82_pred_4 = _3604;
                        frontier_phi_82_pred_5 = _3603;
                    }
                    else
                    {
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _4104;
                        float _4105;
                        float _4106;
                        float _4107;
                        float _4108;
                        float _4109;
                        float _3824 = _3603;
                        float _3825 = _3604;
                        float _3826 = _3605;
                        float _3827 = _3606;
                        float _3828 = _3607;
                        float _3829 = _3608;
                        uint _3830 = _3618;
                        uint _3831;
                        vec4 _3856;
                        float _3857;
                        vec4 _3872;
                        vec3 _3884;
                        vec4 _3899;
                        vec4 _3914;
                        float _3960;
                        bool _3961;
                        for (;;)
                        {
                            uint _3841 = ((_3609 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3830));
                            _3831 = (_3830 + 4294967295u) & _3830;
                            uint _3843 = _3841 * 40u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            _3857 = _3856.w;
                            uint _3859 = (_3841 * 40u) + 4u;
                            _3872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 3u)).x));
                            uint _3874 = (_3841 * 40u) + 8u;
                            _3884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x));
                            uint _3886 = (_3841 * 40u) + 16u;
                            _3899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 3u)).x));
                            uint _3901 = (_3841 * 40u) + 20u;
                            _3914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 3u)).x));
                            uint _3916 = (_3841 * 40u) + 24u;
                            vec4 _3929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 3u)).x));
                            uint _3935 = (_3841 * 40u) + 28u;
                            vec4 _3948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3935 + 3u)).x));
                            _3960 = fma(_2304, _3948.z, fma(_2303, _3948.y, _3948.x * _2302)) + _3948.w;
                            _3961 = !((fma(_2304, _3929.z, fma(_2303, _3929.y, _3929.x * _2302)) + _3929.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3961)
                            {
                                float _3988 = _3856.x - _2302;
                                float _3989 = _3856.y - _2303;
                                float _3990 = _3856.z - _2304;
                                float _3991 = dot(vec3(_3988, _3989, _3990), vec3(_3988, _3989, _3990));
                                float _3994 = inversesqrt(_3991);
                                float _3995 = _3994 * _3988;
                                float _3996 = _3994 * _3989;
                                float _3997 = _3994 * _3990;
                                float _4001 = 1.0 - (_3991 / (_3857 * _3857));
                                float _5255 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4002 = isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0));
                                float _4006 = sqrt(_3991) * _3872.w;
                                float _4008 = 1.39999997615814208984375 / (_4006 + 1.39999997615814208984375);
                                float _4009 = _4008 * _4008;
                                float _4012 = ((1.0 - _4009) * dot(vec3(_3995, _3996, _3997), vec3(_1137, _1140, _1143))) + _4009;
                                float _4015 = _4006 * _4006;
                                float _4019 = (fma(_2304, _3899.z, fma(_2303, _3899.y, _3899.x * _2302)) + _3899.w) / _3960;
                                float _4020 = (fma(_2304, _3914.z, fma(_2303, _3914.y, _3914.x * _2302)) + _3914.w) / _3960;
                                float _4024 = 1.0 - dot(vec2(_4019, _4020), vec2(_4019, _4020));
                                float _5271 = isnan(0.0) ? _4024 : (isnan(_4024) ? 0.0 : max(_4024, 0.0));
                                float _4025 = isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0));
                                float _4026 = _4025 * (((isnan(0.0) ? _4012 : (isnan(_4012) ? 0.0 : max(_4012, 0.0))) * _4002) / ((_4015 * 0.699999988079071044921875) + 1.0));
                                float _4038 = exp2(log2(1.0 / ((_4015 * 3.5) + 5.0)) * 0.25);
                                float _4039 = 1.0 - _1212;
                                float _4046 = sqrt(1.0 - ((1.0 - (_4039 * _4039)) * (1.0 - (_4038 * _4038))));
                                float _4047 = _4046 * _4046;
                                float _4048 = _4047 * _4047;
                                float _4049 = _3995 - _3469;
                                float _4050 = _3996 - _3470;
                                float _4051 = _3997 - _3471;
                                float _4055 = inversesqrt(dot(vec3(_4049, _4050, _4051), vec3(_4049, _4050, _4051)));
                                float _4059 = dot(vec3(_1137, _1140, _1143), vec3((-0.0) - _3469, (-0.0) - _3470, (-0.0) - _3471));
                                float _5282 = isnan(0.0) ? _4059 : (isnan(_4059) ? 0.0 : max(_4059, 0.0));
                                float _4062 = isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0));
                                float _4063 = dot(vec3(_1137, _1140, _1143), vec3(_4055 * _4049, _4055 * _4050, _4055 * _4051));
                                float _5293 = isnan(0.0) ? _4063 : (isnan(_4063) ? 0.0 : max(_4063, 0.0));
                                float _4066 = isnan(1.0) ? _5293 : (isnan(_5293) ? 1.0 : min(_5293, 1.0));
                                float _4070 = ((_4066 * _4066) * (_4048 + (-1.0))) + 1.0;
                                float _4071 = _4008 * _4047;
                                float _4072 = _4071 * _4071;
                                float _4078 = ((1.0 - _4072) * dot(vec3(_1137, _1140, _1143), vec3(_3995, _3996, _3997))) + _4072;
                                float _5304 = isnan(0.0) ? _4078 : (isnan(_4078) ? 0.0 : max(_4078, 0.0));
                                float _4079 = isnan(1.0) ? _5304 : (isnan(_5304) ? 1.0 : min(_5304, 1.0));
                                float _4080 = 1.0 - _4047;
                                float _4090 = (0.5 / (((_4079 * ((_4062 * _4080) + _4047)) + 9.9999999392252902907785028219223e-09) + (((_4079 * _4080) + _4047) * _4062))) * _4079;
                                float _5315 = isnan(0.0) ? _4090 : (isnan(_4090) ? 0.0 : max(_4090, 0.0));
                                float _4100 = (_4025 * _4002) * (((_4048 * 3.1415927410125732421875) * (isnan(1.0) ? _5315 : (isnan(_5315) ? 1.0 : min(_5315, 1.0)))) / ((_4070 * _4070) * ((_4015 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4026 * _3872.z;
                                frontier_phi_88_pred_1 = _4026 * _3872.y;
                                frontier_phi_88_pred_2 = _4026 * _3872.x;
                                frontier_phi_88_pred_3 = _4100 * _3884.z;
                                frontier_phi_88_pred_4 = _4100 * _3884.y;
                                frontier_phi_88_pred_5 = _4100 * _3884.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4109 = frontier_phi_88_pred;
                            _4108 = frontier_phi_88_pred_1;
                            _4107 = frontier_phi_88_pred_2;
                            _4106 = frontier_phi_88_pred_3;
                            _4105 = frontier_phi_88_pred_4;
                            _4104 = frontier_phi_88_pred_5;
                            _3814 = _4107 + _3827;
                            _3815 = _4108 + _3828;
                            _3816 = _4109 + _3829;
                            _3811 = _4104 + _3824;
                            _3812 = _4105 + _3825;
                            _3813 = _4106 + _3826;
                            if (_3831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3814;
                                _3828 = _3815;
                                _3829 = _3816;
                                _3830 = _3831;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3816;
                        frontier_phi_82_pred_1 = _3815;
                        frontier_phi_82_pred_2 = _3814;
                        frontier_phi_82_pred_3 = _3813;
                        frontier_phi_82_pred_4 = _3812;
                        frontier_phi_82_pred_5 = _3811;
                    }
                    _3454 = frontier_phi_82_pred;
                    _3452 = frontier_phi_82_pred_1;
                    _3450 = frontier_phi_82_pred_2;
                    _3448 = frontier_phi_82_pred_3;
                    _3446 = frontier_phi_82_pred_4;
                    _3444 = frontier_phi_82_pred_5;
                    uint _3610 = _3609 + 1u;
                    if (_3610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3603 = _3444;
                        _3604 = _3446;
                        _3605 = _3448;
                        _3606 = _3450;
                        _3607 = _3452;
                        _3608 = _3454;
                        _3609 = _3610;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3450;
                frontier_phi_63_64_ladder_1 = _3454;
                frontier_phi_63_64_ladder_2 = _3452;
                frontier_phi_63_64_ladder_3 = _3448;
                frontier_phi_63_64_ladder_4 = _3446;
                frontier_phi_63_64_ladder_5 = _3444;
            }
            else
            {
                frontier_phi_63_64_ladder = _3329;
                frontier_phi_63_64_ladder_1 = _3333;
                frontier_phi_63_64_ladder_2 = _3331;
                frontier_phi_63_64_ladder_3 = _3327;
                frontier_phi_63_64_ladder_4 = _3325;
                frontier_phi_63_64_ladder_5 = _3323;
            }
            _3443 = frontier_phi_63_64_ladder_5;
            _3445 = frontier_phi_63_64_ladder_4;
            _3447 = frontier_phi_63_64_ladder_3;
            _3449 = frontier_phi_63_64_ladder;
            _3451 = frontier_phi_63_64_ladder_2;
            _3453 = frontier_phi_63_64_ladder_1;
        }
        float _3458 = isnan(1.0) ? _1196 : (isnan(_1196) ? 1.0 : min(_1196, 1.0));
        _3256 = (_3458 * _3449) + _2768;
        _3258 = (_3458 * _3451) + _2770;
        _3260 = (_3458 * _3453) + _2772;
        _3262 = ((_3443 * _1180) * _3458) + _3106;
        _3264 = ((_3445 * _1182) * _3458) + _3108;
        _3266 = ((_3447 * _1183) * _3458) + _3110;
    }
    else
    {
        _3256 = _2768;
        _3258 = _2770;
        _3260 = _2772;
        _3262 = _3106;
        _3264 = _3108;
        _3266 = _3110;
    }
    float _5331 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _5342 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _5353 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _3283 = ((isnan(1.0) ? _5331 : (isnan(_5331) ? 1.0 : min(_5331, 1.0))) * (_3256 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1196))) + ((_3262 + ((isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * _2034)) * cbPerFrame._m0[3u].x);
    float _3284 = ((isnan(1.0) ? _5342 : (isnan(_5342) ? 1.0 : min(_5342, 1.0))) * (_3258 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1196))) + ((_3264 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _2034)) * cbPerFrame._m0[3u].x);
    float _3285 = ((isnan(1.0) ? _5353 : (isnan(_5353) ? 1.0 : min(_5353, 1.0))) * (_3260 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1196))) + ((_3266 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2034)) * cbPerFrame._m0[3u].x);
    uint _3286 = _295 + 6u;
    float _3294 = _1118 / cbSceneParam._m0[86u].x;
    float _3295 = _1119 / cbSceneParam._m0[86u].y;
    vec4 _3309 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3294, _3295, (log2((isnan(cbSceneParam._m0[77u].w) ? _1041 : (isnan(_1041) ? cbSceneParam._m0[77u].w : min(_1041, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3311 = _3309.x;
    float _3312 = _3309.y;
    float _3313 = _3309.z;
    float _3314 = _3309.w;
    float _3385;
    float _3387;
    float _3389;
    float _3391;
    if (_1041 > cbSceneParam._m0[78u].w)
    {
        float _3348 = isnan(_1041) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1041 : min(cbSceneParam._m0[80u].w, _1041));
        float _3349 = _3348 / _1041;
        float _3360 = _3349 * _1091;
        float _3361 = _1092 * _3349;
        float _3362 = (-0.0) - _3361;
        float _3363 = _3349 * _1093;
        float _3365 = (cbSceneParam._m0[77u].w * _3362) / _3348;
        float _3366 = _3365 + cbSceneParam._m0[79u].w;
        float _3367 = cbSceneParam._m0[79u].w - _3361;
        float _3373 = sqrt(((_3360 * _3360) + (_3361 * _3361)) + (_3363 * _3363));
        float _3376 = (1.0 - (cbSceneParam._m0[77u].w / _3348)) * _3373;
        float _3381 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3383 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3560;
        if (abs((_3362 - _3365) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3560 = ((((_3366 > 0.0) ? exp2(_3381 * _3366) : (2.0 - exp2(_3383 * _3366))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3376;
        }
        else
        {
            float _3504 = 1.0 / cbSceneParam._m0[80u].x;
            float _3505 = isnan(_3367) ? _3366 : (isnan(_3366) ? _3367 : max(_3366, _3367));
            float _3506 = isnan(_3367) ? _3366 : (isnan(_3366) ? _3367 : min(_3366, _3367));
            float _3515 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : min(_3505, 0.0));
            float _3516 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : min(_3506, 0.0));
            _3560 = ((abs(_3373 / _3362) * cbSceneParam._m0[80u].y) * ((((_3515 - _3516) * 2.0) - ((exp2(_3381 * (isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0)))) - exp2(_3381 * (isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))))) * _3504)) - ((exp2(_3383 * _3515) - exp2(_3383 * _3516)) * _3504))) + (_3376 * cbSceneParam._m0[80u].z);
        }
        vec4 _3562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3294, _3295, 1.0), 0.0);
        float _3571 = exp2((_3560 * (-1.44269502162933349609375)) * (1.0 - _3562.w));
        float _3572 = log2(_3571);
        float _3588 = log2(_3314);
        _3385 = (exp2(_3588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].x)) * _3562.x) / cbSceneParam._m0[78u].x)) + _3311;
        _3387 = (exp2(_3588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].y)) * _3562.y) / cbSceneParam._m0[78u].y)) + _3312;
        _3389 = (exp2(_3588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].z)) * _3562.z) / cbSceneParam._m0[78u].z)) + _3313;
        _3391 = _3571 * _3314;
    }
    else
    {
        _3385 = _3311;
        _3387 = _3312;
        _3389 = _3313;
        _3391 = _3314;
    }
    bool _3598;
    vec4 _3401;
    vec4 _3423;
    float _3425;
    float _3429;
    float _3430;
    float _3431;
    float _3432;
    bool _3442;
    for (;;)
    {
        _3401 = cbMatDynParam._m0[0u];
        float _3403 = roundEven(_3401.y);
        bool _3404 = _3403 == 3.0;
        float _3405 = log2(_3391);
        float _3412 = exp2(_3405 * cbSceneParam._m0[78u].x) * _3283;
        float _3413 = exp2(_3405 * cbSceneParam._m0[78u].y) * _3284;
        float _3414 = exp2(_3405 * cbSceneParam._m0[78u].z) * _3285;
        float _3421 = _1107 + (-0.5);
        _3423 = cbMtdParam._m0[1u];
        _3425 = _3423.y * _3421;
        float _3428 = (_3403 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3429 = _3428 * (_3404 ? _3412 : (_3412 + (cbSceneParam._m0[72u].w * _3385)));
        _3430 = _3428 * (_3404 ? _3413 : (_3413 + (cbSceneParam._m0[72u].w * _3387)));
        _3431 = _3428 * (_3404 ? _3414 : (_3414 + (cbSceneParam._m0[72u].w * _3389)));
        _3432 = _3421 * 0.999000012874603271484375;
        _3442 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3442)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3432) < 0.5)
            {
                _3598 = true;
                break;
            }
        }
        uint _3539 = _1156 + uint(_3401.w);
        if ((cbInstanceData._m0[_3539].w < 1.0) && ((cbInstanceData._m0[_3539].w + _3432) < 0.5))
        {
            _3598 = true;
            break;
        }
        if ((_3425 + 1.0) < _3423.x)
        {
            _3598 = true;
            break;
        }
        _3598 = false;
        break;
    }
    float _3802;
    if (_3598)
    {
        discard_state = true;
        _3802 = 0.0;
    }
    else
    {
        _3802 = cbInstanceData._m0[_3286].w;
    }
    SV_Target.x = _3429;
    SV_Target.y = _3430;
    SV_Target.z = _3431;
    SV_Target.w = _3802;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3286].w;
    discard_exit();
}


