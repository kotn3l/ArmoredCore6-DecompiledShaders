#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1353;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _336.x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[23u].w) + _386) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3960 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _411 = (_404 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _412 = (_404 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _413 = (_404 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _462 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _476 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _336.y) * 2.0) - ((((_452 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3971 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _484 = (_477 * ((_430.x * cbMtdParam._m0[13u].x) - _411)) + _411;
    float _485 = (_477 * ((_430.y * cbMtdParam._m0[13u].y) - _412)) + _412;
    float _486 = (_477 * ((_430.z * cbMtdParam._m0[13u].z) - _413)) + _413;
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _544 = _542.x;
    float _545 = _542.y;
    float _546 = _542.z;
    float _553 = ((_525.x - _544) * _404) + _544;
    float _554 = ((_525.y - _545) * _404) + _545;
    float _555 = ((_525.z - _546) * _404) + _546;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _580 = ((_567.z - _555) * _477) + _555;
    float _583 = ((((_567.x - _553) * _477) + _553) * 2.0) + (-1.0);
    float _585 = ((((_567.y - _554) * _477) + _554) * 2.0) + (-1.0);
    float _586 = dot(vec2(_583, _585), vec2(_583, _585));
    float _3982 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _591 = sqrt(1.0 - (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))));
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _617 = (((_605.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _583;
    float _618 = (((_605.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _621 = fma(_591, _236, fma(_618, _243, _617 * _229));
    float _624 = fma(_591, _237, fma(_618, _244, _617 * _230));
    float _627 = fma(_591, _238, fma(_618, _245, _617 * _231));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _660 = _658.x;
    float _661 = 1.0 - _660;
    float _670 = (cbMtdParam._m0[19u].x + dot(vec4(_631 * _621, _631 * _624, _631 * _627, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_660 - _661) * cbMtdParam._m0[24u].z) + _661) * cbMtdParam._m0[21u].z);
    float _3993 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _671 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _678 = (_671 * ((_505.x * cbMtdParam._m0[18u].x) - _484)) + _484;
    float _679 = (_671 * ((_505.y * cbMtdParam._m0[18u].y) - _485)) + _485;
    float _680 = (_671 * ((_505.z * cbMtdParam._m0[18u].z) - _486)) + _486;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _708 = _706.x;
    float _726 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _708) * _404) + _708;
    float _743 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _726) * _477) + _726;
    float _747 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _743) * cbMtdParam._m0[19u].z) + _743;
    float _749 = _747 - (_747 * _671);
    float _753 = (cbMtdParam._m0[19u].w * (_605.z - _580)) + _580;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _773 = (_766.x * 2.0) + (-1.0);
    float _774 = (_766.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4004 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _783 = ((_766.z - _753) * _671) + _753;
    float _793 = ((sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) - _591) * _671) + _591;
    float _796 = (((_773 - _617) * _671) + _617) + (cbMtdParam._m0[21u].x * _617);
    float _797 = (((_774 - _618) * _671) + _618) + (cbMtdParam._m0[21u].x * _618);
    float _799 = cbMtdParam._m0[22u].x + _605.w;
    float _802 = fma(_793, _236, fma(_797, _243, _796 * _229));
    float _805 = fma(_793, _237, fma(_797, _244, _796 * _230));
    float _808 = fma(_793, _238, fma(_797, _245, _796 * _231));
    float _812 = inversesqrt(dot(vec3(_802, _805, _808), vec3(_802, _805, _808)));
    float _813 = _812 * _802;
    float _814 = _812 * _805;
    float _815 = _812 * _808;
    float _4015 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _816 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4037 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4048 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4059 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4070 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _821 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _835 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _886 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _876);
    float _887 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _876);
    float _888 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _876);
    float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
    float _893 = _886 * _892;
    float _894 = _887 * _892;
    float _895 = _888 * _892;
    float _901 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _902 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_815, cbSceneParam._m0[5u].z, fma(_814, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _813));
    float _923 = fma(_815, cbSceneParam._m0[6u].z, fma(_814, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _813));
    float _926 = fma(_815, cbSceneParam._m0[7u].z, fma(_814, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _813));
    uint _940 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_940].z;
    float _4081 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _952 = 1.0 - _821;
    float _953 = _949 * _952;
    float _954 = _950 * _952;
    float _955 = _951 * _952;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _821;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _821;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _821;
    float _963 = _960 + 0.039999999105930328369140625;
    float _965 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _901, cbSceneParam._m0[86u].y * _902));
    float _979 = ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * TEXCOORD_5.w) * _975.x;
    float _980 = dot(vec3(_813, _814, _815), vec3(_893, _894, _895));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _813) - _893;
    float _988 = (_983 * _814) - _894;
    float _989 = (_983 * _815) - _895;
    float _993 = abs(dot(vec3(_893, _894, _895), vec3(_813, _814, _815)));
    float _4114 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_816);
    float _1008 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1014 = (1.0 - _1008) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1015 = _1008 * _995;
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1081 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1085 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1110 = _1043 + _813;
        float _1111 = _1047 + _814;
        float _1112 = _1051 + _815;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1077;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1081;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1085;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_813, _814, _815), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4162 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_813, _814, _815), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4195 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_813, _814, _815), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4228 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1391 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1395 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1399 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1422 = _1043 + _813;
        float _1423 = _1047 + _814;
        float _1424 = _1051 + _815;
        float _1434 = fma(_1424, cbModelParam._m0[30u].z, fma(_1423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1422)) - _1391;
        float _1435 = fma(_1424, cbModelParam._m0[31u].z, fma(_1423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1422)) - _1395;
        float _1436 = fma(_1424, cbModelParam._m0[32u].z, fma(_1423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1422)) - _1399;
        float _1440 = inversesqrt(dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436)));
        float _1453 = ((_1440 * _1434) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1391 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1440 * _1435) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1395 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1440 * _1436) / cbModelParam._m0[35u].z) + ((((((_1399 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1453, _1454, _1455), 0.0);
        float _1490 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1457.x + (-0.5));
        float _1492 = _1490 * (_1457.y + (-0.5));
        float _1493 = _1490 * (_1457.z + (-0.5));
        float _1500 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1464.x + (-0.5));
        float _1502 = _1500 * (_1464.y + (-0.5));
        float _1503 = _1500 * (_1464.z + (-0.5));
        float _1510 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1471.x + (-0.5));
        float _1512 = _1510 * (_1471.y + (-0.5));
        float _1513 = _1510 * (_1471.z + (-0.5));
        float _1520 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1478.x + (-0.5));
        float _1522 = _1520 * (_1478.y + (-0.5));
        float _1523 = _1520 * (_1478.z + (-0.5));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = _1491 * 0.5;
        float _1528 = _1501 * 0.5;
        float _1529 = _1511 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_813, _814, _815), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4291 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1554 + 1.0))) + _1559) * _1524;
        float _1569 = _1492 * 0.5;
        float _1570 = _1502 * 0.5;
        float _1571 = _1512 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_813, _814, _815), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4324 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1596 + 1.0))) + _1601) * _1525;
        float _1611 = _1493 * 0.5;
        float _1612 = _1503 * 0.5;
        float _1613 = _1513 * 0.5;
        float _1614 = dot(vec3(_1611, _1612, _1613), vec3(_1611, _1612, _1613));
        float _1619 = (_1614 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1614);
        float _1627 = (dot(vec3(_813, _814, _815), vec3(_1619 * _1611, _1619 * _1612, _1619 * _1613)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1636 = sqrt(((_1612 * _1612) + (_1611 * _1611)) + (_1613 * _1613)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1638 = _1637 * 2.0;
        float _1642 = (1.0 - _1637) / (_1637 + 1.0);
        float _4357 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1652 = ((((1.0 - _1643) * (_1638 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1638 + 1.0))) + _1643) * _1526;
        _1660 = _1493;
        _1661 = _1492;
        _1662 = _1491;
        _1663 = _1503;
        _1664 = _1502;
        _1665 = _1501;
        _1666 = _1513;
        _1667 = _1512;
        _1668 = _1511;
        _1669 = _1526;
        _1670 = _1525;
        _1671 = _1524;
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)));
    }
    else
    {
        _1660 = _1353;
        _1661 = _1353;
        _1662 = _1353;
        _1663 = _1353;
        _1664 = _1353;
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = 0.0;
        _1673 = 0.0;
        _1674 = 0.0;
    }
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1365)) + _1365;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1366)) + _1366;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1367)) + _1367;
    float _1707 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1685, cbSceneParam._m0[89u].y, _1684 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1685, cbSceneParam._m0[90u].y, _1684 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1685, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1684));
    float _1728 = _987 * 0.5;
    float _1729 = _988 * 0.5;
    float _1730 = _989 * 0.5;
    float _1731 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1734 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1737 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1771;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1744 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1748 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1752 = dot(vec4(_1728, _1729, _1730, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1759 = dot(vec4(cbModelParam._m0[39u]), vec4(_1728, _1729, _1730, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1782;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1773 = dot(vec4(cbModelParam._m0[40u]), vec4(_1728, _1729, _1730, 1.0));
        _1782 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1782 = 1.0;
    }
    float _1786 = (_1782 * cbModelParam._m0[1u].x) + (_1771 * (1.0 - cbModelParam._m0[1u].x));
    float _1796 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _816);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1796 : min(cbModelParam._m0[25u].z, _1796));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1844 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1848 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1852 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1855 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1858 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1861 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1889;
        if (_1855 > 0.0)
        {
            _1889 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1889 = frontier_phi_14_12_ladder;
        }
        float _2060;
        if (_1858 > 0.0)
        {
            _2060 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2060 = frontier_phi_23_19_ladder;
        }
        float _2355;
        if (_1861 > 0.0)
        {
            _2355 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2355 = frontier_phi_35_30_ladder;
        }
        float _2357 = isnan(_2060) ? _1889 : (isnan(_1889) ? _2060 : min(_1889, _2060));
        float _2358 = isnan(_2355) ? _2357 : (isnan(_2357) ? _2355 : min(_2357, _2355));
        float _2362 = (_2358 * _1855) + _1844;
        float _2363 = (_2358 * _1858) + _1848;
        float _2364 = (_2358 * _1861) + _1852;
        float _2365 = _2358 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2365;
        float _2369 = _2365 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 > _2369) || ((_2363 < _2367) || ((_2362 < _2367) || (_2362 > _2369))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2364, cbModelParam._m0[9u].z, fma(_2363, cbModelParam._m0[9u].y, _2362 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2364, cbModelParam._m0[10u].z, fma(_2363, cbModelParam._m0[10u].y, _2362 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2364, cbModelParam._m0[11u].z, fma(_2363, cbModelParam._m0[11u].y, _2362 * cbModelParam._m0[11u].x))), _1797);
            frontier_phi_13_35_ladder = _2509.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2509.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2509.x * cbModelParam._m0[1u].y;
        }
        _1877 = frontier_phi_13_35_ladder_2;
        _1879 = frontier_phi_13_35_ladder_1;
        _1881 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1797);
        _1877 = _1865.x * cbModelParam._m0[1u].y;
        _1879 = _1865.y * cbModelParam._m0[1u].y;
        _1881 = _1865.z * cbModelParam._m0[1u].y;
    }
    float _1885 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _816);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1885 : min(cbModelParam._m0[25u].w, _1885));
    float _1975;
    float _1977;
    float _1979;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1939 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1943 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1947 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1950 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1953 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1956 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2065;
        if (_1950 > 0.0)
        {
            _2065 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2065 = frontier_phi_25_21_ladder;
        }
        float _2382;
        if (_1953 > 0.0)
        {
            _2382 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2382 = frontier_phi_37_32_ladder;
        }
        float _2720;
        if (_1956 > 0.0)
        {
            _2720 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2720 = frontier_phi_47_44_ladder;
        }
        float _2722 = isnan(_2382) ? _2065 : (isnan(_2065) ? _2382 : min(_2065, _2382));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _1950) + _1939;
        float _2728 = (_2723 * _1953) + _1943;
        float _2729 = (_2723 * _1956) + _1947;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _1886);
            frontier_phi_22_47_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1975 = frontier_phi_22_47_ladder_2;
        _1977 = frontier_phi_22_47_ladder_1;
        _1979 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1959 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1886);
        _1975 = _1959.x * cbModelParam._m0[1u].z;
        _1977 = _1959.y * cbModelParam._m0[1u].z;
        _1979 = _1959.z * cbModelParam._m0[1u].z;
    }
    float _1992 = (((_1014 * _963) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_1975 - _1877)) + _1877);
    float _1994 = (((_1014 * _965) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_1977 - _1879)) + _1879);
    float _1996 = (((_1014 * _966) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_1979 - _1881)) + _1881);
    float _1999 = fma(_1996, cbSceneParam._m0[89u].z, fma(_1994, cbSceneParam._m0[89u].y, _1992 * cbSceneParam._m0[89u].x));
    float _2002 = fma(_1996, cbSceneParam._m0[90u].z, fma(_1994, cbSceneParam._m0[90u].y, _1992 * cbSceneParam._m0[90u].x));
    float _2005 = fma(_1996, cbSceneParam._m0[91u].z, fma(_1994, cbSceneParam._m0[91u].y, _1992 * cbSceneParam._m0[91u].x));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2052 = _2039 / _2051;
    float _2053 = _2043 / _2051;
    float _2054 = _2047 / _2051;
    float _2201;
    float _2202;
    float _2203;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2081 = ((uint(_2054 > cbSceneParam._m0[59u].y) + uint(_2054 > cbSceneParam._m0[59u].x)) + uint(_2054 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2082 = _2081 + 43u;
        uint _2090 = _2081 + 44u;
        uint _2098 = _2081 + 45u;
        uint _2106 = _2081 + 46u;
        float _2117 = fma(_2051, cbSceneParam._m0[_2082].w, fma(_2047, cbSceneParam._m0[_2082].z, fma(_2043, cbSceneParam._m0[_2082].y, _2039 * cbSceneParam._m0[_2082].x)));
        float _2121 = fma(_2051, cbSceneParam._m0[_2090].w, fma(_2047, cbSceneParam._m0[_2090].z, fma(_2043, cbSceneParam._m0[_2090].y, _2039 * cbSceneParam._m0[_2090].x)));
        float _2129 = fma(_2051, cbSceneParam._m0[_2106].w, fma(_2047, cbSceneParam._m0[_2106].z, fma(_2043, cbSceneParam._m0[_2106].y, _2039 * cbSceneParam._m0[_2106].x)));
        float _2134 = cbSceneParam._m0[33u].z * _2129;
        float _2136 = cbSceneParam._m0[33u].w * _2129;
        float _2139 = fma(_2051, cbSceneParam._m0[_2098].w, fma(_2047, cbSceneParam._m0[_2098].z, fma(_2043, cbSceneParam._m0[_2098].y, _2039 * cbSceneParam._m0[_2098].x))) / _2129;
        float _2187 = (cbSceneParam._m0[33u].x - sqrt(((_2053 * _2053) + (_2052 * _2052)) + (_2054 * _2054))) * cbSceneParam._m0[33u].y;
        float _4483 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2194 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2134 + _2117) / _2129, (_2136 + _2121) / _2129), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2136 + _2117) / _2129, (_2121 - _2134) / _2129), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 - _2134) / _2129, (_2121 - _2136) / _2129), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 - _2136) / _2129, (_2134 + _2121) / _2129), _2139), 0.0)).x), vec4(0.25)));
        _2201 = 1.0 - (_2194 * cbSceneParam._m0[34u].x);
        _2202 = 1.0 - (_2194 * cbSceneParam._m0[34u].y);
        _2203 = 1.0 - (_2194 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2201 = 1.0;
        _2202 = 1.0;
        _2203 = 1.0;
    }
    float _2267;
    float _2269;
    float _2271;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2255 = fma(_2051, cbSceneParam._m0[63u].w, fma(_2047, cbSceneParam._m0[63u].z, fma(_2043, cbSceneParam._m0[63u].y, _2039 * cbSceneParam._m0[63u].x)));
        float _2256 = fma(_2051, cbSceneParam._m0[60u].w, fma(_2047, cbSceneParam._m0[60u].z, fma(_2043, cbSceneParam._m0[60u].y, _2039 * cbSceneParam._m0[60u].x))) / _2255;
        float _2257 = fma(_2051, cbSceneParam._m0[61u].w, fma(_2047, cbSceneParam._m0[61u].z, fma(_2043, cbSceneParam._m0[61u].y, _2039 * cbSceneParam._m0[61u].x))) / _2255;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2256 >= cbSceneParam._m0[64u].x) && (_2257 >= cbSceneParam._m0[64u].y)) && (_2256 <= cbSceneParam._m0[64u].z)) && (_2257 <= cbSceneParam._m0[64u].w))
        {
            float _2395 = fma(_2051, cbSceneParam._m0[62u].w, fma(_2047, cbSceneParam._m0[62u].z, fma(_2043, cbSceneParam._m0[62u].y, _2039 * cbSceneParam._m0[62u].x))) / _2255;
            float _2399 = isnan(cbSceneParam._m0[41u].w) ? _2395 : (isnan(_2395) ? cbSceneParam._m0[41u].w : max(_2395, cbSceneParam._m0[41u].w));
            float _2442 = (cbSceneParam._m0[33u].x - sqrt(((_2053 * _2053) + (_2052 * _2052)) + (_2054 * _2054))) * cbSceneParam._m0[33u].y;
            float _4499 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
            float _2449 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2256, cbSceneParam._m0[33u].w + _2257), _2399), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2256, _2257 - cbSceneParam._m0[33u].z), _2399), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2256 - cbSceneParam._m0[33u].z, _2257 - cbSceneParam._m0[33u].w), _2399), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2256 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2257), _2399), 0.0)).x), vec4(0.25)));
            float _2453 = 1.0 - (_2449 * cbSceneParam._m0[34u].x);
            float _2454 = 1.0 - (_2449 * cbSceneParam._m0[34u].y);
            float _2455 = 1.0 - (_2449 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
            frontier_phi_34_33_ladder_1 = isnan(_2454) ? _2202 : (isnan(_2202) ? _2454 : min(_2202, _2454));
            frontier_phi_34_33_ladder_2 = isnan(_2453) ? _2201 : (isnan(_2201) ? _2453 : min(_2201, _2453));
        }
        else
        {
            frontier_phi_34_33_ladder = _2203;
            frontier_phi_34_33_ladder_1 = _2202;
            frontier_phi_34_33_ladder_2 = _2201;
        }
        _2267 = frontier_phi_34_33_ladder_2;
        _2269 = frontier_phi_34_33_ladder_1;
        _2271 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2267 = _2201;
        _2269 = _2202;
        _2271 = _2203;
    }
    uvec4 _2276 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2278 = _2276.x * 14u;
    uint _2279 = _2278 + 13u;
    float _2286 = _979 + (-1.0);
    float _2291 = (cbLight._m0[_2279].x * _2286) + 1.0;
    float _2292 = (cbLight._m0[_2279].y * _2286) + 1.0;
    float _2293 = (cbLight._m0[_2279].z * _2286) + 1.0;
    float _2294 = (cbLight._m0[_2279].w * _2286) + 1.0;
    uint _2295 = _2278 + 5u;
    float _2301 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
    uint _2305 = _2278 + 4u;
    float _2314 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
    uint _2318 = _2278 | 1u;
    float _2329 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_813, _814, _815));
    float _2332 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_813, _814, _815));
    float _4535 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _4546 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2337 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2339 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2346 = ((cbLight._m0[_2295].x * _2301) * _2339) + (((cbLight._m0[_2305].x * _2267) * _2314) * _2337);
    float _2347 = ((_2301 * cbLight._m0[_2295].y) * _2339) + (((cbLight._m0[_2305].y * _2269) * _2314) * _2337);
    float _2348 = ((_2301 * cbLight._m0[_2295].z) * _2339) + (((cbLight._m0[_2305].z * _2271) * _2314) * _2337);
    uvec4 _2352 = floatBitsToUint(cbLight._m0[_2278 + 12u]);
    bool _2354 = _2352.x == 0u;
    float _2456;
    float _2458;
    float _2460;
    if (_2354)
    {
        _2456 = _2346;
        _2458 = _2347;
        _2460 = _2348;
    }
    else
    {
        uint _2464 = _2278 + 6u;
        float _2480 = (dot(vec3(cbLight._m0[_2278 + 2u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2481 = _2480 * _2480;
        float _4557 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2482 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2483 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2456 = (((cbLight._m0[_2464].x * 0.3183098733425140380859375) * _2482) * _2483) + _2346;
        _2458 = (((cbLight._m0[_2464].y * 0.3183098733425140380859375) * _2482) * _2483) + _2347;
        _2460 = (((cbLight._m0[_2464].z * 0.3183098733425140380859375) * _2482) * _2483) + _2348;
    }
    bool _2463 = _2352.y == 0u;
    float _2518;
    float _2520;
    float _2522;
    if (_2463)
    {
        _2518 = _2456;
        _2520 = _2458;
        _2522 = _2460;
    }
    else
    {
        uint _2691 = _2278 + 7u;
        float _2707 = (dot(vec3(cbLight._m0[_2278 + 3u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2708 = _2707 * _2707;
        float _4573 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2709 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2710 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2518 = (((cbLight._m0[_2691].x * 0.3183098733425140380859375) * _2709) * _2710) + _2456;
        _2520 = (((cbLight._m0[_2691].y * 0.3183098733425140380859375) * _2709) * _2710) + _2458;
        _2522 = (((cbLight._m0[_2691].z * 0.3183098733425140380859375) * _2709) * _2710) + _2460;
    }
    uint _2525 = _2278 + 8u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _816) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2278].x + _893;
    float _2541 = cbLight._m0[_2278].y + _894;
    float _2542 = cbLight._m0[_2278].z + _895;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2278].xyz));
    float _4589 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _4600 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2554 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2555 = dot(vec3(_813, _814, _815), vec3(_2547, _2548, _2549));
    float _4611 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2559 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2547, _2548, _2549));
    float _4622 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2563 = _2539 * _2539;
    float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
    float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
    float _2576 = 0.959999978542327880859375 - _960;
    float _2578 = 0.959999978542327880859375 - _961;
    float _2579 = 0.959999978542327880859375 - _962;
    float _2586 = 1.0 - _2539;
    float _2597 = (0.5 / (((_2554 * ((_2553 * _2586) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2586) + _2539) * _2553))) * _2553;
    float _4633 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
    uint _2613 = _2278 + 9u;
    float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _816) * 0.949999988079071044921875);
    float _2625 = _2624 * _2624;
    float _2626 = cbLight._m0[_2318].x + _893;
    float _2627 = cbLight._m0[_2318].y + _894;
    float _2628 = cbLight._m0[_2318].z + _895;
    float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
    float _2633 = _2632 * _2626;
    float _2634 = _2632 * _2627;
    float _2635 = _2632 * _2628;
    float _2636 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2318].xyz));
    float _4644 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2640 = dot(vec3(_813, _814, _815), vec3(_2633, _2634, _2635));
    float _4655 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2644 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2633, _2634, _2635));
    float _4666 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2648 = _2625 * _2625;
    float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
    float _2659 = exp2(log2(1.0 - (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0)))) * 5.0);
    float _2666 = 1.0 - _2625;
    float _2676 = (0.5 / (((_2554 * ((_2639 * _2666) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2666) + _2625) * _2639))) * _2639;
    float _4677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2678 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
    float _2688 = (((((_2659 * _2576) + _963) * cbLight._m0[_2613].x) * _2678) * _2301) + ((((cbLight._m0[_2525].x * _2267) * ((_2575 * _2576) + _963)) * _2599) * _2314);
    float _2689 = (((((_2659 * _2578) + _965) * cbLight._m0[_2613].y) * _2678) * _2301) + ((((cbLight._m0[_2525].y * _2269) * ((_2575 * _2578) + _965)) * _2599) * _2314);
    float _2690 = (((((_2659 * _2579) + _966) * cbLight._m0[_2613].z) * _2678) * _2301) + ((((cbLight._m0[_2525].z * _2271) * ((_2575 * _2579) + _966)) * _2599) * _2314);
    float _2746;
    float _2748;
    float _2750;
    if (_2354)
    {
        _2746 = _2688;
        _2748 = _2689;
        _2750 = _2690;
    }
    else
    {
        uint _2752 = _2278 + 2u;
        uint _2756 = _2278 + 10u;
        float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2752].w)) * _816) * 0.949999988079071044921875);
        float _2771 = _2770 * _2770;
        float _2772 = cbLight._m0[_2752].x + _893;
        float _2773 = cbLight._m0[_2752].y + _894;
        float _2774 = cbLight._m0[_2752].z + _895;
        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
        float _2779 = _2778 * _2772;
        float _2780 = _2778 * _2773;
        float _2781 = _2778 * _2774;
        float _2782 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2752].xyz));
        float _4688 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2786 = dot(vec3(_813, _814, _815), vec3(_2779, _2780, _2781));
        float _4699 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2790 = dot(vec3(cbLight._m0[_2752].xyz), vec3(_2779, _2780, _2781));
        float _4710 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2794 = _2771 * _2771;
        float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
        float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) * 5.0);
        float _2812 = 1.0 - _2771;
        float _2822 = (0.5 / (((_2554 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2812) + _2771) * _2785))) * _2785;
        float _4721 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2746 = (((((_2805 * _2576) + _963) * cbLight._m0[_2756].x) * _2824) * _2825) + _2688;
        _2748 = (((((_2805 * _2578) + _965) * cbLight._m0[_2756].y) * _2824) * _2825) + _2689;
        _2750 = (((((_2805 * _2579) + _966) * cbLight._m0[_2756].z) * _2824) * _2825) + _2690;
    }
    float _2856;
    float _2858;
    float _2860;
    if (_2463)
    {
        _2856 = _2746;
        _2858 = _2748;
        _2860 = _2750;
    }
    else
    {
        uint _2867 = _2278 + 3u;
        uint _2871 = _2278 + 11u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _816) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _893;
        float _2888 = cbLight._m0[_2867].y + _894;
        float _2889 = cbLight._m0[_2867].z + _895;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2867].xyz));
        float _4737 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2901 = dot(vec3(_813, _814, _815), vec3(_2894, _2895, _2896));
        float _4748 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4759 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2920 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
        float _2927 = 1.0 - _2886;
        float _2937 = (0.5 / (((_2554 * ((_2900 * _2927) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2554 * _2927) + _2886) * _2900))) * _2900;
        float _4770 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2939 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2940 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2856 = (((((_2920 * _2576) + _963) * cbLight._m0[_2871].x) * _2939) * _2940) + _2746;
        _2858 = (((((_2920 * _2578) + _965) * cbLight._m0[_2871].y) * _2939) * _2940) + _2748;
        _2860 = (((((_2920 * _2579) + _966) * cbLight._m0[_2871].z) * _2939) * _2940) + _2750;
    }
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_2276.y == 0u)
    {
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.x;
        uint _2973 = uint((float(_2961.y) * floor(float(uint(cbSceneParam._m0[85u].y * _902) / _2962))) + floor(float(uint(cbSceneParam._m0[85u].x * _901) / _2962)));
        float _2983 = (log2(_2054 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2984 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
        uint _2987 = uint(isnan(14.0) ? _2984 : (isnan(_2984) ? 14.0 : min(_2984, 14.0)));
        uvec4 _2992 = texelFetch(g_lightClusterGridBuffer, int(((_2987 << 2u) + (_2973 << 6u)) >> 2u));
        uint _2993 = _2992.x;
        uint _2994 = _2961.z;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((((1u << ((_2994 >> 4u) & 15u)) + 4294967295u) & _2993) == 0u) || ((_2994 & 240u) == 0u))
        {
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
            _3081 = 0.0;
            _3083 = 0.0;
        }
        else
        {
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3082;
            float _3084;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            uint _3224 = 0u;
            uint _3233;
            bool _3234;
            for (;;)
            {
                _3233 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3224 << 2u)) >> 2u)).x;
                _3234 = _3233 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3234)
                {
                    frontier_phi_66_pred = _3223;
                    frontier_phi_66_pred_1 = _3222;
                    frontier_phi_66_pred_2 = _3221;
                    frontier_phi_66_pred_3 = _3220;
                    frontier_phi_66_pred_4 = _3219;
                    frontier_phi_66_pred_5 = _3218;
                }
                else
                {
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    uint _3348;
                    _3342 = _3218;
                    _3343 = _3219;
                    _3344 = _3220;
                    _3345 = _3221;
                    _3346 = _3222;
                    _3347 = _3223;
                    _3348 = _3233;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    for (;;)
                    {
                        uint _3352 = uint(findLSB(_3348)) + (_3224 << 5u);
                        uint _3349 = (_3348 + 4294967295u) & _3348;
                        uint _3354 = _3352 * 48u;
                        vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 3u)).x));
                        uint _3374 = (_3352 * 48u) + 4u;
                        vec4 _3387 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3393 = (_3352 * 48u) + 8u;
                        vec3 _3404 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3393)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3393 + 2u)).x));
                        float _3408 = _3368.x - _2052;
                        float _3409 = _3368.y - _2053;
                        float _3410 = _3368.z - _2054;
                        float _3411 = dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410));
                        float _3414 = inversesqrt(_3411);
                        float _3415 = _3414 * _3408;
                        float _3416 = _3414 * _3409;
                        float _3417 = _3414 * _3410;
                        float _3418 = dot(vec3(_920, _923, _926), vec3(_3415, _3416, _3417));
                        float _3423 = 1.0 - (_3411 * _3368.w);
                        float _4796 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3424 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3425 = sqrt(_3411) * _3387.w;
                        float _3428 = 1.39999997615814208984375 / (_3425 + 1.39999997615814208984375);
                        float _3429 = _3428 * _3428;
                        float _3432 = ((1.0 - _3429) * _3418) + _3429;
                        float _3435 = _3425 * _3425;
                        float _3439 = ((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3424) / ((_3435 * 0.699999988079071044921875) + 1.0);
                        float _3443 = (-0.0) - _2052;
                        float _3444 = (-0.0) - _2053;
                        float _3445 = (-0.0) - _2054;
                        float _3449 = inversesqrt(dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445)));
                        float _3450 = _3449 * _3443;
                        float _3451 = _3449 * _3444;
                        float _3452 = _3449 * _3445;
                        float _3459 = exp2(log2(1.0 / ((_3435 * 3.5) + 5.0)) * 0.25);
                        float _3460 = 1.0 - _995;
                        float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                        float _3468 = _3467 * _3467;
                        float _3469 = _3468 * _3468;
                        float _3470 = _3450 + _3415;
                        float _3471 = _3451 + _3416;
                        float _3472 = _3452 + _3417;
                        float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                        float _3480 = dot(vec3(_920, _923, _926), vec3(_3450, _3451, _3452));
                        float _4812 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3484 = dot(vec3(_920, _923, _926), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                        float _4823 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                        float _3492 = _3428 * _3468;
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3418) + _3493;
                        float _4834 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3497 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3498 = 1.0 - _3468;
                        float _3508 = (0.5 / (((_3497 * ((_3483 * _3498) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3468) * _3483))) * _3497;
                        float _4845 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3519 = (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3491 * _3491) * ((_3435 * 2.1991131305694580078125) + 3.141590118408203125))) * _3424;
                        _3277 = (_3439 * _3387.x) + _3345;
                        _3278 = (_3439 * _3387.y) + _3346;
                        _3279 = (_3439 * _3387.z) + _3347;
                        _3274 = (_3519 * _3404.x) + _3342;
                        _3275 = (_3519 * _3404.y) + _3343;
                        _3276 = (_3519 * _3404.z) + _3344;
                        if (_3349 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3342 = _3274;
                            _3343 = _3275;
                            _3344 = _3276;
                            _3345 = _3277;
                            _3346 = _3278;
                            _3347 = _3279;
                            _3348 = _3349;
                        }
                    }
                    frontier_phi_66_pred = _3279;
                    frontier_phi_66_pred_1 = _3278;
                    frontier_phi_66_pred_2 = _3277;
                    frontier_phi_66_pred_3 = _3276;
                    frontier_phi_66_pred_4 = _3275;
                    frontier_phi_66_pred_5 = _3274;
                }
                _3084 = frontier_phi_66_pred;
                _3082 = frontier_phi_66_pred_1;
                _3080 = frontier_phi_66_pred_2;
                _3078 = frontier_phi_66_pred_3;
                _3076 = frontier_phi_66_pred_4;
                _3074 = frontier_phi_66_pred_5;
                uint _3225 = _3224 + 1u;
                if (_3225 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3218 = _3074;
                    _3219 = _3076;
                    _3220 = _3078;
                    _3221 = _3080;
                    _3222 = _3082;
                    _3223 = _3084;
                    _3224 = _3225;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
            _3081 = _3082;
            _3083 = _3084;
        }
        uvec4 _3087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3088 = _3087.z;
        uint _3090 = (_3088 >> 8u) & 15u;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        if (((4294967295u << _3090) & _2993) == 0u)
        {
            _3186 = _3073;
            _3188 = _3075;
            _3190 = _3077;
            _3192 = _3079;
            _3194 = _3081;
            _3196 = _3083;
        }
        else
        {
            float _3211 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
            float _3212 = _3211 * _2052;
            float _3213 = _3211 * _2053;
            float _3214 = _3211 * _2054;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3090 < ((_3088 >> 12u) & 15u))
            {
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3325 = _3073;
                float _3326 = _3075;
                float _3327 = _3077;
                float _3328 = _3079;
                float _3329 = _3081;
                float _3330 = _3083;
                uint _3331 = _3090;
                uint _3340;
                bool _3341;
                for (;;)
                {
                    _3340 = texelFetch(g_lightClassification, int((((_2987 << 5u) + (_2973 << 9u)) + (_3331 << 2u)) >> 2u)).x;
                    _3341 = _3340 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3341)
                    {
                        frontier_phi_72_pred = _3330;
                        frontier_phi_72_pred_1 = _3329;
                        frontier_phi_72_pred_2 = _3328;
                        frontier_phi_72_pred_3 = _3327;
                        frontier_phi_72_pred_4 = _3326;
                        frontier_phi_72_pred_5 = _3325;
                    }
                    else
                    {
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3537 = _3325;
                        float _3538 = _3326;
                        float _3539 = _3327;
                        float _3540 = _3328;
                        float _3541 = _3329;
                        float _3542 = _3330;
                        uint _3543 = _3340;
                        uint _3544;
                        vec4 _3569;
                        float _3570;
                        vec4 _3585;
                        vec3 _3597;
                        vec4 _3612;
                        vec4 _3627;
                        float _3673;
                        bool _3674;
                        for (;;)
                        {
                            uint _3554 = ((_3331 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3543));
                            _3544 = (_3543 + 4294967295u) & _3543;
                            uint _3556 = _3554 * 40u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3570 = _3569.w;
                            uint _3572 = (_3554 * 40u) + 4u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3554 * 40u) + 8u;
                            _3597 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x));
                            uint _3599 = (_3554 * 40u) + 16u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3614 = (_3554 * 40u) + 20u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3554 * 40u) + 24u;
                            vec4 _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3648 = (_3554 * 40u) + 28u;
                            vec4 _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            _3673 = fma(_2054, _3661.z, fma(_2053, _3661.y, _3661.x * _2052)) + _3661.w;
                            _3674 = !((fma(_2054, _3642.z, fma(_2053, _3642.y, _3642.x * _2052)) + _3642.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3674)
                            {
                                float _3701 = _3569.x - _2052;
                                float _3702 = _3569.y - _2053;
                                float _3703 = _3569.z - _2054;
                                float _3704 = dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703));
                                float _3707 = inversesqrt(_3704);
                                float _3708 = _3707 * _3701;
                                float _3709 = _3707 * _3702;
                                float _3710 = _3707 * _3703;
                                float _3714 = 1.0 - (_3704 / (_3570 * _3570));
                                float _4856 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3719 = sqrt(_3704) * _3585.w;
                                float _3721 = 1.39999997615814208984375 / (_3719 + 1.39999997615814208984375);
                                float _3722 = _3721 * _3721;
                                float _3725 = ((1.0 - _3722) * dot(vec3(_3708, _3709, _3710), vec3(_920, _923, _926))) + _3722;
                                float _3728 = _3719 * _3719;
                                float _3732 = (fma(_2054, _3612.z, fma(_2053, _3612.y, _3612.x * _2052)) + _3612.w) / _3673;
                                float _3733 = (fma(_2054, _3627.z, fma(_2053, _3627.y, _3627.x * _2052)) + _3627.w) / _3673;
                                float _3737 = 1.0 - dot(vec2(_3732, _3733), vec2(_3732, _3733));
                                float _4872 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3739 = _3738 * (((isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0))) * _3715) / ((_3728 * 0.699999988079071044921875) + 1.0));
                                float _3751 = exp2(log2(1.0 / ((_3728 * 3.5) + 5.0)) * 0.25);
                                float _3752 = 1.0 - _995;
                                float _3759 = sqrt(1.0 - ((1.0 - (_3752 * _3752)) * (1.0 - (_3751 * _3751))));
                                float _3760 = _3759 * _3759;
                                float _3761 = _3760 * _3760;
                                float _3762 = _3708 - _3212;
                                float _3763 = _3709 - _3213;
                                float _3764 = _3710 - _3214;
                                float _3768 = inversesqrt(dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764)));
                                float _3772 = dot(vec3(_920, _923, _926), vec3((-0.0) - _3212, (-0.0) - _3213, (-0.0) - _3214));
                                float _4883 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3775 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3776 = dot(vec3(_920, _923, _926), vec3(_3768 * _3762, _3768 * _3763, _3768 * _3764));
                                float _4894 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3779 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3783 = ((_3779 * _3779) * (_3761 + (-1.0))) + 1.0;
                                float _3784 = _3721 * _3760;
                                float _3785 = _3784 * _3784;
                                float _3791 = ((1.0 - _3785) * dot(vec3(_920, _923, _926), vec3(_3708, _3709, _3710))) + _3785;
                                float _4905 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3792 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3793 = 1.0 - _3760;
                                float _3803 = (0.5 / (((_3792 * ((_3775 * _3793) + _3760)) + 9.9999999392252902907785028219223e-09) + (((_3792 * _3793) + _3760) * _3775))) * _3792;
                                float _4916 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3813 = (_3738 * _3715) * (((_3761 * 3.1415927410125732421875) * (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) / ((_3783 * _3783) * ((_3728 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3739 * _3585.y;
                                frontier_phi_78_pred_1 = _3739 * _3585.x;
                                frontier_phi_78_pred_2 = _3813 * _3597.z;
                                frontier_phi_78_pred_3 = _3813 * _3597.y;
                                frontier_phi_78_pred_4 = _3813 * _3597.x;
                                frontier_phi_78_pred_5 = _3739 * _3585.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3821 = frontier_phi_78_pred;
                            _3820 = frontier_phi_78_pred_1;
                            _3819 = frontier_phi_78_pred_2;
                            _3818 = frontier_phi_78_pred_3;
                            _3817 = frontier_phi_78_pred_4;
                            _3822 = frontier_phi_78_pred_5;
                            _3527 = _3820 + _3540;
                            _3528 = _3821 + _3541;
                            _3529 = _3822 + _3542;
                            _3524 = _3817 + _3537;
                            _3525 = _3818 + _3538;
                            _3526 = _3819 + _3539;
                            if (_3544 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3526;
                                _3540 = _3527;
                                _3541 = _3528;
                                _3542 = _3529;
                                _3543 = _3544;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3529;
                        frontier_phi_72_pred_1 = _3528;
                        frontier_phi_72_pred_2 = _3527;
                        frontier_phi_72_pred_3 = _3526;
                        frontier_phi_72_pred_4 = _3525;
                        frontier_phi_72_pred_5 = _3524;
                    }
                    _3197 = frontier_phi_72_pred;
                    _3195 = frontier_phi_72_pred_1;
                    _3193 = frontier_phi_72_pred_2;
                    _3191 = frontier_phi_72_pred_3;
                    _3189 = frontier_phi_72_pred_4;
                    _3187 = frontier_phi_72_pred_5;
                    uint _3332 = _3331 + 1u;
                    if (_3332 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3325 = _3187;
                        _3326 = _3189;
                        _3327 = _3191;
                        _3328 = _3193;
                        _3329 = _3195;
                        _3330 = _3197;
                        _3331 = _3332;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3197;
                frontier_phi_60_61_ladder_1 = _3195;
                frontier_phi_60_61_ladder_2 = _3191;
                frontier_phi_60_61_ladder_3 = _3189;
                frontier_phi_60_61_ladder_4 = _3187;
                frontier_phi_60_61_ladder_5 = _3193;
            }
            else
            {
                frontier_phi_60_61_ladder = _3083;
                frontier_phi_60_61_ladder_1 = _3081;
                frontier_phi_60_61_ladder_2 = _3077;
                frontier_phi_60_61_ladder_3 = _3075;
                frontier_phi_60_61_ladder_4 = _3073;
                frontier_phi_60_61_ladder_5 = _3079;
            }
            _3186 = frontier_phi_60_61_ladder_4;
            _3188 = frontier_phi_60_61_ladder_3;
            _3190 = frontier_phi_60_61_ladder_2;
            _3192 = frontier_phi_60_61_ladder_5;
            _3194 = frontier_phi_60_61_ladder_1;
            _3196 = frontier_phi_60_61_ladder;
        }
        float _3201 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _3006 = (_3201 * _3192) + _2518;
        _3008 = (_3201 * _3194) + _2520;
        _3010 = (_3201 * _3196) + _2522;
        _3012 = ((_3186 * _963) * _3201) + _2856;
        _3014 = ((_3188 * _965) * _3201) + _2858;
        _3016 = ((_3190 * _966) * _3201) + _2860;
    }
    else
    {
        _3006 = _2518;
        _3008 = _2520;
        _3010 = _2522;
        _3012 = _2856;
        _3014 = _2858;
        _3016 = _2860;
    }
    float _4932 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4943 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4954 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    uint _3036 = _248 + 6u;
    float _3044 = _901 / cbSceneParam._m0[86u].x;
    float _3045 = _902 / cbSceneParam._m0[86u].y;
    vec4 _3059 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, (log2((isnan(cbSceneParam._m0[77u].w) ? _835 : (isnan(_835) ? cbSceneParam._m0[77u].w : min(_835, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3061 = _3059.x;
    float _3062 = _3059.y;
    float _3063 = _3059.z;
    float _3064 = _3059.w;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_835 > cbSceneParam._m0[78u].w)
    {
        float _3098 = isnan(_835) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _835 : min(cbSceneParam._m0[80u].w, _835));
        float _3099 = _3098 / _835;
        float _3110 = _3099 * _886;
        float _3111 = _887 * _3099;
        float _3112 = (-0.0) - _3111;
        float _3114 = _3099 * _888;
        float _3116 = (cbSceneParam._m0[77u].w * _3112) / _3098;
        float _3117 = _3116 + cbSceneParam._m0[79u].w;
        float _3118 = cbSceneParam._m0[79u].w - _3111;
        float _3124 = sqrt(((_3110 * _3110) + (_3111 * _3111)) + (_3114 * _3114));
        float _3127 = (1.0 - (cbSceneParam._m0[77u].w / _3098)) * _3124;
        float _3132 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3134 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3287;
        if (abs((_3112 - _3116) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3287 = ((((_3117 > 0.0) ? exp2(_3132 * _3117) : (2.0 - exp2(_3134 * _3117))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3127;
        }
        else
        {
            float _3247 = 1.0 / cbSceneParam._m0[80u].x;
            float _3248 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : max(_3117, _3118));
            float _3249 = isnan(_3118) ? _3117 : (isnan(_3117) ? _3118 : min(_3117, _3118));
            float _3258 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : min(_3248, 0.0));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            _3287 = ((abs(_3124 / _3112) * cbSceneParam._m0[80u].y) * ((((_3258 - _3259) * 2.0) - ((exp2(_3132 * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0)))) - exp2(_3132 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))))) * _3247)) - ((exp2(_3134 * _3258) - exp2(_3134 * _3259)) * _3247))) + (_3127 * cbSceneParam._m0[80u].z);
        }
        vec4 _3289 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3044, _3045, 1.0), 0.0);
        float _3298 = exp2((_3287 * (-1.44269502162933349609375)) * (1.0 - _3289.w));
        float _3299 = log2(_3298);
        float _3315 = log2(_3064);
        _3136 = (exp2(_3315 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].x)) * _3289.x) / cbSceneParam._m0[78u].x)) + _3061;
        _3138 = (exp2(_3315 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].y)) * _3289.y) / cbSceneParam._m0[78u].y)) + _3062;
        _3140 = (exp2(_3315 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3299 * cbSceneParam._m0[78u].z)) * _3289.z) / cbSceneParam._m0[78u].z)) + _3063;
        _3142 = _3298 * _3064;
    }
    else
    {
        _3136 = _3061;
        _3138 = _3062;
        _3140 = _3063;
        _3142 = _3064;
    }
    float _3154 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3155 = _3154 == 3.0;
    float _3156 = log2(_3142);
    float _3163 = exp2(_3156 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_3006 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _979))) + ((_3012 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1786)) * cbPerFrame._m0[3u].x));
    float _3164 = exp2(_3156 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_3008 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _979))) + ((_3014 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1786)) * cbPerFrame._m0[3u].x));
    float _3165 = exp2(_3156 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_3010 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _979))) + ((_3016 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1786)) * cbPerFrame._m0[3u].x));
    float _3174 = (_3154 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3174 * (_3155 ? _3163 : (_3163 + (cbSceneParam._m0[72u].w * _3136)));
    SV_Target.y = _3174 * (_3155 ? _3164 : (_3164 + (cbSceneParam._m0[72u].w * _3138)));
    SV_Target.z = _3174 * (_3155 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3140)));
    SV_Target.w = cbInstanceData._m0[_3036].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3036].w;
}


