#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1582;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3905 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3916 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3927 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = _370.x * cbMtdParam._m0[11u].x;
    float _376 = _370.y * cbMtdParam._m0[11u].y;
    float _377 = _370.z * cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _415.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3938 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _489 = (_482 * ((_396.x * cbMtdParam._m0[12u].x) - _375)) + _375;
    float _490 = (_482 * ((_396.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _491 = (_482 * ((_396.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _415.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3949 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _562 = (_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489;
    float _563 = (_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490;
    float _564 = (_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _602 = _600.x;
    float _612 = dot(vec4(_602, _600.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _624 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _415.z) * 2.0) - ((((_602 - _612) * cbMtdParam._m0[23u].w) + _612) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3960 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _635 = (_344.x * cbMtdParam._m0[9u].x) * ((_625 * ((_583.x * cbMtdParam._m0[14u].x) - _562)) + _562);
    float _636 = (_344.y * cbMtdParam._m0[9u].y) * ((_625 * ((_583.y * cbMtdParam._m0[14u].y) - _563)) + _563);
    float _637 = (_344.z * cbMtdParam._m0[9u].z) * ((_625 * ((_583.z * cbMtdParam._m0[14u].z) - _564)) + _564);
    float _641 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _635;
    float _644 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _636;
    float _647 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _637;
    float _655 = (((_635 - _641) * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) + _641) * 4.55000019073486328125;
    float _657 = (((_636 - _644) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) + _644) * 4.55000019073486328125;
    float _659 = (((_637 - _647) * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) + _647) * 4.55000019073486328125;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _307) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _308) + cbTextureTilingScale._m0[14u].w));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _738 = _736.x;
    float _739 = _736.y;
    float _740 = _736.z;
    float _747 = ((_719.x - _738) * _482) + _738;
    float _748 = ((_719.y - _739) * _482) + _739;
    float _749 = ((_719.z - _740) * _482) + _740;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _772 = ((_761.x - _747) * _555) + _747;
    float _773 = ((_761.y - _748) * _555) + _748;
    float _774 = ((_761.z - _749) * _555) + _749;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _799 = ((_786.z - _774) * _625) + _774;
    float _802 = ((((_786.x - _772) * _625) + _772) * 2.0) + (-1.0);
    float _803 = ((((_786.y - _773) * _625) + _773) * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _3971 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _809 = sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))));
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _850 = _848.x;
    float _851 = 1.0 - _850;
    float _866 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_850 - _851) * cbMtdParam._m0[24u].z) + _851) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3982 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _867 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _874 = (_867 * ((_677.x * cbMtdParam._m0[18u].x) - _655)) + _655;
    float _875 = (_867 * ((_677.y * cbMtdParam._m0[18u].y) - _657)) + _657;
    float _876 = (_867 * ((_677.z * cbMtdParam._m0[18u].z) - _659)) + _659;
    vec4 _902 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _904 = _902.x;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _904) * _482) + _904;
    float _938 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _921) * _555) + _921;
    float _956 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _938) * _625) + _938;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _956) * cbMtdParam._m0[19u].z) + _956;
    float _962 = _960 - (_960 * _867);
    float _967 = (((_696.z - _799) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _799;
    float _971 = ((_823.z - _967) * cbMtdParam._m0[19u].w) + _967;
    vec4 _984 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _991 = (_984.x * 2.0) + (-1.0);
    float _992 = (_984.y * 2.0) + (-1.0);
    float _993 = dot(vec2(_991, _992), vec2(_991, _992));
    float _3993 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1001 = (_867 * (_984.z - _971)) + _971;
    float _1010 = (_802 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_696.x * 2.0) + (-1.0)))) + (((_823.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1011 = (_803 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_696.y * 2.0) + (-1.0)))) + (((_823.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1023 = (((_991 - _1010) + (cbMtdParam._m0[21u].x * _1010)) * _867) + _1010;
    float _1024 = (((_992 - _1011) + (cbMtdParam._m0[21u].x * _1011)) * _867) + _1011;
    float _1025 = (_867 * (sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _809)) + _809;
    float _1029 = cbMtdParam._m0[22u].x + _823.w;
    float _1032 = fma(_1025, _254 * NORMAL.x, fma(_1024, _261 * TANGENT.x, (_247 * _239) * _1023));
    float _1035 = fma(_1025, _254 * NORMAL.y, fma(_1024, _261 * TANGENT.y, (_247 * _240) * _1023));
    float _1038 = fma(_1025, _254 * NORMAL.z, fma(_1024, _261 * TANGENT.z, (_247 * _241) * _1023));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _4004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1046 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4026 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4037 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4048 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4059 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _1051 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1065 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1115 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1105);
    float _1116 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1105);
    float _1117 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1105);
    float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
    float _1122 = _1115 * _1121;
    float _1123 = _1116 * _1121;
    float _1124 = _1117 * _1121;
    float _1130 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1131 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1149 = fma(_1045, cbSceneParam._m0[5u].z, fma(_1044, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1043));
    float _1152 = fma(_1045, cbSceneParam._m0[6u].z, fma(_1044, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1043));
    float _1155 = fma(_1045, cbSceneParam._m0[7u].z, fma(_1044, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1043));
    uint _1169 = (_288 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1175 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1169].x;
    float _1176 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1169].y;
    float _1177 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1169].z;
    float _4070 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _1181 = 1.0 - _1051;
    float _1182 = _1178 * _1181;
    float _1183 = _1179 * _1181;
    float _1184 = _1180 * _1181;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1051;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1051;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1051;
    float _1192 = _1189 + 0.039999999105930328369140625;
    float _1194 = _1190 + 0.039999999105930328369140625;
    float _1195 = _1191 + 0.039999999105930328369140625;
    vec4 _1204 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1130, cbSceneParam._m0[86u].y * _1131));
    float _1208 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _1204.x;
    float _1209 = dot(vec3(_1043, _1044, _1045), vec3(_1122, _1123, _1124));
    float _1212 = _1209 * 2.0;
    float _1216 = (_1212 * _1043) - _1122;
    float _1217 = (_1212 * _1044) - _1123;
    float _1218 = (_1212 * _1045) - _1124;
    float _1222 = abs(dot(vec3(_1122, _1123, _1124), vec3(_1043, _1044, _1045)));
    float _4103 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1224 = sqrt(_1046);
    float _1237 = exp2((_1224 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1224 * 3.0));
    float _1243 = (1.0 - _1237) * ((_1224 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1244 = _1237 * _1224;
    float _1272 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1581;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1306 = fma(_1280, cbModelParam._m0[26u].z, fma(_1276, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1272));
        float _1310 = fma(_1280, cbModelParam._m0[27u].z, fma(_1276, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1272));
        float _1314 = fma(_1280, cbModelParam._m0[28u].z, fma(_1276, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1272));
        float _1339 = _1272 + _1043;
        float _1340 = _1276 + _1044;
        float _1341 = _1280 + _1045;
        float _1351 = fma(_1341, cbModelParam._m0[26u].z, fma(_1340, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1339)) - _1306;
        float _1352 = fma(_1341, cbModelParam._m0[27u].z, fma(_1340, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1339)) - _1310;
        float _1353 = fma(_1341, cbModelParam._m0[28u].z, fma(_1340, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1339)) - _1314;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1306 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1310 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[34u].z) + ((((((_1314 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1409 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1375.x + (-0.5));
        float _1411 = _1409 * (_1375.y + (-0.5));
        float _1412 = _1409 * (_1375.z + (-0.5));
        float _1419 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1382.x + (-0.5));
        float _1421 = _1419 * (_1382.y + (-0.5));
        float _1422 = _1419 * (_1382.z + (-0.5));
        float _1429 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1389.x + (-0.5));
        float _1431 = _1429 * (_1389.y + (-0.5));
        float _1432 = _1429 * (_1389.z + (-0.5));
        float _1439 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1396.x + (-0.5));
        float _1441 = _1439 * (_1396.y + (-0.5));
        float _1442 = _1439 * (_1396.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1463 = (dot(vec3(_1043, _1044, _1045), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1473 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4151 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1475 + 1.0))) + _1480) * _1443;
        float _1490 = _1411 * 0.5;
        float _1491 = _1421 * 0.5;
        float _1492 = _1431 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_1043, _1044, _1045), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4184 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1517 + 1.0))) + _1522) * _1444;
        float _1532 = _1412 * 0.5;
        float _1533 = _1422 * 0.5;
        float _1534 = _1432 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1043, _1044, _1045), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4217 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1559 + 1.0))) + _1564) * _1445;
        _1581 = _1412;
        _1583 = _1411;
        _1584 = _1410;
        _1585 = _1422;
        _1586 = _1421;
        _1587 = _1420;
        _1588 = _1432;
        _1589 = _1431;
        _1590 = _1430;
        _1591 = _1445;
        _1592 = _1444;
        _1593 = _1443;
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1595 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1582;
        _1583 = _1582;
        _1584 = _1582;
        _1585 = _1582;
        _1586 = _1582;
        _1587 = _1582;
        _1588 = _1582;
        _1589 = _1582;
        _1590 = _1582;
        _1591 = _1582;
        _1592 = _1582;
        _1593 = _1582;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1619 = fma(_1280, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272));
        float _1623 = fma(_1280, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272));
        float _1627 = fma(_1280, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272));
        float _1650 = _1272 + _1043;
        float _1651 = _1276 + _1044;
        float _1652 = _1280 + _1045;
        float _1662 = fma(_1652, cbModelParam._m0[30u].z, fma(_1651, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1650)) - _1619;
        float _1663 = fma(_1652, cbModelParam._m0[31u].z, fma(_1651, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1650)) - _1623;
        float _1664 = fma(_1652, cbModelParam._m0[32u].z, fma(_1651, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1650)) - _1627;
        float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
        float _1681 = ((_1668 * _1662) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1619 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1682 = ((_1668 * _1663) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1623 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1683 = ((_1668 * _1664) / cbModelParam._m0[35u].z) + ((((((_1627 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        float _1718 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1685.x + (-0.5));
        float _1720 = _1718 * (_1685.y + (-0.5));
        float _1721 = _1718 * (_1685.z + (-0.5));
        float _1728 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1692.x + (-0.5));
        float _1730 = _1728 * (_1692.y + (-0.5));
        float _1731 = _1728 * (_1692.z + (-0.5));
        float _1738 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1699.x + (-0.5));
        float _1740 = _1738 * (_1699.y + (-0.5));
        float _1741 = _1738 * (_1699.z + (-0.5));
        float _1748 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1706.x + (-0.5));
        float _1750 = _1748 * (_1706.y + (-0.5));
        float _1751 = _1748 * (_1706.z + (-0.5));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = _1719 * 0.5;
        float _1756 = _1729 * 0.5;
        float _1757 = _1739 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_1043, _1044, _1045), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4280 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1782 + 1.0))) + _1787) * _1752;
        float _1797 = _1720 * 0.5;
        float _1798 = _1730 * 0.5;
        float _1799 = _1740 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_1043, _1044, _1045), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4313 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1824 + 1.0))) + _1829) * _1753;
        float _1839 = _1721 * 0.5;
        float _1840 = _1731 * 0.5;
        float _1841 = _1741 * 0.5;
        float _1842 = dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841));
        float _1847 = (_1842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1842);
        float _1855 = (dot(vec3(_1043, _1044, _1045), vec3(_1847 * _1839, _1847 * _1840, _1847 * _1841)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1866 = _1865 * 2.0;
        float _1870 = (1.0 - _1865) / (_1865 + 1.0);
        float _4346 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1880 = ((((1.0 - _1871) * (_1866 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1866 + 1.0))) + _1871) * _1754;
        _1888 = _1721;
        _1889 = _1720;
        _1890 = _1719;
        _1891 = _1731;
        _1892 = _1730;
        _1893 = _1729;
        _1894 = _1741;
        _1895 = _1740;
        _1896 = _1739;
        _1897 = _1754;
        _1898 = _1753;
        _1899 = _1752;
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)));
    }
    else
    {
        _1888 = _1582;
        _1889 = _1582;
        _1890 = _1582;
        _1891 = _1582;
        _1892 = _1582;
        _1893 = _1582;
        _1894 = _1582;
        _1895 = _1582;
        _1896 = _1582;
        _1897 = _1582;
        _1898 = _1582;
        _1899 = _1582;
        _1900 = 0.0;
        _1901 = 0.0;
        _1902 = 0.0;
    }
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1594)) + _1594;
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1595)) + _1595;
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1596)) + _1596;
    float _1935 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1912));
    float _1956 = _1216 * 0.5;
    float _1957 = _1217 * 0.5;
    float _1958 = _1218 * 0.5;
    float _1959 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _1962 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _1965 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1999;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1972 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1581, _1585, _1588, _1591));
        float _1976 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1583, _1586, _1589, _1592));
        float _1980 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1584, _1587, _1590, _1593));
        float _1987 = dot(vec4(cbModelParam._m0[39u]), vec4(_1956, _1957, _1958, 1.0));
        _1999 = dot(vec3(isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1987) ? 0.0 : (isnan(0.0) ? _1987 : max(0.0, _1987))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1999 = 1.0;
    }
    float _2010;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2001 = dot(vec4(cbModelParam._m0[40u]), vec4(_1956, _1957, _1958, 1.0));
        _2010 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2001) ? 0.0 : (isnan(0.0) ? _2001 : max(0.0, _2001))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2010 = 1.0;
    }
    float _2014 = (_2010 * cbModelParam._m0[1u].x) + (_1999 * (1.0 - cbModelParam._m0[1u].x));
    float _2024 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1046);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2024 : min(cbModelParam._m0[25u].z, _2024));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2072 = fma(_1280, cbModelParam._m0[13u].z, fma(_1276, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1272)) + cbModelParam._m0[13u].w;
        float _2076 = fma(_1280, cbModelParam._m0[14u].z, fma(_1276, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1272)) + cbModelParam._m0[14u].w;
        float _2080 = fma(_1280, cbModelParam._m0[15u].z, fma(_1276, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1272)) + cbModelParam._m0[15u].w;
        float _2083 = fma(_1218, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1216));
        float _2086 = fma(_1218, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1216));
        float _2089 = fma(_1218, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1216));
        float _2117;
        if (_2083 > 0.0)
        {
            _2117 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2117 = frontier_phi_14_12_ladder;
        }
        float _2319;
        if (_2086 > 0.0)
        {
            _2319 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2319 = frontier_phi_23_19_ladder;
        }
        float _2573;
        if (_2089 > 0.0)
        {
            _2573 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2573 = frontier_phi_35_30_ladder;
        }
        float _2575 = isnan(_2319) ? _2117 : (isnan(_2117) ? _2319 : min(_2117, _2319));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _2083) + _2072;
        float _2581 = (_2576 * _2086) + _2076;
        float _2582 = (_2576 * _2089) + _2080;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2583;
        float _2587 = _2583 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 > _2587) || ((_2581 < _2585) || ((_2580 < _2585) || (_2580 > _2587))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2582, cbModelParam._m0[9u].z, fma(_2581, cbModelParam._m0[9u].y, _2580 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2582, cbModelParam._m0[10u].z, fma(_2581, cbModelParam._m0[10u].y, _2580 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2582, cbModelParam._m0[11u].z, fma(_2581, cbModelParam._m0[11u].y, _2580 * cbModelParam._m0[11u].x))), _2025);
            frontier_phi_13_35_ladder = _2710.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2710.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2710.x * cbModelParam._m0[1u].y;
        }
        _2105 = frontier_phi_13_35_ladder_2;
        _2107 = frontier_phi_13_35_ladder_1;
        _2109 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1216, _1217, _1218), _2025);
        _2105 = _2093.x * cbModelParam._m0[1u].y;
        _2107 = _2093.y * cbModelParam._m0[1u].y;
        _2109 = _2093.z * cbModelParam._m0[1u].y;
    }
    float _2113 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1046);
    float _2114 = isnan(_2113) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2113 : min(cbModelParam._m0[25u].w, _2113));
    float _2203;
    float _2205;
    float _2207;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2167 = fma(_1280, cbModelParam._m0[21u].z, fma(_1276, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1272)) + cbModelParam._m0[21u].w;
        float _2171 = fma(_1280, cbModelParam._m0[22u].z, fma(_1276, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1272)) + cbModelParam._m0[22u].w;
        float _2175 = fma(_1280, cbModelParam._m0[23u].z, fma(_1276, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1272)) + cbModelParam._m0[23u].w;
        float _2178 = fma(_1218, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1216));
        float _2181 = fma(_1218, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1216));
        float _2184 = fma(_1218, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1216));
        float _2324;
        if (_2178 > 0.0)
        {
            _2324 = abs((1.0 - _2167) / _2178);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2167 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2324 = frontier_phi_25_21_ladder;
        }
        float _2600;
        if (_2181 > 0.0)
        {
            _2600 = abs((1.0 - _2171) / _2181);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2171 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2600 = frontier_phi_37_32_ladder;
        }
        float _2813;
        if (_2184 > 0.0)
        {
            _2813 = abs((1.0 - _2175) / _2184);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2175 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2813 = frontier_phi_46_43_ladder;
        }
        float _2815 = isnan(_2600) ? _2324 : (isnan(_2324) ? _2600 : min(_2324, _2600));
        float _2816 = isnan(_2813) ? _2815 : (isnan(_2815) ? _2813 : min(_2815, _2813));
        float _2820 = (_2816 * _2178) + _2167;
        float _2821 = (_2816 * _2181) + _2171;
        float _2822 = (_2816 * _2184) + _2175;
        float _2823 = _2816 * 9.9999997473787516355514526367188e-05;
        float _2824 = (-1.0) - _2823;
        float _2826 = _2823 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2822 > _2826) || ((_2822 < _2824) || ((_2821 > _2826) || ((_2821 < _2824) || ((_2820 < _2824) || (_2820 > _2826))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2822, cbModelParam._m0[17u].z, fma(_2821, cbModelParam._m0[17u].y, _2820 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2822, cbModelParam._m0[18u].z, fma(_2821, cbModelParam._m0[18u].y, _2820 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2822, cbModelParam._m0[19u].z, fma(_2821, cbModelParam._m0[19u].y, _2820 * cbModelParam._m0[19u].x))), _2114);
            frontier_phi_22_46_ladder = _3021.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3021.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3021.x * cbModelParam._m0[1u].z;
        }
        _2203 = frontier_phi_22_46_ladder_2;
        _2205 = frontier_phi_22_46_ladder_1;
        _2207 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2187 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1216, _1217, _1218), _2114);
        _2203 = _2187.x * cbModelParam._m0[1u].z;
        _2205 = _2187.y * cbModelParam._m0[1u].z;
        _2207 = _2187.z * cbModelParam._m0[1u].z;
    }
    float _2220 = (((_1243 * _1192) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2203 - _2105)) + _2105);
    float _2222 = (((_1243 * _1194) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2224 = (((_1243 * _1195) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2227 = fma(_2224, cbSceneParam._m0[89u].z, fma(_2222, cbSceneParam._m0[89u].y, _2220 * cbSceneParam._m0[89u].x));
    float _2230 = fma(_2224, cbSceneParam._m0[90u].z, fma(_2222, cbSceneParam._m0[90u].y, _2220 * cbSceneParam._m0[90u].x));
    float _2233 = fma(_2224, cbSceneParam._m0[91u].z, fma(_2222, cbSceneParam._m0[91u].y, _2220 * cbSceneParam._m0[91u].x));
    uvec4 _2243 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2245 = _2243.x * 14u;
    uint _2246 = _2245 + 13u;
    float _2253 = _1208 + (-1.0);
    float _2258 = (cbLight._m0[_2246].x * _2253) + 1.0;
    float _2259 = (cbLight._m0[_2246].y * _2253) + 1.0;
    float _2260 = (cbLight._m0[_2246].z * _2253) + 1.0;
    float _2261 = (cbLight._m0[_2246].w * _2253) + 1.0;
    uint _2262 = _2245 + 5u;
    float _2268 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
    uint _2272 = _2245 + 4u;
    float _2278 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2282 = _2245 | 1u;
    float _2293 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_1043, _1044, _1045));
    float _2296 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_1043, _1044, _1045));
    float _4482 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _4493 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2301 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2303 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2310 = ((cbLight._m0[_2262].x * _2268) * _2303) + ((cbLight._m0[_2272].x * _2278) * _2301);
    float _2311 = ((_2268 * cbLight._m0[_2262].y) * _2303) + ((_2278 * cbLight._m0[_2272].y) * _2301);
    float _2312 = ((_2268 * cbLight._m0[_2262].z) * _2303) + ((_2278 * cbLight._m0[_2272].z) * _2301);
    uvec4 _2316 = floatBitsToUint(cbLight._m0[_2245 + 12u]);
    bool _2318 = _2316.x == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2318)
    {
        _2329 = _2310;
        _2331 = _2311;
        _2333 = _2312;
    }
    else
    {
        uint _2337 = _2245 + 6u;
        float _2353 = (dot(vec3(cbLight._m0[_2245 + 2u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4504 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2356 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2329 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2310;
        _2331 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2311;
        _2333 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2312;
    }
    bool _2336 = _2316.y == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2336)
    {
        _2374 = _2329;
        _2376 = _2331;
        _2378 = _2333;
    }
    else
    {
        uint _2544 = _2245 + 7u;
        float _2560 = (dot(vec3(cbLight._m0[_2245 + 3u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2561 = _2560 * _2560;
        float _4520 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2562 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2563 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2374 = (((cbLight._m0[_2544].x * 0.3183098733425140380859375) * _2562) * _2563) + _2329;
        _2376 = (((cbLight._m0[_2544].y * 0.3183098733425140380859375) * _2562) * _2563) + _2331;
        _2378 = (((cbLight._m0[_2544].z * 0.3183098733425140380859375) * _2562) * _2563) + _2333;
    }
    uint _2381 = _2245 + 8u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _1046) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2245].x + _1122;
    float _2397 = cbLight._m0[_2245].y + _1123;
    float _2398 = cbLight._m0[_2245].z + _1124;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2245].xyz));
    float _4536 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _2410 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2411 = dot(vec3(_1043, _1044, _1045), vec3(_2403, _2404, _2405));
    float _4558 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2403, _2404, _2405));
    float _4569 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2395 * _2395;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0);
    float _2432 = 0.959999978542327880859375 - _1189;
    float _2434 = 0.959999978542327880859375 - _1190;
    float _2435 = 0.959999978542327880859375 - _1191;
    float _2442 = 1.0 - _2395;
    float _2453 = (0.5 / (((_2410 * ((_2409 * _2442) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2442) + _2395) * _2409))) * _2409;
    float _4580 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    uint _2466 = _2245 + 9u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _1046) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2282].x + _1122;
    float _2480 = cbLight._m0[_2282].y + _1123;
    float _2481 = cbLight._m0[_2282].z + _1124;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2282].xyz));
    float _4591 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2493 = dot(vec3(_1043, _1044, _1045), vec3(_2486, _2487, _2488));
    float _4602 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2486, _2487, _2488));
    float _4613 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2478 * _2478;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
    float _2519 = 1.0 - _2478;
    float _2529 = (0.5 / (((_2410 * ((_2492 * _2519) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2519) + _2478) * _2492))) * _2492;
    float _4624 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    float _2541 = (((((_2512 * _2432) + _1192) * cbLight._m0[_2466].x) * _2531) * _2268) + (((((_2431 * _2432) + _1192) * cbLight._m0[_2381].x) * _2455) * _2278);
    float _2542 = (((((_2512 * _2434) + _1194) * cbLight._m0[_2466].y) * _2531) * _2268) + (((((_2431 * _2434) + _1194) * cbLight._m0[_2381].y) * _2455) * _2278);
    float _2543 = (((((_2512 * _2435) + _1195) * cbLight._m0[_2466].z) * _2531) * _2268) + (((((_2431 * _2435) + _1195) * cbLight._m0[_2381].z) * _2455) * _2278);
    float _2605;
    float _2607;
    float _2609;
    if (_2318)
    {
        _2605 = _2541;
        _2607 = _2542;
        _2609 = _2543;
    }
    else
    {
        uint _2611 = _2245 + 2u;
        uint _2615 = _2245 + 10u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _1046) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _1122;
        float _2632 = cbLight._m0[_2611].y + _1123;
        float _2633 = cbLight._m0[_2611].z + _1124;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2611].xyz));
        float _4635 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2645 = dot(vec3(_1043, _1044, _1045), vec3(_2638, _2639, _2640));
        float _4646 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4657 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2664 = exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0);
        float _2671 = 1.0 - _2630;
        float _2681 = (0.5 / (((_2410 * ((_2644 * _2671) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2671) + _2630) * _2644))) * _2644;
        float _4668 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2683 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2684 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2605 = (((((_2664 * _2432) + _1192) * cbLight._m0[_2615].x) * _2683) * _2684) + _2541;
        _2607 = (((((_2664 * _2434) + _1194) * cbLight._m0[_2615].y) * _2683) * _2684) + _2542;
        _2609 = (((((_2664 * _2435) + _1195) * cbLight._m0[_2615].z) * _2683) * _2684) + _2543;
    }
    float _2719;
    float _2721;
    float _2723;
    if (_2336)
    {
        _2719 = _2605;
        _2721 = _2607;
        _2723 = _2609;
    }
    else
    {
        uint _2730 = _2245 + 3u;
        uint _2734 = _2245 + 11u;
        float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2730].w)) * _1046) * 0.949999988079071044921875);
        float _2749 = _2748 * _2748;
        float _2750 = cbLight._m0[_2730].x + _1122;
        float _2751 = cbLight._m0[_2730].y + _1123;
        float _2752 = cbLight._m0[_2730].z + _1124;
        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
        float _2757 = _2756 * _2750;
        float _2758 = _2756 * _2751;
        float _2759 = _2756 * _2752;
        float _2760 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2730].xyz));
        float _4684 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2764 = dot(vec3(_1043, _1044, _1045), vec3(_2757, _2758, _2759));
        float _4695 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2767 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2768 = dot(vec3(cbLight._m0[_2730].xyz), vec3(_2757, _2758, _2759));
        float _4706 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2772 = _2749 * _2749;
        float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
        float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0);
        float _2790 = 1.0 - _2749;
        float _2800 = (0.5 / (((_2410 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2410 * _2790) + _2749) * _2763))) * _2763;
        float _4717 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2802 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
        float _2803 = isnan(1.0) ? _2261 : (isnan(_2261) ? 1.0 : min(_2261, 1.0));
        _2719 = (((((_2783 * _2432) + _1192) * cbLight._m0[_2734].x) * _2802) * _2803) + _2605;
        _2721 = (((((_2783 * _2434) + _1194) * cbLight._m0[_2734].y) * _2802) * _2803) + _2607;
        _2723 = (((((_2783 * _2435) + _1195) * cbLight._m0[_2734].z) * _2802) * _2803) + _2609;
    }
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_2243.y == 0u)
    {
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2878;
        float _2880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2878;
        float _2881 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2878;
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1131) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _1130) / _2894)));
        float _2915 = (log2(_2881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
        }
        else
        {
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            uint _3177 = 0u;
            uint _3186;
            bool _3187;
            for (;;)
            {
                _3186 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3177 << 2u)) >> 2u)).x;
                _3187 = _3186 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3187)
                {
                    frontier_phi_61_pred = _3171;
                    frontier_phi_61_pred_1 = _3176;
                    frontier_phi_61_pred_2 = _3175;
                    frontier_phi_61_pred_3 = _3174;
                    frontier_phi_61_pred_4 = _3173;
                    frontier_phi_61_pred_5 = _3172;
                }
                else
                {
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    uint _3301;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3186;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    for (;;)
                    {
                        uint _3305 = uint(findLSB(_3301)) + (_3177 << 5u);
                        uint _3302 = (_3301 + 4294967295u) & _3301;
                        uint _3307 = _3305 * 48u;
                        vec4 _3321 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 3u)).x));
                        uint _3327 = (_3305 * 48u) + 4u;
                        vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3346 = (_3305 * 48u) + 8u;
                        vec3 _3357 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3346)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3346 + 2u)).x));
                        float _3361 = _3321.x - _2879;
                        float _3362 = _3321.y - _2880;
                        float _3363 = _3321.z - _2881;
                        float _3364 = dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363));
                        float _3367 = inversesqrt(_3364);
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3371 = dot(vec3(_1149, _1152, _1155), vec3(_3368, _3369, _3370));
                        float _3376 = 1.0 - (_3364 * _3321.w);
                        float _4743 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3377 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3378 = sqrt(_3364) * _3340.w;
                        float _3381 = 1.39999997615814208984375 / (_3378 + 1.39999997615814208984375);
                        float _3382 = _3381 * _3381;
                        float _3385 = ((1.0 - _3382) * _3371) + _3382;
                        float _3388 = _3378 * _3378;
                        float _3392 = ((isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))) * _3377) / ((_3388 * 0.699999988079071044921875) + 1.0);
                        float _3396 = (-0.0) - _2879;
                        float _3397 = (-0.0) - _2880;
                        float _3398 = (-0.0) - _2881;
                        float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                        float _3403 = _3402 * _3396;
                        float _3404 = _3402 * _3397;
                        float _3405 = _3402 * _3398;
                        float _3413 = exp2(log2(1.0 / ((_3388 * 3.5) + 5.0)) * 0.25);
                        float _3414 = 1.0 - _1224;
                        float _3421 = sqrt(1.0 - ((1.0 - (_3414 * _3414)) * (1.0 - (_3413 * _3413))));
                        float _3422 = _3421 * _3421;
                        float _3423 = _3422 * _3422;
                        float _3424 = _3403 + _3368;
                        float _3425 = _3404 + _3369;
                        float _3426 = _3405 + _3370;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3434 = dot(vec3(_1149, _1152, _1155), vec3(_3403, _3404, _3405));
                        float _4759 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3438 = dot(vec3(_1149, _1152, _1155), vec3(_3430 * _3424, _3430 * _3425, _3430 * _3426));
                        float _4770 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                        float _3441 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3445 = ((_3441 * _3441) * (_3423 + (-1.0))) + 1.0;
                        float _3446 = _3381 * _3422;
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3371) + _3447;
                        float _4781 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3451 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3452 = 1.0 - _3422;
                        float _3462 = (0.5 / (((_3451 * ((_3437 * _3452) + _3422)) + 9.9999999392252902907785028219223e-09) + (((_3451 * _3452) + _3422) * _3437))) * _3451;
                        float _4792 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3473 = (((_3423 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3445 * _3445) * ((_3388 * 2.1991131305694580078125) + 3.141590118408203125))) * _3377;
                        _3230 = (_3392 * _3340.x) + _3298;
                        _3231 = (_3392 * _3340.y) + _3299;
                        _3232 = (_3392 * _3340.z) + _3300;
                        _3227 = (_3473 * _3357.x) + _3295;
                        _3228 = (_3473 * _3357.y) + _3296;
                        _3229 = (_3473 * _3357.z) + _3297;
                        if (_3302 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3302;
                        }
                    }
                    frontier_phi_61_pred = _3227;
                    frontier_phi_61_pred_1 = _3232;
                    frontier_phi_61_pred_2 = _3231;
                    frontier_phi_61_pred_3 = _3230;
                    frontier_phi_61_pred_4 = _3229;
                    frontier_phi_61_pred_5 = _3228;
                }
                _3027 = frontier_phi_61_pred;
                _3037 = frontier_phi_61_pred_1;
                _3035 = frontier_phi_61_pred_2;
                _3033 = frontier_phi_61_pred_3;
                _3031 = frontier_phi_61_pred_4;
                _3029 = frontier_phi_61_pred_5;
                uint _3178 = _3177 + 1u;
                if (_3178 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3171 = _3027;
                    _3172 = _3029;
                    _3173 = _3031;
                    _3174 = _3033;
                    _3175 = _3035;
                    _3176 = _3037;
                    _3177 = _3178;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
        }
        uvec4 _3040 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3041 = _3040.z;
        uint _3043 = (_3041 >> 8u) & 15u;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        if (((4294967295u << _3043) & _2925) == 0u)
        {
            _3139 = _3026;
            _3141 = _3028;
            _3143 = _3030;
            _3145 = _3032;
            _3147 = _3034;
            _3149 = _3036;
        }
        else
        {
            float _3164 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
            float _3165 = _3164 * _2879;
            float _3166 = _3164 * _2880;
            float _3167 = _3164 * _2881;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3043 < ((_3041 >> 12u) & 15u))
            {
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3278 = _3026;
                float _3279 = _3028;
                float _3280 = _3030;
                float _3281 = _3032;
                float _3282 = _3034;
                float _3283 = _3036;
                uint _3284 = _3043;
                uint _3293;
                bool _3294;
                for (;;)
                {
                    _3293 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3284 << 2u)) >> 2u)).x;
                    _3294 = _3293 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3294)
                    {
                        frontier_phi_67_pred = _3281;
                        frontier_phi_67_pred_1 = _3282;
                        frontier_phi_67_pred_2 = _3283;
                        frontier_phi_67_pred_3 = _3280;
                        frontier_phi_67_pred_4 = _3279;
                        frontier_phi_67_pred_5 = _3278;
                    }
                    else
                    {
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3491 = _3278;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        uint _3497 = _3293;
                        uint _3498;
                        vec4 _3523;
                        float _3524;
                        vec4 _3539;
                        vec3 _3551;
                        vec4 _3566;
                        vec4 _3581;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3508 = ((_3284 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3497));
                            _3498 = (_3497 + 4294967295u) & _3497;
                            uint _3510 = _3508 * 40u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3524 = _3523.w;
                            uint _3526 = (_3508 * 40u) + 4u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3508 * 40u) + 8u;
                            _3551 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x));
                            uint _3553 = (_3508 * 40u) + 16u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3508 * 40u) + 20u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3508 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3508 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_2881, _3615.z, fma(_2880, _3615.y, _3615.x * _2879)) + _3615.w;
                            _3628 = !((fma(_2881, _3596.z, fma(_2880, _3596.y, _3596.x * _2879)) + _3596.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3523.x - _2879;
                                float _3656 = _3523.y - _2880;
                                float _3657 = _3523.z - _2881;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3524 * _3524));
                                float _4803 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3673 = sqrt(_3658) * _3539.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_1149, _1152, _1155))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_2881, _3566.z, fma(_2880, _3566.y, _3566.x * _2879)) + _3566.w) / _3627;
                                float _3687 = (fma(_2881, _3581.z, fma(_2880, _3581.y, _3581.x * _2879)) + _3581.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4819 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _1224;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3165;
                                float _3717 = _3663 - _3166;
                                float _3718 = _3664 - _3167;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_1149, _1152, _1155), vec3((-0.0) - _3165, (-0.0) - _3166, (-0.0) - _3167));
                                float _4830 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3730 = dot(vec3(_1149, _1152, _1155), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4841 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_1149, _1152, _1155), vec3(_3662, _3663, _3664))) + _3739;
                                float _4852 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4863 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3767 * _3551.x;
                                frontier_phi_73_pred_1 = _3767 * _3551.y;
                                frontier_phi_73_pred_2 = _3693 * _3539.z;
                                frontier_phi_73_pred_3 = _3693 * _3539.y;
                                frontier_phi_73_pred_4 = _3693 * _3539.x;
                                frontier_phi_73_pred_5 = _3767 * _3551.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_73_pred;
                            _3772 = frontier_phi_73_pred_1;
                            _3776 = frontier_phi_73_pred_2;
                            _3775 = frontier_phi_73_pred_3;
                            _3774 = frontier_phi_73_pred_4;
                            _3773 = frontier_phi_73_pred_5;
                            _3481 = _3774 + _3494;
                            _3482 = _3775 + _3495;
                            _3483 = _3776 + _3496;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            if (_3498 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3498;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3481;
                        frontier_phi_67_pred_1 = _3482;
                        frontier_phi_67_pred_2 = _3483;
                        frontier_phi_67_pred_3 = _3480;
                        frontier_phi_67_pred_4 = _3479;
                        frontier_phi_67_pred_5 = _3478;
                    }
                    _3146 = frontier_phi_67_pred;
                    _3148 = frontier_phi_67_pred_1;
                    _3150 = frontier_phi_67_pred_2;
                    _3144 = frontier_phi_67_pred_3;
                    _3142 = frontier_phi_67_pred_4;
                    _3140 = frontier_phi_67_pred_5;
                    uint _3285 = _3284 + 1u;
                    if (_3285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3278 = _3140;
                        _3279 = _3142;
                        _3280 = _3144;
                        _3281 = _3146;
                        _3282 = _3148;
                        _3283 = _3150;
                        _3284 = _3285;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3148;
                frontier_phi_55_56_ladder_1 = _3150;
                frontier_phi_55_56_ladder_2 = _3146;
                frontier_phi_55_56_ladder_3 = _3144;
                frontier_phi_55_56_ladder_4 = _3142;
                frontier_phi_55_56_ladder_5 = _3140;
            }
            else
            {
                frontier_phi_55_56_ladder = _3034;
                frontier_phi_55_56_ladder_1 = _3036;
                frontier_phi_55_56_ladder_2 = _3032;
                frontier_phi_55_56_ladder_3 = _3030;
                frontier_phi_55_56_ladder_4 = _3028;
                frontier_phi_55_56_ladder_5 = _3026;
            }
            _3139 = frontier_phi_55_56_ladder_5;
            _3141 = frontier_phi_55_56_ladder_4;
            _3143 = frontier_phi_55_56_ladder_3;
            _3145 = frontier_phi_55_56_ladder_2;
            _3147 = frontier_phi_55_56_ladder;
            _3149 = frontier_phi_55_56_ladder_1;
        }
        float _3154 = isnan(1.0) ? _1208 : (isnan(_1208) ? 1.0 : min(_1208, 1.0));
        _2938 = (_3154 * _3145) + _2374;
        _2940 = (_3154 * _3147) + _2376;
        _2942 = (_3154 * _3149) + _2378;
        _2944 = ((_3139 * _1192) * _3154) + _2719;
        _2946 = ((_3141 * _1194) * _3154) + _2721;
        _2948 = ((_3143 * _1195) * _3154) + _2723;
    }
    else
    {
        _2938 = _2374;
        _2940 = _2376;
        _2942 = _2378;
        _2944 = _2719;
        _2946 = _2721;
        _2948 = _2723;
    }
    float _4879 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _4890 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _4901 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    uint _2968 = _288 + 6u;
    float _2976 = _1130 / cbSceneParam._m0[86u].x;
    float _2977 = _1131 / cbSceneParam._m0[86u].y;
    vec4 _2991 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, (log2((isnan(cbSceneParam._m0[77u].w) ? _1065 : (isnan(_1065) ? cbSceneParam._m0[77u].w : min(_1065, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2993 = _2991.x;
    float _2994 = _2991.y;
    float _2995 = _2991.z;
    float _2996 = _2991.w;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    if (_1065 > cbSceneParam._m0[78u].w)
    {
        float _3051 = isnan(_1065) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1065 : min(cbSceneParam._m0[80u].w, _1065));
        float _3052 = _3051 / _1065;
        float _3063 = _3052 * _1115;
        float _3064 = _1116 * _3052;
        float _3065 = (-0.0) - _3064;
        float _3067 = _3052 * _1117;
        float _3069 = (cbSceneParam._m0[77u].w * _3065) / _3051;
        float _3070 = _3069 + cbSceneParam._m0[79u].w;
        float _3071 = cbSceneParam._m0[79u].w - _3064;
        float _3077 = sqrt(((_3063 * _3063) + (_3064 * _3064)) + (_3067 * _3067));
        float _3080 = (1.0 - (cbSceneParam._m0[77u].w / _3051)) * _3077;
        float _3085 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3087 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3240;
        if (abs((_3065 - _3069) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3240 = ((((_3070 > 0.0) ? exp2(_3085 * _3070) : (2.0 - exp2(_3087 * _3070))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3080;
        }
        else
        {
            float _3200 = 1.0 / cbSceneParam._m0[80u].x;
            float _3201 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : max(_3070, _3071));
            float _3202 = isnan(_3071) ? _3070 : (isnan(_3070) ? _3071 : min(_3070, _3071));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            float _3212 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : min(_3202, 0.0));
            _3240 = ((abs(_3077 / _3065) * cbSceneParam._m0[80u].y) * ((((_3211 - _3212) * 2.0) - ((exp2(_3085 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0)))) - exp2(_3085 * (isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))))) * _3200)) - ((exp2(_3087 * _3211) - exp2(_3087 * _3212)) * _3200))) + (_3080 * cbSceneParam._m0[80u].z);
        }
        vec4 _3242 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, 1.0), 0.0);
        float _3251 = exp2((_3240 * (-1.44269502162933349609375)) * (1.0 - _3242.w));
        float _3252 = log2(_3251);
        float _3268 = log2(_2996);
        _3089 = (exp2(_3268 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].x)) * _3242.x) / cbSceneParam._m0[78u].x)) + _2993;
        _3091 = (exp2(_3268 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].y)) * _3242.y) / cbSceneParam._m0[78u].y)) + _2994;
        _3093 = (exp2(_3268 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].z)) * _3242.z) / cbSceneParam._m0[78u].z)) + _2995;
        _3095 = _3251 * _2996;
    }
    else
    {
        _3089 = _2993;
        _3091 = _2994;
        _3093 = _2995;
        _3095 = _2996;
    }
    float _3107 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3108 = _3107 == 3.0;
    float _3109 = log2(_3095);
    float _3116 = exp2(_3109 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2938 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1208))) + ((_2944 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2014)) * cbPerFrame._m0[3u].x));
    float _3117 = exp2(_3109 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2940 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1208))) + ((_2946 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2014)) * cbPerFrame._m0[3u].x));
    float _3118 = exp2(_3109 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2942 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1208))) + ((_2948 + ((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * _2014)) * cbPerFrame._m0[3u].x));
    float _3127 = (_3107 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3127 * (_3108 ? _3116 : (_3116 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.y = _3127 * (_3108 ? _3117 : (_3117 + (cbSceneParam._m0[72u].w * _3091)));
    SV_Target.z = _3127 * (_3108 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3093)));
    SV_Target.w = cbInstanceData._m0[_2968].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2968].w;
}


