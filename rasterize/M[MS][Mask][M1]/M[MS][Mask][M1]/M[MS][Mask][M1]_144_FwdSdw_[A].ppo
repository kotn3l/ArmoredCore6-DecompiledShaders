#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1646;
float _4306;
float _4307;
float _4308;
float _4309;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _254 = _253 * _245;
    float _255 = _253 * _246;
    float _256 = _253 * _247;
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = _260 * NORMAL.x;
    float _262 = _260 * NORMAL.y;
    float _263 = _260 * NORMAL.z;
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = _267 * TANGENT.x;
    float _269 = _267 * TANGENT.y;
    float _270 = _267 * TANGENT.z;
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4318 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4329 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _4340 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    uint _294 = uint(roundEven(NORMAL.w)) * 13u;
    uint _299 = _294 + 1u;
    uint _303 = _294 + 2u;
    float _312 = sqrt(((cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x)) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x));
    float _313 = _312 * TEXCOORD.z;
    float _314 = _312 * TEXCOORD.w;
    vec4 _327 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _313) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _314) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _381 = _376.x * cbMtdParam._m0[11u].x;
    float _382 = _376.y * cbMtdParam._m0[11u].y;
    float _383 = _376.z * cbMtdParam._m0[11u].z;
    vec4 _402 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _313) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _314) + cbTextureTilingScale._m0[5u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _421.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4351 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _495 = (_488 * ((_402.x * cbMtdParam._m0[12u].x) - _381)) + _381;
    float _496 = (_488 * ((_402.y * cbMtdParam._m0[12u].y) - _382)) + _382;
    float _497 = (_488 * ((_402.z * cbMtdParam._m0[12u].z) - _383)) + _383;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _313) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _314) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _421.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4362 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _568 = (_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495;
    float _569 = (_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496;
    float _570 = (_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _313) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _314) + cbTextureTilingScale._m0[24u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _608 = _606.x;
    float _618 = dot(vec4(_608, _606.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _630 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _421.z) * 2.0) - ((((_608 - _618) * cbMtdParam._m0[23u].w) + _618) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4373 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _641 = (_350.x * cbMtdParam._m0[9u].x) * ((_631 * ((_589.x * cbMtdParam._m0[14u].x) - _568)) + _568);
    float _642 = (_350.y * cbMtdParam._m0[9u].y) * ((_631 * ((_589.y * cbMtdParam._m0[14u].y) - _569)) + _569);
    float _643 = (_350.z * cbMtdParam._m0[9u].z) * ((_631 * ((_589.z * cbMtdParam._m0[14u].z) - _570)) + _570);
    float _647 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _327.x) * _641;
    float _650 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _327.y) * _642;
    float _653 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _327.z) * _643;
    float _661 = (((_641 - _647) * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) + _647) * 4.55000019073486328125;
    float _663 = (((_642 - _650) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) + _650) * 4.55000019073486328125;
    float _665 = (((_643 - _653) * (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) + _653) * 4.55000019073486328125;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _313) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _314) + cbTextureTilingScale._m0[14u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _313) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _314) + cbTextureTilingScale._m0[20u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _313) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _314) + cbTextureTilingScale._m0[4u].w));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _746 = _744.x;
    float _747 = _744.y;
    float _748 = _744.z;
    float _755 = ((_727.x - _746) * _488) + _746;
    float _756 = ((_727.y - _747) * _488) + _747;
    float _757 = ((_727.z - _748) * _488) + _748;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _313) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _314) + cbTextureTilingScale._m0[2u].w));
    float _780 = ((_769.x - _755) * _561) + _755;
    float _781 = ((_769.y - _756) * _561) + _756;
    float _782 = ((_769.z - _757) * _561) + _757;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _313) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _314) + cbTextureTilingScale._m0[23u].w));
    float _807 = ((_794.z - _782) * _631) + _782;
    float _810 = ((((_794.x - _780) * _631) + _780) * 2.0) + (-1.0);
    float _811 = ((((_794.y - _781) * _631) + _781) * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _4384 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _817 = sqrt(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))));
    vec4 _835 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _847 = (_810 + ((((_702.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_835.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _848 = (_811 + ((((_702.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_835.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _851 = fma(_817, _261, fma(_848, _268, _847 * _254));
    float _854 = fma(_817, _262, fma(_848, _269, _847 * _255));
    float _857 = fma(_817, _263, fma(_848, _270, _847 * _256));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    vec4 _888 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _313) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _314) + cbTextureTilingScale._m0[11u].w));
    float _890 = _888.x;
    float _891 = 1.0 - _890;
    float _899 = (cbMtdParam._m0[19u].x + dot(vec4(_861 * _851, _861 * _854, _861 * _857, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_890 - _891) * cbMtdParam._m0[24u].z) + _891) * cbMtdParam._m0[21u].z);
    float _4395 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _900 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _907 = (_900 * ((_683.x * cbMtdParam._m0[18u].x) - _661)) + _661;
    float _908 = (_900 * ((_683.y * cbMtdParam._m0[18u].y) - _663)) + _663;
    float _909 = (_900 * ((_683.z * cbMtdParam._m0[18u].z) - _665)) + _665;
    vec4 _935 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _937 = _935.x;
    float _954 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _313) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _314) + cbTextureTilingScale._m0[9u].w)).x - _937) * _488) + _937;
    float _971 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _313) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _314) + cbTextureTilingScale._m0[21u].w)).x - _954) * _561) + _954;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _313) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _314) + cbTextureTilingScale._m0[10u].w)).x - _971) * _631) + _971;
    float _993 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _989) * cbMtdParam._m0[19u].z) + _989;
    float _995 = _993 - (_993 * _900);
    float _1000 = (((_702.z - _807) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _807;
    float _1004 = ((_835.z - _1000) * cbMtdParam._m0[19u].w) + _1000;
    vec4 _1017 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _313) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _314) + cbTextureTilingScale._m0[15u].w));
    float _1024 = (_1017.x * 2.0) + (-1.0);
    float _1025 = (_1017.y * 2.0) + (-1.0);
    float _1026 = dot(vec2(_1024, _1025), vec2(_1024, _1025));
    float _4406 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1034 = ((_1017.z - _1004) * _900) + _1004;
    float _1044 = ((sqrt(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) - _817) * _900) + _817;
    float _1047 = (((_1024 - _847) * _900) + _847) + (cbMtdParam._m0[21u].x * _847);
    float _1048 = (((_1025 - _848) * _900) + _848) + (cbMtdParam._m0[21u].x * _848);
    float _1052 = cbMtdParam._m0[22u].x + _835.w;
    float _1055 = fma(_1044, _261, fma(_1048, _268, _1047 * _254));
    float _1058 = fma(_1044, _262, fma(_1048, _269, _1047 * _255));
    float _1061 = fma(_1044, _263, fma(_1048, _270, _1047 * _256));
    float _1065 = inversesqrt(dot(vec3(_1055, _1058, _1061), vec3(_1055, _1058, _1061)));
    float _1066 = _1065 * _1055;
    float _1067 = _1065 * _1058;
    float _1068 = _1065 * _1061;
    float _4417 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1069 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _4428 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4439 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4450 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4461 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4472 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _1074 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _1088 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1138 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1128);
    float _1139 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1128);
    float _1140 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1128);
    float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
    float _1145 = _1138 * _1144;
    float _1146 = _1139 * _1144;
    float _1147 = _1140 * _1144;
    vec4 _1152 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1154 = _1152.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1326 = sqrt(((_1138 * _1138) + (_1139 * _1139)) + (_1140 * _1140));
        float _1332 = (cbMatDynParam._m0[5u].x * _1326) + cbMatDynParam._m0[5u].y;
        float _4483 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1337 = (cbMatDynParam._m0[5u].z * _1326) + cbMatDynParam._m0[5u].w;
        float _4494 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) - _1333)) + _1333) < ((_1154 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1165 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1166 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1184 = fma(_1068, cbSceneParam._m0[5u].z, fma(_1067, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1066));
    float _1187 = fma(_1068, cbSceneParam._m0[6u].z, fma(_1067, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1066));
    float _1190 = fma(_1068, cbSceneParam._m0[7u].z, fma(_1067, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1066));
    uint _1203 = _294 + 9u;
    uint _1204 = _1203 + uint(cbMatDynParam._m0[0u].w);
    float _1210 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * cbInstanceData._m0[_1204].x;
    float _1211 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * cbInstanceData._m0[_1204].y;
    float _1212 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * cbInstanceData._m0[_1204].z;
    float _4505 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _4516 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _4527 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _1216 = 1.0 - _1074;
    float _1217 = _1213 * _1216;
    float _1218 = _1214 * _1216;
    float _1219 = _1215 * _1216;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1074;
    float _1225 = (_1214 + (-0.039999999105930328369140625)) * _1074;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1074;
    float _1227 = _1224 + 0.039999999105930328369140625;
    float _1229 = _1225 + 0.039999999105930328369140625;
    float _1230 = _1226 + 0.039999999105930328369140625;
    vec4 _1239 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1165, cbSceneParam._m0[86u].y * _1166));
    float _1243 = ((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * TEXCOORD_5.w) * _1239.x;
    float _1244 = dot(vec3(_1066, _1067, _1068), vec3(_1145, _1146, _1147));
    float _1247 = _1244 * 2.0;
    float _1251 = (_1247 * _1066) - _1145;
    float _1252 = (_1247 * _1067) - _1146;
    float _1253 = (_1247 * _1068) - _1147;
    float _1257 = abs(dot(vec3(_1145, _1146, _1147), vec3(_1066, _1067, _1068)));
    float _4538 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    float _1259 = sqrt(_1069);
    float _1272 = exp2((_1259 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1259 * 3.0));
    float _1278 = (1.0 - _1272) * ((_1259 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1279 = _1272 * _1259;
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1645;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1370 = fma(_1315, cbModelParam._m0[26u].z, fma(_1311, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307));
        float _1374 = fma(_1315, cbModelParam._m0[27u].z, fma(_1311, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307));
        float _1378 = fma(_1315, cbModelParam._m0[28u].z, fma(_1311, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307));
        float _1403 = _1307 + _1066;
        float _1404 = _1311 + _1067;
        float _1405 = _1315 + _1068;
        float _1415 = fma(_1405, cbModelParam._m0[26u].z, fma(_1404, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1403)) - _1370;
        float _1416 = fma(_1405, cbModelParam._m0[27u].z, fma(_1404, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1403)) - _1374;
        float _1417 = fma(_1405, cbModelParam._m0[28u].z, fma(_1404, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1403)) - _1378;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1370 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1374 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[34u].z) + ((((((_1378 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1473 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1439.x + (-0.5));
        float _1475 = _1473 * (_1439.y + (-0.5));
        float _1476 = _1473 * (_1439.z + (-0.5));
        float _1483 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1446.x + (-0.5));
        float _1485 = _1483 * (_1446.y + (-0.5));
        float _1486 = _1483 * (_1446.z + (-0.5));
        float _1493 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1453.x + (-0.5));
        float _1495 = _1493 * (_1453.y + (-0.5));
        float _1496 = _1493 * (_1453.z + (-0.5));
        float _1503 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1460.x + (-0.5));
        float _1505 = _1503 * (_1460.y + (-0.5));
        float _1506 = _1503 * (_1460.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1527 = (dot(vec3(_1066, _1067, _1068), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4564 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1537 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4575 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4586 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_1539 + 1.0))) + _1544) * _1507;
        float _1554 = _1475 * 0.5;
        float _1555 = _1485 * 0.5;
        float _1556 = _1495 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_1066, _1067, _1068), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4597 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4608 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4619 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_1581 + 1.0))) + _1586) * _1508;
        float _1596 = _1476 * 0.5;
        float _1597 = _1486 * 0.5;
        float _1598 = _1496 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_1066, _1067, _1068), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4630 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4641 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4652 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_1623 + 1.0))) + _1628) * _1509;
        _1645 = _1476;
        _1647 = _1475;
        _1648 = _1474;
        _1649 = _1486;
        _1650 = _1485;
        _1651 = _1484;
        _1652 = _1496;
        _1653 = _1495;
        _1654 = _1494;
        _1655 = _1509;
        _1656 = _1508;
        _1657 = _1507;
        _1658 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1659 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1660 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1646;
        _1647 = _1646;
        _1648 = _1646;
        _1649 = _1646;
        _1650 = _1646;
        _1651 = _1646;
        _1652 = _1646;
        _1653 = _1646;
        _1654 = _1646;
        _1655 = _1646;
        _1656 = _1646;
        _1657 = _1646;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1686 = fma(_1315, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307));
        float _1690 = fma(_1315, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307));
        float _1694 = fma(_1315, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307));
        float _1717 = _1307 + _1066;
        float _1718 = _1311 + _1067;
        float _1719 = _1315 + _1068;
        float _1729 = fma(_1719, cbModelParam._m0[30u].z, fma(_1718, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1717)) - _1686;
        float _1730 = fma(_1719, cbModelParam._m0[31u].z, fma(_1718, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1717)) - _1690;
        float _1731 = fma(_1719, cbModelParam._m0[32u].z, fma(_1718, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1717)) - _1694;
        float _1735 = inversesqrt(dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731)));
        float _1748 = ((_1735 * _1729) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1686 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1749 = ((_1735 * _1730) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1690 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1750 = ((_1735 * _1731) / cbModelParam._m0[35u].z) + ((((((_1694 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1752 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        vec4 _1759 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        vec4 _1766 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        vec4 _1773 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1748, _1749, _1750), 0.0);
        float _1785 = exp2((_1752.w + (-0.5)) * 20.0) * 2.0;
        float _1786 = _1785 * (_1752.x + (-0.5));
        float _1787 = _1785 * (_1752.y + (-0.5));
        float _1788 = _1785 * (_1752.z + (-0.5));
        float _1795 = exp2((_1759.w + (-0.5)) * 20.0) * 2.0;
        float _1796 = _1795 * (_1759.x + (-0.5));
        float _1797 = _1795 * (_1759.y + (-0.5));
        float _1798 = _1795 * (_1759.z + (-0.5));
        float _1805 = exp2((_1766.w + (-0.5)) * 20.0) * 2.0;
        float _1806 = _1805 * (_1766.x + (-0.5));
        float _1807 = _1805 * (_1766.y + (-0.5));
        float _1808 = _1805 * (_1766.z + (-0.5));
        float _1815 = exp2((_1773.w + (-0.5)) * 20.0) * 2.0;
        float _1816 = _1815 * (_1773.x + (-0.5));
        float _1817 = _1815 * (_1773.y + (-0.5));
        float _1818 = _1815 * (_1773.z + (-0.5));
        float _1819 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1820 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1821 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1822 = _1786 * 0.5;
        float _1823 = _1796 * 0.5;
        float _1824 = _1806 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_1066, _1067, _1068), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4693 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1819 + 9.9999997473787516355514526367188e-06);
        float _4704 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4715 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_1849 + 1.0))) + _1854) * _1819;
        float _1864 = _1787 * 0.5;
        float _1865 = _1797 * 0.5;
        float _1866 = _1807 * 0.5;
        float _1867 = dot(vec3(_1864, _1865, _1866), vec3(_1864, _1865, _1866));
        float _1872 = (_1867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1867);
        float _1880 = (dot(vec3(_1066, _1067, _1068), vec3(_1872 * _1864, _1872 * _1865, _1872 * _1866)) + 1.0) * 0.5;
        float _4726 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1889 = sqrt(((_1865 * _1865) + (_1864 * _1864)) + (_1866 * _1866)) / (_1820 + 9.9999997473787516355514526367188e-06);
        float _4737 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _1891 = _1890 * 2.0;
        float _1895 = (1.0 - _1890) / (_1890 + 1.0);
        float _4748 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _1905 = ((((1.0 - _1896) * (_1891 + 2.0)) * exp2(log2(isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_1891 + 1.0))) + _1896) * _1820;
        float _1906 = _1788 * 0.5;
        float _1907 = _1798 * 0.5;
        float _1908 = _1808 * 0.5;
        float _1909 = dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908));
        float _1914 = (_1909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1909);
        float _1922 = (dot(vec3(_1066, _1067, _1068), vec3(_1914 * _1906, _1914 * _1907, _1914 * _1908)) + 1.0) * 0.5;
        float _4759 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1931 = sqrt(((_1907 * _1907) + (_1906 * _1906)) + (_1908 * _1908)) / (_1821 + 9.9999997473787516355514526367188e-06);
        float _4770 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _1933 = _1932 * 2.0;
        float _1937 = (1.0 - _1932) / (_1932 + 1.0);
        float _4781 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _1947 = ((((1.0 - _1938) * (_1933 + 2.0)) * exp2(log2(isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_1933 + 1.0))) + _1938) * _1821;
        _1955 = _1788;
        _1956 = _1787;
        _1957 = _1786;
        _1958 = _1798;
        _1959 = _1797;
        _1960 = _1796;
        _1961 = _1808;
        _1962 = _1807;
        _1963 = _1806;
        _1964 = _1821;
        _1965 = _1820;
        _1966 = _1819;
        _1967 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
        _1968 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)));
        _1969 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)));
    }
    else
    {
        _1955 = _1646;
        _1956 = _1646;
        _1957 = _1646;
        _1958 = _1646;
        _1959 = _1646;
        _1960 = _1646;
        _1961 = _1646;
        _1962 = _1646;
        _1963 = _1646;
        _1964 = _1646;
        _1965 = _1646;
        _1966 = _1646;
        _1967 = 0.0;
        _1968 = 0.0;
        _1969 = 0.0;
    }
    float _1979 = (cbModelParam._m0[1u].x * (_1967 - _1658)) + _1658;
    float _1980 = (cbModelParam._m0[1u].x * (_1968 - _1659)) + _1659;
    float _1981 = (cbModelParam._m0[1u].x * (_1969 - _1660)) + _1660;
    float _2002 = fma(_1981, cbSceneParam._m0[89u].z, fma(_1980, cbSceneParam._m0[89u].y, _1979 * cbSceneParam._m0[89u].x));
    float _2005 = fma(_1981, cbSceneParam._m0[90u].z, fma(_1980, cbSceneParam._m0[90u].y, _1979 * cbSceneParam._m0[90u].x));
    float _2008 = fma(_1981, cbSceneParam._m0[91u].z, fma(_1980, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1979));
    float _2023 = _1251 * 0.5;
    float _2024 = _1252 * 0.5;
    float _2025 = _1253 * 0.5;
    float _2026 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1957, _1960, _1963, _1966));
    float _2029 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1956, _1959, _1962, _1965));
    float _2032 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1955, _1958, _1961, _1964));
    float _2066;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2039 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1645, _1649, _1652, _1655));
        float _2043 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1647, _1650, _1653, _1656));
        float _2047 = dot(vec4(_2023, _2024, _2025, 1.0), vec4(_1648, _1651, _1654, _1657));
        float _2054 = dot(vec4(cbModelParam._m0[39u]), vec4(_2023, _2024, _2025, 1.0));
        _2066 = dot(vec3(isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)), isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2054) ? 0.0 : (isnan(0.0) ? _2054 : max(0.0, _2054))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2066 = 1.0;
    }
    float _2077;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2068 = dot(vec4(cbModelParam._m0[40u]), vec4(_2023, _2024, _2025, 1.0));
        _2077 = dot(vec3(isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)), isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)), isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2068) ? 0.0 : (isnan(0.0) ? _2068 : max(0.0, _2068))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2077 = 1.0;
    }
    float _2081 = (_2077 * cbModelParam._m0[1u].x) + (_2066 * (1.0 - cbModelParam._m0[1u].x));
    float _2091 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1069);
    float _2092 = isnan(_2091) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2091 : min(cbModelParam._m0[25u].z, _2091));
    float _2172;
    float _2174;
    float _2176;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2139 = fma(_1315, cbModelParam._m0[13u].z, fma(_1311, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1307)) + cbModelParam._m0[13u].w;
        float _2143 = fma(_1315, cbModelParam._m0[14u].z, fma(_1311, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1307)) + cbModelParam._m0[14u].w;
        float _2147 = fma(_1315, cbModelParam._m0[15u].z, fma(_1311, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1307)) + cbModelParam._m0[15u].w;
        float _2150 = fma(_1253, cbModelParam._m0[13u].z, fma(_1252, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251));
        float _2153 = fma(_1253, cbModelParam._m0[14u].z, fma(_1252, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251));
        float _2156 = fma(_1253, cbModelParam._m0[15u].z, fma(_1252, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251));
        float _2184;
        if (_2150 > 0.0)
        {
            _2184 = abs((1.0 - _2139) / _2150);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2150 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2139 + 1.0) / _2150);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2184 = frontier_phi_17_15_ladder;
        }
        float _2355;
        if (_2153 > 0.0)
        {
            _2355 = abs((1.0 - _2143) / _2153);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2153 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2143 + 1.0) / _2153);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2355 = frontier_phi_26_22_ladder;
        }
        float _2650;
        if (_2156 > 0.0)
        {
            _2650 = abs((1.0 - _2147) / _2156);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2147 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2650 = frontier_phi_38_33_ladder;
        }
        float _2652 = isnan(_2355) ? _2184 : (isnan(_2184) ? _2355 : min(_2184, _2355));
        float _2653 = isnan(_2650) ? _2652 : (isnan(_2652) ? _2650 : min(_2652, _2650));
        float _2657 = (_2653 * _2150) + _2139;
        float _2658 = (_2653 * _2153) + _2143;
        float _2659 = (_2653 * _2156) + _2147;
        float _2660 = _2653 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2660;
        float _2664 = _2660 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 > _2664) || ((_2658 < _2662) || ((_2657 < _2662) || (_2657 > _2664))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2659, cbModelParam._m0[9u].z, fma(_2658, cbModelParam._m0[9u].y, _2657 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2659, cbModelParam._m0[10u].z, fma(_2658, cbModelParam._m0[10u].y, _2657 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2659, cbModelParam._m0[11u].z, fma(_2658, cbModelParam._m0[11u].y, _2657 * cbModelParam._m0[11u].x))), _2092);
            frontier_phi_16_38_ladder = _2804.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2804.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2804.x * cbModelParam._m0[1u].y;
        }
        _2172 = frontier_phi_16_38_ladder_2;
        _2174 = frontier_phi_16_38_ladder_1;
        _2176 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1251, _1252, _1253), _2092);
        _2172 = _2160.x * cbModelParam._m0[1u].y;
        _2174 = _2160.y * cbModelParam._m0[1u].y;
        _2176 = _2160.z * cbModelParam._m0[1u].y;
    }
    float _2180 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1069);
    float _2181 = isnan(_2180) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2180 : min(cbModelParam._m0[25u].w, _2180));
    float _2270;
    float _2272;
    float _2274;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2234 = fma(_1315, cbModelParam._m0[21u].z, fma(_1311, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1307)) + cbModelParam._m0[21u].w;
        float _2238 = fma(_1315, cbModelParam._m0[22u].z, fma(_1311, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1307)) + cbModelParam._m0[22u].w;
        float _2242 = fma(_1315, cbModelParam._m0[23u].z, fma(_1311, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1307)) + cbModelParam._m0[23u].w;
        float _2245 = fma(_1253, cbModelParam._m0[21u].z, fma(_1252, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251));
        float _2248 = fma(_1253, cbModelParam._m0[22u].z, fma(_1252, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251));
        float _2251 = fma(_1253, cbModelParam._m0[23u].z, fma(_1252, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251));
        float _2360;
        if (_2245 > 0.0)
        {
            _2360 = abs((1.0 - _2234) / _2245);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2245 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2234 + 1.0) / _2245);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2360 = frontier_phi_28_24_ladder;
        }
        float _2677;
        if (_2248 > 0.0)
        {
            _2677 = abs((1.0 - _2238) / _2248);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2248 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2238 + 1.0) / _2248);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2677 = frontier_phi_40_35_ladder;
        }
        float _3015;
        if (_2251 > 0.0)
        {
            _3015 = abs((1.0 - _2242) / _2251);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2242 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3015 = frontier_phi_50_47_ladder;
        }
        float _3017 = isnan(_2677) ? _2360 : (isnan(_2360) ? _2677 : min(_2360, _2677));
        float _3018 = isnan(_3015) ? _3017 : (isnan(_3017) ? _3015 : min(_3017, _3015));
        float _3022 = (_3018 * _2245) + _2234;
        float _3023 = (_3018 * _2248) + _2238;
        float _3024 = (_3018 * _2251) + _2242;
        float _3025 = _3018 * 9.9999997473787516355514526367188e-05;
        float _3026 = (-1.0) - _3025;
        float _3028 = _3025 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3024 > _3028) || ((_3024 < _3026) || ((_3023 > _3028) || ((_3023 < _3026) || ((_3022 < _3026) || (_3022 > _3028))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3146 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3024, cbModelParam._m0[17u].z, fma(_3023, cbModelParam._m0[17u].y, _3022 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3024, cbModelParam._m0[18u].z, fma(_3023, cbModelParam._m0[18u].y, _3022 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3024, cbModelParam._m0[19u].z, fma(_3023, cbModelParam._m0[19u].y, _3022 * cbModelParam._m0[19u].x))), _2181);
            frontier_phi_25_50_ladder = _3146.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3146.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3146.x * cbModelParam._m0[1u].z;
        }
        _2270 = frontier_phi_25_50_ladder_2;
        _2272 = frontier_phi_25_50_ladder_1;
        _2274 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2254 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1251, _1252, _1253), _2181);
        _2270 = _2254.x * cbModelParam._m0[1u].z;
        _2272 = _2254.y * cbModelParam._m0[1u].z;
        _2274 = _2254.z * cbModelParam._m0[1u].z;
    }
    float _2287 = (((_1278 * _1227) + _1279) * _1243) * ((cbModelParam._m0[1u].w * (_2270 - _2172)) + _2172);
    float _2289 = (((_1278 * _1229) + _1279) * _1243) * ((cbModelParam._m0[1u].w * (_2272 - _2174)) + _2174);
    float _2291 = (((_1278 * _1230) + _1279) * _1243) * ((cbModelParam._m0[1u].w * (_2274 - _2176)) + _2176);
    float _2294 = fma(_2291, cbSceneParam._m0[89u].z, fma(_2289, cbSceneParam._m0[89u].y, _2287 * cbSceneParam._m0[89u].x));
    float _2297 = fma(_2291, cbSceneParam._m0[90u].z, fma(_2289, cbSceneParam._m0[90u].y, _2287 * cbSceneParam._m0[90u].x));
    float _2300 = fma(_2291, cbSceneParam._m0[91u].z, fma(_2289, cbSceneParam._m0[91u].y, _2287 * cbSceneParam._m0[91u].x));
    float _2334 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2338 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2342 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2346 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2347 = _2334 / _2346;
    float _2348 = _2338 / _2346;
    float _2349 = _2342 / _2346;
    float _2496;
    float _2497;
    float _2498;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2376 = ((uint(_2349 > cbSceneParam._m0[59u].y) + uint(_2349 > cbSceneParam._m0[59u].x)) + uint(_2349 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2377 = _2376 + 43u;
        uint _2385 = _2376 + 44u;
        uint _2393 = _2376 + 45u;
        uint _2401 = _2376 + 46u;
        float _2412 = fma(_2346, cbSceneParam._m0[_2377].w, fma(_2342, cbSceneParam._m0[_2377].z, fma(_2338, cbSceneParam._m0[_2377].y, _2334 * cbSceneParam._m0[_2377].x)));
        float _2416 = fma(_2346, cbSceneParam._m0[_2385].w, fma(_2342, cbSceneParam._m0[_2385].z, fma(_2338, cbSceneParam._m0[_2385].y, _2334 * cbSceneParam._m0[_2385].x)));
        float _2424 = fma(_2346, cbSceneParam._m0[_2401].w, fma(_2342, cbSceneParam._m0[_2401].z, fma(_2338, cbSceneParam._m0[_2401].y, _2334 * cbSceneParam._m0[_2401].x)));
        float _2429 = cbSceneParam._m0[33u].z * _2424;
        float _2431 = cbSceneParam._m0[33u].w * _2424;
        float _2434 = fma(_2346, cbSceneParam._m0[_2393].w, fma(_2342, cbSceneParam._m0[_2393].z, fma(_2338, cbSceneParam._m0[_2393].y, _2334 * cbSceneParam._m0[_2393].x))) / _2424;
        float _2482 = (cbSceneParam._m0[33u].x - sqrt(((_2348 * _2348) + (_2347 * _2347)) + (_2349 * _2349))) * cbSceneParam._m0[33u].y;
        float _4907 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2489 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2429 + _2412) / _2424, (_2431 + _2416) / _2424), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2431 + _2412) / _2424, (_2416 - _2429) / _2424), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2412 - _2429) / _2424, (_2416 - _2431) / _2424), _2434), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2412 - _2431) / _2424, (_2429 + _2416) / _2424), _2434), 0.0)).x), vec4(0.25)));
        _2496 = 1.0 - (_2489 * cbSceneParam._m0[34u].x);
        _2497 = 1.0 - (_2489 * cbSceneParam._m0[34u].y);
        _2498 = 1.0 - (_2489 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2496 = 1.0;
        _2497 = 1.0;
        _2498 = 1.0;
    }
    float _2562;
    float _2564;
    float _2566;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2550 = fma(_2346, cbSceneParam._m0[63u].w, fma(_2342, cbSceneParam._m0[63u].z, fma(_2338, cbSceneParam._m0[63u].y, _2334 * cbSceneParam._m0[63u].x)));
        float _2551 = fma(_2346, cbSceneParam._m0[60u].w, fma(_2342, cbSceneParam._m0[60u].z, fma(_2338, cbSceneParam._m0[60u].y, _2334 * cbSceneParam._m0[60u].x))) / _2550;
        float _2552 = fma(_2346, cbSceneParam._m0[61u].w, fma(_2342, cbSceneParam._m0[61u].z, fma(_2338, cbSceneParam._m0[61u].y, _2334 * cbSceneParam._m0[61u].x))) / _2550;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2551 >= cbSceneParam._m0[64u].x) && (_2552 >= cbSceneParam._m0[64u].y)) && (_2551 <= cbSceneParam._m0[64u].z)) && (_2552 <= cbSceneParam._m0[64u].w))
        {
            float _2690 = fma(_2346, cbSceneParam._m0[62u].w, fma(_2342, cbSceneParam._m0[62u].z, fma(_2338, cbSceneParam._m0[62u].y, _2334 * cbSceneParam._m0[62u].x))) / _2550;
            float _2694 = isnan(cbSceneParam._m0[41u].w) ? _2690 : (isnan(_2690) ? cbSceneParam._m0[41u].w : max(_2690, cbSceneParam._m0[41u].w));
            float _2737 = (cbSceneParam._m0[33u].x - sqrt(((_2348 * _2348) + (_2347 * _2347)) + (_2349 * _2349))) * cbSceneParam._m0[33u].y;
            float _4923 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
            float _2744 = (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2551, cbSceneParam._m0[33u].w + _2552), _2694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2551, _2552 - cbSceneParam._m0[33u].z), _2694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2551 - cbSceneParam._m0[33u].z, _2552 - cbSceneParam._m0[33u].w), _2694), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2551 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2552), _2694), 0.0)).x), vec4(0.25)));
            float _2748 = 1.0 - (_2744 * cbSceneParam._m0[34u].x);
            float _2749 = 1.0 - (_2744 * cbSceneParam._m0[34u].y);
            float _2750 = 1.0 - (_2744 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2750) ? _2498 : (isnan(_2498) ? _2750 : min(_2498, _2750));
            frontier_phi_37_36_ladder_1 = isnan(_2749) ? _2497 : (isnan(_2497) ? _2749 : min(_2497, _2749));
            frontier_phi_37_36_ladder_2 = isnan(_2748) ? _2496 : (isnan(_2496) ? _2748 : min(_2496, _2748));
        }
        else
        {
            frontier_phi_37_36_ladder = _2498;
            frontier_phi_37_36_ladder_1 = _2497;
            frontier_phi_37_36_ladder_2 = _2496;
        }
        _2562 = frontier_phi_37_36_ladder_2;
        _2564 = frontier_phi_37_36_ladder_1;
        _2566 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2562 = _2496;
        _2564 = _2497;
        _2566 = _2498;
    }
    uvec4 _2571 = floatBitsToUint(cbInstanceData._m0[_294 + 5u]);
    uint _2573 = _2571.x * 14u;
    uint _2574 = _2573 + 13u;
    float _2581 = _1243 + (-1.0);
    float _2586 = (cbLight._m0[_2574].x * _2581) + 1.0;
    float _2587 = (cbLight._m0[_2574].y * _2581) + 1.0;
    float _2588 = (cbLight._m0[_2574].z * _2581) + 1.0;
    float _2589 = (cbLight._m0[_2574].w * _2581) + 1.0;
    uint _2590 = _2573 + 5u;
    float _2596 = isnan(1.0) ? _2587 : (isnan(_2587) ? 1.0 : min(_2587, 1.0));
    uint _2600 = _2573 + 4u;
    float _2609 = isnan(1.0) ? _2586 : (isnan(_2586) ? 1.0 : min(_2586, 1.0));
    uint _2613 = _2573 | 1u;
    float _2624 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_1066, _1067, _1068));
    float _2627 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_1066, _1067, _1068));
    float _4959 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _4970 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2632 = (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0))) * 0.3183098733425140380859375;
    float _2634 = (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * 0.3183098733425140380859375;
    float _2641 = ((cbLight._m0[_2590].x * _2596) * _2634) + (((cbLight._m0[_2600].x * _2562) * _2609) * _2632);
    float _2642 = ((_2596 * cbLight._m0[_2590].y) * _2634) + (((cbLight._m0[_2600].y * _2564) * _2609) * _2632);
    float _2643 = ((_2596 * cbLight._m0[_2590].z) * _2634) + (((cbLight._m0[_2600].z * _2566) * _2609) * _2632);
    uvec4 _2647 = floatBitsToUint(cbLight._m0[_2573 + 12u]);
    bool _2649 = _2647.x == 0u;
    float _2751;
    float _2753;
    float _2755;
    if (_2649)
    {
        _2751 = _2641;
        _2753 = _2642;
        _2755 = _2643;
    }
    else
    {
        uint _2759 = _2573 + 6u;
        float _2775 = (dot(vec3(cbLight._m0[_2573 + 2u].xyz), vec3(_1066, _1067, _1068)) * 0.5) + 0.5;
        float _2776 = _2775 * _2775;
        float _4981 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2777 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _2778 = isnan(1.0) ? _2588 : (isnan(_2588) ? 1.0 : min(_2588, 1.0));
        _2751 = (((cbLight._m0[_2759].x * 0.3183098733425140380859375) * _2777) * _2778) + _2641;
        _2753 = (((cbLight._m0[_2759].y * 0.3183098733425140380859375) * _2777) * _2778) + _2642;
        _2755 = (((cbLight._m0[_2759].z * 0.3183098733425140380859375) * _2777) * _2778) + _2643;
    }
    bool _2758 = _2647.y == 0u;
    float _2813;
    float _2815;
    float _2817;
    if (_2758)
    {
        _2813 = _2751;
        _2815 = _2753;
        _2817 = _2755;
    }
    else
    {
        uint _2986 = _2573 + 7u;
        float _3002 = (dot(vec3(cbLight._m0[_2573 + 3u].xyz), vec3(_1066, _1067, _1068)) * 0.5) + 0.5;
        float _3003 = _3002 * _3002;
        float _4997 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3004 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _3005 = isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0));
        _2813 = (((cbLight._m0[_2986].x * 0.3183098733425140380859375) * _3004) * _3005) + _2751;
        _2815 = (((cbLight._m0[_2986].y * 0.3183098733425140380859375) * _3004) * _3005) + _2753;
        _2817 = (((cbLight._m0[_2986].z * 0.3183098733425140380859375) * _3004) * _3005) + _2755;
    }
    uint _2820 = _2573 + 8u;
    float _2833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _1069) * 0.949999988079071044921875);
    float _2834 = _2833 * _2833;
    float _2835 = cbLight._m0[_2573].x + _1145;
    float _2836 = cbLight._m0[_2573].y + _1146;
    float _2837 = cbLight._m0[_2573].z + _1147;
    float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
    float _2842 = _2841 * _2835;
    float _2843 = _2841 * _2836;
    float _2844 = _2841 * _2837;
    float _2845 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2573].xyz));
    float _5013 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
    float _2848 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
    float _5024 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _2849 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
    float _2850 = dot(vec3(_1066, _1067, _1068), vec3(_2842, _2843, _2844));
    float _5035 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
    float _2853 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
    float _2854 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2842, _2843, _2844));
    float _5046 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2858 = _2834 * _2834;
    float _2862 = ((_2853 * _2853) * (_2858 + (-1.0))) + 1.0;
    float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0)))) * 5.0);
    float _2871 = 0.959999978542327880859375 - _1224;
    float _2873 = 0.959999978542327880859375 - _1225;
    float _2874 = 0.959999978542327880859375 - _1226;
    float _2881 = 1.0 - _2834;
    float _2892 = (0.5 / (((_2849 * ((_2848 * _2881) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _2881) + _2834) * _2848))) * _2848;
    float _5057 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
    float _2894 = (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_2858 / ((_2862 * _2862) * 3.141590118408203125));
    uint _2908 = _2573 + 9u;
    float _2919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _1069) * 0.949999988079071044921875);
    float _2920 = _2919 * _2919;
    float _2921 = cbLight._m0[_2613].x + _1145;
    float _2922 = cbLight._m0[_2613].y + _1146;
    float _2923 = cbLight._m0[_2613].z + _1147;
    float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
    float _2928 = _2927 * _2921;
    float _2929 = _2927 * _2922;
    float _2930 = _2927 * _2923;
    float _2931 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2613].xyz));
    float _5068 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
    float _2934 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
    float _2935 = dot(vec3(_1066, _1067, _1068), vec3(_2928, _2929, _2930));
    float _5079 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
    float _2938 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
    float _2939 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2928, _2929, _2930));
    float _5090 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
    float _2943 = _2920 * _2920;
    float _2947 = ((_2938 * _2938) * (_2943 + (-1.0))) + 1.0;
    float _2954 = exp2(log2(1.0 - (isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0)))) * 5.0);
    float _2961 = 1.0 - _2920;
    float _2971 = (0.5 / (((_2849 * ((_2934 * _2961) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _2961) + _2920) * _2934))) * _2934;
    float _5101 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
    float _2973 = (isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_2943 / ((_2947 * _2947) * 3.141590118408203125));
    float _2983 = (((((_2954 * _2871) + _1227) * cbLight._m0[_2908].x) * _2973) * _2596) + ((((cbLight._m0[_2820].x * _2562) * ((_2870 * _2871) + _1227)) * _2894) * _2609);
    float _2984 = (((((_2954 * _2873) + _1229) * cbLight._m0[_2908].y) * _2973) * _2596) + ((((cbLight._m0[_2820].y * _2564) * ((_2870 * _2873) + _1229)) * _2894) * _2609);
    float _2985 = (((((_2954 * _2874) + _1230) * cbLight._m0[_2908].z) * _2973) * _2596) + ((((cbLight._m0[_2820].z * _2566) * ((_2870 * _2874) + _1230)) * _2894) * _2609);
    float _3041;
    float _3043;
    float _3045;
    if (_2649)
    {
        _3041 = _2983;
        _3043 = _2984;
        _3045 = _2985;
    }
    else
    {
        uint _3047 = _2573 + 2u;
        uint _3051 = _2573 + 10u;
        float _3065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3047].w)) * _1069) * 0.949999988079071044921875);
        float _3066 = _3065 * _3065;
        float _3067 = cbLight._m0[_3047].x + _1145;
        float _3068 = cbLight._m0[_3047].y + _1146;
        float _3069 = cbLight._m0[_3047].z + _1147;
        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
        float _3074 = _3073 * _3067;
        float _3075 = _3073 * _3068;
        float _3076 = _3073 * _3069;
        float _3077 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_3047].xyz));
        float _5112 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
        float _3080 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
        float _3081 = dot(vec3(_1066, _1067, _1068), vec3(_3074, _3075, _3076));
        float _5123 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
        float _3084 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
        float _3085 = dot(vec3(cbLight._m0[_3047].xyz), vec3(_3074, _3075, _3076));
        float _5134 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        float _3089 = _3066 * _3066;
        float _3093 = ((_3084 * _3084) * (_3089 + (-1.0))) + 1.0;
        float _3100 = exp2(log2(1.0 - (isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0)))) * 5.0);
        float _3107 = 1.0 - _3066;
        float _3117 = (0.5 / (((_2849 * ((_3080 * _3107) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _3107) + _3066) * _3080))) * _3080;
        float _5145 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
        float _3119 = (isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0))) * (_3089 / ((_3093 * _3093) * 3.141590118408203125));
        float _3120 = isnan(1.0) ? _2588 : (isnan(_2588) ? 1.0 : min(_2588, 1.0));
        _3041 = (((((_3100 * _2871) + _1227) * cbLight._m0[_3051].x) * _3119) * _3120) + _2983;
        _3043 = (((((_3100 * _2873) + _1229) * cbLight._m0[_3051].y) * _3119) * _3120) + _2984;
        _3045 = (((((_3100 * _2874) + _1230) * cbLight._m0[_3051].z) * _3119) * _3120) + _2985;
    }
    float _3151;
    float _3153;
    float _3155;
    if (_2758)
    {
        _3151 = _3041;
        _3153 = _3043;
        _3155 = _3045;
    }
    else
    {
        uint _3162 = _2573 + 3u;
        uint _3166 = _2573 + 11u;
        float _3180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3162].w)) * _1069) * 0.949999988079071044921875);
        float _3181 = _3180 * _3180;
        float _3182 = cbLight._m0[_3162].x + _1145;
        float _3183 = cbLight._m0[_3162].y + _1146;
        float _3184 = cbLight._m0[_3162].z + _1147;
        float _3188 = inversesqrt(dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184)));
        float _3189 = _3188 * _3182;
        float _3190 = _3188 * _3183;
        float _3191 = _3188 * _3184;
        float _3192 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_3162].xyz));
        float _5161 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
        float _3195 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
        float _3196 = dot(vec3(_1066, _1067, _1068), vec3(_3189, _3190, _3191));
        float _5172 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
        float _3199 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
        float _3200 = dot(vec3(cbLight._m0[_3162].xyz), vec3(_3189, _3190, _3191));
        float _5183 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
        float _3204 = _3181 * _3181;
        float _3208 = ((_3199 * _3199) * (_3204 + (-1.0))) + 1.0;
        float _3215 = exp2(log2(1.0 - (isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0)))) * 5.0);
        float _3222 = 1.0 - _3181;
        float _3232 = (0.5 / (((_2849 * ((_3195 * _3222) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _3222) + _3181) * _3195))) * _3195;
        float _5194 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
        float _3234 = (isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0))) * (_3204 / ((_3208 * _3208) * 3.141590118408203125));
        float _3235 = isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0));
        _3151 = (((((_3215 * _2871) + _1227) * cbLight._m0[_3166].x) * _3234) * _3235) + _3041;
        _3153 = (((((_3215 * _2873) + _1229) * cbLight._m0[_3166].y) * _3234) * _3235) + _3043;
        _3155 = (((((_3215 * _2874) + _1230) * cbLight._m0[_3166].z) * _3234) * _3235) + _3045;
    }
    float _3301;
    float _3303;
    float _3305;
    float _3307;
    float _3309;
    float _3311;
    if (_2571.y == 0u)
    {
        uvec4 _3256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3257 = _3256.x;
        uint _3268 = uint((float(_3256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1166) / _3257))) + floor(float(uint(cbSceneParam._m0[85u].x * _1165) / _3257)));
        float _3278 = (log2(_2349 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3279 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
        uint _3282 = uint(isnan(14.0) ? _3279 : (isnan(_3279) ? 14.0 : min(_3279, 14.0)));
        uvec4 _3287 = texelFetch(g_lightClusterGridBuffer, int(((_3282 << 2u) + (_3268 << 6u)) >> 2u));
        uint _3288 = _3287.x;
        uint _3289 = _3256.z;
        float _3368;
        float _3370;
        float _3372;
        float _3374;
        float _3376;
        float _3378;
        if (((((1u << ((_3289 >> 4u) & 15u)) + 4294967295u) & _3288) == 0u) || ((_3289 & 240u) == 0u))
        {
            _3368 = 0.0;
            _3370 = 0.0;
            _3372 = 0.0;
            _3374 = 0.0;
            _3376 = 0.0;
            _3378 = 0.0;
        }
        else
        {
            float _3369;
            float _3371;
            float _3373;
            float _3375;
            float _3377;
            float _3379;
            float _3521 = 0.0;
            float _3522 = 0.0;
            float _3523 = 0.0;
            float _3524 = 0.0;
            float _3525 = 0.0;
            float _3526 = 0.0;
            uint _3527 = 0u;
            uint _3536;
            bool _3537;
            for (;;)
            {
                _3536 = texelFetch(g_lightClassification, int((((_3282 << 5u) + (_3268 << 9u)) + (_3527 << 2u)) >> 2u)).x;
                _3537 = _3536 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3537)
                {
                    frontier_phi_71_pred = _3526;
                    frontier_phi_71_pred_1 = _3525;
                    frontier_phi_71_pred_2 = _3524;
                    frontier_phi_71_pred_3 = _3523;
                    frontier_phi_71_pred_4 = _3522;
                    frontier_phi_71_pred_5 = _3521;
                }
                else
                {
                    float _3666;
                    float _3667;
                    float _3668;
                    float _3669;
                    float _3670;
                    float _3671;
                    uint _3672;
                    _3666 = _3521;
                    _3667 = _3522;
                    _3668 = _3523;
                    _3669 = _3524;
                    _3670 = _3525;
                    _3671 = _3526;
                    _3672 = _3536;
                    float _3593;
                    float _3594;
                    float _3595;
                    float _3596;
                    float _3597;
                    float _3598;
                    for (;;)
                    {
                        uint _3676 = uint(findLSB(_3672)) + (_3527 << 5u);
                        uint _3673 = (_3672 + 4294967295u) & _3672;
                        uint _3678 = _3676 * 48u;
                        vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3678)).x, texelFetch(g_PointLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3678 + 3u)).x));
                        uint _3698 = (_3676 * 48u) + 4u;
                        vec4 _3711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3698)).x, texelFetch(g_PointLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3698 + 3u)).x));
                        uint _3717 = (_3676 * 48u) + 8u;
                        vec3 _3728 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3717)).x, texelFetch(g_PointLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3717 + 2u)).x));
                        float _3732 = _3692.x - _2347;
                        float _3733 = _3692.y - _2348;
                        float _3734 = _3692.z - _2349;
                        float _3735 = dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734));
                        float _3738 = inversesqrt(_3735);
                        float _3739 = _3738 * _3732;
                        float _3740 = _3738 * _3733;
                        float _3741 = _3738 * _3734;
                        float _3742 = dot(vec3(_1184, _1187, _1190), vec3(_3739, _3740, _3741));
                        float _3747 = 1.0 - (_3735 * _3692.w);
                        float _5220 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                        float _3748 = isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0));
                        float _3749 = sqrt(_3735) * _3711.w;
                        float _3752 = 1.39999997615814208984375 / (_3749 + 1.39999997615814208984375);
                        float _3753 = _3752 * _3752;
                        float _3756 = ((1.0 - _3753) * _3742) + _3753;
                        float _3759 = _3749 * _3749;
                        float _3763 = ((isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0))) * _3748) / ((_3759 * 0.699999988079071044921875) + 1.0);
                        float _3767 = (-0.0) - _2347;
                        float _3768 = (-0.0) - _2348;
                        float _3769 = (-0.0) - _2349;
                        float _3773 = inversesqrt(dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769)));
                        float _3774 = _3773 * _3767;
                        float _3775 = _3773 * _3768;
                        float _3776 = _3773 * _3769;
                        float _3783 = exp2(log2(1.0 / ((_3759 * 3.5) + 5.0)) * 0.25);
                        float _3784 = 1.0 - _1259;
                        float _3791 = sqrt(1.0 - ((1.0 - (_3784 * _3784)) * (1.0 - (_3783 * _3783))));
                        float _3792 = _3791 * _3791;
                        float _3793 = _3792 * _3792;
                        float _3794 = _3774 + _3739;
                        float _3795 = _3775 + _3740;
                        float _3796 = _3776 + _3741;
                        float _3800 = inversesqrt(dot(vec3(_3794, _3795, _3796), vec3(_3794, _3795, _3796)));
                        float _3804 = dot(vec3(_1184, _1187, _1190), vec3(_3774, _3775, _3776));
                        float _5236 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                        float _3807 = isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0));
                        float _3808 = dot(vec3(_1184, _1187, _1190), vec3(_3800 * _3794, _3800 * _3795, _3800 * _3796));
                        float _5247 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                        float _3811 = isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0));
                        float _3815 = ((_3811 * _3811) * (_3793 + (-1.0))) + 1.0;
                        float _3816 = _3752 * _3792;
                        float _3817 = _3816 * _3816;
                        float _3820 = ((1.0 - _3817) * _3742) + _3817;
                        float _5258 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                        float _3821 = isnan(1.0) ? _5258 : (isnan(_5258) ? 1.0 : min(_5258, 1.0));
                        float _3822 = 1.0 - _3792;
                        float _3832 = (0.5 / (((_3821 * ((_3807 * _3822) + _3792)) + 9.9999999392252902907785028219223e-09) + (((_3821 * _3822) + _3792) * _3807))) * _3821;
                        float _5269 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                        float _3843 = (((_3793 * 3.1415927410125732421875) * (isnan(1.0) ? _5269 : (isnan(_5269) ? 1.0 : min(_5269, 1.0)))) / ((_3815 * _3815) * ((_3759 * 2.1991131305694580078125) + 3.141590118408203125))) * _3748;
                        _3596 = (_3763 * _3711.x) + _3669;
                        _3597 = (_3763 * _3711.y) + _3670;
                        _3598 = (_3763 * _3711.z) + _3671;
                        _3593 = (_3843 * _3728.x) + _3666;
                        _3594 = (_3843 * _3728.y) + _3667;
                        _3595 = (_3843 * _3728.z) + _3668;
                        if (_3673 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3666 = _3593;
                            _3667 = _3594;
                            _3668 = _3595;
                            _3669 = _3596;
                            _3670 = _3597;
                            _3671 = _3598;
                            _3672 = _3673;
                        }
                    }
                    frontier_phi_71_pred = _3598;
                    frontier_phi_71_pred_1 = _3597;
                    frontier_phi_71_pred_2 = _3596;
                    frontier_phi_71_pred_3 = _3595;
                    frontier_phi_71_pred_4 = _3594;
                    frontier_phi_71_pred_5 = _3593;
                }
                _3379 = frontier_phi_71_pred;
                _3377 = frontier_phi_71_pred_1;
                _3375 = frontier_phi_71_pred_2;
                _3373 = frontier_phi_71_pred_3;
                _3371 = frontier_phi_71_pred_4;
                _3369 = frontier_phi_71_pred_5;
                uint _3528 = _3527 + 1u;
                if (_3528 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3521 = _3369;
                    _3522 = _3371;
                    _3523 = _3373;
                    _3524 = _3375;
                    _3525 = _3377;
                    _3526 = _3379;
                    _3527 = _3528;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3368 = _3369;
            _3370 = _3371;
            _3372 = _3373;
            _3374 = _3375;
            _3376 = _3377;
            _3378 = _3379;
        }
        uvec4 _3382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3383 = _3382.z;
        uint _3385 = (_3383 >> 8u) & 15u;
        float _3489;
        float _3491;
        float _3493;
        float _3495;
        float _3497;
        float _3499;
        if (((4294967295u << _3385) & _3288) == 0u)
        {
            _3489 = _3368;
            _3491 = _3370;
            _3493 = _3372;
            _3495 = _3374;
            _3497 = _3376;
            _3499 = _3378;
        }
        else
        {
            float _3514 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
            float _3515 = _3514 * _2347;
            float _3516 = _3514 * _2348;
            float _3517 = _3514 * _2349;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3385 < ((_3383 >> 12u) & 15u))
            {
                float _3490;
                float _3492;
                float _3494;
                float _3496;
                float _3498;
                float _3500;
                float _3649 = _3368;
                float _3650 = _3370;
                float _3651 = _3372;
                float _3652 = _3374;
                float _3653 = _3376;
                float _3654 = _3378;
                uint _3655 = _3385;
                uint _3664;
                bool _3665;
                for (;;)
                {
                    _3664 = texelFetch(g_lightClassification, int((((_3282 << 5u) + (_3268 << 9u)) + (_3655 << 2u)) >> 2u)).x;
                    _3665 = _3664 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3665)
                    {
                        frontier_phi_82_pred = _3654;
                        frontier_phi_82_pred_1 = _3653;
                        frontier_phi_82_pred_2 = _3652;
                        frontier_phi_82_pred_3 = _3651;
                        frontier_phi_82_pred_4 = _3650;
                        frontier_phi_82_pred_5 = _3649;
                    }
                    else
                    {
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _4150;
                        float _4151;
                        float _4152;
                        float _4153;
                        float _4154;
                        float _4155;
                        float _3870 = _3649;
                        float _3871 = _3650;
                        float _3872 = _3651;
                        float _3873 = _3652;
                        float _3874 = _3653;
                        float _3875 = _3654;
                        uint _3876 = _3664;
                        uint _3877;
                        vec4 _3902;
                        float _3903;
                        vec4 _3918;
                        vec3 _3930;
                        vec4 _3945;
                        vec4 _3960;
                        float _4006;
                        bool _4007;
                        for (;;)
                        {
                            uint _3887 = ((_3655 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3876));
                            _3877 = (_3876 + 4294967295u) & _3876;
                            uint _3889 = _3887 * 40u;
                            _3902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 3u)).x));
                            _3903 = _3902.w;
                            uint _3905 = (_3887 * 40u) + 4u;
                            _3918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 3u)).x));
                            uint _3920 = (_3887 * 40u) + 8u;
                            _3930 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3920 + 2u)).x));
                            uint _3932 = (_3887 * 40u) + 16u;
                            _3945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 3u)).x));
                            uint _3947 = (_3887 * 40u) + 20u;
                            _3960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3947 + 3u)).x));
                            uint _3962 = (_3887 * 40u) + 24u;
                            vec4 _3975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3962 + 3u)).x));
                            uint _3981 = (_3887 * 40u) + 28u;
                            vec4 _3994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 3u)).x));
                            _4006 = fma(_2349, _3994.z, fma(_2348, _3994.y, _3994.x * _2347)) + _3994.w;
                            _4007 = !((fma(_2349, _3975.z, fma(_2348, _3975.y, _3975.x * _2347)) + _3975.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4007)
                            {
                                float _4034 = _3902.x - _2347;
                                float _4035 = _3902.y - _2348;
                                float _4036 = _3902.z - _2349;
                                float _4037 = dot(vec3(_4034, _4035, _4036), vec3(_4034, _4035, _4036));
                                float _4040 = inversesqrt(_4037);
                                float _4041 = _4040 * _4034;
                                float _4042 = _4040 * _4035;
                                float _4043 = _4040 * _4036;
                                float _4047 = 1.0 - (_4037 / (_3903 * _3903));
                                float _5280 = isnan(0.0) ? _4047 : (isnan(_4047) ? 0.0 : max(_4047, 0.0));
                                float _4048 = isnan(1.0) ? _5280 : (isnan(_5280) ? 1.0 : min(_5280, 1.0));
                                float _4052 = sqrt(_4037) * _3918.w;
                                float _4054 = 1.39999997615814208984375 / (_4052 + 1.39999997615814208984375);
                                float _4055 = _4054 * _4054;
                                float _4058 = ((1.0 - _4055) * dot(vec3(_4041, _4042, _4043), vec3(_1184, _1187, _1190))) + _4055;
                                float _4061 = _4052 * _4052;
                                float _4065 = (fma(_2349, _3945.z, fma(_2348, _3945.y, _3945.x * _2347)) + _3945.w) / _4006;
                                float _4066 = (fma(_2349, _3960.z, fma(_2348, _3960.y, _3960.x * _2347)) + _3960.w) / _4006;
                                float _4070 = 1.0 - dot(vec2(_4065, _4066), vec2(_4065, _4066));
                                float _5296 = isnan(0.0) ? _4070 : (isnan(_4070) ? 0.0 : max(_4070, 0.0));
                                float _4071 = isnan(1.0) ? _5296 : (isnan(_5296) ? 1.0 : min(_5296, 1.0));
                                float _4072 = _4071 * (((isnan(0.0) ? _4058 : (isnan(_4058) ? 0.0 : max(_4058, 0.0))) * _4048) / ((_4061 * 0.699999988079071044921875) + 1.0));
                                float _4084 = exp2(log2(1.0 / ((_4061 * 3.5) + 5.0)) * 0.25);
                                float _4085 = 1.0 - _1259;
                                float _4092 = sqrt(1.0 - ((1.0 - (_4085 * _4085)) * (1.0 - (_4084 * _4084))));
                                float _4093 = _4092 * _4092;
                                float _4094 = _4093 * _4093;
                                float _4095 = _4041 - _3515;
                                float _4096 = _4042 - _3516;
                                float _4097 = _4043 - _3517;
                                float _4101 = inversesqrt(dot(vec3(_4095, _4096, _4097), vec3(_4095, _4096, _4097)));
                                float _4105 = dot(vec3(_1184, _1187, _1190), vec3((-0.0) - _3515, (-0.0) - _3516, (-0.0) - _3517));
                                float _5307 = isnan(0.0) ? _4105 : (isnan(_4105) ? 0.0 : max(_4105, 0.0));
                                float _4108 = isnan(1.0) ? _5307 : (isnan(_5307) ? 1.0 : min(_5307, 1.0));
                                float _4109 = dot(vec3(_1184, _1187, _1190), vec3(_4101 * _4095, _4101 * _4096, _4101 * _4097));
                                float _5318 = isnan(0.0) ? _4109 : (isnan(_4109) ? 0.0 : max(_4109, 0.0));
                                float _4112 = isnan(1.0) ? _5318 : (isnan(_5318) ? 1.0 : min(_5318, 1.0));
                                float _4116 = ((_4112 * _4112) * (_4094 + (-1.0))) + 1.0;
                                float _4117 = _4054 * _4093;
                                float _4118 = _4117 * _4117;
                                float _4124 = ((1.0 - _4118) * dot(vec3(_1184, _1187, _1190), vec3(_4041, _4042, _4043))) + _4118;
                                float _5329 = isnan(0.0) ? _4124 : (isnan(_4124) ? 0.0 : max(_4124, 0.0));
                                float _4125 = isnan(1.0) ? _5329 : (isnan(_5329) ? 1.0 : min(_5329, 1.0));
                                float _4126 = 1.0 - _4093;
                                float _4136 = (0.5 / (((_4125 * ((_4108 * _4126) + _4093)) + 9.9999999392252902907785028219223e-09) + (((_4125 * _4126) + _4093) * _4108))) * _4125;
                                float _5340 = isnan(0.0) ? _4136 : (isnan(_4136) ? 0.0 : max(_4136, 0.0));
                                float _4146 = (_4071 * _4048) * (((_4094 * 3.1415927410125732421875) * (isnan(1.0) ? _5340 : (isnan(_5340) ? 1.0 : min(_5340, 1.0)))) / ((_4116 * _4116) * ((_4061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4072 * _3918.z;
                                frontier_phi_88_pred_1 = _4072 * _3918.y;
                                frontier_phi_88_pred_2 = _4072 * _3918.x;
                                frontier_phi_88_pred_3 = _4146 * _3930.z;
                                frontier_phi_88_pred_4 = _4146 * _3930.y;
                                frontier_phi_88_pred_5 = _4146 * _3930.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4155 = frontier_phi_88_pred;
                            _4154 = frontier_phi_88_pred_1;
                            _4153 = frontier_phi_88_pred_2;
                            _4152 = frontier_phi_88_pred_3;
                            _4151 = frontier_phi_88_pred_4;
                            _4150 = frontier_phi_88_pred_5;
                            _3860 = _4153 + _3873;
                            _3861 = _4154 + _3874;
                            _3862 = _4155 + _3875;
                            _3857 = _4150 + _3870;
                            _3858 = _4151 + _3871;
                            _3859 = _4152 + _3872;
                            if (_3877 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3870 = _3857;
                                _3871 = _3858;
                                _3872 = _3859;
                                _3873 = _3860;
                                _3874 = _3861;
                                _3875 = _3862;
                                _3876 = _3877;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3862;
                        frontier_phi_82_pred_1 = _3861;
                        frontier_phi_82_pred_2 = _3860;
                        frontier_phi_82_pred_3 = _3859;
                        frontier_phi_82_pred_4 = _3858;
                        frontier_phi_82_pred_5 = _3857;
                    }
                    _3500 = frontier_phi_82_pred;
                    _3498 = frontier_phi_82_pred_1;
                    _3496 = frontier_phi_82_pred_2;
                    _3494 = frontier_phi_82_pred_3;
                    _3492 = frontier_phi_82_pred_4;
                    _3490 = frontier_phi_82_pred_5;
                    uint _3656 = _3655 + 1u;
                    if (_3656 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3649 = _3490;
                        _3650 = _3492;
                        _3651 = _3494;
                        _3652 = _3496;
                        _3653 = _3498;
                        _3654 = _3500;
                        _3655 = _3656;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3496;
                frontier_phi_63_64_ladder_1 = _3500;
                frontier_phi_63_64_ladder_2 = _3498;
                frontier_phi_63_64_ladder_3 = _3494;
                frontier_phi_63_64_ladder_4 = _3492;
                frontier_phi_63_64_ladder_5 = _3490;
            }
            else
            {
                frontier_phi_63_64_ladder = _3374;
                frontier_phi_63_64_ladder_1 = _3378;
                frontier_phi_63_64_ladder_2 = _3376;
                frontier_phi_63_64_ladder_3 = _3372;
                frontier_phi_63_64_ladder_4 = _3370;
                frontier_phi_63_64_ladder_5 = _3368;
            }
            _3489 = frontier_phi_63_64_ladder_5;
            _3491 = frontier_phi_63_64_ladder_4;
            _3493 = frontier_phi_63_64_ladder_3;
            _3495 = frontier_phi_63_64_ladder;
            _3497 = frontier_phi_63_64_ladder_2;
            _3499 = frontier_phi_63_64_ladder_1;
        }
        float _3504 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
        _3301 = (_3504 * _3495) + _2813;
        _3303 = (_3504 * _3497) + _2815;
        _3305 = (_3504 * _3499) + _2817;
        _3307 = ((_3489 * _1227) * _3504) + _3151;
        _3309 = ((_3491 * _1229) * _3504) + _3153;
        _3311 = ((_3493 * _1230) * _3504) + _3155;
    }
    else
    {
        _3301 = _2813;
        _3303 = _2815;
        _3305 = _2817;
        _3307 = _3151;
        _3309 = _3153;
        _3311 = _3155;
    }
    float _5356 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _5367 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _5378 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _3328 = ((isnan(1.0) ? _5356 : (isnan(_5356) ? 1.0 : min(_5356, 1.0))) * (_3301 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1243))) + ((_3307 + ((isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0))) * _2081)) * cbPerFrame._m0[3u].x);
    float _3329 = ((isnan(1.0) ? _5367 : (isnan(_5367) ? 1.0 : min(_5367, 1.0))) * (_3303 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1243))) + ((_3309 + ((isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0))) * _2081)) * cbPerFrame._m0[3u].x);
    float _3330 = ((isnan(1.0) ? _5378 : (isnan(_5378) ? 1.0 : min(_5378, 1.0))) * (_3305 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1243))) + ((_3311 + ((isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0))) * _2081)) * cbPerFrame._m0[3u].x);
    uint _3331 = _294 + 6u;
    float _3339 = _1165 / cbSceneParam._m0[86u].x;
    float _3340 = _1166 / cbSceneParam._m0[86u].y;
    vec4 _3354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3339, _3340, (log2((isnan(cbSceneParam._m0[77u].w) ? _1088 : (isnan(_1088) ? cbSceneParam._m0[77u].w : min(_1088, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3356 = _3354.x;
    float _3357 = _3354.y;
    float _3358 = _3354.z;
    float _3359 = _3354.w;
    float _3431;
    float _3433;
    float _3435;
    float _3437;
    if (_1088 > cbSceneParam._m0[78u].w)
    {
        float _3393 = isnan(_1088) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1088 : min(cbSceneParam._m0[80u].w, _1088));
        float _3394 = _3393 / _1088;
        float _3405 = _3394 * _1138;
        float _3406 = _1139 * _3394;
        float _3407 = (-0.0) - _3406;
        float _3409 = _3394 * _1140;
        float _3411 = (cbSceneParam._m0[77u].w * _3407) / _3393;
        float _3412 = _3411 + cbSceneParam._m0[79u].w;
        float _3413 = cbSceneParam._m0[79u].w - _3406;
        float _3419 = sqrt(((_3405 * _3405) + (_3406 * _3406)) + (_3409 * _3409));
        float _3422 = (1.0 - (cbSceneParam._m0[77u].w / _3393)) * _3419;
        float _3427 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3429 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3606;
        if (abs((_3407 - _3411) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3606 = ((((_3412 > 0.0) ? exp2(_3427 * _3412) : (2.0 - exp2(_3429 * _3412))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3422;
        }
        else
        {
            float _3550 = 1.0 / cbSceneParam._m0[80u].x;
            float _3551 = isnan(_3413) ? _3412 : (isnan(_3412) ? _3413 : max(_3412, _3413));
            float _3552 = isnan(_3413) ? _3412 : (isnan(_3412) ? _3413 : min(_3412, _3413));
            float _3561 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : min(_3551, 0.0));
            float _3562 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : min(_3552, 0.0));
            _3606 = ((abs(_3419 / _3407) * cbSceneParam._m0[80u].y) * ((((_3561 - _3562) * 2.0) - ((exp2(_3427 * (isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0)))) - exp2(_3427 * (isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))))) * _3550)) - ((exp2(_3429 * _3561) - exp2(_3429 * _3562)) * _3550))) + (_3422 * cbSceneParam._m0[80u].z);
        }
        vec4 _3608 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3339, _3340, 1.0), 0.0);
        float _3617 = exp2((_3606 * (-1.44269502162933349609375)) * (1.0 - _3608.w));
        float _3618 = log2(_3617);
        float _3634 = log2(_3359);
        _3431 = (exp2(_3634 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3618 * cbSceneParam._m0[78u].x)) * _3608.x) / cbSceneParam._m0[78u].x)) + _3356;
        _3433 = (exp2(_3634 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3618 * cbSceneParam._m0[78u].y)) * _3608.y) / cbSceneParam._m0[78u].y)) + _3357;
        _3435 = (exp2(_3634 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3618 * cbSceneParam._m0[78u].z)) * _3608.z) / cbSceneParam._m0[78u].z)) + _3358;
        _3437 = _3617 * _3359;
    }
    else
    {
        _3431 = _3356;
        _3433 = _3357;
        _3435 = _3358;
        _3437 = _3359;
    }
    bool _3644;
    vec4 _3447;
    vec4 _3469;
    float _3471;
    float _3475;
    float _3476;
    float _3477;
    float _3478;
    bool _3488;
    for (;;)
    {
        _3447 = cbMatDynParam._m0[0u];
        float _3449 = roundEven(_3447.y);
        bool _3450 = _3449 == 3.0;
        float _3451 = log2(_3437);
        float _3458 = exp2(_3451 * cbSceneParam._m0[78u].x) * _3328;
        float _3459 = exp2(_3451 * cbSceneParam._m0[78u].y) * _3329;
        float _3460 = exp2(_3451 * cbSceneParam._m0[78u].z) * _3330;
        float _3467 = _1154 + (-0.5);
        _3469 = cbMtdParam._m0[1u];
        _3471 = _3469.y * _3467;
        float _3474 = (_3449 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3475 = _3474 * (_3450 ? _3458 : (_3458 + (cbSceneParam._m0[72u].w * _3431)));
        _3476 = _3474 * (_3450 ? _3459 : (_3459 + (cbSceneParam._m0[72u].w * _3433)));
        _3477 = _3474 * (_3450 ? _3460 : (_3460 + (cbSceneParam._m0[72u].w * _3435)));
        _3478 = _3467 * 0.999000012874603271484375;
        _3488 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3488)
        {
            if ((cbInstanceData._m0[_294 + 7u].x + _3478) < 0.5)
            {
                _3644 = true;
                break;
            }
        }
        uint _3585 = _1203 + uint(_3447.w);
        if ((cbInstanceData._m0[_3585].w < 1.0) && ((cbInstanceData._m0[_3585].w + _3478) < 0.5))
        {
            _3644 = true;
            break;
        }
        if ((_3471 + 1.0) < _3469.x)
        {
            _3644 = true;
            break;
        }
        _3644 = false;
        break;
    }
    float _3848;
    if (_3644)
    {
        discard_state = true;
        _3848 = 0.0;
    }
    else
    {
        _3848 = cbInstanceData._m0[_3331].w;
    }
    SV_Target.x = _3475;
    SV_Target.y = _3476;
    SV_Target.z = _3477;
    SV_Target.w = _3848;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3331].w;
    discard_exit();
}


