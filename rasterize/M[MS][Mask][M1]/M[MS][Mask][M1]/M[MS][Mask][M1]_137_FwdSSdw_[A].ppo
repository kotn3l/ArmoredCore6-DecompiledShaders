#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1659;
float _4060;
float _4061;
float _4062;
float _4063;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _249 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _250 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _251 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _257 = inversesqrt(dot(vec3(_249, _250, _251), vec3(_249, _250, _251)));
    float _264 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _271 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[23u].w) + _438) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4072 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _463 = (_456 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _464 = (_456 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _465 = (_456 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _504 = _502.x;
    float _514 = dot(vec4(_504, _502.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _528 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_504 - _514) * cbMtdParam._m0[23u].w) + _514) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4083 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _536 = (_529 * ((_482.x * cbMtdParam._m0[13u].x) - _463)) + _463;
    float _537 = (_529 * ((_482.y * cbMtdParam._m0[13u].y) - _464)) + _464;
    float _538 = (_529 * ((_482.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _296) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _297) + cbTextureTilingScale._m0[24u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _576 = _574.x;
    float _586 = dot(vec4(_576, _574.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _598 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _385.z) * 2.0) - ((((_576 - _586) * cbMtdParam._m0[23u].w) + _586) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4094 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _612 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _316.x) * ((_599 * ((_557.x * cbMtdParam._m0[14u].x) - _536)) + _536);
    float _615 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _316.y) * ((_599 * ((_557.y * cbMtdParam._m0[14u].y) - _537)) + _537);
    float _618 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _316.z) * ((_599 * ((_557.z * cbMtdParam._m0[14u].z) - _538)) + _538);
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _296) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _297) + cbTextureTilingScale._m0[14u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _677 = _673.z;
    float _684 = ((_656.x - _675) * _456) + _675;
    float _685 = ((_656.y - _676) * _456) + _676;
    float _686 = ((_656.z - _677) * _456) + _677;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w));
    float _709 = ((_698.x - _684) * _529) + _684;
    float _710 = ((_698.y - _685) * _529) + _685;
    float _711 = ((_698.z - _686) * _529) + _686;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _296) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _297) + cbTextureTilingScale._m0[23u].w));
    float _736 = ((_723.z - _711) * _599) + _711;
    float _739 = ((((_723.x - _709) * _599) + _709) * 2.0) + (-1.0);
    float _741 = ((((_723.y - _710) * _599) + _710) * 2.0) + (-1.0);
    float _742 = dot(vec2(_739, _741), vec2(_739, _741));
    float _4105 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _747 = sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))));
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _786 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _788 = _786.x;
    float _789 = 1.0 - _788;
    float _797 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _800 = ((isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : min(_797, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _809 = (_800 - ((((((_788 - _789) * cbMtdParam._m0[24u].z) + _789) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _800))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4126 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _810 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _817 = (_810 * ((_636.x * cbMtdParam._m0[18u].x) - _612)) + _612;
    float _818 = (_810 * ((_636.y * cbMtdParam._m0[18u].y) - _615)) + _615;
    float _819 = (_810 * ((_636.z * cbMtdParam._m0[18u].z) - _618)) + _618;
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _833 = _831.x;
    float _834 = 1.0 - _833;
    float _859 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_833 - _834) * cbMtdParam._m0[24u].w) + _834) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4137 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _860 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _868 = ((((cbMtdParam._m0[10u].x - _817) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _860) + _817;
    float _869 = ((((cbMtdParam._m0[10u].y - _818) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _860) + _818;
    float _870 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _819)) * _860) + _819;
    vec4 _896 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _898 = _896.x;
    float _915 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _898) * _456) + _898;
    float _932 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _296) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _297) + cbTextureTilingScale._m0[21u].w)).x - _915) * _529) + _915;
    float _949 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _296) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _297) + cbTextureTilingScale._m0[10u].w)).x - _932) * _599) + _932;
    float _953 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _949) * cbMtdParam._m0[19u].z) + _949;
    float _955 = _953 - (_953 * _810);
    float _957 = _955 - (_955 * _860);
    float _961 = (cbMtdParam._m0[19u].w * (_761.z - _736)) + _736;
    vec4 _977 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _984 = (_977.x * 2.0) + (-1.0);
    float _985 = (_977.y * 2.0) + (-1.0);
    float _986 = dot(vec2(_984, _985), vec2(_984, _985));
    float _4148 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _994 = (_810 * (_977.z - _961)) + _961;
    float _997 = ((cbMtdParam._m0[23u].x - _994) * _860) + _994;
    vec4 _1020 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1026 = (_1020.x * 2.0) + (-1.0);
    float _1027 = (_1020.y * 2.0) + (-1.0);
    float _1028 = dot(vec2(_1026, _1027), vec2(_1026, _1027));
    float _4159 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1036 = (((_761.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _739;
    float _1037 = (((_761.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _741;
    float _1049 = (((_984 - _1036) + (cbMtdParam._m0[21u].x * _1036)) * _810) + _1036;
    float _1050 = (((_985 - _1037) + (cbMtdParam._m0[21u].x * _1037)) * _810) + _1037;
    float _1051 = (_810 * (sqrt(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) - _747)) + _747;
    float _1062 = (((_1026 - _1049) + (_1049 * cbMtdParam._m0[22u].z)) * _860) + _1049;
    float _1063 = (((_1027 - _1050) + (_1050 * cbMtdParam._m0[22u].z)) * _860) + _1050;
    float _1064 = ((sqrt(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) - _1051) * _860) + _1051;
    float _1066 = cbMtdParam._m0[22u].x + _761.w;
    float _1069 = fma(_1064, _264 * NORMAL.x, fma(_1063, _271 * TANGENT.x, (_257 * _249) * _1062));
    float _1072 = fma(_1064, _264 * NORMAL.y, fma(_1063, _271 * TANGENT.y, (_257 * _250) * _1062));
    float _1075 = fma(_1064, _264 * NORMAL.z, fma(_1063, _271 * TANGENT.z, (_257 * _251) * _1062));
    float _1079 = inversesqrt(dot(vec3(_1069, _1072, _1075), vec3(_1069, _1072, _1075)));
    float _1080 = _1079 * _1069;
    float _1081 = _1079 * _1072;
    float _1082 = _1079 * _1075;
    float _4170 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1083 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4192 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4203 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _4214 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4225 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _1088 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _1102 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1152 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1142);
    float _1153 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1142);
    float _1154 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1142);
    float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
    float _1159 = _1152 * _1158;
    float _1160 = _1153 * _1158;
    float _1161 = _1154 * _1158;
    vec4 _1166 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1168 = _1166.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1340 = sqrt(((_1152 * _1152) + (_1153 * _1153)) + (_1154 * _1154));
        float _1346 = (cbMatDynParam._m0[5u].x * _1340) + cbMatDynParam._m0[5u].y;
        float _4236 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1351 = (cbMatDynParam._m0[5u].z * _1340) + cbMatDynParam._m0[5u].w;
        float _4247 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) - _1347)) + _1347) < ((_1168 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1179 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1180 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1198 = fma(_1082, cbSceneParam._m0[5u].z, fma(_1081, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1080));
    float _1201 = fma(_1082, cbSceneParam._m0[6u].z, fma(_1081, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1080));
    float _1204 = fma(_1082, cbSceneParam._m0[7u].z, fma(_1081, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1080));
    uint _1217 = _277 + 9u;
    uint _1218 = _1217 + uint(cbMatDynParam._m0[0u].w);
    float _1224 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_1218].x;
    float _1225 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1218].y;
    float _1226 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1218].z;
    float _4258 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1227 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _1228 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1229 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _1230 = 1.0 - _1088;
    float _1231 = _1227 * _1230;
    float _1232 = _1228 * _1230;
    float _1233 = _1229 * _1230;
    float _1238 = (_1227 + (-0.039999999105930328369140625)) * _1088;
    float _1239 = (_1228 + (-0.039999999105930328369140625)) * _1088;
    float _1240 = (_1229 + (-0.039999999105930328369140625)) * _1088;
    float _1241 = _1238 + 0.039999999105930328369140625;
    float _1243 = _1239 + 0.039999999105930328369140625;
    float _1244 = _1240 + 0.039999999105930328369140625;
    vec4 _1253 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1179, cbSceneParam._m0[86u].y * _1180));
    float _1257 = ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * TEXCOORD_5.w) * _1253.x;
    float _1258 = dot(vec3(_1080, _1081, _1082), vec3(_1159, _1160, _1161));
    float _1261 = _1258 * 2.0;
    float _1265 = (_1261 * _1080) - _1159;
    float _1266 = (_1261 * _1081) - _1160;
    float _1267 = (_1261 * _1082) - _1161;
    float _1271 = abs(dot(vec3(_1159, _1160, _1161), vec3(_1080, _1081, _1082)));
    float _4291 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
    float _1273 = sqrt(_1083);
    float _1286 = exp2((_1273 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1273 * 3.0));
    float _1292 = (1.0 - _1286) * ((_1273 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1293 = _1286 * _1273;
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1325 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1329 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1658;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1383 = fma(_1329, cbModelParam._m0[26u].z, fma(_1325, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1321));
        float _1387 = fma(_1329, cbModelParam._m0[27u].z, fma(_1325, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1321));
        float _1391 = fma(_1329, cbModelParam._m0[28u].z, fma(_1325, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1321));
        float _1416 = _1321 + _1080;
        float _1417 = _1325 + _1081;
        float _1418 = _1329 + _1082;
        float _1428 = fma(_1418, cbModelParam._m0[26u].z, fma(_1417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1416)) - _1383;
        float _1429 = fma(_1418, cbModelParam._m0[27u].z, fma(_1417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1416)) - _1387;
        float _1430 = fma(_1418, cbModelParam._m0[28u].z, fma(_1417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1416)) - _1391;
        float _1434 = inversesqrt(dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430)));
        float _1447 = ((_1434 * _1428) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1383 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1434 * _1429) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1387 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1434 * _1430) / cbModelParam._m0[34u].z) + ((((((_1391 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1486 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1452.x + (-0.5));
        float _1488 = _1486 * (_1452.y + (-0.5));
        float _1489 = _1486 * (_1452.z + (-0.5));
        float _1496 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1459.x + (-0.5));
        float _1498 = _1496 * (_1459.y + (-0.5));
        float _1499 = _1496 * (_1459.z + (-0.5));
        float _1506 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1466.x + (-0.5));
        float _1508 = _1506 * (_1466.y + (-0.5));
        float _1509 = _1506 * (_1466.z + (-0.5));
        float _1516 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1473.x + (-0.5));
        float _1518 = _1516 * (_1473.y + (-0.5));
        float _1519 = _1516 * (_1473.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1540 = (dot(vec3(_1080, _1081, _1082), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1550 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4339 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1552 + 1.0))) + _1557) * _1520;
        float _1567 = _1488 * 0.5;
        float _1568 = _1498 * 0.5;
        float _1569 = _1508 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_1080, _1081, _1082), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4372 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1594 + 1.0))) + _1599) * _1521;
        float _1609 = _1489 * 0.5;
        float _1610 = _1499 * 0.5;
        float _1611 = _1509 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_1080, _1081, _1082), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4405 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1636 + 1.0))) + _1641) * _1522;
        _1658 = _1489;
        _1660 = _1488;
        _1661 = _1487;
        _1662 = _1499;
        _1663 = _1498;
        _1664 = _1497;
        _1665 = _1509;
        _1666 = _1508;
        _1667 = _1507;
        _1668 = _1522;
        _1669 = _1521;
        _1670 = _1520;
        _1671 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1672 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1673 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1659;
        _1660 = _1659;
        _1661 = _1659;
        _1662 = _1659;
        _1663 = _1659;
        _1664 = _1659;
        _1665 = _1659;
        _1666 = _1659;
        _1667 = _1659;
        _1668 = _1659;
        _1669 = _1659;
        _1670 = _1659;
        _1671 = 0.0;
        _1672 = 0.0;
        _1673 = 0.0;
    }
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    float _1981;
    float _1982;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1699 = fma(_1329, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1321));
        float _1703 = fma(_1329, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1321));
        float _1707 = fma(_1329, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1321));
        float _1730 = _1321 + _1080;
        float _1731 = _1325 + _1081;
        float _1732 = _1329 + _1082;
        float _1742 = fma(_1732, cbModelParam._m0[30u].z, fma(_1731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1730)) - _1699;
        float _1743 = fma(_1732, cbModelParam._m0[31u].z, fma(_1731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1730)) - _1703;
        float _1744 = fma(_1732, cbModelParam._m0[32u].z, fma(_1731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1730)) - _1707;
        float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
        float _1761 = ((_1748 * _1742) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1699 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1762 = ((_1748 * _1743) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1703 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1763 = ((_1748 * _1744) / cbModelParam._m0[35u].z) + ((((((_1707 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1765 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1761, _1762, _1763), 0.0);
        vec4 _1772 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1761, _1762, _1763), 0.0);
        vec4 _1779 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1761, _1762, _1763), 0.0);
        vec4 _1786 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1761, _1762, _1763), 0.0);
        float _1798 = exp2((_1765.w + (-0.5)) * 20.0) * 2.0;
        float _1799 = _1798 * (_1765.x + (-0.5));
        float _1800 = _1798 * (_1765.y + (-0.5));
        float _1801 = _1798 * (_1765.z + (-0.5));
        float _1808 = exp2((_1772.w + (-0.5)) * 20.0) * 2.0;
        float _1809 = _1808 * (_1772.x + (-0.5));
        float _1810 = _1808 * (_1772.y + (-0.5));
        float _1811 = _1808 * (_1772.z + (-0.5));
        float _1818 = exp2((_1779.w + (-0.5)) * 20.0) * 2.0;
        float _1819 = _1818 * (_1779.x + (-0.5));
        float _1820 = _1818 * (_1779.y + (-0.5));
        float _1821 = _1818 * (_1779.z + (-0.5));
        float _1828 = exp2((_1786.w + (-0.5)) * 20.0) * 2.0;
        float _1829 = _1828 * (_1786.x + (-0.5));
        float _1830 = _1828 * (_1786.y + (-0.5));
        float _1831 = _1828 * (_1786.z + (-0.5));
        float _1832 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1833 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1834 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1835 = _1799 * 0.5;
        float _1836 = _1809 * 0.5;
        float _1837 = _1819 * 0.5;
        float _1838 = dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837));
        float _1843 = (_1838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1838);
        float _1851 = (dot(vec3(_1080, _1081, _1082), vec3(_1843 * _1835, _1843 * _1836, _1843 * _1837)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1860 = sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837)) / (_1832 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1862 = _1861 * 2.0;
        float _1866 = (1.0 - _1861) / (_1861 + 1.0);
        float _4468 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1876 = ((((1.0 - _1867) * (_1862 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1862 + 1.0))) + _1867) * _1832;
        float _1877 = _1800 * 0.5;
        float _1878 = _1810 * 0.5;
        float _1879 = _1820 * 0.5;
        float _1880 = dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879));
        float _1885 = (_1880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1880);
        float _1893 = (dot(vec3(_1080, _1081, _1082), vec3(_1885 * _1877, _1885 * _1878, _1885 * _1879)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1902 = sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879)) / (_1833 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1904 = _1903 * 2.0;
        float _1908 = (1.0 - _1903) / (_1903 + 1.0);
        float _4501 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1918 = ((((1.0 - _1909) * (_1904 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1904 + 1.0))) + _1909) * _1833;
        float _1919 = _1801 * 0.5;
        float _1920 = _1811 * 0.5;
        float _1921 = _1821 * 0.5;
        float _1922 = dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921));
        float _1927 = (_1922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1922);
        float _1935 = (dot(vec3(_1080, _1081, _1082), vec3(_1927 * _1919, _1927 * _1920, _1927 * _1921)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1944 = sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921)) / (_1834 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1946 = _1945 * 2.0;
        float _1950 = (1.0 - _1945) / (_1945 + 1.0);
        float _4534 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1960 = ((((1.0 - _1951) * (_1946 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1946 + 1.0))) + _1951) * _1834;
        _1968 = _1801;
        _1969 = _1800;
        _1970 = _1799;
        _1971 = _1811;
        _1972 = _1810;
        _1973 = _1809;
        _1974 = _1821;
        _1975 = _1820;
        _1976 = _1819;
        _1977 = _1834;
        _1978 = _1833;
        _1979 = _1832;
        _1980 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)));
        _1981 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)));
        _1982 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)));
    }
    else
    {
        _1968 = _1659;
        _1969 = _1659;
        _1970 = _1659;
        _1971 = _1659;
        _1972 = _1659;
        _1973 = _1659;
        _1974 = _1659;
        _1975 = _1659;
        _1976 = _1659;
        _1977 = _1659;
        _1978 = _1659;
        _1979 = _1659;
        _1980 = 0.0;
        _1981 = 0.0;
        _1982 = 0.0;
    }
    float _1992 = (cbModelParam._m0[1u].x * (_1980 - _1671)) + _1671;
    float _1993 = (cbModelParam._m0[1u].x * (_1981 - _1672)) + _1672;
    float _1994 = (cbModelParam._m0[1u].x * (_1982 - _1673)) + _1673;
    float _2015 = fma(_1994, cbSceneParam._m0[89u].z, fma(_1993, cbSceneParam._m0[89u].y, _1992 * cbSceneParam._m0[89u].x));
    float _2018 = fma(_1994, cbSceneParam._m0[90u].z, fma(_1993, cbSceneParam._m0[90u].y, _1992 * cbSceneParam._m0[90u].x));
    float _2021 = fma(_1994, cbSceneParam._m0[91u].z, fma(_1993, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1992));
    float _2036 = _1265 * 0.5;
    float _2037 = _1266 * 0.5;
    float _2038 = _1267 * 0.5;
    float _2039 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1970, _1973, _1976, _1979));
    float _2042 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1969, _1972, _1975, _1978));
    float _2045 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1968, _1971, _1974, _1977));
    float _2079;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2052 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1658, _1662, _1665, _1668));
        float _2056 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1660, _1663, _1666, _1669));
        float _2060 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1661, _1664, _1667, _1670));
        float _2067 = dot(vec4(cbModelParam._m0[39u]), vec4(_2036, _2037, _2038, 1.0));
        _2079 = dot(vec3(isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0)), isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)), isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2067) ? 0.0 : (isnan(0.0) ? _2067 : max(0.0, _2067))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2079 = 1.0;
    }
    float _2090;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2081 = dot(vec4(cbModelParam._m0[40u]), vec4(_2036, _2037, _2038, 1.0));
        _2090 = dot(vec3(isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)), isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)), isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2081) ? 0.0 : (isnan(0.0) ? _2081 : max(0.0, _2081))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2090 = 1.0;
    }
    float _2094 = (_2090 * cbModelParam._m0[1u].x) + (_2079 * (1.0 - cbModelParam._m0[1u].x));
    float _2104 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1083);
    float _2105 = isnan(_2104) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2104 : min(cbModelParam._m0[25u].z, _2104));
    float _2185;
    float _2187;
    float _2189;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2152 = fma(_1329, cbModelParam._m0[13u].z, fma(_1325, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1321)) + cbModelParam._m0[13u].w;
        float _2156 = fma(_1329, cbModelParam._m0[14u].z, fma(_1325, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1321)) + cbModelParam._m0[14u].w;
        float _2160 = fma(_1329, cbModelParam._m0[15u].z, fma(_1325, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1321)) + cbModelParam._m0[15u].w;
        float _2163 = fma(_1267, cbModelParam._m0[13u].z, fma(_1266, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1265));
        float _2166 = fma(_1267, cbModelParam._m0[14u].z, fma(_1266, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1265));
        float _2169 = fma(_1267, cbModelParam._m0[15u].z, fma(_1266, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1265));
        float _2197;
        if (_2163 > 0.0)
        {
            _2197 = abs((1.0 - _2152) / _2163);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2152 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2197 = frontier_phi_17_15_ladder;
        }
        float _2420;
        if (_2166 > 0.0)
        {
            _2420 = abs((1.0 - _2156) / _2166);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2156 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2420 = frontier_phi_26_22_ladder;
        }
        float _2677;
        if (_2169 > 0.0)
        {
            _2677 = abs((1.0 - _2160) / _2169);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2160 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2677 = frontier_phi_38_33_ladder;
        }
        float _2679 = isnan(_2420) ? _2197 : (isnan(_2197) ? _2420 : min(_2197, _2420));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _2163) + _2152;
        float _2685 = (_2680 * _2166) + _2156;
        float _2686 = (_2680 * _2169) + _2160;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2689 = (-1.0) - _2687;
        float _2691 = _2687 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2686 > _2691) || ((_2686 < _2689) || ((_2685 > _2691) || ((_2685 < _2689) || ((_2684 < _2689) || (_2684 > _2691))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2686, cbModelParam._m0[9u].z, fma(_2685, cbModelParam._m0[9u].y, _2684 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2686, cbModelParam._m0[10u].z, fma(_2685, cbModelParam._m0[10u].y, _2684 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2686, cbModelParam._m0[11u].z, fma(_2685, cbModelParam._m0[11u].y, _2684 * cbModelParam._m0[11u].x))), _2105);
            frontier_phi_16_38_ladder = _2814.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2814.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2814.x * cbModelParam._m0[1u].y;
        }
        _2185 = frontier_phi_16_38_ladder_2;
        _2187 = frontier_phi_16_38_ladder_1;
        _2189 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2173 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1265, _1266, _1267), _2105);
        _2185 = _2173.x * cbModelParam._m0[1u].y;
        _2187 = _2173.y * cbModelParam._m0[1u].y;
        _2189 = _2173.z * cbModelParam._m0[1u].y;
    }
    float _2193 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1083);
    float _2194 = isnan(_2193) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2193 : min(cbModelParam._m0[25u].w, _2193));
    float _2283;
    float _2285;
    float _2287;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2247 = fma(_1329, cbModelParam._m0[21u].z, fma(_1325, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1321)) + cbModelParam._m0[21u].w;
        float _2251 = fma(_1329, cbModelParam._m0[22u].z, fma(_1325, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1321)) + cbModelParam._m0[22u].w;
        float _2255 = fma(_1329, cbModelParam._m0[23u].z, fma(_1325, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1321)) + cbModelParam._m0[23u].w;
        float _2258 = fma(_1267, cbModelParam._m0[21u].z, fma(_1266, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1265));
        float _2261 = fma(_1267, cbModelParam._m0[22u].z, fma(_1266, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1265));
        float _2264 = fma(_1267, cbModelParam._m0[23u].z, fma(_1266, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1265));
        float _2425;
        if (_2258 > 0.0)
        {
            _2425 = abs((1.0 - _2247) / _2258);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2247 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2425 = frontier_phi_28_24_ladder;
        }
        float _2704;
        if (_2261 > 0.0)
        {
            _2704 = abs((1.0 - _2251) / _2261);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2261 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2251 + 1.0) / _2261);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2704 = frontier_phi_40_35_ladder;
        }
        float _2917;
        if (_2264 > 0.0)
        {
            _2917 = abs((1.0 - _2255) / _2264);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2264 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2255 + 1.0) / _2264);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2917 = frontier_phi_49_46_ladder;
        }
        float _2919 = isnan(_2704) ? _2425 : (isnan(_2425) ? _2704 : min(_2425, _2704));
        float _2920 = isnan(_2917) ? _2919 : (isnan(_2919) ? _2917 : min(_2919, _2917));
        float _2924 = (_2920 * _2258) + _2247;
        float _2925 = (_2920 * _2261) + _2251;
        float _2926 = (_2920 * _2264) + _2255;
        float _2927 = _2920 * 9.9999997473787516355514526367188e-05;
        float _2928 = (-1.0) - _2927;
        float _2930 = _2927 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2926 > _2930) || ((_2926 < _2928) || ((_2925 > _2930) || ((_2925 < _2928) || ((_2924 < _2928) || (_2924 > _2930))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3125 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2926, cbModelParam._m0[17u].z, fma(_2925, cbModelParam._m0[17u].y, _2924 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2926, cbModelParam._m0[18u].z, fma(_2925, cbModelParam._m0[18u].y, _2924 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2926, cbModelParam._m0[19u].z, fma(_2925, cbModelParam._m0[19u].y, _2924 * cbModelParam._m0[19u].x))), _2194);
            frontier_phi_25_49_ladder = _3125.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3125.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3125.x * cbModelParam._m0[1u].z;
        }
        _2283 = frontier_phi_25_49_ladder_2;
        _2285 = frontier_phi_25_49_ladder_1;
        _2287 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2267 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1265, _1266, _1267), _2194);
        _2283 = _2267.x * cbModelParam._m0[1u].z;
        _2285 = _2267.y * cbModelParam._m0[1u].z;
        _2287 = _2267.z * cbModelParam._m0[1u].z;
    }
    float _2300 = (((_1292 * _1241) + _1293) * _1257) * ((cbModelParam._m0[1u].w * (_2283 - _2185)) + _2185);
    float _2302 = (((_1292 * _1243) + _1293) * _1257) * ((cbModelParam._m0[1u].w * (_2285 - _2187)) + _2187);
    float _2304 = (((_1292 * _1244) + _1293) * _1257) * ((cbModelParam._m0[1u].w * (_2287 - _2189)) + _2189);
    float _2307 = fma(_2304, cbSceneParam._m0[89u].z, fma(_2302, cbSceneParam._m0[89u].y, _2300 * cbSceneParam._m0[89u].x));
    float _2310 = fma(_2304, cbSceneParam._m0[90u].z, fma(_2302, cbSceneParam._m0[90u].y, _2300 * cbSceneParam._m0[90u].x));
    float _2313 = fma(_2304, cbSceneParam._m0[91u].z, fma(_2302, cbSceneParam._m0[91u].y, _2300 * cbSceneParam._m0[91u].x));
    vec4 _2321 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1179, _1180));
    float _2323 = _2321.w;
    float _2335 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2323);
    float _2336 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2323);
    float _2337 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2323);
    uvec4 _2341 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2343 = _2341.x * 14u;
    uint _2344 = _2343 + 13u;
    float _2351 = _1257 + (-1.0);
    float _2356 = (cbLight._m0[_2344].x * _2351) + 1.0;
    float _2357 = (cbLight._m0[_2344].y * _2351) + 1.0;
    float _2358 = (cbLight._m0[_2344].z * _2351) + 1.0;
    float _2359 = (cbLight._m0[_2344].w * _2351) + 1.0;
    uint _2360 = _2343 + 5u;
    float _2366 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
    uint _2370 = _2343 + 4u;
    float _2379 = isnan(1.0) ? _2356 : (isnan(_2356) ? 1.0 : min(_2356, 1.0));
    uint _2383 = _2343 | 1u;
    float _2394 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_1080, _1081, _1082));
    float _2397 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_1080, _1081, _1082));
    float _4670 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _4681 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2402 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * 0.3183098733425140380859375;
    float _2404 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * 0.3183098733425140380859375;
    float _2411 = ((cbLight._m0[_2360].x * _2366) * _2404) + (((cbLight._m0[_2370].x * _2335) * _2379) * _2402);
    float _2412 = ((_2366 * cbLight._m0[_2360].y) * _2404) + (((cbLight._m0[_2370].y * _2336) * _2379) * _2402);
    float _2413 = ((_2366 * cbLight._m0[_2360].z) * _2404) + (((cbLight._m0[_2370].z * _2337) * _2379) * _2402);
    uvec4 _2417 = floatBitsToUint(cbLight._m0[_2343 + 12u]);
    bool _2419 = _2417.x == 0u;
    float _2430;
    float _2432;
    float _2434;
    if (_2419)
    {
        _2430 = _2411;
        _2432 = _2412;
        _2434 = _2413;
    }
    else
    {
        uint _2438 = _2343 + 6u;
        float _2454 = (dot(vec3(cbLight._m0[_2343 + 2u].xyz), vec3(_1080, _1081, _1082)) * 0.5) + 0.5;
        float _2455 = _2454 * _2454;
        float _4692 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2456 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2457 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2430 = (((cbLight._m0[_2438].x * 0.3183098733425140380859375) * _2456) * _2457) + _2411;
        _2432 = (((cbLight._m0[_2438].y * 0.3183098733425140380859375) * _2456) * _2457) + _2412;
        _2434 = (((cbLight._m0[_2438].z * 0.3183098733425140380859375) * _2456) * _2457) + _2413;
    }
    bool _2437 = _2417.y == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2437)
    {
        _2475 = _2430;
        _2477 = _2432;
        _2479 = _2434;
    }
    else
    {
        uint _2648 = _2343 + 7u;
        float _2664 = (dot(vec3(cbLight._m0[_2343 + 3u].xyz), vec3(_1080, _1081, _1082)) * 0.5) + 0.5;
        float _2665 = _2664 * _2664;
        float _4708 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2666 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2667 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2475 = (((cbLight._m0[_2648].x * 0.3183098733425140380859375) * _2666) * _2667) + _2430;
        _2477 = (((cbLight._m0[_2648].y * 0.3183098733425140380859375) * _2666) * _2667) + _2432;
        _2479 = (((cbLight._m0[_2648].z * 0.3183098733425140380859375) * _2666) * _2667) + _2434;
    }
    uint _2482 = _2343 + 8u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _1083) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2343].x + _1159;
    float _2498 = cbLight._m0[_2343].y + _1160;
    float _2499 = cbLight._m0[_2343].z + _1161;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2343].xyz));
    float _4724 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _4735 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _2511 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2512 = dot(vec3(_1080, _1081, _1082), vec3(_2504, _2505, _2506));
    float _4746 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2504, _2505, _2506));
    float _4757 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2496 * _2496;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
    float _2533 = 0.959999978542327880859375 - _1238;
    float _2535 = 0.959999978542327880859375 - _1239;
    float _2536 = 0.959999978542327880859375 - _1240;
    float _2543 = 1.0 - _2496;
    float _2554 = (0.5 / (((_2511 * ((_2510 * _2543) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2543) + _2496) * _2510))) * _2510;
    float _4768 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2556 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    uint _2570 = _2343 + 9u;
    float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _1083) * 0.949999988079071044921875);
    float _2582 = _2581 * _2581;
    float _2583 = cbLight._m0[_2383].x + _1159;
    float _2584 = cbLight._m0[_2383].y + _1160;
    float _2585 = cbLight._m0[_2383].z + _1161;
    float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
    float _2590 = _2589 * _2583;
    float _2591 = _2589 * _2584;
    float _2592 = _2589 * _2585;
    float _2593 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2383].xyz));
    float _4779 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2597 = dot(vec3(_1080, _1081, _1082), vec3(_2590, _2591, _2592));
    float _4790 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2601 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2590, _2591, _2592));
    float _4801 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2605 = _2582 * _2582;
    float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
    float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
    float _2623 = 1.0 - _2582;
    float _2633 = (0.5 / (((_2511 * ((_2596 * _2623) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2623) + _2582) * _2596))) * _2596;
    float _4812 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
    float _2645 = (((((_2616 * _2533) + _1241) * cbLight._m0[_2570].x) * _2635) * _2366) + ((((cbLight._m0[_2482].x * _2335) * ((_2532 * _2533) + _1241)) * _2556) * _2379);
    float _2646 = (((((_2616 * _2535) + _1243) * cbLight._m0[_2570].y) * _2635) * _2366) + ((((cbLight._m0[_2482].y * _2336) * ((_2532 * _2535) + _1243)) * _2556) * _2379);
    float _2647 = (((((_2616 * _2536) + _1244) * cbLight._m0[_2570].z) * _2635) * _2366) + ((((cbLight._m0[_2482].z * _2337) * ((_2532 * _2536) + _1244)) * _2556) * _2379);
    float _2709;
    float _2711;
    float _2713;
    if (_2419)
    {
        _2709 = _2645;
        _2711 = _2646;
        _2713 = _2647;
    }
    else
    {
        uint _2715 = _2343 + 2u;
        uint _2719 = _2343 + 10u;
        float _2733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2715].w)) * _1083) * 0.949999988079071044921875);
        float _2734 = _2733 * _2733;
        float _2735 = cbLight._m0[_2715].x + _1159;
        float _2736 = cbLight._m0[_2715].y + _1160;
        float _2737 = cbLight._m0[_2715].z + _1161;
        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
        float _2742 = _2741 * _2735;
        float _2743 = _2741 * _2736;
        float _2744 = _2741 * _2737;
        float _2745 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2715].xyz));
        float _4823 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2748 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2749 = dot(vec3(_1080, _1081, _1082), vec3(_2742, _2743, _2744));
        float _4834 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2753 = dot(vec3(cbLight._m0[_2715].xyz), vec3(_2742, _2743, _2744));
        float _4845 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2757 = _2734 * _2734;
        float _2761 = ((_2752 * _2752) * (_2757 + (-1.0))) + 1.0;
        float _2768 = exp2(log2(1.0 - (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) * 5.0);
        float _2775 = 1.0 - _2734;
        float _2785 = (0.5 / (((_2511 * ((_2748 * _2775) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2775) + _2734) * _2748))) * _2748;
        float _4856 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2757 / ((_2761 * _2761) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        _2709 = (((((_2768 * _2533) + _1241) * cbLight._m0[_2719].x) * _2787) * _2788) + _2645;
        _2711 = (((((_2768 * _2535) + _1243) * cbLight._m0[_2719].y) * _2787) * _2788) + _2646;
        _2713 = (((((_2768 * _2536) + _1244) * cbLight._m0[_2719].z) * _2787) * _2788) + _2647;
    }
    float _2823;
    float _2825;
    float _2827;
    if (_2437)
    {
        _2823 = _2709;
        _2825 = _2711;
        _2827 = _2713;
    }
    else
    {
        uint _2834 = _2343 + 3u;
        uint _2838 = _2343 + 11u;
        float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2834].w)) * _1083) * 0.949999988079071044921875);
        float _2853 = _2852 * _2852;
        float _2854 = cbLight._m0[_2834].x + _1159;
        float _2855 = cbLight._m0[_2834].y + _1160;
        float _2856 = cbLight._m0[_2834].z + _1161;
        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
        float _2861 = _2860 * _2854;
        float _2862 = _2860 * _2855;
        float _2863 = _2860 * _2856;
        float _2864 = dot(vec3(_1080, _1081, _1082), vec3(cbLight._m0[_2834].xyz));
        float _4872 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2868 = dot(vec3(_1080, _1081, _1082), vec3(_2861, _2862, _2863));
        float _4883 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _2872 = dot(vec3(cbLight._m0[_2834].xyz), vec3(_2861, _2862, _2863));
        float _4894 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2876 = _2853 * _2853;
        float _2880 = ((_2871 * _2871) * (_2876 + (-1.0))) + 1.0;
        float _2887 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
        float _2894 = 1.0 - _2853;
        float _2904 = (0.5 / (((_2511 * ((_2867 * _2894) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2894) + _2853) * _2867))) * _2867;
        float _4905 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2906 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2876 / ((_2880 * _2880) * 3.141590118408203125));
        float _2907 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2823 = (((((_2887 * _2533) + _1241) * cbLight._m0[_2838].x) * _2906) * _2907) + _2709;
        _2825 = (((((_2887 * _2535) + _1243) * cbLight._m0[_2838].y) * _2906) * _2907) + _2711;
        _2827 = (((((_2887 * _2536) + _1244) * cbLight._m0[_2838].z) * _2906) * _2907) + _2713;
    }
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    if (_2341.y == 0u)
    {
        float _2982 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2983 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2982;
        float _2984 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2982;
        float _2985 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2982;
        uvec4 _2997 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2998 = _2997.x;
        uint _3009 = uint((float(_2997.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1180) / _2998))) + floor(float(uint(cbSceneParam._m0[85u].x * _1179) / _2998)));
        float _3019 = (log2(_2985 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3020 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        uint _3023 = uint(isnan(14.0) ? _3020 : (isnan(_3020) ? 14.0 : min(_3020, 14.0)));
        uvec4 _3028 = texelFetch(g_lightClusterGridBuffer, int(((_3023 << 2u) + (_3009 << 6u)) >> 2u));
        uint _3029 = _3028.x;
        uint _3030 = _2997.z;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((((1u << ((_3030 >> 4u) & 15u)) + 4294967295u) & _3029) == 0u) || ((_3030 & 240u) == 0u))
        {
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
        }
        else
        {
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            uint _3289 = 0u;
            uint _3298;
            bool _3299;
            for (;;)
            {
                _3298 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                _3299 = _3298 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3299)
                {
                    frontier_phi_66_pred = _3283;
                    frontier_phi_66_pred_1 = _3288;
                    frontier_phi_66_pred_2 = _3287;
                    frontier_phi_66_pred_3 = _3286;
                    frontier_phi_66_pred_4 = _3285;
                    frontier_phi_66_pred_5 = _3284;
                }
                else
                {
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    uint _3434;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3298;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    for (;;)
                    {
                        uint _3438 = uint(findLSB(_3434)) + (_3289 << 5u);
                        uint _3435 = (_3434 + 4294967295u) & _3434;
                        uint _3440 = _3438 * 48u;
                        vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3460 = (_3438 * 48u) + 4u;
                        vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3460)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3460 + 3u)).x));
                        uint _3479 = (_3438 * 48u) + 8u;
                        vec3 _3490 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3479)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3479 + 2u)).x));
                        float _3494 = _3454.x - _2983;
                        float _3495 = _3454.y - _2984;
                        float _3496 = _3454.z - _2985;
                        float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                        float _3500 = inversesqrt(_3497);
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3504 = dot(vec3(_1198, _1201, _1204), vec3(_3501, _3502, _3503));
                        float _3509 = 1.0 - (_3497 * _3454.w);
                        float _4931 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3510 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3511 = sqrt(_3497) * _3473.w;
                        float _3514 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                        float _3515 = _3514 * _3514;
                        float _3518 = ((1.0 - _3515) * _3504) + _3515;
                        float _3521 = _3511 * _3511;
                        float _3525 = ((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3510) / ((_3521 * 0.699999988079071044921875) + 1.0);
                        float _3529 = (-0.0) - _2983;
                        float _3530 = (-0.0) - _2984;
                        float _3531 = (-0.0) - _2985;
                        float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3546 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                        float _3547 = 1.0 - _1273;
                        float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                        float _3555 = _3554 * _3554;
                        float _3556 = _3555 * _3555;
                        float _3557 = _3536 + _3501;
                        float _3558 = _3537 + _3502;
                        float _3559 = _3538 + _3503;
                        float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                        float _3567 = dot(vec3(_1198, _1201, _1204), vec3(_3536, _3537, _3538));
                        float _4947 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3570 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3571 = dot(vec3(_1198, _1201, _1204), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                        float _4958 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                        float _3579 = _3514 * _3555;
                        float _3580 = _3579 * _3579;
                        float _3583 = ((1.0 - _3580) * _3504) + _3580;
                        float _4969 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3584 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3585 = 1.0 - _3555;
                        float _3595 = (0.5 / (((_3584 * ((_3570 * _3585) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3555) * _3570))) * _3584;
                        float _4980 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3606 = (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3578 * _3578) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125))) * _3510;
                        _3358 = (_3525 * _3473.x) + _3431;
                        _3359 = (_3525 * _3473.y) + _3432;
                        _3360 = (_3525 * _3473.z) + _3433;
                        _3355 = (_3606 * _3490.x) + _3428;
                        _3356 = (_3606 * _3490.y) + _3429;
                        _3357 = (_3606 * _3490.z) + _3430;
                        if (_3435 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3435;
                        }
                    }
                    frontier_phi_66_pred = _3355;
                    frontier_phi_66_pred_1 = _3360;
                    frontier_phi_66_pred_2 = _3359;
                    frontier_phi_66_pred_3 = _3358;
                    frontier_phi_66_pred_4 = _3357;
                    frontier_phi_66_pred_5 = _3356;
                }
                _3131 = frontier_phi_66_pred;
                _3141 = frontier_phi_66_pred_1;
                _3139 = frontier_phi_66_pred_2;
                _3137 = frontier_phi_66_pred_3;
                _3135 = frontier_phi_66_pred_4;
                _3133 = frontier_phi_66_pred_5;
                uint _3290 = _3289 + 1u;
                if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3283 = _3131;
                    _3284 = _3133;
                    _3285 = _3135;
                    _3286 = _3137;
                    _3287 = _3139;
                    _3288 = _3141;
                    _3289 = _3290;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
        }
        uvec4 _3144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3145 = _3144.z;
        uint _3147 = (_3145 >> 8u) & 15u;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        if (((4294967295u << _3147) & _3029) == 0u)
        {
            _3251 = _3130;
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
            _3261 = _3140;
        }
        else
        {
            float _3276 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
            float _3277 = _3276 * _2983;
            float _3278 = _3276 * _2984;
            float _3279 = _3276 * _2985;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3147 < ((_3145 >> 12u) & 15u))
            {
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3262;
                float _3411 = _3130;
                float _3412 = _3132;
                float _3413 = _3134;
                float _3414 = _3136;
                float _3415 = _3138;
                float _3416 = _3140;
                uint _3417 = _3147;
                uint _3426;
                bool _3427;
                for (;;)
                {
                    _3426 = texelFetch(g_lightClassification, int((((_3023 << 5u) + (_3009 << 9u)) + (_3417 << 2u)) >> 2u)).x;
                    _3427 = _3426 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3427)
                    {
                        frontier_phi_77_pred = _3416;
                        frontier_phi_77_pred_1 = _3415;
                        frontier_phi_77_pred_2 = _3414;
                        frontier_phi_77_pred_3 = _3413;
                        frontier_phi_77_pred_4 = _3412;
                        frontier_phi_77_pred_5 = _3411;
                    }
                    else
                    {
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3633 = _3411;
                        float _3634 = _3412;
                        float _3635 = _3413;
                        float _3636 = _3414;
                        float _3637 = _3415;
                        float _3638 = _3416;
                        uint _3639 = _3426;
                        uint _3640;
                        vec4 _3665;
                        float _3666;
                        vec4 _3681;
                        vec3 _3693;
                        vec4 _3708;
                        vec4 _3723;
                        float _3769;
                        bool _3770;
                        for (;;)
                        {
                            uint _3650 = ((_3417 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3639));
                            _3640 = (_3639 + 4294967295u) & _3639;
                            uint _3652 = _3650 * 40u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3666 = _3665.w;
                            uint _3668 = (_3650 * 40u) + 4u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3650 * 40u) + 8u;
                            _3693 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x));
                            uint _3695 = (_3650 * 40u) + 16u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3710 = (_3650 * 40u) + 20u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3725 = (_3650 * 40u) + 24u;
                            vec4 _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3744 = (_3650 * 40u) + 28u;
                            vec4 _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            _3769 = fma(_2985, _3757.z, fma(_2984, _3757.y, _3757.x * _2983)) + _3757.w;
                            _3770 = !((fma(_2985, _3738.z, fma(_2984, _3738.y, _3738.x * _2983)) + _3738.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3770)
                            {
                                float _3797 = _3665.x - _2983;
                                float _3798 = _3665.y - _2984;
                                float _3799 = _3665.z - _2985;
                                float _3800 = dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799));
                                float _3803 = inversesqrt(_3800);
                                float _3804 = _3803 * _3797;
                                float _3805 = _3803 * _3798;
                                float _3806 = _3803 * _3799;
                                float _3810 = 1.0 - (_3800 / (_3666 * _3666));
                                float _4991 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3815 = sqrt(_3800) * _3681.w;
                                float _3817 = 1.39999997615814208984375 / (_3815 + 1.39999997615814208984375);
                                float _3818 = _3817 * _3817;
                                float _3821 = ((1.0 - _3818) * dot(vec3(_3804, _3805, _3806), vec3(_1198, _1201, _1204))) + _3818;
                                float _3824 = _3815 * _3815;
                                float _3828 = (fma(_2985, _3708.z, fma(_2984, _3708.y, _3708.x * _2983)) + _3708.w) / _3769;
                                float _3829 = (fma(_2985, _3723.z, fma(_2984, _3723.y, _3723.x * _2983)) + _3723.w) / _3769;
                                float _3833 = 1.0 - dot(vec2(_3828, _3829), vec2(_3828, _3829));
                                float _5007 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3835 = _3834 * (((isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0))) * _3811) / ((_3824 * 0.699999988079071044921875) + 1.0));
                                float _3847 = exp2(log2(1.0 / ((_3824 * 3.5) + 5.0)) * 0.25);
                                float _3848 = 1.0 - _1273;
                                float _3855 = sqrt(1.0 - ((1.0 - (_3848 * _3848)) * (1.0 - (_3847 * _3847))));
                                float _3856 = _3855 * _3855;
                                float _3857 = _3856 * _3856;
                                float _3858 = _3804 - _3277;
                                float _3859 = _3805 - _3278;
                                float _3860 = _3806 - _3279;
                                float _3864 = inversesqrt(dot(vec3(_3858, _3859, _3860), vec3(_3858, _3859, _3860)));
                                float _3868 = dot(vec3(_1198, _1201, _1204), vec3((-0.0) - _3277, (-0.0) - _3278, (-0.0) - _3279));
                                float _5018 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3871 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3872 = dot(vec3(_1198, _1201, _1204), vec3(_3864 * _3858, _3864 * _3859, _3864 * _3860));
                                float _5029 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3875 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3879 = ((_3875 * _3875) * (_3857 + (-1.0))) + 1.0;
                                float _3880 = _3817 * _3856;
                                float _3881 = _3880 * _3880;
                                float _3887 = ((1.0 - _3881) * dot(vec3(_1198, _1201, _1204), vec3(_3804, _3805, _3806))) + _3881;
                                float _5040 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3888 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3889 = 1.0 - _3856;
                                float _3899 = (0.5 / (((_3888 * ((_3871 * _3889) + _3856)) + 9.9999999392252902907785028219223e-09) + (((_3888 * _3889) + _3856) * _3871))) * _3888;
                                float _5051 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3909 = (_3834 * _3811) * (((_3857 * 3.1415927410125732421875) * (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0)))) / ((_3879 * _3879) * ((_3824 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3835 * _3681.y;
                                frontier_phi_83_pred_1 = _3835 * _3681.x;
                                frontier_phi_83_pred_2 = _3909 * _3693.z;
                                frontier_phi_83_pred_3 = _3909 * _3693.y;
                                frontier_phi_83_pred_4 = _3909 * _3693.x;
                                frontier_phi_83_pred_5 = _3835 * _3681.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3917 = frontier_phi_83_pred;
                            _3916 = frontier_phi_83_pred_1;
                            _3915 = frontier_phi_83_pred_2;
                            _3914 = frontier_phi_83_pred_3;
                            _3913 = frontier_phi_83_pred_4;
                            _3918 = frontier_phi_83_pred_5;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3620 = _3913 + _3633;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            if (_3640 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3640;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3625;
                        frontier_phi_77_pred_1 = _3624;
                        frontier_phi_77_pred_2 = _3623;
                        frontier_phi_77_pred_3 = _3622;
                        frontier_phi_77_pred_4 = _3621;
                        frontier_phi_77_pred_5 = _3620;
                    }
                    _3262 = frontier_phi_77_pred;
                    _3260 = frontier_phi_77_pred_1;
                    _3258 = frontier_phi_77_pred_2;
                    _3256 = frontier_phi_77_pred_3;
                    _3254 = frontier_phi_77_pred_4;
                    _3252 = frontier_phi_77_pred_5;
                    uint _3418 = _3417 + 1u;
                    if (_3418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3411 = _3252;
                        _3412 = _3254;
                        _3413 = _3256;
                        _3414 = _3258;
                        _3415 = _3260;
                        _3416 = _3262;
                        _3417 = _3418;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3256;
                frontier_phi_58_59_ladder_1 = _3262;
                frontier_phi_58_59_ladder_2 = _3260;
                frontier_phi_58_59_ladder_3 = _3258;
                frontier_phi_58_59_ladder_4 = _3254;
                frontier_phi_58_59_ladder_5 = _3252;
            }
            else
            {
                frontier_phi_58_59_ladder = _3134;
                frontier_phi_58_59_ladder_1 = _3140;
                frontier_phi_58_59_ladder_2 = _3138;
                frontier_phi_58_59_ladder_3 = _3136;
                frontier_phi_58_59_ladder_4 = _3132;
                frontier_phi_58_59_ladder_5 = _3130;
            }
            _3251 = frontier_phi_58_59_ladder_5;
            _3253 = frontier_phi_58_59_ladder_4;
            _3255 = frontier_phi_58_59_ladder;
            _3257 = frontier_phi_58_59_ladder_3;
            _3259 = frontier_phi_58_59_ladder_2;
            _3261 = frontier_phi_58_59_ladder_1;
        }
        float _3266 = isnan(1.0) ? _1257 : (isnan(_1257) ? 1.0 : min(_1257, 1.0));
        _3042 = (_3266 * _3257) + _2475;
        _3044 = (_3266 * _3259) + _2477;
        _3046 = (_3266 * _3261) + _2479;
        _3048 = ((_3251 * _1241) * _3266) + _2823;
        _3050 = ((_3253 * _1243) * _3266) + _2825;
        _3052 = ((_3255 * _1244) * _3266) + _2827;
    }
    else
    {
        _3042 = _2475;
        _3044 = _2477;
        _3046 = _2479;
        _3048 = _2823;
        _3050 = _2825;
        _3052 = _2827;
    }
    float _5067 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _5078 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _5089 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _3069 = ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3042 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1257))) + ((_3048 + ((isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))) * _2094)) * cbPerFrame._m0[3u].x);
    float _3070 = ((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3044 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1257))) + ((_3050 + ((isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0))) * _2094)) * cbPerFrame._m0[3u].x);
    float _3071 = ((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3046 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1257))) + ((_3052 + ((isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0))) * _2094)) * cbPerFrame._m0[3u].x);
    uint _3072 = _277 + 6u;
    float _3080 = _1179 / cbSceneParam._m0[86u].x;
    float _3081 = _1180 / cbSceneParam._m0[86u].y;
    vec4 _3095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, (log2((isnan(cbSceneParam._m0[77u].w) ? _1102 : (isnan(_1102) ? cbSceneParam._m0[77u].w : min(_1102, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3097 = _3095.x;
    float _3098 = _3095.y;
    float _3099 = _3095.z;
    float _3100 = _3095.w;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    if (_1102 > cbSceneParam._m0[78u].w)
    {
        float _3155 = isnan(_1102) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1102 : min(cbSceneParam._m0[80u].w, _1102));
        float _3156 = _3155 / _1102;
        float _3167 = _3156 * _1152;
        float _3168 = _1153 * _3156;
        float _3169 = (-0.0) - _3168;
        float _3171 = _3156 * _1154;
        float _3173 = (cbSceneParam._m0[77u].w * _3169) / _3155;
        float _3174 = _3173 + cbSceneParam._m0[79u].w;
        float _3175 = cbSceneParam._m0[79u].w - _3168;
        float _3181 = sqrt(((_3167 * _3167) + (_3168 * _3168)) + (_3171 * _3171));
        float _3184 = (1.0 - (cbSceneParam._m0[77u].w / _3155)) * _3181;
        float _3189 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3191 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3368;
        if (abs((_3169 - _3173) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3368 = ((((_3174 > 0.0) ? exp2(_3189 * _3174) : (2.0 - exp2(_3191 * _3174))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3184;
        }
        else
        {
            float _3312 = 1.0 / cbSceneParam._m0[80u].x;
            float _3313 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : max(_3174, _3175));
            float _3314 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : min(_3174, _3175));
            float _3323 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : min(_3313, 0.0));
            float _3324 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : min(_3314, 0.0));
            _3368 = ((abs(_3181 / _3169) * cbSceneParam._m0[80u].y) * ((((_3323 - _3324) * 2.0) - ((exp2(_3189 * (isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0)))) - exp2(_3189 * (isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))))) * _3312)) - ((exp2(_3191 * _3323) - exp2(_3191 * _3324)) * _3312))) + (_3184 * cbSceneParam._m0[80u].z);
        }
        vec4 _3370 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3080, _3081, 1.0), 0.0);
        float _3379 = exp2((_3368 * (-1.44269502162933349609375)) * (1.0 - _3370.w));
        float _3380 = log2(_3379);
        float _3396 = log2(_3100);
        _3193 = (exp2(_3396 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].x)) * _3370.x) / cbSceneParam._m0[78u].x)) + _3097;
        _3195 = (exp2(_3396 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].y)) * _3370.y) / cbSceneParam._m0[78u].y)) + _3098;
        _3197 = (exp2(_3396 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3380 * cbSceneParam._m0[78u].z)) * _3370.z) / cbSceneParam._m0[78u].z)) + _3099;
        _3199 = _3379 * _3100;
    }
    else
    {
        _3193 = _3097;
        _3195 = _3098;
        _3197 = _3099;
        _3199 = _3100;
    }
    bool _3406;
    vec4 _3209;
    vec4 _3231;
    float _3233;
    float _3237;
    float _3238;
    float _3239;
    float _3240;
    bool _3250;
    for (;;)
    {
        _3209 = cbMatDynParam._m0[0u];
        float _3211 = roundEven(_3209.y);
        bool _3212 = _3211 == 3.0;
        float _3213 = log2(_3199);
        float _3220 = exp2(_3213 * cbSceneParam._m0[78u].x) * _3069;
        float _3221 = exp2(_3213 * cbSceneParam._m0[78u].y) * _3070;
        float _3222 = exp2(_3213 * cbSceneParam._m0[78u].z) * _3071;
        float _3229 = _1168 + (-0.5);
        _3231 = cbMtdParam._m0[1u];
        _3233 = _3231.y * _3229;
        float _3236 = (_3211 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3237 = _3236 * (_3212 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3193)));
        _3238 = _3236 * (_3212 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3195)));
        _3239 = _3236 * (_3212 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3197)));
        _3240 = _3229 * 0.999000012874603271484375;
        _3250 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3250)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _3240) < 0.5)
            {
                _3406 = true;
                break;
            }
        }
        uint _3347 = _1217 + uint(_3209.w);
        if ((cbInstanceData._m0[_3347].w < 1.0) && ((cbInstanceData._m0[_3347].w + _3240) < 0.5))
        {
            _3406 = true;
            break;
        }
        if ((_3233 + 1.0) < _3231.x)
        {
            _3406 = true;
            break;
        }
        _3406 = false;
        break;
    }
    float _3611;
    if (_3406)
    {
        discard_state = true;
        _3611 = 0.0;
    }
    else
    {
        _3611 = cbInstanceData._m0[_3072].w;
    }
    SV_Target.x = _3237;
    SV_Target.y = _3238;
    SV_Target.z = _3239;
    SV_Target.w = _3611;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3072].w;
    discard_exit();
}


