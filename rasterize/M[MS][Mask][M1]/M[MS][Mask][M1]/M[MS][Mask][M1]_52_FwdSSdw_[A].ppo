#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3696;
float _3697;
float _3698;
float _3699;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _356.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[23u].w) + _406) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3708 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _431 = (_424 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _432 = (_424 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _433 = (_424 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _356.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[23u].w) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3719 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _510 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431);
    float _513 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432);
    float _516 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433);
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _548 = _546.x;
    float _549 = _546.y;
    float _550 = _546.z;
    float _557 = ((_529.x - _548) * _424) + _548;
    float _558 = ((_529.y - _549) * _424) + _549;
    float _559 = ((_529.z - _550) * _424) + _550;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _584 = ((_571.z - _559) * _497) + _559;
    float _587 = ((((_571.x - _557) * _497) + _557) * 2.0) + (-1.0);
    float _589 = ((((_571.y - _558) * _497) + _558) * 2.0) + (-1.0);
    float _590 = dot(vec2(_587, _589), vec2(_587, _589));
    float _3730 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _595 = sqrt(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _621 = (((_609.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _622 = (((_609.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _650 = _648.x;
    float _667 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _650) * _424) + _650;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _266) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _267) + cbTextureTilingScale._m0[21u].w));
    float _685 = ((_680.x - _667) * _497) + _667;
    float _689 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _685) * cbMtdParam._m0[19u].z) + _685;
    float _693 = (cbMtdParam._m0[19u].w * (_609.z - _584)) + _584;
    float _695 = cbMtdParam._m0[22u].x + _609.w;
    float _698 = fma(_595, _233 * NORMAL.x, fma(_622, _240 * TANGENT.x, (_226 * _218) * _621));
    float _701 = fma(_595, _233 * NORMAL.y, fma(_622, _240 * TANGENT.y, (_226 * _219) * _621));
    float _704 = fma(_595, _233 * NORMAL.z, fma(_622, _240 * TANGENT.z, (_226 * _220) * _621));
    float _708 = inversesqrt(dot(vec3(_698, _701, _704), vec3(_698, _701, _704)));
    float _709 = _708 * _698;
    float _710 = _708 * _701;
    float _711 = _708 * _704;
    float _3741 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _712 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3763 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3774 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3785 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3796 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _717 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _782 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _772);
    float _783 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _772);
    float _784 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _772);
    float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
    float _789 = _782 * _788;
    float _790 = _783 * _788;
    float _791 = _784 * _788;
    vec4 _796 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _798 = _796.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _970 = sqrt(((_782 * _782) + (_783 * _783)) + (_784 * _784));
        float _976 = (cbMatDynParam._m0[5u].x * _970) + cbMatDynParam._m0[5u].y;
        float _3807 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _981 = (cbMatDynParam._m0[5u].z * _970) + cbMatDynParam._m0[5u].w;
        float _3818 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) - _977)) + _977) < ((_798 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _828 = fma(_711, cbSceneParam._m0[5u].z, fma(_710, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _709));
    float _831 = fma(_711, cbSceneParam._m0[6u].z, fma(_710, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _709));
    float _834 = fma(_711, cbSceneParam._m0[7u].z, fma(_710, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _709));
    uint _847 = _246 + 9u;
    uint _848 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_848].z;
    float _3829 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _860 = 1.0 - _717;
    float _861 = _857 * _860;
    float _862 = _858 * _860;
    float _863 = _859 * _860;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _717;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _717;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _717;
    float _871 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    float _874 = _870 + 0.039999999105930328369140625;
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _887 = ((isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * TEXCOORD_5.w) * _883.x;
    float _888 = dot(vec3(_709, _710, _711), vec3(_789, _790, _791));
    float _891 = _888 * 2.0;
    float _895 = (_891 * _709) - _789;
    float _896 = (_891 * _710) - _790;
    float _897 = (_891 * _711) - _791;
    float _901 = abs(dot(vec3(_789, _790, _791), vec3(_709, _710, _711)));
    float _3862 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _903 = sqrt(_712);
    float _916 = exp2((_903 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_903 * 3.0));
    float _922 = (1.0 - _916) * ((_903 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _923 = _916 * _903;
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_959, cbModelParam._m0[26u].z, fma(_955, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _951));
        float _1018 = fma(_959, cbModelParam._m0[27u].z, fma(_955, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _951));
        float _1022 = fma(_959, cbModelParam._m0[28u].z, fma(_955, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _951));
        float _1047 = _951 + _709;
        float _1048 = _955 + _710;
        float _1049 = _959 + _711;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_709, _710, _711), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3910 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_709, _710, _711), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3943 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_709, _710, _711), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3976 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1331 = fma(_959, cbModelParam._m0[30u].z, fma(_955, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _951));
        float _1335 = fma(_959, cbModelParam._m0[31u].z, fma(_955, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _951));
        float _1339 = fma(_959, cbModelParam._m0[32u].z, fma(_955, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _951));
        float _1362 = _951 + _709;
        float _1363 = _955 + _710;
        float _1364 = _959 + _711;
        float _1374 = fma(_1364, cbModelParam._m0[30u].z, fma(_1363, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1362)) - _1331;
        float _1375 = fma(_1364, cbModelParam._m0[31u].z, fma(_1363, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1362)) - _1335;
        float _1376 = fma(_1364, cbModelParam._m0[32u].z, fma(_1363, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1362)) - _1339;
        float _1380 = inversesqrt(dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376)));
        float _1393 = ((_1380 * _1374) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1331 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1380 * _1375) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1335 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1380 * _1376) / cbModelParam._m0[35u].z) + ((((((_1339 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        float _1430 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1397.x + (-0.5));
        float _1432 = _1430 * (_1397.y + (-0.5));
        float _1433 = _1430 * (_1397.z + (-0.5));
        float _1440 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1404.x + (-0.5));
        float _1442 = _1440 * (_1404.y + (-0.5));
        float _1443 = _1440 * (_1404.z + (-0.5));
        float _1450 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1411.x + (-0.5));
        float _1452 = _1450 * (_1411.y + (-0.5));
        float _1453 = _1450 * (_1411.z + (-0.5));
        float _1460 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1418.x + (-0.5));
        float _1462 = _1460 * (_1418.y + (-0.5));
        float _1463 = _1460 * (_1418.z + (-0.5));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = _1431 * 0.5;
        float _1468 = _1441 * 0.5;
        float _1469 = _1451 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_709, _710, _711), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4039 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1494 + 1.0))) + _1499) * _1464;
        float _1509 = _1432 * 0.5;
        float _1510 = _1442 * 0.5;
        float _1511 = _1452 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_709, _710, _711), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4050 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4061 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4072 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1536 + 1.0))) + _1541) * _1465;
        float _1551 = _1433 * 0.5;
        float _1552 = _1443 * 0.5;
        float _1553 = _1453 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_709, _710, _711), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4083 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4094 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4105 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1578 + 1.0))) + _1583) * _1466;
        _1600 = _1433;
        _1601 = _1432;
        _1602 = _1431;
        _1603 = _1443;
        _1604 = _1442;
        _1605 = _1441;
        _1606 = _1453;
        _1607 = _1452;
        _1608 = _1451;
        _1609 = _1466;
        _1610 = _1465;
        _1611 = _1464;
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
    }
    else
    {
        _1600 = _1290;
        _1601 = _1290;
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = 0.0;
        _1613 = 0.0;
        _1614 = 0.0;
    }
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1302)) + _1302;
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1303)) + _1303;
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1304)) + _1304;
    float _1647 = fma(_1626, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1624 * cbSceneParam._m0[89u].x));
    float _1650 = fma(_1626, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1624 * cbSceneParam._m0[90u].x));
    float _1653 = fma(_1626, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1624));
    float _1668 = _895 * 0.5;
    float _1669 = _896 * 0.5;
    float _1670 = _897 * 0.5;
    float _1671 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1674 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1677 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1711;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1684 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1688 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1692 = dot(vec4(_1668, _1669, _1670, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1699 = dot(vec4(cbModelParam._m0[39u]), vec4(_1668, _1669, _1670, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1699) ? 0.0 : (isnan(0.0) ? _1699 : max(0.0, _1699))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1722;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1713 = dot(vec4(cbModelParam._m0[40u]), vec4(_1668, _1669, _1670, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1726 = (_1722 * cbModelParam._m0[1u].x) + (_1711 * (1.0 - cbModelParam._m0[1u].x));
    float _1736 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _712);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1736 : min(cbModelParam._m0[25u].z, _1736));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_959, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_959, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_959, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_897, cbModelParam._m0[13u].z, fma(_896, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _895));
        float _1800 = fma(_897, cbModelParam._m0[14u].z, fma(_896, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _895));
        float _1803 = fma(_897, cbModelParam._m0[15u].z, fma(_896, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _895));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1831 = frontier_phi_17_15_ladder;
        }
        float _2055;
        if (_1800 > 0.0)
        {
            _2055 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2055 = frontier_phi_26_22_ladder;
        }
        float _2312;
        if (_1803 > 0.0)
        {
            _2312 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2312 = frontier_phi_38_33_ladder;
        }
        float _2314 = isnan(_2055) ? _1831 : (isnan(_1831) ? _2055 : min(_1831, _2055));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1797) + _1786;
        float _2320 = (_2315 * _1800) + _1790;
        float _2321 = (_2315 * _1803) + _1794;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1737);
            frontier_phi_16_38_ladder = _2449.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2449.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2449.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_16_38_ladder_2;
        _1821 = frontier_phi_16_38_ladder_1;
        _1823 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_895, _896, _897), _1737);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _712);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_959, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_959, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_959, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_897, cbModelParam._m0[21u].z, fma(_896, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _895));
        float _1896 = fma(_897, cbModelParam._m0[22u].z, fma(_896, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _895));
        float _1899 = fma(_897, cbModelParam._m0[23u].z, fma(_896, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _895));
        float _2060;
        if (_1893 > 0.0)
        {
            _2060 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2060 = frontier_phi_28_24_ladder;
        }
        float _2339;
        if (_1896 > 0.0)
        {
            _2339 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2339 = frontier_phi_40_35_ladder;
        }
        float _2552;
        if (_1899 > 0.0)
        {
            _2552 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2552 = frontier_phi_49_46_ladder;
        }
        float _2554 = isnan(_2339) ? _2060 : (isnan(_2060) ? _2339 : min(_2060, _2339));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _1893) + _1882;
        float _2560 = (_2555 * _1896) + _1886;
        float _2561 = (_2555 * _1899) + _1890;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2562;
        float _2565 = _2562 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2561 > _2565) || ((_2561 < _2563) || ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 < _2563) || (_2559 > _2565))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2561, cbModelParam._m0[17u].z, fma(_2560, cbModelParam._m0[17u].y, _2559 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2561, cbModelParam._m0[18u].z, fma(_2560, cbModelParam._m0[18u].y, _2559 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2561, cbModelParam._m0[19u].z, fma(_2560, cbModelParam._m0[19u].y, _2559 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_25_49_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_25_49_ladder_2;
        _1920 = frontier_phi_25_49_ladder_1;
        _1922 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_895, _896, _897), _1828);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1935 = (((_922 * _871) + _923) * _887) * ((cbModelParam._m0[1u].w * (_1918 - _1819)) + _1819);
    float _1937 = (((_922 * _873) + _923) * _887) * ((cbModelParam._m0[1u].w * (_1920 - _1821)) + _1821);
    float _1939 = (((_922 * _874) + _923) * _887) * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1937, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1937, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1937, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    vec4 _1956 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_809, _810));
    float _1958 = _1956.w;
    float _1970 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1958);
    float _1971 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1958);
    float _1972 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1958);
    uvec4 _1976 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _1978 = _1976.x * 14u;
    uint _1979 = _1978 + 13u;
    float _1986 = _887 + (-1.0);
    float _1991 = (cbLight._m0[_1979].x * _1986) + 1.0;
    float _1992 = (cbLight._m0[_1979].y * _1986) + 1.0;
    float _1993 = (cbLight._m0[_1979].z * _1986) + 1.0;
    float _1994 = (cbLight._m0[_1979].w * _1986) + 1.0;
    uint _1995 = _1978 + 5u;
    float _2001 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2005 = _1978 + 4u;
    float _2014 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2018 = _1978 | 1u;
    float _2029 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_709, _710, _711));
    float _2032 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_709, _710, _711));
    float _4241 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _4252 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2037 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2039 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.3183098733425140380859375;
    float _2046 = ((cbLight._m0[_1995].x * _2001) * _2039) + (((cbLight._m0[_2005].x * _1970) * _2014) * _2037);
    float _2047 = ((_2001 * cbLight._m0[_1995].y) * _2039) + (((cbLight._m0[_2005].y * _1971) * _2014) * _2037);
    float _2048 = ((_2001 * cbLight._m0[_1995].z) * _2039) + (((cbLight._m0[_2005].z * _1972) * _2014) * _2037);
    uvec4 _2052 = floatBitsToUint(cbLight._m0[_1978 + 12u]);
    bool _2054 = _2052.x == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2054)
    {
        _2065 = _2046;
        _2067 = _2047;
        _2069 = _2048;
    }
    else
    {
        uint _2073 = _1978 + 6u;
        float _2089 = (dot(vec3(cbLight._m0[_1978 + 2u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2090 = _2089 * _2089;
        float _4263 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2091 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2092 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2065 = (((cbLight._m0[_2073].x * 0.3183098733425140380859375) * _2091) * _2092) + _2046;
        _2067 = (((cbLight._m0[_2073].y * 0.3183098733425140380859375) * _2091) * _2092) + _2047;
        _2069 = (((cbLight._m0[_2073].z * 0.3183098733425140380859375) * _2091) * _2092) + _2048;
    }
    bool _2072 = _2052.y == 0u;
    float _2110;
    float _2112;
    float _2114;
    if (_2072)
    {
        _2110 = _2065;
        _2112 = _2067;
        _2114 = _2069;
    }
    else
    {
        uint _2283 = _1978 + 7u;
        float _2299 = (dot(vec3(cbLight._m0[_1978 + 3u].xyz), vec3(_709, _710, _711)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4279 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2302 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2110 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2065;
        _2112 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2067;
        _2114 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2069;
    }
    uint _2117 = _1978 + 8u;
    float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1978].w)) * _712) * 0.949999988079071044921875);
    float _2131 = _2130 * _2130;
    float _2132 = cbLight._m0[_1978].x + _789;
    float _2133 = cbLight._m0[_1978].y + _790;
    float _2134 = cbLight._m0[_1978].z + _791;
    float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
    float _2139 = _2138 * _2132;
    float _2140 = _2138 * _2133;
    float _2141 = _2138 * _2134;
    float _2142 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_1978].xyz));
    float _4295 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _2146 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2147 = dot(vec3(_709, _710, _711), vec3(_2139, _2140, _2141));
    float _4317 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1978].xyz), vec3(_2139, _2140, _2141));
    float _4328 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2131 * _2131;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2168 = 0.959999978542327880859375 - _868;
    float _2170 = 0.959999978542327880859375 - _869;
    float _2171 = 0.959999978542327880859375 - _870;
    float _2178 = 1.0 - _2131;
    float _2189 = (0.5 / (((_2146 * ((_2145 * _2178) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2178) + _2131) * _2145))) * _2145;
    float _4339 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    uint _2205 = _1978 + 9u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _712) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_2018].x + _789;
    float _2219 = cbLight._m0[_2018].y + _790;
    float _2220 = cbLight._m0[_2018].z + _791;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2018].xyz));
    float _4350 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2232 = dot(vec3(_709, _710, _711), vec3(_2225, _2226, _2227));
    float _4361 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2225, _2226, _2227));
    float _4372 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2217 * _2217;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2251 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
    float _2258 = 1.0 - _2217;
    float _2268 = (0.5 / (((_2146 * ((_2231 * _2258) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2258) + _2217) * _2231))) * _2231;
    float _4383 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2270 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    float _2280 = (((((_2251 * _2168) + _871) * cbLight._m0[_2205].x) * _2270) * _2001) + ((((cbLight._m0[_2117].x * _1970) * ((_2167 * _2168) + _871)) * _2191) * _2014);
    float _2281 = (((((_2251 * _2170) + _873) * cbLight._m0[_2205].y) * _2270) * _2001) + ((((cbLight._m0[_2117].y * _1971) * ((_2167 * _2170) + _873)) * _2191) * _2014);
    float _2282 = (((((_2251 * _2171) + _874) * cbLight._m0[_2205].z) * _2270) * _2001) + ((((cbLight._m0[_2117].z * _1972) * ((_2167 * _2171) + _874)) * _2191) * _2014);
    float _2344;
    float _2346;
    float _2348;
    if (_2054)
    {
        _2344 = _2280;
        _2346 = _2281;
        _2348 = _2282;
    }
    else
    {
        uint _2350 = _1978 + 2u;
        uint _2354 = _1978 + 10u;
        float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _712) * 0.949999988079071044921875);
        float _2369 = _2368 * _2368;
        float _2370 = cbLight._m0[_2350].x + _789;
        float _2371 = cbLight._m0[_2350].y + _790;
        float _2372 = cbLight._m0[_2350].z + _791;
        float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
        float _2377 = _2376 * _2370;
        float _2378 = _2376 * _2371;
        float _2379 = _2376 * _2372;
        float _2380 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2350].xyz));
        float _4394 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2384 = dot(vec3(_709, _710, _711), vec3(_2377, _2378, _2379));
        float _4405 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2388 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2377, _2378, _2379));
        float _4416 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2392 = _2369 * _2369;
        float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
        float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
        float _2410 = 1.0 - _2369;
        float _2420 = (0.5 / (((_2146 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2410) + _2369) * _2383))) * _2383;
        float _4427 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2344 = (((((_2403 * _2168) + _871) * cbLight._m0[_2354].x) * _2422) * _2423) + _2280;
        _2346 = (((((_2403 * _2170) + _873) * cbLight._m0[_2354].y) * _2422) * _2423) + _2281;
        _2348 = (((((_2403 * _2171) + _874) * cbLight._m0[_2354].z) * _2422) * _2423) + _2282;
    }
    float _2458;
    float _2460;
    float _2462;
    if (_2072)
    {
        _2458 = _2344;
        _2460 = _2346;
        _2462 = _2348;
    }
    else
    {
        uint _2469 = _1978 + 3u;
        uint _2473 = _1978 + 11u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _712) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _789;
        float _2490 = cbLight._m0[_2469].y + _790;
        float _2491 = cbLight._m0[_2469].z + _791;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_709, _710, _711), vec3(cbLight._m0[_2469].xyz));
        float _4443 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2503 = dot(vec3(_709, _710, _711), vec3(_2496, _2497, _2498));
        float _4454 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4465 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
        float _2529 = 1.0 - _2488;
        float _2539 = (0.5 / (((_2146 * ((_2502 * _2529) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2146 * _2529) + _2488) * _2502))) * _2502;
        float _4476 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2541 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2542 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
        _2458 = (((((_2522 * _2168) + _871) * cbLight._m0[_2473].x) * _2541) * _2542) + _2344;
        _2460 = (((((_2522 * _2170) + _873) * cbLight._m0[_2473].y) * _2541) * _2542) + _2346;
        _2462 = (((((_2522 * _2171) + _874) * cbLight._m0[_2473].z) * _2541) * _2542) + _2348;
    }
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_1976.y == 0u)
    {
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2617;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2617;
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2617;
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.x;
        uint _2644 = uint((float(_2632.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2633))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2633)));
        float _2654 = (log2(_2620 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2655 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        uint _2658 = uint(isnan(14.0) ? _2655 : (isnan(_2655) ? 14.0 : min(_2655, 14.0)));
        uvec4 _2663 = texelFetch(g_lightClusterGridBuffer, int(((_2658 << 2u) + (_2644 << 6u)) >> 2u));
        uint _2664 = _2663.x;
        uint _2665 = _2632.z;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        if (((((1u << ((_2665 >> 4u) & 15u)) + 4294967295u) & _2664) == 0u) || ((_2665 & 240u) == 0u))
        {
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
        }
        else
        {
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            uint _2924 = 0u;
            uint _2933;
            bool _2934;
            for (;;)
            {
                _2933 = texelFetch(g_lightClassification, int((((_2658 << 5u) + (_2644 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                _2934 = _2933 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2934)
                {
                    frontier_phi_66_pred = _2918;
                    frontier_phi_66_pred_1 = _2923;
                    frontier_phi_66_pred_2 = _2922;
                    frontier_phi_66_pred_3 = _2921;
                    frontier_phi_66_pred_4 = _2920;
                    frontier_phi_66_pred_5 = _2919;
                }
                else
                {
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    uint _3069;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2920;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2933;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    for (;;)
                    {
                        uint _3073 = uint(findLSB(_3069)) + (_2924 << 5u);
                        uint _3070 = (_3069 + 4294967295u) & _3069;
                        uint _3075 = _3073 * 48u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3095 = (_3073 * 48u) + 4u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3114 = (_3073 * 48u) + 8u;
                        vec3 _3125 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x));
                        float _3129 = _3089.x - _2618;
                        float _3130 = _3089.y - _2619;
                        float _3131 = _3089.z - _2620;
                        float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                        float _3135 = inversesqrt(_3132);
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3139 = dot(vec3(_828, _831, _834), vec3(_3136, _3137, _3138));
                        float _3144 = 1.0 - (_3132 * _3089.w);
                        float _4502 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3146 = sqrt(_3132) * _3108.w;
                        float _3149 = 1.39999997615814208984375 / (_3146 + 1.39999997615814208984375);
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3139) + _3150;
                        float _3156 = _3146 * _3146;
                        float _3160 = ((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3145) / ((_3156 * 0.699999988079071044921875) + 1.0);
                        float _3164 = (-0.0) - _2618;
                        float _3165 = (-0.0) - _2619;
                        float _3166 = (-0.0) - _2620;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3181 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                        float _3182 = 1.0 - _903;
                        float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                        float _3190 = _3189 * _3189;
                        float _3191 = _3190 * _3190;
                        float _3192 = _3171 + _3136;
                        float _3193 = _3172 + _3137;
                        float _3194 = _3173 + _3138;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3202 = dot(vec3(_828, _831, _834), vec3(_3171, _3172, _3173));
                        float _4518 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3206 = dot(vec3(_828, _831, _834), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                        float _4529 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                        float _3214 = _3149 * _3190;
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3139) + _3215;
                        float _4540 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3220 = 1.0 - _3190;
                        float _3230 = (0.5 / (((_3219 * ((_3205 * _3220) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3219 * _3220) + _3190) * _3205))) * _3219;
                        float _4551 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3241 = (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) / ((_3213 * _3213) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125))) * _3145;
                        _2993 = (_3160 * _3108.x) + _3066;
                        _2994 = (_3160 * _3108.y) + _3067;
                        _2995 = (_3160 * _3108.z) + _3068;
                        _2990 = (_3241 * _3125.x) + _3063;
                        _2991 = (_3241 * _3125.y) + _3064;
                        _2992 = (_3241 * _3125.z) + _3065;
                        if (_3070 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _2992;
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _3070;
                        }
                    }
                    frontier_phi_66_pred = _2990;
                    frontier_phi_66_pred_1 = _2995;
                    frontier_phi_66_pred_2 = _2994;
                    frontier_phi_66_pred_3 = _2993;
                    frontier_phi_66_pred_4 = _2992;
                    frontier_phi_66_pred_5 = _2991;
                }
                _2766 = frontier_phi_66_pred;
                _2776 = frontier_phi_66_pred_1;
                _2774 = frontier_phi_66_pred_2;
                _2772 = frontier_phi_66_pred_3;
                _2770 = frontier_phi_66_pred_4;
                _2768 = frontier_phi_66_pred_5;
                uint _2925 = _2924 + 1u;
                if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2918 = _2766;
                    _2919 = _2768;
                    _2920 = _2770;
                    _2921 = _2772;
                    _2922 = _2774;
                    _2923 = _2776;
                    _2924 = _2925;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
        }
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.z;
        uint _2782 = (_2780 >> 8u) & 15u;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        float _2896;
        if (((4294967295u << _2782) & _2664) == 0u)
        {
            _2886 = _2765;
            _2888 = _2767;
            _2890 = _2769;
            _2892 = _2771;
            _2894 = _2773;
            _2896 = _2775;
        }
        else
        {
            float _2911 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
            float _2912 = _2911 * _2618;
            float _2913 = _2911 * _2619;
            float _2914 = _2911 * _2620;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2782 < ((_2780 >> 12u) & 15u))
            {
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _2895;
                float _2897;
                float _3046 = _2765;
                float _3047 = _2767;
                float _3048 = _2769;
                float _3049 = _2771;
                float _3050 = _2773;
                float _3051 = _2775;
                uint _3052 = _2782;
                uint _3061;
                bool _3062;
                for (;;)
                {
                    _3061 = texelFetch(g_lightClassification, int((((_2658 << 5u) + (_2644 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                    _3062 = _3061 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3062)
                    {
                        frontier_phi_77_pred = _3051;
                        frontier_phi_77_pred_1 = _3050;
                        frontier_phi_77_pred_2 = _3049;
                        frontier_phi_77_pred_3 = _3048;
                        frontier_phi_77_pred_4 = _3047;
                        frontier_phi_77_pred_5 = _3046;
                    }
                    else
                    {
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3268 = _3046;
                        float _3269 = _3047;
                        float _3270 = _3048;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        uint _3274 = _3061;
                        uint _3275;
                        vec4 _3300;
                        float _3301;
                        vec4 _3316;
                        vec3 _3328;
                        vec4 _3343;
                        vec4 _3358;
                        float _3405;
                        bool _3406;
                        for (;;)
                        {
                            uint _3285 = ((_3052 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3274));
                            _3275 = (_3274 + 4294967295u) & _3274;
                            uint _3287 = _3285 * 40u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            _3301 = _3300.w;
                            uint _3303 = (_3285 * 40u) + 4u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3285 * 40u) + 8u;
                            _3328 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x));
                            uint _3330 = (_3285 * 40u) + 16u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3285 * 40u) + 20u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3361 = (_3285 * 40u) + 24u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3380 = (_3285 * 40u) + 28u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3405 = fma(_2620, _3393.z, fma(_2619, _3393.y, _3393.x * _2618)) + _3393.w;
                            _3406 = !((fma(_2620, _3374.z, fma(_2619, _3374.y, _3374.x * _2618)) + _3374.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3406)
                            {
                                float _3433 = _3300.x - _2618;
                                float _3434 = _3300.y - _2619;
                                float _3435 = _3300.z - _2620;
                                float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                                float _3439 = inversesqrt(_3436);
                                float _3440 = _3439 * _3433;
                                float _3441 = _3439 * _3434;
                                float _3442 = _3439 * _3435;
                                float _3446 = 1.0 - (_3436 / (_3301 * _3301));
                                float _4562 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3451 = sqrt(_3436) * _3316.w;
                                float _3453 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                                float _3454 = _3453 * _3453;
                                float _3457 = ((1.0 - _3454) * dot(vec3(_3440, _3441, _3442), vec3(_828, _831, _834))) + _3454;
                                float _3460 = _3451 * _3451;
                                float _3464 = (fma(_2620, _3343.z, fma(_2619, _3343.y, _3343.x * _2618)) + _3343.w) / _3405;
                                float _3465 = (fma(_2620, _3358.z, fma(_2619, _3358.y, _3358.x * _2618)) + _3358.w) / _3405;
                                float _3469 = 1.0 - dot(vec2(_3464, _3465), vec2(_3464, _3465));
                                float _4578 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3471 = _3470 * (((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3447) / ((_3460 * 0.699999988079071044921875) + 1.0));
                                float _3483 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                                float _3484 = 1.0 - _903;
                                float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                                float _3492 = _3491 * _3491;
                                float _3493 = _3492 * _3492;
                                float _3494 = _3440 - _2912;
                                float _3495 = _3441 - _2913;
                                float _3496 = _3442 - _2914;
                                float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                                float _3504 = dot(vec3(_828, _831, _834), vec3((-0.0) - _2912, (-0.0) - _2913, (-0.0) - _2914));
                                float _4589 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3508 = dot(vec3(_828, _831, _834), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                                float _4600 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                                float _3516 = _3453 * _3492;
                                float _3517 = _3516 * _3516;
                                float _3523 = ((1.0 - _3517) * dot(vec3(_828, _831, _834), vec3(_3440, _3441, _3442))) + _3517;
                                float _4611 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3525 = 1.0 - _3492;
                                float _3535 = (0.5 / (((_3524 * ((_3507 * _3525) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3524 * _3525) + _3492) * _3507))) * _3524;
                                float _4622 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3545 = (_3470 * _3447) * (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) / ((_3515 * _3515) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3471 * _3316.y;
                                frontier_phi_83_pred_1 = _3471 * _3316.x;
                                frontier_phi_83_pred_2 = _3545 * _3328.z;
                                frontier_phi_83_pred_3 = _3545 * _3328.y;
                                frontier_phi_83_pred_4 = _3545 * _3328.x;
                                frontier_phi_83_pred_5 = _3471 * _3316.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3553 = frontier_phi_83_pred;
                            _3552 = frontier_phi_83_pred_1;
                            _3551 = frontier_phi_83_pred_2;
                            _3550 = frontier_phi_83_pred_3;
                            _3549 = frontier_phi_83_pred_4;
                            _3554 = frontier_phi_83_pred_5;
                            _3258 = _3552 + _3271;
                            _3259 = _3553 + _3272;
                            _3260 = _3554 + _3273;
                            _3255 = _3549 + _3268;
                            _3256 = _3550 + _3269;
                            _3257 = _3551 + _3270;
                            if (_3275 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3275;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3260;
                        frontier_phi_77_pred_1 = _3259;
                        frontier_phi_77_pred_2 = _3258;
                        frontier_phi_77_pred_3 = _3257;
                        frontier_phi_77_pred_4 = _3256;
                        frontier_phi_77_pred_5 = _3255;
                    }
                    _2897 = frontier_phi_77_pred;
                    _2895 = frontier_phi_77_pred_1;
                    _2893 = frontier_phi_77_pred_2;
                    _2891 = frontier_phi_77_pred_3;
                    _2889 = frontier_phi_77_pred_4;
                    _2887 = frontier_phi_77_pred_5;
                    uint _3053 = _3052 + 1u;
                    if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3046 = _2887;
                        _3047 = _2889;
                        _3048 = _2891;
                        _3049 = _2893;
                        _3050 = _2895;
                        _3051 = _2897;
                        _3052 = _3053;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2891;
                frontier_phi_58_59_ladder_1 = _2897;
                frontier_phi_58_59_ladder_2 = _2895;
                frontier_phi_58_59_ladder_3 = _2893;
                frontier_phi_58_59_ladder_4 = _2889;
                frontier_phi_58_59_ladder_5 = _2887;
            }
            else
            {
                frontier_phi_58_59_ladder = _2769;
                frontier_phi_58_59_ladder_1 = _2775;
                frontier_phi_58_59_ladder_2 = _2773;
                frontier_phi_58_59_ladder_3 = _2771;
                frontier_phi_58_59_ladder_4 = _2767;
                frontier_phi_58_59_ladder_5 = _2765;
            }
            _2886 = frontier_phi_58_59_ladder_5;
            _2888 = frontier_phi_58_59_ladder_4;
            _2890 = frontier_phi_58_59_ladder;
            _2892 = frontier_phi_58_59_ladder_3;
            _2894 = frontier_phi_58_59_ladder_2;
            _2896 = frontier_phi_58_59_ladder_1;
        }
        float _2901 = isnan(1.0) ? _887 : (isnan(_887) ? 1.0 : min(_887, 1.0));
        _2677 = (_2901 * _2892) + _2110;
        _2679 = (_2901 * _2894) + _2112;
        _2681 = (_2901 * _2896) + _2114;
        _2683 = ((_2886 * _871) * _2901) + _2458;
        _2685 = ((_2888 * _873) * _2901) + _2460;
        _2687 = ((_2890 * _874) * _2901) + _2462;
    }
    else
    {
        _2677 = _2110;
        _2679 = _2112;
        _2681 = _2114;
        _2683 = _2458;
        _2685 = _2460;
        _2687 = _2462;
    }
    float _4638 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4649 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4660 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2704 = ((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2677 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _887))) + ((_2683 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1726)) * cbPerFrame._m0[3u].x);
    float _2705 = ((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2679 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _887))) + ((_2685 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1726)) * cbPerFrame._m0[3u].x);
    float _2706 = ((isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2681 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _887))) + ((_2687 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1726)) * cbPerFrame._m0[3u].x);
    uint _2707 = _246 + 6u;
    float _2715 = _809 / cbSceneParam._m0[86u].x;
    float _2716 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2730 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2715, _2716, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2732 = _2730.x;
    float _2733 = _2730.y;
    float _2734 = _2730.z;
    float _2735 = _2730.w;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _2790 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _2791 = _2790 / _731;
        float _2802 = _2791 * _782;
        float _2803 = _783 * _2791;
        float _2804 = (-0.0) - _2803;
        float _2806 = _2791 * _784;
        float _2808 = (cbSceneParam._m0[77u].w * _2804) / _2790;
        float _2809 = _2808 + cbSceneParam._m0[79u].w;
        float _2810 = cbSceneParam._m0[79u].w - _2803;
        float _2816 = sqrt(((_2802 * _2802) + (_2803 * _2803)) + (_2806 * _2806));
        float _2819 = (1.0 - (cbSceneParam._m0[77u].w / _2790)) * _2816;
        float _2824 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2826 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3003;
        if (abs((_2804 - _2808) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3003 = ((((_2809 > 0.0) ? exp2(_2824 * _2809) : (2.0 - exp2(_2826 * _2809))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2819;
        }
        else
        {
            float _2947 = 1.0 / cbSceneParam._m0[80u].x;
            float _2948 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : max(_2809, _2810));
            float _2949 = isnan(_2810) ? _2809 : (isnan(_2809) ? _2810 : min(_2809, _2810));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            float _2959 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : min(_2949, 0.0));
            _3003 = ((abs(_2816 / _2804) * cbSceneParam._m0[80u].y) * ((((_2958 - _2959) * 2.0) - ((exp2(_2824 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0)))) - exp2(_2824 * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))))) * _2947)) - ((exp2(_2826 * _2958) - exp2(_2826 * _2959)) * _2947))) + (_2819 * cbSceneParam._m0[80u].z);
        }
        vec4 _3005 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2715, _2716, 1.0), 0.0);
        float _3014 = exp2((_3003 * (-1.44269502162933349609375)) * (1.0 - _3005.w));
        float _3015 = log2(_3014);
        float _3031 = log2(_2735);
        _2828 = (exp2(_3031 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].x)) * _3005.x) / cbSceneParam._m0[78u].x)) + _2732;
        _2830 = (exp2(_3031 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].y)) * _3005.y) / cbSceneParam._m0[78u].y)) + _2733;
        _2832 = (exp2(_3031 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].z)) * _3005.z) / cbSceneParam._m0[78u].z)) + _2734;
        _2834 = _3014 * _2735;
    }
    else
    {
        _2828 = _2732;
        _2830 = _2733;
        _2832 = _2734;
        _2834 = _2735;
    }
    bool _3041;
    vec4 _2844;
    vec4 _2866;
    float _2868;
    float _2872;
    float _2873;
    float _2874;
    float _2875;
    bool _2885;
    for (;;)
    {
        _2844 = cbMatDynParam._m0[0u];
        float _2846 = roundEven(_2844.y);
        bool _2847 = _2846 == 3.0;
        float _2848 = log2(_2834);
        float _2855 = exp2(_2848 * cbSceneParam._m0[78u].x) * _2704;
        float _2856 = exp2(_2848 * cbSceneParam._m0[78u].y) * _2705;
        float _2857 = exp2(_2848 * cbSceneParam._m0[78u].z) * _2706;
        float _2864 = _798 + (-0.5);
        _2866 = cbMtdParam._m0[1u];
        _2868 = _2866.y * _2864;
        float _2871 = (_2846 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2872 = _2871 * (_2847 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2828)));
        _2873 = _2871 * (_2847 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2830)));
        _2874 = _2871 * (_2847 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2832)));
        _2875 = _2864 * 0.999000012874603271484375;
        _2885 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2885)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _2875) < 0.5)
            {
                _3041 = true;
                break;
            }
        }
        uint _2982 = _847 + uint(_2844.w);
        if ((cbInstanceData._m0[_2982].w < 1.0) && ((cbInstanceData._m0[_2982].w + _2875) < 0.5))
        {
            _3041 = true;
            break;
        }
        if ((_2868 + 1.0) < _2866.x)
        {
            _3041 = true;
            break;
        }
        _3041 = false;
        break;
    }
    float _3246;
    if (_3041)
    {
        discard_state = true;
        _3246 = 0.0;
    }
    else
    {
        _3246 = cbInstanceData._m0[_2707].w;
    }
    SV_Target.x = _2872;
    SV_Target.y = _2873;
    SV_Target.z = _2874;
    SV_Target.w = _3246;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2707].w;
    discard_exit();
}


