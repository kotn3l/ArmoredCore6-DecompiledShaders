#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1589;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3913 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _455 = (_448 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _456 = (_448 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _457 = (_448 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3924 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _568 = _566.x;
    float _578 = dot(vec4(_568, _566.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _590 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _377.z) * 2.0) - ((((_568 - _578) * cbMtdParam._m0[23u].w) + _578) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3935 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _604 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_591 * ((_549.x * cbMtdParam._m0[14u].x) - _528)) + _528);
    float _607 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_591 * ((_549.y * cbMtdParam._m0[14u].y) - _529)) + _529);
    float _610 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_591 * ((_549.z * cbMtdParam._m0[14u].z) - _530)) + _530);
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _647 = _645.x;
    float _648 = _645.y;
    float _649 = _645.z;
    float _656 = ((_628.x - _647) * _448) + _647;
    float _657 = ((_628.y - _648) * _448) + _648;
    float _658 = ((_628.z - _649) * _448) + _649;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _681 = ((_670.x - _656) * _521) + _656;
    float _682 = ((_670.y - _657) * _521) + _657;
    float _683 = ((_670.z - _658) * _521) + _658;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _708 = ((_695.z - _683) * _591) + _683;
    float _711 = ((((_695.x - _681) * _591) + _681) * 2.0) + (-1.0);
    float _713 = ((((_695.y - _682) * _591) + _682) * 2.0) + (-1.0);
    float _714 = dot(vec2(_711, _713), vec2(_711, _713));
    float _3946 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _719 = sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))));
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _760 = _758.x;
    float _761 = 1.0 - _760;
    float _769 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _772 = ((isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : min(_769, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _781 = (_772 - ((((((_760 - _761) * cbMtdParam._m0[24u].z) + _761) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _772))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3967 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _782 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _789 = (_782 * (cbMtdParam._m0[17u].x - _604)) + _604;
    float _790 = (_782 * (cbMtdParam._m0[17u].y - _607)) + _607;
    float _791 = (_782 * (cbMtdParam._m0[17u].z - _610)) + _610;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _805 = _803.x;
    float _806 = 1.0 - _805;
    float _831 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_805 - _806) * cbMtdParam._m0[24u].w) + _806) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3978 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _832 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _840 = ((((cbMtdParam._m0[10u].x - _789) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _832) + _789;
    float _841 = ((((cbMtdParam._m0[10u].y - _790) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _832) + _790;
    float _842 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _791)) * _832) + _791;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _870 = _868.x;
    float _887 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _870) * _448) + _870;
    float _904 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _887) * _521) + _887;
    float _921 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _904) * _591) + _904;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _921) * cbMtdParam._m0[19u].z) + _921;
    float _927 = _925 - (_925 * _782);
    float _929 = _927 - (_927 * _832);
    float _933 = (cbMtdParam._m0[19u].w * (_733.z - _708)) + _708;
    vec4 _947 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _954 = (_947.x * 2.0) + (-1.0);
    float _955 = (_947.y * 2.0) + (-1.0);
    float _956 = dot(vec2(_954, _955), vec2(_954, _955));
    float _3989 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _964 = (_782 * (_947.z - _933)) + _933;
    float _967 = ((cbMtdParam._m0[23u].x - _964) * _832) + _964;
    vec4 _990 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _996 = (_990.x * 2.0) + (-1.0);
    float _997 = (_990.y * 2.0) + (-1.0);
    float _998 = dot(vec2(_996, _997), vec2(_996, _997));
    float _4000 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1006 = (((_733.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _711;
    float _1007 = (((_733.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _713;
    float _1019 = (((_954 - _1006) + (cbMtdParam._m0[21u].x * _1006)) * _782) + _1006;
    float _1020 = (((_955 - _1007) + (cbMtdParam._m0[21u].x * _1007)) * _782) + _1007;
    float _1021 = (_782 * (sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) - _719)) + _719;
    float _1032 = (((_996 - _1019) + (_1019 * cbMtdParam._m0[22u].z)) * _832) + _1019;
    float _1033 = (((_997 - _1020) + (_1020 * cbMtdParam._m0[22u].z)) * _832) + _1020;
    float _1034 = ((sqrt(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) - _1021) * _832) + _1021;
    float _1036 = cbMtdParam._m0[22u].x + _733.w;
    float _1039 = fma(_1034, _256 * NORMAL.x, fma(_1033, _263 * TANGENT.x, (_249 * _241) * _1032));
    float _1042 = fma(_1034, _256 * NORMAL.y, fma(_1033, _263 * TANGENT.y, (_249 * _242) * _1032));
    float _1045 = fma(_1034, _256 * NORMAL.z, fma(_1033, _263 * TANGENT.z, (_249 * _243) * _1032));
    float _1049 = inversesqrt(dot(vec3(_1039, _1042, _1045), vec3(_1039, _1042, _1045)));
    float _1050 = _1049 * _1039;
    float _1051 = _1049 * _1042;
    float _1052 = _1049 * _1045;
    float _4011 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _1053 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _4033 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4044 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4055 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4066 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _1058 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1072 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1122 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1112);
    float _1123 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1112);
    float _1124 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1112);
    float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
    float _1129 = _1122 * _1128;
    float _1130 = _1123 * _1128;
    float _1131 = _1124 * _1128;
    float _1137 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1138 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1156 = fma(_1052, cbSceneParam._m0[5u].z, fma(_1051, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1050));
    float _1159 = fma(_1052, cbSceneParam._m0[6u].z, fma(_1051, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1050));
    float _1162 = fma(_1052, cbSceneParam._m0[7u].z, fma(_1051, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1050));
    uint _1176 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1182 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_1176].x;
    float _1183 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_1176].y;
    float _1184 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_1176].z;
    float _4077 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1188 = 1.0 - _1058;
    float _1189 = _1185 * _1188;
    float _1190 = _1186 * _1188;
    float _1191 = _1187 * _1188;
    float _1196 = (_1185 + (-0.039999999105930328369140625)) * _1058;
    float _1197 = (_1186 + (-0.039999999105930328369140625)) * _1058;
    float _1198 = (_1187 + (-0.039999999105930328369140625)) * _1058;
    float _1199 = _1196 + 0.039999999105930328369140625;
    float _1201 = _1197 + 0.039999999105930328369140625;
    float _1202 = _1198 + 0.039999999105930328369140625;
    vec4 _1211 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1137, cbSceneParam._m0[86u].y * _1138));
    float _1215 = ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * TEXCOORD_5.w) * _1211.x;
    float _1216 = dot(vec3(_1050, _1051, _1052), vec3(_1129, _1130, _1131));
    float _1219 = _1216 * 2.0;
    float _1223 = (_1219 * _1050) - _1129;
    float _1224 = (_1219 * _1051) - _1130;
    float _1225 = (_1219 * _1052) - _1131;
    float _1229 = abs(dot(vec3(_1129, _1130, _1131), vec3(_1050, _1051, _1052)));
    float _4110 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1231 = sqrt(_1053);
    float _1244 = exp2((_1231 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1231 * 3.0));
    float _1250 = (1.0 - _1244) * ((_1231 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1251 = _1244 * _1231;
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1588;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1313 = fma(_1287, cbModelParam._m0[26u].z, fma(_1283, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1279));
        float _1317 = fma(_1287, cbModelParam._m0[27u].z, fma(_1283, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1279));
        float _1321 = fma(_1287, cbModelParam._m0[28u].z, fma(_1283, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1279));
        float _1346 = _1279 + _1050;
        float _1347 = _1283 + _1051;
        float _1348 = _1287 + _1052;
        float _1358 = fma(_1348, cbModelParam._m0[26u].z, fma(_1347, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1346)) - _1313;
        float _1359 = fma(_1348, cbModelParam._m0[27u].z, fma(_1347, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1346)) - _1317;
        float _1360 = fma(_1348, cbModelParam._m0[28u].z, fma(_1347, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1346)) - _1321;
        float _1364 = inversesqrt(dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360)));
        float _1377 = ((_1364 * _1358) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1313 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1378 = ((_1364 * _1359) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1317 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1364 * _1360) / cbModelParam._m0[34u].z) + ((((((_1321 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1377, _1378, _1379), 0.0);
        float _1416 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1382.x + (-0.5));
        float _1418 = _1416 * (_1382.y + (-0.5));
        float _1419 = _1416 * (_1382.z + (-0.5));
        float _1426 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1389.x + (-0.5));
        float _1428 = _1426 * (_1389.y + (-0.5));
        float _1429 = _1426 * (_1389.z + (-0.5));
        float _1436 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1396.x + (-0.5));
        float _1438 = _1436 * (_1396.y + (-0.5));
        float _1439 = _1436 * (_1396.z + (-0.5));
        float _1446 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1403.x + (-0.5));
        float _1448 = _1446 * (_1403.y + (-0.5));
        float _1449 = _1446 * (_1403.z + (-0.5));
        float _1450 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = _1417 * 0.5;
        float _1454 = _1427 * 0.5;
        float _1455 = _1437 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1470 = (dot(vec3(_1050, _1051, _1052), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1480 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1450 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4158 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1482 + 1.0))) + _1487) * _1450;
        float _1497 = _1418 * 0.5;
        float _1498 = _1428 * 0.5;
        float _1499 = _1438 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_1050, _1051, _1052), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4191 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1524 + 1.0))) + _1529) * _1451;
        float _1539 = _1419 * 0.5;
        float _1540 = _1429 * 0.5;
        float _1541 = _1439 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_1050, _1051, _1052), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4224 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1566 + 1.0))) + _1571) * _1452;
        _1588 = _1419;
        _1590 = _1418;
        _1591 = _1417;
        _1592 = _1429;
        _1593 = _1428;
        _1594 = _1427;
        _1595 = _1439;
        _1596 = _1438;
        _1597 = _1437;
        _1598 = _1452;
        _1599 = _1451;
        _1600 = _1450;
        _1601 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1602 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1603 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    }
    else
    {
        _1588 = _1589;
        _1590 = _1589;
        _1591 = _1589;
        _1592 = _1589;
        _1593 = _1589;
        _1594 = _1589;
        _1595 = _1589;
        _1596 = _1589;
        _1597 = _1589;
        _1598 = _1589;
        _1599 = _1589;
        _1600 = _1589;
        _1601 = 0.0;
        _1602 = 0.0;
        _1603 = 0.0;
    }
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1626 = fma(_1287, cbModelParam._m0[30u].z, fma(_1283, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279));
        float _1630 = fma(_1287, cbModelParam._m0[31u].z, fma(_1283, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279));
        float _1634 = fma(_1287, cbModelParam._m0[32u].z, fma(_1283, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279));
        float _1657 = _1279 + _1050;
        float _1658 = _1283 + _1051;
        float _1659 = _1287 + _1052;
        float _1669 = fma(_1659, cbModelParam._m0[30u].z, fma(_1658, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1657)) - _1626;
        float _1670 = fma(_1659, cbModelParam._m0[31u].z, fma(_1658, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1657)) - _1630;
        float _1671 = fma(_1659, cbModelParam._m0[32u].z, fma(_1658, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1657)) - _1634;
        float _1675 = inversesqrt(dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671)));
        float _1688 = ((_1675 * _1669) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1626 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1689 = ((_1675 * _1670) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1630 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1690 = ((_1675 * _1671) / cbModelParam._m0[35u].z) + ((((((_1634 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1688, _1689, _1690), 0.0);
        float _1725 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1692.x + (-0.5));
        float _1727 = _1725 * (_1692.y + (-0.5));
        float _1728 = _1725 * (_1692.z + (-0.5));
        float _1735 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1699.x + (-0.5));
        float _1737 = _1735 * (_1699.y + (-0.5));
        float _1738 = _1735 * (_1699.z + (-0.5));
        float _1745 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1706.x + (-0.5));
        float _1747 = _1745 * (_1706.y + (-0.5));
        float _1748 = _1745 * (_1706.z + (-0.5));
        float _1755 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = _1755 * (_1713.x + (-0.5));
        float _1757 = _1755 * (_1713.y + (-0.5));
        float _1758 = _1755 * (_1713.z + (-0.5));
        float _1759 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1760 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1761 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1762 = _1726 * 0.5;
        float _1763 = _1736 * 0.5;
        float _1764 = _1746 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_1050, _1051, _1052), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1759 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4287 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1789 + 1.0))) + _1794) * _1759;
        float _1804 = _1727 * 0.5;
        float _1805 = _1737 * 0.5;
        float _1806 = _1747 * 0.5;
        float _1807 = dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806));
        float _1812 = (_1807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1807);
        float _1820 = (dot(vec3(_1050, _1051, _1052), vec3(_1812 * _1804, _1812 * _1805, _1812 * _1806)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806)) / (_1760 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1831 = _1830 * 2.0;
        float _1835 = (1.0 - _1830) / (_1830 + 1.0);
        float _4320 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1845 = ((((1.0 - _1836) * (_1831 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1831 + 1.0))) + _1836) * _1760;
        float _1846 = _1728 * 0.5;
        float _1847 = _1738 * 0.5;
        float _1848 = _1748 * 0.5;
        float _1849 = dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848));
        float _1854 = (_1849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1849);
        float _1862 = (dot(vec3(_1050, _1051, _1052), vec3(_1854 * _1846, _1854 * _1847, _1854 * _1848)) + 1.0) * 0.5;
        float _4331 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1871 = sqrt(((_1847 * _1847) + (_1846 * _1846)) + (_1848 * _1848)) / (_1761 + 9.9999997473787516355514526367188e-06);
        float _4342 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1873 = _1872 * 2.0;
        float _1877 = (1.0 - _1872) / (_1872 + 1.0);
        float _4353 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1878 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1887 = ((((1.0 - _1878) * (_1873 + 2.0)) * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_1873 + 1.0))) + _1878) * _1761;
        _1895 = _1728;
        _1896 = _1727;
        _1897 = _1726;
        _1898 = _1738;
        _1899 = _1737;
        _1900 = _1736;
        _1901 = _1748;
        _1902 = _1747;
        _1903 = _1746;
        _1904 = _1761;
        _1905 = _1760;
        _1906 = _1759;
        _1907 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
        _1908 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
        _1909 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)));
    }
    else
    {
        _1895 = _1589;
        _1896 = _1589;
        _1897 = _1589;
        _1898 = _1589;
        _1899 = _1589;
        _1900 = _1589;
        _1901 = _1589;
        _1902 = _1589;
        _1903 = _1589;
        _1904 = _1589;
        _1905 = _1589;
        _1906 = _1589;
        _1907 = 0.0;
        _1908 = 0.0;
        _1909 = 0.0;
    }
    float _1919 = (cbModelParam._m0[1u].x * (_1907 - _1601)) + _1601;
    float _1920 = (cbModelParam._m0[1u].x * (_1908 - _1602)) + _1602;
    float _1921 = (cbModelParam._m0[1u].x * (_1909 - _1603)) + _1603;
    float _1942 = fma(_1921, cbSceneParam._m0[89u].z, fma(_1920, cbSceneParam._m0[89u].y, _1919 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1921, cbSceneParam._m0[90u].z, fma(_1920, cbSceneParam._m0[90u].y, _1919 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1921, cbSceneParam._m0[91u].z, fma(_1920, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1919));
    float _1963 = _1223 * 0.5;
    float _1964 = _1224 * 0.5;
    float _1965 = _1225 * 0.5;
    float _1966 = dot(vec4(_1963, _1964, _1965, 1.0), vec4(_1897, _1900, _1903, _1906));
    float _1969 = dot(vec4(_1963, _1964, _1965, 1.0), vec4(_1896, _1899, _1902, _1905));
    float _1972 = dot(vec4(_1963, _1964, _1965, 1.0), vec4(_1895, _1898, _1901, _1904));
    float _2006;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1979 = dot(vec4(_1963, _1964, _1965, 1.0), vec4(_1588, _1592, _1595, _1598));
        float _1983 = dot(vec4(_1963, _1964, _1965, 1.0), vec4(_1590, _1593, _1596, _1599));
        float _1987 = dot(vec4(_1963, _1964, _1965, 1.0), vec4(_1591, _1594, _1597, _1600));
        float _1994 = dot(vec4(cbModelParam._m0[39u]), vec4(_1963, _1964, _1965, 1.0));
        _2006 = dot(vec3(isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1994) ? 0.0 : (isnan(0.0) ? _1994 : max(0.0, _1994))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2006 = 1.0;
    }
    float _2017;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2008 = dot(vec4(cbModelParam._m0[40u]), vec4(_1963, _1964, _1965, 1.0));
        _2017 = dot(vec3(isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2008) ? 0.0 : (isnan(0.0) ? _2008 : max(0.0, _2008))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2017 = 1.0;
    }
    float _2021 = (_2017 * cbModelParam._m0[1u].x) + (_2006 * (1.0 - cbModelParam._m0[1u].x));
    float _2031 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1053);
    float _2032 = isnan(_2031) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2031 : min(cbModelParam._m0[25u].z, _2031));
    float _2112;
    float _2114;
    float _2116;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2079 = fma(_1287, cbModelParam._m0[13u].z, fma(_1283, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1279)) + cbModelParam._m0[13u].w;
        float _2083 = fma(_1287, cbModelParam._m0[14u].z, fma(_1283, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1279)) + cbModelParam._m0[14u].w;
        float _2087 = fma(_1287, cbModelParam._m0[15u].z, fma(_1283, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1279)) + cbModelParam._m0[15u].w;
        float _2090 = fma(_1225, cbModelParam._m0[13u].z, fma(_1224, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1223));
        float _2093 = fma(_1225, cbModelParam._m0[14u].z, fma(_1224, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1223));
        float _2096 = fma(_1225, cbModelParam._m0[15u].z, fma(_1224, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1223));
        float _2124;
        if (_2090 > 0.0)
        {
            _2124 = abs((1.0 - _2079) / _2090);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2079 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2124 = frontier_phi_14_12_ladder;
        }
        float _2327;
        if (_2093 > 0.0)
        {
            _2327 = abs((1.0 - _2083) / _2093);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2083 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2327 = frontier_phi_23_19_ladder;
        }
        float _2581;
        if (_2096 > 0.0)
        {
            _2581 = abs((1.0 - _2087) / _2096);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2087 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2581 = frontier_phi_35_30_ladder;
        }
        float _2583 = isnan(_2327) ? _2124 : (isnan(_2124) ? _2327 : min(_2124, _2327));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _2090) + _2079;
        float _2589 = (_2584 * _2093) + _2083;
        float _2590 = (_2584 * _2096) + _2087;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2591;
        float _2595 = _2591 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 > _2595) || ((_2589 < _2593) || ((_2588 < _2593) || (_2588 > _2595))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2590, cbModelParam._m0[9u].z, fma(_2589, cbModelParam._m0[9u].y, _2588 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2590, cbModelParam._m0[10u].z, fma(_2589, cbModelParam._m0[10u].y, _2588 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2590, cbModelParam._m0[11u].z, fma(_2589, cbModelParam._m0[11u].y, _2588 * cbModelParam._m0[11u].x))), _2032);
            frontier_phi_13_35_ladder = _2718.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2718.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2718.x * cbModelParam._m0[1u].y;
        }
        _2112 = frontier_phi_13_35_ladder_2;
        _2114 = frontier_phi_13_35_ladder_1;
        _2116 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2100 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1223, _1224, _1225), _2032);
        _2112 = _2100.x * cbModelParam._m0[1u].y;
        _2114 = _2100.y * cbModelParam._m0[1u].y;
        _2116 = _2100.z * cbModelParam._m0[1u].y;
    }
    float _2120 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1053);
    float _2121 = isnan(_2120) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2120 : min(cbModelParam._m0[25u].w, _2120));
    float _2211;
    float _2213;
    float _2215;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2175 = fma(_1287, cbModelParam._m0[21u].z, fma(_1283, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1279)) + cbModelParam._m0[21u].w;
        float _2179 = fma(_1287, cbModelParam._m0[22u].z, fma(_1283, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1279)) + cbModelParam._m0[22u].w;
        float _2183 = fma(_1287, cbModelParam._m0[23u].z, fma(_1283, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1279)) + cbModelParam._m0[23u].w;
        float _2186 = fma(_1225, cbModelParam._m0[21u].z, fma(_1224, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1223));
        float _2189 = fma(_1225, cbModelParam._m0[22u].z, fma(_1224, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1223));
        float _2192 = fma(_1225, cbModelParam._m0[23u].z, fma(_1224, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1223));
        float _2332;
        if (_2186 > 0.0)
        {
            _2332 = abs((1.0 - _2175) / _2186);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2186 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2175 + 1.0) / _2186);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2332 = frontier_phi_25_21_ladder;
        }
        float _2608;
        if (_2189 > 0.0)
        {
            _2608 = abs((1.0 - _2179) / _2189);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2189 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2179 + 1.0) / _2189);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2608 = frontier_phi_37_32_ladder;
        }
        float _2821;
        if (_2192 > 0.0)
        {
            _2821 = abs((1.0 - _2183) / _2192);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2192 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2183 + 1.0) / _2192);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2821 = frontier_phi_46_43_ladder;
        }
        float _2823 = isnan(_2608) ? _2332 : (isnan(_2332) ? _2608 : min(_2332, _2608));
        float _2824 = isnan(_2821) ? _2823 : (isnan(_2823) ? _2821 : min(_2823, _2821));
        float _2828 = (_2824 * _2186) + _2175;
        float _2829 = (_2824 * _2189) + _2179;
        float _2830 = (_2824 * _2192) + _2183;
        float _2831 = _2824 * 9.9999997473787516355514526367188e-05;
        float _2832 = (-1.0) - _2831;
        float _2834 = _2831 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2830 > _2834) || ((_2830 < _2832) || ((_2829 > _2834) || ((_2829 < _2832) || ((_2828 < _2832) || (_2828 > _2834))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3029 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2830, cbModelParam._m0[17u].z, fma(_2829, cbModelParam._m0[17u].y, _2828 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2830, cbModelParam._m0[18u].z, fma(_2829, cbModelParam._m0[18u].y, _2828 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2830, cbModelParam._m0[19u].z, fma(_2829, cbModelParam._m0[19u].y, _2828 * cbModelParam._m0[19u].x))), _2121);
            frontier_phi_22_46_ladder = _3029.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3029.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3029.x * cbModelParam._m0[1u].z;
        }
        _2211 = frontier_phi_22_46_ladder_2;
        _2213 = frontier_phi_22_46_ladder_1;
        _2215 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2195 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1223, _1224, _1225), _2121);
        _2211 = _2195.x * cbModelParam._m0[1u].z;
        _2213 = _2195.y * cbModelParam._m0[1u].z;
        _2215 = _2195.z * cbModelParam._m0[1u].z;
    }
    float _2228 = (((_1250 * _1199) + _1251) * _1215) * ((cbModelParam._m0[1u].w * (_2211 - _2112)) + _2112);
    float _2230 = (((_1250 * _1201) + _1251) * _1215) * ((cbModelParam._m0[1u].w * (_2213 - _2114)) + _2114);
    float _2232 = (((_1250 * _1202) + _1251) * _1215) * ((cbModelParam._m0[1u].w * (_2215 - _2116)) + _2116);
    float _2235 = fma(_2232, cbSceneParam._m0[89u].z, fma(_2230, cbSceneParam._m0[89u].y, _2228 * cbSceneParam._m0[89u].x));
    float _2238 = fma(_2232, cbSceneParam._m0[90u].z, fma(_2230, cbSceneParam._m0[90u].y, _2228 * cbSceneParam._m0[90u].x));
    float _2241 = fma(_2232, cbSceneParam._m0[91u].z, fma(_2230, cbSceneParam._m0[91u].y, _2228 * cbSceneParam._m0[91u].x));
    uvec4 _2251 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2253 = _2251.x * 14u;
    uint _2254 = _2253 + 13u;
    float _2261 = _1215 + (-1.0);
    float _2266 = (cbLight._m0[_2254].x * _2261) + 1.0;
    float _2267 = (cbLight._m0[_2254].y * _2261) + 1.0;
    float _2268 = (cbLight._m0[_2254].z * _2261) + 1.0;
    float _2269 = (cbLight._m0[_2254].w * _2261) + 1.0;
    uint _2270 = _2253 + 5u;
    float _2276 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2280 = _2253 + 4u;
    float _2286 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2290 = _2253 | 1u;
    float _2301 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_1050, _1051, _1052));
    float _2304 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_1050, _1051, _1052));
    float _4489 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _4500 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2309 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * 0.3183098733425140380859375;
    float _2311 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2318 = ((cbLight._m0[_2270].x * _2276) * _2311) + ((cbLight._m0[_2280].x * _2286) * _2309);
    float _2319 = ((_2276 * cbLight._m0[_2270].y) * _2311) + ((_2286 * cbLight._m0[_2280].y) * _2309);
    float _2320 = ((_2276 * cbLight._m0[_2270].z) * _2311) + ((_2286 * cbLight._m0[_2280].z) * _2309);
    uvec4 _2324 = floatBitsToUint(cbLight._m0[_2253 + 12u]);
    bool _2326 = _2324.x == 0u;
    float _2337;
    float _2339;
    float _2341;
    if (_2326)
    {
        _2337 = _2318;
        _2339 = _2319;
        _2341 = _2320;
    }
    else
    {
        uint _2345 = _2253 + 6u;
        float _2361 = (dot(vec3(cbLight._m0[_2253 + 2u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2362 = _2361 * _2361;
        float _4511 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2363 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2364 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2337 = (((cbLight._m0[_2345].x * 0.3183098733425140380859375) * _2363) * _2364) + _2318;
        _2339 = (((cbLight._m0[_2345].y * 0.3183098733425140380859375) * _2363) * _2364) + _2319;
        _2341 = (((cbLight._m0[_2345].z * 0.3183098733425140380859375) * _2363) * _2364) + _2320;
    }
    bool _2344 = _2324.y == 0u;
    float _2382;
    float _2384;
    float _2386;
    if (_2344)
    {
        _2382 = _2337;
        _2384 = _2339;
        _2386 = _2341;
    }
    else
    {
        uint _2552 = _2253 + 7u;
        float _2568 = (dot(vec3(cbLight._m0[_2253 + 3u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2569 = _2568 * _2568;
        float _4527 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2570 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2571 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2382 = (((cbLight._m0[_2552].x * 0.3183098733425140380859375) * _2570) * _2571) + _2337;
        _2384 = (((cbLight._m0[_2552].y * 0.3183098733425140380859375) * _2570) * _2571) + _2339;
        _2386 = (((cbLight._m0[_2552].z * 0.3183098733425140380859375) * _2570) * _2571) + _2341;
    }
    uint _2389 = _2253 + 8u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _1053) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2253].x + _1129;
    float _2405 = cbLight._m0[_2253].y + _1130;
    float _2406 = cbLight._m0[_2253].z + _1131;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2253].xyz));
    float _4543 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _4554 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _2418 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _2419 = dot(vec3(_1050, _1051, _1052), vec3(_2411, _2412, _2413));
    float _4565 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2423 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2411, _2412, _2413));
    float _4576 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2427 = _2403 * _2403;
    float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
    float _2439 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
    float _2440 = 0.959999978542327880859375 - _1196;
    float _2442 = 0.959999978542327880859375 - _1197;
    float _2443 = 0.959999978542327880859375 - _1198;
    float _2450 = 1.0 - _2403;
    float _2461 = (0.5 / (((_2418 * ((_2417 * _2450) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2450) + _2403) * _2417))) * _2417;
    float _4587 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
    uint _2474 = _2253 + 9u;
    float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2290].w)) * _1053) * 0.949999988079071044921875);
    float _2486 = _2485 * _2485;
    float _2487 = cbLight._m0[_2290].x + _1129;
    float _2488 = cbLight._m0[_2290].y + _1130;
    float _2489 = cbLight._m0[_2290].z + _1131;
    float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
    float _2494 = _2493 * _2487;
    float _2495 = _2493 * _2488;
    float _2496 = _2493 * _2489;
    float _2497 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2290].xyz));
    float _4598 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2500 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2501 = dot(vec3(_1050, _1051, _1052), vec3(_2494, _2495, _2496));
    float _4609 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2505 = dot(vec3(cbLight._m0[_2290].xyz), vec3(_2494, _2495, _2496));
    float _4620 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2509 = _2486 * _2486;
    float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
    float _2520 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
    float _2527 = 1.0 - _2486;
    float _2537 = (0.5 / (((_2418 * ((_2500 * _2527) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2527) + _2486) * _2500))) * _2500;
    float _4631 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2539 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
    float _2549 = (((((_2520 * _2440) + _1199) * cbLight._m0[_2474].x) * _2539) * _2276) + (((((_2439 * _2440) + _1199) * cbLight._m0[_2389].x) * _2463) * _2286);
    float _2550 = (((((_2520 * _2442) + _1201) * cbLight._m0[_2474].y) * _2539) * _2276) + (((((_2439 * _2442) + _1201) * cbLight._m0[_2389].y) * _2463) * _2286);
    float _2551 = (((((_2520 * _2443) + _1202) * cbLight._m0[_2474].z) * _2539) * _2276) + (((((_2439 * _2443) + _1202) * cbLight._m0[_2389].z) * _2463) * _2286);
    float _2613;
    float _2615;
    float _2617;
    if (_2326)
    {
        _2613 = _2549;
        _2615 = _2550;
        _2617 = _2551;
    }
    else
    {
        uint _2619 = _2253 + 2u;
        uint _2623 = _2253 + 10u;
        float _2637 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2619].w)) * _1053) * 0.949999988079071044921875);
        float _2638 = _2637 * _2637;
        float _2639 = cbLight._m0[_2619].x + _1129;
        float _2640 = cbLight._m0[_2619].y + _1130;
        float _2641 = cbLight._m0[_2619].z + _1131;
        float _2645 = inversesqrt(dot(vec3(_2639, _2640, _2641), vec3(_2639, _2640, _2641)));
        float _2646 = _2645 * _2639;
        float _2647 = _2645 * _2640;
        float _2648 = _2645 * _2641;
        float _2649 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2619].xyz));
        float _4642 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2652 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2653 = dot(vec3(_1050, _1051, _1052), vec3(_2646, _2647, _2648));
        float _4653 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2657 = dot(vec3(cbLight._m0[_2619].xyz), vec3(_2646, _2647, _2648));
        float _4664 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2661 = _2638 * _2638;
        float _2665 = ((_2656 * _2656) * (_2661 + (-1.0))) + 1.0;
        float _2672 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
        float _2679 = 1.0 - _2638;
        float _2689 = (0.5 / (((_2418 * ((_2652 * _2679) + _2638)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2679) + _2638) * _2652))) * _2652;
        float _4675 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2691 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2661 / ((_2665 * _2665) * 3.141590118408203125));
        float _2692 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2613 = (((((_2672 * _2440) + _1199) * cbLight._m0[_2623].x) * _2691) * _2692) + _2549;
        _2615 = (((((_2672 * _2442) + _1201) * cbLight._m0[_2623].y) * _2691) * _2692) + _2550;
        _2617 = (((((_2672 * _2443) + _1202) * cbLight._m0[_2623].z) * _2691) * _2692) + _2551;
    }
    float _2727;
    float _2729;
    float _2731;
    if (_2344)
    {
        _2727 = _2613;
        _2729 = _2615;
        _2731 = _2617;
    }
    else
    {
        uint _2738 = _2253 + 3u;
        uint _2742 = _2253 + 11u;
        float _2756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2738].w)) * _1053) * 0.949999988079071044921875);
        float _2757 = _2756 * _2756;
        float _2758 = cbLight._m0[_2738].x + _1129;
        float _2759 = cbLight._m0[_2738].y + _1130;
        float _2760 = cbLight._m0[_2738].z + _1131;
        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
        float _2765 = _2764 * _2758;
        float _2766 = _2764 * _2759;
        float _2767 = _2764 * _2760;
        float _2768 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2738].xyz));
        float _4691 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2771 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2772 = dot(vec3(_1050, _1051, _1052), vec3(_2765, _2766, _2767));
        float _4702 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2776 = dot(vec3(cbLight._m0[_2738].xyz), vec3(_2765, _2766, _2767));
        float _4713 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2780 = _2757 * _2757;
        float _2784 = ((_2775 * _2775) * (_2780 + (-1.0))) + 1.0;
        float _2791 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2798 = 1.0 - _2757;
        float _2808 = (0.5 / (((_2418 * ((_2771 * _2798) + _2757)) + 9.9999999392252902907785028219223e-09) + (((_2418 * _2798) + _2757) * _2771))) * _2771;
        float _4724 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2780 / ((_2784 * _2784) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2727 = (((((_2791 * _2440) + _1199) * cbLight._m0[_2742].x) * _2810) * _2811) + _2613;
        _2729 = (((((_2791 * _2442) + _1201) * cbLight._m0[_2742].y) * _2810) * _2811) + _2615;
        _2731 = (((((_2791 * _2443) + _1202) * cbLight._m0[_2742].z) * _2810) * _2811) + _2617;
    }
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    if (_2251.y == 0u)
    {
        float _2886 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2887 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2886;
        float _2888 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2886;
        float _2889 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2886;
        uvec4 _2901 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2902 = _2901.x;
        uint _2913 = uint((float(_2901.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1138) / _2902))) + floor(float(uint(cbSceneParam._m0[85u].x * _1137) / _2902)));
        float _2923 = (log2(_2889 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2924 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        uint _2927 = uint(isnan(14.0) ? _2924 : (isnan(_2924) ? 14.0 : min(_2924, 14.0)));
        uvec4 _2932 = texelFetch(g_lightClusterGridBuffer, int(((_2927 << 2u) + (_2913 << 6u)) >> 2u));
        uint _2933 = _2932.x;
        uint _2934 = _2901.z;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((((1u << ((_2934 >> 4u) & 15u)) + 4294967295u) & _2933) == 0u) || ((_2934 & 240u) == 0u))
        {
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
        }
        else
        {
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3045;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            uint _3185 = 0u;
            uint _3194;
            bool _3195;
            for (;;)
            {
                _3194 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                _3195 = _3194 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3195)
                {
                    frontier_phi_61_pred = _3179;
                    frontier_phi_61_pred_1 = _3184;
                    frontier_phi_61_pred_2 = _3183;
                    frontier_phi_61_pred_3 = _3182;
                    frontier_phi_61_pred_4 = _3181;
                    frontier_phi_61_pred_5 = _3180;
                }
                else
                {
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    uint _3309;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3194;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    for (;;)
                    {
                        uint _3313 = uint(findLSB(_3309)) + (_3185 << 5u);
                        uint _3310 = (_3309 + 4294967295u) & _3309;
                        uint _3315 = _3313 * 48u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3335 = (_3313 * 48u) + 4u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3354 = (_3313 * 48u) + 8u;
                        vec3 _3365 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x));
                        float _3369 = _3329.x - _2887;
                        float _3370 = _3329.y - _2888;
                        float _3371 = _3329.z - _2889;
                        float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                        float _3375 = inversesqrt(_3372);
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3379 = dot(vec3(_1156, _1159, _1162), vec3(_3376, _3377, _3378));
                        float _3384 = 1.0 - (_3372 * _3329.w);
                        float _4750 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3386 = sqrt(_3372) * _3348.w;
                        float _3389 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3379) + _3390;
                        float _3396 = _3386 * _3386;
                        float _3400 = ((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3385) / ((_3396 * 0.699999988079071044921875) + 1.0);
                        float _3404 = (-0.0) - _2887;
                        float _3405 = (-0.0) - _2888;
                        float _3406 = (-0.0) - _2889;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3421 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                        float _3422 = 1.0 - _1231;
                        float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                        float _3430 = _3429 * _3429;
                        float _3431 = _3430 * _3430;
                        float _3432 = _3411 + _3376;
                        float _3433 = _3412 + _3377;
                        float _3434 = _3413 + _3378;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3442 = dot(vec3(_1156, _1159, _1162), vec3(_3411, _3412, _3413));
                        float _4766 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3446 = dot(vec3(_1156, _1159, _1162), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                        float _4777 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                        float _3454 = _3389 * _3430;
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3379) + _3455;
                        float _4788 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3460 = 1.0 - _3430;
                        float _3470 = (0.5 / (((_3459 * ((_3445 * _3460) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3430) * _3445))) * _3459;
                        float _4799 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3481 = (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0)))) / ((_3453 * _3453) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125))) * _3385;
                        _3238 = (_3400 * _3348.x) + _3306;
                        _3239 = (_3400 * _3348.y) + _3307;
                        _3240 = (_3400 * _3348.z) + _3308;
                        _3235 = (_3481 * _3365.x) + _3303;
                        _3236 = (_3481 * _3365.y) + _3304;
                        _3237 = (_3481 * _3365.z) + _3305;
                        if (_3310 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3310;
                        }
                    }
                    frontier_phi_61_pred = _3235;
                    frontier_phi_61_pred_1 = _3240;
                    frontier_phi_61_pred_2 = _3239;
                    frontier_phi_61_pred_3 = _3238;
                    frontier_phi_61_pred_4 = _3237;
                    frontier_phi_61_pred_5 = _3236;
                }
                _3035 = frontier_phi_61_pred;
                _3045 = frontier_phi_61_pred_1;
                _3043 = frontier_phi_61_pred_2;
                _3041 = frontier_phi_61_pred_3;
                _3039 = frontier_phi_61_pred_4;
                _3037 = frontier_phi_61_pred_5;
                uint _3186 = _3185 + 1u;
                if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3179 = _3035;
                    _3180 = _3037;
                    _3181 = _3039;
                    _3182 = _3041;
                    _3183 = _3043;
                    _3184 = _3045;
                    _3185 = _3186;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
        }
        uvec4 _3048 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3049 = _3048.z;
        uint _3051 = (_3049 >> 8u) & 15u;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((4294967295u << _3051) & _2933) == 0u)
        {
            _3147 = _3034;
            _3149 = _3036;
            _3151 = _3038;
            _3153 = _3040;
            _3155 = _3042;
            _3157 = _3044;
        }
        else
        {
            float _3172 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
            float _3173 = _3172 * _2887;
            float _3174 = _3172 * _2888;
            float _3175 = _3172 * _2889;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3051 < ((_3049 >> 12u) & 15u))
            {
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3286 = _3034;
                float _3287 = _3036;
                float _3288 = _3038;
                float _3289 = _3040;
                float _3290 = _3042;
                float _3291 = _3044;
                uint _3292 = _3051;
                uint _3301;
                bool _3302;
                for (;;)
                {
                    _3301 = texelFetch(g_lightClassification, int((((_2927 << 5u) + (_2913 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                    _3302 = _3301 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3302)
                    {
                        frontier_phi_67_pred = _3289;
                        frontier_phi_67_pred_1 = _3290;
                        frontier_phi_67_pred_2 = _3291;
                        frontier_phi_67_pred_3 = _3288;
                        frontier_phi_67_pred_4 = _3287;
                        frontier_phi_67_pred_5 = _3286;
                    }
                    else
                    {
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3499 = _3286;
                        float _3500 = _3287;
                        float _3501 = _3288;
                        float _3502 = _3289;
                        float _3503 = _3290;
                        float _3504 = _3291;
                        uint _3505 = _3301;
                        uint _3506;
                        vec4 _3531;
                        float _3532;
                        vec4 _3547;
                        vec3 _3559;
                        vec4 _3574;
                        vec4 _3589;
                        float _3635;
                        bool _3636;
                        for (;;)
                        {
                            uint _3516 = ((_3292 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3505));
                            _3506 = (_3505 + 4294967295u) & _3505;
                            uint _3518 = _3516 * 40u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3532 = _3531.w;
                            uint _3534 = (_3516 * 40u) + 4u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3516 * 40u) + 8u;
                            _3559 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x));
                            uint _3561 = (_3516 * 40u) + 16u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3516 * 40u) + 20u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3516 * 40u) + 24u;
                            vec4 _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3610 = (_3516 * 40u) + 28u;
                            vec4 _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            _3635 = fma(_2889, _3623.z, fma(_2888, _3623.y, _3623.x * _2887)) + _3623.w;
                            _3636 = !((fma(_2889, _3604.z, fma(_2888, _3604.y, _3604.x * _2887)) + _3604.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3636)
                            {
                                float _3663 = _3531.x - _2887;
                                float _3664 = _3531.y - _2888;
                                float _3665 = _3531.z - _2889;
                                float _3666 = dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665));
                                float _3669 = inversesqrt(_3666);
                                float _3670 = _3669 * _3663;
                                float _3671 = _3669 * _3664;
                                float _3672 = _3669 * _3665;
                                float _3676 = 1.0 - (_3666 / (_3532 * _3532));
                                float _4810 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3681 = sqrt(_3666) * _3547.w;
                                float _3683 = 1.39999997615814208984375 / (_3681 + 1.39999997615814208984375);
                                float _3684 = _3683 * _3683;
                                float _3687 = ((1.0 - _3684) * dot(vec3(_3670, _3671, _3672), vec3(_1156, _1159, _1162))) + _3684;
                                float _3690 = _3681 * _3681;
                                float _3694 = (fma(_2889, _3574.z, fma(_2888, _3574.y, _3574.x * _2887)) + _3574.w) / _3635;
                                float _3695 = (fma(_2889, _3589.z, fma(_2888, _3589.y, _3589.x * _2887)) + _3589.w) / _3635;
                                float _3699 = 1.0 - dot(vec2(_3694, _3695), vec2(_3694, _3695));
                                float _4826 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3701 = _3700 * (((isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0))) * _3677) / ((_3690 * 0.699999988079071044921875) + 1.0));
                                float _3713 = exp2(log2(1.0 / ((_3690 * 3.5) + 5.0)) * 0.25);
                                float _3714 = 1.0 - _1231;
                                float _3721 = sqrt(1.0 - ((1.0 - (_3714 * _3714)) * (1.0 - (_3713 * _3713))));
                                float _3722 = _3721 * _3721;
                                float _3723 = _3722 * _3722;
                                float _3724 = _3670 - _3173;
                                float _3725 = _3671 - _3174;
                                float _3726 = _3672 - _3175;
                                float _3730 = inversesqrt(dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726)));
                                float _3734 = dot(vec3(_1156, _1159, _1162), vec3((-0.0) - _3173, (-0.0) - _3174, (-0.0) - _3175));
                                float _4837 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3737 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3738 = dot(vec3(_1156, _1159, _1162), vec3(_3730 * _3724, _3730 * _3725, _3730 * _3726));
                                float _4848 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3741 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3745 = ((_3741 * _3741) * (_3723 + (-1.0))) + 1.0;
                                float _3746 = _3683 * _3722;
                                float _3747 = _3746 * _3746;
                                float _3753 = ((1.0 - _3747) * dot(vec3(_1156, _1159, _1162), vec3(_3670, _3671, _3672))) + _3747;
                                float _4859 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3755 = 1.0 - _3722;
                                float _3765 = (0.5 / (((_3754 * ((_3737 * _3755) + _3722)) + 9.9999999392252902907785028219223e-09) + (((_3754 * _3755) + _3722) * _3737))) * _3754;
                                float _4870 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3775 = (_3700 * _3677) * (((_3723 * 3.1415927410125732421875) * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) / ((_3745 * _3745) * ((_3690 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3775 * _3559.x;
                                frontier_phi_73_pred_1 = _3775 * _3559.y;
                                frontier_phi_73_pred_2 = _3701 * _3547.z;
                                frontier_phi_73_pred_3 = _3701 * _3547.y;
                                frontier_phi_73_pred_4 = _3701 * _3547.x;
                                frontier_phi_73_pred_5 = _3775 * _3559.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3779 = frontier_phi_73_pred;
                            _3780 = frontier_phi_73_pred_1;
                            _3784 = frontier_phi_73_pred_2;
                            _3783 = frontier_phi_73_pred_3;
                            _3782 = frontier_phi_73_pred_4;
                            _3781 = frontier_phi_73_pred_5;
                            _3489 = _3782 + _3502;
                            _3490 = _3783 + _3503;
                            _3491 = _3784 + _3504;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            if (_3506 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3506;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3489;
                        frontier_phi_67_pred_1 = _3490;
                        frontier_phi_67_pred_2 = _3491;
                        frontier_phi_67_pred_3 = _3488;
                        frontier_phi_67_pred_4 = _3487;
                        frontier_phi_67_pred_5 = _3486;
                    }
                    _3154 = frontier_phi_67_pred;
                    _3156 = frontier_phi_67_pred_1;
                    _3158 = frontier_phi_67_pred_2;
                    _3152 = frontier_phi_67_pred_3;
                    _3150 = frontier_phi_67_pred_4;
                    _3148 = frontier_phi_67_pred_5;
                    uint _3293 = _3292 + 1u;
                    if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3286 = _3148;
                        _3287 = _3150;
                        _3288 = _3152;
                        _3289 = _3154;
                        _3290 = _3156;
                        _3291 = _3158;
                        _3292 = _3293;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3156;
                frontier_phi_55_56_ladder_1 = _3158;
                frontier_phi_55_56_ladder_2 = _3154;
                frontier_phi_55_56_ladder_3 = _3152;
                frontier_phi_55_56_ladder_4 = _3150;
                frontier_phi_55_56_ladder_5 = _3148;
            }
            else
            {
                frontier_phi_55_56_ladder = _3042;
                frontier_phi_55_56_ladder_1 = _3044;
                frontier_phi_55_56_ladder_2 = _3040;
                frontier_phi_55_56_ladder_3 = _3038;
                frontier_phi_55_56_ladder_4 = _3036;
                frontier_phi_55_56_ladder_5 = _3034;
            }
            _3147 = frontier_phi_55_56_ladder_5;
            _3149 = frontier_phi_55_56_ladder_4;
            _3151 = frontier_phi_55_56_ladder_3;
            _3153 = frontier_phi_55_56_ladder_2;
            _3155 = frontier_phi_55_56_ladder;
            _3157 = frontier_phi_55_56_ladder_1;
        }
        float _3162 = isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0));
        _2946 = (_3162 * _3153) + _2382;
        _2948 = (_3162 * _3155) + _2384;
        _2950 = (_3162 * _3157) + _2386;
        _2952 = ((_3147 * _1199) * _3162) + _2727;
        _2954 = ((_3149 * _1201) * _3162) + _2729;
        _2956 = ((_3151 * _1202) * _3162) + _2731;
    }
    else
    {
        _2946 = _2382;
        _2948 = _2384;
        _2950 = _2386;
        _2952 = _2727;
        _2954 = _2729;
        _2956 = _2731;
    }
    float _4886 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _4897 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _4908 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    uint _2976 = _269 + 6u;
    float _2984 = _1137 / cbSceneParam._m0[86u].x;
    float _2985 = _1138 / cbSceneParam._m0[86u].y;
    vec4 _2999 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, (log2((isnan(cbSceneParam._m0[77u].w) ? _1072 : (isnan(_1072) ? cbSceneParam._m0[77u].w : min(_1072, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3001 = _2999.x;
    float _3002 = _2999.y;
    float _3003 = _2999.z;
    float _3004 = _2999.w;
    float _3097;
    float _3099;
    float _3101;
    float _3103;
    if (_1072 > cbSceneParam._m0[78u].w)
    {
        float _3059 = isnan(_1072) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1072 : min(cbSceneParam._m0[80u].w, _1072));
        float _3060 = _3059 / _1072;
        float _3071 = _3060 * _1122;
        float _3072 = _1123 * _3060;
        float _3073 = (-0.0) - _3072;
        float _3075 = _3060 * _1124;
        float _3077 = (cbSceneParam._m0[77u].w * _3073) / _3059;
        float _3078 = _3077 + cbSceneParam._m0[79u].w;
        float _3079 = cbSceneParam._m0[79u].w - _3072;
        float _3085 = sqrt(((_3071 * _3071) + (_3072 * _3072)) + (_3075 * _3075));
        float _3088 = (1.0 - (cbSceneParam._m0[77u].w / _3059)) * _3085;
        float _3093 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3095 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3248;
        if (abs((_3073 - _3077) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3248 = ((((_3078 > 0.0) ? exp2(_3093 * _3078) : (2.0 - exp2(_3095 * _3078))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3088;
        }
        else
        {
            float _3208 = 1.0 / cbSceneParam._m0[80u].x;
            float _3209 = isnan(_3079) ? _3078 : (isnan(_3078) ? _3079 : max(_3078, _3079));
            float _3210 = isnan(_3079) ? _3078 : (isnan(_3078) ? _3079 : min(_3078, _3079));
            float _3219 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : min(_3209, 0.0));
            float _3220 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : min(_3210, 0.0));
            _3248 = ((abs(_3085 / _3073) * cbSceneParam._m0[80u].y) * ((((_3219 - _3220) * 2.0) - ((exp2(_3093 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0)))) - exp2(_3093 * (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))))) * _3208)) - ((exp2(_3095 * _3219) - exp2(_3095 * _3220)) * _3208))) + (_3088 * cbSceneParam._m0[80u].z);
        }
        vec4 _3250 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2984, _2985, 1.0), 0.0);
        float _3259 = exp2((_3248 * (-1.44269502162933349609375)) * (1.0 - _3250.w));
        float _3260 = log2(_3259);
        float _3276 = log2(_3004);
        _3097 = (exp2(_3276 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].x)) * _3250.x) / cbSceneParam._m0[78u].x)) + _3001;
        _3099 = (exp2(_3276 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].y)) * _3250.y) / cbSceneParam._m0[78u].y)) + _3002;
        _3101 = (exp2(_3276 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].z)) * _3250.z) / cbSceneParam._m0[78u].z)) + _3003;
        _3103 = _3259 * _3004;
    }
    else
    {
        _3097 = _3001;
        _3099 = _3002;
        _3101 = _3003;
        _3103 = _3004;
    }
    float _3115 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3116 = _3115 == 3.0;
    float _3117 = log2(_3103);
    float _3124 = exp2(_3117 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2946 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1215))) + ((_2952 + ((isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0))) * _2021)) * cbPerFrame._m0[3u].x));
    float _3125 = exp2(_3117 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2948 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1215))) + ((_2954 + ((isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0))) * _2021)) * cbPerFrame._m0[3u].x));
    float _3126 = exp2(_3117 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2950 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1215))) + ((_2956 + ((isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0))) * _2021)) * cbPerFrame._m0[3u].x));
    float _3135 = (_3115 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3135 * (_3116 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3097)));
    SV_Target.y = _3135 * (_3116 ? _3125 : (_3125 + (cbSceneParam._m0[72u].w * _3099)));
    SV_Target.z = _3135 * (_3116 ? _3126 : (_3126 + (cbSceneParam._m0[72u].w * _3101)));
    SV_Target.w = cbInstanceData._m0[_2976].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2976].w;
}


