#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3856 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _432 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_419 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313);
    float _435 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_419 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314);
    float _438 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_419 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315);
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    float _498 = _494.z;
    float _507 = ((_477.z - _498) * _419) + _498;
    float _510 = ((((_477.x - _496) * _419) + _496) * 2.0) + (-1.0);
    float _512 = ((((_477.y - _497) * _419) + _497) * 2.0) + (-1.0);
    float _513 = dot(vec2(_510, _512), vec2(_510, _512));
    float _3867 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _578 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_561 - _562) * cbMtdParam._m0[24u].z) + _562) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3878 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _586 = (_579 * ((_457.x * cbMtdParam._m0[18u].x) - _432)) + _432;
    float _587 = (_579 * ((_457.y * cbMtdParam._m0[18u].y) - _435)) + _435;
    float _588 = (_579 * ((_457.z * cbMtdParam._m0[18u].z) - _438)) + _438;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _616 = _614.x;
    float _633 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _616) * _419) + _616;
    float _637 = ((_600.x - _633) * cbMtdParam._m0[19u].z) + _633;
    float _639 = _637 - (_637 * _579);
    float _643 = (cbMtdParam._m0[19u].w * (_534.z - _507)) + _507;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _663 = (_656.x * 2.0) + (-1.0);
    float _664 = (_656.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3889 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _673 = (_579 * (_656.z - _643)) + _643;
    float _676 = (((_534.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _510;
    float _677 = (((_534.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _512;
    float _689 = (((_663 - _676) + (cbMtdParam._m0[21u].x * _676)) * _579) + _676;
    float _690 = (((_664 - _677) + (cbMtdParam._m0[21u].x * _677)) * _579) + _677;
    float _691 = (_579 * (sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _518)) + _518;
    float _693 = cbMtdParam._m0[22u].x + _534.w;
    float _696 = fma(_691, _231 * NORMAL.x, fma(_690, _238 * TANGENT.x, (_224 * _216) * _689));
    float _699 = fma(_691, _231 * NORMAL.y, fma(_690, _238 * TANGENT.y, (_224 * _217) * _689));
    float _702 = fma(_691, _231 * NORMAL.z, fma(_690, _238 * TANGENT.z, (_224 * _218) * _689));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3900 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _710 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3922 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3933 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3944 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3955 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _715 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _780 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _770);
    float _781 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _770);
    float _782 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _770);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _787 = _780 * _786;
    float _788 = _781 * _786;
    float _789 = _782 * _786;
    float _795 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _796 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _814 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _817 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _820 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _834 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3966 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _846 = 1.0 - _715;
    float _847 = _843 * _846;
    float _848 = _844 * _846;
    float _849 = _845 * _846;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _715;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _715;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _715;
    float _857 = _854 + 0.039999999105930328369140625;
    float _859 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _795, cbSceneParam._m0[86u].y * _796));
    float _873 = ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * TEXCOORD_5.w) * _869.x;
    float _874 = dot(vec3(_707, _708, _709), vec3(_787, _788, _789));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _707) - _787;
    float _882 = (_877 * _708) - _788;
    float _883 = (_877 * _709) - _789;
    float _887 = abs(dot(vec3(_787, _788, _789), vec3(_707, _708, _709)));
    float _3999 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_710);
    float _902 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _908 = (1.0 - _902) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _909 = _902 * _889;
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _975 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _979 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1004 = _937 + _707;
        float _1005 = _941 + _708;
        float _1006 = _945 + _709;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_707, _708, _709), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _4047 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_707, _708, _709), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _4080 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_707, _708, _709), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4113 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1290 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1294 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1317 = _937 + _707;
        float _1318 = _941 + _708;
        float _1319 = _945 + _709;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_707, _708, _709), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4176 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_707, _708, _709), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4209 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_707, _708, _709), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4242 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1247;
        _1556 = _1247;
        _1557 = _1247;
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1259)) + _1259;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1260)) + _1260;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1261)) + _1261;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _881 * 0.5;
    float _1624 = _882 * 0.5;
    float _1625 = _883 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1753 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1756 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1784 = frontier_phi_14_12_ladder;
        }
        float _1955;
        if (_1753 > 0.0)
        {
            _1955 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1955 = frontier_phi_23_19_ladder;
        }
        float _2250;
        if (_1756 > 0.0)
        {
            _2250 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2250 = frontier_phi_35_30_ladder;
        }
        float _2252 = isnan(_1955) ? _1784 : (isnan(_1784) ? _1955 : min(_1784, _1955));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1750) + _1739;
        float _2258 = (_2253 * _1753) + _1743;
        float _2259 = (_2253 * _1756) + _1747;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2260;
        float _2264 = _2260 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 > _2264) || ((_2258 < _2262) || ((_2257 < _2262) || (_2257 > _2264))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2259, cbModelParam._m0[9u].z, fma(_2258, cbModelParam._m0[9u].y, _2257 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2259, cbModelParam._m0[10u].z, fma(_2258, cbModelParam._m0[10u].y, _2257 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2259, cbModelParam._m0[11u].z, fma(_2258, cbModelParam._m0[11u].y, _2257 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_13_35_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_13_35_ladder_2;
        _1774 = frontier_phi_13_35_ladder_1;
        _1776 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1692);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1848 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1851 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1960;
        if (_1845 > 0.0)
        {
            _1960 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1960 = frontier_phi_25_21_ladder;
        }
        float _2277;
        if (_1848 > 0.0)
        {
            _2277 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2277 = frontier_phi_37_32_ladder;
        }
        float _2615;
        if (_1851 > 0.0)
        {
            _2615 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2615 = frontier_phi_47_44_ladder;
        }
        float _2617 = isnan(_2277) ? _1960 : (isnan(_1960) ? _2277 : min(_1960, _2277));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1845) + _1834;
        float _2623 = (_2618 * _1848) + _1838;
        float _2624 = (_2618 * _1851) + _1842;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_22_47_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_22_47_ladder_2;
        _1872 = frontier_phi_22_47_ladder_1;
        _1874 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1781);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1887 = (((_908 * _857) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1889 = (((_908 * _859) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1891 = (((_908 * _860) + _909) * _873) * ((cbModelParam._m0[1u].w * (_1874 - _1776)) + _1776);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1947 = _1934 / _1946;
    float _1948 = _1938 / _1946;
    float _1949 = _1942 / _1946;
    float _2096;
    float _2097;
    float _2098;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1976 = ((uint(_1949 > cbSceneParam._m0[59u].y) + uint(_1949 > cbSceneParam._m0[59u].x)) + uint(_1949 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1977 = _1976 + 43u;
        uint _1985 = _1976 + 44u;
        uint _1993 = _1976 + 45u;
        uint _2001 = _1976 + 46u;
        float _2012 = fma(_1946, cbSceneParam._m0[_1977].w, fma(_1942, cbSceneParam._m0[_1977].z, fma(_1938, cbSceneParam._m0[_1977].y, _1934 * cbSceneParam._m0[_1977].x)));
        float _2016 = fma(_1946, cbSceneParam._m0[_1985].w, fma(_1942, cbSceneParam._m0[_1985].z, fma(_1938, cbSceneParam._m0[_1985].y, _1934 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1946, cbSceneParam._m0[_2001].w, fma(_1942, cbSceneParam._m0[_2001].z, fma(_1938, cbSceneParam._m0[_2001].y, _1934 * cbSceneParam._m0[_2001].x)));
        float _2029 = cbSceneParam._m0[33u].z * _2024;
        float _2031 = cbSceneParam._m0[33u].w * _2024;
        float _2034 = fma(_1946, cbSceneParam._m0[_1993].w, fma(_1942, cbSceneParam._m0[_1993].z, fma(_1938, cbSceneParam._m0[_1993].y, _1934 * cbSceneParam._m0[_1993].x))) / _2024;
        float _2082 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
        float _4368 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2089 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 + _2012) / _2024, (_2031 + _2016) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 + _2012) / _2024, (_2016 - _2029) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2029) / _2024, (_2016 - _2031) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2031) / _2024, (_2029 + _2016) / _2024), _2034), 0.0)).x), vec4(0.25)));
        _2096 = 1.0 - (_2089 * cbSceneParam._m0[34u].x);
        _2097 = 1.0 - (_2089 * cbSceneParam._m0[34u].y);
        _2098 = 1.0 - (_2089 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2096 = 1.0;
        _2097 = 1.0;
        _2098 = 1.0;
    }
    float _2162;
    float _2164;
    float _2166;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2150 = fma(_1946, cbSceneParam._m0[63u].w, fma(_1942, cbSceneParam._m0[63u].z, fma(_1938, cbSceneParam._m0[63u].y, _1934 * cbSceneParam._m0[63u].x)));
        float _2151 = fma(_1946, cbSceneParam._m0[60u].w, fma(_1942, cbSceneParam._m0[60u].z, fma(_1938, cbSceneParam._m0[60u].y, _1934 * cbSceneParam._m0[60u].x))) / _2150;
        float _2152 = fma(_1946, cbSceneParam._m0[61u].w, fma(_1942, cbSceneParam._m0[61u].z, fma(_1938, cbSceneParam._m0[61u].y, _1934 * cbSceneParam._m0[61u].x))) / _2150;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2151 >= cbSceneParam._m0[64u].x) && (_2152 >= cbSceneParam._m0[64u].y)) && (_2151 <= cbSceneParam._m0[64u].z)) && (_2152 <= cbSceneParam._m0[64u].w))
        {
            float _2290 = fma(_1946, cbSceneParam._m0[62u].w, fma(_1942, cbSceneParam._m0[62u].z, fma(_1938, cbSceneParam._m0[62u].y, _1934 * cbSceneParam._m0[62u].x))) / _2150;
            float _2294 = isnan(cbSceneParam._m0[41u].w) ? _2290 : (isnan(_2290) ? cbSceneParam._m0[41u].w : max(_2290, cbSceneParam._m0[41u].w));
            float _2337 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
            float _4384 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
            float _2344 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2151, cbSceneParam._m0[33u].w + _2152), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2151, _2152 - cbSceneParam._m0[33u].z), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].z, _2152 - cbSceneParam._m0[33u].w), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2152), _2294), 0.0)).x), vec4(0.25)));
            float _2348 = 1.0 - (_2344 * cbSceneParam._m0[34u].x);
            float _2349 = 1.0 - (_2344 * cbSceneParam._m0[34u].y);
            float _2350 = 1.0 - (_2344 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2350) ? _2098 : (isnan(_2098) ? _2350 : min(_2098, _2350));
            frontier_phi_34_33_ladder_1 = isnan(_2349) ? _2097 : (isnan(_2097) ? _2349 : min(_2097, _2349));
            frontier_phi_34_33_ladder_2 = isnan(_2348) ? _2096 : (isnan(_2096) ? _2348 : min(_2096, _2348));
        }
        else
        {
            frontier_phi_34_33_ladder = _2098;
            frontier_phi_34_33_ladder_1 = _2097;
            frontier_phi_34_33_ladder_2 = _2096;
        }
        _2162 = frontier_phi_34_33_ladder_2;
        _2164 = frontier_phi_34_33_ladder_1;
        _2166 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2162 = _2096;
        _2164 = _2097;
        _2166 = _2098;
    }
    uvec4 _2171 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2173 = _2171.x * 14u;
    uint _2174 = _2173 + 13u;
    float _2181 = _873 + (-1.0);
    float _2186 = (cbLight._m0[_2174].x * _2181) + 1.0;
    float _2187 = (cbLight._m0[_2174].y * _2181) + 1.0;
    float _2188 = (cbLight._m0[_2174].z * _2181) + 1.0;
    float _2189 = (cbLight._m0[_2174].w * _2181) + 1.0;
    uint _2190 = _2173 + 5u;
    float _2196 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2200 = _2173 + 4u;
    float _2209 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2213 = _2173 | 1u;
    float _2224 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_707, _708, _709));
    float _2227 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_707, _708, _709));
    float _4420 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _4431 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2232 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * 0.3183098733425140380859375;
    float _2234 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.3183098733425140380859375;
    float _2241 = ((cbLight._m0[_2190].x * _2196) * _2234) + (((cbLight._m0[_2200].x * _2162) * _2209) * _2232);
    float _2242 = ((_2196 * cbLight._m0[_2190].y) * _2234) + (((cbLight._m0[_2200].y * _2164) * _2209) * _2232);
    float _2243 = ((_2196 * cbLight._m0[_2190].z) * _2234) + (((cbLight._m0[_2200].z * _2166) * _2209) * _2232);
    uvec4 _2247 = floatBitsToUint(cbLight._m0[_2173 + 12u]);
    bool _2249 = _2247.x == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2249)
    {
        _2351 = _2241;
        _2353 = _2242;
        _2355 = _2243;
    }
    else
    {
        uint _2359 = _2173 + 6u;
        float _2375 = (dot(vec3(cbLight._m0[_2173 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4442 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2378 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2351 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2241;
        _2353 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2242;
        _2355 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2243;
    }
    bool _2358 = _2247.y == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2358)
    {
        _2413 = _2351;
        _2415 = _2353;
        _2417 = _2355;
    }
    else
    {
        uint _2586 = _2173 + 7u;
        float _2602 = (dot(vec3(cbLight._m0[_2173 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2603 = _2602 * _2602;
        float _4458 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2604 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2605 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2413 = (((cbLight._m0[_2586].x * 0.3183098733425140380859375) * _2604) * _2605) + _2351;
        _2415 = (((cbLight._m0[_2586].y * 0.3183098733425140380859375) * _2604) * _2605) + _2353;
        _2417 = (((cbLight._m0[_2586].z * 0.3183098733425140380859375) * _2604) * _2605) + _2355;
    }
    uint _2420 = _2173 + 8u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _710) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2173].x + _787;
    float _2436 = cbLight._m0[_2173].y + _788;
    float _2437 = cbLight._m0[_2173].z + _789;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2173].xyz));
    float _4474 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _4485 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2449 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2450 = dot(vec3(_707, _708, _709), vec3(_2442, _2443, _2444));
    float _4496 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2442, _2443, _2444));
    float _4507 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2434 * _2434;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0);
    float _2471 = 0.959999978542327880859375 - _854;
    float _2473 = 0.959999978542327880859375 - _855;
    float _2474 = 0.959999978542327880859375 - _856;
    float _2481 = 1.0 - _2434;
    float _2492 = (0.5 / (((_2449 * ((_2448 * _2481) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2481) + _2434) * _2448))) * _2448;
    float _4518 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    uint _2508 = _2173 + 9u;
    float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _710) * 0.949999988079071044921875);
    float _2520 = _2519 * _2519;
    float _2521 = cbLight._m0[_2213].x + _787;
    float _2522 = cbLight._m0[_2213].y + _788;
    float _2523 = cbLight._m0[_2213].z + _789;
    float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
    float _2528 = _2527 * _2521;
    float _2529 = _2527 * _2522;
    float _2530 = _2527 * _2523;
    float _2531 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2213].xyz));
    float _4529 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2535 = dot(vec3(_707, _708, _709), vec3(_2528, _2529, _2530));
    float _4540 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2528, _2529, _2530));
    float _4551 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2520 * _2520;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
    float _2561 = 1.0 - _2520;
    float _2571 = (0.5 / (((_2449 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2561) + _2520) * _2534))) * _2534;
    float _4562 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    float _2583 = (((((_2554 * _2471) + _857) * cbLight._m0[_2508].x) * _2573) * _2196) + ((((cbLight._m0[_2420].x * _2162) * ((_2470 * _2471) + _857)) * _2494) * _2209);
    float _2584 = (((((_2554 * _2473) + _859) * cbLight._m0[_2508].y) * _2573) * _2196) + ((((cbLight._m0[_2420].y * _2164) * ((_2470 * _2473) + _859)) * _2494) * _2209);
    float _2585 = (((((_2554 * _2474) + _860) * cbLight._m0[_2508].z) * _2573) * _2196) + ((((cbLight._m0[_2420].z * _2166) * ((_2470 * _2474) + _860)) * _2494) * _2209);
    float _2641;
    float _2643;
    float _2645;
    if (_2249)
    {
        _2641 = _2583;
        _2643 = _2584;
        _2645 = _2585;
    }
    else
    {
        uint _2647 = _2173 + 2u;
        uint _2651 = _2173 + 10u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _710) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _787;
        float _2668 = cbLight._m0[_2647].y + _788;
        float _2669 = cbLight._m0[_2647].z + _789;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2647].xyz));
        float _4573 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2681 = dot(vec3(_707, _708, _709), vec3(_2674, _2675, _2676));
        float _4584 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4595 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2700 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2707 = 1.0 - _2666;
        float _2717 = (0.5 / (((_2449 * ((_2680 * _2707) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2707) + _2666) * _2680))) * _2680;
        float _4606 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2719 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2720 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2641 = (((((_2700 * _2471) + _857) * cbLight._m0[_2651].x) * _2719) * _2720) + _2583;
        _2643 = (((((_2700 * _2473) + _859) * cbLight._m0[_2651].y) * _2719) * _2720) + _2584;
        _2645 = (((((_2700 * _2474) + _860) * cbLight._m0[_2651].z) * _2719) * _2720) + _2585;
    }
    float _2751;
    float _2753;
    float _2755;
    if (_2358)
    {
        _2751 = _2641;
        _2753 = _2643;
        _2755 = _2645;
    }
    else
    {
        uint _2762 = _2173 + 3u;
        uint _2766 = _2173 + 11u;
        float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _710) * 0.949999988079071044921875);
        float _2781 = _2780 * _2780;
        float _2782 = cbLight._m0[_2762].x + _787;
        float _2783 = cbLight._m0[_2762].y + _788;
        float _2784 = cbLight._m0[_2762].z + _789;
        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
        float _2789 = _2788 * _2782;
        float _2790 = _2788 * _2783;
        float _2791 = _2788 * _2784;
        float _2792 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2762].xyz));
        float _4622 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2796 = dot(vec3(_707, _708, _709), vec3(_2789, _2790, _2791));
        float _4633 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2800 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2789, _2790, _2791));
        float _4644 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2804 = _2781 * _2781;
        float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
        float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0);
        float _2822 = 1.0 - _2781;
        float _2832 = (0.5 / (((_2449 * ((_2795 * _2822) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2822) + _2781) * _2795))) * _2795;
        float _4655 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2751 = (((((_2815 * _2471) + _857) * cbLight._m0[_2766].x) * _2834) * _2835) + _2641;
        _2753 = (((((_2815 * _2473) + _859) * cbLight._m0[_2766].y) * _2834) * _2835) + _2643;
        _2755 = (((((_2815 * _2474) + _860) * cbLight._m0[_2766].z) * _2834) * _2835) + _2645;
    }
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_2171.y == 0u)
    {
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.x;
        uint _2868 = uint((float(_2856.y) * floor(float(uint(cbSceneParam._m0[85u].y * _796) / _2857))) + floor(float(uint(cbSceneParam._m0[85u].x * _795) / _2857)));
        float _2878 = (log2(_1949 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2879 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        uint _2882 = uint(isnan(14.0) ? _2879 : (isnan(_2879) ? 14.0 : min(_2879, 14.0)));
        uvec4 _2887 = texelFetch(g_lightClusterGridBuffer, int(((_2882 << 2u) + (_2868 << 6u)) >> 2u));
        uint _2888 = _2887.x;
        uint _2889 = _2856.z;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((((1u << ((_2889 >> 4u) & 15u)) + 4294967295u) & _2888) == 0u) || ((_2889 & 240u) == 0u))
        {
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
        }
        else
        {
            float _2969;
            float _2971;
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            uint _3119 = 0u;
            uint _3128;
            bool _3129;
            for (;;)
            {
                _3128 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                _3129 = _3128 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3129)
                {
                    frontier_phi_66_pred = _3118;
                    frontier_phi_66_pred_1 = _3117;
                    frontier_phi_66_pred_2 = _3116;
                    frontier_phi_66_pred_3 = _3115;
                    frontier_phi_66_pred_4 = _3114;
                    frontier_phi_66_pred_5 = _3113;
                }
                else
                {
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    uint _3243;
                    _3237 = _3113;
                    _3238 = _3114;
                    _3239 = _3115;
                    _3240 = _3116;
                    _3241 = _3117;
                    _3242 = _3118;
                    _3243 = _3128;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    for (;;)
                    {
                        uint _3247 = uint(findLSB(_3243)) + (_3119 << 5u);
                        uint _3244 = (_3243 + 4294967295u) & _3243;
                        uint _3249 = _3247 * 48u;
                        vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3249)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 3u)).x));
                        uint _3269 = (_3247 * 48u) + 4u;
                        vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3269)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3269 + 3u)).x));
                        uint _3288 = (_3247 * 48u) + 8u;
                        vec3 _3299 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x));
                        float _3303 = _3263.x - _1947;
                        float _3304 = _3263.y - _1948;
                        float _3305 = _3263.z - _1949;
                        float _3306 = dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305));
                        float _3309 = inversesqrt(_3306);
                        float _3310 = _3309 * _3303;
                        float _3311 = _3309 * _3304;
                        float _3312 = _3309 * _3305;
                        float _3313 = dot(vec3(_814, _817, _820), vec3(_3310, _3311, _3312));
                        float _3318 = 1.0 - (_3306 * _3263.w);
                        float _4681 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3319 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3320 = sqrt(_3306) * _3282.w;
                        float _3323 = 1.39999997615814208984375 / (_3320 + 1.39999997615814208984375);
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3313) + _3324;
                        float _3330 = _3320 * _3320;
                        float _3334 = ((isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))) * _3319) / ((_3330 * 0.699999988079071044921875) + 1.0);
                        float _3338 = (-0.0) - _1947;
                        float _3339 = (-0.0) - _1948;
                        float _3340 = (-0.0) - _1949;
                        float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3354 = exp2(log2(1.0 / ((_3330 * 3.5) + 5.0)) * 0.25);
                        float _3355 = 1.0 - _889;
                        float _3362 = sqrt(1.0 - ((1.0 - (_3355 * _3355)) * (1.0 - (_3354 * _3354))));
                        float _3363 = _3362 * _3362;
                        float _3364 = _3363 * _3363;
                        float _3365 = _3345 + _3310;
                        float _3366 = _3346 + _3311;
                        float _3367 = _3347 + _3312;
                        float _3371 = inversesqrt(dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367)));
                        float _3375 = dot(vec3(_814, _817, _820), vec3(_3345, _3346, _3347));
                        float _4697 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3379 = dot(vec3(_814, _817, _820), vec3(_3371 * _3365, _3371 * _3366, _3371 * _3367));
                        float _4708 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3386 = ((_3382 * _3382) * (_3364 + (-1.0))) + 1.0;
                        float _3387 = _3323 * _3363;
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3313) + _3388;
                        float _4719 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3393 = 1.0 - _3363;
                        float _3403 = (0.5 / (((_3392 * ((_3378 * _3393) + _3363)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3363) * _3378))) * _3392;
                        float _4730 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                        float _3414 = (((_3364 * 3.1415927410125732421875) * (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) / ((_3386 * _3386) * ((_3330 * 2.1991131305694580078125) + 3.141590118408203125))) * _3319;
                        _3172 = (_3334 * _3282.x) + _3240;
                        _3173 = (_3334 * _3282.y) + _3241;
                        _3174 = (_3334 * _3282.z) + _3242;
                        _3169 = (_3414 * _3299.x) + _3237;
                        _3170 = (_3414 * _3299.y) + _3238;
                        _3171 = (_3414 * _3299.z) + _3239;
                        if (_3244 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3237 = _3169;
                            _3238 = _3170;
                            _3239 = _3171;
                            _3240 = _3172;
                            _3241 = _3173;
                            _3242 = _3174;
                            _3243 = _3244;
                        }
                    }
                    frontier_phi_66_pred = _3174;
                    frontier_phi_66_pred_1 = _3173;
                    frontier_phi_66_pred_2 = _3172;
                    frontier_phi_66_pred_3 = _3171;
                    frontier_phi_66_pred_4 = _3170;
                    frontier_phi_66_pred_5 = _3169;
                }
                _2979 = frontier_phi_66_pred;
                _2977 = frontier_phi_66_pred_1;
                _2975 = frontier_phi_66_pred_2;
                _2973 = frontier_phi_66_pred_3;
                _2971 = frontier_phi_66_pred_4;
                _2969 = frontier_phi_66_pred_5;
                uint _3120 = _3119 + 1u;
                if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3113 = _2969;
                    _3114 = _2971;
                    _3115 = _2973;
                    _3116 = _2975;
                    _3117 = _2977;
                    _3118 = _2979;
                    _3119 = _3120;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
        }
        uvec4 _2982 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2983 = _2982.z;
        uint _2985 = (_2983 >> 8u) & 15u;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((4294967295u << _2985) & _2888) == 0u)
        {
            _3081 = _2968;
            _3083 = _2970;
            _3085 = _2972;
            _3087 = _2974;
            _3089 = _2976;
            _3091 = _2978;
        }
        else
        {
            float _3106 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
            float _3107 = _3106 * _1947;
            float _3108 = _3106 * _1948;
            float _3109 = _3106 * _1949;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2985 < ((_2983 >> 12u) & 15u))
            {
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3220 = _2968;
                float _3221 = _2970;
                float _3222 = _2972;
                float _3223 = _2974;
                float _3224 = _2976;
                float _3225 = _2978;
                uint _3226 = _2985;
                uint _3235;
                bool _3236;
                for (;;)
                {
                    _3235 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3226 << 2u)) >> 2u)).x;
                    _3236 = _3235 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3236)
                    {
                        frontier_phi_72_pred = _3225;
                        frontier_phi_72_pred_1 = _3224;
                        frontier_phi_72_pred_2 = _3223;
                        frontier_phi_72_pred_3 = _3222;
                        frontier_phi_72_pred_4 = _3221;
                        frontier_phi_72_pred_5 = _3220;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3432 = _3220;
                        float _3433 = _3221;
                        float _3434 = _3222;
                        float _3435 = _3223;
                        float _3436 = _3224;
                        float _3437 = _3225;
                        uint _3438 = _3235;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3523;
                        float _3569;
                        bool _3570;
                        for (;;)
                        {
                            uint _3449 = ((_3226 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3510 = (_3449 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3449 * 40u) + 24u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3544 = (_3449 * 40u) + 28u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3569 = fma(_1949, _3557.z, fma(_1948, _3557.y, _3557.x * _1947)) + _3557.w;
                            _3570 = !((fma(_1949, _3538.z, fma(_1948, _3538.y, _3538.x * _1947)) + _3538.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3570)
                            {
                                float _3597 = _3464.x - _1947;
                                float _3598 = _3464.y - _1948;
                                float _3599 = _3464.z - _1949;
                                float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                                float _3603 = inversesqrt(_3600);
                                float _3604 = _3603 * _3597;
                                float _3605 = _3603 * _3598;
                                float _3606 = _3603 * _3599;
                                float _3610 = 1.0 - (_3600 / (_3465 * _3465));
                                float _4741 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3615 = sqrt(_3600) * _3480.w;
                                float _3617 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                                float _3618 = _3617 * _3617;
                                float _3621 = ((1.0 - _3618) * dot(vec3(_3604, _3605, _3606), vec3(_814, _817, _820))) + _3618;
                                float _3624 = _3615 * _3615;
                                float _3628 = (fma(_1949, _3507.z, fma(_1948, _3507.y, _3507.x * _1947)) + _3507.w) / _3569;
                                float _3629 = (fma(_1949, _3523.z, fma(_1948, _3523.y, _3523.x * _1947)) + _3523.w) / _3569;
                                float _3633 = 1.0 - dot(vec2(_3628, _3629), vec2(_3628, _3629));
                                float _4757 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3635 = _3634 * (((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3611) / ((_3624 * 0.699999988079071044921875) + 1.0));
                                float _3647 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                                float _3648 = 1.0 - _889;
                                float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                                float _3656 = _3655 * _3655;
                                float _3657 = _3656 * _3656;
                                float _3658 = _3604 - _3107;
                                float _3659 = _3605 - _3108;
                                float _3660 = _3606 - _3109;
                                float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                                float _3668 = dot(vec3(_814, _817, _820), vec3((-0.0) - _3107, (-0.0) - _3108, (-0.0) - _3109));
                                float _4768 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3672 = dot(vec3(_814, _817, _820), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                                float _4779 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                                float _3680 = _3617 * _3656;
                                float _3681 = _3680 * _3680;
                                float _3687 = ((1.0 - _3681) * dot(vec3(_814, _817, _820), vec3(_3604, _3605, _3606))) + _3681;
                                float _4790 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3689 = 1.0 - _3656;
                                float _3699 = (0.5 / (((_3688 * ((_3671 * _3689) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3688 * _3689) + _3656) * _3671))) * _3688;
                                float _4801 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3709 = (_3634 * _3611) * (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) / ((_3679 * _3679) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3635 * _3480.y;
                                frontier_phi_78_pred_1 = _3635 * _3480.x;
                                frontier_phi_78_pred_2 = _3709 * _3492.z;
                                frontier_phi_78_pred_3 = _3709 * _3492.y;
                                frontier_phi_78_pred_4 = _3709 * _3492.x;
                                frontier_phi_78_pred_5 = _3635 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3717 = frontier_phi_78_pred;
                            _3716 = frontier_phi_78_pred_1;
                            _3715 = frontier_phi_78_pred_2;
                            _3714 = frontier_phi_78_pred_3;
                            _3713 = frontier_phi_78_pred_4;
                            _3718 = frontier_phi_78_pred_5;
                            _3422 = _3716 + _3435;
                            _3423 = _3717 + _3436;
                            _3424 = _3718 + _3437;
                            _3419 = _3713 + _3432;
                            _3420 = _3714 + _3433;
                            _3421 = _3715 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3424;
                        frontier_phi_72_pred_1 = _3423;
                        frontier_phi_72_pred_2 = _3422;
                        frontier_phi_72_pred_3 = _3421;
                        frontier_phi_72_pred_4 = _3420;
                        frontier_phi_72_pred_5 = _3419;
                    }
                    _3092 = frontier_phi_72_pred;
                    _3090 = frontier_phi_72_pred_1;
                    _3088 = frontier_phi_72_pred_2;
                    _3086 = frontier_phi_72_pred_3;
                    _3084 = frontier_phi_72_pred_4;
                    _3082 = frontier_phi_72_pred_5;
                    uint _3227 = _3226 + 1u;
                    if (_3227 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3220 = _3082;
                        _3221 = _3084;
                        _3222 = _3086;
                        _3223 = _3088;
                        _3224 = _3090;
                        _3225 = _3092;
                        _3226 = _3227;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3092;
                frontier_phi_60_61_ladder_1 = _3090;
                frontier_phi_60_61_ladder_2 = _3086;
                frontier_phi_60_61_ladder_3 = _3084;
                frontier_phi_60_61_ladder_4 = _3082;
                frontier_phi_60_61_ladder_5 = _3088;
            }
            else
            {
                frontier_phi_60_61_ladder = _2978;
                frontier_phi_60_61_ladder_1 = _2976;
                frontier_phi_60_61_ladder_2 = _2972;
                frontier_phi_60_61_ladder_3 = _2970;
                frontier_phi_60_61_ladder_4 = _2968;
                frontier_phi_60_61_ladder_5 = _2974;
            }
            _3081 = frontier_phi_60_61_ladder_4;
            _3083 = frontier_phi_60_61_ladder_3;
            _3085 = frontier_phi_60_61_ladder_2;
            _3087 = frontier_phi_60_61_ladder_5;
            _3089 = frontier_phi_60_61_ladder_1;
            _3091 = frontier_phi_60_61_ladder;
        }
        float _3096 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2901 = (_3096 * _3087) + _2413;
        _2903 = (_3096 * _3089) + _2415;
        _2905 = (_3096 * _3091) + _2417;
        _2907 = ((_3081 * _857) * _3096) + _2751;
        _2909 = ((_3083 * _859) * _3096) + _2753;
        _2911 = ((_3085 * _860) * _3096) + _2755;
    }
    else
    {
        _2901 = _2413;
        _2903 = _2415;
        _2905 = _2417;
        _2907 = _2751;
        _2909 = _2753;
        _2911 = _2755;
    }
    float _4817 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4828 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4839 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    uint _2931 = _244 + 6u;
    float _2939 = _795 / cbSceneParam._m0[86u].x;
    float _2940 = _796 / cbSceneParam._m0[86u].y;
    vec4 _2954 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2939, _2940, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2956 = _2954.x;
    float _2957 = _2954.y;
    float _2958 = _2954.z;
    float _2959 = _2954.w;
    float _3031;
    float _3033;
    float _3035;
    float _3037;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2993 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2994 = _2993 / _729;
        float _3005 = _2994 * _780;
        float _3006 = _781 * _2994;
        float _3007 = (-0.0) - _3006;
        float _3009 = _2994 * _782;
        float _3011 = (cbSceneParam._m0[77u].w * _3007) / _2993;
        float _3012 = _3011 + cbSceneParam._m0[79u].w;
        float _3013 = cbSceneParam._m0[79u].w - _3006;
        float _3019 = sqrt(((_3005 * _3005) + (_3006 * _3006)) + (_3009 * _3009));
        float _3022 = (1.0 - (cbSceneParam._m0[77u].w / _2993)) * _3019;
        float _3027 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3029 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3182;
        if (abs((_3007 - _3011) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3182 = ((((_3012 > 0.0) ? exp2(_3027 * _3012) : (2.0 - exp2(_3029 * _3012))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3022;
        }
        else
        {
            float _3142 = 1.0 / cbSceneParam._m0[80u].x;
            float _3143 = isnan(_3013) ? _3012 : (isnan(_3012) ? _3013 : max(_3012, _3013));
            float _3144 = isnan(_3013) ? _3012 : (isnan(_3012) ? _3013 : min(_3012, _3013));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            _3182 = ((abs(_3019 / _3007) * cbSceneParam._m0[80u].y) * ((((_3153 - _3154) * 2.0) - ((exp2(_3027 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0)))) - exp2(_3027 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))))) * _3142)) - ((exp2(_3029 * _3153) - exp2(_3029 * _3154)) * _3142))) + (_3022 * cbSceneParam._m0[80u].z);
        }
        vec4 _3184 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2939, _2940, 1.0), 0.0);
        float _3193 = exp2((_3182 * (-1.44269502162933349609375)) * (1.0 - _3184.w));
        float _3194 = log2(_3193);
        float _3210 = log2(_2959);
        _3031 = (exp2(_3210 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].x)) * _3184.x) / cbSceneParam._m0[78u].x)) + _2956;
        _3033 = (exp2(_3210 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].y)) * _3184.y) / cbSceneParam._m0[78u].y)) + _2957;
        _3035 = (exp2(_3210 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].z)) * _3184.z) / cbSceneParam._m0[78u].z)) + _2958;
        _3037 = _3193 * _2959;
    }
    else
    {
        _3031 = _2956;
        _3033 = _2957;
        _3035 = _2958;
        _3037 = _2959;
    }
    float _3049 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3050 = _3049 == 3.0;
    float _3051 = log2(_3037);
    float _3058 = exp2(_3051 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2901 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _873))) + ((_2907 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _3059 = exp2(_3051 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2903 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _873))) + ((_2909 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _3060 = exp2(_3051 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2905 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _873))) + ((_2911 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _3069 = (_3049 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3069 * (_3050 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3031)));
    SV_Target.y = _3069 * (_3050 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3033)));
    SV_Target.z = _3069 * (_3050 ? _3060 : (_3060 + (cbSceneParam._m0[72u].w * _3035)));
    SV_Target.w = cbInstanceData._m0[_2931].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2931].w;
}


