#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1475;
float _3879;
float _3880;
float _3881;
float _3882;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _247 = _246 * _238;
    float _248 = _246 * _239;
    float _249 = _246 * _240;
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = _253 * NORMAL.x;
    float _255 = _253 * NORMAL.y;
    float _256 = _253 * NORMAL.z;
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = _260 * TANGENT.x;
    float _262 = _260 * TANGENT.y;
    float _263 = _260 * TANGENT.z;
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3891 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3902 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3913 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3924 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _455 = (_448 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _456 = (_448 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _457 = (_448 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _461 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _455;
    float _464 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _456;
    float _467 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _457;
    float _474 = ((_455 - _461) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _461;
    float _475 = ((_456 - _464) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _464;
    float _476 = ((_457 - _467) * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) + _467;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _542 = _538.z;
    float _551 = ((_521.z - _542) * _448) + _542;
    float _554 = ((((_521.x - _540) * _448) + _540) * 2.0) + (-1.0);
    float _555 = ((((_521.y - _541) * _448) + _541) * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3935 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _593 = (_554 + ((((_494.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_581.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _594 = (_555 + ((((_494.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_581.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _597 = fma(_561, _254, fma(_594, _261, _593 * _247));
    float _600 = fma(_561, _255, fma(_594, _262, _593 * _248));
    float _603 = fma(_561, _256, fma(_594, _263, _593 * _249));
    float _607 = inversesqrt(dot(vec3(_597, _600, _603), vec3(_597, _600, _603)));
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _636 = _634.x;
    float _637 = 1.0 - _636;
    float _646 = (cbMtdParam._m0[19u].x + dot(vec4(_607 * _597, _607 * _600, _607 * _603, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_636 - _637) * cbMtdParam._m0[24u].z) + _637) * cbMtdParam._m0[21u].z);
    float _3946 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _649 = (-0.0) - cbMtdParam._m0[24u].x;
    float _651 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _651 : (isnan(_651) ? 1.0 : min(_651, 1.0));
    float _659 = _647 - ((_647 * TEXCOORD_8.x) * _652);
    float _660 = _647 - ((_647 * TEXCOORD_8.y) * _652);
    float _661 = _647 - ((_647 * TEXCOORD_8.z) * _652);
    float _668 = (_659 * (cbMtdParam._m0[17u].x - _474)) + _474;
    float _669 = (_660 * (cbMtdParam._m0[17u].y - _475)) + _475;
    float _670 = (_661 * (cbMtdParam._m0[17u].z - _476)) + _476;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _684 = _682.x;
    float _685 = 1.0 - _684;
    float _711 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_684 - _685) * cbMtdParam._m0[24u].w) + _685) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3967 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _712 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _720 = ((((cbMtdParam._m0[10u].x - _668) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _712) + _668;
    float _721 = ((((cbMtdParam._m0[10u].y - _669) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _712) + _669;
    float _722 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _670)) * _712) + _670;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _750 = _748.x;
    float _768 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _750) * _448) + _750;
    float _772 = ((_734.x - _768) * cbMtdParam._m0[19u].z) + _768;
    float _774 = _772 - (_772 * _659);
    float _776 = _774 - (_774 * _712);
    float _781 = (((_494.z - _551) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _551;
    float _785 = ((_581.z - _781) * cbMtdParam._m0[19u].w) + _781;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _806 = (_799.x * 2.0) + (-1.0);
    float _807 = (_799.y * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _3978 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _816 = ((_799.z - _785) * _659) + _785;
    float _819 = ((cbMtdParam._m0[23u].x - _816) * _712) + _816;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _844 = (_838.x * 2.0) + (-1.0);
    float _845 = (_838.y * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _3989 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _861 = ((sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _561) * _661) + _561;
    float _864 = (((_806 - _593) * _659) + _593) + (cbMtdParam._m0[21u].x * _593);
    float _865 = (((_807 - _594) * _660) + _594) + (cbMtdParam._m0[21u].x * _594);
    float _876 = (((_844 - _864) + (_864 * cbMtdParam._m0[22u].z)) * _712) + _864;
    float _877 = (((_845 - _865) + (_865 * cbMtdParam._m0[22u].z)) * _712) + _865;
    float _878 = (_712 * (sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) - _861)) + _861;
    float _882 = cbMtdParam._m0[22u].x + _581.w;
    float _885 = fma(_878, _254, fma(_877, _261, _876 * _247));
    float _888 = fma(_878, _255, fma(_877, _262, _876 * _248));
    float _891 = fma(_878, _256, fma(_877, _263, _876 * _249));
    float _895 = inversesqrt(dot(vec3(_885, _888, _891), vec3(_885, _888, _891)));
    float _896 = _895 * _885;
    float _897 = _895 * _888;
    float _898 = _895 * _891;
    float _4000 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _899 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4022 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4033 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4044 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4055 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _904 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _918 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _968 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _958);
    float _969 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _958);
    float _970 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _958);
    float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
    float _975 = _968 * _974;
    float _976 = _969 * _974;
    float _977 = _970 * _974;
    vec4 _982 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _984 = _982.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1156 = sqrt(((_968 * _968) + (_969 * _969)) + (_970 * _970));
        float _1162 = (cbMatDynParam._m0[5u].x * _1156) + cbMatDynParam._m0[5u].y;
        float _4066 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1167 = (cbMatDynParam._m0[5u].z * _1156) + cbMatDynParam._m0[5u].w;
        float _4077 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) - _1163)) + _1163) < ((_984 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _995 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _996 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1014 = fma(_898, cbSceneParam._m0[5u].z, fma(_897, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _896));
    float _1017 = fma(_898, cbSceneParam._m0[6u].z, fma(_897, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _896));
    float _1020 = fma(_898, cbSceneParam._m0[7u].z, fma(_897, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _896));
    uint _1033 = _285 + 9u;
    uint _1034 = _1033 + uint(cbMatDynParam._m0[0u].w);
    float _1040 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_1034].x;
    float _1041 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_1034].y;
    float _1042 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_1034].z;
    float _4088 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _1046 = 1.0 - _904;
    float _1047 = _1043 * _1046;
    float _1048 = _1044 * _1046;
    float _1049 = _1045 * _1046;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _904;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _904;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _904;
    float _1057 = _1054 + 0.039999999105930328369140625;
    float _1059 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    vec4 _1069 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _995, cbSceneParam._m0[86u].y * _996));
    float _1073 = ((isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * TEXCOORD_5.w) * _1069.x;
    float _1074 = dot(vec3(_896, _897, _898), vec3(_975, _976, _977));
    float _1077 = _1074 * 2.0;
    float _1081 = (_1077 * _896) - _975;
    float _1082 = (_1077 * _897) - _976;
    float _1083 = (_1077 * _898) - _977;
    float _1087 = abs(dot(vec3(_975, _976, _977), vec3(_896, _897, _898)));
    float _4121 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1089 = sqrt(_899);
    float _1102 = exp2((_1089 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1089 * 3.0));
    float _1108 = (1.0 - _1102) * ((_1089 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1109 = _1102 * _1089;
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1474;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1199 = fma(_1145, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137));
        float _1203 = fma(_1145, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137));
        float _1207 = fma(_1145, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137));
        float _1232 = _1137 + _896;
        float _1233 = _1141 + _897;
        float _1234 = _1145 + _898;
        float _1244 = fma(_1234, cbModelParam._m0[26u].z, fma(_1233, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1232)) - _1199;
        float _1245 = fma(_1234, cbModelParam._m0[27u].z, fma(_1233, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1232)) - _1203;
        float _1246 = fma(_1234, cbModelParam._m0[28u].z, fma(_1233, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1232)) - _1207;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1199 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1203 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[34u].z) + ((((((_1207 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1302 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1268.x + (-0.5));
        float _1304 = _1302 * (_1268.y + (-0.5));
        float _1305 = _1302 * (_1268.z + (-0.5));
        float _1312 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1275.x + (-0.5));
        float _1314 = _1312 * (_1275.y + (-0.5));
        float _1315 = _1312 * (_1275.z + (-0.5));
        float _1322 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1282.x + (-0.5));
        float _1324 = _1322 * (_1282.y + (-0.5));
        float _1325 = _1322 * (_1282.z + (-0.5));
        float _1332 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1289.x + (-0.5));
        float _1334 = _1332 * (_1289.y + (-0.5));
        float _1335 = _1332 * (_1289.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1356 = (dot(vec3(_896, _897, _898), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1366 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4169 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1368 + 1.0))) + _1373) * _1336;
        float _1383 = _1304 * 0.5;
        float _1384 = _1314 * 0.5;
        float _1385 = _1324 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_896, _897, _898), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4202 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1410 + 1.0))) + _1415) * _1337;
        float _1425 = _1305 * 0.5;
        float _1426 = _1315 * 0.5;
        float _1427 = _1325 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_896, _897, _898), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4235 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1452 + 1.0))) + _1457) * _1338;
        _1474 = _1305;
        _1476 = _1304;
        _1477 = _1303;
        _1478 = _1315;
        _1479 = _1314;
        _1480 = _1313;
        _1481 = _1325;
        _1482 = _1324;
        _1483 = _1323;
        _1484 = _1338;
        _1485 = _1337;
        _1486 = _1336;
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1475;
        _1476 = _1475;
        _1477 = _1475;
        _1478 = _1475;
        _1479 = _1475;
        _1480 = _1475;
        _1481 = _1475;
        _1482 = _1475;
        _1483 = _1475;
        _1484 = _1475;
        _1485 = _1475;
        _1486 = _1475;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1517 = fma(_1145, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137));
        float _1521 = fma(_1145, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137));
        float _1525 = fma(_1145, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137));
        float _1548 = _1137 + _896;
        float _1549 = _1141 + _897;
        float _1550 = _1145 + _898;
        float _1560 = fma(_1550, cbModelParam._m0[30u].z, fma(_1549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1548)) - _1517;
        float _1561 = fma(_1550, cbModelParam._m0[31u].z, fma(_1549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1548)) - _1521;
        float _1562 = fma(_1550, cbModelParam._m0[32u].z, fma(_1549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1548)) - _1525;
        float _1566 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
        float _1579 = ((_1566 * _1560) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1517 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1566 * _1561) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1521 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1566 * _1562) / cbModelParam._m0[35u].z) + ((((((_1525 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        float _1616 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1583.x + (-0.5));
        float _1618 = _1616 * (_1583.y + (-0.5));
        float _1619 = _1616 * (_1583.z + (-0.5));
        float _1626 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1590.x + (-0.5));
        float _1628 = _1626 * (_1590.y + (-0.5));
        float _1629 = _1626 * (_1590.z + (-0.5));
        float _1636 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1597.x + (-0.5));
        float _1638 = _1636 * (_1597.y + (-0.5));
        float _1639 = _1636 * (_1597.z + (-0.5));
        float _1646 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1604.x + (-0.5));
        float _1648 = _1646 * (_1604.y + (-0.5));
        float _1649 = _1646 * (_1604.z + (-0.5));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = _1617 * 0.5;
        float _1654 = _1627 * 0.5;
        float _1655 = _1637 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_896, _897, _898), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4298 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1680 + 1.0))) + _1685) * _1650;
        float _1695 = _1618 * 0.5;
        float _1696 = _1628 * 0.5;
        float _1697 = _1638 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_896, _897, _898), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4331 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1722 + 1.0))) + _1727) * _1651;
        float _1737 = _1619 * 0.5;
        float _1738 = _1629 * 0.5;
        float _1739 = _1639 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_896, _897, _898), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4364 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1764 + 1.0))) + _1769) * _1652;
        _1786 = _1619;
        _1787 = _1618;
        _1788 = _1617;
        _1789 = _1629;
        _1790 = _1628;
        _1791 = _1627;
        _1792 = _1639;
        _1793 = _1638;
        _1794 = _1637;
        _1795 = _1652;
        _1796 = _1651;
        _1797 = _1650;
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
    }
    else
    {
        _1786 = _1475;
        _1787 = _1475;
        _1788 = _1475;
        _1789 = _1475;
        _1790 = _1475;
        _1791 = _1475;
        _1792 = _1475;
        _1793 = _1475;
        _1794 = _1475;
        _1795 = _1475;
        _1796 = _1475;
        _1797 = _1475;
        _1798 = 0.0;
        _1799 = 0.0;
        _1800 = 0.0;
    }
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1487)) + _1487;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1488)) + _1488;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1489)) + _1489;
    float _1833 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1810));
    float _1854 = _1081 * 0.5;
    float _1855 = _1082 * 0.5;
    float _1856 = _1083 * 0.5;
    float _1857 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1860 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1863 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1897;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1870 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1474, _1478, _1481, _1484));
        float _1874 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1878 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1885 = dot(vec4(cbModelParam._m0[39u]), vec4(_1854, _1855, _1856, 1.0));
        _1897 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1897 = 1.0;
    }
    float _1908;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1899 = dot(vec4(cbModelParam._m0[40u]), vec4(_1854, _1855, _1856, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1899) ? 0.0 : (isnan(0.0) ? _1899 : max(0.0, _1899))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1912 = (_1908 * cbModelParam._m0[1u].x) + (_1897 * (1.0 - cbModelParam._m0[1u].x));
    float _1922 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _899);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1922 : min(cbModelParam._m0[25u].z, _1922));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1145, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1145, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1145, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1083, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081));
        float _1985 = fma(_1083, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081));
        float _1988 = fma(_1083, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2016 = frontier_phi_17_15_ladder;
        }
        float _2240;
        if (_1985 > 0.0)
        {
            _2240 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2240 = frontier_phi_26_22_ladder;
        }
        float _2497;
        if (_1988 > 0.0)
        {
            _2497 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2497 = frontier_phi_38_33_ladder;
        }
        float _2499 = isnan(_2240) ? _2016 : (isnan(_2016) ? _2240 : min(_2016, _2240));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1982) + _1971;
        float _2505 = (_2500 * _1985) + _1975;
        float _2506 = (_2500 * _1988) + _1979;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2507;
        float _2511 = _2507 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 > _2511) || ((_2505 < _2509) || ((_2504 < _2509) || (_2504 > _2511))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2506, cbModelParam._m0[9u].z, fma(_2505, cbModelParam._m0[9u].y, _2504 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2506, cbModelParam._m0[10u].z, fma(_2505, cbModelParam._m0[10u].y, _2504 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2506, cbModelParam._m0[11u].z, fma(_2505, cbModelParam._m0[11u].y, _2504 * cbModelParam._m0[11u].x))), _1923);
            frontier_phi_16_38_ladder = _2634.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2634.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2634.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_16_38_ladder_2;
        _2006 = frontier_phi_16_38_ladder_1;
        _2008 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1081, _1082, _1083), _1923);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _899);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2067 = fma(_1145, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137)) + cbModelParam._m0[21u].w;
        float _2071 = fma(_1145, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137)) + cbModelParam._m0[22u].w;
        float _2075 = fma(_1145, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137)) + cbModelParam._m0[23u].w;
        float _2078 = fma(_1083, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081));
        float _2081 = fma(_1083, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081));
        float _2084 = fma(_1083, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081));
        float _2245;
        if (_2078 > 0.0)
        {
            _2245 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2245 = frontier_phi_28_24_ladder;
        }
        float _2524;
        if (_2081 > 0.0)
        {
            _2524 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2524 = frontier_phi_40_35_ladder;
        }
        float _2737;
        if (_2084 > 0.0)
        {
            _2737 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2737 = frontier_phi_49_46_ladder;
        }
        float _2739 = isnan(_2524) ? _2245 : (isnan(_2245) ? _2524 : min(_2245, _2524));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _2078) + _2067;
        float _2745 = (_2740 * _2081) + _2071;
        float _2746 = (_2740 * _2084) + _2075;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2747;
        float _2750 = _2747 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2746 > _2750) || ((_2746 < _2748) || ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 < _2748) || (_2744 > _2750))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2945 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2746, cbModelParam._m0[17u].z, fma(_2745, cbModelParam._m0[17u].y, _2744 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2746, cbModelParam._m0[18u].z, fma(_2745, cbModelParam._m0[18u].y, _2744 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2746, cbModelParam._m0[19u].z, fma(_2745, cbModelParam._m0[19u].y, _2744 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_25_49_ladder = _2945.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2945.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2945.x * cbModelParam._m0[1u].z;
        }
        _2103 = frontier_phi_25_49_ladder_2;
        _2105 = frontier_phi_25_49_ladder_1;
        _2107 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1081, _1082, _1083), _2013);
        _2103 = _2087.x * cbModelParam._m0[1u].z;
        _2105 = _2087.y * cbModelParam._m0[1u].z;
        _2107 = _2087.z * cbModelParam._m0[1u].z;
    }
    float _2120 = (((_1108 * _1057) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2122 = (((_1108 * _1059) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2124 = (((_1108 * _1060) + _1109) * _1073) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2127 = fma(_2124, cbSceneParam._m0[89u].z, fma(_2122, cbSceneParam._m0[89u].y, _2120 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2124, cbSceneParam._m0[90u].z, fma(_2122, cbSceneParam._m0[90u].y, _2120 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2124, cbSceneParam._m0[91u].z, fma(_2122, cbSceneParam._m0[91u].y, _2120 * cbSceneParam._m0[91u].x));
    vec4 _2141 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_995, _996));
    float _2143 = _2141.w;
    float _2155 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2143);
    float _2156 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2143);
    float _2157 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2143);
    uvec4 _2161 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2163 = _2161.x * 14u;
    uint _2164 = _2163 + 13u;
    float _2171 = _1073 + (-1.0);
    float _2176 = (cbLight._m0[_2164].x * _2171) + 1.0;
    float _2177 = (cbLight._m0[_2164].y * _2171) + 1.0;
    float _2178 = (cbLight._m0[_2164].z * _2171) + 1.0;
    float _2179 = (cbLight._m0[_2164].w * _2171) + 1.0;
    uint _2180 = _2163 + 5u;
    float _2186 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2190 = _2163 + 4u;
    float _2199 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
    uint _2203 = _2163 | 1u;
    float _2214 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_896, _897, _898));
    float _2217 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_896, _897, _898));
    float _4500 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _4511 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2222 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2224 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2231 = ((cbLight._m0[_2180].x * _2186) * _2224) + (((cbLight._m0[_2190].x * _2155) * _2199) * _2222);
    float _2232 = ((_2186 * cbLight._m0[_2180].y) * _2224) + (((cbLight._m0[_2190].y * _2156) * _2199) * _2222);
    float _2233 = ((_2186 * cbLight._m0[_2180].z) * _2224) + (((cbLight._m0[_2190].z * _2157) * _2199) * _2222);
    uvec4 _2237 = floatBitsToUint(cbLight._m0[_2163 + 12u]);
    bool _2239 = _2237.x == 0u;
    float _2250;
    float _2252;
    float _2254;
    if (_2239)
    {
        _2250 = _2231;
        _2252 = _2232;
        _2254 = _2233;
    }
    else
    {
        uint _2258 = _2163 + 6u;
        float _2274 = (dot(vec3(cbLight._m0[_2163 + 2u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2275 = _2274 * _2274;
        float _4522 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2276 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2277 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2250 = (((cbLight._m0[_2258].x * 0.3183098733425140380859375) * _2276) * _2277) + _2231;
        _2252 = (((cbLight._m0[_2258].y * 0.3183098733425140380859375) * _2276) * _2277) + _2232;
        _2254 = (((cbLight._m0[_2258].z * 0.3183098733425140380859375) * _2276) * _2277) + _2233;
    }
    bool _2257 = _2237.y == 0u;
    float _2295;
    float _2297;
    float _2299;
    if (_2257)
    {
        _2295 = _2250;
        _2297 = _2252;
        _2299 = _2254;
    }
    else
    {
        uint _2468 = _2163 + 7u;
        float _2484 = (dot(vec3(cbLight._m0[_2163 + 3u].xyz), vec3(_896, _897, _898)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4538 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2487 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2295 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2250;
        _2297 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2252;
        _2299 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2254;
    }
    uint _2302 = _2163 + 8u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _899) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2163].x + _975;
    float _2318 = cbLight._m0[_2163].y + _976;
    float _2319 = cbLight._m0[_2163].z + _977;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2163].xyz));
    float _4554 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _2331 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2332 = dot(vec3(_896, _897, _898), vec3(_2324, _2325, _2326));
    float _4576 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2324, _2325, _2326));
    float _4587 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2316 * _2316;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2352 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2353 = 0.959999978542327880859375 - _1054;
    float _2355 = 0.959999978542327880859375 - _1055;
    float _2356 = 0.959999978542327880859375 - _1056;
    float _2363 = 1.0 - _2316;
    float _2374 = (0.5 / (((_2331 * ((_2330 * _2363) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2363) + _2316) * _2330))) * _2330;
    float _4598 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2376 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    uint _2390 = _2163 + 9u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _899) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2203].x + _975;
    float _2404 = cbLight._m0[_2203].y + _976;
    float _2405 = cbLight._m0[_2203].z + _977;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2203].xyz));
    float _4609 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2417 = dot(vec3(_896, _897, _898), vec3(_2410, _2411, _2412));
    float _4620 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2421 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2410, _2411, _2412));
    float _4631 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2425 = _2402 * _2402;
    float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
    float _2436 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2443 = 1.0 - _2402;
    float _2453 = (0.5 / (((_2331 * ((_2416 * _2443) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2443) + _2402) * _2416))) * _2416;
    float _4642 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
    float _2465 = (((((_2436 * _2353) + _1057) * cbLight._m0[_2390].x) * _2455) * _2186) + ((((cbLight._m0[_2302].x * _2155) * ((_2352 * _2353) + _1057)) * _2376) * _2199);
    float _2466 = (((((_2436 * _2355) + _1059) * cbLight._m0[_2390].y) * _2455) * _2186) + ((((cbLight._m0[_2302].y * _2156) * ((_2352 * _2355) + _1059)) * _2376) * _2199);
    float _2467 = (((((_2436 * _2356) + _1060) * cbLight._m0[_2390].z) * _2455) * _2186) + ((((cbLight._m0[_2302].z * _2157) * ((_2352 * _2356) + _1060)) * _2376) * _2199);
    float _2529;
    float _2531;
    float _2533;
    if (_2239)
    {
        _2529 = _2465;
        _2531 = _2466;
        _2533 = _2467;
    }
    else
    {
        uint _2535 = _2163 + 2u;
        uint _2539 = _2163 + 10u;
        float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _899) * 0.949999988079071044921875);
        float _2554 = _2553 * _2553;
        float _2555 = cbLight._m0[_2535].x + _975;
        float _2556 = cbLight._m0[_2535].y + _976;
        float _2557 = cbLight._m0[_2535].z + _977;
        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
        float _2562 = _2561 * _2555;
        float _2563 = _2561 * _2556;
        float _2564 = _2561 * _2557;
        float _2565 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2535].xyz));
        float _4653 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2569 = dot(vec3(_896, _897, _898), vec3(_2562, _2563, _2564));
        float _4664 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2573 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2562, _2563, _2564));
        float _4675 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2577 = _2554 * _2554;
        float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
        float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2595 = 1.0 - _2554;
        float _2605 = (0.5 / (((_2331 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2595) + _2554) * _2568))) * _2568;
        float _4686 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2607 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
        float _2608 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
        _2529 = (((((_2588 * _2353) + _1057) * cbLight._m0[_2539].x) * _2607) * _2608) + _2465;
        _2531 = (((((_2588 * _2355) + _1059) * cbLight._m0[_2539].y) * _2607) * _2608) + _2466;
        _2533 = (((((_2588 * _2356) + _1060) * cbLight._m0[_2539].z) * _2607) * _2608) + _2467;
    }
    float _2643;
    float _2645;
    float _2647;
    if (_2257)
    {
        _2643 = _2529;
        _2645 = _2531;
        _2647 = _2533;
    }
    else
    {
        uint _2654 = _2163 + 3u;
        uint _2658 = _2163 + 11u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _899) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _975;
        float _2675 = cbLight._m0[_2654].y + _976;
        float _2676 = cbLight._m0[_2654].z + _977;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_896, _897, _898), vec3(cbLight._m0[_2654].xyz));
        float _4702 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2688 = dot(vec3(_896, _897, _898), vec3(_2681, _2682, _2683));
        float _4713 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4724 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2714 = 1.0 - _2673;
        float _2724 = (0.5 / (((_2331 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2714) + _2673) * _2687))) * _2687;
        float _4735 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2643 = (((((_2707 * _2353) + _1057) * cbLight._m0[_2658].x) * _2726) * _2727) + _2529;
        _2645 = (((((_2707 * _2355) + _1059) * cbLight._m0[_2658].y) * _2726) * _2727) + _2531;
        _2647 = (((((_2707 * _2356) + _1060) * cbLight._m0[_2658].z) * _2726) * _2727) + _2533;
    }
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    if (_2161.y == 0u)
    {
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2802;
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2802;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2802;
        uvec4 _2817 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2818 = _2817.x;
        uint _2829 = uint((float(_2817.y) * floor(float(uint(cbSceneParam._m0[85u].y * _996) / _2818))) + floor(float(uint(cbSceneParam._m0[85u].x * _995) / _2818)));
        float _2839 = (log2(_2805 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2840 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        uint _2843 = uint(isnan(14.0) ? _2840 : (isnan(_2840) ? 14.0 : min(_2840, 14.0)));
        uvec4 _2848 = texelFetch(g_lightClusterGridBuffer, int(((_2843 << 2u) + (_2829 << 6u)) >> 2u));
        uint _2849 = _2848.x;
        uint _2850 = _2817.z;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        if (((((1u << ((_2850 >> 4u) & 15u)) + 4294967295u) & _2849) == 0u) || ((_2850 & 240u) == 0u))
        {
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
        }
        else
        {
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            uint _3108 = 0u;
            uint _3117;
            bool _3118;
            for (;;)
            {
                _3117 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                _3118 = _3117 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3118)
                {
                    frontier_phi_66_pred = _3102;
                    frontier_phi_66_pred_1 = _3107;
                    frontier_phi_66_pred_2 = _3106;
                    frontier_phi_66_pred_3 = _3105;
                    frontier_phi_66_pred_4 = _3104;
                    frontier_phi_66_pred_5 = _3103;
                }
                else
                {
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    uint _3253;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3117;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    for (;;)
                    {
                        uint _3257 = uint(findLSB(_3253)) + (_3108 << 5u);
                        uint _3254 = (_3253 + 4294967295u) & _3253;
                        uint _3259 = _3257 * 48u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3279 = (_3257 * 48u) + 4u;
                        vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3298 = (_3257 * 48u) + 8u;
                        vec3 _3309 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x));
                        float _3313 = _3273.x - _2803;
                        float _3314 = _3273.y - _2804;
                        float _3315 = _3273.z - _2805;
                        float _3316 = dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315));
                        float _3319 = inversesqrt(_3316);
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3323 = dot(vec3(_1014, _1017, _1020), vec3(_3320, _3321, _3322));
                        float _3328 = 1.0 - (_3316 * _3273.w);
                        float _4761 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3330 = sqrt(_3316) * _3292.w;
                        float _3333 = 1.39999997615814208984375 / (_3330 + 1.39999997615814208984375);
                        float _3334 = _3333 * _3333;
                        float _3337 = ((1.0 - _3334) * _3323) + _3334;
                        float _3340 = _3330 * _3330;
                        float _3344 = ((isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0))) * _3329) / ((_3340 * 0.699999988079071044921875) + 1.0);
                        float _3348 = (-0.0) - _2803;
                        float _3349 = (-0.0) - _2804;
                        float _3350 = (-0.0) - _2805;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3365 = exp2(log2(1.0 / ((_3340 * 3.5) + 5.0)) * 0.25);
                        float _3366 = 1.0 - _1089;
                        float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                        float _3374 = _3373 * _3373;
                        float _3375 = _3374 * _3374;
                        float _3376 = _3355 + _3320;
                        float _3377 = _3356 + _3321;
                        float _3378 = _3357 + _3322;
                        float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                        float _3386 = dot(vec3(_1014, _1017, _1020), vec3(_3355, _3356, _3357));
                        float _4777 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3389 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3390 = dot(vec3(_1014, _1017, _1020), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                        float _4788 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                        float _3393 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                        float _3398 = _3333 * _3374;
                        float _3399 = _3398 * _3398;
                        float _3402 = ((1.0 - _3399) * _3323) + _3399;
                        float _4799 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3403 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3404 = 1.0 - _3374;
                        float _3414 = (0.5 / (((_3403 * ((_3389 * _3404) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3403 * _3404) + _3374) * _3389))) * _3403;
                        float _4810 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3425 = (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3397 * _3397) * ((_3340 * 2.1991131305694580078125) + 3.141590118408203125))) * _3329;
                        _3177 = (_3344 * _3292.x) + _3250;
                        _3178 = (_3344 * _3292.y) + _3251;
                        _3179 = (_3344 * _3292.z) + _3252;
                        _3174 = (_3425 * _3309.x) + _3247;
                        _3175 = (_3425 * _3309.y) + _3248;
                        _3176 = (_3425 * _3309.z) + _3249;
                        if (_3254 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3254;
                        }
                    }
                    frontier_phi_66_pred = _3174;
                    frontier_phi_66_pred_1 = _3179;
                    frontier_phi_66_pred_2 = _3178;
                    frontier_phi_66_pred_3 = _3177;
                    frontier_phi_66_pred_4 = _3176;
                    frontier_phi_66_pred_5 = _3175;
                }
                _2951 = frontier_phi_66_pred;
                _2961 = frontier_phi_66_pred_1;
                _2959 = frontier_phi_66_pred_2;
                _2957 = frontier_phi_66_pred_3;
                _2955 = frontier_phi_66_pred_4;
                _2953 = frontier_phi_66_pred_5;
                uint _3109 = _3108 + 1u;
                if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3102 = _2951;
                    _3103 = _2953;
                    _3104 = _2955;
                    _3105 = _2957;
                    _3106 = _2959;
                    _3107 = _2961;
                    _3108 = _3109;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
        }
        uvec4 _2964 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2965 = _2964.z;
        uint _2967 = (_2965 >> 8u) & 15u;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((4294967295u << _2967) & _2849) == 0u)
        {
            _3070 = _2950;
            _3072 = _2952;
            _3074 = _2954;
            _3076 = _2956;
            _3078 = _2958;
            _3080 = _2960;
        }
        else
        {
            float _3095 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
            float _3096 = _3095 * _2803;
            float _3097 = _3095 * _2804;
            float _3098 = _3095 * _2805;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2967 < ((_2965 >> 12u) & 15u))
            {
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3230 = _2950;
                float _3231 = _2952;
                float _3232 = _2954;
                float _3233 = _2956;
                float _3234 = _2958;
                float _3235 = _2960;
                uint _3236 = _2967;
                uint _3245;
                bool _3246;
                for (;;)
                {
                    _3245 = texelFetch(g_lightClassification, int((((_2843 << 5u) + (_2829 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                    _3246 = _3245 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3246)
                    {
                        frontier_phi_77_pred = _3235;
                        frontier_phi_77_pred_1 = _3234;
                        frontier_phi_77_pred_2 = _3233;
                        frontier_phi_77_pred_3 = _3232;
                        frontier_phi_77_pred_4 = _3231;
                        frontier_phi_77_pred_5 = _3230;
                    }
                    else
                    {
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        uint _3458 = _3245;
                        uint _3459;
                        vec4 _3484;
                        float _3485;
                        vec4 _3500;
                        vec3 _3512;
                        vec4 _3527;
                        vec4 _3542;
                        float _3588;
                        bool _3589;
                        for (;;)
                        {
                            uint _3469 = ((_3236 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3458));
                            _3459 = (_3458 + 4294967295u) & _3458;
                            uint _3471 = _3469 * 40u;
                            _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            _3485 = _3484.w;
                            uint _3487 = (_3469 * 40u) + 4u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3469 * 40u) + 8u;
                            _3512 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x));
                            uint _3514 = (_3469 * 40u) + 16u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3469 * 40u) + 20u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3469 * 40u) + 24u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3563 = (_3469 * 40u) + 28u;
                            vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            _3588 = fma(_2805, _3576.z, fma(_2804, _3576.y, _3576.x * _2803)) + _3576.w;
                            _3589 = !((fma(_2805, _3557.z, fma(_2804, _3557.y, _3557.x * _2803)) + _3557.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3589)
                            {
                                float _3616 = _3484.x - _2803;
                                float _3617 = _3484.y - _2804;
                                float _3618 = _3484.z - _2805;
                                float _3619 = dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618));
                                float _3622 = inversesqrt(_3619);
                                float _3623 = _3622 * _3616;
                                float _3624 = _3622 * _3617;
                                float _3625 = _3622 * _3618;
                                float _3629 = 1.0 - (_3619 / (_3485 * _3485));
                                float _4821 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3634 = sqrt(_3619) * _3500.w;
                                float _3636 = 1.39999997615814208984375 / (_3634 + 1.39999997615814208984375);
                                float _3637 = _3636 * _3636;
                                float _3640 = ((1.0 - _3637) * dot(vec3(_3623, _3624, _3625), vec3(_1014, _1017, _1020))) + _3637;
                                float _3643 = _3634 * _3634;
                                float _3647 = (fma(_2805, _3527.z, fma(_2804, _3527.y, _3527.x * _2803)) + _3527.w) / _3588;
                                float _3648 = (fma(_2805, _3542.z, fma(_2804, _3542.y, _3542.x * _2803)) + _3542.w) / _3588;
                                float _3652 = 1.0 - dot(vec2(_3647, _3648), vec2(_3647, _3648));
                                float _4837 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3654 = _3653 * (((isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0))) * _3630) / ((_3643 * 0.699999988079071044921875) + 1.0));
                                float _3666 = exp2(log2(1.0 / ((_3643 * 3.5) + 5.0)) * 0.25);
                                float _3667 = 1.0 - _1089;
                                float _3674 = sqrt(1.0 - ((1.0 - (_3667 * _3667)) * (1.0 - (_3666 * _3666))));
                                float _3675 = _3674 * _3674;
                                float _3676 = _3675 * _3675;
                                float _3677 = _3623 - _3096;
                                float _3678 = _3624 - _3097;
                                float _3679 = _3625 - _3098;
                                float _3683 = inversesqrt(dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679)));
                                float _3687 = dot(vec3(_1014, _1017, _1020), vec3((-0.0) - _3096, (-0.0) - _3097, (-0.0) - _3098));
                                float _4848 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3691 = dot(vec3(_1014, _1017, _1020), vec3(_3683 * _3677, _3683 * _3678, _3683 * _3679));
                                float _4859 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3694 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3698 = ((_3694 * _3694) * (_3676 + (-1.0))) + 1.0;
                                float _3699 = _3636 * _3675;
                                float _3700 = _3699 * _3699;
                                float _3706 = ((1.0 - _3700) * dot(vec3(_1014, _1017, _1020), vec3(_3623, _3624, _3625))) + _3700;
                                float _4870 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3708 = 1.0 - _3675;
                                float _3718 = (0.5 / (((_3707 * ((_3690 * _3708) + _3675)) + 9.9999999392252902907785028219223e-09) + (((_3707 * _3708) + _3675) * _3690))) * _3707;
                                float _4881 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3728 = (_3653 * _3630) * (((_3676 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3698 * _3698) * ((_3643 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3654 * _3500.y;
                                frontier_phi_83_pred_1 = _3654 * _3500.x;
                                frontier_phi_83_pred_2 = _3728 * _3512.z;
                                frontier_phi_83_pred_3 = _3728 * _3512.y;
                                frontier_phi_83_pred_4 = _3728 * _3512.x;
                                frontier_phi_83_pred_5 = _3654 * _3500.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3736 = frontier_phi_83_pred;
                            _3735 = frontier_phi_83_pred_1;
                            _3734 = frontier_phi_83_pred_2;
                            _3733 = frontier_phi_83_pred_3;
                            _3732 = frontier_phi_83_pred_4;
                            _3737 = frontier_phi_83_pred_5;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3444 = _3737 + _3457;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3441 = _3734 + _3454;
                            if (_3459 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3459;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3444;
                        frontier_phi_77_pred_1 = _3443;
                        frontier_phi_77_pred_2 = _3442;
                        frontier_phi_77_pred_3 = _3441;
                        frontier_phi_77_pred_4 = _3440;
                        frontier_phi_77_pred_5 = _3439;
                    }
                    _3081 = frontier_phi_77_pred;
                    _3079 = frontier_phi_77_pred_1;
                    _3077 = frontier_phi_77_pred_2;
                    _3075 = frontier_phi_77_pred_3;
                    _3073 = frontier_phi_77_pred_4;
                    _3071 = frontier_phi_77_pred_5;
                    uint _3237 = _3236 + 1u;
                    if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3230 = _3071;
                        _3231 = _3073;
                        _3232 = _3075;
                        _3233 = _3077;
                        _3234 = _3079;
                        _3235 = _3081;
                        _3236 = _3237;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3075;
                frontier_phi_58_59_ladder_1 = _3081;
                frontier_phi_58_59_ladder_2 = _3079;
                frontier_phi_58_59_ladder_3 = _3077;
                frontier_phi_58_59_ladder_4 = _3073;
                frontier_phi_58_59_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_58_59_ladder = _2954;
                frontier_phi_58_59_ladder_1 = _2960;
                frontier_phi_58_59_ladder_2 = _2958;
                frontier_phi_58_59_ladder_3 = _2956;
                frontier_phi_58_59_ladder_4 = _2952;
                frontier_phi_58_59_ladder_5 = _2950;
            }
            _3070 = frontier_phi_58_59_ladder_5;
            _3072 = frontier_phi_58_59_ladder_4;
            _3074 = frontier_phi_58_59_ladder;
            _3076 = frontier_phi_58_59_ladder_3;
            _3078 = frontier_phi_58_59_ladder_2;
            _3080 = frontier_phi_58_59_ladder_1;
        }
        float _3085 = isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0));
        _2862 = (_3085 * _3076) + _2295;
        _2864 = (_3085 * _3078) + _2297;
        _2866 = (_3085 * _3080) + _2299;
        _2868 = ((_3070 * _1057) * _3085) + _2643;
        _2870 = ((_3072 * _1059) * _3085) + _2645;
        _2872 = ((_3074 * _1060) * _3085) + _2647;
    }
    else
    {
        _2862 = _2295;
        _2864 = _2297;
        _2866 = _2299;
        _2868 = _2643;
        _2870 = _2645;
        _2872 = _2647;
    }
    float _4897 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _4908 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4919 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _2889 = ((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2862 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1073))) + ((_2868 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _2890 = ((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2864 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1073))) + ((_2870 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2866 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1073))) + ((_2872 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    uint _2892 = _285 + 6u;
    float _2900 = _995 / cbSceneParam._m0[86u].x;
    float _2901 = _996 / cbSceneParam._m0[86u].y;
    vec4 _2915 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, (log2((isnan(cbSceneParam._m0[77u].w) ? _918 : (isnan(_918) ? cbSceneParam._m0[77u].w : min(_918, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2917 = _2915.x;
    float _2918 = _2915.y;
    float _2919 = _2915.z;
    float _2920 = _2915.w;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_918 > cbSceneParam._m0[78u].w)
    {
        float _2975 = isnan(_918) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _918 : min(cbSceneParam._m0[80u].w, _918));
        float _2976 = _2975 / _918;
        float _2987 = _2976 * _968;
        float _2988 = _969 * _2976;
        float _2989 = (-0.0) - _2988;
        float _2990 = _2976 * _970;
        float _2992 = (cbSceneParam._m0[77u].w * _2989) / _2975;
        float _2993 = _2992 + cbSceneParam._m0[79u].w;
        float _2994 = cbSceneParam._m0[79u].w - _2988;
        float _3000 = sqrt(((_2987 * _2987) + (_2988 * _2988)) + (_2990 * _2990));
        float _3003 = (1.0 - (cbSceneParam._m0[77u].w / _2975)) * _3000;
        float _3008 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3010 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3187;
        if (abs((_2989 - _2992) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3187 = ((((_2993 > 0.0) ? exp2(_3008 * _2993) : (2.0 - exp2(_3010 * _2993))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3003;
        }
        else
        {
            float _3131 = 1.0 / cbSceneParam._m0[80u].x;
            float _3132 = isnan(_2994) ? _2993 : (isnan(_2993) ? _2994 : max(_2993, _2994));
            float _3133 = isnan(_2994) ? _2993 : (isnan(_2993) ? _2994 : min(_2993, _2994));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            _3187 = ((abs(_3000 / _2989) * cbSceneParam._m0[80u].y) * ((((_3142 - _3143) * 2.0) - ((exp2(_3008 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0)))) - exp2(_3008 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))))) * _3131)) - ((exp2(_3010 * _3142) - exp2(_3010 * _3143)) * _3131))) + (_3003 * cbSceneParam._m0[80u].z);
        }
        vec4 _3189 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2900, _2901, 1.0), 0.0);
        float _3198 = exp2((_3187 * (-1.44269502162933349609375)) * (1.0 - _3189.w));
        float _3199 = log2(_3198);
        float _3215 = log2(_2920);
        _3012 = (exp2(_3215 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].x)) * _3189.x) / cbSceneParam._m0[78u].x)) + _2917;
        _3014 = (exp2(_3215 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].y)) * _3189.y) / cbSceneParam._m0[78u].y)) + _2918;
        _3016 = (exp2(_3215 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].z)) * _3189.z) / cbSceneParam._m0[78u].z)) + _2919;
        _3018 = _3198 * _2920;
    }
    else
    {
        _3012 = _2917;
        _3014 = _2918;
        _3016 = _2919;
        _3018 = _2920;
    }
    bool _3225;
    vec4 _3028;
    vec4 _3050;
    float _3052;
    float _3056;
    float _3057;
    float _3058;
    float _3059;
    bool _3069;
    for (;;)
    {
        _3028 = cbMatDynParam._m0[0u];
        float _3030 = roundEven(_3028.y);
        bool _3031 = _3030 == 3.0;
        float _3032 = log2(_3018);
        float _3039 = exp2(_3032 * cbSceneParam._m0[78u].x) * _2889;
        float _3040 = exp2(_3032 * cbSceneParam._m0[78u].y) * _2890;
        float _3041 = exp2(_3032 * cbSceneParam._m0[78u].z) * _2891;
        float _3048 = _984 + (-0.5);
        _3050 = cbMtdParam._m0[1u];
        _3052 = _3050.y * _3048;
        float _3055 = (_3030 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3056 = _3055 * (_3031 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3012)));
        _3057 = _3055 * (_3031 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3014)));
        _3058 = _3055 * (_3031 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3016)));
        _3059 = _3048 * 0.999000012874603271484375;
        _3069 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3069)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3059) < 0.5)
            {
                _3225 = true;
                break;
            }
        }
        uint _3166 = _1033 + uint(_3028.w);
        if ((cbInstanceData._m0[_3166].w < 1.0) && ((cbInstanceData._m0[_3166].w + _3059) < 0.5))
        {
            _3225 = true;
            break;
        }
        if ((_3052 + 1.0) < _3050.x)
        {
            _3225 = true;
            break;
        }
        _3225 = false;
        break;
    }
    float _3430;
    if (_3225)
    {
        discard_state = true;
        _3430 = 0.0;
    }
    else
    {
        _3430 = cbInstanceData._m0[_2892].w;
    }
    SV_Target.x = _3056;
    SV_Target.y = _3057;
    SV_Target.z = _3058;
    SV_Target.w = _3430;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2892].w;
    discard_exit();
}


