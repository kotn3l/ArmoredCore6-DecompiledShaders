#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1348;
float _3730;
float _3731;
float _3732;
float _3733;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3742 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3753 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3764 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _408 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _410 = _408.x;
    float _422 = dot(vec4(_410, _408.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _439 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _376.x) * 2.0) - ((((_410 - _422) * cbMtdParam._m0[23u].w) + _422) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3775 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _447 = (_440 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _448 = (_440 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _449 = (_440 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _466 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _488 = _486.x;
    float _498 = dot(vec4(_488, _486.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _512 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _376.y) * 2.0) - ((((_488 - _498) * cbMtdParam._m0[23u].w) + _498) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3786 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _520 = (_513 * ((_466.x * cbMtdParam._m0[13u].x) - _447)) + _447;
    float _521 = (_513 * ((_466.y * cbMtdParam._m0[13u].y) - _448)) + _448;
    float _522 = (_513 * ((_466.z * cbMtdParam._m0[13u].z) - _449)) + _449;
    float _526 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _520;
    float _529 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _521;
    float _532 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _522;
    float _539 = ((_520 - _526) * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) + _526;
    float _540 = ((_521 - _529) * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) + _529;
    float _541 = ((_522 - _532) * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) + _532;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    float _604 = ((_576.x - _595) * _440) + _595;
    float _605 = ((_576.y - _596) * _440) + _596;
    float _606 = ((_576.z - _597) * _440) + _597;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _631 = ((_618.z - _606) * _513) + _606;
    float _634 = ((((_618.x - _604) * _513) + _604) * 2.0) + (-1.0);
    float _635 = ((((_618.y - _605) * _513) + _605) * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3797 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _673 = (_634 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_553.x * 2.0) + (-1.0)))) + (((_661.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _674 = (_635 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_553.y * 2.0) + (-1.0)))) + (((_661.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _702 = _700.x;
    float _720 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _702) * _440) + _702;
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _293) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _294) + cbTextureTilingScale._m0[21u].w));
    float _738 = ((_733.x - _720) * _513) + _720;
    float _742 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _738) * cbMtdParam._m0[19u].z) + _738;
    float _747 = (((_553.z - _631) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _631;
    float _751 = ((_661.z - _747) * cbMtdParam._m0[19u].w) + _747;
    float _753 = cbMtdParam._m0[22u].x + _661.w;
    float _756 = fma(_641, _240 * NORMAL.x, fma(_674, _247 * TANGENT.x, (_233 * _225) * _673));
    float _759 = fma(_641, _240 * NORMAL.y, fma(_674, _247 * TANGENT.y, (_233 * _226) * _673));
    float _762 = fma(_641, _240 * NORMAL.z, fma(_674, _247 * TANGENT.z, (_233 * _227) * _673));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _3808 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _770 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _3830 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3841 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3852 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3863 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _775 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    vec4 _854 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _856 = _854.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1028 = sqrt(((_840 * _840) + (_841 * _841)) + (_842 * _842));
        float _1034 = (cbMatDynParam._m0[5u].x * _1028) + cbMatDynParam._m0[5u].y;
        float _3874 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1039 = (cbMatDynParam._m0[5u].z * _1028) + cbMatDynParam._m0[5u].w;
        float _3885 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) - _1035)) + _1035) < ((_856 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _867 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _868 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _886 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _889 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _892 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    uint _905 = _274 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_906].z;
    float _3896 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _918 = 1.0 - _775;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _775;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _775;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _775;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _867, cbSceneParam._m0[86u].y * _868));
    float _945 = ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * TEXCOORD_5.w) * _941.x;
    float _946 = dot(vec3(_767, _768, _769), vec3(_847, _848, _849));
    float _949 = _946 * 2.0;
    float _953 = (_949 * _767) - _847;
    float _954 = (_949 * _768) - _848;
    float _955 = (_949 * _769) - _849;
    float _959 = abs(dot(vec3(_847, _848, _849), vec3(_767, _768, _769)));
    float _3929 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _961 = sqrt(_770);
    float _974 = exp2((_961 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_961 * 3.0));
    float _980 = (1.0 - _974) * ((_961 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _981 = _974 * _961;
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1347;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1072 = fma(_1017, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009));
        float _1076 = fma(_1017, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009));
        float _1080 = fma(_1017, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009));
        float _1105 = _1009 + _767;
        float _1106 = _1013 + _768;
        float _1107 = _1017 + _769;
        float _1117 = fma(_1107, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105)) - _1072;
        float _1118 = fma(_1107, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105)) - _1076;
        float _1119 = fma(_1107, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105)) - _1080;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1072 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1076 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[34u].z) + ((((((_1080 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1175 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1141.x + (-0.5));
        float _1177 = _1175 * (_1141.y + (-0.5));
        float _1178 = _1175 * (_1141.z + (-0.5));
        float _1185 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1148.x + (-0.5));
        float _1187 = _1185 * (_1148.y + (-0.5));
        float _1188 = _1185 * (_1148.z + (-0.5));
        float _1195 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1155.x + (-0.5));
        float _1197 = _1195 * (_1155.y + (-0.5));
        float _1198 = _1195 * (_1155.z + (-0.5));
        float _1205 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1162.x + (-0.5));
        float _1207 = _1205 * (_1162.y + (-0.5));
        float _1208 = _1205 * (_1162.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1229 = (dot(vec3(_767, _768, _769), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1239 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3977 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1241 + 1.0))) + _1246) * _1209;
        float _1256 = _1177 * 0.5;
        float _1257 = _1187 * 0.5;
        float _1258 = _1197 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_767, _768, _769), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4010 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1283 + 1.0))) + _1288) * _1210;
        float _1298 = _1178 * 0.5;
        float _1299 = _1188 * 0.5;
        float _1300 = _1198 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_767, _768, _769), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4043 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1325 + 1.0))) + _1330) * _1211;
        _1347 = _1178;
        _1349 = _1177;
        _1350 = _1176;
        _1351 = _1188;
        _1352 = _1187;
        _1353 = _1186;
        _1354 = _1198;
        _1355 = _1197;
        _1356 = _1196;
        _1357 = _1211;
        _1358 = _1210;
        _1359 = _1209;
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1348;
        _1349 = _1348;
        _1350 = _1348;
        _1351 = _1348;
        _1352 = _1348;
        _1353 = _1348;
        _1354 = _1348;
        _1355 = _1348;
        _1356 = _1348;
        _1357 = _1348;
        _1358 = _1348;
        _1359 = _1348;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1389 = fma(_1017, cbModelParam._m0[30u].z, fma(_1013, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1009));
        float _1393 = fma(_1017, cbModelParam._m0[31u].z, fma(_1013, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1009));
        float _1397 = fma(_1017, cbModelParam._m0[32u].z, fma(_1013, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1009));
        float _1420 = _1009 + _767;
        float _1421 = _1013 + _768;
        float _1422 = _1017 + _769;
        float _1432 = fma(_1422, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1420)) - _1389;
        float _1433 = fma(_1422, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1420)) - _1393;
        float _1434 = fma(_1422, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1420)) - _1397;
        float _1438 = inversesqrt(dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434)));
        float _1451 = ((_1438 * _1432) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1389 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1438 * _1433) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1393 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1438 * _1434) / cbModelParam._m0[35u].z) + ((((((_1397 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1488 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1455.x + (-0.5));
        float _1490 = _1488 * (_1455.y + (-0.5));
        float _1491 = _1488 * (_1455.z + (-0.5));
        float _1498 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1462.x + (-0.5));
        float _1500 = _1498 * (_1462.y + (-0.5));
        float _1501 = _1498 * (_1462.z + (-0.5));
        float _1508 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1469.x + (-0.5));
        float _1510 = _1508 * (_1469.y + (-0.5));
        float _1511 = _1508 * (_1469.z + (-0.5));
        float _1518 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1476.x + (-0.5));
        float _1520 = _1518 * (_1476.y + (-0.5));
        float _1521 = _1518 * (_1476.z + (-0.5));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = _1489 * 0.5;
        float _1526 = _1499 * 0.5;
        float _1527 = _1509 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_767, _768, _769), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4106 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1552 + 1.0))) + _1557) * _1522;
        float _1567 = _1490 * 0.5;
        float _1568 = _1500 * 0.5;
        float _1569 = _1510 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_767, _768, _769), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4139 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1594 + 1.0))) + _1599) * _1523;
        float _1609 = _1491 * 0.5;
        float _1610 = _1501 * 0.5;
        float _1611 = _1511 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_767, _768, _769), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4172 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1636 + 1.0))) + _1641) * _1524;
        _1658 = _1491;
        _1659 = _1490;
        _1660 = _1489;
        _1661 = _1501;
        _1662 = _1500;
        _1663 = _1499;
        _1664 = _1511;
        _1665 = _1510;
        _1666 = _1509;
        _1667 = _1524;
        _1668 = _1523;
        _1669 = _1522;
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1348;
        _1659 = _1348;
        _1660 = _1348;
        _1661 = _1348;
        _1662 = _1348;
        _1663 = _1348;
        _1664 = _1348;
        _1665 = _1348;
        _1666 = _1348;
        _1667 = _1348;
        _1668 = _1348;
        _1669 = _1348;
        _1670 = 0.0;
        _1671 = 0.0;
        _1672 = 0.0;
    }
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1360)) + _1360;
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1361)) + _1361;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1362)) + _1362;
    float _1705 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1682));
    float _1726 = _953 * 0.5;
    float _1727 = _954 * 0.5;
    float _1728 = _955 * 0.5;
    float _1729 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1732 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1735 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1769;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1742 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1347, _1351, _1354, _1357));
        float _1746 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1750 = dot(vec4(_1726, _1727, _1728, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1757 = dot(vec4(cbModelParam._m0[39u]), vec4(_1726, _1727, _1728, 1.0));
        _1769 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1757) ? 0.0 : (isnan(0.0) ? _1757 : max(0.0, _1757))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1769 = 1.0;
    }
    float _1780;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1771 = dot(vec4(cbModelParam._m0[40u]), vec4(_1726, _1727, _1728, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1771) ? 0.0 : (isnan(0.0) ? _1771 : max(0.0, _1771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1784 = (_1780 * cbModelParam._m0[1u].x) + (_1769 * (1.0 - cbModelParam._m0[1u].x));
    float _1794 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _770);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1794 : min(cbModelParam._m0[25u].z, _1794));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1844 = fma(_1017, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009)) + cbModelParam._m0[13u].w;
        float _1848 = fma(_1017, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009)) + cbModelParam._m0[14u].w;
        float _1852 = fma(_1017, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009)) + cbModelParam._m0[15u].w;
        float _1855 = fma(_955, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953));
        float _1858 = fma(_955, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953));
        float _1861 = fma(_955, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953));
        float _1889;
        if (_1855 > 0.0)
        {
            _1889 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1889 = frontier_phi_17_15_ladder;
        }
        float _2092;
        if (_1858 > 0.0)
        {
            _2092 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2092 = frontier_phi_26_22_ladder;
        }
        float _2346;
        if (_1861 > 0.0)
        {
            _2346 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2346 = frontier_phi_38_33_ladder;
        }
        float _2348 = isnan(_2092) ? _1889 : (isnan(_1889) ? _2092 : min(_1889, _2092));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1855) + _1844;
        float _2354 = (_2349 * _1858) + _1848;
        float _2355 = (_2349 * _1861) + _1852;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2356;
        float _2360 = _2356 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 > _2360) || ((_2354 < _2358) || ((_2353 < _2358) || (_2353 > _2360))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1795);
            frontier_phi_16_38_ladder = _2483.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2483.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2483.x * cbModelParam._m0[1u].y;
        }
        _1877 = frontier_phi_16_38_ladder_2;
        _1879 = frontier_phi_16_38_ladder_1;
        _1881 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_953, _954, _955), _1795);
        _1877 = _1865.x * cbModelParam._m0[1u].y;
        _1879 = _1865.y * cbModelParam._m0[1u].y;
        _1881 = _1865.z * cbModelParam._m0[1u].y;
    }
    float _1885 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _770);
    float _1886 = isnan(_1885) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1885 : min(cbModelParam._m0[25u].w, _1885));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1940 = fma(_1017, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009)) + cbModelParam._m0[21u].w;
        float _1944 = fma(_1017, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009)) + cbModelParam._m0[22u].w;
        float _1948 = fma(_1017, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009)) + cbModelParam._m0[23u].w;
        float _1951 = fma(_955, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953));
        float _1954 = fma(_955, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953));
        float _1957 = fma(_955, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953));
        float _2097;
        if (_1951 > 0.0)
        {
            _2097 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2097 = frontier_phi_28_24_ladder;
        }
        float _2373;
        if (_1954 > 0.0)
        {
            _2373 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2373 = frontier_phi_40_35_ladder;
        }
        float _2586;
        if (_1957 > 0.0)
        {
            _2586 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2586 = frontier_phi_49_46_ladder;
        }
        float _2588 = isnan(_2373) ? _2097 : (isnan(_2097) ? _2373 : min(_2097, _2373));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1951) + _1940;
        float _2594 = (_2589 * _1954) + _1944;
        float _2595 = (_2589 * _1957) + _1948;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1886);
            frontier_phi_25_49_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1976 = frontier_phi_25_49_ladder_2;
        _1978 = frontier_phi_25_49_ladder_1;
        _1980 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_953, _954, _955), _1886);
        _1976 = _1960.x * cbModelParam._m0[1u].z;
        _1978 = _1960.y * cbModelParam._m0[1u].z;
        _1980 = _1960.z * cbModelParam._m0[1u].z;
    }
    float _1993 = (((_980 * _929) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1976 - _1877)) + _1877);
    float _1995 = (((_980 * _931) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1997 = (((_980 * _932) + _981) * _945) * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, _1993 * cbSceneParam._m0[91u].x));
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _945 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2051 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2055 = _2018 | 1u;
    float _2066 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_767, _768, _769));
    float _2069 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_767, _768, _769));
    float _4308 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _4319 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2074 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.3183098733425140380859375;
    float _2076 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * 0.3183098733425140380859375;
    float _2083 = ((cbLight._m0[_2035].x * _2041) * _2076) + ((cbLight._m0[_2045].x * _2051) * _2074);
    float _2084 = ((_2041 * cbLight._m0[_2035].y) * _2076) + ((_2051 * cbLight._m0[_2045].y) * _2074);
    float _2085 = ((_2041 * cbLight._m0[_2035].z) * _2076) + ((_2051 * cbLight._m0[_2045].z) * _2074);
    uvec4 _2089 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2091 = _2089.x == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2091)
    {
        _2102 = _2083;
        _2104 = _2084;
        _2106 = _2085;
    }
    else
    {
        uint _2110 = _2018 + 6u;
        float _2126 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4330 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2129 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2102 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _2083;
        _2104 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _2084;
        _2106 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _2085;
    }
    bool _2109 = _2089.y == 0u;
    float _2147;
    float _2149;
    float _2151;
    if (_2109)
    {
        _2147 = _2102;
        _2149 = _2104;
        _2151 = _2106;
    }
    else
    {
        uint _2317 = _2018 + 7u;
        float _2333 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2334 = _2333 * _2333;
        float _4346 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2335 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2336 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2147 = (((cbLight._m0[_2317].x * 0.3183098733425140380859375) * _2335) * _2336) + _2102;
        _2149 = (((cbLight._m0[_2317].y * 0.3183098733425140380859375) * _2335) * _2336) + _2104;
        _2151 = (((cbLight._m0[_2317].z * 0.3183098733425140380859375) * _2335) * _2336) + _2106;
    }
    uint _2154 = _2018 + 8u;
    float _2167 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _770) * 0.949999988079071044921875);
    float _2168 = _2167 * _2167;
    float _2169 = cbLight._m0[_2018].x + _847;
    float _2170 = cbLight._m0[_2018].y + _848;
    float _2171 = cbLight._m0[_2018].z + _849;
    float _2175 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
    float _2176 = _2175 * _2169;
    float _2177 = _2175 * _2170;
    float _2178 = _2175 * _2171;
    float _2179 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2018].xyz));
    float _4362 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _2183 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2184 = dot(vec3(_767, _768, _769), vec3(_2176, _2177, _2178));
    float _4384 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2188 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2176, _2177, _2178));
    float _4395 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2192 = _2168 * _2168;
    float _2196 = ((_2187 * _2187) * (_2192 + (-1.0))) + 1.0;
    float _2204 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
    float _2205 = 0.959999978542327880859375 - _926;
    float _2207 = 0.959999978542327880859375 - _927;
    float _2208 = 0.959999978542327880859375 - _928;
    float _2215 = 1.0 - _2168;
    float _2226 = (0.5 / (((_2183 * ((_2182 * _2215) + _2168)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2215) + _2168) * _2182))) * _2182;
    float _4406 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2228 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2192 / ((_2196 * _2196) * 3.141590118408203125));
    uint _2239 = _2018 + 9u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2055].w)) * _770) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_2055].x + _847;
    float _2253 = cbLight._m0[_2055].y + _848;
    float _2254 = cbLight._m0[_2055].z + _849;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2055].xyz));
    float _4417 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
    float _2266 = dot(vec3(_767, _768, _769), vec3(_2259, _2260, _2261));
    float _4428 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_2055].xyz), vec3(_2259, _2260, _2261));
    float _4439 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2251 * _2251;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0);
    float _2292 = 1.0 - _2251;
    float _2302 = (0.5 / (((_2183 * ((_2265 * _2292) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2292) + _2251) * _2265))) * _2265;
    float _4450 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    float _2314 = (((((_2285 * _2205) + _929) * cbLight._m0[_2239].x) * _2304) * _2041) + (((((_2204 * _2205) + _929) * cbLight._m0[_2154].x) * _2228) * _2051);
    float _2315 = (((((_2285 * _2207) + _931) * cbLight._m0[_2239].y) * _2304) * _2041) + (((((_2204 * _2207) + _931) * cbLight._m0[_2154].y) * _2228) * _2051);
    float _2316 = (((((_2285 * _2208) + _932) * cbLight._m0[_2239].z) * _2304) * _2041) + (((((_2204 * _2208) + _932) * cbLight._m0[_2154].z) * _2228) * _2051);
    float _2378;
    float _2380;
    float _2382;
    if (_2091)
    {
        _2378 = _2314;
        _2380 = _2315;
        _2382 = _2316;
    }
    else
    {
        uint _2384 = _2018 + 2u;
        uint _2388 = _2018 + 10u;
        float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _770) * 0.949999988079071044921875);
        float _2403 = _2402 * _2402;
        float _2404 = cbLight._m0[_2384].x + _847;
        float _2405 = cbLight._m0[_2384].y + _848;
        float _2406 = cbLight._m0[_2384].z + _849;
        float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
        float _2411 = _2410 * _2404;
        float _2412 = _2410 * _2405;
        float _2413 = _2410 * _2406;
        float _2414 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2384].xyz));
        float _4461 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2418 = dot(vec3(_767, _768, _769), vec3(_2411, _2412, _2413));
        float _4472 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2422 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2411, _2412, _2413));
        float _4483 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2426 = _2403 * _2403;
        float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
        float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0);
        float _2444 = 1.0 - _2403;
        float _2454 = (0.5 / (((_2183 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2444) + _2403) * _2417))) * _2417;
        float _4494 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2456 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
        float _2457 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2378 = (((((_2437 * _2205) + _929) * cbLight._m0[_2388].x) * _2456) * _2457) + _2314;
        _2380 = (((((_2437 * _2207) + _931) * cbLight._m0[_2388].y) * _2456) * _2457) + _2315;
        _2382 = (((((_2437 * _2208) + _932) * cbLight._m0[_2388].z) * _2456) * _2457) + _2316;
    }
    float _2492;
    float _2494;
    float _2496;
    if (_2109)
    {
        _2492 = _2378;
        _2494 = _2380;
        _2496 = _2382;
    }
    else
    {
        uint _2503 = _2018 + 3u;
        uint _2507 = _2018 + 11u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _770) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _847;
        float _2524 = cbLight._m0[_2503].y + _848;
        float _2525 = cbLight._m0[_2503].z + _849;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2503].xyz));
        float _4510 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2537 = dot(vec3(_767, _768, _769), vec3(_2530, _2531, _2532));
        float _4521 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4532 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2183 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2183 * _2563) + _2522) * _2536))) * _2536;
        float _4543 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2492 = (((((_2556 * _2205) + _929) * cbLight._m0[_2507].x) * _2575) * _2576) + _2378;
        _2494 = (((((_2556 * _2207) + _931) * cbLight._m0[_2507].y) * _2575) * _2576) + _2380;
        _2496 = (((((_2556 * _2208) + _932) * cbLight._m0[_2507].z) * _2575) * _2576) + _2382;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2016.y == 0u)
    {
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2651;
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2651;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2651;
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.x;
        uint _2678 = uint((float(_2666.y) * floor(float(uint(cbSceneParam._m0[85u].y * _868) / _2667))) + floor(float(uint(cbSceneParam._m0[85u].x * _867) / _2667)));
        float _2688 = (log2(_2654 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        uint _2692 = uint(isnan(14.0) ? _2689 : (isnan(_2689) ? 14.0 : min(_2689, 14.0)));
        uvec4 _2697 = texelFetch(g_lightClusterGridBuffer, int(((_2692 << 2u) + (_2678 << 6u)) >> 2u));
        uint _2698 = _2697.x;
        uint _2699 = _2666.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2699 >> 4u) & 15u)) + 4294967295u) & _2698) == 0u) || ((_2699 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            uint _2958 = 0u;
            uint _2967;
            bool _2968;
            for (;;)
            {
                _2967 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_2958 << 2u)) >> 2u)).x;
                _2968 = _2967 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2968)
                {
                    frontier_phi_66_pred = _2952;
                    frontier_phi_66_pred_1 = _2957;
                    frontier_phi_66_pred_2 = _2956;
                    frontier_phi_66_pred_3 = _2955;
                    frontier_phi_66_pred_4 = _2954;
                    frontier_phi_66_pred_5 = _2953;
                }
                else
                {
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    uint _3103;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2967;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    for (;;)
                    {
                        uint _3107 = uint(findLSB(_3103)) + (_2958 << 5u);
                        uint _3104 = (_3103 + 4294967295u) & _3103;
                        uint _3109 = _3107 * 48u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3129 = (_3107 * 48u) + 4u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3148 = (_3107 * 48u) + 8u;
                        vec3 _3159 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x));
                        float _3163 = _3123.x - _2652;
                        float _3164 = _3123.y - _2653;
                        float _3165 = _3123.z - _2654;
                        float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                        float _3169 = inversesqrt(_3166);
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3173 = dot(vec3(_886, _889, _892), vec3(_3170, _3171, _3172));
                        float _3178 = 1.0 - (_3166 * _3123.w);
                        float _4569 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3180 = sqrt(_3166) * _3142.w;
                        float _3183 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3173) + _3184;
                        float _3190 = _3180 * _3180;
                        float _3194 = ((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3179) / ((_3190 * 0.699999988079071044921875) + 1.0);
                        float _3198 = (-0.0) - _2652;
                        float _3199 = (-0.0) - _2653;
                        float _3200 = (-0.0) - _2654;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3215 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                        float _3216 = 1.0 - _961;
                        float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                        float _3224 = _3223 * _3223;
                        float _3225 = _3224 * _3224;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3236 = dot(vec3(_886, _889, _892), vec3(_3205, _3206, _3207));
                        float _4585 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                        float _3240 = dot(vec3(_886, _889, _892), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                        float _4596 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                        float _3248 = _3183 * _3224;
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3173) + _3249;
                        float _4607 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                        float _3254 = 1.0 - _3224;
                        float _3264 = (0.5 / (((_3253 * ((_3239 * _3254) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3224) * _3239))) * _3253;
                        float _4618 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3275 = (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3247 * _3247) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125))) * _3179;
                        _3027 = (_3194 * _3142.x) + _3100;
                        _3028 = (_3194 * _3142.y) + _3101;
                        _3029 = (_3194 * _3142.z) + _3102;
                        _3024 = (_3275 * _3159.x) + _3097;
                        _3025 = (_3275 * _3159.y) + _3098;
                        _3026 = (_3275 * _3159.z) + _3099;
                        if (_3104 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3104;
                        }
                    }
                    frontier_phi_66_pred = _3024;
                    frontier_phi_66_pred_1 = _3029;
                    frontier_phi_66_pred_2 = _3028;
                    frontier_phi_66_pred_3 = _3027;
                    frontier_phi_66_pred_4 = _3026;
                    frontier_phi_66_pred_5 = _3025;
                }
                _2800 = frontier_phi_66_pred;
                _2810 = frontier_phi_66_pred_1;
                _2808 = frontier_phi_66_pred_2;
                _2806 = frontier_phi_66_pred_3;
                _2804 = frontier_phi_66_pred_4;
                _2802 = frontier_phi_66_pred_5;
                uint _2959 = _2958 + 1u;
                if (_2959 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2952 = _2800;
                    _2953 = _2802;
                    _2954 = _2804;
                    _2955 = _2806;
                    _2956 = _2808;
                    _2957 = _2810;
                    _2958 = _2959;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        if (((4294967295u << _2816) & _2698) == 0u)
        {
            _2920 = _2799;
            _2922 = _2801;
            _2924 = _2803;
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
        }
        else
        {
            float _2945 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
            float _2946 = _2945 * _2652;
            float _2947 = _2945 * _2653;
            float _2948 = _2945 * _2654;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _3080 = _2799;
                float _3081 = _2801;
                float _3082 = _2803;
                float _3083 = _2805;
                float _3084 = _2807;
                float _3085 = _2809;
                uint _3086 = _2816;
                uint _3095;
                bool _3096;
                for (;;)
                {
                    _3095 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                    _3096 = _3095 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3096)
                    {
                        frontier_phi_77_pred = _3085;
                        frontier_phi_77_pred_1 = _3084;
                        frontier_phi_77_pred_2 = _3083;
                        frontier_phi_77_pred_3 = _3082;
                        frontier_phi_77_pred_4 = _3081;
                        frontier_phi_77_pred_5 = _3080;
                    }
                    else
                    {
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        uint _3308 = _3095;
                        uint _3309;
                        vec4 _3334;
                        float _3335;
                        vec4 _3350;
                        vec3 _3362;
                        vec4 _3377;
                        vec4 _3392;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3319 = ((_3086 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3308));
                            _3309 = (_3308 + 4294967295u) & _3308;
                            uint _3321 = _3319 * 40u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3335 = _3334.w;
                            uint _3337 = (_3319 * 40u) + 4u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3319 * 40u) + 8u;
                            _3362 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x));
                            uint _3364 = (_3319 * 40u) + 16u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3319 * 40u) + 20u;
                            _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            uint _3395 = (_3319 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3319 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_2654, _3427.z, fma(_2653, _3427.y, _3427.x * _2652)) + _3427.w;
                            _3440 = !((fma(_2654, _3408.z, fma(_2653, _3408.y, _3408.x * _2652)) + _3408.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3334.x - _2652;
                                float _3468 = _3334.y - _2653;
                                float _3469 = _3334.z - _2654;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3335 * _3335));
                                float _4629 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3485 = sqrt(_3470) * _3350.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_886, _889, _892))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_2654, _3377.z, fma(_2653, _3377.y, _3377.x * _2652)) + _3377.w) / _3439;
                                float _3499 = (fma(_2654, _3392.z, fma(_2653, _3392.y, _3392.x * _2652)) + _3392.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4645 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _961;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2946;
                                float _3529 = _3475 - _2947;
                                float _3530 = _3476 - _2948;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_886, _889, _892), vec3((-0.0) - _2946, (-0.0) - _2947, (-0.0) - _2948));
                                float _4656 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3542 = dot(vec3(_886, _889, _892), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4667 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_886, _889, _892), vec3(_3474, _3475, _3476))) + _3551;
                                float _4678 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4689 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3505 * _3350.y;
                                frontier_phi_83_pred_1 = _3505 * _3350.x;
                                frontier_phi_83_pred_2 = _3579 * _3362.z;
                                frontier_phi_83_pred_3 = _3579 * _3362.y;
                                frontier_phi_83_pred_4 = _3579 * _3362.x;
                                frontier_phi_83_pred_5 = _3505 * _3350.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_83_pred;
                            _3586 = frontier_phi_83_pred_1;
                            _3585 = frontier_phi_83_pred_2;
                            _3584 = frontier_phi_83_pred_3;
                            _3583 = frontier_phi_83_pred_4;
                            _3588 = frontier_phi_83_pred_5;
                            _3292 = _3586 + _3305;
                            _3293 = _3587 + _3306;
                            _3294 = _3588 + _3307;
                            _3289 = _3583 + _3302;
                            _3290 = _3584 + _3303;
                            _3291 = _3585 + _3304;
                            if (_3309 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3309;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3294;
                        frontier_phi_77_pred_1 = _3293;
                        frontier_phi_77_pred_2 = _3292;
                        frontier_phi_77_pred_3 = _3291;
                        frontier_phi_77_pred_4 = _3290;
                        frontier_phi_77_pred_5 = _3289;
                    }
                    _2931 = frontier_phi_77_pred;
                    _2929 = frontier_phi_77_pred_1;
                    _2927 = frontier_phi_77_pred_2;
                    _2925 = frontier_phi_77_pred_3;
                    _2923 = frontier_phi_77_pred_4;
                    _2921 = frontier_phi_77_pred_5;
                    uint _3087 = _3086 + 1u;
                    if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3080 = _2921;
                        _3081 = _2923;
                        _3082 = _2925;
                        _3083 = _2927;
                        _3084 = _2929;
                        _3085 = _2931;
                        _3086 = _3087;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2925;
                frontier_phi_58_59_ladder_1 = _2931;
                frontier_phi_58_59_ladder_2 = _2929;
                frontier_phi_58_59_ladder_3 = _2927;
                frontier_phi_58_59_ladder_4 = _2923;
                frontier_phi_58_59_ladder_5 = _2921;
            }
            else
            {
                frontier_phi_58_59_ladder = _2803;
                frontier_phi_58_59_ladder_1 = _2809;
                frontier_phi_58_59_ladder_2 = _2807;
                frontier_phi_58_59_ladder_3 = _2805;
                frontier_phi_58_59_ladder_4 = _2801;
                frontier_phi_58_59_ladder_5 = _2799;
            }
            _2920 = frontier_phi_58_59_ladder_5;
            _2922 = frontier_phi_58_59_ladder_4;
            _2924 = frontier_phi_58_59_ladder;
            _2926 = frontier_phi_58_59_ladder_3;
            _2928 = frontier_phi_58_59_ladder_2;
            _2930 = frontier_phi_58_59_ladder_1;
        }
        float _2935 = isnan(1.0) ? _945 : (isnan(_945) ? 1.0 : min(_945, 1.0));
        _2711 = (_2935 * _2926) + _2147;
        _2713 = (_2935 * _2928) + _2149;
        _2715 = (_2935 * _2930) + _2151;
        _2717 = ((_2920 * _929) * _2935) + _2492;
        _2719 = ((_2922 * _931) * _2935) + _2494;
        _2721 = ((_2924 * _932) * _2935) + _2496;
    }
    else
    {
        _2711 = _2147;
        _2713 = _2149;
        _2715 = _2151;
        _2717 = _2492;
        _2719 = _2494;
        _2721 = _2496;
    }
    float _4705 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4716 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4727 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2738 = ((isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2711 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _945))) + ((_2717 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _2739 = ((isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_2713 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _945))) + ((_2719 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    float _2740 = ((isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2715 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _945))) + ((_2721 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1784)) * cbPerFrame._m0[3u].x);
    uint _2741 = _274 + 6u;
    float _2749 = _867 / cbSceneParam._m0[86u].x;
    float _2750 = _868 / cbSceneParam._m0[86u].y;
    vec4 _2764 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2766 = _2764.x;
    float _2767 = _2764.y;
    float _2768 = _2764.z;
    float _2769 = _2764.w;
    float _2862;
    float _2864;
    float _2866;
    float _2868;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _2825 = _2824 / _789;
        float _2836 = _2825 * _840;
        float _2837 = _841 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2840 = _2825 * _842;
        float _2842 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2843 = _2842 + cbSceneParam._m0[79u].w;
        float _2844 = cbSceneParam._m0[79u].w - _2837;
        float _2850 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2840 * _2840));
        float _2853 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2850;
        float _2858 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2860 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3037;
        if (abs((_2838 - _2842) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3037 = ((((_2843 > 0.0) ? exp2(_2858 * _2843) : (2.0 - exp2(_2860 * _2843))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2853;
        }
        else
        {
            float _2981 = 1.0 / cbSceneParam._m0[80u].x;
            float _2982 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : max(_2843, _2844));
            float _2983 = isnan(_2844) ? _2843 : (isnan(_2843) ? _2844 : min(_2843, _2844));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            float _2993 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : min(_2983, 0.0));
            _3037 = ((abs(_2850 / _2838) * cbSceneParam._m0[80u].y) * ((((_2992 - _2993) * 2.0) - ((exp2(_2858 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0)))) - exp2(_2858 * (isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0))))) * _2981)) - ((exp2(_2860 * _2992) - exp2(_2860 * _2993)) * _2981))) + (_2853 * cbSceneParam._m0[80u].z);
        }
        vec4 _3039 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, 1.0), 0.0);
        float _3048 = exp2((_3037 * (-1.44269502162933349609375)) * (1.0 - _3039.w));
        float _3049 = log2(_3048);
        float _3065 = log2(_2769);
        _2862 = (exp2(_3065 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].x)) * _3039.x) / cbSceneParam._m0[78u].x)) + _2766;
        _2864 = (exp2(_3065 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].y)) * _3039.y) / cbSceneParam._m0[78u].y)) + _2767;
        _2866 = (exp2(_3065 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3049 * cbSceneParam._m0[78u].z)) * _3039.z) / cbSceneParam._m0[78u].z)) + _2768;
        _2868 = _3048 * _2769;
    }
    else
    {
        _2862 = _2766;
        _2864 = _2767;
        _2866 = _2768;
        _2868 = _2769;
    }
    bool _3075;
    vec4 _2878;
    vec4 _2900;
    float _2902;
    float _2906;
    float _2907;
    float _2908;
    float _2909;
    bool _2919;
    for (;;)
    {
        _2878 = cbMatDynParam._m0[0u];
        float _2880 = roundEven(_2878.y);
        bool _2881 = _2880 == 3.0;
        float _2882 = log2(_2868);
        float _2889 = exp2(_2882 * cbSceneParam._m0[78u].x) * _2738;
        float _2890 = exp2(_2882 * cbSceneParam._m0[78u].y) * _2739;
        float _2891 = exp2(_2882 * cbSceneParam._m0[78u].z) * _2740;
        float _2898 = _856 + (-0.5);
        _2900 = cbMtdParam._m0[1u];
        _2902 = _2900.y * _2898;
        float _2905 = (_2880 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2906 = _2905 * (_2881 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2862)));
        _2907 = _2905 * (_2881 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2864)));
        _2908 = _2905 * (_2881 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2866)));
        _2909 = _2898 * 0.999000012874603271484375;
        _2919 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2919)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _2909) < 0.5)
            {
                _3075 = true;
                break;
            }
        }
        uint _3016 = _905 + uint(_2878.w);
        if ((cbInstanceData._m0[_3016].w < 1.0) && ((cbInstanceData._m0[_3016].w + _2909) < 0.5))
        {
            _3075 = true;
            break;
        }
        if ((_2902 + 1.0) < _2900.x)
        {
            _3075 = true;
            break;
        }
        _3075 = false;
        break;
    }
    float _3280;
    if (_3075)
    {
        discard_state = true;
        _3280 = 0.0;
    }
    else
    {
        _3280 = cbInstanceData._m0[_2741].w;
    }
    SV_Target.x = _2906;
    SV_Target.y = _2907;
    SV_Target.z = _2908;
    SV_Target.w = _3280;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2741].w;
    discard_exit();
}


