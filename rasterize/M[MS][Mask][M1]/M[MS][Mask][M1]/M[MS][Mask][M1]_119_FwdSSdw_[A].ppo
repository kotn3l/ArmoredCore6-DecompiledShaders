#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1748;
float _4150;
float _4151;
float _4152;
float _4153;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4162 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4173 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4184 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _392 = _387.x * cbMtdParam._m0[11u].x;
    float _393 = _387.y * cbMtdParam._m0[11u].y;
    float _394 = _387.z * cbMtdParam._m0[11u].z;
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _481 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _498 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _432.x) * 2.0) - ((((_469 - _481) * cbMtdParam._m0[23u].w) + _481) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4195 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _506 = (_499 * ((_413.x * cbMtdParam._m0[12u].x) - _392)) + _392;
    float _507 = (_499 * ((_413.y * cbMtdParam._m0[12u].y) - _393)) + _393;
    float _508 = (_499 * ((_413.z * cbMtdParam._m0[12u].z) - _394)) + _394;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _547 = _545.x;
    float _557 = dot(vec4(_547, _545.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _571 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _432.y) * 2.0) - ((((_547 - _557) * cbMtdParam._m0[23u].w) + _557) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4206 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _579 = (_572 * ((_525.x * cbMtdParam._m0[13u].x) - _506)) + _506;
    float _580 = (_572 * ((_525.y * cbMtdParam._m0[13u].y) - _507)) + _507;
    float _581 = (_572 * ((_525.z * cbMtdParam._m0[13u].z) - _508)) + _508;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _619 = _617.x;
    float _629 = dot(vec4(_619, _617.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _641 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _432.z) * 2.0) - ((((_619 - _629) * cbMtdParam._m0[23u].w) + _629) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4217 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _642 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _652 = (_361.x * cbMtdParam._m0[9u].x) * ((_642 * ((_600.x * cbMtdParam._m0[14u].x) - _579)) + _579);
    float _653 = (_361.y * cbMtdParam._m0[9u].y) * ((_642 * ((_600.y * cbMtdParam._m0[14u].y) - _580)) + _580);
    float _654 = (_361.z * cbMtdParam._m0[9u].z) * ((_642 * ((_600.z * cbMtdParam._m0[14u].z) - _581)) + _581);
    float _658 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _652;
    float _661 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _653;
    float _664 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _654;
    float _672 = (((_652 - _658) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) + _658) * 4.55000019073486328125;
    float _674 = (((_653 - _661) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) + _661) * 4.55000019073486328125;
    float _676 = (((_654 - _664) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) + _664) * 4.55000019073486328125;
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _735 = _733.x;
    float _736 = _733.y;
    float _737 = _733.z;
    float _744 = ((_716.x - _735) * _499) + _735;
    float _745 = ((_716.y - _736) * _499) + _736;
    float _746 = ((_716.z - _737) * _499) + _737;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _769 = ((_758.x - _744) * _572) + _744;
    float _770 = ((_758.y - _745) * _572) + _745;
    float _771 = ((_758.z - _746) * _572) + _746;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _796 = ((_783.z - _771) * _642) + _771;
    float _799 = ((((_783.x - _769) * _642) + _769) * 2.0) + (-1.0);
    float _800 = ((((_783.y - _770) * _642) + _770) * 2.0) + (-1.0);
    float _801 = dot(vec2(_799, _800), vec2(_799, _800));
    float _4228 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _806 = sqrt(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))));
    vec4 _820 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _845 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _847 = _845.x;
    float _848 = 1.0 - _847;
    float _856 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _859 = ((isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : min(_856, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _868 = (_859 - ((((((_847 - _848) * cbMtdParam._m0[24u].z) + _848) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _859))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4249 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _869 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _876 = (_869 * (cbMtdParam._m0[17u].x - _672)) + _672;
    float _877 = (_869 * (cbMtdParam._m0[17u].y - _674)) + _674;
    float _878 = (_869 * (cbMtdParam._m0[17u].z - _676)) + _676;
    float _893 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _894 = _893 * TEXCOORD.z;
    float _895 = _893 * TEXCOORD.w;
    vec4 _907 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _894) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _895) + cbTextureTilingScale._m0[19u].w));
    float _909 = _907.x;
    float _910 = 1.0 - _909;
    float _935 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_909 - _910) * cbMtdParam._m0[24u].w) + _910) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4260 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _936 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _944 = ((((cbMtdParam._m0[10u].x - _876) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _936) + _876;
    float _945 = ((((cbMtdParam._m0[10u].y - _877) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _936) + _877;
    float _946 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _878)) * _936) + _878;
    vec4 _972 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _974 = _972.x;
    float _991 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _974) * _499) + _974;
    float _1008 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _991) * _572) + _991;
    float _1025 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _1008) * _642) + _1008;
    float _1029 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1025) * cbMtdParam._m0[19u].z) + _1025;
    float _1031 = _1029 - (_1029 * _869);
    float _1033 = _1031 - (_1031 * _936);
    float _1038 = (((_693.z - _796) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _796;
    float _1044 = ((_820.z - _1038) * cbMtdParam._m0[19u].w) + _1038;
    vec4 _1060 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1067 = (_1060.x * 2.0) + (-1.0);
    float _1068 = (_1060.y * 2.0) + (-1.0);
    float _1069 = dot(vec2(_1067, _1068), vec2(_1067, _1068));
    float _4271 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1077 = (_869 * (_1060.z - _1044)) + _1044;
    float _1080 = ((cbMtdParam._m0[23u].x - _1077) * _936) + _1077;
    vec4 _1103 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _894) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _895) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1109 = (_1103.x * 2.0) + (-1.0);
    float _1110 = (_1103.y * 2.0) + (-1.0);
    float _1111 = dot(vec2(_1109, _1110), vec2(_1109, _1110));
    float _4282 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1125 = (_799 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_693.x * 2.0) + (-1.0)))) + (((_820.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1126 = (_800 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_693.y * 2.0) + (-1.0)))) + (((_820.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1138 = (((_1067 - _1125) + (cbMtdParam._m0[21u].x * _1125)) * _869) + _1125;
    float _1139 = (((_1068 - _1126) + (cbMtdParam._m0[21u].x * _1126)) * _869) + _1126;
    float _1140 = (_869 * (sqrt(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) - _806)) + _806;
    float _1151 = (((_1109 - _1138) + (_1138 * cbMtdParam._m0[22u].z)) * _936) + _1138;
    float _1152 = (((_1110 - _1139) + (_1139 * cbMtdParam._m0[22u].z)) * _936) + _1139;
    float _1153 = ((sqrt(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) - _1140) * _936) + _1140;
    float _1155 = cbMtdParam._m0[22u].x + _820.w;
    float _1158 = fma(_1153, _273 * NORMAL.x, fma(_1152, _280 * TANGENT.x, (_266 * _258) * _1151));
    float _1161 = fma(_1153, _273 * NORMAL.y, fma(_1152, _280 * TANGENT.y, (_266 * _259) * _1151));
    float _1164 = fma(_1153, _273 * NORMAL.z, fma(_1152, _280 * TANGENT.z, (_266 * _260) * _1151));
    float _1168 = inversesqrt(dot(vec3(_1158, _1161, _1164), vec3(_1158, _1161, _1164)));
    float _1169 = _1168 * _1158;
    float _1170 = _1168 * _1161;
    float _1171 = _1168 * _1164;
    float _4293 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1172 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _4315 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4326 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4337 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4348 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1177 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _1191 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1241 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1231);
    float _1242 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1231);
    float _1243 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1231);
    float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
    float _1248 = _1241 * _1247;
    float _1249 = _1242 * _1247;
    float _1250 = _1243 * _1247;
    vec4 _1255 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1257 = _1255.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1429 = sqrt(((_1241 * _1241) + (_1242 * _1242)) + (_1243 * _1243));
        float _1435 = (cbMatDynParam._m0[5u].x * _1429) + cbMatDynParam._m0[5u].y;
        float _4359 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1440 = (cbMatDynParam._m0[5u].z * _1429) + cbMatDynParam._m0[5u].w;
        float _4370 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) - _1436)) + _1436) < ((_1257 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1268 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1269 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1287 = fma(_1171, cbSceneParam._m0[5u].z, fma(_1170, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1169));
    float _1290 = fma(_1171, cbSceneParam._m0[6u].z, fma(_1170, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1169));
    float _1293 = fma(_1171, cbSceneParam._m0[7u].z, fma(_1170, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1169));
    uint _1306 = _305 + 9u;
    uint _1307 = _1306 + uint(cbMatDynParam._m0[0u].w);
    float _1313 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1307].x;
    float _1314 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * cbInstanceData._m0[_1307].y;
    float _1315 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * cbInstanceData._m0[_1307].z;
    float _4381 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _1317 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _4403 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1318 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _1319 = 1.0 - _1177;
    float _1320 = _1316 * _1319;
    float _1321 = _1317 * _1319;
    float _1322 = _1318 * _1319;
    float _1327 = (_1316 + (-0.039999999105930328369140625)) * _1177;
    float _1328 = (_1317 + (-0.039999999105930328369140625)) * _1177;
    float _1329 = (_1318 + (-0.039999999105930328369140625)) * _1177;
    float _1330 = _1327 + 0.039999999105930328369140625;
    float _1332 = _1328 + 0.039999999105930328369140625;
    float _1333 = _1329 + 0.039999999105930328369140625;
    vec4 _1342 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1268, cbSceneParam._m0[86u].y * _1269));
    float _1346 = ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * TEXCOORD_5.w) * _1342.x;
    float _1347 = dot(vec3(_1169, _1170, _1171), vec3(_1248, _1249, _1250));
    float _1350 = _1347 * 2.0;
    float _1354 = (_1350 * _1169) - _1248;
    float _1355 = (_1350 * _1170) - _1249;
    float _1356 = (_1350 * _1171) - _1250;
    float _1360 = abs(dot(vec3(_1248, _1249, _1250), vec3(_1169, _1170, _1171)));
    float _4414 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
    float _1362 = sqrt(_1172);
    float _1375 = exp2((_1362 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1362 * 3.0));
    float _1381 = (1.0 - _1375) * ((_1362 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1382 = _1375 * _1362;
    float _1410 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1414 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1418 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1747;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1472 = fma(_1418, cbModelParam._m0[26u].z, fma(_1414, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1410));
        float _1476 = fma(_1418, cbModelParam._m0[27u].z, fma(_1414, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1410));
        float _1480 = fma(_1418, cbModelParam._m0[28u].z, fma(_1414, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1410));
        float _1505 = _1410 + _1169;
        float _1506 = _1414 + _1170;
        float _1507 = _1418 + _1171;
        float _1517 = fma(_1507, cbModelParam._m0[26u].z, fma(_1506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1505)) - _1472;
        float _1518 = fma(_1507, cbModelParam._m0[27u].z, fma(_1506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1505)) - _1476;
        float _1519 = fma(_1507, cbModelParam._m0[28u].z, fma(_1506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1505)) - _1480;
        float _1523 = inversesqrt(dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519)));
        float _1536 = ((_1523 * _1517) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1472 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1523 * _1518) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1476 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1523 * _1519) / cbModelParam._m0[34u].z) + ((((((_1480 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1575 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1541.x + (-0.5));
        float _1577 = _1575 * (_1541.y + (-0.5));
        float _1578 = _1575 * (_1541.z + (-0.5));
        float _1585 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1548.x + (-0.5));
        float _1587 = _1585 * (_1548.y + (-0.5));
        float _1588 = _1585 * (_1548.z + (-0.5));
        float _1595 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1555.x + (-0.5));
        float _1597 = _1595 * (_1555.y + (-0.5));
        float _1598 = _1595 * (_1555.z + (-0.5));
        float _1605 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1562.x + (-0.5));
        float _1607 = _1605 * (_1562.y + (-0.5));
        float _1608 = _1605 * (_1562.z + (-0.5));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = _1576 * 0.5;
        float _1613 = _1586 * 0.5;
        float _1614 = _1596 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1629 = (dot(vec3(_1169, _1170, _1171), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1639 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4462 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1641 + 1.0))) + _1646) * _1609;
        float _1656 = _1577 * 0.5;
        float _1657 = _1587 * 0.5;
        float _1658 = _1597 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_1169, _1170, _1171), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4495 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1683 + 1.0))) + _1688) * _1610;
        float _1698 = _1578 * 0.5;
        float _1699 = _1588 * 0.5;
        float _1700 = _1598 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_1169, _1170, _1171), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4506 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4517 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4528 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_1725 + 1.0))) + _1730) * _1611;
        _1747 = _1578;
        _1749 = _1577;
        _1750 = _1576;
        _1751 = _1588;
        _1752 = _1587;
        _1753 = _1586;
        _1754 = _1598;
        _1755 = _1597;
        _1756 = _1596;
        _1757 = _1611;
        _1758 = _1610;
        _1759 = _1609;
        _1760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1761 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
    }
    else
    {
        _1747 = _1748;
        _1749 = _1748;
        _1750 = _1748;
        _1751 = _1748;
        _1752 = _1748;
        _1753 = _1748;
        _1754 = _1748;
        _1755 = _1748;
        _1756 = _1748;
        _1757 = _1748;
        _1758 = _1748;
        _1759 = _1748;
        _1760 = 0.0;
        _1761 = 0.0;
        _1762 = 0.0;
    }
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1788 = fma(_1418, cbModelParam._m0[30u].z, fma(_1414, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1410));
        float _1792 = fma(_1418, cbModelParam._m0[31u].z, fma(_1414, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1410));
        float _1796 = fma(_1418, cbModelParam._m0[32u].z, fma(_1414, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1410));
        float _1819 = _1410 + _1169;
        float _1820 = _1414 + _1170;
        float _1821 = _1418 + _1171;
        float _1831 = fma(_1821, cbModelParam._m0[30u].z, fma(_1820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1819)) - _1788;
        float _1832 = fma(_1821, cbModelParam._m0[31u].z, fma(_1820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1819)) - _1792;
        float _1833 = fma(_1821, cbModelParam._m0[32u].z, fma(_1820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1819)) - _1796;
        float _1837 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
        float _1850 = ((_1837 * _1831) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1788 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1851 = ((_1837 * _1832) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1792 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1852 = ((_1837 * _1833) / cbModelParam._m0[35u].z) + ((((((_1796 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1854 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1861 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1868 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1875 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        float _1887 = exp2((_1854.w + (-0.5)) * 20.0) * 2.0;
        float _1888 = _1887 * (_1854.x + (-0.5));
        float _1889 = _1887 * (_1854.y + (-0.5));
        float _1890 = _1887 * (_1854.z + (-0.5));
        float _1897 = exp2((_1861.w + (-0.5)) * 20.0) * 2.0;
        float _1898 = _1897 * (_1861.x + (-0.5));
        float _1899 = _1897 * (_1861.y + (-0.5));
        float _1900 = _1897 * (_1861.z + (-0.5));
        float _1907 = exp2((_1868.w + (-0.5)) * 20.0) * 2.0;
        float _1908 = _1907 * (_1868.x + (-0.5));
        float _1909 = _1907 * (_1868.y + (-0.5));
        float _1910 = _1907 * (_1868.z + (-0.5));
        float _1917 = exp2((_1875.w + (-0.5)) * 20.0) * 2.0;
        float _1918 = _1917 * (_1875.x + (-0.5));
        float _1919 = _1917 * (_1875.y + (-0.5));
        float _1920 = _1917 * (_1875.z + (-0.5));
        float _1921 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1922 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1923 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1924 = _1888 * 0.5;
        float _1925 = _1898 * 0.5;
        float _1926 = _1908 * 0.5;
        float _1927 = dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926));
        float _1932 = (_1927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1927);
        float _1940 = (dot(vec3(_1169, _1170, _1171), vec3(_1932 * _1924, _1932 * _1925, _1932 * _1926)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1949 = sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926)) / (_1921 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1951 = _1950 * 2.0;
        float _1955 = (1.0 - _1950) / (_1950 + 1.0);
        float _4591 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1965 = ((((1.0 - _1956) * (_1951 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1951 + 1.0))) + _1956) * _1921;
        float _1966 = _1889 * 0.5;
        float _1967 = _1899 * 0.5;
        float _1968 = _1909 * 0.5;
        float _1969 = dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968));
        float _1974 = (_1969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1969);
        float _1982 = (dot(vec3(_1169, _1170, _1171), vec3(_1974 * _1966, _1974 * _1967, _1974 * _1968)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1991 = sqrt(((_1967 * _1967) + (_1966 * _1966)) + (_1968 * _1968)) / (_1922 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1993 = _1992 * 2.0;
        float _1997 = (1.0 - _1992) / (_1992 + 1.0);
        float _4624 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2007 = ((((1.0 - _1998) * (_1993 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1993 + 1.0))) + _1998) * _1922;
        float _2008 = _1890 * 0.5;
        float _2009 = _1900 * 0.5;
        float _2010 = _1910 * 0.5;
        float _2011 = dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010));
        float _2016 = (_2011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2011);
        float _2024 = (dot(vec3(_1169, _1170, _1171), vec3(_2016 * _2008, _2016 * _2009, _2016 * _2010)) + 1.0) * 0.5;
        float _4635 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2033 = sqrt(((_2009 * _2009) + (_2008 * _2008)) + (_2010 * _2010)) / (_1923 + 9.9999997473787516355514526367188e-06);
        float _4646 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2035 = _2034 * 2.0;
        float _2039 = (1.0 - _2034) / (_2034 + 1.0);
        float _4657 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2049 = ((((1.0 - _2040) * (_2035 + 2.0)) * exp2(log2(isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2035 + 1.0))) + _2040) * _1923;
        _2057 = _1890;
        _2058 = _1889;
        _2059 = _1888;
        _2060 = _1900;
        _2061 = _1899;
        _2062 = _1898;
        _2063 = _1910;
        _2064 = _1909;
        _2065 = _1908;
        _2066 = _1923;
        _2067 = _1922;
        _2068 = _1921;
        _2069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)));
        _2070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)));
        _2071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)));
    }
    else
    {
        _2057 = _1748;
        _2058 = _1748;
        _2059 = _1748;
        _2060 = _1748;
        _2061 = _1748;
        _2062 = _1748;
        _2063 = _1748;
        _2064 = _1748;
        _2065 = _1748;
        _2066 = _1748;
        _2067 = _1748;
        _2068 = _1748;
        _2069 = 0.0;
        _2070 = 0.0;
        _2071 = 0.0;
    }
    float _2081 = (cbModelParam._m0[1u].x * (_2069 - _1760)) + _1760;
    float _2082 = (cbModelParam._m0[1u].x * (_2070 - _1761)) + _1761;
    float _2083 = (cbModelParam._m0[1u].x * (_2071 - _1762)) + _1762;
    float _2104 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2082, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2107 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2082, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2110 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2082, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2081));
    float _2125 = _1354 * 0.5;
    float _2126 = _1355 * 0.5;
    float _2127 = _1356 * 0.5;
    float _2128 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2059, _2062, _2065, _2068));
    float _2131 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2058, _2061, _2064, _2067));
    float _2134 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2057, _2060, _2063, _2066));
    float _2168;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2141 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1747, _1751, _1754, _1757));
        float _2145 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1749, _1752, _1755, _1758));
        float _2149 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1750, _1753, _1756, _1759));
        float _2156 = dot(vec4(cbModelParam._m0[39u]), vec4(_2125, _2126, _2127, 1.0));
        _2168 = dot(vec3(isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)), isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)), isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2156) ? 0.0 : (isnan(0.0) ? _2156 : max(0.0, _2156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2168 = 1.0;
    }
    float _2179;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2170 = dot(vec4(cbModelParam._m0[40u]), vec4(_2125, _2126, _2127, 1.0));
        _2179 = dot(vec3(isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0)), isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0)), isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2170) ? 0.0 : (isnan(0.0) ? _2170 : max(0.0, _2170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2179 = 1.0;
    }
    float _2183 = (_2179 * cbModelParam._m0[1u].x) + (_2168 * (1.0 - cbModelParam._m0[1u].x));
    float _2193 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1172);
    float _2194 = isnan(_2193) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2193 : min(cbModelParam._m0[25u].z, _2193));
    float _2274;
    float _2276;
    float _2278;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2241 = fma(_1418, cbModelParam._m0[13u].z, fma(_1414, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1410)) + cbModelParam._m0[13u].w;
        float _2245 = fma(_1418, cbModelParam._m0[14u].z, fma(_1414, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1410)) + cbModelParam._m0[14u].w;
        float _2249 = fma(_1418, cbModelParam._m0[15u].z, fma(_1414, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1410)) + cbModelParam._m0[15u].w;
        float _2252 = fma(_1356, cbModelParam._m0[13u].z, fma(_1355, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1354));
        float _2255 = fma(_1356, cbModelParam._m0[14u].z, fma(_1355, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1354));
        float _2258 = fma(_1356, cbModelParam._m0[15u].z, fma(_1355, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1354));
        float _2286;
        if (_2252 > 0.0)
        {
            _2286 = abs((1.0 - _2241) / _2252);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2252 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2241 + 1.0) / _2252);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2286 = frontier_phi_17_15_ladder;
        }
        float _2510;
        if (_2255 > 0.0)
        {
            _2510 = abs((1.0 - _2245) / _2255);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2245 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2510 = frontier_phi_26_22_ladder;
        }
        float _2767;
        if (_2258 > 0.0)
        {
            _2767 = abs((1.0 - _2249) / _2258);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2249 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2767 = frontier_phi_38_33_ladder;
        }
        float _2769 = isnan(_2510) ? _2286 : (isnan(_2286) ? _2510 : min(_2286, _2510));
        float _2770 = isnan(_2767) ? _2769 : (isnan(_2769) ? _2767 : min(_2769, _2767));
        float _2774 = (_2770 * _2252) + _2241;
        float _2775 = (_2770 * _2255) + _2245;
        float _2776 = (_2770 * _2258) + _2249;
        float _2777 = _2770 * 9.9999997473787516355514526367188e-05;
        float _2779 = (-1.0) - _2777;
        float _2781 = _2777 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2776 > _2781) || ((_2776 < _2779) || ((_2775 > _2781) || ((_2775 < _2779) || ((_2774 < _2779) || (_2774 > _2781))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2776, cbModelParam._m0[9u].z, fma(_2775, cbModelParam._m0[9u].y, _2774 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2776, cbModelParam._m0[10u].z, fma(_2775, cbModelParam._m0[10u].y, _2774 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2776, cbModelParam._m0[11u].z, fma(_2775, cbModelParam._m0[11u].y, _2774 * cbModelParam._m0[11u].x))), _2194);
            frontier_phi_16_38_ladder = _2904.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2904.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2904.x * cbModelParam._m0[1u].y;
        }
        _2274 = frontier_phi_16_38_ladder_2;
        _2276 = frontier_phi_16_38_ladder_1;
        _2278 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1354, _1355, _1356), _2194);
        _2274 = _2262.x * cbModelParam._m0[1u].y;
        _2276 = _2262.y * cbModelParam._m0[1u].y;
        _2278 = _2262.z * cbModelParam._m0[1u].y;
    }
    float _2282 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1172);
    float _2283 = isnan(_2282) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2282 : min(cbModelParam._m0[25u].w, _2282));
    float _2373;
    float _2375;
    float _2377;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2337 = fma(_1418, cbModelParam._m0[21u].z, fma(_1414, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1410)) + cbModelParam._m0[21u].w;
        float _2341 = fma(_1418, cbModelParam._m0[22u].z, fma(_1414, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1410)) + cbModelParam._m0[22u].w;
        float _2345 = fma(_1418, cbModelParam._m0[23u].z, fma(_1414, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1410)) + cbModelParam._m0[23u].w;
        float _2348 = fma(_1356, cbModelParam._m0[21u].z, fma(_1355, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1354));
        float _2351 = fma(_1356, cbModelParam._m0[22u].z, fma(_1355, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1354));
        float _2354 = fma(_1356, cbModelParam._m0[23u].z, fma(_1355, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1354));
        float _2515;
        if (_2348 > 0.0)
        {
            _2515 = abs((1.0 - _2337) / _2348);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2348 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2337 + 1.0) / _2348);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2515 = frontier_phi_28_24_ladder;
        }
        float _2794;
        if (_2351 > 0.0)
        {
            _2794 = abs((1.0 - _2341) / _2351);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2351 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2341 + 1.0) / _2351);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2794 = frontier_phi_40_35_ladder;
        }
        float _3007;
        if (_2354 > 0.0)
        {
            _3007 = abs((1.0 - _2345) / _2354);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2354 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2345 + 1.0) / _2354);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3007 = frontier_phi_49_46_ladder;
        }
        float _3009 = isnan(_2794) ? _2515 : (isnan(_2515) ? _2794 : min(_2515, _2794));
        float _3010 = isnan(_3007) ? _3009 : (isnan(_3009) ? _3007 : min(_3009, _3007));
        float _3014 = (_3010 * _2348) + _2337;
        float _3015 = (_3010 * _2351) + _2341;
        float _3016 = (_3010 * _2354) + _2345;
        float _3017 = _3010 * 9.9999997473787516355514526367188e-05;
        float _3018 = (-1.0) - _3017;
        float _3020 = _3017 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3016 > _3020) || ((_3016 < _3018) || ((_3015 > _3020) || ((_3015 < _3018) || ((_3014 < _3018) || (_3014 > _3020))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3215 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3016, cbModelParam._m0[17u].z, fma(_3015, cbModelParam._m0[17u].y, _3014 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3016, cbModelParam._m0[18u].z, fma(_3015, cbModelParam._m0[18u].y, _3014 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3016, cbModelParam._m0[19u].z, fma(_3015, cbModelParam._m0[19u].y, _3014 * cbModelParam._m0[19u].x))), _2283);
            frontier_phi_25_49_ladder = _3215.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3215.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3215.x * cbModelParam._m0[1u].z;
        }
        _2373 = frontier_phi_25_49_ladder_2;
        _2375 = frontier_phi_25_49_ladder_1;
        _2377 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2357 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1354, _1355, _1356), _2283);
        _2373 = _2357.x * cbModelParam._m0[1u].z;
        _2375 = _2357.y * cbModelParam._m0[1u].z;
        _2377 = _2357.z * cbModelParam._m0[1u].z;
    }
    float _2390 = (((_1381 * _1330) + _1382) * _1346) * ((cbModelParam._m0[1u].w * (_2373 - _2274)) + _2274);
    float _2392 = (((_1381 * _1332) + _1382) * _1346) * ((cbModelParam._m0[1u].w * (_2375 - _2276)) + _2276);
    float _2394 = (((_1381 * _1333) + _1382) * _1346) * ((cbModelParam._m0[1u].w * (_2377 - _2278)) + _2278);
    float _2397 = fma(_2394, cbSceneParam._m0[89u].z, fma(_2392, cbSceneParam._m0[89u].y, _2390 * cbSceneParam._m0[89u].x));
    float _2400 = fma(_2394, cbSceneParam._m0[90u].z, fma(_2392, cbSceneParam._m0[90u].y, _2390 * cbSceneParam._m0[90u].x));
    float _2403 = fma(_2394, cbSceneParam._m0[91u].z, fma(_2392, cbSceneParam._m0[91u].y, _2390 * cbSceneParam._m0[91u].x));
    vec4 _2411 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1268, _1269));
    float _2413 = _2411.w;
    float _2425 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2413);
    float _2426 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2413);
    float _2427 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2413);
    uvec4 _2431 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2433 = _2431.x * 14u;
    uint _2434 = _2433 + 13u;
    float _2441 = _1346 + (-1.0);
    float _2446 = (cbLight._m0[_2434].x * _2441) + 1.0;
    float _2447 = (cbLight._m0[_2434].y * _2441) + 1.0;
    float _2448 = (cbLight._m0[_2434].z * _2441) + 1.0;
    float _2449 = (cbLight._m0[_2434].w * _2441) + 1.0;
    uint _2450 = _2433 + 5u;
    float _2456 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2460 = _2433 + 4u;
    float _2469 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
    uint _2473 = _2433 | 1u;
    float _2484 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_1169, _1170, _1171));
    float _2487 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_1169, _1170, _1171));
    float _4793 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _4804 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2492 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * 0.3183098733425140380859375;
    float _2494 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * 0.3183098733425140380859375;
    float _2501 = ((cbLight._m0[_2450].x * _2456) * _2494) + (((cbLight._m0[_2460].x * _2425) * _2469) * _2492);
    float _2502 = ((_2456 * cbLight._m0[_2450].y) * _2494) + (((cbLight._m0[_2460].y * _2426) * _2469) * _2492);
    float _2503 = ((_2456 * cbLight._m0[_2450].z) * _2494) + (((cbLight._m0[_2460].z * _2427) * _2469) * _2492);
    uvec4 _2507 = floatBitsToUint(cbLight._m0[_2433 + 12u]);
    bool _2509 = _2507.x == 0u;
    float _2520;
    float _2522;
    float _2524;
    if (_2509)
    {
        _2520 = _2501;
        _2522 = _2502;
        _2524 = _2503;
    }
    else
    {
        uint _2528 = _2433 + 6u;
        float _2544 = (dot(vec3(cbLight._m0[_2433 + 2u].xyz), vec3(_1169, _1170, _1171)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4815 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2547 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2520 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2501;
        _2522 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2502;
        _2524 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2503;
    }
    bool _2527 = _2507.y == 0u;
    float _2565;
    float _2567;
    float _2569;
    if (_2527)
    {
        _2565 = _2520;
        _2567 = _2522;
        _2569 = _2524;
    }
    else
    {
        uint _2738 = _2433 + 7u;
        float _2754 = (dot(vec3(cbLight._m0[_2433 + 3u].xyz), vec3(_1169, _1170, _1171)) * 0.5) + 0.5;
        float _2755 = _2754 * _2754;
        float _4831 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2756 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
        float _2757 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2565 = (((cbLight._m0[_2738].x * 0.3183098733425140380859375) * _2756) * _2757) + _2520;
        _2567 = (((cbLight._m0[_2738].y * 0.3183098733425140380859375) * _2756) * _2757) + _2522;
        _2569 = (((cbLight._m0[_2738].z * 0.3183098733425140380859375) * _2756) * _2757) + _2524;
    }
    uint _2572 = _2433 + 8u;
    float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _1172) * 0.949999988079071044921875);
    float _2586 = _2585 * _2585;
    float _2587 = cbLight._m0[_2433].x + _1248;
    float _2588 = cbLight._m0[_2433].y + _1249;
    float _2589 = cbLight._m0[_2433].z + _1250;
    float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
    float _2594 = _2593 * _2587;
    float _2595 = _2593 * _2588;
    float _2596 = _2593 * _2589;
    float _2597 = dot(vec3(_1169, _1170, _1171), vec3(cbLight._m0[_2433].xyz));
    float _4847 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _4858 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _2601 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2602 = dot(vec3(_1169, _1170, _1171), vec3(_2594, _2595, _2596));
    float _4869 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2605 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2606 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2594, _2595, _2596));
    float _4880 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2610 = _2586 * _2586;
    float _2614 = ((_2605 * _2605) * (_2610 + (-1.0))) + 1.0;
    float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
    float _2623 = 0.959999978542327880859375 - _1327;
    float _2625 = 0.959999978542327880859375 - _1328;
    float _2626 = 0.959999978542327880859375 - _1329;
    float _2633 = 1.0 - _2586;
    float _2644 = (0.5 / (((_2601 * ((_2600 * _2633) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2633) + _2586) * _2600))) * _2600;
    float _4891 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2646 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2610 / ((_2614 * _2614) * 3.141590118408203125));
    uint _2660 = _2433 + 9u;
    float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _1172) * 0.949999988079071044921875);
    float _2672 = _2671 * _2671;
    float _2673 = cbLight._m0[_2473].x + _1248;
    float _2674 = cbLight._m0[_2473].y + _1249;
    float _2675 = cbLight._m0[_2473].z + _1250;
    float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
    float _2680 = _2679 * _2673;
    float _2681 = _2679 * _2674;
    float _2682 = _2679 * _2675;
    float _2683 = dot(vec3(_1169, _1170, _1171), vec3(cbLight._m0[_2473].xyz));
    float _4902 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2686 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2687 = dot(vec3(_1169, _1170, _1171), vec3(_2680, _2681, _2682));
    float _4913 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2690 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    float _2691 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2680, _2681, _2682));
    float _4924 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2695 = _2672 * _2672;
    float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
    float _2706 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
    float _2713 = 1.0 - _2672;
    float _2723 = (0.5 / (((_2601 * ((_2686 * _2713) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2713) + _2672) * _2686))) * _2686;
    float _4935 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2725 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
    float _2735 = (((((_2706 * _2623) + _1330) * cbLight._m0[_2660].x) * _2725) * _2456) + ((((cbLight._m0[_2572].x * _2425) * ((_2622 * _2623) + _1330)) * _2646) * _2469);
    float _2736 = (((((_2706 * _2625) + _1332) * cbLight._m0[_2660].y) * _2725) * _2456) + ((((cbLight._m0[_2572].y * _2426) * ((_2622 * _2625) + _1332)) * _2646) * _2469);
    float _2737 = (((((_2706 * _2626) + _1333) * cbLight._m0[_2660].z) * _2725) * _2456) + ((((cbLight._m0[_2572].z * _2427) * ((_2622 * _2626) + _1333)) * _2646) * _2469);
    float _2799;
    float _2801;
    float _2803;
    if (_2509)
    {
        _2799 = _2735;
        _2801 = _2736;
        _2803 = _2737;
    }
    else
    {
        uint _2805 = _2433 + 2u;
        uint _2809 = _2433 + 10u;
        float _2823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2805].w)) * _1172) * 0.949999988079071044921875);
        float _2824 = _2823 * _2823;
        float _2825 = cbLight._m0[_2805].x + _1248;
        float _2826 = cbLight._m0[_2805].y + _1249;
        float _2827 = cbLight._m0[_2805].z + _1250;
        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
        float _2832 = _2831 * _2825;
        float _2833 = _2831 * _2826;
        float _2834 = _2831 * _2827;
        float _2835 = dot(vec3(_1169, _1170, _1171), vec3(cbLight._m0[_2805].xyz));
        float _4946 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2839 = dot(vec3(_1169, _1170, _1171), vec3(_2832, _2833, _2834));
        float _4957 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
        float _2843 = dot(vec3(cbLight._m0[_2805].xyz), vec3(_2832, _2833, _2834));
        float _4968 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2847 = _2824 * _2824;
        float _2851 = ((_2842 * _2842) * (_2847 + (-1.0))) + 1.0;
        float _2858 = exp2(log2(1.0 - (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) * 5.0);
        float _2865 = 1.0 - _2824;
        float _2875 = (0.5 / (((_2601 * ((_2838 * _2865) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2865) + _2824) * _2838))) * _2838;
        float _4979 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2847 / ((_2851 * _2851) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2799 = (((((_2858 * _2623) + _1330) * cbLight._m0[_2809].x) * _2877) * _2878) + _2735;
        _2801 = (((((_2858 * _2625) + _1332) * cbLight._m0[_2809].y) * _2877) * _2878) + _2736;
        _2803 = (((((_2858 * _2626) + _1333) * cbLight._m0[_2809].z) * _2877) * _2878) + _2737;
    }
    float _2913;
    float _2915;
    float _2917;
    if (_2527)
    {
        _2913 = _2799;
        _2915 = _2801;
        _2917 = _2803;
    }
    else
    {
        uint _2924 = _2433 + 3u;
        uint _2928 = _2433 + 11u;
        float _2942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2924].w)) * _1172) * 0.949999988079071044921875);
        float _2943 = _2942 * _2942;
        float _2944 = cbLight._m0[_2924].x + _1248;
        float _2945 = cbLight._m0[_2924].y + _1249;
        float _2946 = cbLight._m0[_2924].z + _1250;
        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
        float _2951 = _2950 * _2944;
        float _2952 = _2950 * _2945;
        float _2953 = _2950 * _2946;
        float _2954 = dot(vec3(_1169, _1170, _1171), vec3(cbLight._m0[_2924].xyz));
        float _4995 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2957 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _2958 = dot(vec3(_1169, _1170, _1171), vec3(_2951, _2952, _2953));
        float _5006 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        float _2961 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
        float _2962 = dot(vec3(cbLight._m0[_2924].xyz), vec3(_2951, _2952, _2953));
        float _5017 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
        float _2966 = _2943 * _2943;
        float _2970 = ((_2961 * _2961) * (_2966 + (-1.0))) + 1.0;
        float _2977 = exp2(log2(1.0 - (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0)))) * 5.0);
        float _2984 = 1.0 - _2943;
        float _2994 = (0.5 / (((_2601 * ((_2957 * _2984) + _2943)) + 9.9999999392252902907785028219223e-09) + (((_2601 * _2984) + _2943) * _2957))) * _2957;
        float _5028 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
        float _2996 = (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2966 / ((_2970 * _2970) * 3.141590118408203125));
        float _2997 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2913 = (((((_2977 * _2623) + _1330) * cbLight._m0[_2928].x) * _2996) * _2997) + _2799;
        _2915 = (((((_2977 * _2625) + _1332) * cbLight._m0[_2928].y) * _2996) * _2997) + _2801;
        _2917 = (((((_2977 * _2626) + _1333) * cbLight._m0[_2928].z) * _2996) * _2997) + _2803;
    }
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    if (_2431.y == 0u)
    {
        float _3072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3072;
        float _3074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3072;
        float _3075 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3072;
        uvec4 _3087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3088 = _3087.x;
        uint _3099 = uint((float(_3087.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1269) / _3088))) + floor(float(uint(cbSceneParam._m0[85u].x * _1268) / _3088)));
        float _3109 = (log2(_3075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3110 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        uint _3113 = uint(isnan(14.0) ? _3110 : (isnan(_3110) ? 14.0 : min(_3110, 14.0)));
        uvec4 _3118 = texelFetch(g_lightClusterGridBuffer, int(((_3113 << 2u) + (_3099 << 6u)) >> 2u));
        uint _3119 = _3118.x;
        uint _3120 = _3087.z;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((((1u << ((_3120 >> 4u) & 15u)) + 4294967295u) & _3119) == 0u) || ((_3120 & 240u) == 0u))
        {
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
        }
        else
        {
            float _3221;
            float _3223;
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3373 = 0.0;
            float _3374 = 0.0;
            float _3375 = 0.0;
            float _3376 = 0.0;
            float _3377 = 0.0;
            float _3378 = 0.0;
            uint _3379 = 0u;
            uint _3388;
            bool _3389;
            for (;;)
            {
                _3388 = texelFetch(g_lightClassification, int((((_3113 << 5u) + (_3099 << 9u)) + (_3379 << 2u)) >> 2u)).x;
                _3389 = _3388 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3389)
                {
                    frontier_phi_66_pred = _3373;
                    frontier_phi_66_pred_1 = _3378;
                    frontier_phi_66_pred_2 = _3377;
                    frontier_phi_66_pred_3 = _3376;
                    frontier_phi_66_pred_4 = _3375;
                    frontier_phi_66_pred_5 = _3374;
                }
                else
                {
                    float _3518;
                    float _3519;
                    float _3520;
                    float _3521;
                    float _3522;
                    float _3523;
                    uint _3524;
                    _3518 = _3373;
                    _3519 = _3374;
                    _3520 = _3375;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3378;
                    _3524 = _3388;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    float _3450;
                    for (;;)
                    {
                        uint _3528 = uint(findLSB(_3524)) + (_3379 << 5u);
                        uint _3525 = (_3524 + 4294967295u) & _3524;
                        uint _3530 = _3528 * 48u;
                        vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3530)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 3u)).x));
                        uint _3550 = (_3528 * 48u) + 4u;
                        vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 3u)).x));
                        uint _3569 = (_3528 * 48u) + 8u;
                        vec3 _3580 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3569)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3569 + 2u)).x));
                        float _3584 = _3544.x - _3073;
                        float _3585 = _3544.y - _3074;
                        float _3586 = _3544.z - _3075;
                        float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                        float _3590 = inversesqrt(_3587);
                        float _3591 = _3590 * _3584;
                        float _3592 = _3590 * _3585;
                        float _3593 = _3590 * _3586;
                        float _3594 = dot(vec3(_1287, _1290, _1293), vec3(_3591, _3592, _3593));
                        float _3599 = 1.0 - (_3587 * _3544.w);
                        float _5054 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3600 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
                        float _3601 = sqrt(_3587) * _3563.w;
                        float _3604 = 1.39999997615814208984375 / (_3601 + 1.39999997615814208984375);
                        float _3605 = _3604 * _3604;
                        float _3608 = ((1.0 - _3605) * _3594) + _3605;
                        float _3611 = _3601 * _3601;
                        float _3615 = ((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3600) / ((_3611 * 0.699999988079071044921875) + 1.0);
                        float _3619 = (-0.0) - _3073;
                        float _3620 = (-0.0) - _3074;
                        float _3621 = (-0.0) - _3075;
                        float _3625 = inversesqrt(dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621)));
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3636 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                        float _3637 = 1.0 - _1362;
                        float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                        float _3645 = _3644 * _3644;
                        float _3646 = _3645 * _3645;
                        float _3647 = _3626 + _3591;
                        float _3648 = _3627 + _3592;
                        float _3649 = _3628 + _3593;
                        float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                        float _3657 = dot(vec3(_1287, _1290, _1293), vec3(_3626, _3627, _3628));
                        float _5070 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                        float _3660 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3661 = dot(vec3(_1287, _1290, _1293), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                        float _5081 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                        float _3664 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                        float _3669 = _3604 * _3645;
                        float _3670 = _3669 * _3669;
                        float _3673 = ((1.0 - _3670) * _3594) + _3670;
                        float _5092 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                        float _3674 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                        float _3675 = 1.0 - _3645;
                        float _3685 = (0.5 / (((_3674 * ((_3660 * _3675) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3674 * _3675) + _3645) * _3660))) * _3674;
                        float _5103 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                        float _3696 = (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0)))) / ((_3668 * _3668) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125))) * _3600;
                        _3448 = (_3615 * _3563.x) + _3521;
                        _3449 = (_3615 * _3563.y) + _3522;
                        _3450 = (_3615 * _3563.z) + _3523;
                        _3445 = (_3696 * _3580.x) + _3518;
                        _3446 = (_3696 * _3580.y) + _3519;
                        _3447 = (_3696 * _3580.z) + _3520;
                        if (_3525 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3518 = _3445;
                            _3519 = _3446;
                            _3520 = _3447;
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3450;
                            _3524 = _3525;
                        }
                    }
                    frontier_phi_66_pred = _3445;
                    frontier_phi_66_pred_1 = _3450;
                    frontier_phi_66_pred_2 = _3449;
                    frontier_phi_66_pred_3 = _3448;
                    frontier_phi_66_pred_4 = _3447;
                    frontier_phi_66_pred_5 = _3446;
                }
                _3221 = frontier_phi_66_pred;
                _3231 = frontier_phi_66_pred_1;
                _3229 = frontier_phi_66_pred_2;
                _3227 = frontier_phi_66_pred_3;
                _3225 = frontier_phi_66_pred_4;
                _3223 = frontier_phi_66_pred_5;
                uint _3380 = _3379 + 1u;
                if (_3380 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3373 = _3221;
                    _3374 = _3223;
                    _3375 = _3225;
                    _3376 = _3227;
                    _3377 = _3229;
                    _3378 = _3231;
                    _3379 = _3380;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
        }
        uvec4 _3234 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3235 = _3234.z;
        uint _3237 = (_3235 >> 8u) & 15u;
        float _3341;
        float _3343;
        float _3345;
        float _3347;
        float _3349;
        float _3351;
        if (((4294967295u << _3237) & _3119) == 0u)
        {
            _3341 = _3220;
            _3343 = _3222;
            _3345 = _3224;
            _3347 = _3226;
            _3349 = _3228;
            _3351 = _3230;
        }
        else
        {
            float _3366 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
            float _3367 = _3366 * _3073;
            float _3368 = _3366 * _3074;
            float _3369 = _3366 * _3075;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3237 < ((_3235 >> 12u) & 15u))
            {
                float _3342;
                float _3344;
                float _3346;
                float _3348;
                float _3350;
                float _3352;
                float _3501 = _3220;
                float _3502 = _3222;
                float _3503 = _3224;
                float _3504 = _3226;
                float _3505 = _3228;
                float _3506 = _3230;
                uint _3507 = _3237;
                uint _3516;
                bool _3517;
                for (;;)
                {
                    _3516 = texelFetch(g_lightClassification, int((((_3113 << 5u) + (_3099 << 9u)) + (_3507 << 2u)) >> 2u)).x;
                    _3517 = _3516 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3517)
                    {
                        frontier_phi_77_pred = _3506;
                        frontier_phi_77_pred_1 = _3505;
                        frontier_phi_77_pred_2 = _3504;
                        frontier_phi_77_pred_3 = _3503;
                        frontier_phi_77_pred_4 = _3502;
                        frontier_phi_77_pred_5 = _3501;
                    }
                    else
                    {
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _4003;
                        float _4004;
                        float _4005;
                        float _4006;
                        float _4007;
                        float _4008;
                        float _3723 = _3501;
                        float _3724 = _3502;
                        float _3725 = _3503;
                        float _3726 = _3504;
                        float _3727 = _3505;
                        float _3728 = _3506;
                        uint _3729 = _3516;
                        uint _3730;
                        vec4 _3755;
                        float _3756;
                        vec4 _3771;
                        vec3 _3783;
                        vec4 _3798;
                        vec4 _3813;
                        float _3859;
                        bool _3860;
                        for (;;)
                        {
                            uint _3740 = ((_3507 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3729));
                            _3730 = (_3729 + 4294967295u) & _3729;
                            uint _3742 = _3740 * 40u;
                            _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            _3756 = _3755.w;
                            uint _3758 = (_3740 * 40u) + 4u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            uint _3773 = (_3740 * 40u) + 8u;
                            _3783 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x));
                            uint _3785 = (_3740 * 40u) + 16u;
                            _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            uint _3800 = (_3740 * 40u) + 20u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3815 = (_3740 * 40u) + 24u;
                            vec4 _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            uint _3834 = (_3740 * 40u) + 28u;
                            vec4 _3847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 3u)).x));
                            _3859 = fma(_3075, _3847.z, fma(_3074, _3847.y, _3847.x * _3073)) + _3847.w;
                            _3860 = !((fma(_3075, _3828.z, fma(_3074, _3828.y, _3828.x * _3073)) + _3828.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3860)
                            {
                                float _3887 = _3755.x - _3073;
                                float _3888 = _3755.y - _3074;
                                float _3889 = _3755.z - _3075;
                                float _3890 = dot(vec3(_3887, _3888, _3889), vec3(_3887, _3888, _3889));
                                float _3893 = inversesqrt(_3890);
                                float _3894 = _3893 * _3887;
                                float _3895 = _3893 * _3888;
                                float _3896 = _3893 * _3889;
                                float _3900 = 1.0 - (_3890 / (_3756 * _3756));
                                float _5114 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3901 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                                float _3905 = sqrt(_3890) * _3771.w;
                                float _3907 = 1.39999997615814208984375 / (_3905 + 1.39999997615814208984375);
                                float _3908 = _3907 * _3907;
                                float _3911 = ((1.0 - _3908) * dot(vec3(_3894, _3895, _3896), vec3(_1287, _1290, _1293))) + _3908;
                                float _3914 = _3905 * _3905;
                                float _3918 = (fma(_3075, _3798.z, fma(_3074, _3798.y, _3798.x * _3073)) + _3798.w) / _3859;
                                float _3919 = (fma(_3075, _3813.z, fma(_3074, _3813.y, _3813.x * _3073)) + _3813.w) / _3859;
                                float _3923 = 1.0 - dot(vec2(_3918, _3919), vec2(_3918, _3919));
                                float _5130 = isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0));
                                float _3924 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3925 = _3924 * (((isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0))) * _3901) / ((_3914 * 0.699999988079071044921875) + 1.0));
                                float _3937 = exp2(log2(1.0 / ((_3914 * 3.5) + 5.0)) * 0.25);
                                float _3938 = 1.0 - _1362;
                                float _3945 = sqrt(1.0 - ((1.0 - (_3938 * _3938)) * (1.0 - (_3937 * _3937))));
                                float _3946 = _3945 * _3945;
                                float _3947 = _3946 * _3946;
                                float _3948 = _3894 - _3367;
                                float _3949 = _3895 - _3368;
                                float _3950 = _3896 - _3369;
                                float _3954 = inversesqrt(dot(vec3(_3948, _3949, _3950), vec3(_3948, _3949, _3950)));
                                float _3958 = dot(vec3(_1287, _1290, _1293), vec3((-0.0) - _3367, (-0.0) - _3368, (-0.0) - _3369));
                                float _5141 = isnan(0.0) ? _3958 : (isnan(_3958) ? 0.0 : max(_3958, 0.0));
                                float _3961 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3962 = dot(vec3(_1287, _1290, _1293), vec3(_3954 * _3948, _3954 * _3949, _3954 * _3950));
                                float _5152 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3965 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3969 = ((_3965 * _3965) * (_3947 + (-1.0))) + 1.0;
                                float _3970 = _3907 * _3946;
                                float _3971 = _3970 * _3970;
                                float _3977 = ((1.0 - _3971) * dot(vec3(_1287, _1290, _1293), vec3(_3894, _3895, _3896))) + _3971;
                                float _5163 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3978 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
                                float _3979 = 1.0 - _3946;
                                float _3989 = (0.5 / (((_3978 * ((_3961 * _3979) + _3946)) + 9.9999999392252902907785028219223e-09) + (((_3978 * _3979) + _3946) * _3961))) * _3978;
                                float _5174 = isnan(0.0) ? _3989 : (isnan(_3989) ? 0.0 : max(_3989, 0.0));
                                float _3999 = (_3924 * _3901) * (((_3947 * 3.1415927410125732421875) * (isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0)))) / ((_3969 * _3969) * ((_3914 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3925 * _3771.y;
                                frontier_phi_83_pred_1 = _3925 * _3771.x;
                                frontier_phi_83_pred_2 = _3999 * _3783.z;
                                frontier_phi_83_pred_3 = _3999 * _3783.y;
                                frontier_phi_83_pred_4 = _3999 * _3783.x;
                                frontier_phi_83_pred_5 = _3925 * _3771.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4007 = frontier_phi_83_pred;
                            _4006 = frontier_phi_83_pred_1;
                            _4005 = frontier_phi_83_pred_2;
                            _4004 = frontier_phi_83_pred_3;
                            _4003 = frontier_phi_83_pred_4;
                            _4008 = frontier_phi_83_pred_5;
                            _3713 = _4006 + _3726;
                            _3714 = _4007 + _3727;
                            _3715 = _4008 + _3728;
                            _3710 = _4003 + _3723;
                            _3711 = _4004 + _3724;
                            _3712 = _4005 + _3725;
                            if (_3730 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3723 = _3710;
                                _3724 = _3711;
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3714;
                                _3728 = _3715;
                                _3729 = _3730;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3715;
                        frontier_phi_77_pred_1 = _3714;
                        frontier_phi_77_pred_2 = _3713;
                        frontier_phi_77_pred_3 = _3712;
                        frontier_phi_77_pred_4 = _3711;
                        frontier_phi_77_pred_5 = _3710;
                    }
                    _3352 = frontier_phi_77_pred;
                    _3350 = frontier_phi_77_pred_1;
                    _3348 = frontier_phi_77_pred_2;
                    _3346 = frontier_phi_77_pred_3;
                    _3344 = frontier_phi_77_pred_4;
                    _3342 = frontier_phi_77_pred_5;
                    uint _3508 = _3507 + 1u;
                    if (_3508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3501 = _3342;
                        _3502 = _3344;
                        _3503 = _3346;
                        _3504 = _3348;
                        _3505 = _3350;
                        _3506 = _3352;
                        _3507 = _3508;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3346;
                frontier_phi_58_59_ladder_1 = _3352;
                frontier_phi_58_59_ladder_2 = _3350;
                frontier_phi_58_59_ladder_3 = _3348;
                frontier_phi_58_59_ladder_4 = _3344;
                frontier_phi_58_59_ladder_5 = _3342;
            }
            else
            {
                frontier_phi_58_59_ladder = _3224;
                frontier_phi_58_59_ladder_1 = _3230;
                frontier_phi_58_59_ladder_2 = _3228;
                frontier_phi_58_59_ladder_3 = _3226;
                frontier_phi_58_59_ladder_4 = _3222;
                frontier_phi_58_59_ladder_5 = _3220;
            }
            _3341 = frontier_phi_58_59_ladder_5;
            _3343 = frontier_phi_58_59_ladder_4;
            _3345 = frontier_phi_58_59_ladder;
            _3347 = frontier_phi_58_59_ladder_3;
            _3349 = frontier_phi_58_59_ladder_2;
            _3351 = frontier_phi_58_59_ladder_1;
        }
        float _3356 = isnan(1.0) ? _1346 : (isnan(_1346) ? 1.0 : min(_1346, 1.0));
        _3132 = (_3356 * _3347) + _2565;
        _3134 = (_3356 * _3349) + _2567;
        _3136 = (_3356 * _3351) + _2569;
        _3138 = ((_3341 * _1330) * _3356) + _2913;
        _3140 = ((_3343 * _1332) * _3356) + _2915;
        _3142 = ((_3345 * _1333) * _3356) + _2917;
    }
    else
    {
        _3132 = _2565;
        _3134 = _2567;
        _3136 = _2569;
        _3138 = _2913;
        _3140 = _2915;
        _3142 = _2917;
    }
    float _5190 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _5201 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _5212 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _3159 = ((isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0))) * (_3132 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1346))) + ((_3138 + ((isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0))) * _2183)) * cbPerFrame._m0[3u].x);
    float _3160 = ((isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3134 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1346))) + ((_3140 + ((isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0))) * _2183)) * cbPerFrame._m0[3u].x);
    float _3161 = ((isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0))) * (_3136 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1346))) + ((_3142 + ((isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0))) * _2183)) * cbPerFrame._m0[3u].x);
    uint _3162 = _305 + 6u;
    float _3170 = _1268 / cbSceneParam._m0[86u].x;
    float _3171 = _1269 / cbSceneParam._m0[86u].y;
    vec4 _3185 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3170, _3171, (log2((isnan(cbSceneParam._m0[77u].w) ? _1191 : (isnan(_1191) ? cbSceneParam._m0[77u].w : min(_1191, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3187 = _3185.x;
    float _3188 = _3185.y;
    float _3189 = _3185.z;
    float _3190 = _3185.w;
    float _3283;
    float _3285;
    float _3287;
    float _3289;
    if (_1191 > cbSceneParam._m0[78u].w)
    {
        float _3245 = isnan(_1191) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1191 : min(cbSceneParam._m0[80u].w, _1191));
        float _3246 = _3245 / _1191;
        float _3257 = _3246 * _1241;
        float _3258 = _1242 * _3246;
        float _3259 = (-0.0) - _3258;
        float _3261 = _3246 * _1243;
        float _3263 = (cbSceneParam._m0[77u].w * _3259) / _3245;
        float _3264 = _3263 + cbSceneParam._m0[79u].w;
        float _3265 = cbSceneParam._m0[79u].w - _3258;
        float _3271 = sqrt(((_3257 * _3257) + (_3258 * _3258)) + (_3261 * _3261));
        float _3274 = (1.0 - (cbSceneParam._m0[77u].w / _3245)) * _3271;
        float _3279 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3281 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3458;
        if (abs((_3259 - _3263) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3458 = ((((_3264 > 0.0) ? exp2(_3279 * _3264) : (2.0 - exp2(_3281 * _3264))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3274;
        }
        else
        {
            float _3402 = 1.0 / cbSceneParam._m0[80u].x;
            float _3403 = isnan(_3265) ? _3264 : (isnan(_3264) ? _3265 : max(_3264, _3265));
            float _3404 = isnan(_3265) ? _3264 : (isnan(_3264) ? _3265 : min(_3264, _3265));
            float _3413 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : min(_3403, 0.0));
            float _3414 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : min(_3404, 0.0));
            _3458 = ((abs(_3271 / _3259) * cbSceneParam._m0[80u].y) * ((((_3413 - _3414) * 2.0) - ((exp2(_3279 * (isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0)))) - exp2(_3279 * (isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))))) * _3402)) - ((exp2(_3281 * _3413) - exp2(_3281 * _3414)) * _3402))) + (_3274 * cbSceneParam._m0[80u].z);
        }
        vec4 _3460 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3170, _3171, 1.0), 0.0);
        float _3469 = exp2((_3458 * (-1.44269502162933349609375)) * (1.0 - _3460.w));
        float _3470 = log2(_3469);
        float _3486 = log2(_3190);
        _3283 = (exp2(_3486 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].x)) * _3460.x) / cbSceneParam._m0[78u].x)) + _3187;
        _3285 = (exp2(_3486 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].y)) * _3460.y) / cbSceneParam._m0[78u].y)) + _3188;
        _3287 = (exp2(_3486 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3470 * cbSceneParam._m0[78u].z)) * _3460.z) / cbSceneParam._m0[78u].z)) + _3189;
        _3289 = _3469 * _3190;
    }
    else
    {
        _3283 = _3187;
        _3285 = _3188;
        _3287 = _3189;
        _3289 = _3190;
    }
    bool _3496;
    vec4 _3299;
    vec4 _3321;
    float _3323;
    float _3327;
    float _3328;
    float _3329;
    float _3330;
    bool _3340;
    for (;;)
    {
        _3299 = cbMatDynParam._m0[0u];
        float _3301 = roundEven(_3299.y);
        bool _3302 = _3301 == 3.0;
        float _3303 = log2(_3289);
        float _3310 = exp2(_3303 * cbSceneParam._m0[78u].x) * _3159;
        float _3311 = exp2(_3303 * cbSceneParam._m0[78u].y) * _3160;
        float _3312 = exp2(_3303 * cbSceneParam._m0[78u].z) * _3161;
        float _3319 = _1257 + (-0.5);
        _3321 = cbMtdParam._m0[1u];
        _3323 = _3321.y * _3319;
        float _3326 = (_3301 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3327 = _3326 * (_3302 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3283)));
        _3328 = _3326 * (_3302 ? _3311 : (_3311 + (cbSceneParam._m0[72u].w * _3285)));
        _3329 = _3326 * (_3302 ? _3312 : (_3312 + (cbSceneParam._m0[72u].w * _3287)));
        _3330 = _3319 * 0.999000012874603271484375;
        _3340 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3340)
        {
            if ((cbInstanceData._m0[_305 + 7u].x + _3330) < 0.5)
            {
                _3496 = true;
                break;
            }
        }
        uint _3437 = _1306 + uint(_3299.w);
        if ((cbInstanceData._m0[_3437].w < 1.0) && ((cbInstanceData._m0[_3437].w + _3330) < 0.5))
        {
            _3496 = true;
            break;
        }
        if ((_3323 + 1.0) < _3321.x)
        {
            _3496 = true;
            break;
        }
        _3496 = false;
        break;
    }
    float _3701;
    if (_3496)
    {
        discard_state = true;
        _3701 = 0.0;
    }
    else
    {
        _3701 = cbInstanceData._m0[_3162].w;
    }
    SV_Target.x = _3327;
    SV_Target.y = _3328;
    SV_Target.z = _3329;
    SV_Target.w = _3701;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3162].w;
    discard_exit();
}


