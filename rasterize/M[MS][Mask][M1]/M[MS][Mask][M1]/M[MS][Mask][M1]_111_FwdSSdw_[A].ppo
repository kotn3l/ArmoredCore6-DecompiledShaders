#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1479;
float _3881;
float _3882;
float _3883;
float _3884;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _346.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3893 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _424 = (_417 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _425 = (_417 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _426 = (_417 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _346.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3904 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _537 = _535.x;
    float _547 = dot(vec4(_537, _535.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _559 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _346.z) * 2.0) - ((((_537 - _547) * cbMtdParam._m0[23u].w) + _547) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3915 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _567 = (_560 * ((_518.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _568 = (_560 * ((_518.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _569 = (_560 * ((_518.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _417) + _606;
    float _616 = ((_587.y - _607) * _417) + _607;
    float _617 = ((_587.z - _608) * _417) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _640 = ((_629.x - _615) * _490) + _615;
    float _641 = ((_629.y - _616) * _490) + _616;
    float _642 = ((_629.z - _617) * _490) + _617;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _667 = ((_654.z - _642) * _560) + _642;
    float _670 = ((((_654.x - _640) * _560) + _640) * 2.0) + (-1.0);
    float _672 = ((((_654.y - _641) * _560) + _641) * 2.0) + (-1.0);
    float _673 = dot(vec2(_670, _672), vec2(_670, _672));
    float _3926 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _678 = sqrt(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _719 = _717.x;
    float _720 = 1.0 - _719;
    float _735 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_719 - _720) * cbMtdParam._m0[24u].z) + _720) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3937 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _743 = (_736 * (cbMtdParam._m0[17u].x - _567)) + _567;
    float _744 = (_736 * (cbMtdParam._m0[17u].y - _568)) + _568;
    float _745 = (_736 * (cbMtdParam._m0[17u].z - _569)) + _569;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _773 = _771.x;
    float _791 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _773) * _417) + _773;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _791) * _490) + _791;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _808) * _560) + _808;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _826) * cbMtdParam._m0[19u].z) + _826;
    float _832 = _830 - (_830 * _736);
    float _836 = (cbMtdParam._m0[19u].w * (_692.z - _667)) + _667;
    vec4 _849 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _856 = (_849.x * 2.0) + (-1.0);
    float _857 = (_849.y * 2.0) + (-1.0);
    float _858 = dot(vec2(_856, _857), vec2(_856, _857));
    float _3948 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _866 = (_736 * (_849.z - _836)) + _836;
    float _869 = (((_692.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _670;
    float _870 = (((_692.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _672;
    float _882 = (((_856 - _869) + (cbMtdParam._m0[21u].x * _869)) * _736) + _869;
    float _883 = (((_857 - _870) + (cbMtdParam._m0[21u].x * _870)) * _736) + _870;
    float _884 = (_736 * (sqrt(1.0 - (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) - _678)) + _678;
    float _886 = cbMtdParam._m0[22u].x + _692.w;
    float _889 = fma(_884, _245 * NORMAL.x, fma(_883, _252 * TANGENT.x, (_238 * _230) * _882));
    float _892 = fma(_884, _245 * NORMAL.y, fma(_883, _252 * TANGENT.y, (_238 * _231) * _882));
    float _895 = fma(_884, _245 * NORMAL.z, fma(_883, _252 * TANGENT.z, (_238 * _232) * _882));
    float _899 = inversesqrt(dot(vec3(_889, _892, _895), vec3(_889, _892, _895)));
    float _900 = _899 * _889;
    float _901 = _899 * _892;
    float _902 = _899 * _895;
    float _3959 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _903 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _3981 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _3992 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4003 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4014 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _908 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _922 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _972 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _962);
    float _973 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _962);
    float _974 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _962);
    float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
    float _979 = _972 * _978;
    float _980 = _973 * _978;
    float _981 = _974 * _978;
    vec4 _986 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _988 = _986.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1160 = sqrt(((_972 * _972) + (_973 * _973)) + (_974 * _974));
        float _1166 = (cbMatDynParam._m0[5u].x * _1160) + cbMatDynParam._m0[5u].y;
        float _4025 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1171 = (cbMatDynParam._m0[5u].z * _1160) + cbMatDynParam._m0[5u].w;
        float _4036 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) - _1167)) + _1167) < ((_988 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _999 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1000 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1018 = fma(_902, cbSceneParam._m0[5u].z, fma(_901, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _900));
    float _1021 = fma(_902, cbSceneParam._m0[6u].z, fma(_901, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _900));
    float _1024 = fma(_902, cbSceneParam._m0[7u].z, fma(_901, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _900));
    uint _1037 = _258 + 9u;
    uint _1038 = _1037 + uint(cbMatDynParam._m0[0u].w);
    float _1044 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_1038].x;
    float _1045 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_1038].y;
    float _1046 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_1038].z;
    float _4047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _1049 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _1050 = 1.0 - _908;
    float _1051 = _1047 * _1050;
    float _1052 = _1048 * _1050;
    float _1053 = _1049 * _1050;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _908;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _908;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _908;
    float _1061 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    vec4 _1073 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _999, cbSceneParam._m0[86u].y * _1000));
    float _1077 = ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * TEXCOORD_5.w) * _1073.x;
    float _1078 = dot(vec3(_900, _901, _902), vec3(_979, _980, _981));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _900) - _979;
    float _1086 = (_1081 * _901) - _980;
    float _1087 = (_1081 * _902) - _981;
    float _1091 = abs(dot(vec3(_979, _980, _981), vec3(_900, _901, _902)));
    float _4080 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_903);
    float _1106 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1112 = (1.0 - _1106) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1113 = _1106 * _1093;
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1478;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1203 = fma(_1149, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1141));
        float _1207 = fma(_1149, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1141));
        float _1211 = fma(_1149, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1141));
        float _1236 = _1141 + _900;
        float _1237 = _1145 + _901;
        float _1238 = _1149 + _902;
        float _1248 = fma(_1238, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1236)) - _1203;
        float _1249 = fma(_1238, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1236)) - _1207;
        float _1250 = fma(_1238, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1236)) - _1211;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1203 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1207 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[34u].z) + ((((((_1211 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1306 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1272.x + (-0.5));
        float _1308 = _1306 * (_1272.y + (-0.5));
        float _1309 = _1306 * (_1272.z + (-0.5));
        float _1316 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1279.x + (-0.5));
        float _1318 = _1316 * (_1279.y + (-0.5));
        float _1319 = _1316 * (_1279.z + (-0.5));
        float _1326 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1286.x + (-0.5));
        float _1328 = _1326 * (_1286.y + (-0.5));
        float _1329 = _1326 * (_1286.z + (-0.5));
        float _1336 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1293.x + (-0.5));
        float _1338 = _1336 * (_1293.y + (-0.5));
        float _1339 = _1336 * (_1293.z + (-0.5));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = _1307 * 0.5;
        float _1344 = _1317 * 0.5;
        float _1345 = _1327 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1360 = (dot(vec3(_900, _901, _902), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1370 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _4128 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1372 + 1.0))) + _1377) * _1340;
        float _1387 = _1308 * 0.5;
        float _1388 = _1318 * 0.5;
        float _1389 = _1328 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_900, _901, _902), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _4161 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1414 + 1.0))) + _1419) * _1341;
        float _1429 = _1309 * 0.5;
        float _1430 = _1319 * 0.5;
        float _1431 = _1329 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_900, _901, _902), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4194 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1456 + 1.0))) + _1461) * _1342;
        _1478 = _1309;
        _1480 = _1308;
        _1481 = _1307;
        _1482 = _1319;
        _1483 = _1318;
        _1484 = _1317;
        _1485 = _1329;
        _1486 = _1328;
        _1487 = _1327;
        _1488 = _1342;
        _1489 = _1341;
        _1490 = _1340;
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1493 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1479;
        _1480 = _1479;
        _1481 = _1479;
        _1482 = _1479;
        _1483 = _1479;
        _1484 = _1479;
        _1485 = _1479;
        _1486 = _1479;
        _1487 = _1479;
        _1488 = _1479;
        _1489 = _1479;
        _1490 = _1479;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1519 = fma(_1149, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141));
        float _1523 = fma(_1149, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141));
        float _1527 = fma(_1149, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141));
        float _1550 = _1141 + _900;
        float _1551 = _1145 + _901;
        float _1552 = _1149 + _902;
        float _1562 = fma(_1552, cbModelParam._m0[30u].z, fma(_1551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1550)) - _1519;
        float _1563 = fma(_1552, cbModelParam._m0[31u].z, fma(_1551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1550)) - _1523;
        float _1564 = fma(_1552, cbModelParam._m0[32u].z, fma(_1551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1550)) - _1527;
        float _1568 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
        float _1581 = ((_1568 * _1562) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1519 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1568 * _1563) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1523 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1568 * _1564) / cbModelParam._m0[35u].z) + ((((((_1527 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        float _1618 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1585.x + (-0.5));
        float _1620 = _1618 * (_1585.y + (-0.5));
        float _1621 = _1618 * (_1585.z + (-0.5));
        float _1628 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1592.x + (-0.5));
        float _1630 = _1628 * (_1592.y + (-0.5));
        float _1631 = _1628 * (_1592.z + (-0.5));
        float _1638 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1599.x + (-0.5));
        float _1640 = _1638 * (_1599.y + (-0.5));
        float _1641 = _1638 * (_1599.z + (-0.5));
        float _1648 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1606.x + (-0.5));
        float _1650 = _1648 * (_1606.y + (-0.5));
        float _1651 = _1648 * (_1606.z + (-0.5));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = _1619 * 0.5;
        float _1656 = _1629 * 0.5;
        float _1657 = _1639 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_900, _901, _902), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4257 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1682 + 1.0))) + _1687) * _1652;
        float _1697 = _1620 * 0.5;
        float _1698 = _1630 * 0.5;
        float _1699 = _1640 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_900, _901, _902), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4290 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1724 + 1.0))) + _1729) * _1653;
        float _1739 = _1621 * 0.5;
        float _1740 = _1631 * 0.5;
        float _1741 = _1641 * 0.5;
        float _1742 = dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741));
        float _1747 = (_1742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1742);
        float _1755 = (dot(vec3(_900, _901, _902), vec3(_1747 * _1739, _1747 * _1740, _1747 * _1741)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1764 = sqrt(((_1740 * _1740) + (_1739 * _1739)) + (_1741 * _1741)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1766 = _1765 * 2.0;
        float _1770 = (1.0 - _1765) / (_1765 + 1.0);
        float _4323 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1780 = ((((1.0 - _1771) * (_1766 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1766 + 1.0))) + _1771) * _1654;
        _1788 = _1621;
        _1789 = _1620;
        _1790 = _1619;
        _1791 = _1631;
        _1792 = _1630;
        _1793 = _1629;
        _1794 = _1641;
        _1795 = _1640;
        _1796 = _1639;
        _1797 = _1654;
        _1798 = _1653;
        _1799 = _1652;
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)));
    }
    else
    {
        _1788 = _1479;
        _1789 = _1479;
        _1790 = _1479;
        _1791 = _1479;
        _1792 = _1479;
        _1793 = _1479;
        _1794 = _1479;
        _1795 = _1479;
        _1796 = _1479;
        _1797 = _1479;
        _1798 = _1479;
        _1799 = _1479;
        _1800 = 0.0;
        _1801 = 0.0;
        _1802 = 0.0;
    }
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1491)) + _1491;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1492)) + _1492;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1493)) + _1493;
    float _1835 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1812));
    float _1856 = _1085 * 0.5;
    float _1857 = _1086 * 0.5;
    float _1858 = _1087 * 0.5;
    float _1859 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1862 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1865 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1899;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1872 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1478, _1482, _1485, _1488));
        float _1876 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1880 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1481, _1484, _1487, _1490));
        float _1887 = dot(vec4(cbModelParam._m0[39u]), vec4(_1856, _1857, _1858, 1.0));
        _1899 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1899 = 1.0;
    }
    float _1910;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1901 = dot(vec4(cbModelParam._m0[40u]), vec4(_1856, _1857, _1858, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1901) ? 0.0 : (isnan(0.0) ? _1901 : max(0.0, _1901))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1914 = (_1910 * cbModelParam._m0[1u].x) + (_1899 * (1.0 - cbModelParam._m0[1u].x));
    float _1924 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _903);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1924 : min(cbModelParam._m0[25u].z, _1924));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1972 = fma(_1149, cbModelParam._m0[13u].z, fma(_1145, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1141)) + cbModelParam._m0[13u].w;
        float _1976 = fma(_1149, cbModelParam._m0[14u].z, fma(_1145, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1141)) + cbModelParam._m0[14u].w;
        float _1980 = fma(_1149, cbModelParam._m0[15u].z, fma(_1145, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1141)) + cbModelParam._m0[15u].w;
        float _1983 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1986 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1989 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _2017;
        if (_1983 > 0.0)
        {
            _2017 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2017 = frontier_phi_17_15_ladder;
        }
        float _2241;
        if (_1986 > 0.0)
        {
            _2241 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2241 = frontier_phi_26_22_ladder;
        }
        float _2498;
        if (_1989 > 0.0)
        {
            _2498 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2498 = frontier_phi_38_33_ladder;
        }
        float _2500 = isnan(_2241) ? _2017 : (isnan(_2017) ? _2241 : min(_2017, _2241));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1983) + _1972;
        float _2506 = (_2501 * _1986) + _1976;
        float _2507 = (_2501 * _1989) + _1980;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2508;
        float _2512 = _2508 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 > _2512) || ((_2506 < _2510) || ((_2505 < _2510) || (_2505 > _2512))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2507, cbModelParam._m0[9u].z, fma(_2506, cbModelParam._m0[9u].y, _2505 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2507, cbModelParam._m0[10u].z, fma(_2506, cbModelParam._m0[10u].y, _2505 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2507, cbModelParam._m0[11u].z, fma(_2506, cbModelParam._m0[11u].y, _2505 * cbModelParam._m0[11u].x))), _1925);
            frontier_phi_16_38_ladder = _2635.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2635.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2635.x * cbModelParam._m0[1u].y;
        }
        _2005 = frontier_phi_16_38_ladder_2;
        _2007 = frontier_phi_16_38_ladder_1;
        _2009 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1925);
        _2005 = _1993.x * cbModelParam._m0[1u].y;
        _2007 = _1993.y * cbModelParam._m0[1u].y;
        _2009 = _1993.z * cbModelParam._m0[1u].y;
    }
    float _2013 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _903);
    float _2014 = isnan(_2013) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2013 : min(cbModelParam._m0[25u].w, _2013));
    float _2104;
    float _2106;
    float _2108;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2068 = fma(_1149, cbModelParam._m0[21u].z, fma(_1145, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1141)) + cbModelParam._m0[21u].w;
        float _2072 = fma(_1149, cbModelParam._m0[22u].z, fma(_1145, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1141)) + cbModelParam._m0[22u].w;
        float _2076 = fma(_1149, cbModelParam._m0[23u].z, fma(_1145, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1141)) + cbModelParam._m0[23u].w;
        float _2079 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2082 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2085 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2246;
        if (_2079 > 0.0)
        {
            _2246 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2246 = frontier_phi_28_24_ladder;
        }
        float _2525;
        if (_2082 > 0.0)
        {
            _2525 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2525 = frontier_phi_40_35_ladder;
        }
        float _2738;
        if (_2085 > 0.0)
        {
            _2738 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2738 = frontier_phi_49_46_ladder;
        }
        float _2740 = isnan(_2525) ? _2246 : (isnan(_2246) ? _2525 : min(_2246, _2525));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _2079) + _2068;
        float _2746 = (_2741 * _2082) + _2072;
        float _2747 = (_2741 * _2085) + _2076;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2748;
        float _2751 = _2748 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2747 > _2751) || ((_2747 < _2749) || ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 < _2749) || (_2745 > _2751))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2747, cbModelParam._m0[17u].z, fma(_2746, cbModelParam._m0[17u].y, _2745 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2747, cbModelParam._m0[18u].z, fma(_2746, cbModelParam._m0[18u].y, _2745 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2747, cbModelParam._m0[19u].z, fma(_2746, cbModelParam._m0[19u].y, _2745 * cbModelParam._m0[19u].x))), _2014);
            frontier_phi_25_49_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2104 = frontier_phi_25_49_ladder_2;
        _2106 = frontier_phi_25_49_ladder_1;
        _2108 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2088 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _2014);
        _2104 = _2088.x * cbModelParam._m0[1u].z;
        _2106 = _2088.y * cbModelParam._m0[1u].z;
        _2108 = _2088.z * cbModelParam._m0[1u].z;
    }
    float _2121 = (((_1112 * _1061) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2104 - _2005)) + _2005);
    float _2123 = (((_1112 * _1063) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2106 - _2007)) + _2007);
    float _2125 = (((_1112 * _1064) + _1113) * _1077) * ((cbModelParam._m0[1u].w * (_2108 - _2009)) + _2009);
    float _2128 = fma(_2125, cbSceneParam._m0[89u].z, fma(_2123, cbSceneParam._m0[89u].y, _2121 * cbSceneParam._m0[89u].x));
    float _2131 = fma(_2125, cbSceneParam._m0[90u].z, fma(_2123, cbSceneParam._m0[90u].y, _2121 * cbSceneParam._m0[90u].x));
    float _2134 = fma(_2125, cbSceneParam._m0[91u].z, fma(_2123, cbSceneParam._m0[91u].y, _2121 * cbSceneParam._m0[91u].x));
    vec4 _2142 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_999, _1000));
    float _2144 = _2142.w;
    float _2156 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2144);
    float _2157 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2144);
    float _2158 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2144);
    uvec4 _2162 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2164 = _2162.x * 14u;
    uint _2165 = _2164 + 13u;
    float _2172 = _1077 + (-1.0);
    float _2177 = (cbLight._m0[_2165].x * _2172) + 1.0;
    float _2178 = (cbLight._m0[_2165].y * _2172) + 1.0;
    float _2179 = (cbLight._m0[_2165].z * _2172) + 1.0;
    float _2180 = (cbLight._m0[_2165].w * _2172) + 1.0;
    uint _2181 = _2164 + 5u;
    float _2187 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2191 = _2164 + 4u;
    float _2200 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2204 = _2164 | 1u;
    float _2215 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_900, _901, _902));
    float _2218 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_900, _901, _902));
    float _4459 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _4470 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2223 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * 0.3183098733425140380859375;
    float _2225 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.3183098733425140380859375;
    float _2232 = ((cbLight._m0[_2181].x * _2187) * _2225) + (((cbLight._m0[_2191].x * _2156) * _2200) * _2223);
    float _2233 = ((_2187 * cbLight._m0[_2181].y) * _2225) + (((cbLight._m0[_2191].y * _2157) * _2200) * _2223);
    float _2234 = ((_2187 * cbLight._m0[_2181].z) * _2225) + (((cbLight._m0[_2191].z * _2158) * _2200) * _2223);
    uvec4 _2238 = floatBitsToUint(cbLight._m0[_2164 + 12u]);
    bool _2240 = _2238.x == 0u;
    float _2251;
    float _2253;
    float _2255;
    if (_2240)
    {
        _2251 = _2232;
        _2253 = _2233;
        _2255 = _2234;
    }
    else
    {
        uint _2259 = _2164 + 6u;
        float _2275 = (dot(vec3(cbLight._m0[_2164 + 2u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4481 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2278 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2251 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2232;
        _2253 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2233;
        _2255 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2234;
    }
    bool _2258 = _2238.y == 0u;
    float _2296;
    float _2298;
    float _2300;
    if (_2258)
    {
        _2296 = _2251;
        _2298 = _2253;
        _2300 = _2255;
    }
    else
    {
        uint _2469 = _2164 + 7u;
        float _2485 = (dot(vec3(cbLight._m0[_2164 + 3u].xyz), vec3(_900, _901, _902)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4497 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2488 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2296 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2251;
        _2298 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2253;
        _2300 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2255;
    }
    uint _2303 = _2164 + 8u;
    float _2316 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _903) * 0.949999988079071044921875);
    float _2317 = _2316 * _2316;
    float _2318 = cbLight._m0[_2164].x + _979;
    float _2319 = cbLight._m0[_2164].y + _980;
    float _2320 = cbLight._m0[_2164].z + _981;
    float _2324 = inversesqrt(dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320)));
    float _2325 = _2324 * _2318;
    float _2326 = _2324 * _2319;
    float _2327 = _2324 * _2320;
    float _2328 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2164].xyz));
    float _4513 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _4524 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2332 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2333 = dot(vec3(_900, _901, _902), vec3(_2325, _2326, _2327));
    float _4535 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2336 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2337 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2325, _2326, _2327));
    float _4546 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2341 = _2317 * _2317;
    float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
    float _2353 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
    float _2354 = 0.959999978542327880859375 - _1058;
    float _2356 = 0.959999978542327880859375 - _1059;
    float _2357 = 0.959999978542327880859375 - _1060;
    float _2364 = 1.0 - _2317;
    float _2375 = (0.5 / (((_2332 * ((_2331 * _2364) + _2317)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2364) + _2317) * _2331))) * _2331;
    float _4557 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
    uint _2391 = _2164 + 9u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2204].w)) * _903) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2204].x + _979;
    float _2405 = cbLight._m0[_2204].y + _980;
    float _2406 = cbLight._m0[_2204].z + _981;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2204].xyz));
    float _4568 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2418 = dot(vec3(_900, _901, _902), vec3(_2411, _2412, _2413));
    float _4579 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2204].xyz), vec3(_2411, _2412, _2413));
    float _4590 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2403 * _2403;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2437 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2444 = 1.0 - _2403;
    float _2454 = (0.5 / (((_2332 * ((_2417 * _2444) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2444) + _2403) * _2417))) * _2417;
    float _4601 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    float _2466 = (((((_2437 * _2354) + _1061) * cbLight._m0[_2391].x) * _2456) * _2187) + ((((cbLight._m0[_2303].x * _2156) * ((_2353 * _2354) + _1061)) * _2377) * _2200);
    float _2467 = (((((_2437 * _2356) + _1063) * cbLight._m0[_2391].y) * _2456) * _2187) + ((((cbLight._m0[_2303].y * _2157) * ((_2353 * _2356) + _1063)) * _2377) * _2200);
    float _2468 = (((((_2437 * _2357) + _1064) * cbLight._m0[_2391].z) * _2456) * _2187) + ((((cbLight._m0[_2303].z * _2158) * ((_2353 * _2357) + _1064)) * _2377) * _2200);
    float _2530;
    float _2532;
    float _2534;
    if (_2240)
    {
        _2530 = _2466;
        _2532 = _2467;
        _2534 = _2468;
    }
    else
    {
        uint _2536 = _2164 + 2u;
        uint _2540 = _2164 + 10u;
        float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _903) * 0.949999988079071044921875);
        float _2555 = _2554 * _2554;
        float _2556 = cbLight._m0[_2536].x + _979;
        float _2557 = cbLight._m0[_2536].y + _980;
        float _2558 = cbLight._m0[_2536].z + _981;
        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
        float _2563 = _2562 * _2556;
        float _2564 = _2562 * _2557;
        float _2565 = _2562 * _2558;
        float _2566 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2536].xyz));
        float _4612 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2570 = dot(vec3(_900, _901, _902), vec3(_2563, _2564, _2565));
        float _4623 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2574 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2563, _2564, _2565));
        float _4634 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2578 = _2555 * _2555;
        float _2582 = ((_2573 * _2573) * (_2578 + (-1.0))) + 1.0;
        float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
        float _2596 = 1.0 - _2555;
        float _2606 = (0.5 / (((_2332 * ((_2569 * _2596) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2596) + _2555) * _2569))) * _2569;
        float _4645 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2608 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2578 / ((_2582 * _2582) * 3.141590118408203125));
        float _2609 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2530 = (((((_2589 * _2354) + _1061) * cbLight._m0[_2540].x) * _2608) * _2609) + _2466;
        _2532 = (((((_2589 * _2356) + _1063) * cbLight._m0[_2540].y) * _2608) * _2609) + _2467;
        _2534 = (((((_2589 * _2357) + _1064) * cbLight._m0[_2540].z) * _2608) * _2609) + _2468;
    }
    float _2644;
    float _2646;
    float _2648;
    if (_2258)
    {
        _2644 = _2530;
        _2646 = _2532;
        _2648 = _2534;
    }
    else
    {
        uint _2655 = _2164 + 3u;
        uint _2659 = _2164 + 11u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _903) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _979;
        float _2676 = cbLight._m0[_2655].y + _980;
        float _2677 = cbLight._m0[_2655].z + _981;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_900, _901, _902), vec3(cbLight._m0[_2655].xyz));
        float _4661 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2689 = dot(vec3(_900, _901, _902), vec3(_2682, _2683, _2684));
        float _4672 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4683 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2708 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
        float _2715 = 1.0 - _2674;
        float _2725 = (0.5 / (((_2332 * ((_2688 * _2715) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2332 * _2715) + _2674) * _2688))) * _2688;
        float _4694 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2644 = (((((_2708 * _2354) + _1061) * cbLight._m0[_2659].x) * _2727) * _2728) + _2530;
        _2646 = (((((_2708 * _2356) + _1063) * cbLight._m0[_2659].y) * _2727) * _2728) + _2532;
        _2648 = (((((_2708 * _2357) + _1064) * cbLight._m0[_2659].z) * _2727) * _2728) + _2534;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2162.y == 0u)
    {
        float _2803 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2803;
        float _2805 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2803;
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2803;
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.x;
        uint _2830 = uint((float(_2818.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1000) / _2819))) + floor(float(uint(cbSceneParam._m0[85u].x * _999) / _2819)));
        float _2840 = (log2(_2806 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2841 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        uint _2844 = uint(isnan(14.0) ? _2841 : (isnan(_2841) ? 14.0 : min(_2841, 14.0)));
        uvec4 _2849 = texelFetch(g_lightClusterGridBuffer, int(((_2844 << 2u) + (_2830 << 6u)) >> 2u));
        uint _2850 = _2849.x;
        uint _2851 = _2818.z;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((((1u << ((_2851 >> 4u) & 15u)) + 4294967295u) & _2850) == 0u) || ((_2851 & 240u) == 0u))
        {
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
        }
        else
        {
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            uint _3110 = 0u;
            uint _3119;
            bool _3120;
            for (;;)
            {
                _3119 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3110 << 2u)) >> 2u)).x;
                _3120 = _3119 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3120)
                {
                    frontier_phi_66_pred = _3104;
                    frontier_phi_66_pred_1 = _3109;
                    frontier_phi_66_pred_2 = _3108;
                    frontier_phi_66_pred_3 = _3107;
                    frontier_phi_66_pred_4 = _3106;
                    frontier_phi_66_pred_5 = _3105;
                }
                else
                {
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    uint _3255;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3119;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    for (;;)
                    {
                        uint _3259 = uint(findLSB(_3255)) + (_3110 << 5u);
                        uint _3256 = (_3255 + 4294967295u) & _3255;
                        uint _3261 = _3259 * 48u;
                        vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3281 = (_3259 * 48u) + 4u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3281)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3281 + 3u)).x));
                        uint _3300 = (_3259 * 48u) + 8u;
                        vec3 _3311 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x));
                        float _3315 = _3275.x - _2804;
                        float _3316 = _3275.y - _2805;
                        float _3317 = _3275.z - _2806;
                        float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                        float _3321 = inversesqrt(_3318);
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3325 = dot(vec3(_1018, _1021, _1024), vec3(_3322, _3323, _3324));
                        float _3330 = 1.0 - (_3318 * _3275.w);
                        float _4720 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                        float _3332 = sqrt(_3318) * _3294.w;
                        float _3335 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                        float _3336 = _3335 * _3335;
                        float _3339 = ((1.0 - _3336) * _3325) + _3336;
                        float _3342 = _3332 * _3332;
                        float _3346 = ((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3331) / ((_3342 * 0.699999988079071044921875) + 1.0);
                        float _3350 = (-0.0) - _2804;
                        float _3351 = (-0.0) - _2805;
                        float _3352 = (-0.0) - _2806;
                        float _3356 = inversesqrt(dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352)));
                        float _3357 = _3356 * _3350;
                        float _3358 = _3356 * _3351;
                        float _3359 = _3356 * _3352;
                        float _3367 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                        float _3368 = 1.0 - _1093;
                        float _3375 = sqrt(1.0 - ((1.0 - (_3368 * _3368)) * (1.0 - (_3367 * _3367))));
                        float _3376 = _3375 * _3375;
                        float _3377 = _3376 * _3376;
                        float _3378 = _3357 + _3322;
                        float _3379 = _3358 + _3323;
                        float _3380 = _3359 + _3324;
                        float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                        float _3388 = dot(vec3(_1018, _1021, _1024), vec3(_3357, _3358, _3359));
                        float _4736 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3391 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3392 = dot(vec3(_1018, _1021, _1024), vec3(_3384 * _3378, _3384 * _3379, _3384 * _3380));
                        float _4747 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3395 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3399 = ((_3395 * _3395) * (_3377 + (-1.0))) + 1.0;
                        float _3400 = _3335 * _3376;
                        float _3401 = _3400 * _3400;
                        float _3404 = ((1.0 - _3401) * _3325) + _3401;
                        float _4758 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3405 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3406 = 1.0 - _3376;
                        float _3416 = (0.5 / (((_3405 * ((_3391 * _3406) + _3376)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3376) * _3391))) * _3405;
                        float _4769 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3427 = (((_3377 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3399 * _3399) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125))) * _3331;
                        _3179 = (_3346 * _3294.x) + _3252;
                        _3180 = (_3346 * _3294.y) + _3253;
                        _3181 = (_3346 * _3294.z) + _3254;
                        _3176 = (_3427 * _3311.x) + _3249;
                        _3177 = (_3427 * _3311.y) + _3250;
                        _3178 = (_3427 * _3311.z) + _3251;
                        if (_3256 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3256;
                        }
                    }
                    frontier_phi_66_pred = _3176;
                    frontier_phi_66_pred_1 = _3181;
                    frontier_phi_66_pred_2 = _3180;
                    frontier_phi_66_pred_3 = _3179;
                    frontier_phi_66_pred_4 = _3178;
                    frontier_phi_66_pred_5 = _3177;
                }
                _2952 = frontier_phi_66_pred;
                _2962 = frontier_phi_66_pred_1;
                _2960 = frontier_phi_66_pred_2;
                _2958 = frontier_phi_66_pred_3;
                _2956 = frontier_phi_66_pred_4;
                _2954 = frontier_phi_66_pred_5;
                uint _3111 = _3110 + 1u;
                if (_3111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3104 = _2952;
                    _3105 = _2954;
                    _3106 = _2956;
                    _3107 = _2958;
                    _3108 = _2960;
                    _3109 = _2962;
                    _3110 = _3111;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
        }
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.z;
        uint _2968 = (_2966 >> 8u) & 15u;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        if (((4294967295u << _2968) & _2850) == 0u)
        {
            _3072 = _2951;
            _3074 = _2953;
            _3076 = _2955;
            _3078 = _2957;
            _3080 = _2959;
            _3082 = _2961;
        }
        else
        {
            float _3097 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
            float _3098 = _3097 * _2804;
            float _3099 = _3097 * _2805;
            float _3100 = _3097 * _2806;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2968 < ((_2966 >> 12u) & 15u))
            {
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3083;
                float _3232 = _2951;
                float _3233 = _2953;
                float _3234 = _2955;
                float _3235 = _2957;
                float _3236 = _2959;
                float _3237 = _2961;
                uint _3238 = _2968;
                uint _3247;
                bool _3248;
                for (;;)
                {
                    _3247 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                    _3248 = _3247 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3248)
                    {
                        frontier_phi_77_pred = _3237;
                        frontier_phi_77_pred_1 = _3236;
                        frontier_phi_77_pred_2 = _3235;
                        frontier_phi_77_pred_3 = _3234;
                        frontier_phi_77_pred_4 = _3233;
                        frontier_phi_77_pred_5 = _3232;
                    }
                    else
                    {
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3454 = _3232;
                        float _3455 = _3233;
                        float _3456 = _3234;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        uint _3460 = _3247;
                        uint _3461;
                        vec4 _3486;
                        float _3487;
                        vec4 _3502;
                        vec3 _3514;
                        vec4 _3529;
                        vec4 _3544;
                        float _3590;
                        bool _3591;
                        for (;;)
                        {
                            uint _3471 = ((_3238 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3460));
                            _3461 = (_3460 + 4294967295u) & _3460;
                            uint _3473 = _3471 * 40u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            _3487 = _3486.w;
                            uint _3489 = (_3471 * 40u) + 4u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3471 * 40u) + 8u;
                            _3514 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x));
                            uint _3516 = (_3471 * 40u) + 16u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3531 = (_3471 * 40u) + 20u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3471 * 40u) + 24u;
                            vec4 _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3565 = (_3471 * 40u) + 28u;
                            vec4 _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            _3590 = fma(_2806, _3578.z, fma(_2805, _3578.y, _3578.x * _2804)) + _3578.w;
                            _3591 = !((fma(_2806, _3559.z, fma(_2805, _3559.y, _3559.x * _2804)) + _3559.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3591)
                            {
                                float _3618 = _3486.x - _2804;
                                float _3619 = _3486.y - _2805;
                                float _3620 = _3486.z - _2806;
                                float _3621 = dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620));
                                float _3624 = inversesqrt(_3621);
                                float _3625 = _3624 * _3618;
                                float _3626 = _3624 * _3619;
                                float _3627 = _3624 * _3620;
                                float _3631 = 1.0 - (_3621 / (_3487 * _3487));
                                float _4780 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3632 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3636 = sqrt(_3621) * _3502.w;
                                float _3638 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                                float _3639 = _3638 * _3638;
                                float _3642 = ((1.0 - _3639) * dot(vec3(_3625, _3626, _3627), vec3(_1018, _1021, _1024))) + _3639;
                                float _3645 = _3636 * _3636;
                                float _3649 = (fma(_2806, _3529.z, fma(_2805, _3529.y, _3529.x * _2804)) + _3529.w) / _3590;
                                float _3650 = (fma(_2806, _3544.z, fma(_2805, _3544.y, _3544.x * _2804)) + _3544.w) / _3590;
                                float _3654 = 1.0 - dot(vec2(_3649, _3650), vec2(_3649, _3650));
                                float _4796 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3656 = _3655 * (((isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0))) * _3632) / ((_3645 * 0.699999988079071044921875) + 1.0));
                                float _3668 = exp2(log2(1.0 / ((_3645 * 3.5) + 5.0)) * 0.25);
                                float _3669 = 1.0 - _1093;
                                float _3676 = sqrt(1.0 - ((1.0 - (_3669 * _3669)) * (1.0 - (_3668 * _3668))));
                                float _3677 = _3676 * _3676;
                                float _3678 = _3677 * _3677;
                                float _3679 = _3625 - _3098;
                                float _3680 = _3626 - _3099;
                                float _3681 = _3627 - _3100;
                                float _3685 = inversesqrt(dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681)));
                                float _3689 = dot(vec3(_1018, _1021, _1024), vec3((-0.0) - _3098, (-0.0) - _3099, (-0.0) - _3100));
                                float _4807 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3692 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3693 = dot(vec3(_1018, _1021, _1024), vec3(_3685 * _3679, _3685 * _3680, _3685 * _3681));
                                float _4818 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3700 = ((_3696 * _3696) * (_3678 + (-1.0))) + 1.0;
                                float _3701 = _3638 * _3677;
                                float _3702 = _3701 * _3701;
                                float _3708 = ((1.0 - _3702) * dot(vec3(_1018, _1021, _1024), vec3(_3625, _3626, _3627))) + _3702;
                                float _4829 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3710 = 1.0 - _3677;
                                float _3720 = (0.5 / (((_3709 * ((_3692 * _3710) + _3677)) + 9.9999999392252902907785028219223e-09) + (((_3709 * _3710) + _3677) * _3692))) * _3709;
                                float _4840 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3730 = (_3655 * _3632) * (((_3678 * 3.1415927410125732421875) * (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) / ((_3700 * _3700) * ((_3645 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3656 * _3502.y;
                                frontier_phi_83_pred_1 = _3656 * _3502.x;
                                frontier_phi_83_pred_2 = _3730 * _3514.z;
                                frontier_phi_83_pred_3 = _3730 * _3514.y;
                                frontier_phi_83_pred_4 = _3730 * _3514.x;
                                frontier_phi_83_pred_5 = _3656 * _3502.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3738 = frontier_phi_83_pred;
                            _3737 = frontier_phi_83_pred_1;
                            _3736 = frontier_phi_83_pred_2;
                            _3735 = frontier_phi_83_pred_3;
                            _3734 = frontier_phi_83_pred_4;
                            _3739 = frontier_phi_83_pred_5;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            if (_3461 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3461;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3446;
                        frontier_phi_77_pred_1 = _3445;
                        frontier_phi_77_pred_2 = _3444;
                        frontier_phi_77_pred_3 = _3443;
                        frontier_phi_77_pred_4 = _3442;
                        frontier_phi_77_pred_5 = _3441;
                    }
                    _3083 = frontier_phi_77_pred;
                    _3081 = frontier_phi_77_pred_1;
                    _3079 = frontier_phi_77_pred_2;
                    _3077 = frontier_phi_77_pred_3;
                    _3075 = frontier_phi_77_pred_4;
                    _3073 = frontier_phi_77_pred_5;
                    uint _3239 = _3238 + 1u;
                    if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3232 = _3073;
                        _3233 = _3075;
                        _3234 = _3077;
                        _3235 = _3079;
                        _3236 = _3081;
                        _3237 = _3083;
                        _3238 = _3239;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3077;
                frontier_phi_58_59_ladder_1 = _3083;
                frontier_phi_58_59_ladder_2 = _3081;
                frontier_phi_58_59_ladder_3 = _3079;
                frontier_phi_58_59_ladder_4 = _3075;
                frontier_phi_58_59_ladder_5 = _3073;
            }
            else
            {
                frontier_phi_58_59_ladder = _2955;
                frontier_phi_58_59_ladder_1 = _2961;
                frontier_phi_58_59_ladder_2 = _2959;
                frontier_phi_58_59_ladder_3 = _2957;
                frontier_phi_58_59_ladder_4 = _2953;
                frontier_phi_58_59_ladder_5 = _2951;
            }
            _3072 = frontier_phi_58_59_ladder_5;
            _3074 = frontier_phi_58_59_ladder_4;
            _3076 = frontier_phi_58_59_ladder;
            _3078 = frontier_phi_58_59_ladder_3;
            _3080 = frontier_phi_58_59_ladder_2;
            _3082 = frontier_phi_58_59_ladder_1;
        }
        float _3087 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _2863 = (_3087 * _3078) + _2296;
        _2865 = (_3087 * _3080) + _2298;
        _2867 = (_3087 * _3082) + _2300;
        _2869 = ((_3072 * _1061) * _3087) + _2644;
        _2871 = ((_3074 * _1063) * _3087) + _2646;
        _2873 = ((_3076 * _1064) * _3087) + _2648;
    }
    else
    {
        _2863 = _2296;
        _2865 = _2298;
        _2867 = _2300;
        _2869 = _2644;
        _2871 = _2646;
        _2873 = _2648;
    }
    float _4856 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4867 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4878 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2890 = ((isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * (_2863 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1077))) + ((_2869 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2865 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1077))) + ((_2871 + ((isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2867 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1077))) + ((_2873 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    uint _2893 = _258 + 6u;
    float _2901 = _999 / cbSceneParam._m0[86u].x;
    float _2902 = _1000 / cbSceneParam._m0[86u].y;
    vec4 _2916 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, (log2((isnan(cbSceneParam._m0[77u].w) ? _922 : (isnan(_922) ? cbSceneParam._m0[77u].w : min(_922, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2918 = _2916.x;
    float _2919 = _2916.y;
    float _2920 = _2916.z;
    float _2921 = _2916.w;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_922 > cbSceneParam._m0[78u].w)
    {
        float _2976 = isnan(_922) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _922 : min(cbSceneParam._m0[80u].w, _922));
        float _2977 = _2976 / _922;
        float _2988 = _2977 * _972;
        float _2989 = _973 * _2977;
        float _2990 = (-0.0) - _2989;
        float _2992 = _2977 * _974;
        float _2994 = (cbSceneParam._m0[77u].w * _2990) / _2976;
        float _2995 = _2994 + cbSceneParam._m0[79u].w;
        float _2996 = cbSceneParam._m0[79u].w - _2989;
        float _3002 = sqrt(((_2988 * _2988) + (_2989 * _2989)) + (_2992 * _2992));
        float _3005 = (1.0 - (cbSceneParam._m0[77u].w / _2976)) * _3002;
        float _3010 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3012 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3189;
        if (abs((_2990 - _2994) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3189 = ((((_2995 > 0.0) ? exp2(_3010 * _2995) : (2.0 - exp2(_3012 * _2995))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3005;
        }
        else
        {
            float _3133 = 1.0 / cbSceneParam._m0[80u].x;
            float _3134 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : max(_2995, _2996));
            float _3135 = isnan(_2996) ? _2995 : (isnan(_2995) ? _2996 : min(_2995, _2996));
            float _3144 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : min(_3134, 0.0));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            _3189 = ((abs(_3002 / _2990) * cbSceneParam._m0[80u].y) * ((((_3144 - _3145) * 2.0) - ((exp2(_3010 * (isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0)))) - exp2(_3010 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))))) * _3133)) - ((exp2(_3012 * _3144) - exp2(_3012 * _3145)) * _3133))) + (_3005 * cbSceneParam._m0[80u].z);
        }
        vec4 _3191 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, 1.0), 0.0);
        float _3200 = exp2((_3189 * (-1.44269502162933349609375)) * (1.0 - _3191.w));
        float _3201 = log2(_3200);
        float _3217 = log2(_2921);
        _3014 = (exp2(_3217 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].x)) * _3191.x) / cbSceneParam._m0[78u].x)) + _2918;
        _3016 = (exp2(_3217 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].y)) * _3191.y) / cbSceneParam._m0[78u].y)) + _2919;
        _3018 = (exp2(_3217 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3201 * cbSceneParam._m0[78u].z)) * _3191.z) / cbSceneParam._m0[78u].z)) + _2920;
        _3020 = _3200 * _2921;
    }
    else
    {
        _3014 = _2918;
        _3016 = _2919;
        _3018 = _2920;
        _3020 = _2921;
    }
    bool _3227;
    vec4 _3030;
    vec4 _3052;
    float _3054;
    float _3058;
    float _3059;
    float _3060;
    float _3061;
    bool _3071;
    for (;;)
    {
        _3030 = cbMatDynParam._m0[0u];
        float _3032 = roundEven(_3030.y);
        bool _3033 = _3032 == 3.0;
        float _3034 = log2(_3020);
        float _3041 = exp2(_3034 * cbSceneParam._m0[78u].x) * _2890;
        float _3042 = exp2(_3034 * cbSceneParam._m0[78u].y) * _2891;
        float _3043 = exp2(_3034 * cbSceneParam._m0[78u].z) * _2892;
        float _3050 = _988 + (-0.5);
        _3052 = cbMtdParam._m0[1u];
        _3054 = _3052.y * _3050;
        float _3057 = (_3032 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3058 = _3057 * (_3033 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3014)));
        _3059 = _3057 * (_3033 ? _3042 : (_3042 + (cbSceneParam._m0[72u].w * _3016)));
        _3060 = _3057 * (_3033 ? _3043 : (_3043 + (cbSceneParam._m0[72u].w * _3018)));
        _3061 = _3050 * 0.999000012874603271484375;
        _3071 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3071)
        {
            if ((cbInstanceData._m0[_258 + 7u].x + _3061) < 0.5)
            {
                _3227 = true;
                break;
            }
        }
        uint _3168 = _1037 + uint(_3030.w);
        if ((cbInstanceData._m0[_3168].w < 1.0) && ((cbInstanceData._m0[_3168].w + _3061) < 0.5))
        {
            _3227 = true;
            break;
        }
        if ((_3054 + 1.0) < _3052.x)
        {
            _3227 = true;
            break;
        }
        _3227 = false;
        break;
    }
    float _3432;
    if (_3227)
    {
        discard_state = true;
        _3432 = 0.0;
    }
    else
    {
        _3432 = cbInstanceData._m0[_2893].w;
    }
    SV_Target.x = _3058;
    SV_Target.y = _3059;
    SV_Target.z = _3060;
    SV_Target.w = _3432;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2893].w;
    discard_exit();
}


