#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1375;
float _4038;
float _4039;
float _4040;
float _4041;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[23u].w) + _388) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4050 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _413 = (_406 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _414 = (_406 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _415 = (_406 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4061 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _525 = _523.x;
    float _526 = _523.y;
    float _527 = _523.z;
    float _534 = ((_506.x - _525) * _406) + _525;
    float _535 = ((_506.y - _526) * _406) + _526;
    float _536 = ((_506.z - _527) * _406) + _527;
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _561 = ((_548.z - _536) * _479) + _536;
    float _564 = ((((_548.x - _534) * _479) + _534) * 2.0) + (-1.0);
    float _566 = ((((_548.y - _535) * _479) + _535) * 2.0) + (-1.0);
    float _567 = dot(vec2(_564, _566), vec2(_564, _566));
    float _4072 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _598 = (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _564;
    float _599 = (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _566;
    float _602 = fma(_572, _238, fma(_599, _245, _598 * _231));
    float _605 = fma(_572, _239, fma(_599, _246, _598 * _232));
    float _608 = fma(_572, _240, fma(_599, _247, _598 * _233));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _641 = _639.x;
    float _642 = 1.0 - _641;
    float _651 = (cbMtdParam._m0[19u].x + dot(vec4(_612 * _602, _612 * _605, _612 * _608, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_641 - _642) * cbMtdParam._m0[24u].z) + _642) * cbMtdParam._m0[21u].z);
    float _4083 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _659 = (_652 * (cbMtdParam._m0[17u].x - _486)) + _486;
    float _660 = (_652 * (cbMtdParam._m0[17u].y - _487)) + _487;
    float _661 = (_652 * (cbMtdParam._m0[17u].z - _488)) + _488;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _689 = _687.x;
    float _707 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _689) * _406) + _689;
    float _724 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _707) * _479) + _707;
    float _728 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _724) * cbMtdParam._m0[19u].z) + _724;
    float _730 = _728 - (_728 * _652);
    float _734 = (cbMtdParam._m0[19u].w * (_586.z - _561)) + _561;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _754 = (_747.x * 2.0) + (-1.0);
    float _755 = (_747.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _4094 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _764 = ((_747.z - _734) * _652) + _734;
    float _774 = ((sqrt(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) - _572) * _652) + _572;
    float _777 = (((_754 - _598) * _652) + _598) + (cbMtdParam._m0[21u].x * _598);
    float _778 = (((_755 - _599) * _652) + _599) + (cbMtdParam._m0[21u].x * _599);
    float _780 = cbMtdParam._m0[22u].x + _586.w;
    float _783 = fma(_774, _238, fma(_778, _245, _777 * _231));
    float _786 = fma(_774, _239, fma(_778, _246, _777 * _232));
    float _789 = fma(_774, _240, fma(_778, _247, _777 * _233));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _4105 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _797 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4127 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4138 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4149 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4160 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _802 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    vec4 _881 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _883 = _881.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1055 = sqrt(((_867 * _867) + (_868 * _868)) + (_869 * _869));
        float _1061 = (cbMatDynParam._m0[5u].x * _1055) + cbMatDynParam._m0[5u].y;
        float _4171 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1066 = (cbMatDynParam._m0[5u].z * _1055) + cbMatDynParam._m0[5u].w;
        float _4182 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) - _1062)) + _1062) < ((_883 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _894 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _895 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _913 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _916 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _919 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    uint _932 = _250 + 9u;
    uint _933 = _932 + uint(cbMatDynParam._m0[0u].w);
    float _939 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * cbInstanceData._m0[_933].x;
    float _940 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * cbInstanceData._m0[_933].y;
    float _941 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_933].z;
    float _4193 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _942 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _945 = 1.0 - _802;
    float _946 = _942 * _945;
    float _947 = _943 * _945;
    float _948 = _944 * _945;
    float _953 = (_942 + (-0.039999999105930328369140625)) * _802;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _802;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _802;
    float _956 = _953 + 0.039999999105930328369140625;
    float _958 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    vec4 _968 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _894, cbSceneParam._m0[86u].y * _895));
    float _972 = ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * TEXCOORD_5.w) * _968.x;
    float _973 = dot(vec3(_794, _795, _796), vec3(_874, _875, _876));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _794) - _874;
    float _981 = (_976 * _795) - _875;
    float _982 = (_976 * _796) - _876;
    float _986 = abs(dot(vec3(_874, _875, _876), vec3(_794, _795, _796)));
    float _4226 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_797);
    float _1001 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1007 = (1.0 - _1001) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1008 = _1001 * _988;
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1374;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1099 = fma(_1044, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036));
        float _1103 = fma(_1044, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036));
        float _1107 = fma(_1044, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036));
        float _1132 = _1036 + _794;
        float _1133 = _1040 + _795;
        float _1134 = _1044 + _796;
        float _1144 = fma(_1134, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132)) - _1099;
        float _1145 = fma(_1134, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132)) - _1103;
        float _1146 = fma(_1134, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132)) - _1107;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1099 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1103 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[34u].z) + ((((((_1107 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1202 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1168.x + (-0.5));
        float _1204 = _1202 * (_1168.y + (-0.5));
        float _1205 = _1202 * (_1168.z + (-0.5));
        float _1212 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1175.x + (-0.5));
        float _1214 = _1212 * (_1175.y + (-0.5));
        float _1215 = _1212 * (_1175.z + (-0.5));
        float _1222 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1182.x + (-0.5));
        float _1224 = _1222 * (_1182.y + (-0.5));
        float _1225 = _1222 * (_1182.z + (-0.5));
        float _1232 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1189.x + (-0.5));
        float _1234 = _1232 * (_1189.y + (-0.5));
        float _1235 = _1232 * (_1189.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1256 = (dot(vec3(_794, _795, _796), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1266 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4274 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1268 + 1.0))) + _1273) * _1236;
        float _1283 = _1204 * 0.5;
        float _1284 = _1214 * 0.5;
        float _1285 = _1224 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_794, _795, _796), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4307 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1310 + 1.0))) + _1315) * _1237;
        float _1325 = _1205 * 0.5;
        float _1326 = _1215 * 0.5;
        float _1327 = _1225 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_794, _795, _796), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4340 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1352 + 1.0))) + _1357) * _1238;
        _1374 = _1205;
        _1376 = _1204;
        _1377 = _1203;
        _1378 = _1215;
        _1379 = _1214;
        _1380 = _1213;
        _1381 = _1225;
        _1382 = _1224;
        _1383 = _1223;
        _1384 = _1238;
        _1385 = _1237;
        _1386 = _1236;
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1375;
        _1376 = _1375;
        _1377 = _1375;
        _1378 = _1375;
        _1379 = _1375;
        _1380 = _1375;
        _1381 = _1375;
        _1382 = _1375;
        _1383 = _1375;
        _1384 = _1375;
        _1385 = _1375;
        _1386 = _1375;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1044, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036));
        float _1420 = fma(_1044, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036));
        float _1424 = fma(_1044, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036));
        float _1447 = _1036 + _794;
        float _1448 = _1040 + _795;
        float _1449 = _1044 + _796;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_794, _795, _796), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4403 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_794, _795, _796), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4436 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_794, _795, _796), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4469 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1375;
        _1686 = _1375;
        _1687 = _1375;
        _1688 = _1375;
        _1689 = _1375;
        _1690 = _1375;
        _1691 = _1375;
        _1692 = _1375;
        _1693 = _1375;
        _1694 = _1375;
        _1695 = _1375;
        _1696 = _1375;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1387)) + _1387;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1388)) + _1388;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1389)) + _1389;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _980 * 0.5;
    float _1754 = _981 * 0.5;
    float _1755 = _982 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1374, _1378, _1381, _1384));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1044, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1044, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1044, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1884 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1887 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1915 = frontier_phi_17_15_ladder;
        }
        float _2087;
        if (_1884 > 0.0)
        {
            _2087 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2087 = frontier_phi_26_22_ladder;
        }
        float _2382;
        if (_1887 > 0.0)
        {
            _2382 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2382 = frontier_phi_38_33_ladder;
        }
        float _2384 = isnan(_2087) ? _1915 : (isnan(_1915) ? _2087 : min(_1915, _2087));
        float _2385 = isnan(_2382) ? _2384 : (isnan(_2384) ? _2382 : min(_2384, _2382));
        float _2389 = (_2385 * _1881) + _1870;
        float _2390 = (_2385 * _1884) + _1874;
        float _2391 = (_2385 * _1887) + _1878;
        float _2392 = _2385 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2392;
        float _2396 = _2392 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 > _2396) || ((_2390 < _2394) || ((_2389 < _2394) || (_2389 > _2396))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2391, cbModelParam._m0[9u].z, fma(_2390, cbModelParam._m0[9u].y, _2389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2391, cbModelParam._m0[10u].z, fma(_2390, cbModelParam._m0[10u].y, _2389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2391, cbModelParam._m0[11u].z, fma(_2390, cbModelParam._m0[11u].y, _2389 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_16_38_ladder = _2536.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2536.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2536.x * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_16_38_ladder_2;
        _1905 = frontier_phi_16_38_ladder_1;
        _1907 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1822);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1966 = fma(_1044, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036)) + cbModelParam._m0[21u].w;
        float _1970 = fma(_1044, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036)) + cbModelParam._m0[22u].w;
        float _1974 = fma(_1044, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036)) + cbModelParam._m0[23u].w;
        float _1977 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1980 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1983 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2092;
        if (_1977 > 0.0)
        {
            _2092 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2092 = frontier_phi_28_24_ladder;
        }
        float _2409;
        if (_1980 > 0.0)
        {
            _2409 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2409 = frontier_phi_40_35_ladder;
        }
        float _2747;
        if (_1983 > 0.0)
        {
            _2747 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2747 = frontier_phi_50_47_ladder;
        }
        float _2749 = isnan(_2409) ? _2092 : (isnan(_2092) ? _2409 : min(_2092, _2409));
        float _2750 = isnan(_2747) ? _2749 : (isnan(_2749) ? _2747 : min(_2749, _2747));
        float _2754 = (_2750 * _1977) + _1966;
        float _2755 = (_2750 * _1980) + _1970;
        float _2756 = (_2750 * _1983) + _1974;
        float _2757 = _2750 * 9.9999997473787516355514526367188e-05;
        float _2758 = (-1.0) - _2757;
        float _2760 = _2757 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2756 > _2760) || ((_2756 < _2758) || ((_2755 > _2760) || ((_2755 < _2758) || ((_2754 < _2758) || (_2754 > _2760))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2756, cbModelParam._m0[17u].z, fma(_2755, cbModelParam._m0[17u].y, _2754 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2756, cbModelParam._m0[18u].z, fma(_2755, cbModelParam._m0[18u].y, _2754 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2756, cbModelParam._m0[19u].z, fma(_2755, cbModelParam._m0[19u].y, _2754 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_25_50_ladder = _2878.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2878.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2878.x * cbModelParam._m0[1u].z;
        }
        _2002 = frontier_phi_25_50_ladder_2;
        _2004 = frontier_phi_25_50_ladder_1;
        _2006 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1912);
        _2002 = _1986.x * cbModelParam._m0[1u].z;
        _2004 = _1986.y * cbModelParam._m0[1u].z;
        _2006 = _1986.z * cbModelParam._m0[1u].z;
    }
    float _2019 = (((_1007 * _956) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_2002 - _1903)) + _1903);
    float _2021 = (((_1007 * _958) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_2004 - _1905)) + _1905);
    float _2023 = (((_1007 * _959) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_2006 - _1907)) + _1907);
    float _2026 = fma(_2023, cbSceneParam._m0[89u].z, fma(_2021, cbSceneParam._m0[89u].y, _2019 * cbSceneParam._m0[89u].x));
    float _2029 = fma(_2023, cbSceneParam._m0[90u].z, fma(_2021, cbSceneParam._m0[90u].y, _2019 * cbSceneParam._m0[90u].x));
    float _2032 = fma(_2023, cbSceneParam._m0[91u].z, fma(_2021, cbSceneParam._m0[91u].y, _2019 * cbSceneParam._m0[91u].x));
    float _2066 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2079 = _2066 / _2078;
    float _2080 = _2070 / _2078;
    float _2081 = _2074 / _2078;
    float _2228;
    float _2229;
    float _2230;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2108 = ((uint(_2081 > cbSceneParam._m0[59u].y) + uint(_2081 > cbSceneParam._m0[59u].x)) + uint(_2081 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2109 = _2108 + 43u;
        uint _2117 = _2108 + 44u;
        uint _2125 = _2108 + 45u;
        uint _2133 = _2108 + 46u;
        float _2144 = fma(_2078, cbSceneParam._m0[_2109].w, fma(_2074, cbSceneParam._m0[_2109].z, fma(_2070, cbSceneParam._m0[_2109].y, _2066 * cbSceneParam._m0[_2109].x)));
        float _2148 = fma(_2078, cbSceneParam._m0[_2117].w, fma(_2074, cbSceneParam._m0[_2117].z, fma(_2070, cbSceneParam._m0[_2117].y, _2066 * cbSceneParam._m0[_2117].x)));
        float _2156 = fma(_2078, cbSceneParam._m0[_2133].w, fma(_2074, cbSceneParam._m0[_2133].z, fma(_2070, cbSceneParam._m0[_2133].y, _2066 * cbSceneParam._m0[_2133].x)));
        float _2161 = cbSceneParam._m0[33u].z * _2156;
        float _2163 = cbSceneParam._m0[33u].w * _2156;
        float _2166 = fma(_2078, cbSceneParam._m0[_2125].w, fma(_2074, cbSceneParam._m0[_2125].z, fma(_2070, cbSceneParam._m0[_2125].y, _2066 * cbSceneParam._m0[_2125].x))) / _2156;
        float _2214 = (cbSceneParam._m0[33u].x - sqrt(((_2080 * _2080) + (_2079 * _2079)) + (_2081 * _2081))) * cbSceneParam._m0[33u].y;
        float _4595 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2221 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2161 + _2144) / _2156, (_2163 + _2148) / _2156), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 + _2144) / _2156, (_2148 - _2161) / _2156), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 - _2161) / _2156, (_2148 - _2163) / _2156), _2166), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 - _2163) / _2156, (_2161 + _2148) / _2156), _2166), 0.0)).x), vec4(0.25)));
        _2228 = 1.0 - (_2221 * cbSceneParam._m0[34u].x);
        _2229 = 1.0 - (_2221 * cbSceneParam._m0[34u].y);
        _2230 = 1.0 - (_2221 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2228 = 1.0;
        _2229 = 1.0;
        _2230 = 1.0;
    }
    float _2294;
    float _2296;
    float _2298;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2282 = fma(_2078, cbSceneParam._m0[63u].w, fma(_2074, cbSceneParam._m0[63u].z, fma(_2070, cbSceneParam._m0[63u].y, _2066 * cbSceneParam._m0[63u].x)));
        float _2283 = fma(_2078, cbSceneParam._m0[60u].w, fma(_2074, cbSceneParam._m0[60u].z, fma(_2070, cbSceneParam._m0[60u].y, _2066 * cbSceneParam._m0[60u].x))) / _2282;
        float _2284 = fma(_2078, cbSceneParam._m0[61u].w, fma(_2074, cbSceneParam._m0[61u].z, fma(_2070, cbSceneParam._m0[61u].y, _2066 * cbSceneParam._m0[61u].x))) / _2282;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2283 >= cbSceneParam._m0[64u].x) && (_2284 >= cbSceneParam._m0[64u].y)) && (_2283 <= cbSceneParam._m0[64u].z)) && (_2284 <= cbSceneParam._m0[64u].w))
        {
            float _2422 = fma(_2078, cbSceneParam._m0[62u].w, fma(_2074, cbSceneParam._m0[62u].z, fma(_2070, cbSceneParam._m0[62u].y, _2066 * cbSceneParam._m0[62u].x))) / _2282;
            float _2426 = isnan(cbSceneParam._m0[41u].w) ? _2422 : (isnan(_2422) ? cbSceneParam._m0[41u].w : max(_2422, cbSceneParam._m0[41u].w));
            float _2469 = (cbSceneParam._m0[33u].x - sqrt(((_2080 * _2080) + (_2079 * _2079)) + (_2081 * _2081))) * cbSceneParam._m0[33u].y;
            float _4611 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
            float _2476 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2283, cbSceneParam._m0[33u].w + _2284), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2283, _2284 - cbSceneParam._m0[33u].z), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2283 - cbSceneParam._m0[33u].z, _2284 - cbSceneParam._m0[33u].w), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2283 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2284), _2426), 0.0)).x), vec4(0.25)));
            float _2480 = 1.0 - (_2476 * cbSceneParam._m0[34u].x);
            float _2481 = 1.0 - (_2476 * cbSceneParam._m0[34u].y);
            float _2482 = 1.0 - (_2476 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
            frontier_phi_37_36_ladder_1 = isnan(_2481) ? _2229 : (isnan(_2229) ? _2481 : min(_2229, _2481));
            frontier_phi_37_36_ladder_2 = isnan(_2480) ? _2228 : (isnan(_2228) ? _2480 : min(_2228, _2480));
        }
        else
        {
            frontier_phi_37_36_ladder = _2230;
            frontier_phi_37_36_ladder_1 = _2229;
            frontier_phi_37_36_ladder_2 = _2228;
        }
        _2294 = frontier_phi_37_36_ladder_2;
        _2296 = frontier_phi_37_36_ladder_1;
        _2298 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2294 = _2228;
        _2296 = _2229;
        _2298 = _2230;
    }
    uvec4 _2303 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2305 = _2303.x * 14u;
    uint _2306 = _2305 + 13u;
    float _2313 = _972 + (-1.0);
    float _2318 = (cbLight._m0[_2306].x * _2313) + 1.0;
    float _2319 = (cbLight._m0[_2306].y * _2313) + 1.0;
    float _2320 = (cbLight._m0[_2306].z * _2313) + 1.0;
    float _2321 = (cbLight._m0[_2306].w * _2313) + 1.0;
    uint _2322 = _2305 + 5u;
    float _2328 = isnan(1.0) ? _2319 : (isnan(_2319) ? 1.0 : min(_2319, 1.0));
    uint _2332 = _2305 + 4u;
    float _2341 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
    uint _2345 = _2305 | 1u;
    float _2356 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_794, _795, _796));
    float _2359 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_794, _795, _796));
    float _4647 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _4658 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2364 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * 0.3183098733425140380859375;
    float _2366 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * 0.3183098733425140380859375;
    float _2373 = ((cbLight._m0[_2322].x * _2328) * _2366) + (((cbLight._m0[_2332].x * _2294) * _2341) * _2364);
    float _2374 = ((_2328 * cbLight._m0[_2322].y) * _2366) + (((cbLight._m0[_2332].y * _2296) * _2341) * _2364);
    float _2375 = ((_2328 * cbLight._m0[_2322].z) * _2366) + (((cbLight._m0[_2332].z * _2298) * _2341) * _2364);
    uvec4 _2379 = floatBitsToUint(cbLight._m0[_2305 + 12u]);
    bool _2381 = _2379.x == 0u;
    float _2483;
    float _2485;
    float _2487;
    if (_2381)
    {
        _2483 = _2373;
        _2485 = _2374;
        _2487 = _2375;
    }
    else
    {
        uint _2491 = _2305 + 6u;
        float _2507 = (dot(vec3(cbLight._m0[_2305 + 2u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2508 = _2507 * _2507;
        float _4669 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2509 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2510 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2483 = (((cbLight._m0[_2491].x * 0.3183098733425140380859375) * _2509) * _2510) + _2373;
        _2485 = (((cbLight._m0[_2491].y * 0.3183098733425140380859375) * _2509) * _2510) + _2374;
        _2487 = (((cbLight._m0[_2491].z * 0.3183098733425140380859375) * _2509) * _2510) + _2375;
    }
    bool _2490 = _2379.y == 0u;
    float _2545;
    float _2547;
    float _2549;
    if (_2490)
    {
        _2545 = _2483;
        _2547 = _2485;
        _2549 = _2487;
    }
    else
    {
        uint _2718 = _2305 + 7u;
        float _2734 = (dot(vec3(cbLight._m0[_2305 + 3u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2735 = _2734 * _2734;
        float _4685 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2736 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2737 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2545 = (((cbLight._m0[_2718].x * 0.3183098733425140380859375) * _2736) * _2737) + _2483;
        _2547 = (((cbLight._m0[_2718].y * 0.3183098733425140380859375) * _2736) * _2737) + _2485;
        _2549 = (((cbLight._m0[_2718].z * 0.3183098733425140380859375) * _2736) * _2737) + _2487;
    }
    uint _2552 = _2305 + 8u;
    float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _797) * 0.949999988079071044921875);
    float _2566 = _2565 * _2565;
    float _2567 = cbLight._m0[_2305].x + _874;
    float _2568 = cbLight._m0[_2305].y + _875;
    float _2569 = cbLight._m0[_2305].z + _876;
    float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
    float _2574 = _2573 * _2567;
    float _2575 = _2573 * _2568;
    float _2576 = _2573 * _2569;
    float _2577 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2305].xyz));
    float _4701 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2580 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _4712 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2581 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2582 = dot(vec3(_794, _795, _796), vec3(_2574, _2575, _2576));
    float _4723 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2586 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2574, _2575, _2576));
    float _4734 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2590 = _2566 * _2566;
    float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
    float _2602 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
    float _2603 = 0.959999978542327880859375 - _953;
    float _2605 = 0.959999978542327880859375 - _954;
    float _2606 = 0.959999978542327880859375 - _955;
    float _2613 = 1.0 - _2566;
    float _2624 = (0.5 / (((_2581 * ((_2580 * _2613) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2581 * _2613) + _2566) * _2580))) * _2580;
    float _4745 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2626 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
    uint _2640 = _2305 + 9u;
    float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _797) * 0.949999988079071044921875);
    float _2652 = _2651 * _2651;
    float _2653 = cbLight._m0[_2345].x + _874;
    float _2654 = cbLight._m0[_2345].y + _875;
    float _2655 = cbLight._m0[_2345].z + _876;
    float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
    float _2660 = _2659 * _2653;
    float _2661 = _2659 * _2654;
    float _2662 = _2659 * _2655;
    float _2663 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2345].xyz));
    float _4756 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2666 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2667 = dot(vec3(_794, _795, _796), vec3(_2660, _2661, _2662));
    float _4767 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2670 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2671 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2660, _2661, _2662));
    float _4778 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2675 = _2652 * _2652;
    float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
    float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0);
    float _2693 = 1.0 - _2652;
    float _2703 = (0.5 / (((_2581 * ((_2666 * _2693) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2581 * _2693) + _2652) * _2666))) * _2666;
    float _4789 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
    float _2705 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
    float _2715 = (((((_2686 * _2603) + _956) * cbLight._m0[_2640].x) * _2705) * _2328) + ((((cbLight._m0[_2552].x * _2294) * ((_2602 * _2603) + _956)) * _2626) * _2341);
    float _2716 = (((((_2686 * _2605) + _958) * cbLight._m0[_2640].y) * _2705) * _2328) + ((((cbLight._m0[_2552].y * _2296) * ((_2602 * _2605) + _958)) * _2626) * _2341);
    float _2717 = (((((_2686 * _2606) + _959) * cbLight._m0[_2640].z) * _2705) * _2328) + ((((cbLight._m0[_2552].z * _2298) * ((_2602 * _2606) + _959)) * _2626) * _2341);
    float _2773;
    float _2775;
    float _2777;
    if (_2381)
    {
        _2773 = _2715;
        _2775 = _2716;
        _2777 = _2717;
    }
    else
    {
        uint _2779 = _2305 + 2u;
        uint _2783 = _2305 + 10u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _797) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _874;
        float _2800 = cbLight._m0[_2779].y + _875;
        float _2801 = cbLight._m0[_2779].z + _876;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2779].xyz));
        float _4800 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2813 = dot(vec3(_794, _795, _796), vec3(_2806, _2807, _2808));
        float _4811 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4822 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2832 = exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0);
        float _2839 = 1.0 - _2798;
        float _2849 = (0.5 / (((_2581 * ((_2812 * _2839) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2581 * _2839) + _2798) * _2812))) * _2812;
        float _4833 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
        _2773 = (((((_2832 * _2603) + _956) * cbLight._m0[_2783].x) * _2851) * _2852) + _2715;
        _2775 = (((((_2832 * _2605) + _958) * cbLight._m0[_2783].y) * _2851) * _2852) + _2716;
        _2777 = (((((_2832 * _2606) + _959) * cbLight._m0[_2783].z) * _2851) * _2852) + _2717;
    }
    float _2883;
    float _2885;
    float _2887;
    if (_2490)
    {
        _2883 = _2773;
        _2885 = _2775;
        _2887 = _2777;
    }
    else
    {
        uint _2894 = _2305 + 3u;
        uint _2898 = _2305 + 11u;
        float _2912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2894].w)) * _797) * 0.949999988079071044921875);
        float _2913 = _2912 * _2912;
        float _2914 = cbLight._m0[_2894].x + _874;
        float _2915 = cbLight._m0[_2894].y + _875;
        float _2916 = cbLight._m0[_2894].z + _876;
        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
        float _2921 = _2920 * _2914;
        float _2922 = _2920 * _2915;
        float _2923 = _2920 * _2916;
        float _2924 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2894].xyz));
        float _4849 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2928 = dot(vec3(_794, _795, _796), vec3(_2921, _2922, _2923));
        float _4860 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2932 = dot(vec3(cbLight._m0[_2894].xyz), vec3(_2921, _2922, _2923));
        float _4871 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2936 = _2913 * _2913;
        float _2940 = ((_2931 * _2931) * (_2936 + (-1.0))) + 1.0;
        float _2947 = exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0);
        float _2954 = 1.0 - _2913;
        float _2964 = (0.5 / (((_2581 * ((_2927 * _2954) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2581 * _2954) + _2913) * _2927))) * _2927;
        float _4882 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2966 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2936 / ((_2940 * _2940) * 3.141590118408203125));
        float _2967 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
        _2883 = (((((_2947 * _2603) + _956) * cbLight._m0[_2898].x) * _2966) * _2967) + _2773;
        _2885 = (((((_2947 * _2605) + _958) * cbLight._m0[_2898].y) * _2966) * _2967) + _2775;
        _2887 = (((((_2947 * _2606) + _959) * cbLight._m0[_2898].z) * _2966) * _2967) + _2777;
    }
    float _3033;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_2303.y == 0u)
    {
        uvec4 _2988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2989 = _2988.x;
        uint _3000 = uint((float(_2988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _895) / _2989))) + floor(float(uint(cbSceneParam._m0[85u].x * _894) / _2989)));
        float _3010 = (log2(_2081 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3011 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        uint _3014 = uint(isnan(14.0) ? _3011 : (isnan(_3011) ? 14.0 : min(_3011, 14.0)));
        uvec4 _3019 = texelFetch(g_lightClusterGridBuffer, int(((_3014 << 2u) + (_3000 << 6u)) >> 2u));
        uint _3020 = _3019.x;
        uint _3021 = _2988.z;
        float _3100;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        if (((((1u << ((_3021 >> 4u) & 15u)) + 4294967295u) & _3020) == 0u) || ((_3021 & 240u) == 0u))
        {
            _3100 = 0.0;
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
        }
        else
        {
            float _3101;
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            uint _3259 = 0u;
            uint _3268;
            bool _3269;
            for (;;)
            {
                _3268 = texelFetch(g_lightClassification, int((((_3014 << 5u) + (_3000 << 9u)) + (_3259 << 2u)) >> 2u)).x;
                _3269 = _3268 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3269)
                {
                    frontier_phi_71_pred = _3258;
                    frontier_phi_71_pred_1 = _3257;
                    frontier_phi_71_pred_2 = _3256;
                    frontier_phi_71_pred_3 = _3255;
                    frontier_phi_71_pred_4 = _3254;
                    frontier_phi_71_pred_5 = _3253;
                }
                else
                {
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    uint _3404;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3268;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    for (;;)
                    {
                        uint _3408 = uint(findLSB(_3404)) + (_3259 << 5u);
                        uint _3405 = (_3404 + 4294967295u) & _3404;
                        uint _3410 = _3408 * 48u;
                        vec4 _3424 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 3u)).x));
                        uint _3430 = (_3408 * 48u) + 4u;
                        vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3430)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3430 + 3u)).x));
                        uint _3449 = (_3408 * 48u) + 8u;
                        vec3 _3460 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x));
                        float _3464 = _3424.x - _2079;
                        float _3465 = _3424.y - _2080;
                        float _3466 = _3424.z - _2081;
                        float _3467 = dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466));
                        float _3470 = inversesqrt(_3467);
                        float _3471 = _3470 * _3464;
                        float _3472 = _3470 * _3465;
                        float _3473 = _3470 * _3466;
                        float _3474 = dot(vec3(_913, _916, _919), vec3(_3471, _3472, _3473));
                        float _3479 = 1.0 - (_3467 * _3424.w);
                        float _4908 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3480 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3481 = sqrt(_3467) * _3443.w;
                        float _3484 = 1.39999997615814208984375 / (_3481 + 1.39999997615814208984375);
                        float _3485 = _3484 * _3484;
                        float _3488 = ((1.0 - _3485) * _3474) + _3485;
                        float _3491 = _3481 * _3481;
                        float _3495 = ((isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0))) * _3480) / ((_3491 * 0.699999988079071044921875) + 1.0);
                        float _3499 = (-0.0) - _2079;
                        float _3500 = (-0.0) - _2080;
                        float _3501 = (-0.0) - _2081;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3515 = exp2(log2(1.0 / ((_3491 * 3.5) + 5.0)) * 0.25);
                        float _3516 = 1.0 - _988;
                        float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                        float _3524 = _3523 * _3523;
                        float _3525 = _3524 * _3524;
                        float _3526 = _3506 + _3471;
                        float _3527 = _3507 + _3472;
                        float _3528 = _3508 + _3473;
                        float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                        float _3536 = dot(vec3(_913, _916, _919), vec3(_3506, _3507, _3508));
                        float _4924 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3539 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3540 = dot(vec3(_913, _916, _919), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                        float _4935 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3543 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                        float _3548 = _3484 * _3524;
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3474) + _3549;
                        float _4946 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                        float _3553 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3554 = 1.0 - _3524;
                        float _3564 = (0.5 / (((_3553 * ((_3539 * _3554) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3524) * _3539))) * _3553;
                        float _4957 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3575 = (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) / ((_3547 * _3547) * ((_3491 * 2.1991131305694580078125) + 3.141590118408203125))) * _3480;
                        _3328 = (_3495 * _3443.x) + _3401;
                        _3329 = (_3495 * _3443.y) + _3402;
                        _3330 = (_3495 * _3443.z) + _3403;
                        _3325 = (_3575 * _3460.x) + _3398;
                        _3326 = (_3575 * _3460.y) + _3399;
                        _3327 = (_3575 * _3460.z) + _3400;
                        if (_3405 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3405;
                        }
                    }
                    frontier_phi_71_pred = _3330;
                    frontier_phi_71_pred_1 = _3329;
                    frontier_phi_71_pred_2 = _3328;
                    frontier_phi_71_pred_3 = _3327;
                    frontier_phi_71_pred_4 = _3326;
                    frontier_phi_71_pred_5 = _3325;
                }
                _3111 = frontier_phi_71_pred;
                _3109 = frontier_phi_71_pred_1;
                _3107 = frontier_phi_71_pred_2;
                _3105 = frontier_phi_71_pred_3;
                _3103 = frontier_phi_71_pred_4;
                _3101 = frontier_phi_71_pred_5;
                uint _3260 = _3259 + 1u;
                if (_3260 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3253 = _3101;
                    _3254 = _3103;
                    _3255 = _3105;
                    _3256 = _3107;
                    _3257 = _3109;
                    _3258 = _3111;
                    _3259 = _3260;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3100 = _3101;
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
        }
        uvec4 _3114 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3115 = _3114.z;
        uint _3117 = (_3115 >> 8u) & 15u;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        if (((4294967295u << _3117) & _3020) == 0u)
        {
            _3221 = _3100;
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
        }
        else
        {
            float _3246 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
            float _3247 = _3246 * _2079;
            float _3248 = _3246 * _2080;
            float _3249 = _3246 * _2081;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3117 < ((_3115 >> 12u) & 15u))
            {
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3381 = _3100;
                float _3382 = _3102;
                float _3383 = _3104;
                float _3384 = _3106;
                float _3385 = _3108;
                float _3386 = _3110;
                uint _3387 = _3117;
                uint _3396;
                bool _3397;
                for (;;)
                {
                    _3396 = texelFetch(g_lightClassification, int((((_3014 << 5u) + (_3000 << 9u)) + (_3387 << 2u)) >> 2u)).x;
                    _3397 = _3396 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3397)
                    {
                        frontier_phi_82_pred = _3386;
                        frontier_phi_82_pred_1 = _3385;
                        frontier_phi_82_pred_2 = _3384;
                        frontier_phi_82_pred_3 = _3383;
                        frontier_phi_82_pred_4 = _3382;
                        frontier_phi_82_pred_5 = _3381;
                    }
                    else
                    {
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3602 = _3381;
                        float _3603 = _3382;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        uint _3608 = _3396;
                        uint _3609;
                        vec4 _3634;
                        float _3635;
                        vec4 _3650;
                        vec3 _3662;
                        vec4 _3677;
                        vec4 _3692;
                        float _3738;
                        bool _3739;
                        for (;;)
                        {
                            uint _3619 = ((_3387 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3608));
                            _3609 = (_3608 + 4294967295u) & _3608;
                            uint _3621 = _3619 * 40u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            _3635 = _3634.w;
                            uint _3637 = (_3619 * 40u) + 4u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3619 * 40u) + 8u;
                            _3662 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x));
                            uint _3664 = (_3619 * 40u) + 16u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3679 = (_3619 * 40u) + 20u;
                            _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3694 = (_3619 * 40u) + 24u;
                            vec4 _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3713 = (_3619 * 40u) + 28u;
                            vec4 _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            _3738 = fma(_2081, _3726.z, fma(_2080, _3726.y, _3726.x * _2079)) + _3726.w;
                            _3739 = !((fma(_2081, _3707.z, fma(_2080, _3707.y, _3707.x * _2079)) + _3707.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3739)
                            {
                                float _3766 = _3634.x - _2079;
                                float _3767 = _3634.y - _2080;
                                float _3768 = _3634.z - _2081;
                                float _3769 = dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768));
                                float _3772 = inversesqrt(_3769);
                                float _3773 = _3772 * _3766;
                                float _3774 = _3772 * _3767;
                                float _3775 = _3772 * _3768;
                                float _3779 = 1.0 - (_3769 / (_3635 * _3635));
                                float _4968 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3780 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3784 = sqrt(_3769) * _3650.w;
                                float _3786 = 1.39999997615814208984375 / (_3784 + 1.39999997615814208984375);
                                float _3787 = _3786 * _3786;
                                float _3790 = ((1.0 - _3787) * dot(vec3(_3773, _3774, _3775), vec3(_913, _916, _919))) + _3787;
                                float _3793 = _3784 * _3784;
                                float _3797 = (fma(_2081, _3677.z, fma(_2080, _3677.y, _3677.x * _2079)) + _3677.w) / _3738;
                                float _3798 = (fma(_2081, _3692.z, fma(_2080, _3692.y, _3692.x * _2079)) + _3692.w) / _3738;
                                float _3802 = 1.0 - dot(vec2(_3797, _3798), vec2(_3797, _3798));
                                float _4984 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3804 = _3803 * (((isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0))) * _3780) / ((_3793 * 0.699999988079071044921875) + 1.0));
                                float _3816 = exp2(log2(1.0 / ((_3793 * 3.5) + 5.0)) * 0.25);
                                float _3817 = 1.0 - _988;
                                float _3824 = sqrt(1.0 - ((1.0 - (_3817 * _3817)) * (1.0 - (_3816 * _3816))));
                                float _3825 = _3824 * _3824;
                                float _3826 = _3825 * _3825;
                                float _3827 = _3773 - _3247;
                                float _3828 = _3774 - _3248;
                                float _3829 = _3775 - _3249;
                                float _3833 = inversesqrt(dot(vec3(_3827, _3828, _3829), vec3(_3827, _3828, _3829)));
                                float _3837 = dot(vec3(_913, _916, _919), vec3((-0.0) - _3247, (-0.0) - _3248, (-0.0) - _3249));
                                float _4995 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3841 = dot(vec3(_913, _916, _919), vec3(_3833 * _3827, _3833 * _3828, _3833 * _3829));
                                float _5006 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3844 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3848 = ((_3844 * _3844) * (_3826 + (-1.0))) + 1.0;
                                float _3849 = _3786 * _3825;
                                float _3850 = _3849 * _3849;
                                float _3856 = ((1.0 - _3850) * dot(vec3(_913, _916, _919), vec3(_3773, _3774, _3775))) + _3850;
                                float _5017 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3858 = 1.0 - _3825;
                                float _3868 = (0.5 / (((_3857 * ((_3840 * _3858) + _3825)) + 9.9999999392252902907785028219223e-09) + (((_3857 * _3858) + _3825) * _3840))) * _3857;
                                float _5028 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3878 = (_3803 * _3780) * (((_3826 * 3.1415927410125732421875) * (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)))) / ((_3848 * _3848) * ((_3793 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3804 * _3650.z;
                                frontier_phi_88_pred_1 = _3804 * _3650.y;
                                frontier_phi_88_pred_2 = _3804 * _3650.x;
                                frontier_phi_88_pred_3 = _3878 * _3662.z;
                                frontier_phi_88_pred_4 = _3878 * _3662.y;
                                frontier_phi_88_pred_5 = _3878 * _3662.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3887 = frontier_phi_88_pred;
                            _3886 = frontier_phi_88_pred_1;
                            _3885 = frontier_phi_88_pred_2;
                            _3884 = frontier_phi_88_pred_3;
                            _3883 = frontier_phi_88_pred_4;
                            _3882 = frontier_phi_88_pred_5;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3594 = _3887 + _3607;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            _3591 = _3884 + _3604;
                            if (_3609 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3609;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3594;
                        frontier_phi_82_pred_1 = _3593;
                        frontier_phi_82_pred_2 = _3592;
                        frontier_phi_82_pred_3 = _3591;
                        frontier_phi_82_pred_4 = _3590;
                        frontier_phi_82_pred_5 = _3589;
                    }
                    _3232 = frontier_phi_82_pred;
                    _3230 = frontier_phi_82_pred_1;
                    _3228 = frontier_phi_82_pred_2;
                    _3226 = frontier_phi_82_pred_3;
                    _3224 = frontier_phi_82_pred_4;
                    _3222 = frontier_phi_82_pred_5;
                    uint _3388 = _3387 + 1u;
                    if (_3388 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3381 = _3222;
                        _3382 = _3224;
                        _3383 = _3226;
                        _3384 = _3228;
                        _3385 = _3230;
                        _3386 = _3232;
                        _3387 = _3388;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3228;
                frontier_phi_63_64_ladder_1 = _3232;
                frontier_phi_63_64_ladder_2 = _3230;
                frontier_phi_63_64_ladder_3 = _3226;
                frontier_phi_63_64_ladder_4 = _3224;
                frontier_phi_63_64_ladder_5 = _3222;
            }
            else
            {
                frontier_phi_63_64_ladder = _3106;
                frontier_phi_63_64_ladder_1 = _3110;
                frontier_phi_63_64_ladder_2 = _3108;
                frontier_phi_63_64_ladder_3 = _3104;
                frontier_phi_63_64_ladder_4 = _3102;
                frontier_phi_63_64_ladder_5 = _3100;
            }
            _3221 = frontier_phi_63_64_ladder_5;
            _3223 = frontier_phi_63_64_ladder_4;
            _3225 = frontier_phi_63_64_ladder_3;
            _3227 = frontier_phi_63_64_ladder;
            _3229 = frontier_phi_63_64_ladder_2;
            _3231 = frontier_phi_63_64_ladder_1;
        }
        float _3236 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _3033 = (_3236 * _3227) + _2545;
        _3035 = (_3236 * _3229) + _2547;
        _3037 = (_3236 * _3231) + _2549;
        _3039 = ((_3221 * _956) * _3236) + _2883;
        _3041 = ((_3223 * _958) * _3236) + _2885;
        _3043 = ((_3225 * _959) * _3236) + _2887;
    }
    else
    {
        _3033 = _2545;
        _3035 = _2547;
        _3037 = _2549;
        _3039 = _2883;
        _3041 = _2885;
        _3043 = _2887;
    }
    float _5044 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _5055 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _5066 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _3060 = ((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_3033 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _972))) + ((_3039 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    float _3061 = ((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3035 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _972))) + ((_3041 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    float _3062 = ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3037 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _972))) + ((_3043 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    uint _3063 = _250 + 6u;
    float _3071 = _894 / cbSceneParam._m0[86u].x;
    float _3072 = _895 / cbSceneParam._m0[86u].y;
    vec4 _3086 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3071, _3072, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3088 = _3086.x;
    float _3089 = _3086.y;
    float _3090 = _3086.z;
    float _3091 = _3086.w;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _3125 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _3126 = _3125 / _816;
        float _3137 = _3126 * _867;
        float _3138 = _868 * _3126;
        float _3139 = (-0.0) - _3138;
        float _3141 = _3126 * _869;
        float _3143 = (cbSceneParam._m0[77u].w * _3139) / _3125;
        float _3144 = _3143 + cbSceneParam._m0[79u].w;
        float _3145 = cbSceneParam._m0[79u].w - _3138;
        float _3151 = sqrt(((_3137 * _3137) + (_3138 * _3138)) + (_3141 * _3141));
        float _3154 = (1.0 - (cbSceneParam._m0[77u].w / _3125)) * _3151;
        float _3159 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3161 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3338;
        if (abs((_3139 - _3143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3338 = ((((_3144 > 0.0) ? exp2(_3159 * _3144) : (2.0 - exp2(_3161 * _3144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3154;
        }
        else
        {
            float _3282 = 1.0 / cbSceneParam._m0[80u].x;
            float _3283 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : max(_3144, _3145));
            float _3284 = isnan(_3145) ? _3144 : (isnan(_3144) ? _3145 : min(_3144, _3145));
            float _3293 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : min(_3283, 0.0));
            float _3294 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : min(_3284, 0.0));
            _3338 = ((abs(_3151 / _3139) * cbSceneParam._m0[80u].y) * ((((_3293 - _3294) * 2.0) - ((exp2(_3159 * (isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0)))) - exp2(_3159 * (isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))))) * _3282)) - ((exp2(_3161 * _3293) - exp2(_3161 * _3294)) * _3282))) + (_3154 * cbSceneParam._m0[80u].z);
        }
        vec4 _3340 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3071, _3072, 1.0), 0.0);
        float _3349 = exp2((_3338 * (-1.44269502162933349609375)) * (1.0 - _3340.w));
        float _3350 = log2(_3349);
        float _3366 = log2(_3091);
        _3163 = (exp2(_3366 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].x)) * _3340.x) / cbSceneParam._m0[78u].x)) + _3088;
        _3165 = (exp2(_3366 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].y)) * _3340.y) / cbSceneParam._m0[78u].y)) + _3089;
        _3167 = (exp2(_3366 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3350 * cbSceneParam._m0[78u].z)) * _3340.z) / cbSceneParam._m0[78u].z)) + _3090;
        _3169 = _3349 * _3091;
    }
    else
    {
        _3163 = _3088;
        _3165 = _3089;
        _3167 = _3090;
        _3169 = _3091;
    }
    bool _3376;
    vec4 _3179;
    vec4 _3201;
    float _3203;
    float _3207;
    float _3208;
    float _3209;
    float _3210;
    bool _3220;
    for (;;)
    {
        _3179 = cbMatDynParam._m0[0u];
        float _3181 = roundEven(_3179.y);
        bool _3182 = _3181 == 3.0;
        float _3183 = log2(_3169);
        float _3190 = exp2(_3183 * cbSceneParam._m0[78u].x) * _3060;
        float _3191 = exp2(_3183 * cbSceneParam._m0[78u].y) * _3061;
        float _3192 = exp2(_3183 * cbSceneParam._m0[78u].z) * _3062;
        float _3199 = _883 + (-0.5);
        _3201 = cbMtdParam._m0[1u];
        _3203 = _3201.y * _3199;
        float _3206 = (_3181 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3207 = _3206 * (_3182 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3163)));
        _3208 = _3206 * (_3182 ? _3191 : (_3191 + (cbSceneParam._m0[72u].w * _3165)));
        _3209 = _3206 * (_3182 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3167)));
        _3210 = _3199 * 0.999000012874603271484375;
        _3220 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3220)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _3210) < 0.5)
            {
                _3376 = true;
                break;
            }
        }
        uint _3317 = _932 + uint(_3179.w);
        if ((cbInstanceData._m0[_3317].w < 1.0) && ((cbInstanceData._m0[_3317].w + _3210) < 0.5))
        {
            _3376 = true;
            break;
        }
        if ((_3203 + 1.0) < _3201.x)
        {
            _3376 = true;
            break;
        }
        _3376 = false;
        break;
    }
    float _3580;
    if (_3376)
    {
        discard_state = true;
        _3580 = 0.0;
    }
    else
    {
        _3580 = cbInstanceData._m0[_3063].w;
    }
    SV_Target.x = _3207;
    SV_Target.y = _3208;
    SV_Target.z = _3209;
    SV_Target.w = _3580;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3063].w;
    discard_exit();
}


