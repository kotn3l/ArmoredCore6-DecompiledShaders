#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1635;
float _4037;
float _4038;
float _4039;
float _4040;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _424 = _422.x;
    float _436 = dot(vec4(_424, _422.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _453 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _383.x) * 2.0) - ((((_424 - _436) * cbMtdParam._m0[23u].w) + _436) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4049 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _461 = (_454 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _462 = (_454 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _463 = (_454 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _480 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _294) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _295) + cbTextureTilingScale._m0[3u].w));
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _502 = _500.x;
    float _512 = dot(vec4(_502, _500.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _526 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _383.y) * 2.0) - ((((_502 - _512) * cbMtdParam._m0[23u].w) + _512) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4060 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _534 = (_527 * ((_480.x * cbMtdParam._m0[13u].x) - _461)) + _461;
    float _535 = (_527 * ((_480.y * cbMtdParam._m0[13u].y) - _462)) + _462;
    float _536 = (_527 * ((_480.z * cbMtdParam._m0[13u].z) - _463)) + _463;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _294) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _295) + cbTextureTilingScale._m0[24u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _574 = _572.x;
    float _584 = dot(vec4(_574, _572.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _596 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _383.z) * 2.0) - ((((_574 - _584) * cbMtdParam._m0[23u].w) + _584) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4071 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _610 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _314.x) * ((_597 * ((_555.x * cbMtdParam._m0[14u].x) - _534)) + _534);
    float _613 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _314.y) * ((_597 * ((_555.y * cbMtdParam._m0[14u].y) - _535)) + _535);
    float _616 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _314.z) * ((_597 * ((_555.z * cbMtdParam._m0[14u].z) - _536)) + _536);
    vec4 _634 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _651 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _655 = _651.z;
    float _662 = ((_634.x - _653) * _454) + _653;
    float _663 = ((_634.y - _654) * _454) + _654;
    float _664 = ((_634.z - _655) * _454) + _655;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _294) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _295) + cbTextureTilingScale._m0[2u].w));
    float _687 = ((_676.x - _662) * _527) + _662;
    float _688 = ((_676.y - _663) * _527) + _663;
    float _689 = ((_676.z - _664) * _527) + _664;
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _294) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _295) + cbTextureTilingScale._m0[23u].w));
    float _714 = ((_701.z - _689) * _597) + _689;
    float _717 = ((((_701.x - _687) * _597) + _687) * 2.0) + (-1.0);
    float _719 = ((((_701.y - _688) * _597) + _688) * 2.0) + (-1.0);
    float _720 = dot(vec2(_717, _719), vec2(_717, _719));
    float _4082 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _725 = sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _764 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _766 = _764.x;
    float _767 = 1.0 - _766;
    float _775 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _778 = ((isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : min(_775, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _787 = (_778 - ((((((_766 - _767) * cbMtdParam._m0[24u].z) + _767) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _778))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4103 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _788 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _795 = (_788 * (cbMtdParam._m0[17u].x - _610)) + _610;
    float _796 = (_788 * (cbMtdParam._m0[17u].y - _613)) + _613;
    float _797 = (_788 * (cbMtdParam._m0[17u].z - _616)) + _616;
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _811 = _809.x;
    float _812 = 1.0 - _811;
    float _837 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_811 - _812) * cbMtdParam._m0[24u].w) + _812) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4114 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _838 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _846 = ((((cbMtdParam._m0[10u].x - _795) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _838) + _795;
    float _847 = ((((cbMtdParam._m0[10u].y - _796) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _838) + _796;
    float _848 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _797)) * _838) + _797;
    vec4 _874 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _876 = _874.x;
    float _893 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _294) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _295) + cbTextureTilingScale._m0[9u].w)).x - _876) * _454) + _876;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _294) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _295) + cbTextureTilingScale._m0[21u].w)).x - _893) * _527) + _893;
    float _927 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _294) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _295) + cbTextureTilingScale._m0[10u].w)).x - _910) * _597) + _910;
    float _931 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _927) * cbMtdParam._m0[19u].z) + _927;
    float _933 = _931 - (_931 * _788);
    float _935 = _933 - (_933 * _838);
    float _939 = (cbMtdParam._m0[19u].w * (_739.z - _714)) + _714;
    vec4 _953 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _960 = (_953.x * 2.0) + (-1.0);
    float _961 = (_953.y * 2.0) + (-1.0);
    float _962 = dot(vec2(_960, _961), vec2(_960, _961));
    float _4125 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _970 = (_788 * (_953.z - _939)) + _939;
    float _973 = ((cbMtdParam._m0[23u].x - _970) * _838) + _970;
    vec4 _996 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1002 = (_996.x * 2.0) + (-1.0);
    float _1003 = (_996.y * 2.0) + (-1.0);
    float _1004 = dot(vec2(_1002, _1003), vec2(_1002, _1003));
    float _4136 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1012 = (((_739.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _717;
    float _1013 = (((_739.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _719;
    float _1025 = (((_960 - _1012) + (cbMtdParam._m0[21u].x * _1012)) * _788) + _1012;
    float _1026 = (((_961 - _1013) + (cbMtdParam._m0[21u].x * _1013)) * _788) + _1013;
    float _1027 = (_788 * (sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) - _725)) + _725;
    float _1038 = (((_1002 - _1025) + (_1025 * cbMtdParam._m0[22u].z)) * _838) + _1025;
    float _1039 = (((_1003 - _1026) + (_1026 * cbMtdParam._m0[22u].z)) * _838) + _1026;
    float _1040 = ((sqrt(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) - _1027) * _838) + _1027;
    float _1042 = cbMtdParam._m0[22u].x + _739.w;
    float _1045 = fma(_1040, _262 * NORMAL.x, fma(_1039, _269 * TANGENT.x, (_255 * _247) * _1038));
    float _1048 = fma(_1040, _262 * NORMAL.y, fma(_1039, _269 * TANGENT.y, (_255 * _248) * _1038));
    float _1051 = fma(_1040, _262 * NORMAL.z, fma(_1039, _269 * TANGENT.z, (_255 * _249) * _1038));
    float _1055 = inversesqrt(dot(vec3(_1045, _1048, _1051), vec3(_1045, _1048, _1051)));
    float _1056 = _1055 * _1045;
    float _1057 = _1055 * _1048;
    float _1058 = _1055 * _1051;
    float _4147 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _1059 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _4169 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4180 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4191 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4202 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _1064 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _1078 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1128 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1118);
    float _1129 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1118);
    float _1130 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1118);
    float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
    float _1135 = _1128 * _1134;
    float _1136 = _1129 * _1134;
    float _1137 = _1130 * _1134;
    vec4 _1142 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1144 = _1142.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1316 = sqrt(((_1128 * _1128) + (_1129 * _1129)) + (_1130 * _1130));
        float _1322 = (cbMatDynParam._m0[5u].x * _1316) + cbMatDynParam._m0[5u].y;
        float _4213 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1327 = (cbMatDynParam._m0[5u].z * _1316) + cbMatDynParam._m0[5u].w;
        float _4224 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) - _1323)) + _1323) < ((_1144 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1155 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1156 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1174 = fma(_1058, cbSceneParam._m0[5u].z, fma(_1057, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1056));
    float _1177 = fma(_1058, cbSceneParam._m0[6u].z, fma(_1057, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1056));
    float _1180 = fma(_1058, cbSceneParam._m0[7u].z, fma(_1057, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1056));
    uint _1193 = _275 + 9u;
    uint _1194 = _1193 + uint(cbMatDynParam._m0[0u].w);
    float _1200 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_1194].x;
    float _1201 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_1194].y;
    float _1202 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * cbInstanceData._m0[_1194].z;
    float _4235 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1203 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1204 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1205 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _1206 = 1.0 - _1064;
    float _1207 = _1203 * _1206;
    float _1208 = _1204 * _1206;
    float _1209 = _1205 * _1206;
    float _1214 = (_1203 + (-0.039999999105930328369140625)) * _1064;
    float _1215 = (_1204 + (-0.039999999105930328369140625)) * _1064;
    float _1216 = (_1205 + (-0.039999999105930328369140625)) * _1064;
    float _1217 = _1214 + 0.039999999105930328369140625;
    float _1219 = _1215 + 0.039999999105930328369140625;
    float _1220 = _1216 + 0.039999999105930328369140625;
    vec4 _1229 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1155, cbSceneParam._m0[86u].y * _1156));
    float _1233 = ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * TEXCOORD_5.w) * _1229.x;
    float _1234 = dot(vec3(_1056, _1057, _1058), vec3(_1135, _1136, _1137));
    float _1237 = _1234 * 2.0;
    float _1241 = (_1237 * _1056) - _1135;
    float _1242 = (_1237 * _1057) - _1136;
    float _1243 = (_1237 * _1058) - _1137;
    float _1247 = abs(dot(vec3(_1135, _1136, _1137), vec3(_1056, _1057, _1058)));
    float _4268 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1249 = sqrt(_1059);
    float _1262 = exp2((_1249 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1249 * 3.0));
    float _1268 = (1.0 - _1262) * ((_1249 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1269 = _1262 * _1249;
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1301 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1634;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1359 = fma(_1305, cbModelParam._m0[26u].z, fma(_1301, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1297));
        float _1363 = fma(_1305, cbModelParam._m0[27u].z, fma(_1301, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1297));
        float _1367 = fma(_1305, cbModelParam._m0[28u].z, fma(_1301, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1297));
        float _1392 = _1297 + _1056;
        float _1393 = _1301 + _1057;
        float _1394 = _1305 + _1058;
        float _1404 = fma(_1394, cbModelParam._m0[26u].z, fma(_1393, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1392)) - _1359;
        float _1405 = fma(_1394, cbModelParam._m0[27u].z, fma(_1393, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1392)) - _1363;
        float _1406 = fma(_1394, cbModelParam._m0[28u].z, fma(_1393, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1392)) - _1367;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1359 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1363 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[34u].z) + ((((((_1367 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1462 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1428.x + (-0.5));
        float _1464 = _1462 * (_1428.y + (-0.5));
        float _1465 = _1462 * (_1428.z + (-0.5));
        float _1472 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1435.x + (-0.5));
        float _1474 = _1472 * (_1435.y + (-0.5));
        float _1475 = _1472 * (_1435.z + (-0.5));
        float _1482 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1442.x + (-0.5));
        float _1484 = _1482 * (_1442.y + (-0.5));
        float _1485 = _1482 * (_1442.z + (-0.5));
        float _1492 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1449.x + (-0.5));
        float _1494 = _1492 * (_1449.y + (-0.5));
        float _1495 = _1492 * (_1449.z + (-0.5));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = _1463 * 0.5;
        float _1500 = _1473 * 0.5;
        float _1501 = _1483 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1516 = (dot(vec3(_1056, _1057, _1058), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1526 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1528 = _1527 * 2.0;
        float _1532 = (1.0 - _1527) / (_1527 + 1.0);
        float _4316 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1542 = ((((1.0 - _1533) * (_1528 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1528 + 1.0))) + _1533) * _1496;
        float _1543 = _1464 * 0.5;
        float _1544 = _1474 * 0.5;
        float _1545 = _1484 * 0.5;
        float _1546 = dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545));
        float _1551 = (_1546 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1546);
        float _1559 = (dot(vec3(_1056, _1057, _1058), vec3(_1551 * _1543, _1551 * _1544, _1551 * _1545)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1568 = sqrt(((_1544 * _1544) + (_1543 * _1543)) + (_1545 * _1545)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4349 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1570 + 1.0))) + _1575) * _1497;
        float _1585 = _1465 * 0.5;
        float _1586 = _1475 * 0.5;
        float _1587 = _1485 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_1056, _1057, _1058), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4382 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1612 + 1.0))) + _1617) * _1498;
        _1634 = _1465;
        _1636 = _1464;
        _1637 = _1463;
        _1638 = _1475;
        _1639 = _1474;
        _1640 = _1473;
        _1641 = _1485;
        _1642 = _1484;
        _1643 = _1483;
        _1644 = _1498;
        _1645 = _1497;
        _1646 = _1496;
        _1647 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)));
        _1648 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1649 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
    }
    else
    {
        _1634 = _1635;
        _1636 = _1635;
        _1637 = _1635;
        _1638 = _1635;
        _1639 = _1635;
        _1640 = _1635;
        _1641 = _1635;
        _1642 = _1635;
        _1643 = _1635;
        _1644 = _1635;
        _1645 = _1635;
        _1646 = _1635;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1675 = fma(_1305, cbModelParam._m0[30u].z, fma(_1301, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1297));
        float _1679 = fma(_1305, cbModelParam._m0[31u].z, fma(_1301, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1297));
        float _1683 = fma(_1305, cbModelParam._m0[32u].z, fma(_1301, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1297));
        float _1706 = _1297 + _1056;
        float _1707 = _1301 + _1057;
        float _1708 = _1305 + _1058;
        float _1718 = fma(_1708, cbModelParam._m0[30u].z, fma(_1707, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1706)) - _1675;
        float _1719 = fma(_1708, cbModelParam._m0[31u].z, fma(_1707, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1706)) - _1679;
        float _1720 = fma(_1708, cbModelParam._m0[32u].z, fma(_1707, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1706)) - _1683;
        float _1724 = inversesqrt(dot(vec3(_1718, _1719, _1720), vec3(_1718, _1719, _1720)));
        float _1737 = ((_1724 * _1718) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1675 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1738 = ((_1724 * _1719) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1679 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1739 = ((_1724 * _1720) / cbModelParam._m0[35u].z) + ((((((_1683 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1737, _1738, _1739), 0.0);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1737, _1738, _1739), 0.0);
        vec4 _1755 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1737, _1738, _1739), 0.0);
        vec4 _1762 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1737, _1738, _1739), 0.0);
        float _1774 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1775 = _1774 * (_1741.x + (-0.5));
        float _1776 = _1774 * (_1741.y + (-0.5));
        float _1777 = _1774 * (_1741.z + (-0.5));
        float _1784 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1785 = _1784 * (_1748.x + (-0.5));
        float _1786 = _1784 * (_1748.y + (-0.5));
        float _1787 = _1784 * (_1748.z + (-0.5));
        float _1794 = exp2((_1755.w + (-0.5)) * 20.0) * 2.0;
        float _1795 = _1794 * (_1755.x + (-0.5));
        float _1796 = _1794 * (_1755.y + (-0.5));
        float _1797 = _1794 * (_1755.z + (-0.5));
        float _1804 = exp2((_1762.w + (-0.5)) * 20.0) * 2.0;
        float _1805 = _1804 * (_1762.x + (-0.5));
        float _1806 = _1804 * (_1762.y + (-0.5));
        float _1807 = _1804 * (_1762.z + (-0.5));
        float _1808 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1809 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1810 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1811 = _1775 * 0.5;
        float _1812 = _1785 * 0.5;
        float _1813 = _1795 * 0.5;
        float _1814 = dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813));
        float _1819 = (_1814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1814);
        float _1827 = (dot(vec3(_1056, _1057, _1058), vec3(_1819 * _1811, _1819 * _1812, _1819 * _1813)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1836 = sqrt(((_1812 * _1812) + (_1811 * _1811)) + (_1813 * _1813)) / (_1808 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1837 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1838 = _1837 * 2.0;
        float _1842 = (1.0 - _1837) / (_1837 + 1.0);
        float _4445 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1852 = ((((1.0 - _1843) * (_1838 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1838 + 1.0))) + _1843) * _1808;
        float _1853 = _1776 * 0.5;
        float _1854 = _1786 * 0.5;
        float _1855 = _1796 * 0.5;
        float _1856 = dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855));
        float _1861 = (_1856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1856);
        float _1869 = (dot(vec3(_1056, _1057, _1058), vec3(_1861 * _1853, _1861 * _1854, _1861 * _1855)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1878 = sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855)) / (_1809 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1880 = _1879 * 2.0;
        float _1884 = (1.0 - _1879) / (_1879 + 1.0);
        float _4478 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1894 = ((((1.0 - _1885) * (_1880 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1880 + 1.0))) + _1885) * _1809;
        float _1895 = _1777 * 0.5;
        float _1896 = _1787 * 0.5;
        float _1897 = _1797 * 0.5;
        float _1898 = dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897));
        float _1903 = (_1898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1898);
        float _1911 = (dot(vec3(_1056, _1057, _1058), vec3(_1903 * _1895, _1903 * _1896, _1903 * _1897)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1920 = sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897)) / (_1810 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1922 = _1921 * 2.0;
        float _1926 = (1.0 - _1921) / (_1921 + 1.0);
        float _4511 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1936 = ((((1.0 - _1927) * (_1922 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1922 + 1.0))) + _1927) * _1810;
        _1944 = _1777;
        _1945 = _1776;
        _1946 = _1775;
        _1947 = _1787;
        _1948 = _1786;
        _1949 = _1785;
        _1950 = _1797;
        _1951 = _1796;
        _1952 = _1795;
        _1953 = _1810;
        _1954 = _1809;
        _1955 = _1808;
        _1956 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
        _1957 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)));
        _1958 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)));
    }
    else
    {
        _1944 = _1635;
        _1945 = _1635;
        _1946 = _1635;
        _1947 = _1635;
        _1948 = _1635;
        _1949 = _1635;
        _1950 = _1635;
        _1951 = _1635;
        _1952 = _1635;
        _1953 = _1635;
        _1954 = _1635;
        _1955 = _1635;
        _1956 = 0.0;
        _1957 = 0.0;
        _1958 = 0.0;
    }
    float _1968 = (cbModelParam._m0[1u].x * (_1956 - _1647)) + _1647;
    float _1969 = (cbModelParam._m0[1u].x * (_1957 - _1648)) + _1648;
    float _1970 = (cbModelParam._m0[1u].x * (_1958 - _1649)) + _1649;
    float _1991 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1969, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1994 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1969, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1997 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1969, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1968));
    float _2012 = _1241 * 0.5;
    float _2013 = _1242 * 0.5;
    float _2014 = _1243 * 0.5;
    float _2015 = dot(vec4(_2012, _2013, _2014, 1.0), vec4(_1946, _1949, _1952, _1955));
    float _2018 = dot(vec4(_2012, _2013, _2014, 1.0), vec4(_1945, _1948, _1951, _1954));
    float _2021 = dot(vec4(_2012, _2013, _2014, 1.0), vec4(_1944, _1947, _1950, _1953));
    float _2055;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2028 = dot(vec4(_2012, _2013, _2014, 1.0), vec4(_1634, _1638, _1641, _1644));
        float _2032 = dot(vec4(_2012, _2013, _2014, 1.0), vec4(_1636, _1639, _1642, _1645));
        float _2036 = dot(vec4(_2012, _2013, _2014, 1.0), vec4(_1637, _1640, _1643, _1646));
        float _2043 = dot(vec4(cbModelParam._m0[39u]), vec4(_2012, _2013, _2014, 1.0));
        _2055 = dot(vec3(isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)), isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)), isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2043) ? 0.0 : (isnan(0.0) ? _2043 : max(0.0, _2043))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2055 = 1.0;
    }
    float _2066;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2057 = dot(vec4(cbModelParam._m0[40u]), vec4(_2012, _2013, _2014, 1.0));
        _2066 = dot(vec3(isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)), isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2057) ? 0.0 : (isnan(0.0) ? _2057 : max(0.0, _2057))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2066 = 1.0;
    }
    float _2070 = (_2066 * cbModelParam._m0[1u].x) + (_2055 * (1.0 - cbModelParam._m0[1u].x));
    float _2080 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1059);
    float _2081 = isnan(_2080) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2080 : min(cbModelParam._m0[25u].z, _2080));
    float _2161;
    float _2163;
    float _2165;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2128 = fma(_1305, cbModelParam._m0[13u].z, fma(_1301, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1297)) + cbModelParam._m0[13u].w;
        float _2132 = fma(_1305, cbModelParam._m0[14u].z, fma(_1301, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1297)) + cbModelParam._m0[14u].w;
        float _2136 = fma(_1305, cbModelParam._m0[15u].z, fma(_1301, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1297)) + cbModelParam._m0[15u].w;
        float _2139 = fma(_1243, cbModelParam._m0[13u].z, fma(_1242, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1241));
        float _2142 = fma(_1243, cbModelParam._m0[14u].z, fma(_1242, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1241));
        float _2145 = fma(_1243, cbModelParam._m0[15u].z, fma(_1242, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1241));
        float _2173;
        if (_2139 > 0.0)
        {
            _2173 = abs((1.0 - _2128) / _2139);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2128 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2173 = frontier_phi_17_15_ladder;
        }
        float _2397;
        if (_2142 > 0.0)
        {
            _2397 = abs((1.0 - _2132) / _2142);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2142 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2132 + 1.0) / _2142);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2397 = frontier_phi_26_22_ladder;
        }
        float _2654;
        if (_2145 > 0.0)
        {
            _2654 = abs((1.0 - _2136) / _2145);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2145 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2136 + 1.0) / _2145);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2654 = frontier_phi_38_33_ladder;
        }
        float _2656 = isnan(_2397) ? _2173 : (isnan(_2173) ? _2397 : min(_2173, _2397));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _2139) + _2128;
        float _2662 = (_2657 * _2142) + _2132;
        float _2663 = (_2657 * _2145) + _2136;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2664;
        float _2668 = _2664 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 > _2668) || ((_2662 < _2666) || ((_2661 < _2666) || (_2661 > _2668))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2663, cbModelParam._m0[9u].z, fma(_2662, cbModelParam._m0[9u].y, _2661 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2663, cbModelParam._m0[10u].z, fma(_2662, cbModelParam._m0[10u].y, _2661 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2663, cbModelParam._m0[11u].z, fma(_2662, cbModelParam._m0[11u].y, _2661 * cbModelParam._m0[11u].x))), _2081);
            frontier_phi_16_38_ladder = _2791.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2791.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2791.x * cbModelParam._m0[1u].y;
        }
        _2161 = frontier_phi_16_38_ladder_2;
        _2163 = frontier_phi_16_38_ladder_1;
        _2165 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1241, _1242, _1243), _2081);
        _2161 = _2149.x * cbModelParam._m0[1u].y;
        _2163 = _2149.y * cbModelParam._m0[1u].y;
        _2165 = _2149.z * cbModelParam._m0[1u].y;
    }
    float _2169 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1059);
    float _2170 = isnan(_2169) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2169 : min(cbModelParam._m0[25u].w, _2169));
    float _2260;
    float _2262;
    float _2264;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2224 = fma(_1305, cbModelParam._m0[21u].z, fma(_1301, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1297)) + cbModelParam._m0[21u].w;
        float _2228 = fma(_1305, cbModelParam._m0[22u].z, fma(_1301, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1297)) + cbModelParam._m0[22u].w;
        float _2232 = fma(_1305, cbModelParam._m0[23u].z, fma(_1301, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1297)) + cbModelParam._m0[23u].w;
        float _2235 = fma(_1243, cbModelParam._m0[21u].z, fma(_1242, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1241));
        float _2238 = fma(_1243, cbModelParam._m0[22u].z, fma(_1242, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1241));
        float _2241 = fma(_1243, cbModelParam._m0[23u].z, fma(_1242, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1241));
        float _2402;
        if (_2235 > 0.0)
        {
            _2402 = abs((1.0 - _2224) / _2235);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2235 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2224 + 1.0) / _2235);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2402 = frontier_phi_28_24_ladder;
        }
        float _2681;
        if (_2238 > 0.0)
        {
            _2681 = abs((1.0 - _2228) / _2238);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2238 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2228 + 1.0) / _2238);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2681 = frontier_phi_40_35_ladder;
        }
        float _2894;
        if (_2241 > 0.0)
        {
            _2894 = abs((1.0 - _2232) / _2241);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2241 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2232 + 1.0) / _2241);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2894 = frontier_phi_49_46_ladder;
        }
        float _2896 = isnan(_2681) ? _2402 : (isnan(_2402) ? _2681 : min(_2402, _2681));
        float _2897 = isnan(_2894) ? _2896 : (isnan(_2896) ? _2894 : min(_2896, _2894));
        float _2901 = (_2897 * _2235) + _2224;
        float _2902 = (_2897 * _2238) + _2228;
        float _2903 = (_2897 * _2241) + _2232;
        float _2904 = _2897 * 9.9999997473787516355514526367188e-05;
        float _2905 = (-1.0) - _2904;
        float _2907 = _2904 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2903 > _2907) || ((_2903 < _2905) || ((_2902 > _2907) || ((_2902 < _2905) || ((_2901 < _2905) || (_2901 > _2907))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2903, cbModelParam._m0[17u].z, fma(_2902, cbModelParam._m0[17u].y, _2901 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2903, cbModelParam._m0[18u].z, fma(_2902, cbModelParam._m0[18u].y, _2901 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2903, cbModelParam._m0[19u].z, fma(_2902, cbModelParam._m0[19u].y, _2901 * cbModelParam._m0[19u].x))), _2170);
            frontier_phi_25_49_ladder = _3102.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3102.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3102.x * cbModelParam._m0[1u].z;
        }
        _2260 = frontier_phi_25_49_ladder_2;
        _2262 = frontier_phi_25_49_ladder_1;
        _2264 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2244 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1241, _1242, _1243), _2170);
        _2260 = _2244.x * cbModelParam._m0[1u].z;
        _2262 = _2244.y * cbModelParam._m0[1u].z;
        _2264 = _2244.z * cbModelParam._m0[1u].z;
    }
    float _2277 = (((_1268 * _1217) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2260 - _2161)) + _2161);
    float _2279 = (((_1268 * _1219) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2262 - _2163)) + _2163);
    float _2281 = (((_1268 * _1220) + _1269) * _1233) * ((cbModelParam._m0[1u].w * (_2264 - _2165)) + _2165);
    float _2284 = fma(_2281, cbSceneParam._m0[89u].z, fma(_2279, cbSceneParam._m0[89u].y, _2277 * cbSceneParam._m0[89u].x));
    float _2287 = fma(_2281, cbSceneParam._m0[90u].z, fma(_2279, cbSceneParam._m0[90u].y, _2277 * cbSceneParam._m0[90u].x));
    float _2290 = fma(_2281, cbSceneParam._m0[91u].z, fma(_2279, cbSceneParam._m0[91u].y, _2277 * cbSceneParam._m0[91u].x));
    vec4 _2298 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1155, _1156));
    float _2300 = _2298.w;
    float _2312 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2300);
    float _2313 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2300);
    float _2314 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2300);
    uvec4 _2318 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2320 = _2318.x * 14u;
    uint _2321 = _2320 + 13u;
    float _2328 = _1233 + (-1.0);
    float _2333 = (cbLight._m0[_2321].x * _2328) + 1.0;
    float _2334 = (cbLight._m0[_2321].y * _2328) + 1.0;
    float _2335 = (cbLight._m0[_2321].z * _2328) + 1.0;
    float _2336 = (cbLight._m0[_2321].w * _2328) + 1.0;
    uint _2337 = _2320 + 5u;
    float _2343 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
    uint _2347 = _2320 + 4u;
    float _2356 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
    uint _2360 = _2320 | 1u;
    float _2371 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_1056, _1057, _1058));
    float _2374 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_1056, _1057, _1058));
    float _4647 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _4658 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2379 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * 0.3183098733425140380859375;
    float _2381 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * 0.3183098733425140380859375;
    float _2388 = ((cbLight._m0[_2337].x * _2343) * _2381) + (((cbLight._m0[_2347].x * _2312) * _2356) * _2379);
    float _2389 = ((_2343 * cbLight._m0[_2337].y) * _2381) + (((cbLight._m0[_2347].y * _2313) * _2356) * _2379);
    float _2390 = ((_2343 * cbLight._m0[_2337].z) * _2381) + (((cbLight._m0[_2347].z * _2314) * _2356) * _2379);
    uvec4 _2394 = floatBitsToUint(cbLight._m0[_2320 + 12u]);
    bool _2396 = _2394.x == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2396)
    {
        _2407 = _2388;
        _2409 = _2389;
        _2411 = _2390;
    }
    else
    {
        uint _2415 = _2320 + 6u;
        float _2431 = (dot(vec3(cbLight._m0[_2320 + 2u].xyz), vec3(_1056, _1057, _1058)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4669 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2434 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2407 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2388;
        _2409 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2389;
        _2411 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2390;
    }
    bool _2414 = _2394.y == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2414)
    {
        _2452 = _2407;
        _2454 = _2409;
        _2456 = _2411;
    }
    else
    {
        uint _2625 = _2320 + 7u;
        float _2641 = (dot(vec3(cbLight._m0[_2320 + 3u].xyz), vec3(_1056, _1057, _1058)) * 0.5) + 0.5;
        float _2642 = _2641 * _2641;
        float _4685 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2643 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2644 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2452 = (((cbLight._m0[_2625].x * 0.3183098733425140380859375) * _2643) * _2644) + _2407;
        _2454 = (((cbLight._m0[_2625].y * 0.3183098733425140380859375) * _2643) * _2644) + _2409;
        _2456 = (((cbLight._m0[_2625].z * 0.3183098733425140380859375) * _2643) * _2644) + _2411;
    }
    uint _2459 = _2320 + 8u;
    float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _1059) * 0.949999988079071044921875);
    float _2473 = _2472 * _2472;
    float _2474 = cbLight._m0[_2320].x + _1135;
    float _2475 = cbLight._m0[_2320].y + _1136;
    float _2476 = cbLight._m0[_2320].z + _1137;
    float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
    float _2481 = _2480 * _2474;
    float _2482 = _2480 * _2475;
    float _2483 = _2480 * _2476;
    float _2484 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2320].xyz));
    float _4701 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _4712 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _2488 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2489 = dot(vec3(_1056, _1057, _1058), vec3(_2481, _2482, _2483));
    float _4723 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2481, _2482, _2483));
    float _4734 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2473 * _2473;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
    float _2510 = 0.959999978542327880859375 - _1214;
    float _2512 = 0.959999978542327880859375 - _1215;
    float _2513 = 0.959999978542327880859375 - _1216;
    float _2520 = 1.0 - _2473;
    float _2531 = (0.5 / (((_2488 * ((_2487 * _2520) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2520) + _2473) * _2487))) * _2487;
    float _4745 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2533 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    uint _2547 = _2320 + 9u;
    float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _1059) * 0.949999988079071044921875);
    float _2559 = _2558 * _2558;
    float _2560 = cbLight._m0[_2360].x + _1135;
    float _2561 = cbLight._m0[_2360].y + _1136;
    float _2562 = cbLight._m0[_2360].z + _1137;
    float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
    float _2567 = _2566 * _2560;
    float _2568 = _2566 * _2561;
    float _2569 = _2566 * _2562;
    float _2570 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2360].xyz));
    float _4756 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2573 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2574 = dot(vec3(_1056, _1057, _1058), vec3(_2567, _2568, _2569));
    float _4767 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2578 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2567, _2568, _2569));
    float _4778 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2582 = _2559 * _2559;
    float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0);
    float _2600 = 1.0 - _2559;
    float _2610 = (0.5 / (((_2488 * ((_2573 * _2600) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2600) + _2559) * _2573))) * _2573;
    float _4789 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2612 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
    float _2622 = (((((_2593 * _2510) + _1217) * cbLight._m0[_2547].x) * _2612) * _2343) + ((((cbLight._m0[_2459].x * _2312) * ((_2509 * _2510) + _1217)) * _2533) * _2356);
    float _2623 = (((((_2593 * _2512) + _1219) * cbLight._m0[_2547].y) * _2612) * _2343) + ((((cbLight._m0[_2459].y * _2313) * ((_2509 * _2512) + _1219)) * _2533) * _2356);
    float _2624 = (((((_2593 * _2513) + _1220) * cbLight._m0[_2547].z) * _2612) * _2343) + ((((cbLight._m0[_2459].z * _2314) * ((_2509 * _2513) + _1220)) * _2533) * _2356);
    float _2686;
    float _2688;
    float _2690;
    if (_2396)
    {
        _2686 = _2622;
        _2688 = _2623;
        _2690 = _2624;
    }
    else
    {
        uint _2692 = _2320 + 2u;
        uint _2696 = _2320 + 10u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _1059) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _1135;
        float _2713 = cbLight._m0[_2692].y + _1136;
        float _2714 = cbLight._m0[_2692].z + _1137;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2692].xyz));
        float _4800 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2726 = dot(vec3(_1056, _1057, _1058), vec3(_2719, _2720, _2721));
        float _4811 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4822 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0);
        float _2752 = 1.0 - _2711;
        float _2762 = (0.5 / (((_2488 * ((_2725 * _2752) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2752) + _2711) * _2725))) * _2725;
        float _4833 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2764 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2765 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
        _2686 = (((((_2745 * _2510) + _1217) * cbLight._m0[_2696].x) * _2764) * _2765) + _2622;
        _2688 = (((((_2745 * _2512) + _1219) * cbLight._m0[_2696].y) * _2764) * _2765) + _2623;
        _2690 = (((((_2745 * _2513) + _1220) * cbLight._m0[_2696].z) * _2764) * _2765) + _2624;
    }
    float _2800;
    float _2802;
    float _2804;
    if (_2414)
    {
        _2800 = _2686;
        _2802 = _2688;
        _2804 = _2690;
    }
    else
    {
        uint _2811 = _2320 + 3u;
        uint _2815 = _2320 + 11u;
        float _2829 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2811].w)) * _1059) * 0.949999988079071044921875);
        float _2830 = _2829 * _2829;
        float _2831 = cbLight._m0[_2811].x + _1135;
        float _2832 = cbLight._m0[_2811].y + _1136;
        float _2833 = cbLight._m0[_2811].z + _1137;
        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
        float _2838 = _2837 * _2831;
        float _2839 = _2837 * _2832;
        float _2840 = _2837 * _2833;
        float _2841 = dot(vec3(_1056, _1057, _1058), vec3(cbLight._m0[_2811].xyz));
        float _4849 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2845 = dot(vec3(_1056, _1057, _1058), vec3(_2838, _2839, _2840));
        float _4860 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2849 = dot(vec3(cbLight._m0[_2811].xyz), vec3(_2838, _2839, _2840));
        float _4871 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2853 = _2830 * _2830;
        float _2857 = ((_2848 * _2848) * (_2853 + (-1.0))) + 1.0;
        float _2864 = exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0);
        float _2871 = 1.0 - _2830;
        float _2881 = (0.5 / (((_2488 * ((_2844 * _2871) + _2830)) + 9.9999999392252902907785028219223e-09) + (((_2488 * _2871) + _2830) * _2844))) * _2844;
        float _4882 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2853 / ((_2857 * _2857) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2800 = (((((_2864 * _2510) + _1217) * cbLight._m0[_2815].x) * _2883) * _2884) + _2686;
        _2802 = (((((_2864 * _2512) + _1219) * cbLight._m0[_2815].y) * _2883) * _2884) + _2688;
        _2804 = (((((_2864 * _2513) + _1220) * cbLight._m0[_2815].z) * _2883) * _2884) + _2690;
    }
    float _3019;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_2318.y == 0u)
    {
        float _2959 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2959;
        float _2961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2959;
        float _2962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2959;
        uvec4 _2974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2975 = _2974.x;
        uint _2986 = uint((float(_2974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1156) / _2975))) + floor(float(uint(cbSceneParam._m0[85u].x * _1155) / _2975)));
        float _2996 = (log2(_2962 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2997 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        uint _3000 = uint(isnan(14.0) ? _2997 : (isnan(_2997) ? 14.0 : min(_2997, 14.0)));
        uvec4 _3005 = texelFetch(g_lightClusterGridBuffer, int(((_3000 << 2u) + (_2986 << 6u)) >> 2u));
        uint _3006 = _3005.x;
        uint _3007 = _2974.z;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((((1u << ((_3007 >> 4u) & 15u)) + 4294967295u) & _3006) == 0u) || ((_3007 & 240u) == 0u))
        {
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
        }
        else
        {
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            uint _3266 = 0u;
            uint _3275;
            bool _3276;
            for (;;)
            {
                _3275 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                _3276 = _3275 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3276)
                {
                    frontier_phi_66_pred = _3260;
                    frontier_phi_66_pred_1 = _3265;
                    frontier_phi_66_pred_2 = _3264;
                    frontier_phi_66_pred_3 = _3263;
                    frontier_phi_66_pred_4 = _3262;
                    frontier_phi_66_pred_5 = _3261;
                }
                else
                {
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    uint _3411;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3275;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    for (;;)
                    {
                        uint _3415 = uint(findLSB(_3411)) + (_3266 << 5u);
                        uint _3412 = (_3411 + 4294967295u) & _3411;
                        uint _3417 = _3415 * 48u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3437 = (_3415 * 48u) + 4u;
                        vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 3u)).x));
                        uint _3456 = (_3415 * 48u) + 8u;
                        vec3 _3467 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x));
                        float _3471 = _3431.x - _2960;
                        float _3472 = _3431.y - _2961;
                        float _3473 = _3431.z - _2962;
                        float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                        float _3477 = inversesqrt(_3474);
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3481 = dot(vec3(_1174, _1177, _1180), vec3(_3478, _3479, _3480));
                        float _3486 = 1.0 - (_3474 * _3431.w);
                        float _4908 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3487 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3488 = sqrt(_3474) * _3450.w;
                        float _3491 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                        float _3492 = _3491 * _3491;
                        float _3495 = ((1.0 - _3492) * _3481) + _3492;
                        float _3498 = _3488 * _3488;
                        float _3502 = ((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3487) / ((_3498 * 0.699999988079071044921875) + 1.0);
                        float _3506 = (-0.0) - _2960;
                        float _3507 = (-0.0) - _2961;
                        float _3508 = (-0.0) - _2962;
                        float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3523 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                        float _3524 = 1.0 - _1249;
                        float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                        float _3532 = _3531 * _3531;
                        float _3533 = _3532 * _3532;
                        float _3534 = _3513 + _3478;
                        float _3535 = _3514 + _3479;
                        float _3536 = _3515 + _3480;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3544 = dot(vec3(_1174, _1177, _1180), vec3(_3513, _3514, _3515));
                        float _4924 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3548 = dot(vec3(_1174, _1177, _1180), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                        float _4935 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                        float _3556 = _3491 * _3532;
                        float _3557 = _3556 * _3556;
                        float _3560 = ((1.0 - _3557) * _3481) + _3557;
                        float _4946 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3561 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3562 = 1.0 - _3532;
                        float _3572 = (0.5 / (((_3561 * ((_3547 * _3562) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3532) * _3547))) * _3561;
                        float _4957 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3583 = (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) / ((_3555 * _3555) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125))) * _3487;
                        _3335 = (_3502 * _3450.x) + _3408;
                        _3336 = (_3502 * _3450.y) + _3409;
                        _3337 = (_3502 * _3450.z) + _3410;
                        _3332 = (_3583 * _3467.x) + _3405;
                        _3333 = (_3583 * _3467.y) + _3406;
                        _3334 = (_3583 * _3467.z) + _3407;
                        if (_3412 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3412;
                        }
                    }
                    frontier_phi_66_pred = _3332;
                    frontier_phi_66_pred_1 = _3337;
                    frontier_phi_66_pred_2 = _3336;
                    frontier_phi_66_pred_3 = _3335;
                    frontier_phi_66_pred_4 = _3334;
                    frontier_phi_66_pred_5 = _3333;
                }
                _3108 = frontier_phi_66_pred;
                _3118 = frontier_phi_66_pred_1;
                _3116 = frontier_phi_66_pred_2;
                _3114 = frontier_phi_66_pred_3;
                _3112 = frontier_phi_66_pred_4;
                _3110 = frontier_phi_66_pred_5;
                uint _3267 = _3266 + 1u;
                if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3260 = _3108;
                    _3261 = _3110;
                    _3262 = _3112;
                    _3263 = _3114;
                    _3264 = _3116;
                    _3265 = _3118;
                    _3266 = _3267;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
        }
        uvec4 _3121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3122 = _3121.z;
        uint _3124 = (_3122 >> 8u) & 15u;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((4294967295u << _3124) & _3006) == 0u)
        {
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
        }
        else
        {
            float _3253 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
            float _3254 = _3253 * _2960;
            float _3255 = _3253 * _2961;
            float _3256 = _3253 * _2962;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3124 < ((_3122 >> 12u) & 15u))
            {
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3388 = _3107;
                float _3389 = _3109;
                float _3390 = _3111;
                float _3391 = _3113;
                float _3392 = _3115;
                float _3393 = _3117;
                uint _3394 = _3124;
                uint _3403;
                bool _3404;
                for (;;)
                {
                    _3403 = texelFetch(g_lightClassification, int((((_3000 << 5u) + (_2986 << 9u)) + (_3394 << 2u)) >> 2u)).x;
                    _3404 = _3403 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3404)
                    {
                        frontier_phi_77_pred = _3393;
                        frontier_phi_77_pred_1 = _3392;
                        frontier_phi_77_pred_2 = _3391;
                        frontier_phi_77_pred_3 = _3390;
                        frontier_phi_77_pred_4 = _3389;
                        frontier_phi_77_pred_5 = _3388;
                    }
                    else
                    {
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3610 = _3388;
                        float _3611 = _3389;
                        float _3612 = _3390;
                        float _3613 = _3391;
                        float _3614 = _3392;
                        float _3615 = _3393;
                        uint _3616 = _3403;
                        uint _3617;
                        vec4 _3642;
                        float _3643;
                        vec4 _3658;
                        vec3 _3670;
                        vec4 _3685;
                        vec4 _3700;
                        float _3746;
                        bool _3747;
                        for (;;)
                        {
                            uint _3627 = ((_3394 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3616));
                            _3617 = (_3616 + 4294967295u) & _3616;
                            uint _3629 = _3627 * 40u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3643 = _3642.w;
                            uint _3645 = (_3627 * 40u) + 4u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3627 * 40u) + 8u;
                            _3670 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x));
                            uint _3672 = (_3627 * 40u) + 16u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3627 * 40u) + 20u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3627 * 40u) + 24u;
                            vec4 _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3721 = (_3627 * 40u) + 28u;
                            vec4 _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            _3746 = fma(_2962, _3734.z, fma(_2961, _3734.y, _3734.x * _2960)) + _3734.w;
                            _3747 = !((fma(_2962, _3715.z, fma(_2961, _3715.y, _3715.x * _2960)) + _3715.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3747)
                            {
                                float _3774 = _3642.x - _2960;
                                float _3775 = _3642.y - _2961;
                                float _3776 = _3642.z - _2962;
                                float _3777 = dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776));
                                float _3780 = inversesqrt(_3777);
                                float _3781 = _3780 * _3774;
                                float _3782 = _3780 * _3775;
                                float _3783 = _3780 * _3776;
                                float _3787 = 1.0 - (_3777 / (_3643 * _3643));
                                float _4968 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3792 = sqrt(_3777) * _3658.w;
                                float _3794 = 1.39999997615814208984375 / (_3792 + 1.39999997615814208984375);
                                float _3795 = _3794 * _3794;
                                float _3798 = ((1.0 - _3795) * dot(vec3(_3781, _3782, _3783), vec3(_1174, _1177, _1180))) + _3795;
                                float _3801 = _3792 * _3792;
                                float _3805 = (fma(_2962, _3685.z, fma(_2961, _3685.y, _3685.x * _2960)) + _3685.w) / _3746;
                                float _3806 = (fma(_2962, _3700.z, fma(_2961, _3700.y, _3700.x * _2960)) + _3700.w) / _3746;
                                float _3810 = 1.0 - dot(vec2(_3805, _3806), vec2(_3805, _3806));
                                float _4984 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3812 = _3811 * (((isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0))) * _3788) / ((_3801 * 0.699999988079071044921875) + 1.0));
                                float _3824 = exp2(log2(1.0 / ((_3801 * 3.5) + 5.0)) * 0.25);
                                float _3825 = 1.0 - _1249;
                                float _3832 = sqrt(1.0 - ((1.0 - (_3825 * _3825)) * (1.0 - (_3824 * _3824))));
                                float _3833 = _3832 * _3832;
                                float _3834 = _3833 * _3833;
                                float _3835 = _3781 - _3254;
                                float _3836 = _3782 - _3255;
                                float _3837 = _3783 - _3256;
                                float _3841 = inversesqrt(dot(vec3(_3835, _3836, _3837), vec3(_3835, _3836, _3837)));
                                float _3845 = dot(vec3(_1174, _1177, _1180), vec3((-0.0) - _3254, (-0.0) - _3255, (-0.0) - _3256));
                                float _4995 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3848 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3849 = dot(vec3(_1174, _1177, _1180), vec3(_3841 * _3835, _3841 * _3836, _3841 * _3837));
                                float _5006 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3852 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3856 = ((_3852 * _3852) * (_3834 + (-1.0))) + 1.0;
                                float _3857 = _3794 * _3833;
                                float _3858 = _3857 * _3857;
                                float _3864 = ((1.0 - _3858) * dot(vec3(_1174, _1177, _1180), vec3(_3781, _3782, _3783))) + _3858;
                                float _5017 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3866 = 1.0 - _3833;
                                float _3876 = (0.5 / (((_3865 * ((_3848 * _3866) + _3833)) + 9.9999999392252902907785028219223e-09) + (((_3865 * _3866) + _3833) * _3848))) * _3865;
                                float _5028 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3886 = (_3811 * _3788) * (((_3834 * 3.1415927410125732421875) * (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)))) / ((_3856 * _3856) * ((_3801 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3812 * _3658.y;
                                frontier_phi_83_pred_1 = _3812 * _3658.x;
                                frontier_phi_83_pred_2 = _3886 * _3670.z;
                                frontier_phi_83_pred_3 = _3886 * _3670.y;
                                frontier_phi_83_pred_4 = _3886 * _3670.x;
                                frontier_phi_83_pred_5 = _3812 * _3658.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3894 = frontier_phi_83_pred;
                            _3893 = frontier_phi_83_pred_1;
                            _3892 = frontier_phi_83_pred_2;
                            _3891 = frontier_phi_83_pred_3;
                            _3890 = frontier_phi_83_pred_4;
                            _3895 = frontier_phi_83_pred_5;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            if (_3617 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3617;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3602;
                        frontier_phi_77_pred_1 = _3601;
                        frontier_phi_77_pred_2 = _3600;
                        frontier_phi_77_pred_3 = _3599;
                        frontier_phi_77_pred_4 = _3598;
                        frontier_phi_77_pred_5 = _3597;
                    }
                    _3239 = frontier_phi_77_pred;
                    _3237 = frontier_phi_77_pred_1;
                    _3235 = frontier_phi_77_pred_2;
                    _3233 = frontier_phi_77_pred_3;
                    _3231 = frontier_phi_77_pred_4;
                    _3229 = frontier_phi_77_pred_5;
                    uint _3395 = _3394 + 1u;
                    if (_3395 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3388 = _3229;
                        _3389 = _3231;
                        _3390 = _3233;
                        _3391 = _3235;
                        _3392 = _3237;
                        _3393 = _3239;
                        _3394 = _3395;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3233;
                frontier_phi_58_59_ladder_1 = _3239;
                frontier_phi_58_59_ladder_2 = _3237;
                frontier_phi_58_59_ladder_3 = _3235;
                frontier_phi_58_59_ladder_4 = _3231;
                frontier_phi_58_59_ladder_5 = _3229;
            }
            else
            {
                frontier_phi_58_59_ladder = _3111;
                frontier_phi_58_59_ladder_1 = _3117;
                frontier_phi_58_59_ladder_2 = _3115;
                frontier_phi_58_59_ladder_3 = _3113;
                frontier_phi_58_59_ladder_4 = _3109;
                frontier_phi_58_59_ladder_5 = _3107;
            }
            _3228 = frontier_phi_58_59_ladder_5;
            _3230 = frontier_phi_58_59_ladder_4;
            _3232 = frontier_phi_58_59_ladder;
            _3234 = frontier_phi_58_59_ladder_3;
            _3236 = frontier_phi_58_59_ladder_2;
            _3238 = frontier_phi_58_59_ladder_1;
        }
        float _3243 = isnan(1.0) ? _1233 : (isnan(_1233) ? 1.0 : min(_1233, 1.0));
        _3019 = (_3243 * _3234) + _2452;
        _3021 = (_3243 * _3236) + _2454;
        _3023 = (_3243 * _3238) + _2456;
        _3025 = ((_3228 * _1217) * _3243) + _2800;
        _3027 = ((_3230 * _1219) * _3243) + _2802;
        _3029 = ((_3232 * _1220) * _3243) + _2804;
    }
    else
    {
        _3019 = _2452;
        _3021 = _2454;
        _3023 = _2456;
        _3025 = _2800;
        _3027 = _2802;
        _3029 = _2804;
    }
    float _5044 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _5055 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _5066 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _3046 = ((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_3019 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1233))) + ((_3025 + ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _2070)) * cbPerFrame._m0[3u].x);
    float _3047 = ((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3021 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1233))) + ((_3027 + ((isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))) * _2070)) * cbPerFrame._m0[3u].x);
    float _3048 = ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3023 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1233))) + ((_3029 + ((isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * _2070)) * cbPerFrame._m0[3u].x);
    uint _3049 = _275 + 6u;
    float _3057 = _1155 / cbSceneParam._m0[86u].x;
    float _3058 = _1156 / cbSceneParam._m0[86u].y;
    vec4 _3072 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, (log2((isnan(cbSceneParam._m0[77u].w) ? _1078 : (isnan(_1078) ? cbSceneParam._m0[77u].w : min(_1078, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3074 = _3072.x;
    float _3075 = _3072.y;
    float _3076 = _3072.z;
    float _3077 = _3072.w;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_1078 > cbSceneParam._m0[78u].w)
    {
        float _3132 = isnan(_1078) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1078 : min(cbSceneParam._m0[80u].w, _1078));
        float _3133 = _3132 / _1078;
        float _3144 = _3133 * _1128;
        float _3145 = _1129 * _3133;
        float _3146 = (-0.0) - _3145;
        float _3148 = _3133 * _1130;
        float _3150 = (cbSceneParam._m0[77u].w * _3146) / _3132;
        float _3151 = _3150 + cbSceneParam._m0[79u].w;
        float _3152 = cbSceneParam._m0[79u].w - _3145;
        float _3158 = sqrt(((_3144 * _3144) + (_3145 * _3145)) + (_3148 * _3148));
        float _3161 = (1.0 - (cbSceneParam._m0[77u].w / _3132)) * _3158;
        float _3166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3345;
        if (abs((_3146 - _3150) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3345 = ((((_3151 > 0.0) ? exp2(_3166 * _3151) : (2.0 - exp2(_3168 * _3151))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3161;
        }
        else
        {
            float _3289 = 1.0 / cbSceneParam._m0[80u].x;
            float _3290 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : max(_3151, _3152));
            float _3291 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : min(_3151, _3152));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            _3345 = ((abs(_3158 / _3146) * cbSceneParam._m0[80u].y) * ((((_3300 - _3301) * 2.0) - ((exp2(_3166 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0)))) - exp2(_3166 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))))) * _3289)) - ((exp2(_3168 * _3300) - exp2(_3168 * _3301)) * _3289))) + (_3161 * cbSceneParam._m0[80u].z);
        }
        vec4 _3347 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, 1.0), 0.0);
        float _3356 = exp2((_3345 * (-1.44269502162933349609375)) * (1.0 - _3347.w));
        float _3357 = log2(_3356);
        float _3373 = log2(_3077);
        _3170 = (exp2(_3373 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].x)) * _3347.x) / cbSceneParam._m0[78u].x)) + _3074;
        _3172 = (exp2(_3373 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].y)) * _3347.y) / cbSceneParam._m0[78u].y)) + _3075;
        _3174 = (exp2(_3373 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].z)) * _3347.z) / cbSceneParam._m0[78u].z)) + _3076;
        _3176 = _3356 * _3077;
    }
    else
    {
        _3170 = _3074;
        _3172 = _3075;
        _3174 = _3076;
        _3176 = _3077;
    }
    bool _3383;
    vec4 _3186;
    vec4 _3208;
    float _3210;
    float _3214;
    float _3215;
    float _3216;
    float _3217;
    bool _3227;
    for (;;)
    {
        _3186 = cbMatDynParam._m0[0u];
        float _3188 = roundEven(_3186.y);
        bool _3189 = _3188 == 3.0;
        float _3190 = log2(_3176);
        float _3197 = exp2(_3190 * cbSceneParam._m0[78u].x) * _3046;
        float _3198 = exp2(_3190 * cbSceneParam._m0[78u].y) * _3047;
        float _3199 = exp2(_3190 * cbSceneParam._m0[78u].z) * _3048;
        float _3206 = _1144 + (-0.5);
        _3208 = cbMtdParam._m0[1u];
        _3210 = _3208.y * _3206;
        float _3213 = (_3188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3214 = _3213 * (_3189 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3170)));
        _3215 = _3213 * (_3189 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3172)));
        _3216 = _3213 * (_3189 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3174)));
        _3217 = _3206 * 0.999000012874603271484375;
        _3227 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3227)
        {
            if ((cbInstanceData._m0[_275 + 7u].x + _3217) < 0.5)
            {
                _3383 = true;
                break;
            }
        }
        uint _3324 = _1193 + uint(_3186.w);
        if ((cbInstanceData._m0[_3324].w < 1.0) && ((cbInstanceData._m0[_3324].w + _3217) < 0.5))
        {
            _3383 = true;
            break;
        }
        if ((_3210 + 1.0) < _3208.x)
        {
            _3383 = true;
            break;
        }
        _3383 = false;
        break;
    }
    float _3588;
    if (_3383)
    {
        discard_state = true;
        _3588 = 0.0;
    }
    else
    {
        _3588 = cbInstanceData._m0[_3049].w;
    }
    SV_Target.x = _3214;
    SV_Target.y = _3215;
    SV_Target.z = _3216;
    SV_Target.w = _3588;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3049].w;
    discard_exit();
}


