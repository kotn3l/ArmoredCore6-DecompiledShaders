#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1454;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _404 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_392 - _404) * cbMtdParam._m0[23u].w) + _404) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4062 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _429 = (_422 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _430 = (_422 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _431 = (_422 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[23u].w) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4073 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _502 = (_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429;
    float _503 = (_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430;
    float _504 = (_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _542 = _540.x;
    float _552 = dot(vec4(_542, _540.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _564 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _351.z) * 2.0) - ((((_542 - _552) * cbMtdParam._m0[23u].w) + _552) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4084 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _565 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _572 = (_565 * ((_523.x * cbMtdParam._m0[14u].x) - _502)) + _502;
    float _573 = (_565 * ((_523.y * cbMtdParam._m0[14u].y) - _503)) + _503;
    float _574 = (_565 * ((_523.z * cbMtdParam._m0[14u].z) - _504)) + _504;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _422) + _606;
    float _616 = ((_587.y - _607) * _422) + _607;
    float _617 = ((_587.z - _608) * _422) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _640 = ((_629.x - _615) * _495) + _615;
    float _641 = ((_629.y - _616) * _495) + _616;
    float _642 = ((_629.z - _617) * _495) + _617;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _667 = ((_654.z - _642) * _565) + _642;
    float _670 = ((((_654.x - _640) * _565) + _640) * 2.0) + (-1.0);
    float _672 = ((((_654.y - _641) * _565) + _641) * 2.0) + (-1.0);
    float _673 = dot(vec2(_670, _672), vec2(_670, _672));
    float _4095 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _678 = sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _704 = (((_692.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _670;
    float _705 = (((_692.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _672;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _719 = _717.x;
    float _720 = 1.0 - _719;
    float _748 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_719 - _720) * cbMtdParam._m0[24u].w) + _720) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4106 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _749 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _757 = ((((cbMtdParam._m0[10u].x - _572) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _749) + _572;
    float _758 = ((((cbMtdParam._m0[10u].y - _573) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _749) + _573;
    float _759 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _574)) * _749) + _574;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _787 = _785.x;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _787) * _422) + _787;
    float _823 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _805) * _495) + _805;
    float _840 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _284) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _285) + cbTextureTilingScale._m0[10u].w)).x - _823) * _565) + _823;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _840) * cbMtdParam._m0[19u].z) + _840;
    float _846 = _844 - (_844 * _749);
    float _850 = (cbMtdParam._m0[19u].w * (_692.z - _667)) + _667;
    float _854 = ((cbMtdParam._m0[23u].x - _850) * _749) + _850;
    vec4 _873 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _879 = (_873.x * 2.0) + (-1.0);
    float _880 = (_873.y * 2.0) + (-1.0);
    float _881 = dot(vec2(_879, _880), vec2(_879, _880));
    float _4117 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _897 = (_749 * (((cbMtdParam._m0[22u].z * _704) - _704) + _879)) + _704;
    float _898 = (_749 * (((cbMtdParam._m0[22u].z * _705) - _705) + _880)) + _705;
    float _899 = (_749 * (sqrt(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) - _678)) + _678;
    float _901 = cbMtdParam._m0[22u].x + _692.w;
    float _904 = fma(_899, _252 * NORMAL.x, fma(_898, _259 * TANGENT.x, (_245 * _237) * _897));
    float _907 = fma(_899, _252 * NORMAL.y, fma(_898, _259 * TANGENT.y, (_245 * _238) * _897));
    float _910 = fma(_899, _252 * NORMAL.z, fma(_898, _259 * TANGENT.z, (_245 * _239) * _897));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _4128 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _918 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4150 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4161 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4172 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4183 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _923 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _937 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _987 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _977);
    float _988 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _977);
    float _989 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _977);
    float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
    float _994 = _987 * _993;
    float _995 = _988 * _993;
    float _996 = _989 * _993;
    float _1002 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1003 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1021 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1024 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1027 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1041 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1047 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_1041].x;
    float _1048 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_1041].y;
    float _1049 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_1041].z;
    float _4194 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _1053 = 1.0 - _923;
    float _1054 = _1050 * _1053;
    float _1055 = _1051 * _1053;
    float _1056 = _1052 * _1053;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _923;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _923;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _923;
    float _1064 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    vec4 _1076 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1002, cbSceneParam._m0[86u].y * _1003));
    float _1080 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * TEXCOORD_5.w) * _1076.x;
    float _1081 = dot(vec3(_915, _916, _917), vec3(_994, _995, _996));
    float _1084 = _1081 * 2.0;
    float _1088 = (_1084 * _915) - _994;
    float _1089 = (_1084 * _916) - _995;
    float _1090 = (_1084 * _917) - _996;
    float _1094 = abs(dot(vec3(_994, _995, _996), vec3(_915, _916, _917)));
    float _4227 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1096 = sqrt(_918);
    float _1109 = exp2((_1096 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1096 * 3.0));
    float _1115 = (1.0 - _1109) * ((_1096 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1116 = _1109 * _1096;
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1453;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1178 = fma(_1152, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144));
        float _1182 = fma(_1152, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144));
        float _1186 = fma(_1152, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144));
        float _1211 = _1144 + _915;
        float _1212 = _1148 + _916;
        float _1213 = _1152 + _917;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1178;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1182;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1186;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1178 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1182 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1186 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1281 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1247.x + (-0.5));
        float _1283 = _1281 * (_1247.y + (-0.5));
        float _1284 = _1281 * (_1247.z + (-0.5));
        float _1291 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1254.x + (-0.5));
        float _1293 = _1291 * (_1254.y + (-0.5));
        float _1294 = _1291 * (_1254.z + (-0.5));
        float _1301 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1261.x + (-0.5));
        float _1303 = _1301 * (_1261.y + (-0.5));
        float _1304 = _1301 * (_1261.z + (-0.5));
        float _1311 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1268.x + (-0.5));
        float _1313 = _1311 * (_1268.y + (-0.5));
        float _1314 = _1311 * (_1268.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1335 = (dot(vec3(_915, _916, _917), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1345 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4275 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1347 + 1.0))) + _1352) * _1315;
        float _1362 = _1283 * 0.5;
        float _1363 = _1293 * 0.5;
        float _1364 = _1303 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_915, _916, _917), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4308 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1389 + 1.0))) + _1394) * _1316;
        float _1404 = _1284 * 0.5;
        float _1405 = _1294 * 0.5;
        float _1406 = _1304 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_915, _916, _917), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4341 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1431 + 1.0))) + _1436) * _1317;
        _1453 = _1284;
        _1455 = _1283;
        _1456 = _1282;
        _1457 = _1294;
        _1458 = _1293;
        _1459 = _1292;
        _1460 = _1304;
        _1461 = _1303;
        _1462 = _1302;
        _1463 = _1317;
        _1464 = _1316;
        _1465 = _1315;
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1454;
        _1455 = _1454;
        _1456 = _1454;
        _1457 = _1454;
        _1458 = _1454;
        _1459 = _1454;
        _1460 = _1454;
        _1461 = _1454;
        _1462 = _1454;
        _1463 = _1454;
        _1464 = _1454;
        _1465 = _1454;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1491 = fma(_1152, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144));
        float _1495 = fma(_1152, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144));
        float _1499 = fma(_1152, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144));
        float _1522 = _1144 + _915;
        float _1523 = _1148 + _916;
        float _1524 = _1152 + _917;
        float _1534 = fma(_1524, cbModelParam._m0[30u].z, fma(_1523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1522)) - _1491;
        float _1535 = fma(_1524, cbModelParam._m0[31u].z, fma(_1523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1522)) - _1495;
        float _1536 = fma(_1524, cbModelParam._m0[32u].z, fma(_1523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1522)) - _1499;
        float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
        float _1553 = ((_1540 * _1534) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1491 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1540 * _1535) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1495 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1540 * _1536) / cbModelParam._m0[35u].z) + ((((((_1499 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1590 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1557.x + (-0.5));
        float _1592 = _1590 * (_1557.y + (-0.5));
        float _1593 = _1590 * (_1557.z + (-0.5));
        float _1600 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1564.x + (-0.5));
        float _1602 = _1600 * (_1564.y + (-0.5));
        float _1603 = _1600 * (_1564.z + (-0.5));
        float _1610 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1571.x + (-0.5));
        float _1612 = _1610 * (_1571.y + (-0.5));
        float _1613 = _1610 * (_1571.z + (-0.5));
        float _1620 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1578.x + (-0.5));
        float _1622 = _1620 * (_1578.y + (-0.5));
        float _1623 = _1620 * (_1578.z + (-0.5));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = _1591 * 0.5;
        float _1628 = _1601 * 0.5;
        float _1629 = _1611 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_915, _916, _917), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4404 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1654 + 1.0))) + _1659) * _1624;
        float _1669 = _1592 * 0.5;
        float _1670 = _1602 * 0.5;
        float _1671 = _1612 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_915, _916, _917), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4437 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1696 + 1.0))) + _1701) * _1625;
        float _1711 = _1593 * 0.5;
        float _1712 = _1603 * 0.5;
        float _1713 = _1613 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_915, _916, _917), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4470 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1738 + 1.0))) + _1743) * _1626;
        _1760 = _1593;
        _1761 = _1592;
        _1762 = _1591;
        _1763 = _1603;
        _1764 = _1602;
        _1765 = _1601;
        _1766 = _1613;
        _1767 = _1612;
        _1768 = _1611;
        _1769 = _1626;
        _1770 = _1625;
        _1771 = _1624;
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
    }
    else
    {
        _1760 = _1454;
        _1761 = _1454;
        _1762 = _1454;
        _1763 = _1454;
        _1764 = _1454;
        _1765 = _1454;
        _1766 = _1454;
        _1767 = _1454;
        _1768 = _1454;
        _1769 = _1454;
        _1770 = _1454;
        _1771 = _1454;
        _1772 = 0.0;
        _1773 = 0.0;
        _1774 = 0.0;
    }
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1466)) + _1466;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1467)) + _1467;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1468)) + _1468;
    float _1807 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1784));
    float _1828 = _1088 * 0.5;
    float _1829 = _1089 * 0.5;
    float _1830 = _1090 * 0.5;
    float _1831 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1834 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1837 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1871;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1844 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1453, _1457, _1460, _1463));
        float _1848 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1852 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1859 = dot(vec4(cbModelParam._m0[39u]), vec4(_1828, _1829, _1830, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1882;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1873 = dot(vec4(cbModelParam._m0[40u]), vec4(_1828, _1829, _1830, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1886 = (_1882 * cbModelParam._m0[1u].x) + (_1871 * (1.0 - cbModelParam._m0[1u].x));
    float _1896 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1896 : min(cbModelParam._m0[25u].z, _1896));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1945 = fma(_1152, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144)) + cbModelParam._m0[13u].w;
        float _1949 = fma(_1152, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144)) + cbModelParam._m0[14u].w;
        float _1953 = fma(_1152, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144)) + cbModelParam._m0[15u].w;
        float _1956 = fma(_1090, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088));
        float _1959 = fma(_1090, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088));
        float _1962 = fma(_1090, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088));
        float _1990;
        if (_1956 > 0.0)
        {
            _1990 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1990 = frontier_phi_14_12_ladder;
        }
        float _2162;
        if (_1959 > 0.0)
        {
            _2162 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2162 = frontier_phi_23_19_ladder;
        }
        float _2457;
        if (_1962 > 0.0)
        {
            _2457 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2457 = frontier_phi_35_30_ladder;
        }
        float _2459 = isnan(_2162) ? _1990 : (isnan(_1990) ? _2162 : min(_1990, _2162));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1956) + _1945;
        float _2465 = (_2460 * _1959) + _1949;
        float _2466 = (_2460 * _1962) + _1953;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2467;
        float _2471 = _2467 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 > _2471) || ((_2465 < _2469) || ((_2464 < _2469) || (_2464 > _2471))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2466, cbModelParam._m0[9u].z, fma(_2465, cbModelParam._m0[9u].y, _2464 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2466, cbModelParam._m0[10u].z, fma(_2465, cbModelParam._m0[10u].y, _2464 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2466, cbModelParam._m0[11u].z, fma(_2465, cbModelParam._m0[11u].y, _2464 * cbModelParam._m0[11u].x))), _1897);
            frontier_phi_13_35_ladder = _2611.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2611.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2611.x * cbModelParam._m0[1u].y;
        }
        _1978 = frontier_phi_13_35_ladder_2;
        _1980 = frontier_phi_13_35_ladder_1;
        _1982 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1088, _1089, _1090), _1897);
        _1978 = _1966.x * cbModelParam._m0[1u].y;
        _1980 = _1966.y * cbModelParam._m0[1u].y;
        _1982 = _1966.z * cbModelParam._m0[1u].y;
    }
    float _1986 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _1987 = isnan(_1986) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1986 : min(cbModelParam._m0[25u].w, _1986));
    float _2077;
    float _2079;
    float _2081;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2041 = fma(_1152, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144)) + cbModelParam._m0[21u].w;
        float _2045 = fma(_1152, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144)) + cbModelParam._m0[22u].w;
        float _2049 = fma(_1152, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144)) + cbModelParam._m0[23u].w;
        float _2052 = fma(_1090, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088));
        float _2055 = fma(_1090, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088));
        float _2058 = fma(_1090, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088));
        float _2167;
        if (_2052 > 0.0)
        {
            _2167 = abs((1.0 - _2041) / _2052);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2041 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2167 = frontier_phi_25_21_ladder;
        }
        float _2484;
        if (_2055 > 0.0)
        {
            _2484 = abs((1.0 - _2045) / _2055);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2045 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2484 = frontier_phi_37_32_ladder;
        }
        float _2822;
        if (_2058 > 0.0)
        {
            _2822 = abs((1.0 - _2049) / _2058);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2049 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2822 = frontier_phi_47_44_ladder;
        }
        float _2824 = isnan(_2484) ? _2167 : (isnan(_2167) ? _2484 : min(_2167, _2484));
        float _2825 = isnan(_2822) ? _2824 : (isnan(_2824) ? _2822 : min(_2824, _2822));
        float _2829 = (_2825 * _2052) + _2041;
        float _2830 = (_2825 * _2055) + _2045;
        float _2831 = (_2825 * _2058) + _2049;
        float _2832 = _2825 * 9.9999997473787516355514526367188e-05;
        float _2833 = (-1.0) - _2832;
        float _2835 = _2832 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2831 > _2835) || ((_2831 < _2833) || ((_2830 > _2835) || ((_2830 < _2833) || ((_2829 < _2833) || (_2829 > _2835))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2831, cbModelParam._m0[17u].z, fma(_2830, cbModelParam._m0[17u].y, _2829 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2831, cbModelParam._m0[18u].z, fma(_2830, cbModelParam._m0[18u].y, _2829 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2831, cbModelParam._m0[19u].z, fma(_2830, cbModelParam._m0[19u].y, _2829 * cbModelParam._m0[19u].x))), _1987);
            frontier_phi_22_47_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2077 = frontier_phi_22_47_ladder_2;
        _2079 = frontier_phi_22_47_ladder_1;
        _2081 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1088, _1089, _1090), _1987);
        _2077 = _2061.x * cbModelParam._m0[1u].z;
        _2079 = _2061.y * cbModelParam._m0[1u].z;
        _2081 = _2061.z * cbModelParam._m0[1u].z;
    }
    float _2094 = (((_1115 * _1064) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2077 - _1978)) + _1978);
    float _2096 = (((_1115 * _1066) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2079 - _1980)) + _1980);
    float _2098 = (((_1115 * _1067) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2101 = fma(_2098, cbSceneParam._m0[89u].z, fma(_2096, cbSceneParam._m0[89u].y, _2094 * cbSceneParam._m0[89u].x));
    float _2104 = fma(_2098, cbSceneParam._m0[90u].z, fma(_2096, cbSceneParam._m0[90u].y, _2094 * cbSceneParam._m0[90u].x));
    float _2107 = fma(_2098, cbSceneParam._m0[91u].z, fma(_2096, cbSceneParam._m0[91u].y, _2094 * cbSceneParam._m0[91u].x));
    float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2145 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2149 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2153 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2154 = _2141 / _2153;
    float _2155 = _2145 / _2153;
    float _2156 = _2149 / _2153;
    float _2303;
    float _2304;
    float _2305;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2183 = ((uint(_2156 > cbSceneParam._m0[59u].y) + uint(_2156 > cbSceneParam._m0[59u].x)) + uint(_2156 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2184 = _2183 + 43u;
        uint _2192 = _2183 + 44u;
        uint _2200 = _2183 + 45u;
        uint _2208 = _2183 + 46u;
        float _2219 = fma(_2153, cbSceneParam._m0[_2184].w, fma(_2149, cbSceneParam._m0[_2184].z, fma(_2145, cbSceneParam._m0[_2184].y, _2141 * cbSceneParam._m0[_2184].x)));
        float _2223 = fma(_2153, cbSceneParam._m0[_2192].w, fma(_2149, cbSceneParam._m0[_2192].z, fma(_2145, cbSceneParam._m0[_2192].y, _2141 * cbSceneParam._m0[_2192].x)));
        float _2231 = fma(_2153, cbSceneParam._m0[_2208].w, fma(_2149, cbSceneParam._m0[_2208].z, fma(_2145, cbSceneParam._m0[_2208].y, _2141 * cbSceneParam._m0[_2208].x)));
        float _2236 = cbSceneParam._m0[33u].z * _2231;
        float _2238 = cbSceneParam._m0[33u].w * _2231;
        float _2241 = fma(_2153, cbSceneParam._m0[_2200].w, fma(_2149, cbSceneParam._m0[_2200].z, fma(_2145, cbSceneParam._m0[_2200].y, _2141 * cbSceneParam._m0[_2200].x))) / _2231;
        float _2289 = (cbSceneParam._m0[33u].x - sqrt(((_2155 * _2155) + (_2154 * _2154)) + (_2156 * _2156))) * cbSceneParam._m0[33u].y;
        float _4596 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2296 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2236 + _2219) / _2231, (_2238 + _2223) / _2231), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2238 + _2219) / _2231, (_2223 - _2236) / _2231), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 - _2236) / _2231, (_2223 - _2238) / _2231), _2241), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2219 - _2238) / _2231, (_2236 + _2223) / _2231), _2241), 0.0)).x), vec4(0.25)));
        _2303 = 1.0 - (_2296 * cbSceneParam._m0[34u].x);
        _2304 = 1.0 - (_2296 * cbSceneParam._m0[34u].y);
        _2305 = 1.0 - (_2296 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2303 = 1.0;
        _2304 = 1.0;
        _2305 = 1.0;
    }
    float _2369;
    float _2371;
    float _2373;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2357 = fma(_2153, cbSceneParam._m0[63u].w, fma(_2149, cbSceneParam._m0[63u].z, fma(_2145, cbSceneParam._m0[63u].y, _2141 * cbSceneParam._m0[63u].x)));
        float _2358 = fma(_2153, cbSceneParam._m0[60u].w, fma(_2149, cbSceneParam._m0[60u].z, fma(_2145, cbSceneParam._m0[60u].y, _2141 * cbSceneParam._m0[60u].x))) / _2357;
        float _2359 = fma(_2153, cbSceneParam._m0[61u].w, fma(_2149, cbSceneParam._m0[61u].z, fma(_2145, cbSceneParam._m0[61u].y, _2141 * cbSceneParam._m0[61u].x))) / _2357;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2358 >= cbSceneParam._m0[64u].x) && (_2359 >= cbSceneParam._m0[64u].y)) && (_2358 <= cbSceneParam._m0[64u].z)) && (_2359 <= cbSceneParam._m0[64u].w))
        {
            float _2497 = fma(_2153, cbSceneParam._m0[62u].w, fma(_2149, cbSceneParam._m0[62u].z, fma(_2145, cbSceneParam._m0[62u].y, _2141 * cbSceneParam._m0[62u].x))) / _2357;
            float _2501 = isnan(cbSceneParam._m0[41u].w) ? _2497 : (isnan(_2497) ? cbSceneParam._m0[41u].w : max(_2497, cbSceneParam._m0[41u].w));
            float _2544 = (cbSceneParam._m0[33u].x - sqrt(((_2155 * _2155) + (_2154 * _2154)) + (_2156 * _2156))) * cbSceneParam._m0[33u].y;
            float _4612 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
            float _2551 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2358, cbSceneParam._m0[33u].w + _2359), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2358, _2359 - cbSceneParam._m0[33u].z), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2358 - cbSceneParam._m0[33u].z, _2359 - cbSceneParam._m0[33u].w), _2501), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2358 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2359), _2501), 0.0)).x), vec4(0.25)));
            float _2555 = 1.0 - (_2551 * cbSceneParam._m0[34u].x);
            float _2556 = 1.0 - (_2551 * cbSceneParam._m0[34u].y);
            float _2557 = 1.0 - (_2551 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2557) ? _2305 : (isnan(_2305) ? _2557 : min(_2305, _2557));
            frontier_phi_34_33_ladder_1 = isnan(_2556) ? _2304 : (isnan(_2304) ? _2556 : min(_2304, _2556));
            frontier_phi_34_33_ladder_2 = isnan(_2555) ? _2303 : (isnan(_2303) ? _2555 : min(_2303, _2555));
        }
        else
        {
            frontier_phi_34_33_ladder = _2305;
            frontier_phi_34_33_ladder_1 = _2304;
            frontier_phi_34_33_ladder_2 = _2303;
        }
        _2369 = frontier_phi_34_33_ladder_2;
        _2371 = frontier_phi_34_33_ladder_1;
        _2373 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2369 = _2303;
        _2371 = _2304;
        _2373 = _2305;
    }
    uvec4 _2378 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2380 = _2378.x * 14u;
    uint _2381 = _2380 + 13u;
    float _2388 = _1080 + (-1.0);
    float _2393 = (cbLight._m0[_2381].x * _2388) + 1.0;
    float _2394 = (cbLight._m0[_2381].y * _2388) + 1.0;
    float _2395 = (cbLight._m0[_2381].z * _2388) + 1.0;
    float _2396 = (cbLight._m0[_2381].w * _2388) + 1.0;
    uint _2397 = _2380 + 5u;
    float _2403 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
    uint _2407 = _2380 + 4u;
    float _2416 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
    uint _2420 = _2380 | 1u;
    float _2431 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_915, _916, _917));
    float _2434 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_915, _916, _917));
    float _4648 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _4659 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2439 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2441 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * 0.3183098733425140380859375;
    float _2448 = ((cbLight._m0[_2397].x * _2403) * _2441) + (((cbLight._m0[_2407].x * _2369) * _2416) * _2439);
    float _2449 = ((_2403 * cbLight._m0[_2397].y) * _2441) + (((cbLight._m0[_2407].y * _2371) * _2416) * _2439);
    float _2450 = ((_2403 * cbLight._m0[_2397].z) * _2441) + (((cbLight._m0[_2407].z * _2373) * _2416) * _2439);
    uvec4 _2454 = floatBitsToUint(cbLight._m0[_2380 + 12u]);
    bool _2456 = _2454.x == 0u;
    float _2558;
    float _2560;
    float _2562;
    if (_2456)
    {
        _2558 = _2448;
        _2560 = _2449;
        _2562 = _2450;
    }
    else
    {
        uint _2566 = _2380 + 6u;
        float _2582 = (dot(vec3(cbLight._m0[_2380 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2583 = _2582 * _2582;
        float _4670 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2584 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2585 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2558 = (((cbLight._m0[_2566].x * 0.3183098733425140380859375) * _2584) * _2585) + _2448;
        _2560 = (((cbLight._m0[_2566].y * 0.3183098733425140380859375) * _2584) * _2585) + _2449;
        _2562 = (((cbLight._m0[_2566].z * 0.3183098733425140380859375) * _2584) * _2585) + _2450;
    }
    bool _2565 = _2454.y == 0u;
    float _2620;
    float _2622;
    float _2624;
    if (_2565)
    {
        _2620 = _2558;
        _2622 = _2560;
        _2624 = _2562;
    }
    else
    {
        uint _2793 = _2380 + 7u;
        float _2809 = (dot(vec3(cbLight._m0[_2380 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2810 = _2809 * _2809;
        float _4686 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2811 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2812 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
        _2620 = (((cbLight._m0[_2793].x * 0.3183098733425140380859375) * _2811) * _2812) + _2558;
        _2622 = (((cbLight._m0[_2793].y * 0.3183098733425140380859375) * _2811) * _2812) + _2560;
        _2624 = (((cbLight._m0[_2793].z * 0.3183098733425140380859375) * _2811) * _2812) + _2562;
    }
    uint _2627 = _2380 + 8u;
    float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _918) * 0.949999988079071044921875);
    float _2641 = _2640 * _2640;
    float _2642 = cbLight._m0[_2380].x + _994;
    float _2643 = cbLight._m0[_2380].y + _995;
    float _2644 = cbLight._m0[_2380].z + _996;
    float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
    float _2649 = _2648 * _2642;
    float _2650 = _2648 * _2643;
    float _2651 = _2648 * _2644;
    float _2652 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2380].xyz));
    float _4702 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _4713 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2656 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2657 = dot(vec3(_915, _916, _917), vec3(_2649, _2650, _2651));
    float _4724 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2661 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2649, _2650, _2651));
    float _4735 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2665 = _2641 * _2641;
    float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
    float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0);
    float _2678 = 0.959999978542327880859375 - _1061;
    float _2680 = 0.959999978542327880859375 - _1062;
    float _2681 = 0.959999978542327880859375 - _1063;
    float _2688 = 1.0 - _2641;
    float _2699 = (0.5 / (((_2656 * ((_2655 * _2688) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2688) + _2641) * _2655))) * _2655;
    float _4746 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2701 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
    uint _2715 = _2380 + 9u;
    float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _918) * 0.949999988079071044921875);
    float _2727 = _2726 * _2726;
    float _2728 = cbLight._m0[_2420].x + _994;
    float _2729 = cbLight._m0[_2420].y + _995;
    float _2730 = cbLight._m0[_2420].z + _996;
    float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
    float _2735 = _2734 * _2728;
    float _2736 = _2734 * _2729;
    float _2737 = _2734 * _2730;
    float _2738 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2420].xyz));
    float _4757 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2742 = dot(vec3(_915, _916, _917), vec3(_2735, _2736, _2737));
    float _4768 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2745 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2746 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2735, _2736, _2737));
    float _4779 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
    float _2750 = _2727 * _2727;
    float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
    float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0);
    float _2768 = 1.0 - _2727;
    float _2778 = (0.5 / (((_2656 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2768) + _2727) * _2741))) * _2741;
    float _4790 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2780 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
    float _2790 = (((((_2761 * _2678) + _1064) * cbLight._m0[_2715].x) * _2780) * _2403) + ((((cbLight._m0[_2627].x * _2369) * ((_2677 * _2678) + _1064)) * _2701) * _2416);
    float _2791 = (((((_2761 * _2680) + _1066) * cbLight._m0[_2715].y) * _2780) * _2403) + ((((cbLight._m0[_2627].y * _2371) * ((_2677 * _2680) + _1066)) * _2701) * _2416);
    float _2792 = (((((_2761 * _2681) + _1067) * cbLight._m0[_2715].z) * _2780) * _2403) + ((((cbLight._m0[_2627].z * _2373) * ((_2677 * _2681) + _1067)) * _2701) * _2416);
    float _2848;
    float _2850;
    float _2852;
    if (_2456)
    {
        _2848 = _2790;
        _2850 = _2791;
        _2852 = _2792;
    }
    else
    {
        uint _2854 = _2380 + 2u;
        uint _2858 = _2380 + 10u;
        float _2872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2854].w)) * _918) * 0.949999988079071044921875);
        float _2873 = _2872 * _2872;
        float _2874 = cbLight._m0[_2854].x + _994;
        float _2875 = cbLight._m0[_2854].y + _995;
        float _2876 = cbLight._m0[_2854].z + _996;
        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
        float _2881 = _2880 * _2874;
        float _2882 = _2880 * _2875;
        float _2883 = _2880 * _2876;
        float _2884 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2854].xyz));
        float _4801 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2888 = dot(vec3(_915, _916, _917), vec3(_2881, _2882, _2883));
        float _4812 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2892 = dot(vec3(cbLight._m0[_2854].xyz), vec3(_2881, _2882, _2883));
        float _4823 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2896 = _2873 * _2873;
        float _2900 = ((_2891 * _2891) * (_2896 + (-1.0))) + 1.0;
        float _2907 = exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0);
        float _2914 = 1.0 - _2873;
        float _2924 = (0.5 / (((_2656 * ((_2887 * _2914) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _2914) + _2873) * _2887))) * _2887;
        float _4834 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2896 / ((_2900 * _2900) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2848 = (((((_2907 * _2678) + _1064) * cbLight._m0[_2858].x) * _2926) * _2927) + _2790;
        _2850 = (((((_2907 * _2680) + _1066) * cbLight._m0[_2858].y) * _2926) * _2927) + _2791;
        _2852 = (((((_2907 * _2681) + _1067) * cbLight._m0[_2858].z) * _2926) * _2927) + _2792;
    }
    float _2958;
    float _2960;
    float _2962;
    if (_2565)
    {
        _2958 = _2848;
        _2960 = _2850;
        _2962 = _2852;
    }
    else
    {
        uint _2969 = _2380 + 3u;
        uint _2973 = _2380 + 11u;
        float _2987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2969].w)) * _918) * 0.949999988079071044921875);
        float _2988 = _2987 * _2987;
        float _2989 = cbLight._m0[_2969].x + _994;
        float _2990 = cbLight._m0[_2969].y + _995;
        float _2991 = cbLight._m0[_2969].z + _996;
        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
        float _2996 = _2995 * _2989;
        float _2997 = _2995 * _2990;
        float _2998 = _2995 * _2991;
        float _2999 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2969].xyz));
        float _4850 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3002 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _3003 = dot(vec3(_915, _916, _917), vec3(_2996, _2997, _2998));
        float _4861 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _3007 = dot(vec3(cbLight._m0[_2969].xyz), vec3(_2996, _2997, _2998));
        float _4872 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3011 = _2988 * _2988;
        float _3015 = ((_3006 * _3006) * (_3011 + (-1.0))) + 1.0;
        float _3022 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
        float _3029 = 1.0 - _2988;
        float _3039 = (0.5 / (((_2656 * ((_3002 * _3029) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_2656 * _3029) + _2988) * _3002))) * _3002;
        float _4883 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3041 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_3011 / ((_3015 * _3015) * 3.141590118408203125));
        float _3042 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
        _2958 = (((((_3022 * _2678) + _1064) * cbLight._m0[_2973].x) * _3041) * _3042) + _2848;
        _2960 = (((((_3022 * _2680) + _1066) * cbLight._m0[_2973].y) * _3041) * _3042) + _2850;
        _2962 = (((((_3022 * _2681) + _1067) * cbLight._m0[_2973].z) * _3041) * _3042) + _2852;
    }
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_2378.y == 0u)
    {
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.x;
        uint _3075 = uint((float(_3063.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1003) / _3064))) + floor(float(uint(cbSceneParam._m0[85u].x * _1002) / _3064)));
        float _3085 = (log2(_2156 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3086 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        uint _3089 = uint(isnan(14.0) ? _3086 : (isnan(_3086) ? 14.0 : min(_3086, 14.0)));
        uvec4 _3094 = texelFetch(g_lightClusterGridBuffer, int(((_3089 << 2u) + (_3075 << 6u)) >> 2u));
        uint _3095 = _3094.x;
        uint _3096 = _3063.z;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((((1u << ((_3096 >> 4u) & 15u)) + 4294967295u) & _3095) == 0u) || ((_3096 & 240u) == 0u))
        {
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
        }
        else
        {
            float _3176;
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            float _3323 = 0.0;
            float _3324 = 0.0;
            float _3325 = 0.0;
            uint _3326 = 0u;
            uint _3335;
            bool _3336;
            for (;;)
            {
                _3335 = texelFetch(g_lightClassification, int((((_3089 << 5u) + (_3075 << 9u)) + (_3326 << 2u)) >> 2u)).x;
                _3336 = _3335 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3336)
                {
                    frontier_phi_66_pred = _3325;
                    frontier_phi_66_pred_1 = _3324;
                    frontier_phi_66_pred_2 = _3323;
                    frontier_phi_66_pred_3 = _3322;
                    frontier_phi_66_pred_4 = _3321;
                    frontier_phi_66_pred_5 = _3320;
                }
                else
                {
                    float _3444;
                    float _3445;
                    float _3446;
                    float _3447;
                    float _3448;
                    float _3449;
                    uint _3450;
                    _3444 = _3320;
                    _3445 = _3321;
                    _3446 = _3322;
                    _3447 = _3323;
                    _3448 = _3324;
                    _3449 = _3325;
                    _3450 = _3335;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    float _3381;
                    for (;;)
                    {
                        uint _3454 = uint(findLSB(_3450)) + (_3326 << 5u);
                        uint _3451 = (_3450 + 4294967295u) & _3450;
                        uint _3456 = _3454 * 48u;
                        vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 3u)).x));
                        uint _3476 = (_3454 * 48u) + 4u;
                        vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3476)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3476 + 3u)).x));
                        uint _3495 = (_3454 * 48u) + 8u;
                        vec3 _3506 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x));
                        float _3510 = _3470.x - _2154;
                        float _3511 = _3470.y - _2155;
                        float _3512 = _3470.z - _2156;
                        float _3513 = dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512));
                        float _3516 = inversesqrt(_3513);
                        float _3517 = _3516 * _3510;
                        float _3518 = _3516 * _3511;
                        float _3519 = _3516 * _3512;
                        float _3520 = dot(vec3(_1021, _1024, _1027), vec3(_3517, _3518, _3519));
                        float _3525 = 1.0 - (_3513 * _3470.w);
                        float _4909 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3527 = sqrt(_3513) * _3489.w;
                        float _3530 = 1.39999997615814208984375 / (_3527 + 1.39999997615814208984375);
                        float _3531 = _3530 * _3530;
                        float _3534 = ((1.0 - _3531) * _3520) + _3531;
                        float _3537 = _3527 * _3527;
                        float _3541 = ((isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0))) * _3526) / ((_3537 * 0.699999988079071044921875) + 1.0);
                        float _3545 = (-0.0) - _2154;
                        float _3546 = (-0.0) - _2155;
                        float _3547 = (-0.0) - _2156;
                        float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                        float _3552 = _3551 * _3545;
                        float _3553 = _3551 * _3546;
                        float _3554 = _3551 * _3547;
                        float _3561 = exp2(log2(1.0 / ((_3537 * 3.5) + 5.0)) * 0.25);
                        float _3562 = 1.0 - _1096;
                        float _3569 = sqrt(1.0 - ((1.0 - (_3562 * _3562)) * (1.0 - (_3561 * _3561))));
                        float _3570 = _3569 * _3569;
                        float _3571 = _3570 * _3570;
                        float _3572 = _3552 + _3517;
                        float _3573 = _3553 + _3518;
                        float _3574 = _3554 + _3519;
                        float _3578 = inversesqrt(dot(vec3(_3572, _3573, _3574), vec3(_3572, _3573, _3574)));
                        float _3582 = dot(vec3(_1021, _1024, _1027), vec3(_3552, _3553, _3554));
                        float _4925 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3585 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3586 = dot(vec3(_1021, _1024, _1027), vec3(_3578 * _3572, _3578 * _3573, _3578 * _3574));
                        float _4936 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3589 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3593 = ((_3589 * _3589) * (_3571 + (-1.0))) + 1.0;
                        float _3594 = _3530 * _3570;
                        float _3595 = _3594 * _3594;
                        float _3598 = ((1.0 - _3595) * _3520) + _3595;
                        float _4947 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3599 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3600 = 1.0 - _3570;
                        float _3610 = (0.5 / (((_3599 * ((_3585 * _3600) + _3570)) + 9.9999999392252902907785028219223e-09) + (((_3599 * _3600) + _3570) * _3585))) * _3599;
                        float _4958 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3621 = (((_3571 * 3.1415927410125732421875) * (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)))) / ((_3593 * _3593) * ((_3537 * 2.1991131305694580078125) + 3.141590118408203125))) * _3526;
                        _3379 = (_3541 * _3489.x) + _3447;
                        _3380 = (_3541 * _3489.y) + _3448;
                        _3381 = (_3541 * _3489.z) + _3449;
                        _3376 = (_3621 * _3506.x) + _3444;
                        _3377 = (_3621 * _3506.y) + _3445;
                        _3378 = (_3621 * _3506.z) + _3446;
                        if (_3451 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3444 = _3376;
                            _3445 = _3377;
                            _3446 = _3378;
                            _3447 = _3379;
                            _3448 = _3380;
                            _3449 = _3381;
                            _3450 = _3451;
                        }
                    }
                    frontier_phi_66_pred = _3381;
                    frontier_phi_66_pred_1 = _3380;
                    frontier_phi_66_pred_2 = _3379;
                    frontier_phi_66_pred_3 = _3378;
                    frontier_phi_66_pred_4 = _3377;
                    frontier_phi_66_pred_5 = _3376;
                }
                _3186 = frontier_phi_66_pred;
                _3184 = frontier_phi_66_pred_1;
                _3182 = frontier_phi_66_pred_2;
                _3180 = frontier_phi_66_pred_3;
                _3178 = frontier_phi_66_pred_4;
                _3176 = frontier_phi_66_pred_5;
                uint _3327 = _3326 + 1u;
                if (_3327 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3320 = _3176;
                    _3321 = _3178;
                    _3322 = _3180;
                    _3323 = _3182;
                    _3324 = _3184;
                    _3325 = _3186;
                    _3326 = _3327;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
        }
        uvec4 _3189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3190 = _3189.z;
        uint _3192 = (_3190 >> 8u) & 15u;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        float _3296;
        float _3298;
        if (((4294967295u << _3192) & _3095) == 0u)
        {
            _3288 = _3175;
            _3290 = _3177;
            _3292 = _3179;
            _3294 = _3181;
            _3296 = _3183;
            _3298 = _3185;
        }
        else
        {
            float _3313 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
            float _3314 = _3313 * _2154;
            float _3315 = _3313 * _2155;
            float _3316 = _3313 * _2156;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3192 < ((_3190 >> 12u) & 15u))
            {
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3297;
                float _3299;
                float _3427 = _3175;
                float _3428 = _3177;
                float _3429 = _3179;
                float _3430 = _3181;
                float _3431 = _3183;
                float _3432 = _3185;
                uint _3433 = _3192;
                uint _3442;
                bool _3443;
                for (;;)
                {
                    _3442 = texelFetch(g_lightClassification, int((((_3089 << 5u) + (_3075 << 9u)) + (_3433 << 2u)) >> 2u)).x;
                    _3443 = _3442 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3443)
                    {
                        frontier_phi_72_pred = _3432;
                        frontier_phi_72_pred_1 = _3431;
                        frontier_phi_72_pred_2 = _3430;
                        frontier_phi_72_pred_3 = _3429;
                        frontier_phi_72_pred_4 = _3428;
                        frontier_phi_72_pred_5 = _3427;
                    }
                    else
                    {
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3639 = _3427;
                        float _3640 = _3428;
                        float _3641 = _3429;
                        float _3642 = _3430;
                        float _3643 = _3431;
                        float _3644 = _3432;
                        uint _3645 = _3442;
                        uint _3646;
                        vec4 _3671;
                        float _3672;
                        vec4 _3687;
                        vec3 _3699;
                        vec4 _3714;
                        vec4 _3729;
                        float _3775;
                        bool _3776;
                        for (;;)
                        {
                            uint _3656 = ((_3433 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3645));
                            _3646 = (_3645 + 4294967295u) & _3645;
                            uint _3658 = _3656 * 40u;
                            _3671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 3u)).x));
                            _3672 = _3671.w;
                            uint _3674 = (_3656 * 40u) + 4u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3656 * 40u) + 8u;
                            _3699 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x));
                            uint _3701 = (_3656 * 40u) + 16u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3656 * 40u) + 20u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            uint _3731 = (_3656 * 40u) + 24u;
                            vec4 _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3750 = (_3656 * 40u) + 28u;
                            vec4 _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            _3775 = fma(_2156, _3763.z, fma(_2155, _3763.y, _3763.x * _2154)) + _3763.w;
                            _3776 = !((fma(_2156, _3744.z, fma(_2155, _3744.y, _3744.x * _2154)) + _3744.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3776)
                            {
                                float _3803 = _3671.x - _2154;
                                float _3804 = _3671.y - _2155;
                                float _3805 = _3671.z - _2156;
                                float _3806 = dot(vec3(_3803, _3804, _3805), vec3(_3803, _3804, _3805));
                                float _3809 = inversesqrt(_3806);
                                float _3810 = _3809 * _3803;
                                float _3811 = _3809 * _3804;
                                float _3812 = _3809 * _3805;
                                float _3816 = 1.0 - (_3806 / (_3672 * _3672));
                                float _4969 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3821 = sqrt(_3806) * _3687.w;
                                float _3823 = 1.39999997615814208984375 / (_3821 + 1.39999997615814208984375);
                                float _3824 = _3823 * _3823;
                                float _3827 = ((1.0 - _3824) * dot(vec3(_3810, _3811, _3812), vec3(_1021, _1024, _1027))) + _3824;
                                float _3830 = _3821 * _3821;
                                float _3834 = (fma(_2156, _3714.z, fma(_2155, _3714.y, _3714.x * _2154)) + _3714.w) / _3775;
                                float _3835 = (fma(_2156, _3729.z, fma(_2155, _3729.y, _3729.x * _2154)) + _3729.w) / _3775;
                                float _3839 = 1.0 - dot(vec2(_3834, _3835), vec2(_3834, _3835));
                                float _4985 = isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0));
                                float _3840 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3841 = _3840 * (((isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0))) * _3817) / ((_3830 * 0.699999988079071044921875) + 1.0));
                                float _3853 = exp2(log2(1.0 / ((_3830 * 3.5) + 5.0)) * 0.25);
                                float _3854 = 1.0 - _1096;
                                float _3861 = sqrt(1.0 - ((1.0 - (_3854 * _3854)) * (1.0 - (_3853 * _3853))));
                                float _3862 = _3861 * _3861;
                                float _3863 = _3862 * _3862;
                                float _3864 = _3810 - _3314;
                                float _3865 = _3811 - _3315;
                                float _3866 = _3812 - _3316;
                                float _3870 = inversesqrt(dot(vec3(_3864, _3865, _3866), vec3(_3864, _3865, _3866)));
                                float _3874 = dot(vec3(_1021, _1024, _1027), vec3((-0.0) - _3314, (-0.0) - _3315, (-0.0) - _3316));
                                float _4996 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3877 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3878 = dot(vec3(_1021, _1024, _1027), vec3(_3870 * _3864, _3870 * _3865, _3870 * _3866));
                                float _5007 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3881 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3885 = ((_3881 * _3881) * (_3863 + (-1.0))) + 1.0;
                                float _3886 = _3823 * _3862;
                                float _3887 = _3886 * _3886;
                                float _3893 = ((1.0 - _3887) * dot(vec3(_1021, _1024, _1027), vec3(_3810, _3811, _3812))) + _3887;
                                float _5018 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3894 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3895 = 1.0 - _3862;
                                float _3905 = (0.5 / (((_3894 * ((_3877 * _3895) + _3862)) + 9.9999999392252902907785028219223e-09) + (((_3894 * _3895) + _3862) * _3877))) * _3894;
                                float _5029 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3915 = (_3840 * _3817) * (((_3863 * 3.1415927410125732421875) * (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) / ((_3885 * _3885) * ((_3830 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3841 * _3687.y;
                                frontier_phi_78_pred_1 = _3841 * _3687.x;
                                frontier_phi_78_pred_2 = _3915 * _3699.z;
                                frontier_phi_78_pred_3 = _3915 * _3699.y;
                                frontier_phi_78_pred_4 = _3915 * _3699.x;
                                frontier_phi_78_pred_5 = _3841 * _3687.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3923 = frontier_phi_78_pred;
                            _3922 = frontier_phi_78_pred_1;
                            _3921 = frontier_phi_78_pred_2;
                            _3920 = frontier_phi_78_pred_3;
                            _3919 = frontier_phi_78_pred_4;
                            _3924 = frontier_phi_78_pred_5;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            if (_3646 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3646;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3631;
                        frontier_phi_72_pred_1 = _3630;
                        frontier_phi_72_pred_2 = _3629;
                        frontier_phi_72_pred_3 = _3628;
                        frontier_phi_72_pred_4 = _3627;
                        frontier_phi_72_pred_5 = _3626;
                    }
                    _3299 = frontier_phi_72_pred;
                    _3297 = frontier_phi_72_pred_1;
                    _3295 = frontier_phi_72_pred_2;
                    _3293 = frontier_phi_72_pred_3;
                    _3291 = frontier_phi_72_pred_4;
                    _3289 = frontier_phi_72_pred_5;
                    uint _3434 = _3433 + 1u;
                    if (_3434 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3427 = _3289;
                        _3428 = _3291;
                        _3429 = _3293;
                        _3430 = _3295;
                        _3431 = _3297;
                        _3432 = _3299;
                        _3433 = _3434;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3299;
                frontier_phi_60_61_ladder_1 = _3297;
                frontier_phi_60_61_ladder_2 = _3293;
                frontier_phi_60_61_ladder_3 = _3291;
                frontier_phi_60_61_ladder_4 = _3289;
                frontier_phi_60_61_ladder_5 = _3295;
            }
            else
            {
                frontier_phi_60_61_ladder = _3185;
                frontier_phi_60_61_ladder_1 = _3183;
                frontier_phi_60_61_ladder_2 = _3179;
                frontier_phi_60_61_ladder_3 = _3177;
                frontier_phi_60_61_ladder_4 = _3175;
                frontier_phi_60_61_ladder_5 = _3181;
            }
            _3288 = frontier_phi_60_61_ladder_4;
            _3290 = frontier_phi_60_61_ladder_3;
            _3292 = frontier_phi_60_61_ladder_2;
            _3294 = frontier_phi_60_61_ladder_5;
            _3296 = frontier_phi_60_61_ladder_1;
            _3298 = frontier_phi_60_61_ladder;
        }
        float _3303 = isnan(1.0) ? _1080 : (isnan(_1080) ? 1.0 : min(_1080, 1.0));
        _3108 = (_3303 * _3294) + _2620;
        _3110 = (_3303 * _3296) + _2622;
        _3112 = (_3303 * _3298) + _2624;
        _3114 = ((_3288 * _1064) * _3303) + _2958;
        _3116 = ((_3290 * _1066) * _3303) + _2960;
        _3118 = ((_3292 * _1067) * _3303) + _2962;
    }
    else
    {
        _3108 = _2620;
        _3110 = _2622;
        _3112 = _2624;
        _3114 = _2958;
        _3116 = _2960;
        _3118 = _2962;
    }
    float _5045 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _5056 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _5067 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    uint _3138 = _265 + 6u;
    float _3146 = _1002 / cbSceneParam._m0[86u].x;
    float _3147 = _1003 / cbSceneParam._m0[86u].y;
    vec4 _3161 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3146, _3147, (log2((isnan(cbSceneParam._m0[77u].w) ? _937 : (isnan(_937) ? cbSceneParam._m0[77u].w : min(_937, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3163 = _3161.x;
    float _3164 = _3161.y;
    float _3165 = _3161.z;
    float _3166 = _3161.w;
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    if (_937 > cbSceneParam._m0[78u].w)
    {
        float _3200 = isnan(_937) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _937 : min(cbSceneParam._m0[80u].w, _937));
        float _3201 = _3200 / _937;
        float _3212 = _3201 * _987;
        float _3213 = _988 * _3201;
        float _3214 = (-0.0) - _3213;
        float _3216 = _3201 * _989;
        float _3218 = (cbSceneParam._m0[77u].w * _3214) / _3200;
        float _3219 = _3218 + cbSceneParam._m0[79u].w;
        float _3220 = cbSceneParam._m0[79u].w - _3213;
        float _3226 = sqrt(((_3212 * _3212) + (_3213 * _3213)) + (_3216 * _3216));
        float _3229 = (1.0 - (cbSceneParam._m0[77u].w / _3200)) * _3226;
        float _3234 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3236 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3389;
        if (abs((_3214 - _3218) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3389 = ((((_3219 > 0.0) ? exp2(_3234 * _3219) : (2.0 - exp2(_3236 * _3219))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3229;
        }
        else
        {
            float _3349 = 1.0 / cbSceneParam._m0[80u].x;
            float _3350 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : max(_3219, _3220));
            float _3351 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : min(_3219, _3220));
            float _3360 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : min(_3350, 0.0));
            float _3361 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : min(_3351, 0.0));
            _3389 = ((abs(_3226 / _3214) * cbSceneParam._m0[80u].y) * ((((_3360 - _3361) * 2.0) - ((exp2(_3234 * (isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0)))) - exp2(_3234 * (isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0))))) * _3349)) - ((exp2(_3236 * _3360) - exp2(_3236 * _3361)) * _3349))) + (_3229 * cbSceneParam._m0[80u].z);
        }
        vec4 _3391 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3146, _3147, 1.0), 0.0);
        float _3400 = exp2((_3389 * (-1.44269502162933349609375)) * (1.0 - _3391.w));
        float _3401 = log2(_3400);
        float _3417 = log2(_3166);
        _3238 = (exp2(_3417 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].x)) * _3391.x) / cbSceneParam._m0[78u].x)) + _3163;
        _3240 = (exp2(_3417 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].y)) * _3391.y) / cbSceneParam._m0[78u].y)) + _3164;
        _3242 = (exp2(_3417 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3401 * cbSceneParam._m0[78u].z)) * _3391.z) / cbSceneParam._m0[78u].z)) + _3165;
        _3244 = _3400 * _3166;
    }
    else
    {
        _3238 = _3163;
        _3240 = _3164;
        _3242 = _3165;
        _3244 = _3166;
    }
    float _3256 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3257 = _3256 == 3.0;
    float _3258 = log2(_3244);
    float _3265 = exp2(_3258 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_3108 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1080))) + ((_3114 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _3266 = exp2(_3258 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3110 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1080))) + ((_3116 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _3267 = exp2(_3258 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3112 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1080))) + ((_3118 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1886)) * cbPerFrame._m0[3u].x));
    float _3276 = (_3256 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3276 * (_3257 ? _3265 : (_3265 + (cbSceneParam._m0[72u].w * _3238)));
    SV_Target.y = _3276 * (_3257 ? _3266 : (_3266 + (cbSceneParam._m0[72u].w * _3240)));
    SV_Target.z = _3276 * (_3257 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3242)));
    SV_Target.w = cbInstanceData._m0[_3138].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3138].w;
}


