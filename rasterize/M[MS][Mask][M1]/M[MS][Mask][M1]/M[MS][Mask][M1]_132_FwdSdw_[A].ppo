#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1536;
float _4196;
float _4197;
float _4198;
float _4199;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _264 + 1u;
    uint _274 = _264 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _374.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[23u].w) + _427) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4208 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _452 = (_445 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _453 = (_445 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _454 = (_445 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _374.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[23u].w) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4219 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _525 = (_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452;
    float _526 = (_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453;
    float _527 = (_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454;
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _565 = _563.x;
    float _575 = dot(vec4(_565, _563.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _587 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _374.z) * 2.0) - ((((_565 - _575) * cbMtdParam._m0[23u].w) + _575) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4230 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _601 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_588 * ((_546.x * cbMtdParam._m0[14u].x) - _525)) + _525);
    float _604 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_588 * ((_546.y * cbMtdParam._m0[14u].y) - _526)) + _526);
    float _607 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_588 * ((_546.z * cbMtdParam._m0[14u].z) - _527)) + _527);
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _666 = _662.z;
    float _673 = ((_645.x - _664) * _445) + _664;
    float _674 = ((_645.y - _665) * _445) + _665;
    float _675 = ((_645.z - _666) * _445) + _666;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _698 = ((_687.x - _673) * _518) + _673;
    float _699 = ((_687.y - _674) * _518) + _674;
    float _700 = ((_687.z - _675) * _518) + _675;
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _725 = ((_712.z - _700) * _588) + _700;
    float _728 = ((((_712.x - _698) * _588) + _698) * 2.0) + (-1.0);
    float _730 = ((((_712.y - _699) * _588) + _699) * 2.0) + (-1.0);
    float _731 = dot(vec2(_728, _730), vec2(_728, _730));
    float _4241 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _736 = sqrt(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _777 = _775.x;
    float _778 = 1.0 - _777;
    float _793 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_777 - _778) * cbMtdParam._m0[24u].z) + _778) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4252 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _794 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _801 = (_794 * ((_625.x * cbMtdParam._m0[18u].x) - _601)) + _601;
    float _802 = (_794 * ((_625.y * cbMtdParam._m0[18u].y) - _604)) + _604;
    float _803 = (_794 * ((_625.z * cbMtdParam._m0[18u].z) - _607)) + _607;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _831 = _829.x;
    float _848 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _831) * _445) + _831;
    float _865 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _848) * _518) + _848;
    float _883 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _284) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _285) + cbTextureTilingScale._m0[10u].w)).x - _865) * _588) + _865;
    float _887 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _883) * cbMtdParam._m0[19u].z) + _883;
    float _889 = _887 - (_887 * _794);
    float _893 = (cbMtdParam._m0[19u].w * (_750.z - _725)) + _725;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _913 = (_906.x * 2.0) + (-1.0);
    float _914 = (_906.y * 2.0) + (-1.0);
    float _915 = dot(vec2(_913, _914), vec2(_913, _914));
    float _4263 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _923 = (_794 * (_906.z - _893)) + _893;
    float _926 = (((_750.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _728;
    float _927 = (((_750.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _730;
    float _939 = (((_913 - _926) + (cbMtdParam._m0[21u].x * _926)) * _794) + _926;
    float _940 = (((_914 - _927) + (cbMtdParam._m0[21u].x * _927)) * _794) + _927;
    float _941 = (_794 * (sqrt(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) - _736)) + _736;
    float _943 = cbMtdParam._m0[22u].x + _750.w;
    float _946 = fma(_941, _251 * NORMAL.x, fma(_940, _258 * TANGENT.x, (_244 * _236) * _939));
    float _949 = fma(_941, _251 * NORMAL.y, fma(_940, _258 * TANGENT.y, (_244 * _237) * _939));
    float _952 = fma(_941, _251 * NORMAL.z, fma(_940, _258 * TANGENT.z, (_244 * _238) * _939));
    float _956 = inversesqrt(dot(vec3(_946, _949, _952), vec3(_946, _949, _952)));
    float _957 = _956 * _946;
    float _958 = _956 * _949;
    float _959 = _956 * _952;
    float _4274 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _960 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4296 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4307 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4318 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4329 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _965 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _979 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1029 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1019);
    float _1030 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1019);
    float _1031 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1019);
    float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
    float _1036 = _1029 * _1035;
    float _1037 = _1030 * _1035;
    float _1038 = _1031 * _1035;
    vec4 _1043 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1045 = _1043.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1217 = sqrt(((_1029 * _1029) + (_1030 * _1030)) + (_1031 * _1031));
        float _1223 = (cbMatDynParam._m0[5u].x * _1217) + cbMatDynParam._m0[5u].y;
        float _4340 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1228 = (cbMatDynParam._m0[5u].z * _1217) + cbMatDynParam._m0[5u].w;
        float _4351 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) - _1224)) + _1224) < ((_1045 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1056 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1057 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1075 = fma(_959, cbSceneParam._m0[5u].z, fma(_958, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _957));
    float _1078 = fma(_959, cbSceneParam._m0[6u].z, fma(_958, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _957));
    float _1081 = fma(_959, cbSceneParam._m0[7u].z, fma(_958, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _957));
    uint _1094 = _264 + 9u;
    uint _1095 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4362 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _4384 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _1107 = 1.0 - _965;
    float _1108 = _1104 * _1107;
    float _1109 = _1105 * _1107;
    float _1110 = _1106 * _1107;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _965;
    float _1116 = (_1105 + (-0.039999999105930328369140625)) * _965;
    float _1117 = (_1106 + (-0.039999999105930328369140625)) * _965;
    float _1118 = _1115 + 0.039999999105930328369140625;
    float _1120 = _1116 + 0.039999999105930328369140625;
    float _1121 = _1117 + 0.039999999105930328369140625;
    vec4 _1130 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1056, cbSceneParam._m0[86u].y * _1057));
    float _1134 = ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * TEXCOORD_5.w) * _1130.x;
    float _1135 = dot(vec3(_957, _958, _959), vec3(_1036, _1037, _1038));
    float _1138 = _1135 * 2.0;
    float _1142 = (_1138 * _957) - _1036;
    float _1143 = (_1138 * _958) - _1037;
    float _1144 = (_1138 * _959) - _1038;
    float _1148 = abs(dot(vec3(_1036, _1037, _1038), vec3(_957, _958, _959)));
    float _4395 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _1150 = sqrt(_960);
    float _1163 = exp2((_1150 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1150 * 3.0));
    float _1169 = (1.0 - _1163) * ((_1150 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1170 = _1163 * _1150;
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1206 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1535;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1260 = fma(_1206, cbModelParam._m0[26u].z, fma(_1202, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1198));
        float _1264 = fma(_1206, cbModelParam._m0[27u].z, fma(_1202, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1198));
        float _1268 = fma(_1206, cbModelParam._m0[28u].z, fma(_1202, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1198));
        float _1293 = _1198 + _957;
        float _1294 = _1202 + _958;
        float _1295 = _1206 + _959;
        float _1305 = fma(_1295, cbModelParam._m0[26u].z, fma(_1294, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1293)) - _1260;
        float _1306 = fma(_1295, cbModelParam._m0[27u].z, fma(_1294, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1293)) - _1264;
        float _1307 = fma(_1295, cbModelParam._m0[28u].z, fma(_1294, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1293)) - _1268;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1260 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1264 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[34u].z) + ((((((_1268 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1363 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1329.x + (-0.5));
        float _1365 = _1363 * (_1329.y + (-0.5));
        float _1366 = _1363 * (_1329.z + (-0.5));
        float _1373 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1336.x + (-0.5));
        float _1375 = _1373 * (_1336.y + (-0.5));
        float _1376 = _1373 * (_1336.z + (-0.5));
        float _1383 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1343.x + (-0.5));
        float _1385 = _1383 * (_1343.y + (-0.5));
        float _1386 = _1383 * (_1343.z + (-0.5));
        float _1393 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1350.x + (-0.5));
        float _1395 = _1393 * (_1350.y + (-0.5));
        float _1396 = _1393 * (_1350.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1417 = (dot(vec3(_957, _958, _959), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1427 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4443 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1429 + 1.0))) + _1434) * _1397;
        float _1444 = _1365 * 0.5;
        float _1445 = _1375 * 0.5;
        float _1446 = _1385 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_957, _958, _959), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4454 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4465 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4476 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_1471 + 1.0))) + _1476) * _1398;
        float _1486 = _1366 * 0.5;
        float _1487 = _1376 * 0.5;
        float _1488 = _1386 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_957, _958, _959), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4487 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4498 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4509 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_1513 + 1.0))) + _1518) * _1399;
        _1535 = _1366;
        _1537 = _1365;
        _1538 = _1364;
        _1539 = _1376;
        _1540 = _1375;
        _1541 = _1374;
        _1542 = _1386;
        _1543 = _1385;
        _1544 = _1384;
        _1545 = _1399;
        _1546 = _1398;
        _1547 = _1397;
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1549 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1550 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
    }
    else
    {
        _1535 = _1536;
        _1537 = _1536;
        _1538 = _1536;
        _1539 = _1536;
        _1540 = _1536;
        _1541 = _1536;
        _1542 = _1536;
        _1543 = _1536;
        _1544 = _1536;
        _1545 = _1536;
        _1546 = _1536;
        _1547 = _1536;
        _1548 = 0.0;
        _1549 = 0.0;
        _1550 = 0.0;
    }
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1576 = fma(_1206, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198));
        float _1580 = fma(_1206, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198));
        float _1584 = fma(_1206, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198));
        float _1607 = _1198 + _957;
        float _1608 = _1202 + _958;
        float _1609 = _1206 + _959;
        float _1619 = fma(_1609, cbModelParam._m0[30u].z, fma(_1608, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1607)) - _1576;
        float _1620 = fma(_1609, cbModelParam._m0[31u].z, fma(_1608, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1607)) - _1580;
        float _1621 = fma(_1609, cbModelParam._m0[32u].z, fma(_1608, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1607)) - _1584;
        float _1625 = inversesqrt(dot(vec3(_1619, _1620, _1621), vec3(_1619, _1620, _1621)));
        float _1638 = ((_1625 * _1619) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1576 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1639 = ((_1625 * _1620) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1580 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1640 = ((_1625 * _1621) / cbModelParam._m0[35u].z) + ((((((_1584 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1638, _1639, _1640), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1638, _1639, _1640), 0.0);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1638, _1639, _1640), 0.0);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1638, _1639, _1640), 0.0);
        float _1675 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1676 = _1675 * (_1642.x + (-0.5));
        float _1677 = _1675 * (_1642.y + (-0.5));
        float _1678 = _1675 * (_1642.z + (-0.5));
        float _1685 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1686 = _1685 * (_1649.x + (-0.5));
        float _1687 = _1685 * (_1649.y + (-0.5));
        float _1688 = _1685 * (_1649.z + (-0.5));
        float _1695 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1656.x + (-0.5));
        float _1697 = _1695 * (_1656.y + (-0.5));
        float _1698 = _1695 * (_1656.z + (-0.5));
        float _1705 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1706 = _1705 * (_1663.x + (-0.5));
        float _1707 = _1705 * (_1663.y + (-0.5));
        float _1708 = _1705 * (_1663.z + (-0.5));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1711 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1712 = _1676 * 0.5;
        float _1713 = _1686 * 0.5;
        float _1714 = _1696 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_957, _958, _959), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4550 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4561 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4572 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_1739 + 1.0))) + _1744) * _1709;
        float _1754 = _1677 * 0.5;
        float _1755 = _1687 * 0.5;
        float _1756 = _1697 * 0.5;
        float _1757 = dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756));
        float _1762 = (_1757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1757);
        float _1770 = (dot(vec3(_957, _958, _959), vec3(_1762 * _1754, _1762 * _1755, _1762 * _1756)) + 1.0) * 0.5;
        float _4583 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1779 = sqrt(((_1755 * _1755) + (_1754 * _1754)) + (_1756 * _1756)) / (_1710 + 9.9999997473787516355514526367188e-06);
        float _4594 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1781 = _1780 * 2.0;
        float _1785 = (1.0 - _1780) / (_1780 + 1.0);
        float _4605 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1795 = ((((1.0 - _1786) * (_1781 + 2.0)) * exp2(log2(isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_1781 + 1.0))) + _1786) * _1710;
        float _1796 = _1678 * 0.5;
        float _1797 = _1688 * 0.5;
        float _1798 = _1698 * 0.5;
        float _1799 = dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798));
        float _1804 = (_1799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1799);
        float _1812 = (dot(vec3(_957, _958, _959), vec3(_1804 * _1796, _1804 * _1797, _1804 * _1798)) + 1.0) * 0.5;
        float _4616 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1821 = sqrt(((_1797 * _1797) + (_1796 * _1796)) + (_1798 * _1798)) / (_1711 + 9.9999997473787516355514526367188e-06);
        float _4627 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1823 = _1822 * 2.0;
        float _1827 = (1.0 - _1822) / (_1822 + 1.0);
        float _4638 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _1837 = ((((1.0 - _1828) * (_1823 + 2.0)) * exp2(log2(isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_1823 + 1.0))) + _1828) * _1711;
        _1845 = _1678;
        _1846 = _1677;
        _1847 = _1676;
        _1848 = _1688;
        _1849 = _1687;
        _1850 = _1686;
        _1851 = _1698;
        _1852 = _1697;
        _1853 = _1696;
        _1854 = _1711;
        _1855 = _1710;
        _1856 = _1709;
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
        _1858 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)));
        _1859 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)));
    }
    else
    {
        _1845 = _1536;
        _1846 = _1536;
        _1847 = _1536;
        _1848 = _1536;
        _1849 = _1536;
        _1850 = _1536;
        _1851 = _1536;
        _1852 = _1536;
        _1853 = _1536;
        _1854 = _1536;
        _1855 = _1536;
        _1856 = _1536;
        _1857 = 0.0;
        _1858 = 0.0;
        _1859 = 0.0;
    }
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1548)) + _1548;
    float _1870 = (cbModelParam._m0[1u].x * (_1858 - _1549)) + _1549;
    float _1871 = (cbModelParam._m0[1u].x * (_1859 - _1550)) + _1550;
    float _1892 = fma(_1871, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1871, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1871, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1869));
    float _1913 = _1142 * 0.5;
    float _1914 = _1143 * 0.5;
    float _1915 = _1144 * 0.5;
    float _1916 = dot(vec4(_1913, _1914, _1915, 1.0), vec4(_1847, _1850, _1853, _1856));
    float _1919 = dot(vec4(_1913, _1914, _1915, 1.0), vec4(_1846, _1849, _1852, _1855));
    float _1922 = dot(vec4(_1913, _1914, _1915, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1956;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1929 = dot(vec4(_1913, _1914, _1915, 1.0), vec4(_1535, _1539, _1542, _1545));
        float _1933 = dot(vec4(_1913, _1914, _1915, 1.0), vec4(_1537, _1540, _1543, _1546));
        float _1937 = dot(vec4(_1913, _1914, _1915, 1.0), vec4(_1538, _1541, _1544, _1547));
        float _1944 = dot(vec4(cbModelParam._m0[39u]), vec4(_1913, _1914, _1915, 1.0));
        _1956 = dot(vec3(isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1944) ? 0.0 : (isnan(0.0) ? _1944 : max(0.0, _1944))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1956 = 1.0;
    }
    float _1967;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1958 = dot(vec4(cbModelParam._m0[40u]), vec4(_1913, _1914, _1915, 1.0));
        _1967 = dot(vec3(isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1958) ? 0.0 : (isnan(0.0) ? _1958 : max(0.0, _1958))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1967 = 1.0;
    }
    float _1971 = (_1967 * cbModelParam._m0[1u].x) + (_1956 * (1.0 - cbModelParam._m0[1u].x));
    float _1981 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _960);
    float _1982 = isnan(_1981) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1981 : min(cbModelParam._m0[25u].z, _1981));
    float _2062;
    float _2064;
    float _2066;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2029 = fma(_1206, cbModelParam._m0[13u].z, fma(_1202, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1198)) + cbModelParam._m0[13u].w;
        float _2033 = fma(_1206, cbModelParam._m0[14u].z, fma(_1202, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1198)) + cbModelParam._m0[14u].w;
        float _2037 = fma(_1206, cbModelParam._m0[15u].z, fma(_1202, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1198)) + cbModelParam._m0[15u].w;
        float _2040 = fma(_1144, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1142));
        float _2043 = fma(_1144, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1142));
        float _2046 = fma(_1144, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1142));
        float _2074;
        if (_2040 > 0.0)
        {
            _2074 = abs((1.0 - _2029) / _2040);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2029 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2074 = frontier_phi_17_15_ladder;
        }
        float _2245;
        if (_2043 > 0.0)
        {
            _2245 = abs((1.0 - _2033) / _2043);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2033 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2245 = frontier_phi_26_22_ladder;
        }
        float _2540;
        if (_2046 > 0.0)
        {
            _2540 = abs((1.0 - _2037) / _2046);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2046 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2037 + 1.0) / _2046);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2540 = frontier_phi_38_33_ladder;
        }
        float _2542 = isnan(_2245) ? _2074 : (isnan(_2074) ? _2245 : min(_2074, _2245));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _2040) + _2029;
        float _2548 = (_2543 * _2043) + _2033;
        float _2549 = (_2543 * _2046) + _2037;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2550;
        float _2554 = _2550 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 > _2554) || ((_2548 < _2552) || ((_2547 < _2552) || (_2547 > _2554))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2549, cbModelParam._m0[9u].z, fma(_2548, cbModelParam._m0[9u].y, _2547 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2549, cbModelParam._m0[10u].z, fma(_2548, cbModelParam._m0[10u].y, _2547 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2549, cbModelParam._m0[11u].z, fma(_2548, cbModelParam._m0[11u].y, _2547 * cbModelParam._m0[11u].x))), _1982);
            frontier_phi_16_38_ladder = _2694.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2694.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2694.x * cbModelParam._m0[1u].y;
        }
        _2062 = frontier_phi_16_38_ladder_2;
        _2064 = frontier_phi_16_38_ladder_1;
        _2066 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2050 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1142, _1143, _1144), _1982);
        _2062 = _2050.x * cbModelParam._m0[1u].y;
        _2064 = _2050.y * cbModelParam._m0[1u].y;
        _2066 = _2050.z * cbModelParam._m0[1u].y;
    }
    float _2070 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _960);
    float _2071 = isnan(_2070) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2070 : min(cbModelParam._m0[25u].w, _2070));
    float _2160;
    float _2162;
    float _2164;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2124 = fma(_1206, cbModelParam._m0[21u].z, fma(_1202, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1198)) + cbModelParam._m0[21u].w;
        float _2128 = fma(_1206, cbModelParam._m0[22u].z, fma(_1202, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1198)) + cbModelParam._m0[22u].w;
        float _2132 = fma(_1206, cbModelParam._m0[23u].z, fma(_1202, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1198)) + cbModelParam._m0[23u].w;
        float _2135 = fma(_1144, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1142));
        float _2138 = fma(_1144, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1142));
        float _2141 = fma(_1144, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1142));
        float _2250;
        if (_2135 > 0.0)
        {
            _2250 = abs((1.0 - _2124) / _2135);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2124 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2250 = frontier_phi_28_24_ladder;
        }
        float _2567;
        if (_2138 > 0.0)
        {
            _2567 = abs((1.0 - _2128) / _2138);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2128 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2567 = frontier_phi_40_35_ladder;
        }
        float _2905;
        if (_2141 > 0.0)
        {
            _2905 = abs((1.0 - _2132) / _2141);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2132 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2905 = frontier_phi_50_47_ladder;
        }
        float _2907 = isnan(_2567) ? _2250 : (isnan(_2250) ? _2567 : min(_2250, _2567));
        float _2908 = isnan(_2905) ? _2907 : (isnan(_2907) ? _2905 : min(_2907, _2905));
        float _2912 = (_2908 * _2135) + _2124;
        float _2913 = (_2908 * _2138) + _2128;
        float _2914 = (_2908 * _2141) + _2132;
        float _2915 = _2908 * 9.9999997473787516355514526367188e-05;
        float _2916 = (-1.0) - _2915;
        float _2918 = _2915 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2914 > _2918) || ((_2914 < _2916) || ((_2913 > _2918) || ((_2913 < _2916) || ((_2912 < _2916) || (_2912 > _2918))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2914, cbModelParam._m0[17u].z, fma(_2913, cbModelParam._m0[17u].y, _2912 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2914, cbModelParam._m0[18u].z, fma(_2913, cbModelParam._m0[18u].y, _2912 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2914, cbModelParam._m0[19u].z, fma(_2913, cbModelParam._m0[19u].y, _2912 * cbModelParam._m0[19u].x))), _2071);
            frontier_phi_25_50_ladder = _3036.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3036.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3036.x * cbModelParam._m0[1u].z;
        }
        _2160 = frontier_phi_25_50_ladder_2;
        _2162 = frontier_phi_25_50_ladder_1;
        _2164 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2144 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1142, _1143, _1144), _2071);
        _2160 = _2144.x * cbModelParam._m0[1u].z;
        _2162 = _2144.y * cbModelParam._m0[1u].z;
        _2164 = _2144.z * cbModelParam._m0[1u].z;
    }
    float _2177 = (((_1169 * _1118) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2179 = (((_1169 * _1120) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2162 - _2064)) + _2064);
    float _2181 = (((_1169 * _1121) + _1170) * _1134) * ((cbModelParam._m0[1u].w * (_2164 - _2066)) + _2066);
    float _2184 = fma(_2181, cbSceneParam._m0[89u].z, fma(_2179, cbSceneParam._m0[89u].y, _2177 * cbSceneParam._m0[89u].x));
    float _2187 = fma(_2181, cbSceneParam._m0[90u].z, fma(_2179, cbSceneParam._m0[90u].y, _2177 * cbSceneParam._m0[90u].x));
    float _2190 = fma(_2181, cbSceneParam._m0[91u].z, fma(_2179, cbSceneParam._m0[91u].y, _2177 * cbSceneParam._m0[91u].x));
    float _2224 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2228 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2232 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2236 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2237 = _2224 / _2236;
    float _2238 = _2228 / _2236;
    float _2239 = _2232 / _2236;
    float _2386;
    float _2387;
    float _2388;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2266 = ((uint(_2239 > cbSceneParam._m0[59u].y) + uint(_2239 > cbSceneParam._m0[59u].x)) + uint(_2239 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2267 = _2266 + 43u;
        uint _2275 = _2266 + 44u;
        uint _2283 = _2266 + 45u;
        uint _2291 = _2266 + 46u;
        float _2302 = fma(_2236, cbSceneParam._m0[_2267].w, fma(_2232, cbSceneParam._m0[_2267].z, fma(_2228, cbSceneParam._m0[_2267].y, _2224 * cbSceneParam._m0[_2267].x)));
        float _2306 = fma(_2236, cbSceneParam._m0[_2275].w, fma(_2232, cbSceneParam._m0[_2275].z, fma(_2228, cbSceneParam._m0[_2275].y, _2224 * cbSceneParam._m0[_2275].x)));
        float _2314 = fma(_2236, cbSceneParam._m0[_2291].w, fma(_2232, cbSceneParam._m0[_2291].z, fma(_2228, cbSceneParam._m0[_2291].y, _2224 * cbSceneParam._m0[_2291].x)));
        float _2319 = cbSceneParam._m0[33u].z * _2314;
        float _2321 = cbSceneParam._m0[33u].w * _2314;
        float _2324 = fma(_2236, cbSceneParam._m0[_2283].w, fma(_2232, cbSceneParam._m0[_2283].z, fma(_2228, cbSceneParam._m0[_2283].y, _2224 * cbSceneParam._m0[_2283].x))) / _2314;
        float _2372 = (cbSceneParam._m0[33u].x - sqrt(((_2238 * _2238) + (_2237 * _2237)) + (_2239 * _2239))) * cbSceneParam._m0[33u].y;
        float _4764 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2379 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2319 + _2302) / _2314, (_2321 + _2306) / _2314), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2321 + _2302) / _2314, (_2306 - _2319) / _2314), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2302 - _2319) / _2314, (_2306 - _2321) / _2314), _2324), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2302 - _2321) / _2314, (_2319 + _2306) / _2314), _2324), 0.0)).x), vec4(0.25)));
        _2386 = 1.0 - (_2379 * cbSceneParam._m0[34u].x);
        _2387 = 1.0 - (_2379 * cbSceneParam._m0[34u].y);
        _2388 = 1.0 - (_2379 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2386 = 1.0;
        _2387 = 1.0;
        _2388 = 1.0;
    }
    float _2452;
    float _2454;
    float _2456;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2440 = fma(_2236, cbSceneParam._m0[63u].w, fma(_2232, cbSceneParam._m0[63u].z, fma(_2228, cbSceneParam._m0[63u].y, _2224 * cbSceneParam._m0[63u].x)));
        float _2441 = fma(_2236, cbSceneParam._m0[60u].w, fma(_2232, cbSceneParam._m0[60u].z, fma(_2228, cbSceneParam._m0[60u].y, _2224 * cbSceneParam._m0[60u].x))) / _2440;
        float _2442 = fma(_2236, cbSceneParam._m0[61u].w, fma(_2232, cbSceneParam._m0[61u].z, fma(_2228, cbSceneParam._m0[61u].y, _2224 * cbSceneParam._m0[61u].x))) / _2440;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2441 >= cbSceneParam._m0[64u].x) && (_2442 >= cbSceneParam._m0[64u].y)) && (_2441 <= cbSceneParam._m0[64u].z)) && (_2442 <= cbSceneParam._m0[64u].w))
        {
            float _2580 = fma(_2236, cbSceneParam._m0[62u].w, fma(_2232, cbSceneParam._m0[62u].z, fma(_2228, cbSceneParam._m0[62u].y, _2224 * cbSceneParam._m0[62u].x))) / _2440;
            float _2584 = isnan(cbSceneParam._m0[41u].w) ? _2580 : (isnan(_2580) ? cbSceneParam._m0[41u].w : max(_2580, cbSceneParam._m0[41u].w));
            float _2627 = (cbSceneParam._m0[33u].x - sqrt(((_2238 * _2238) + (_2237 * _2237)) + (_2239 * _2239))) * cbSceneParam._m0[33u].y;
            float _4780 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
            float _2634 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2441, cbSceneParam._m0[33u].w + _2442), _2584), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2441, _2442 - cbSceneParam._m0[33u].z), _2584), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2441 - cbSceneParam._m0[33u].z, _2442 - cbSceneParam._m0[33u].w), _2584), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2441 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2442), _2584), 0.0)).x), vec4(0.25)));
            float _2638 = 1.0 - (_2634 * cbSceneParam._m0[34u].x);
            float _2639 = 1.0 - (_2634 * cbSceneParam._m0[34u].y);
            float _2640 = 1.0 - (_2634 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2640) ? _2388 : (isnan(_2388) ? _2640 : min(_2388, _2640));
            frontier_phi_37_36_ladder_1 = isnan(_2639) ? _2387 : (isnan(_2387) ? _2639 : min(_2387, _2639));
            frontier_phi_37_36_ladder_2 = isnan(_2638) ? _2386 : (isnan(_2386) ? _2638 : min(_2386, _2638));
        }
        else
        {
            frontier_phi_37_36_ladder = _2388;
            frontier_phi_37_36_ladder_1 = _2387;
            frontier_phi_37_36_ladder_2 = _2386;
        }
        _2452 = frontier_phi_37_36_ladder_2;
        _2454 = frontier_phi_37_36_ladder_1;
        _2456 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2452 = _2386;
        _2454 = _2387;
        _2456 = _2388;
    }
    uvec4 _2461 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _2463 = _2461.x * 14u;
    uint _2464 = _2463 + 13u;
    float _2471 = _1134 + (-1.0);
    float _2476 = (cbLight._m0[_2464].x * _2471) + 1.0;
    float _2477 = (cbLight._m0[_2464].y * _2471) + 1.0;
    float _2478 = (cbLight._m0[_2464].z * _2471) + 1.0;
    float _2479 = (cbLight._m0[_2464].w * _2471) + 1.0;
    uint _2480 = _2463 + 5u;
    float _2486 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
    uint _2490 = _2463 + 4u;
    float _2499 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
    uint _2503 = _2463 | 1u;
    float _2514 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_957, _958, _959));
    float _2517 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_957, _958, _959));
    float _4816 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _4827 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2522 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * 0.3183098733425140380859375;
    float _2524 = (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * 0.3183098733425140380859375;
    float _2531 = ((cbLight._m0[_2480].x * _2486) * _2524) + (((cbLight._m0[_2490].x * _2452) * _2499) * _2522);
    float _2532 = ((_2486 * cbLight._m0[_2480].y) * _2524) + (((cbLight._m0[_2490].y * _2454) * _2499) * _2522);
    float _2533 = ((_2486 * cbLight._m0[_2480].z) * _2524) + (((cbLight._m0[_2490].z * _2456) * _2499) * _2522);
    uvec4 _2537 = floatBitsToUint(cbLight._m0[_2463 + 12u]);
    bool _2539 = _2537.x == 0u;
    float _2641;
    float _2643;
    float _2645;
    if (_2539)
    {
        _2641 = _2531;
        _2643 = _2532;
        _2645 = _2533;
    }
    else
    {
        uint _2649 = _2463 + 6u;
        float _2665 = (dot(vec3(cbLight._m0[_2463 + 2u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2666 = _2665 * _2665;
        float _4838 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2667 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2668 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
        _2641 = (((cbLight._m0[_2649].x * 0.3183098733425140380859375) * _2667) * _2668) + _2531;
        _2643 = (((cbLight._m0[_2649].y * 0.3183098733425140380859375) * _2667) * _2668) + _2532;
        _2645 = (((cbLight._m0[_2649].z * 0.3183098733425140380859375) * _2667) * _2668) + _2533;
    }
    bool _2648 = _2537.y == 0u;
    float _2703;
    float _2705;
    float _2707;
    if (_2648)
    {
        _2703 = _2641;
        _2705 = _2643;
        _2707 = _2645;
    }
    else
    {
        uint _2876 = _2463 + 7u;
        float _2892 = (dot(vec3(cbLight._m0[_2463 + 3u].xyz), vec3(_957, _958, _959)) * 0.5) + 0.5;
        float _2893 = _2892 * _2892;
        float _4854 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2894 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2895 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _2703 = (((cbLight._m0[_2876].x * 0.3183098733425140380859375) * _2894) * _2895) + _2641;
        _2705 = (((cbLight._m0[_2876].y * 0.3183098733425140380859375) * _2894) * _2895) + _2643;
        _2707 = (((cbLight._m0[_2876].z * 0.3183098733425140380859375) * _2894) * _2895) + _2645;
    }
    uint _2710 = _2463 + 8u;
    float _2723 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _960) * 0.949999988079071044921875);
    float _2724 = _2723 * _2723;
    float _2725 = cbLight._m0[_2463].x + _1036;
    float _2726 = cbLight._m0[_2463].y + _1037;
    float _2727 = cbLight._m0[_2463].z + _1038;
    float _2731 = inversesqrt(dot(vec3(_2725, _2726, _2727), vec3(_2725, _2726, _2727)));
    float _2732 = _2731 * _2725;
    float _2733 = _2731 * _2726;
    float _2734 = _2731 * _2727;
    float _2735 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2463].xyz));
    float _4870 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _4881 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _2739 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
    float _2740 = dot(vec3(_957, _958, _959), vec3(_2732, _2733, _2734));
    float _4892 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
    float _2743 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
    float _2744 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2732, _2733, _2734));
    float _4903 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
    float _2748 = _2724 * _2724;
    float _2752 = ((_2743 * _2743) * (_2748 + (-1.0))) + 1.0;
    float _2760 = exp2(log2(1.0 - (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) * 5.0);
    float _2761 = 0.959999978542327880859375 - _1115;
    float _2763 = 0.959999978542327880859375 - _1116;
    float _2764 = 0.959999978542327880859375 - _1117;
    float _2771 = 1.0 - _2724;
    float _2782 = (0.5 / (((_2739 * ((_2738 * _2771) + _2724)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _2771) + _2724) * _2738))) * _2738;
    float _4914 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
    float _2784 = (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2748 / ((_2752 * _2752) * 3.141590118408203125));
    uint _2798 = _2463 + 9u;
    float _2809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _960) * 0.949999988079071044921875);
    float _2810 = _2809 * _2809;
    float _2811 = cbLight._m0[_2503].x + _1036;
    float _2812 = cbLight._m0[_2503].y + _1037;
    float _2813 = cbLight._m0[_2503].z + _1038;
    float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
    float _2818 = _2817 * _2811;
    float _2819 = _2817 * _2812;
    float _2820 = _2817 * _2813;
    float _2821 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2503].xyz));
    float _4925 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2824 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
    float _2825 = dot(vec3(_957, _958, _959), vec3(_2818, _2819, _2820));
    float _4936 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2828 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
    float _2829 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2818, _2819, _2820));
    float _4947 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2833 = _2810 * _2810;
    float _2837 = ((_2828 * _2828) * (_2833 + (-1.0))) + 1.0;
    float _2844 = exp2(log2(1.0 - (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) * 5.0);
    float _2851 = 1.0 - _2810;
    float _2861 = (0.5 / (((_2739 * ((_2824 * _2851) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _2851) + _2810) * _2824))) * _2824;
    float _4958 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2863 = (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2833 / ((_2837 * _2837) * 3.141590118408203125));
    float _2873 = (((((_2844 * _2761) + _1118) * cbLight._m0[_2798].x) * _2863) * _2486) + ((((cbLight._m0[_2710].x * _2452) * ((_2760 * _2761) + _1118)) * _2784) * _2499);
    float _2874 = (((((_2844 * _2763) + _1120) * cbLight._m0[_2798].y) * _2863) * _2486) + ((((cbLight._m0[_2710].y * _2454) * ((_2760 * _2763) + _1120)) * _2784) * _2499);
    float _2875 = (((((_2844 * _2764) + _1121) * cbLight._m0[_2798].z) * _2863) * _2486) + ((((cbLight._m0[_2710].z * _2456) * ((_2760 * _2764) + _1121)) * _2784) * _2499);
    float _2931;
    float _2933;
    float _2935;
    if (_2539)
    {
        _2931 = _2873;
        _2933 = _2874;
        _2935 = _2875;
    }
    else
    {
        uint _2937 = _2463 + 2u;
        uint _2941 = _2463 + 10u;
        float _2955 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2937].w)) * _960) * 0.949999988079071044921875);
        float _2956 = _2955 * _2955;
        float _2957 = cbLight._m0[_2937].x + _1036;
        float _2958 = cbLight._m0[_2937].y + _1037;
        float _2959 = cbLight._m0[_2937].z + _1038;
        float _2963 = inversesqrt(dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959)));
        float _2964 = _2963 * _2957;
        float _2965 = _2963 * _2958;
        float _2966 = _2963 * _2959;
        float _2967 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_2937].xyz));
        float _4969 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2970 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
        float _2971 = dot(vec3(_957, _958, _959), vec3(_2964, _2965, _2966));
        float _4980 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2974 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
        float _2975 = dot(vec3(cbLight._m0[_2937].xyz), vec3(_2964, _2965, _2966));
        float _4991 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2979 = _2956 * _2956;
        float _2983 = ((_2974 * _2974) * (_2979 + (-1.0))) + 1.0;
        float _2990 = exp2(log2(1.0 - (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) * 5.0);
        float _2997 = 1.0 - _2956;
        float _3007 = (0.5 / (((_2739 * ((_2970 * _2997) + _2956)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _2997) + _2956) * _2970))) * _2970;
        float _5002 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3009 = (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_2979 / ((_2983 * _2983) * 3.141590118408203125));
        float _3010 = isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0));
        _2931 = (((((_2990 * _2761) + _1118) * cbLight._m0[_2941].x) * _3009) * _3010) + _2873;
        _2933 = (((((_2990 * _2763) + _1120) * cbLight._m0[_2941].y) * _3009) * _3010) + _2874;
        _2935 = (((((_2990 * _2764) + _1121) * cbLight._m0[_2941].z) * _3009) * _3010) + _2875;
    }
    float _3041;
    float _3043;
    float _3045;
    if (_2648)
    {
        _3041 = _2931;
        _3043 = _2933;
        _3045 = _2935;
    }
    else
    {
        uint _3052 = _2463 + 3u;
        uint _3056 = _2463 + 11u;
        float _3070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3052].w)) * _960) * 0.949999988079071044921875);
        float _3071 = _3070 * _3070;
        float _3072 = cbLight._m0[_3052].x + _1036;
        float _3073 = cbLight._m0[_3052].y + _1037;
        float _3074 = cbLight._m0[_3052].z + _1038;
        float _3078 = inversesqrt(dot(vec3(_3072, _3073, _3074), vec3(_3072, _3073, _3074)));
        float _3079 = _3078 * _3072;
        float _3080 = _3078 * _3073;
        float _3081 = _3078 * _3074;
        float _3082 = dot(vec3(_957, _958, _959), vec3(cbLight._m0[_3052].xyz));
        float _5018 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
        float _3085 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
        float _3086 = dot(vec3(_957, _958, _959), vec3(_3079, _3080, _3081));
        float _5029 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
        float _3089 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
        float _3090 = dot(vec3(cbLight._m0[_3052].xyz), vec3(_3079, _3080, _3081));
        float _5040 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
        float _3094 = _3071 * _3071;
        float _3098 = ((_3089 * _3089) * (_3094 + (-1.0))) + 1.0;
        float _3105 = exp2(log2(1.0 - (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0)))) * 5.0);
        float _3112 = 1.0 - _3071;
        float _3122 = (0.5 / (((_2739 * ((_3085 * _3112) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_2739 * _3112) + _3071) * _3085))) * _3085;
        float _5051 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
        float _3124 = (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_3094 / ((_3098 * _3098) * 3.141590118408203125));
        float _3125 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
        _3041 = (((((_3105 * _2761) + _1118) * cbLight._m0[_3056].x) * _3124) * _3125) + _2931;
        _3043 = (((((_3105 * _2763) + _1120) * cbLight._m0[_3056].y) * _3124) * _3125) + _2933;
        _3045 = (((((_3105 * _2764) + _1121) * cbLight._m0[_3056].z) * _3124) * _3125) + _2935;
    }
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    float _3201;
    if (_2461.y == 0u)
    {
        uvec4 _3146 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3147 = _3146.x;
        uint _3158 = uint((float(_3146.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1057) / _3147))) + floor(float(uint(cbSceneParam._m0[85u].x * _1056) / _3147)));
        float _3168 = (log2(_2239 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3169 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        uint _3172 = uint(isnan(14.0) ? _3169 : (isnan(_3169) ? 14.0 : min(_3169, 14.0)));
        uvec4 _3177 = texelFetch(g_lightClusterGridBuffer, int(((_3172 << 2u) + (_3158 << 6u)) >> 2u));
        uint _3178 = _3177.x;
        uint _3179 = _3146.z;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        if (((((1u << ((_3179 >> 4u) & 15u)) + 4294967295u) & _3178) == 0u) || ((_3179 & 240u) == 0u))
        {
            _3258 = 0.0;
            _3260 = 0.0;
            _3262 = 0.0;
            _3264 = 0.0;
            _3266 = 0.0;
            _3268 = 0.0;
        }
        else
        {
            float _3259;
            float _3261;
            float _3263;
            float _3265;
            float _3267;
            float _3269;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            float _3416 = 0.0;
            uint _3417 = 0u;
            uint _3426;
            bool _3427;
            for (;;)
            {
                _3426 = texelFetch(g_lightClassification, int((((_3172 << 5u) + (_3158 << 9u)) + (_3417 << 2u)) >> 2u)).x;
                _3427 = _3426 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3427)
                {
                    frontier_phi_71_pred = _3416;
                    frontier_phi_71_pred_1 = _3415;
                    frontier_phi_71_pred_2 = _3414;
                    frontier_phi_71_pred_3 = _3413;
                    frontier_phi_71_pred_4 = _3412;
                    frontier_phi_71_pred_5 = _3411;
                }
                else
                {
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    float _3561;
                    uint _3562;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3414;
                    _3560 = _3415;
                    _3561 = _3416;
                    _3562 = _3426;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    float _3488;
                    for (;;)
                    {
                        uint _3566 = uint(findLSB(_3562)) + (_3417 << 5u);
                        uint _3563 = (_3562 + 4294967295u) & _3562;
                        uint _3568 = _3566 * 48u;
                        vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3568)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3568 + 3u)).x));
                        uint _3588 = (_3566 * 48u) + 4u;
                        vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3588)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3588 + 3u)).x));
                        uint _3607 = (_3566 * 48u) + 8u;
                        vec3 _3618 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3607)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3607 + 2u)).x));
                        float _3622 = _3582.x - _2237;
                        float _3623 = _3582.y - _2238;
                        float _3624 = _3582.z - _2239;
                        float _3625 = dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624));
                        float _3628 = inversesqrt(_3625);
                        float _3629 = _3628 * _3622;
                        float _3630 = _3628 * _3623;
                        float _3631 = _3628 * _3624;
                        float _3632 = dot(vec3(_1075, _1078, _1081), vec3(_3629, _3630, _3631));
                        float _3637 = 1.0 - (_3625 * _3582.w);
                        float _5077 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3638 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                        float _3639 = sqrt(_3625) * _3601.w;
                        float _3642 = 1.39999997615814208984375 / (_3639 + 1.39999997615814208984375);
                        float _3643 = _3642 * _3642;
                        float _3646 = ((1.0 - _3643) * _3632) + _3643;
                        float _3649 = _3639 * _3639;
                        float _3653 = ((isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0))) * _3638) / ((_3649 * 0.699999988079071044921875) + 1.0);
                        float _3657 = (-0.0) - _2237;
                        float _3658 = (-0.0) - _2238;
                        float _3659 = (-0.0) - _2239;
                        float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                        float _3664 = _3663 * _3657;
                        float _3665 = _3663 * _3658;
                        float _3666 = _3663 * _3659;
                        float _3673 = exp2(log2(1.0 / ((_3649 * 3.5) + 5.0)) * 0.25);
                        float _3674 = 1.0 - _1150;
                        float _3681 = sqrt(1.0 - ((1.0 - (_3674 * _3674)) * (1.0 - (_3673 * _3673))));
                        float _3682 = _3681 * _3681;
                        float _3683 = _3682 * _3682;
                        float _3684 = _3664 + _3629;
                        float _3685 = _3665 + _3630;
                        float _3686 = _3666 + _3631;
                        float _3690 = inversesqrt(dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686)));
                        float _3694 = dot(vec3(_1075, _1078, _1081), vec3(_3664, _3665, _3666));
                        float _5093 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3697 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3698 = dot(vec3(_1075, _1078, _1081), vec3(_3690 * _3684, _3690 * _3685, _3690 * _3686));
                        float _5104 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3701 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                        float _3705 = ((_3701 * _3701) * (_3683 + (-1.0))) + 1.0;
                        float _3706 = _3642 * _3682;
                        float _3707 = _3706 * _3706;
                        float _3710 = ((1.0 - _3707) * _3632) + _3707;
                        float _5115 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                        float _3711 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                        float _3712 = 1.0 - _3682;
                        float _3722 = (0.5 / (((_3711 * ((_3697 * _3712) + _3682)) + 9.9999999392252902907785028219223e-09) + (((_3711 * _3712) + _3682) * _3697))) * _3711;
                        float _5126 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                        float _3733 = (((_3683 * 3.1415927410125732421875) * (isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0)))) / ((_3705 * _3705) * ((_3649 * 2.1991131305694580078125) + 3.141590118408203125))) * _3638;
                        _3486 = (_3653 * _3601.x) + _3559;
                        _3487 = (_3653 * _3601.y) + _3560;
                        _3488 = (_3653 * _3601.z) + _3561;
                        _3483 = (_3733 * _3618.x) + _3556;
                        _3484 = (_3733 * _3618.y) + _3557;
                        _3485 = (_3733 * _3618.z) + _3558;
                        if (_3563 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3486;
                            _3560 = _3487;
                            _3561 = _3488;
                            _3562 = _3563;
                        }
                    }
                    frontier_phi_71_pred = _3488;
                    frontier_phi_71_pred_1 = _3487;
                    frontier_phi_71_pred_2 = _3486;
                    frontier_phi_71_pred_3 = _3485;
                    frontier_phi_71_pred_4 = _3484;
                    frontier_phi_71_pred_5 = _3483;
                }
                _3269 = frontier_phi_71_pred;
                _3267 = frontier_phi_71_pred_1;
                _3265 = frontier_phi_71_pred_2;
                _3263 = frontier_phi_71_pred_3;
                _3261 = frontier_phi_71_pred_4;
                _3259 = frontier_phi_71_pred_5;
                uint _3418 = _3417 + 1u;
                if (_3418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3411 = _3259;
                    _3412 = _3261;
                    _3413 = _3263;
                    _3414 = _3265;
                    _3415 = _3267;
                    _3416 = _3269;
                    _3417 = _3418;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3258 = _3259;
            _3260 = _3261;
            _3262 = _3263;
            _3264 = _3265;
            _3266 = _3267;
            _3268 = _3269;
        }
        uvec4 _3272 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3273 = _3272.z;
        uint _3275 = (_3273 >> 8u) & 15u;
        float _3379;
        float _3381;
        float _3383;
        float _3385;
        float _3387;
        float _3389;
        if (((4294967295u << _3275) & _3178) == 0u)
        {
            _3379 = _3258;
            _3381 = _3260;
            _3383 = _3262;
            _3385 = _3264;
            _3387 = _3266;
            _3389 = _3268;
        }
        else
        {
            float _3404 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
            float _3405 = _3404 * _2237;
            float _3406 = _3404 * _2238;
            float _3407 = _3404 * _2239;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3275 < ((_3273 >> 12u) & 15u))
            {
                float _3380;
                float _3382;
                float _3384;
                float _3386;
                float _3388;
                float _3390;
                float _3539 = _3258;
                float _3540 = _3260;
                float _3541 = _3262;
                float _3542 = _3264;
                float _3543 = _3266;
                float _3544 = _3268;
                uint _3545 = _3275;
                uint _3554;
                bool _3555;
                for (;;)
                {
                    _3554 = texelFetch(g_lightClassification, int((((_3172 << 5u) + (_3158 << 9u)) + (_3545 << 2u)) >> 2u)).x;
                    _3555 = _3554 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3555)
                    {
                        frontier_phi_82_pred = _3544;
                        frontier_phi_82_pred_1 = _3543;
                        frontier_phi_82_pred_2 = _3542;
                        frontier_phi_82_pred_3 = _3541;
                        frontier_phi_82_pred_4 = _3540;
                        frontier_phi_82_pred_5 = _3539;
                    }
                    else
                    {
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _4043;
                        float _4044;
                        float _4045;
                        float _3760 = _3539;
                        float _3761 = _3540;
                        float _3762 = _3541;
                        float _3763 = _3542;
                        float _3764 = _3543;
                        float _3765 = _3544;
                        uint _3766 = _3554;
                        uint _3767;
                        vec4 _3792;
                        float _3793;
                        vec4 _3808;
                        vec3 _3820;
                        vec4 _3835;
                        vec4 _3850;
                        float _3896;
                        bool _3897;
                        for (;;)
                        {
                            uint _3777 = ((_3545 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3766));
                            _3767 = (_3766 + 4294967295u) & _3766;
                            uint _3779 = _3777 * 40u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            _3793 = _3792.w;
                            uint _3795 = (_3777 * 40u) + 4u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3777 * 40u) + 8u;
                            _3820 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x));
                            uint _3822 = (_3777 * 40u) + 16u;
                            _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            uint _3837 = (_3777 * 40u) + 20u;
                            _3850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 3u)).x));
                            uint _3852 = (_3777 * 40u) + 24u;
                            vec4 _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            uint _3871 = (_3777 * 40u) + 28u;
                            vec4 _3884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 3u)).x));
                            _3896 = fma(_2239, _3884.z, fma(_2238, _3884.y, _3884.x * _2237)) + _3884.w;
                            _3897 = !((fma(_2239, _3865.z, fma(_2238, _3865.y, _3865.x * _2237)) + _3865.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3897)
                            {
                                float _3924 = _3792.x - _2237;
                                float _3925 = _3792.y - _2238;
                                float _3926 = _3792.z - _2239;
                                float _3927 = dot(vec3(_3924, _3925, _3926), vec3(_3924, _3925, _3926));
                                float _3930 = inversesqrt(_3927);
                                float _3931 = _3930 * _3924;
                                float _3932 = _3930 * _3925;
                                float _3933 = _3930 * _3926;
                                float _3937 = 1.0 - (_3927 / (_3793 * _3793));
                                float _5137 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3938 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3942 = sqrt(_3927) * _3808.w;
                                float _3944 = 1.39999997615814208984375 / (_3942 + 1.39999997615814208984375);
                                float _3945 = _3944 * _3944;
                                float _3948 = ((1.0 - _3945) * dot(vec3(_3931, _3932, _3933), vec3(_1075, _1078, _1081))) + _3945;
                                float _3951 = _3942 * _3942;
                                float _3955 = (fma(_2239, _3835.z, fma(_2238, _3835.y, _3835.x * _2237)) + _3835.w) / _3896;
                                float _3956 = (fma(_2239, _3850.z, fma(_2238, _3850.y, _3850.x * _2237)) + _3850.w) / _3896;
                                float _3960 = 1.0 - dot(vec2(_3955, _3956), vec2(_3955, _3956));
                                float _5153 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3961 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3962 = _3961 * (((isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0))) * _3938) / ((_3951 * 0.699999988079071044921875) + 1.0));
                                float _3974 = exp2(log2(1.0 / ((_3951 * 3.5) + 5.0)) * 0.25);
                                float _3975 = 1.0 - _1150;
                                float _3982 = sqrt(1.0 - ((1.0 - (_3975 * _3975)) * (1.0 - (_3974 * _3974))));
                                float _3983 = _3982 * _3982;
                                float _3984 = _3983 * _3983;
                                float _3985 = _3931 - _3405;
                                float _3986 = _3932 - _3406;
                                float _3987 = _3933 - _3407;
                                float _3991 = inversesqrt(dot(vec3(_3985, _3986, _3987), vec3(_3985, _3986, _3987)));
                                float _3995 = dot(vec3(_1075, _1078, _1081), vec3((-0.0) - _3405, (-0.0) - _3406, (-0.0) - _3407));
                                float _5164 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _3998 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _3999 = dot(vec3(_1075, _1078, _1081), vec3(_3991 * _3985, _3991 * _3986, _3991 * _3987));
                                float _5175 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4002 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
                                float _4006 = ((_4002 * _4002) * (_3984 + (-1.0))) + 1.0;
                                float _4007 = _3944 * _3983;
                                float _4008 = _4007 * _4007;
                                float _4014 = ((1.0 - _4008) * dot(vec3(_1075, _1078, _1081), vec3(_3931, _3932, _3933))) + _4008;
                                float _5186 = isnan(0.0) ? _4014 : (isnan(_4014) ? 0.0 : max(_4014, 0.0));
                                float _4015 = isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0));
                                float _4016 = 1.0 - _3983;
                                float _4026 = (0.5 / (((_4015 * ((_3998 * _4016) + _3983)) + 9.9999999392252902907785028219223e-09) + (((_4015 * _4016) + _3983) * _3998))) * _4015;
                                float _5197 = isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0));
                                float _4036 = (_3961 * _3938) * (((_3984 * 3.1415927410125732421875) * (isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0)))) / ((_4006 * _4006) * ((_3951 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3962 * _3808.z;
                                frontier_phi_88_pred_1 = _3962 * _3808.y;
                                frontier_phi_88_pred_2 = _3962 * _3808.x;
                                frontier_phi_88_pred_3 = _4036 * _3820.z;
                                frontier_phi_88_pred_4 = _4036 * _3820.y;
                                frontier_phi_88_pred_5 = _4036 * _3820.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4045 = frontier_phi_88_pred;
                            _4044 = frontier_phi_88_pred_1;
                            _4043 = frontier_phi_88_pred_2;
                            _4042 = frontier_phi_88_pred_3;
                            _4041 = frontier_phi_88_pred_4;
                            _4040 = frontier_phi_88_pred_5;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            _3752 = _4045 + _3765;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            _3749 = _4042 + _3762;
                            if (_3767 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3752;
                                _3766 = _3767;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3752;
                        frontier_phi_82_pred_1 = _3751;
                        frontier_phi_82_pred_2 = _3750;
                        frontier_phi_82_pred_3 = _3749;
                        frontier_phi_82_pred_4 = _3748;
                        frontier_phi_82_pred_5 = _3747;
                    }
                    _3390 = frontier_phi_82_pred;
                    _3388 = frontier_phi_82_pred_1;
                    _3386 = frontier_phi_82_pred_2;
                    _3384 = frontier_phi_82_pred_3;
                    _3382 = frontier_phi_82_pred_4;
                    _3380 = frontier_phi_82_pred_5;
                    uint _3546 = _3545 + 1u;
                    if (_3546 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3539 = _3380;
                        _3540 = _3382;
                        _3541 = _3384;
                        _3542 = _3386;
                        _3543 = _3388;
                        _3544 = _3390;
                        _3545 = _3546;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3386;
                frontier_phi_63_64_ladder_1 = _3390;
                frontier_phi_63_64_ladder_2 = _3388;
                frontier_phi_63_64_ladder_3 = _3384;
                frontier_phi_63_64_ladder_4 = _3382;
                frontier_phi_63_64_ladder_5 = _3380;
            }
            else
            {
                frontier_phi_63_64_ladder = _3264;
                frontier_phi_63_64_ladder_1 = _3268;
                frontier_phi_63_64_ladder_2 = _3266;
                frontier_phi_63_64_ladder_3 = _3262;
                frontier_phi_63_64_ladder_4 = _3260;
                frontier_phi_63_64_ladder_5 = _3258;
            }
            _3379 = frontier_phi_63_64_ladder_5;
            _3381 = frontier_phi_63_64_ladder_4;
            _3383 = frontier_phi_63_64_ladder_3;
            _3385 = frontier_phi_63_64_ladder;
            _3387 = frontier_phi_63_64_ladder_2;
            _3389 = frontier_phi_63_64_ladder_1;
        }
        float _3394 = isnan(1.0) ? _1134 : (isnan(_1134) ? 1.0 : min(_1134, 1.0));
        _3191 = (_3394 * _3385) + _2703;
        _3193 = (_3394 * _3387) + _2705;
        _3195 = (_3394 * _3389) + _2707;
        _3197 = ((_3379 * _1118) * _3394) + _3041;
        _3199 = ((_3381 * _1120) * _3394) + _3043;
        _3201 = ((_3383 * _1121) * _3394) + _3045;
    }
    else
    {
        _3191 = _2703;
        _3193 = _2705;
        _3195 = _2707;
        _3197 = _3041;
        _3199 = _3043;
        _3201 = _3045;
    }
    float _5213 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _5224 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _5235 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _3218 = ((isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0))) * (_3191 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1134))) + ((_3197 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1971)) * cbPerFrame._m0[3u].x);
    float _3219 = ((isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0))) * (_3193 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1134))) + ((_3199 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1971)) * cbPerFrame._m0[3u].x);
    float _3220 = ((isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0))) * (_3195 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1134))) + ((_3201 + ((isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0))) * _1971)) * cbPerFrame._m0[3u].x);
    uint _3221 = _264 + 6u;
    float _3229 = _1056 / cbSceneParam._m0[86u].x;
    float _3230 = _1057 / cbSceneParam._m0[86u].y;
    vec4 _3244 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3229, _3230, (log2((isnan(cbSceneParam._m0[77u].w) ? _979 : (isnan(_979) ? cbSceneParam._m0[77u].w : min(_979, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3246 = _3244.x;
    float _3247 = _3244.y;
    float _3248 = _3244.z;
    float _3249 = _3244.w;
    float _3321;
    float _3323;
    float _3325;
    float _3327;
    if (_979 > cbSceneParam._m0[78u].w)
    {
        float _3283 = isnan(_979) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _979 : min(cbSceneParam._m0[80u].w, _979));
        float _3284 = _3283 / _979;
        float _3295 = _3284 * _1029;
        float _3296 = _1030 * _3284;
        float _3297 = (-0.0) - _3296;
        float _3299 = _3284 * _1031;
        float _3301 = (cbSceneParam._m0[77u].w * _3297) / _3283;
        float _3302 = _3301 + cbSceneParam._m0[79u].w;
        float _3303 = cbSceneParam._m0[79u].w - _3296;
        float _3309 = sqrt(((_3295 * _3295) + (_3296 * _3296)) + (_3299 * _3299));
        float _3312 = (1.0 - (cbSceneParam._m0[77u].w / _3283)) * _3309;
        float _3317 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3319 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3496;
        if (abs((_3297 - _3301) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3496 = ((((_3302 > 0.0) ? exp2(_3317 * _3302) : (2.0 - exp2(_3319 * _3302))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3312;
        }
        else
        {
            float _3440 = 1.0 / cbSceneParam._m0[80u].x;
            float _3441 = isnan(_3303) ? _3302 : (isnan(_3302) ? _3303 : max(_3302, _3303));
            float _3442 = isnan(_3303) ? _3302 : (isnan(_3302) ? _3303 : min(_3302, _3303));
            float _3451 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : min(_3441, 0.0));
            float _3452 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : min(_3442, 0.0));
            _3496 = ((abs(_3309 / _3297) * cbSceneParam._m0[80u].y) * ((((_3451 - _3452) * 2.0) - ((exp2(_3317 * (isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0)))) - exp2(_3317 * (isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))))) * _3440)) - ((exp2(_3319 * _3451) - exp2(_3319 * _3452)) * _3440))) + (_3312 * cbSceneParam._m0[80u].z);
        }
        vec4 _3498 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3229, _3230, 1.0), 0.0);
        float _3507 = exp2((_3496 * (-1.44269502162933349609375)) * (1.0 - _3498.w));
        float _3508 = log2(_3507);
        float _3524 = log2(_3249);
        _3321 = (exp2(_3524 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3508 * cbSceneParam._m0[78u].x)) * _3498.x) / cbSceneParam._m0[78u].x)) + _3246;
        _3323 = (exp2(_3524 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3508 * cbSceneParam._m0[78u].y)) * _3498.y) / cbSceneParam._m0[78u].y)) + _3247;
        _3325 = (exp2(_3524 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3508 * cbSceneParam._m0[78u].z)) * _3498.z) / cbSceneParam._m0[78u].z)) + _3248;
        _3327 = _3507 * _3249;
    }
    else
    {
        _3321 = _3246;
        _3323 = _3247;
        _3325 = _3248;
        _3327 = _3249;
    }
    bool _3534;
    vec4 _3337;
    vec4 _3359;
    float _3361;
    float _3365;
    float _3366;
    float _3367;
    float _3368;
    bool _3378;
    for (;;)
    {
        _3337 = cbMatDynParam._m0[0u];
        float _3339 = roundEven(_3337.y);
        bool _3340 = _3339 == 3.0;
        float _3341 = log2(_3327);
        float _3348 = exp2(_3341 * cbSceneParam._m0[78u].x) * _3218;
        float _3349 = exp2(_3341 * cbSceneParam._m0[78u].y) * _3219;
        float _3350 = exp2(_3341 * cbSceneParam._m0[78u].z) * _3220;
        float _3357 = _1045 + (-0.5);
        _3359 = cbMtdParam._m0[1u];
        _3361 = _3359.y * _3357;
        float _3364 = (_3339 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3365 = _3364 * (_3340 ? _3348 : (_3348 + (cbSceneParam._m0[72u].w * _3321)));
        _3366 = _3364 * (_3340 ? _3349 : (_3349 + (cbSceneParam._m0[72u].w * _3323)));
        _3367 = _3364 * (_3340 ? _3350 : (_3350 + (cbSceneParam._m0[72u].w * _3325)));
        _3368 = _3357 * 0.999000012874603271484375;
        _3378 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3378)
        {
            if ((cbInstanceData._m0[_264 + 7u].x + _3368) < 0.5)
            {
                _3534 = true;
                break;
            }
        }
        uint _3475 = _1094 + uint(_3337.w);
        if ((cbInstanceData._m0[_3475].w < 1.0) && ((cbInstanceData._m0[_3475].w + _3368) < 0.5))
        {
            _3534 = true;
            break;
        }
        if ((_3361 + 1.0) < _3359.x)
        {
            _3534 = true;
            break;
        }
        _3534 = false;
        break;
    }
    float _3738;
    if (_3534)
    {
        discard_state = true;
        _3738 = 0.0;
    }
    else
    {
        _3738 = cbInstanceData._m0[_3221].w;
    }
    SV_Target.x = _3365;
    SV_Target.y = _3366;
    SV_Target.z = _3367;
    SV_Target.w = _3738;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3221].w;
    discard_exit();
}


