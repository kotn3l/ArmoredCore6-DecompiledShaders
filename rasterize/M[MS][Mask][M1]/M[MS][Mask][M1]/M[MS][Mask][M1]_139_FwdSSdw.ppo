#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1726;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4073 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4084 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4095 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _390 = _385.x * cbMtdParam._m0[11u].x;
    float _391 = _385.y * cbMtdParam._m0[11u].y;
    float _392 = _385.z * cbMtdParam._m0[11u].z;
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _479 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _496 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _430.x) * 2.0) - ((((_467 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4106 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _504 = (_497 * ((_411.x * cbMtdParam._m0[12u].x) - _390)) + _390;
    float _505 = (_497 * ((_411.y * cbMtdParam._m0[12u].y) - _391)) + _391;
    float _506 = (_497 * ((_411.z * cbMtdParam._m0[12u].z) - _392)) + _392;
    vec4 _523 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _545 = _543.x;
    float _555 = dot(vec4(_545, _543.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _569 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _430.y) * 2.0) - ((((_545 - _555) * cbMtdParam._m0[23u].w) + _555) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4117 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _577 = (_570 * ((_523.x * cbMtdParam._m0[13u].x) - _504)) + _504;
    float _578 = (_570 * ((_523.y * cbMtdParam._m0[13u].y) - _505)) + _505;
    float _579 = (_570 * ((_523.z * cbMtdParam._m0[13u].z) - _506)) + _506;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _617 = _615.x;
    float _627 = dot(vec4(_617, _615.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _639 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _430.z) * 2.0) - ((((_617 - _627) * cbMtdParam._m0[23u].w) + _627) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4128 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _650 = (_359.x * cbMtdParam._m0[9u].x) * ((_640 * ((_598.x * cbMtdParam._m0[14u].x) - _577)) + _577);
    float _651 = (_359.y * cbMtdParam._m0[9u].y) * ((_640 * ((_598.y * cbMtdParam._m0[14u].y) - _578)) + _578);
    float _652 = (_359.z * cbMtdParam._m0[9u].z) * ((_640 * ((_598.z * cbMtdParam._m0[14u].z) - _579)) + _579);
    float _656 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _650;
    float _659 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _651;
    float _662 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _652;
    float _670 = (((_650 - _656) * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) + _656) * 4.55000019073486328125;
    float _672 = (((_651 - _659) * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) + _659) * 4.55000019073486328125;
    float _674 = (((_652 - _662) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) + _662) * 4.55000019073486328125;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _322) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _323) + cbTextureTilingScale._m0[14u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _753 = _751.x;
    float _754 = _751.y;
    float _755 = _751.z;
    float _762 = ((_734.x - _753) * _497) + _753;
    float _763 = ((_734.y - _754) * _497) + _754;
    float _764 = ((_734.z - _755) * _497) + _755;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _787 = ((_776.x - _762) * _570) + _762;
    float _788 = ((_776.y - _763) * _570) + _763;
    float _789 = ((_776.z - _764) * _570) + _764;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _814 = ((_801.z - _789) * _640) + _789;
    float _817 = ((((_801.x - _787) * _640) + _787) * 2.0) + (-1.0);
    float _818 = ((((_801.y - _788) * _640) + _788) * 2.0) + (-1.0);
    float _819 = dot(vec2(_817, _818), vec2(_817, _818));
    float _4139 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _824 = sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))));
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _863 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _865 = _863.x;
    float _866 = 1.0 - _865;
    float _874 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _877 = ((isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : min(_874, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _886 = (_877 - ((((((_865 - _866) * cbMtdParam._m0[24u].z) + _866) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _877))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4160 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _887 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _894 = (_887 * ((_692.x * cbMtdParam._m0[18u].x) - _670)) + _670;
    float _895 = (_887 * ((_692.y * cbMtdParam._m0[18u].y) - _672)) + _672;
    float _896 = (_887 * ((_692.z * cbMtdParam._m0[18u].z) - _674)) + _674;
    float _911 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _912 = _911 * TEXCOORD.z;
    float _913 = _911 * TEXCOORD.w;
    vec4 _925 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _912) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _913) + cbTextureTilingScale._m0[19u].w));
    float _927 = _925.x;
    float _928 = 1.0 - _927;
    float _953 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_927 - _928) * cbMtdParam._m0[24u].w) + _928) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4171 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _954 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _962 = ((((cbMtdParam._m0[10u].x - _894) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _954) + _894;
    float _963 = ((((cbMtdParam._m0[10u].y - _895) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _954) + _895;
    float _964 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _896)) * _954) + _896;
    vec4 _990 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _992 = _990.x;
    float _1009 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _992) * _497) + _992;
    float _1026 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _1009) * _570) + _1009;
    float _1043 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1026) * _640) + _1026;
    float _1049 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1043) * cbMtdParam._m0[19u].z) + _1043;
    float _1051 = _1049 - (_1049 * _887);
    float _1053 = _1051 - (_1051 * _954);
    float _1058 = (((_711.z - _814) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _814;
    float _1062 = ((_838.z - _1058) * cbMtdParam._m0[19u].w) + _1058;
    vec4 _1078 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1085 = (_1078.x * 2.0) + (-1.0);
    float _1086 = (_1078.y * 2.0) + (-1.0);
    float _1087 = dot(vec2(_1085, _1086), vec2(_1085, _1086));
    float _4182 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1095 = (_887 * (_1078.z - _1062)) + _1062;
    float _1098 = ((cbMtdParam._m0[23u].x - _1095) * _954) + _1095;
    vec4 _1121 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _912) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _913) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1127 = (_1121.x * 2.0) + (-1.0);
    float _1128 = (_1121.y * 2.0) + (-1.0);
    float _1129 = dot(vec2(_1127, _1128), vec2(_1127, _1128));
    float _4193 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1143 = (_817 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_711.x * 2.0) + (-1.0)))) + (((_838.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1144 = (_818 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_711.y * 2.0) + (-1.0)))) + (((_838.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1156 = (((_1085 - _1143) + (cbMtdParam._m0[21u].x * _1143)) * _887) + _1143;
    float _1157 = (((_1086 - _1144) + (cbMtdParam._m0[21u].x * _1144)) * _887) + _1144;
    float _1158 = (_887 * (sqrt(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) - _824)) + _824;
    float _1169 = (((_1127 - _1156) + (_1156 * cbMtdParam._m0[22u].z)) * _954) + _1156;
    float _1170 = (((_1128 - _1157) + (_1157 * cbMtdParam._m0[22u].z)) * _954) + _1157;
    float _1171 = ((sqrt(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) - _1158) * _954) + _1158;
    float _1173 = cbMtdParam._m0[22u].x + _838.w;
    float _1176 = fma(_1171, _271 * NORMAL.x, fma(_1170, _278 * TANGENT.x, (_264 * _256) * _1169));
    float _1179 = fma(_1171, _271 * NORMAL.y, fma(_1170, _278 * TANGENT.y, (_264 * _257) * _1169));
    float _1182 = fma(_1171, _271 * NORMAL.z, fma(_1170, _278 * TANGENT.z, (_264 * _258) * _1169));
    float _1186 = inversesqrt(dot(vec3(_1176, _1179, _1182), vec3(_1176, _1179, _1182)));
    float _1187 = _1186 * _1176;
    float _1188 = _1186 * _1179;
    float _1189 = _1186 * _1182;
    float _4204 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1190 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _4226 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4237 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4248 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4259 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1195 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _1209 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1249);
    float _1260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1249);
    float _1261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1249);
    float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
    float _1266 = _1259 * _1265;
    float _1267 = _1260 * _1265;
    float _1268 = _1261 * _1265;
    float _1274 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1275 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1293 = fma(_1189, cbSceneParam._m0[5u].z, fma(_1188, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1187));
    float _1296 = fma(_1189, cbSceneParam._m0[6u].z, fma(_1188, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1187));
    float _1299 = fma(_1189, cbSceneParam._m0[7u].z, fma(_1188, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1187));
    uint _1313 = (_303 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1319 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * cbInstanceData._m0[_1313].x;
    float _1320 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * cbInstanceData._m0[_1313].y;
    float _1321 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * cbInstanceData._m0[_1313].z;
    float _4270 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _1322 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _1323 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1324 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _1325 = 1.0 - _1195;
    float _1326 = _1322 * _1325;
    float _1327 = _1323 * _1325;
    float _1328 = _1324 * _1325;
    float _1333 = (_1322 + (-0.039999999105930328369140625)) * _1195;
    float _1334 = (_1323 + (-0.039999999105930328369140625)) * _1195;
    float _1335 = (_1324 + (-0.039999999105930328369140625)) * _1195;
    float _1336 = _1333 + 0.039999999105930328369140625;
    float _1338 = _1334 + 0.039999999105930328369140625;
    float _1339 = _1335 + 0.039999999105930328369140625;
    vec4 _1348 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1274, cbSceneParam._m0[86u].y * _1275));
    float _1352 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * TEXCOORD_5.w) * _1348.x;
    float _1353 = dot(vec3(_1187, _1188, _1189), vec3(_1266, _1267, _1268));
    float _1356 = _1353 * 2.0;
    float _1360 = (_1356 * _1187) - _1266;
    float _1361 = (_1356 * _1188) - _1267;
    float _1362 = (_1356 * _1189) - _1268;
    float _1366 = abs(dot(vec3(_1266, _1267, _1268), vec3(_1187, _1188, _1189)));
    float _4303 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
    float _1368 = sqrt(_1190);
    float _1381 = exp2((_1368 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1368 * 3.0));
    float _1387 = (1.0 - _1381) * ((_1368 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1388 = _1381 * _1368;
    float _1416 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1420 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1424 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1725;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1450 = fma(_1424, cbModelParam._m0[26u].z, fma(_1420, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1416));
        float _1454 = fma(_1424, cbModelParam._m0[27u].z, fma(_1420, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1416));
        float _1458 = fma(_1424, cbModelParam._m0[28u].z, fma(_1420, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1416));
        float _1483 = _1416 + _1187;
        float _1484 = _1420 + _1188;
        float _1485 = _1424 + _1189;
        float _1495 = fma(_1485, cbModelParam._m0[26u].z, fma(_1484, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1483)) - _1450;
        float _1496 = fma(_1485, cbModelParam._m0[27u].z, fma(_1484, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1483)) - _1454;
        float _1497 = fma(_1485, cbModelParam._m0[28u].z, fma(_1484, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1483)) - _1458;
        float _1501 = inversesqrt(dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497)));
        float _1514 = ((_1501 * _1495) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1450 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1515 = ((_1501 * _1496) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1454 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1501 * _1497) / cbModelParam._m0[34u].z) + ((((((_1458 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1514, _1515, _1516), 0.0);
        float _1553 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1519.x + (-0.5));
        float _1555 = _1553 * (_1519.y + (-0.5));
        float _1556 = _1553 * (_1519.z + (-0.5));
        float _1563 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1526.x + (-0.5));
        float _1565 = _1563 * (_1526.y + (-0.5));
        float _1566 = _1563 * (_1526.z + (-0.5));
        float _1573 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1533.x + (-0.5));
        float _1575 = _1573 * (_1533.y + (-0.5));
        float _1576 = _1573 * (_1533.z + (-0.5));
        float _1583 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1540.x + (-0.5));
        float _1585 = _1583 * (_1540.y + (-0.5));
        float _1586 = _1583 * (_1540.z + (-0.5));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = _1554 * 0.5;
        float _1591 = _1564 * 0.5;
        float _1592 = _1574 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1607 = (dot(vec3(_1187, _1188, _1189), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1617 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4351 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1619 + 1.0))) + _1624) * _1587;
        float _1634 = _1555 * 0.5;
        float _1635 = _1565 * 0.5;
        float _1636 = _1575 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_1187, _1188, _1189), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4384 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1661 + 1.0))) + _1666) * _1588;
        float _1676 = _1556 * 0.5;
        float _1677 = _1566 * 0.5;
        float _1678 = _1576 * 0.5;
        float _1679 = dot(vec3(_1676, _1677, _1678), vec3(_1676, _1677, _1678));
        float _1684 = (_1679 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1679);
        float _1692 = (dot(vec3(_1187, _1188, _1189), vec3(_1684 * _1676, _1684 * _1677, _1684 * _1678)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1701 = sqrt(((_1677 * _1677) + (_1676 * _1676)) + (_1678 * _1678)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1703 = _1702 * 2.0;
        float _1707 = (1.0 - _1702) / (_1702 + 1.0);
        float _4417 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1708 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1717 = ((((1.0 - _1708) * (_1703 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1703 + 1.0))) + _1708) * _1589;
        _1725 = _1556;
        _1727 = _1555;
        _1728 = _1554;
        _1729 = _1566;
        _1730 = _1565;
        _1731 = _1564;
        _1732 = _1576;
        _1733 = _1575;
        _1734 = _1574;
        _1735 = _1589;
        _1736 = _1588;
        _1737 = _1587;
        _1738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
        _1740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
    }
    else
    {
        _1725 = _1726;
        _1727 = _1726;
        _1728 = _1726;
        _1729 = _1726;
        _1730 = _1726;
        _1731 = _1726;
        _1732 = _1726;
        _1733 = _1726;
        _1734 = _1726;
        _1735 = _1726;
        _1736 = _1726;
        _1737 = _1726;
        _1738 = 0.0;
        _1739 = 0.0;
        _1740 = 0.0;
    }
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1763 = fma(_1424, cbModelParam._m0[30u].z, fma(_1420, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1416));
        float _1767 = fma(_1424, cbModelParam._m0[31u].z, fma(_1420, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1416));
        float _1771 = fma(_1424, cbModelParam._m0[32u].z, fma(_1420, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1416));
        float _1794 = _1416 + _1187;
        float _1795 = _1420 + _1188;
        float _1796 = _1424 + _1189;
        float _1806 = fma(_1796, cbModelParam._m0[30u].z, fma(_1795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1794)) - _1763;
        float _1807 = fma(_1796, cbModelParam._m0[31u].z, fma(_1795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1794)) - _1767;
        float _1808 = fma(_1796, cbModelParam._m0[32u].z, fma(_1795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1794)) - _1771;
        float _1812 = inversesqrt(dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808)));
        float _1825 = ((_1812 * _1806) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1763 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1826 = ((_1812 * _1807) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1767 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1827 = ((_1812 * _1808) / cbModelParam._m0[35u].z) + ((((((_1771 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1829 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1825, _1826, _1827), 0.0);
        vec4 _1836 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1825, _1826, _1827), 0.0);
        vec4 _1843 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1825, _1826, _1827), 0.0);
        vec4 _1850 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1825, _1826, _1827), 0.0);
        float _1862 = exp2((_1829.w + (-0.5)) * 20.0) * 2.0;
        float _1863 = _1862 * (_1829.x + (-0.5));
        float _1864 = _1862 * (_1829.y + (-0.5));
        float _1865 = _1862 * (_1829.z + (-0.5));
        float _1872 = exp2((_1836.w + (-0.5)) * 20.0) * 2.0;
        float _1873 = _1872 * (_1836.x + (-0.5));
        float _1874 = _1872 * (_1836.y + (-0.5));
        float _1875 = _1872 * (_1836.z + (-0.5));
        float _1882 = exp2((_1843.w + (-0.5)) * 20.0) * 2.0;
        float _1883 = _1882 * (_1843.x + (-0.5));
        float _1884 = _1882 * (_1843.y + (-0.5));
        float _1885 = _1882 * (_1843.z + (-0.5));
        float _1892 = exp2((_1850.w + (-0.5)) * 20.0) * 2.0;
        float _1893 = _1892 * (_1850.x + (-0.5));
        float _1894 = _1892 * (_1850.y + (-0.5));
        float _1895 = _1892 * (_1850.z + (-0.5));
        float _1896 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1897 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1898 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1899 = _1863 * 0.5;
        float _1900 = _1873 * 0.5;
        float _1901 = _1883 * 0.5;
        float _1902 = dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901));
        float _1907 = (_1902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1902);
        float _1915 = (dot(vec3(_1187, _1188, _1189), vec3(_1907 * _1899, _1907 * _1900, _1907 * _1901)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1924 = sqrt(((_1900 * _1900) + (_1899 * _1899)) + (_1901 * _1901)) / (_1896 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1926 = _1925 * 2.0;
        float _1930 = (1.0 - _1925) / (_1925 + 1.0);
        float _4480 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1931 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1940 = ((((1.0 - _1931) * (_1926 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1926 + 1.0))) + _1931) * _1896;
        float _1941 = _1864 * 0.5;
        float _1942 = _1874 * 0.5;
        float _1943 = _1884 * 0.5;
        float _1944 = dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943));
        float _1949 = (_1944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1944);
        float _1957 = (dot(vec3(_1187, _1188, _1189), vec3(_1949 * _1941, _1949 * _1942, _1949 * _1943)) + 1.0) * 0.5;
        float _4491 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1966 = sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943)) / (_1897 + 9.9999997473787516355514526367188e-06);
        float _4502 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1968 = _1967 * 2.0;
        float _1972 = (1.0 - _1967) / (_1967 + 1.0);
        float _4513 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1982 = ((((1.0 - _1973) * (_1968 + 2.0)) * exp2(log2(isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_1968 + 1.0))) + _1973) * _1897;
        float _1983 = _1865 * 0.5;
        float _1984 = _1875 * 0.5;
        float _1985 = _1885 * 0.5;
        float _1986 = dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985));
        float _1991 = (_1986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1986);
        float _1999 = (dot(vec3(_1187, _1188, _1189), vec3(_1991 * _1983, _1991 * _1984, _1991 * _1985)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2008 = sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985)) / (_1898 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2010 = _2009 * 2.0;
        float _2014 = (1.0 - _2009) / (_2009 + 1.0);
        float _4546 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2024 = ((((1.0 - _2015) * (_2010 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2010 + 1.0))) + _2015) * _1898;
        _2032 = _1865;
        _2033 = _1864;
        _2034 = _1863;
        _2035 = _1875;
        _2036 = _1874;
        _2037 = _1873;
        _2038 = _1885;
        _2039 = _1884;
        _2040 = _1883;
        _2041 = _1898;
        _2042 = _1897;
        _2043 = _1896;
        _2044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)));
        _2045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)));
        _2046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)));
    }
    else
    {
        _2032 = _1726;
        _2033 = _1726;
        _2034 = _1726;
        _2035 = _1726;
        _2036 = _1726;
        _2037 = _1726;
        _2038 = _1726;
        _2039 = _1726;
        _2040 = _1726;
        _2041 = _1726;
        _2042 = _1726;
        _2043 = _1726;
        _2044 = 0.0;
        _2045 = 0.0;
        _2046 = 0.0;
    }
    float _2056 = (cbModelParam._m0[1u].x * (_2044 - _1738)) + _1738;
    float _2057 = (cbModelParam._m0[1u].x * (_2045 - _1739)) + _1739;
    float _2058 = (cbModelParam._m0[1u].x * (_2046 - _1740)) + _1740;
    float _2079 = fma(_2058, cbSceneParam._m0[89u].z, fma(_2057, cbSceneParam._m0[89u].y, _2056 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2058, cbSceneParam._m0[90u].z, fma(_2057, cbSceneParam._m0[90u].y, _2056 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2058, cbSceneParam._m0[91u].z, fma(_2057, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2056));
    float _2100 = _1360 * 0.5;
    float _2101 = _1361 * 0.5;
    float _2102 = _1362 * 0.5;
    float _2103 = dot(vec4(_2100, _2101, _2102, 1.0), vec4(_2034, _2037, _2040, _2043));
    float _2106 = dot(vec4(_2100, _2101, _2102, 1.0), vec4(_2033, _2036, _2039, _2042));
    float _2109 = dot(vec4(_2100, _2101, _2102, 1.0), vec4(_2032, _2035, _2038, _2041));
    float _2143;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2116 = dot(vec4(_2100, _2101, _2102, 1.0), vec4(_1725, _1729, _1732, _1735));
        float _2120 = dot(vec4(_2100, _2101, _2102, 1.0), vec4(_1727, _1730, _1733, _1736));
        float _2124 = dot(vec4(_2100, _2101, _2102, 1.0), vec4(_1728, _1731, _1734, _1737));
        float _2131 = dot(vec4(cbModelParam._m0[39u]), vec4(_2100, _2101, _2102, 1.0));
        _2143 = dot(vec3(isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0)), isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0)), isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2131) ? 0.0 : (isnan(0.0) ? _2131 : max(0.0, _2131))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2143 = 1.0;
    }
    float _2154;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2145 = dot(vec4(cbModelParam._m0[40u]), vec4(_2100, _2101, _2102, 1.0));
        _2154 = dot(vec3(isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0)), isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0)), isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2145) ? 0.0 : (isnan(0.0) ? _2145 : max(0.0, _2145))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2154 = 1.0;
    }
    float _2158 = (_2154 * cbModelParam._m0[1u].x) + (_2143 * (1.0 - cbModelParam._m0[1u].x));
    float _2168 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1190);
    float _2169 = isnan(_2168) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2168 : min(cbModelParam._m0[25u].z, _2168));
    float _2249;
    float _2251;
    float _2253;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2216 = fma(_1424, cbModelParam._m0[13u].z, fma(_1420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1416)) + cbModelParam._m0[13u].w;
        float _2220 = fma(_1424, cbModelParam._m0[14u].z, fma(_1420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1416)) + cbModelParam._m0[14u].w;
        float _2224 = fma(_1424, cbModelParam._m0[15u].z, fma(_1420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1416)) + cbModelParam._m0[15u].w;
        float _2227 = fma(_1362, cbModelParam._m0[13u].z, fma(_1361, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1360));
        float _2230 = fma(_1362, cbModelParam._m0[14u].z, fma(_1361, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1360));
        float _2233 = fma(_1362, cbModelParam._m0[15u].z, fma(_1361, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1360));
        float _2261;
        if (_2227 > 0.0)
        {
            _2261 = abs((1.0 - _2216) / _2227);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2216 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2261 = frontier_phi_14_12_ladder;
        }
        float _2484;
        if (_2230 > 0.0)
        {
            _2484 = abs((1.0 - _2220) / _2230);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2220 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2484 = frontier_phi_23_19_ladder;
        }
        float _2741;
        if (_2233 > 0.0)
        {
            _2741 = abs((1.0 - _2224) / _2233);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2233 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2224 + 1.0) / _2233);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2741 = frontier_phi_35_30_ladder;
        }
        float _2743 = isnan(_2484) ? _2261 : (isnan(_2261) ? _2484 : min(_2261, _2484));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _2227) + _2216;
        float _2749 = (_2744 * _2230) + _2220;
        float _2750 = (_2744 * _2233) + _2224;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2753 = (-1.0) - _2751;
        float _2755 = _2751 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2750 > _2755) || ((_2750 < _2753) || ((_2749 > _2755) || ((_2749 < _2753) || ((_2748 < _2753) || (_2748 > _2755))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2750, cbModelParam._m0[9u].z, fma(_2749, cbModelParam._m0[9u].y, _2748 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2750, cbModelParam._m0[10u].z, fma(_2749, cbModelParam._m0[10u].y, _2748 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2750, cbModelParam._m0[11u].z, fma(_2749, cbModelParam._m0[11u].y, _2748 * cbModelParam._m0[11u].x))), _2169);
            frontier_phi_13_35_ladder = _2878.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2878.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2878.x * cbModelParam._m0[1u].y;
        }
        _2249 = frontier_phi_13_35_ladder_2;
        _2251 = frontier_phi_13_35_ladder_1;
        _2253 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1360, _1361, _1362), _2169);
        _2249 = _2237.x * cbModelParam._m0[1u].y;
        _2251 = _2237.y * cbModelParam._m0[1u].y;
        _2253 = _2237.z * cbModelParam._m0[1u].y;
    }
    float _2257 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1190);
    float _2258 = isnan(_2257) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2257 : min(cbModelParam._m0[25u].w, _2257));
    float _2347;
    float _2349;
    float _2351;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2311 = fma(_1424, cbModelParam._m0[21u].z, fma(_1420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1416)) + cbModelParam._m0[21u].w;
        float _2315 = fma(_1424, cbModelParam._m0[22u].z, fma(_1420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1416)) + cbModelParam._m0[22u].w;
        float _2319 = fma(_1424, cbModelParam._m0[23u].z, fma(_1420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1416)) + cbModelParam._m0[23u].w;
        float _2322 = fma(_1362, cbModelParam._m0[21u].z, fma(_1361, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1360));
        float _2325 = fma(_1362, cbModelParam._m0[22u].z, fma(_1361, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1360));
        float _2328 = fma(_1362, cbModelParam._m0[23u].z, fma(_1361, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1360));
        float _2489;
        if (_2322 > 0.0)
        {
            _2489 = abs((1.0 - _2311) / _2322);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2322 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2311 + 1.0) / _2322);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2489 = frontier_phi_25_21_ladder;
        }
        float _2768;
        if (_2325 > 0.0)
        {
            _2768 = abs((1.0 - _2315) / _2325);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2325 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2315 + 1.0) / _2325);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2768 = frontier_phi_37_32_ladder;
        }
        float _2981;
        if (_2328 > 0.0)
        {
            _2981 = abs((1.0 - _2319) / _2328);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2328 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2319 + 1.0) / _2328);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2981 = frontier_phi_46_43_ladder;
        }
        float _2983 = isnan(_2768) ? _2489 : (isnan(_2489) ? _2768 : min(_2489, _2768));
        float _2984 = isnan(_2981) ? _2983 : (isnan(_2983) ? _2981 : min(_2983, _2981));
        float _2988 = (_2984 * _2322) + _2311;
        float _2989 = (_2984 * _2325) + _2315;
        float _2990 = (_2984 * _2328) + _2319;
        float _2991 = _2984 * 9.9999997473787516355514526367188e-05;
        float _2992 = (-1.0) - _2991;
        float _2994 = _2991 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2990 > _2994) || ((_2990 < _2992) || ((_2989 > _2994) || ((_2989 < _2992) || ((_2988 < _2992) || (_2988 > _2994))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3189 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2990, cbModelParam._m0[17u].z, fma(_2989, cbModelParam._m0[17u].y, _2988 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2990, cbModelParam._m0[18u].z, fma(_2989, cbModelParam._m0[18u].y, _2988 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2990, cbModelParam._m0[19u].z, fma(_2989, cbModelParam._m0[19u].y, _2988 * cbModelParam._m0[19u].x))), _2258);
            frontier_phi_22_46_ladder = _3189.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3189.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3189.x * cbModelParam._m0[1u].z;
        }
        _2347 = frontier_phi_22_46_ladder_2;
        _2349 = frontier_phi_22_46_ladder_1;
        _2351 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2331 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1360, _1361, _1362), _2258);
        _2347 = _2331.x * cbModelParam._m0[1u].z;
        _2349 = _2331.y * cbModelParam._m0[1u].z;
        _2351 = _2331.z * cbModelParam._m0[1u].z;
    }
    float _2364 = (((_1387 * _1336) + _1388) * _1352) * ((cbModelParam._m0[1u].w * (_2347 - _2249)) + _2249);
    float _2366 = (((_1387 * _1338) + _1388) * _1352) * ((cbModelParam._m0[1u].w * (_2349 - _2251)) + _2251);
    float _2368 = (((_1387 * _1339) + _1388) * _1352) * ((cbModelParam._m0[1u].w * (_2351 - _2253)) + _2253);
    float _2371 = fma(_2368, cbSceneParam._m0[89u].z, fma(_2366, cbSceneParam._m0[89u].y, _2364 * cbSceneParam._m0[89u].x));
    float _2374 = fma(_2368, cbSceneParam._m0[90u].z, fma(_2366, cbSceneParam._m0[90u].y, _2364 * cbSceneParam._m0[90u].x));
    float _2377 = fma(_2368, cbSceneParam._m0[91u].z, fma(_2366, cbSceneParam._m0[91u].y, _2364 * cbSceneParam._m0[91u].x));
    vec4 _2385 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1274, _1275));
    float _2387 = _2385.w;
    float _2399 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2387);
    float _2400 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2387);
    float _2401 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2387);
    uvec4 _2405 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2407 = _2405.x * 14u;
    uint _2408 = _2407 + 13u;
    float _2415 = _1352 + (-1.0);
    float _2420 = (cbLight._m0[_2408].x * _2415) + 1.0;
    float _2421 = (cbLight._m0[_2408].y * _2415) + 1.0;
    float _2422 = (cbLight._m0[_2408].z * _2415) + 1.0;
    float _2423 = (cbLight._m0[_2408].w * _2415) + 1.0;
    uint _2424 = _2407 + 5u;
    float _2430 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
    uint _2434 = _2407 + 4u;
    float _2443 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
    uint _2447 = _2407 | 1u;
    float _2458 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_1187, _1188, _1189));
    float _2461 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_1187, _1188, _1189));
    float _4682 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _4693 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2466 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2468 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2475 = ((cbLight._m0[_2424].x * _2430) * _2468) + (((cbLight._m0[_2434].x * _2399) * _2443) * _2466);
    float _2476 = ((_2430 * cbLight._m0[_2424].y) * _2468) + (((cbLight._m0[_2434].y * _2400) * _2443) * _2466);
    float _2477 = ((_2430 * cbLight._m0[_2424].z) * _2468) + (((cbLight._m0[_2434].z * _2401) * _2443) * _2466);
    uvec4 _2481 = floatBitsToUint(cbLight._m0[_2407 + 12u]);
    bool _2483 = _2481.x == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2483)
    {
        _2494 = _2475;
        _2496 = _2476;
        _2498 = _2477;
    }
    else
    {
        uint _2502 = _2407 + 6u;
        float _2518 = (dot(vec3(cbLight._m0[_2407 + 2u].xyz), vec3(_1187, _1188, _1189)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4704 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2521 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2494 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2475;
        _2496 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2476;
        _2498 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2477;
    }
    bool _2501 = _2481.y == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2501)
    {
        _2539 = _2494;
        _2541 = _2496;
        _2543 = _2498;
    }
    else
    {
        uint _2712 = _2407 + 7u;
        float _2728 = (dot(vec3(cbLight._m0[_2407 + 3u].xyz), vec3(_1187, _1188, _1189)) * 0.5) + 0.5;
        float _2729 = _2728 * _2728;
        float _4720 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2730 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2731 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
        _2539 = (((cbLight._m0[_2712].x * 0.3183098733425140380859375) * _2730) * _2731) + _2494;
        _2541 = (((cbLight._m0[_2712].y * 0.3183098733425140380859375) * _2730) * _2731) + _2496;
        _2543 = (((cbLight._m0[_2712].z * 0.3183098733425140380859375) * _2730) * _2731) + _2498;
    }
    uint _2546 = _2407 + 8u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _1190) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2407].x + _1266;
    float _2562 = cbLight._m0[_2407].y + _1267;
    float _2563 = cbLight._m0[_2407].z + _1268;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_1187, _1188, _1189), vec3(cbLight._m0[_2407].xyz));
    float _4736 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _4747 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _2575 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2576 = dot(vec3(_1187, _1188, _1189), vec3(_2568, _2569, _2570));
    float _4758 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2568, _2569, _2570));
    float _4769 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2560 * _2560;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
    float _2597 = 0.959999978542327880859375 - _1333;
    float _2599 = 0.959999978542327880859375 - _1334;
    float _2600 = 0.959999978542327880859375 - _1335;
    float _2607 = 1.0 - _2560;
    float _2618 = (0.5 / (((_2575 * ((_2574 * _2607) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2607) + _2560) * _2574))) * _2574;
    float _4780 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    uint _2634 = _2407 + 9u;
    float _2645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _1190) * 0.949999988079071044921875);
    float _2646 = _2645 * _2645;
    float _2647 = cbLight._m0[_2447].x + _1266;
    float _2648 = cbLight._m0[_2447].y + _1267;
    float _2649 = cbLight._m0[_2447].z + _1268;
    float _2653 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
    float _2654 = _2653 * _2647;
    float _2655 = _2653 * _2648;
    float _2656 = _2653 * _2649;
    float _2657 = dot(vec3(_1187, _1188, _1189), vec3(cbLight._m0[_2447].xyz));
    float _4791 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2661 = dot(vec3(_1187, _1188, _1189), vec3(_2654, _2655, _2656));
    float _4802 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2665 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2654, _2655, _2656));
    float _4813 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2669 = _2646 * _2646;
    float _2673 = ((_2664 * _2664) * (_2669 + (-1.0))) + 1.0;
    float _2680 = exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0);
    float _2687 = 1.0 - _2646;
    float _2697 = (0.5 / (((_2575 * ((_2660 * _2687) + _2646)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2687) + _2646) * _2660))) * _2660;
    float _4824 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2699 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2669 / ((_2673 * _2673) * 3.141590118408203125));
    float _2709 = (((((_2680 * _2597) + _1336) * cbLight._m0[_2634].x) * _2699) * _2430) + ((((cbLight._m0[_2546].x * _2399) * ((_2596 * _2597) + _1336)) * _2620) * _2443);
    float _2710 = (((((_2680 * _2599) + _1338) * cbLight._m0[_2634].y) * _2699) * _2430) + ((((cbLight._m0[_2546].y * _2400) * ((_2596 * _2599) + _1338)) * _2620) * _2443);
    float _2711 = (((((_2680 * _2600) + _1339) * cbLight._m0[_2634].z) * _2699) * _2430) + ((((cbLight._m0[_2546].z * _2401) * ((_2596 * _2600) + _1339)) * _2620) * _2443);
    float _2773;
    float _2775;
    float _2777;
    if (_2483)
    {
        _2773 = _2709;
        _2775 = _2710;
        _2777 = _2711;
    }
    else
    {
        uint _2779 = _2407 + 2u;
        uint _2783 = _2407 + 10u;
        float _2797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2779].w)) * _1190) * 0.949999988079071044921875);
        float _2798 = _2797 * _2797;
        float _2799 = cbLight._m0[_2779].x + _1266;
        float _2800 = cbLight._m0[_2779].y + _1267;
        float _2801 = cbLight._m0[_2779].z + _1268;
        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
        float _2806 = _2805 * _2799;
        float _2807 = _2805 * _2800;
        float _2808 = _2805 * _2801;
        float _2809 = dot(vec3(_1187, _1188, _1189), vec3(cbLight._m0[_2779].xyz));
        float _4835 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2813 = dot(vec3(_1187, _1188, _1189), vec3(_2806, _2807, _2808));
        float _4846 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2817 = dot(vec3(cbLight._m0[_2779].xyz), vec3(_2806, _2807, _2808));
        float _4857 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2821 = _2798 * _2798;
        float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
        float _2832 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2839 = 1.0 - _2798;
        float _2849 = (0.5 / (((_2575 * ((_2812 * _2839) + _2798)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2839) + _2798) * _2812))) * _2812;
        float _4868 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2773 = (((((_2832 * _2597) + _1336) * cbLight._m0[_2783].x) * _2851) * _2852) + _2709;
        _2775 = (((((_2832 * _2599) + _1338) * cbLight._m0[_2783].y) * _2851) * _2852) + _2710;
        _2777 = (((((_2832 * _2600) + _1339) * cbLight._m0[_2783].z) * _2851) * _2852) + _2711;
    }
    float _2887;
    float _2889;
    float _2891;
    if (_2501)
    {
        _2887 = _2773;
        _2889 = _2775;
        _2891 = _2777;
    }
    else
    {
        uint _2898 = _2407 + 3u;
        uint _2902 = _2407 + 11u;
        float _2916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2898].w)) * _1190) * 0.949999988079071044921875);
        float _2917 = _2916 * _2916;
        float _2918 = cbLight._m0[_2898].x + _1266;
        float _2919 = cbLight._m0[_2898].y + _1267;
        float _2920 = cbLight._m0[_2898].z + _1268;
        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
        float _2925 = _2924 * _2918;
        float _2926 = _2924 * _2919;
        float _2927 = _2924 * _2920;
        float _2928 = dot(vec3(_1187, _1188, _1189), vec3(cbLight._m0[_2898].xyz));
        float _4884 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2932 = dot(vec3(_1187, _1188, _1189), vec3(_2925, _2926, _2927));
        float _4895 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2935 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2936 = dot(vec3(cbLight._m0[_2898].xyz), vec3(_2925, _2926, _2927));
        float _4906 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2940 = _2917 * _2917;
        float _2944 = ((_2935 * _2935) * (_2940 + (-1.0))) + 1.0;
        float _2951 = exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0);
        float _2958 = 1.0 - _2917;
        float _2968 = (0.5 / (((_2575 * ((_2931 * _2958) + _2917)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2958) + _2917) * _2931))) * _2931;
        float _4917 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2970 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2940 / ((_2944 * _2944) * 3.141590118408203125));
        float _2971 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
        _2887 = (((((_2951 * _2597) + _1336) * cbLight._m0[_2902].x) * _2970) * _2971) + _2773;
        _2889 = (((((_2951 * _2599) + _1338) * cbLight._m0[_2902].y) * _2970) * _2971) + _2775;
        _2891 = (((((_2951 * _2600) + _1339) * cbLight._m0[_2902].z) * _2970) * _2971) + _2777;
    }
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    float _3116;
    if (_2405.y == 0u)
    {
        float _3046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3046;
        float _3048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3046;
        float _3049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3046;
        uvec4 _3061 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3062 = _3061.x;
        uint _3073 = uint((float(_3061.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1275) / _3062))) + floor(float(uint(cbSceneParam._m0[85u].x * _1274) / _3062)));
        float _3083 = (log2(_3049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3084 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        uint _3087 = uint(isnan(14.0) ? _3084 : (isnan(_3084) ? 14.0 : min(_3084, 14.0)));
        uvec4 _3092 = texelFetch(g_lightClusterGridBuffer, int(((_3087 << 2u) + (_3073 << 6u)) >> 2u));
        uint _3093 = _3092.x;
        uint _3094 = _3061.z;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        if (((((1u << ((_3094 >> 4u) & 15u)) + 4294967295u) & _3093) == 0u) || ((_3094 & 240u) == 0u))
        {
            _3194 = 0.0;
            _3196 = 0.0;
            _3198 = 0.0;
            _3200 = 0.0;
            _3202 = 0.0;
            _3204 = 0.0;
        }
        else
        {
            float _3195;
            float _3197;
            float _3199;
            float _3201;
            float _3203;
            float _3205;
            float _3339 = 0.0;
            float _3340 = 0.0;
            float _3341 = 0.0;
            float _3342 = 0.0;
            float _3343 = 0.0;
            float _3344 = 0.0;
            uint _3345 = 0u;
            uint _3354;
            bool _3355;
            for (;;)
            {
                _3354 = texelFetch(g_lightClassification, int((((_3087 << 5u) + (_3073 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                _3355 = _3354 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3355)
                {
                    frontier_phi_61_pred = _3339;
                    frontier_phi_61_pred_1 = _3344;
                    frontier_phi_61_pred_2 = _3343;
                    frontier_phi_61_pred_3 = _3342;
                    frontier_phi_61_pred_4 = _3341;
                    frontier_phi_61_pred_5 = _3340;
                }
                else
                {
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    float _3468;
                    uint _3469;
                    _3463 = _3339;
                    _3464 = _3340;
                    _3465 = _3341;
                    _3466 = _3342;
                    _3467 = _3343;
                    _3468 = _3344;
                    _3469 = _3354;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    for (;;)
                    {
                        uint _3473 = uint(findLSB(_3469)) + (_3345 << 5u);
                        uint _3470 = (_3469 + 4294967295u) & _3469;
                        uint _3475 = _3473 * 48u;
                        vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3475)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3475 + 3u)).x));
                        uint _3495 = (_3473 * 48u) + 4u;
                        vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3495)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3495 + 3u)).x));
                        uint _3514 = (_3473 * 48u) + 8u;
                        vec3 _3525 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3514)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3514 + 2u)).x));
                        float _3529 = _3489.x - _3047;
                        float _3530 = _3489.y - _3048;
                        float _3531 = _3489.z - _3049;
                        float _3532 = dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531));
                        float _3535 = inversesqrt(_3532);
                        float _3536 = _3535 * _3529;
                        float _3537 = _3535 * _3530;
                        float _3538 = _3535 * _3531;
                        float _3539 = dot(vec3(_1293, _1296, _1299), vec3(_3536, _3537, _3538));
                        float _3544 = 1.0 - (_3532 * _3489.w);
                        float _4943 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3545 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3546 = sqrt(_3532) * _3508.w;
                        float _3549 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                        float _3550 = _3549 * _3549;
                        float _3553 = ((1.0 - _3550) * _3539) + _3550;
                        float _3556 = _3546 * _3546;
                        float _3560 = ((isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0))) * _3545) / ((_3556 * 0.699999988079071044921875) + 1.0);
                        float _3564 = (-0.0) - _3047;
                        float _3565 = (-0.0) - _3048;
                        float _3566 = (-0.0) - _3049;
                        float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                        float _3571 = _3570 * _3564;
                        float _3572 = _3570 * _3565;
                        float _3573 = _3570 * _3566;
                        float _3581 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                        float _3582 = 1.0 - _1368;
                        float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                        float _3590 = _3589 * _3589;
                        float _3591 = _3590 * _3590;
                        float _3592 = _3571 + _3536;
                        float _3593 = _3572 + _3537;
                        float _3594 = _3573 + _3538;
                        float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                        float _3602 = dot(vec3(_1293, _1296, _1299), vec3(_3571, _3572, _3573));
                        float _4959 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3605 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3606 = dot(vec3(_1293, _1296, _1299), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                        float _4970 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3609 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                        float _3614 = _3549 * _3590;
                        float _3615 = _3614 * _3614;
                        float _3618 = ((1.0 - _3615) * _3539) + _3615;
                        float _4981 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3619 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3620 = 1.0 - _3590;
                        float _3630 = (0.5 / (((_3619 * ((_3605 * _3620) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3590) * _3605))) * _3619;
                        float _4992 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                        float _3641 = (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3613 * _3613) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125))) * _3545;
                        _3398 = (_3560 * _3508.x) + _3466;
                        _3399 = (_3560 * _3508.y) + _3467;
                        _3400 = (_3560 * _3508.z) + _3468;
                        _3395 = (_3641 * _3525.x) + _3463;
                        _3396 = (_3641 * _3525.y) + _3464;
                        _3397 = (_3641 * _3525.z) + _3465;
                        if (_3470 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3463 = _3395;
                            _3464 = _3396;
                            _3465 = _3397;
                            _3466 = _3398;
                            _3467 = _3399;
                            _3468 = _3400;
                            _3469 = _3470;
                        }
                    }
                    frontier_phi_61_pred = _3395;
                    frontier_phi_61_pred_1 = _3400;
                    frontier_phi_61_pred_2 = _3399;
                    frontier_phi_61_pred_3 = _3398;
                    frontier_phi_61_pred_4 = _3397;
                    frontier_phi_61_pred_5 = _3396;
                }
                _3195 = frontier_phi_61_pred;
                _3205 = frontier_phi_61_pred_1;
                _3203 = frontier_phi_61_pred_2;
                _3201 = frontier_phi_61_pred_3;
                _3199 = frontier_phi_61_pred_4;
                _3197 = frontier_phi_61_pred_5;
                uint _3346 = _3345 + 1u;
                if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3339 = _3195;
                    _3340 = _3197;
                    _3341 = _3199;
                    _3342 = _3201;
                    _3343 = _3203;
                    _3344 = _3205;
                    _3345 = _3346;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3194 = _3195;
            _3196 = _3197;
            _3198 = _3199;
            _3200 = _3201;
            _3202 = _3203;
            _3204 = _3205;
        }
        uvec4 _3208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3209 = _3208.z;
        uint _3211 = (_3209 >> 8u) & 15u;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        if (((4294967295u << _3211) & _3093) == 0u)
        {
            _3307 = _3194;
            _3309 = _3196;
            _3311 = _3198;
            _3313 = _3200;
            _3315 = _3202;
            _3317 = _3204;
        }
        else
        {
            float _3332 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
            float _3333 = _3332 * _3047;
            float _3334 = _3332 * _3048;
            float _3335 = _3332 * _3049;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3211 < ((_3209 >> 12u) & 15u))
            {
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3446 = _3194;
                float _3447 = _3196;
                float _3448 = _3198;
                float _3449 = _3200;
                float _3450 = _3202;
                float _3451 = _3204;
                uint _3452 = _3211;
                uint _3461;
                bool _3462;
                for (;;)
                {
                    _3461 = texelFetch(g_lightClassification, int((((_3087 << 5u) + (_3073 << 9u)) + (_3452 << 2u)) >> 2u)).x;
                    _3462 = _3461 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3462)
                    {
                        frontier_phi_67_pred = _3449;
                        frontier_phi_67_pred_1 = _3450;
                        frontier_phi_67_pred_2 = _3451;
                        frontier_phi_67_pred_3 = _3448;
                        frontier_phi_67_pred_4 = _3447;
                        frontier_phi_67_pred_5 = _3446;
                    }
                    else
                    {
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3659 = _3446;
                        float _3660 = _3447;
                        float _3661 = _3448;
                        float _3662 = _3449;
                        float _3663 = _3450;
                        float _3664 = _3451;
                        uint _3665 = _3461;
                        uint _3666;
                        vec4 _3691;
                        float _3692;
                        vec4 _3707;
                        vec3 _3719;
                        vec4 _3734;
                        vec4 _3749;
                        float _3795;
                        bool _3796;
                        for (;;)
                        {
                            uint _3676 = ((_3452 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3665));
                            _3666 = (_3665 + 4294967295u) & _3665;
                            uint _3678 = _3676 * 40u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3692 = _3691.w;
                            uint _3694 = (_3676 * 40u) + 4u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3676 * 40u) + 8u;
                            _3719 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x));
                            uint _3721 = (_3676 * 40u) + 16u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            uint _3736 = (_3676 * 40u) + 20u;
                            _3749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3736 + 3u)).x));
                            uint _3751 = (_3676 * 40u) + 24u;
                            vec4 _3764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3751 + 3u)).x));
                            uint _3770 = (_3676 * 40u) + 28u;
                            vec4 _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            _3795 = fma(_3049, _3783.z, fma(_3048, _3783.y, _3783.x * _3047)) + _3783.w;
                            _3796 = !((fma(_3049, _3764.z, fma(_3048, _3764.y, _3764.x * _3047)) + _3764.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3796)
                            {
                                float _3823 = _3691.x - _3047;
                                float _3824 = _3691.y - _3048;
                                float _3825 = _3691.z - _3049;
                                float _3826 = dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825));
                                float _3829 = inversesqrt(_3826);
                                float _3830 = _3829 * _3823;
                                float _3831 = _3829 * _3824;
                                float _3832 = _3829 * _3825;
                                float _3836 = 1.0 - (_3826 / (_3692 * _3692));
                                float _5003 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3841 = sqrt(_3826) * _3707.w;
                                float _3843 = 1.39999997615814208984375 / (_3841 + 1.39999997615814208984375);
                                float _3844 = _3843 * _3843;
                                float _3847 = ((1.0 - _3844) * dot(vec3(_3830, _3831, _3832), vec3(_1293, _1296, _1299))) + _3844;
                                float _3850 = _3841 * _3841;
                                float _3854 = (fma(_3049, _3734.z, fma(_3048, _3734.y, _3734.x * _3047)) + _3734.w) / _3795;
                                float _3855 = (fma(_3049, _3749.z, fma(_3048, _3749.y, _3749.x * _3047)) + _3749.w) / _3795;
                                float _3859 = 1.0 - dot(vec2(_3854, _3855), vec2(_3854, _3855));
                                float _5019 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3861 = _3860 * (((isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0))) * _3837) / ((_3850 * 0.699999988079071044921875) + 1.0));
                                float _3873 = exp2(log2(1.0 / ((_3850 * 3.5) + 5.0)) * 0.25);
                                float _3874 = 1.0 - _1368;
                                float _3881 = sqrt(1.0 - ((1.0 - (_3874 * _3874)) * (1.0 - (_3873 * _3873))));
                                float _3882 = _3881 * _3881;
                                float _3883 = _3882 * _3882;
                                float _3884 = _3830 - _3333;
                                float _3885 = _3831 - _3334;
                                float _3886 = _3832 - _3335;
                                float _3890 = inversesqrt(dot(vec3(_3884, _3885, _3886), vec3(_3884, _3885, _3886)));
                                float _3894 = dot(vec3(_1293, _1296, _1299), vec3((-0.0) - _3333, (-0.0) - _3334, (-0.0) - _3335));
                                float _5030 = isnan(0.0) ? _3894 : (isnan(_3894) ? 0.0 : max(_3894, 0.0));
                                float _3897 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3898 = dot(vec3(_1293, _1296, _1299), vec3(_3890 * _3884, _3890 * _3885, _3890 * _3886));
                                float _5041 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3901 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3905 = ((_3901 * _3901) * (_3883 + (-1.0))) + 1.0;
                                float _3906 = _3843 * _3882;
                                float _3907 = _3906 * _3906;
                                float _3913 = ((1.0 - _3907) * dot(vec3(_1293, _1296, _1299), vec3(_3830, _3831, _3832))) + _3907;
                                float _5052 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3914 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3915 = 1.0 - _3882;
                                float _3925 = (0.5 / (((_3914 * ((_3897 * _3915) + _3882)) + 9.9999999392252902907785028219223e-09) + (((_3914 * _3915) + _3882) * _3897))) * _3914;
                                float _5063 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3935 = (_3860 * _3837) * (((_3883 * 3.1415927410125732421875) * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) / ((_3905 * _3905) * ((_3850 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3935 * _3719.x;
                                frontier_phi_73_pred_1 = _3935 * _3719.y;
                                frontier_phi_73_pred_2 = _3861 * _3707.z;
                                frontier_phi_73_pred_3 = _3861 * _3707.y;
                                frontier_phi_73_pred_4 = _3861 * _3707.x;
                                frontier_phi_73_pred_5 = _3935 * _3719.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3939 = frontier_phi_73_pred;
                            _3940 = frontier_phi_73_pred_1;
                            _3944 = frontier_phi_73_pred_2;
                            _3943 = frontier_phi_73_pred_3;
                            _3942 = frontier_phi_73_pred_4;
                            _3941 = frontier_phi_73_pred_5;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            _3651 = _3944 + _3664;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            if (_3666 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3666;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3649;
                        frontier_phi_67_pred_1 = _3650;
                        frontier_phi_67_pred_2 = _3651;
                        frontier_phi_67_pred_3 = _3648;
                        frontier_phi_67_pred_4 = _3647;
                        frontier_phi_67_pred_5 = _3646;
                    }
                    _3314 = frontier_phi_67_pred;
                    _3316 = frontier_phi_67_pred_1;
                    _3318 = frontier_phi_67_pred_2;
                    _3312 = frontier_phi_67_pred_3;
                    _3310 = frontier_phi_67_pred_4;
                    _3308 = frontier_phi_67_pred_5;
                    uint _3453 = _3452 + 1u;
                    if (_3453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3446 = _3308;
                        _3447 = _3310;
                        _3448 = _3312;
                        _3449 = _3314;
                        _3450 = _3316;
                        _3451 = _3318;
                        _3452 = _3453;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3316;
                frontier_phi_55_56_ladder_1 = _3318;
                frontier_phi_55_56_ladder_2 = _3314;
                frontier_phi_55_56_ladder_3 = _3312;
                frontier_phi_55_56_ladder_4 = _3310;
                frontier_phi_55_56_ladder_5 = _3308;
            }
            else
            {
                frontier_phi_55_56_ladder = _3202;
                frontier_phi_55_56_ladder_1 = _3204;
                frontier_phi_55_56_ladder_2 = _3200;
                frontier_phi_55_56_ladder_3 = _3198;
                frontier_phi_55_56_ladder_4 = _3196;
                frontier_phi_55_56_ladder_5 = _3194;
            }
            _3307 = frontier_phi_55_56_ladder_5;
            _3309 = frontier_phi_55_56_ladder_4;
            _3311 = frontier_phi_55_56_ladder_3;
            _3313 = frontier_phi_55_56_ladder_2;
            _3315 = frontier_phi_55_56_ladder;
            _3317 = frontier_phi_55_56_ladder_1;
        }
        float _3322 = isnan(1.0) ? _1352 : (isnan(_1352) ? 1.0 : min(_1352, 1.0));
        _3106 = (_3322 * _3313) + _2539;
        _3108 = (_3322 * _3315) + _2541;
        _3110 = (_3322 * _3317) + _2543;
        _3112 = ((_3307 * _1336) * _3322) + _2887;
        _3114 = ((_3309 * _1338) * _3322) + _2889;
        _3116 = ((_3311 * _1339) * _3322) + _2891;
    }
    else
    {
        _3106 = _2539;
        _3108 = _2541;
        _3110 = _2543;
        _3112 = _2887;
        _3114 = _2889;
        _3116 = _2891;
    }
    float _5079 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    float _5090 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    float _5101 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    uint _3136 = _303 + 6u;
    float _3144 = _1274 / cbSceneParam._m0[86u].x;
    float _3145 = _1275 / cbSceneParam._m0[86u].y;
    vec4 _3159 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3144, _3145, (log2((isnan(cbSceneParam._m0[77u].w) ? _1209 : (isnan(_1209) ? cbSceneParam._m0[77u].w : min(_1209, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3161 = _3159.x;
    float _3162 = _3159.y;
    float _3163 = _3159.z;
    float _3164 = _3159.w;
    float _3257;
    float _3259;
    float _3261;
    float _3263;
    if (_1209 > cbSceneParam._m0[78u].w)
    {
        float _3219 = isnan(_1209) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1209 : min(cbSceneParam._m0[80u].w, _1209));
        float _3220 = _3219 / _1209;
        float _3231 = _3220 * _1259;
        float _3232 = _1260 * _3220;
        float _3233 = (-0.0) - _3232;
        float _3235 = _3220 * _1261;
        float _3237 = (cbSceneParam._m0[77u].w * _3233) / _3219;
        float _3238 = _3237 + cbSceneParam._m0[79u].w;
        float _3239 = cbSceneParam._m0[79u].w - _3232;
        float _3245 = sqrt(((_3231 * _3231) + (_3232 * _3232)) + (_3235 * _3235));
        float _3248 = (1.0 - (cbSceneParam._m0[77u].w / _3219)) * _3245;
        float _3253 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3255 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3408;
        if (abs((_3233 - _3237) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3408 = ((((_3238 > 0.0) ? exp2(_3253 * _3238) : (2.0 - exp2(_3255 * _3238))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3248;
        }
        else
        {
            float _3368 = 1.0 / cbSceneParam._m0[80u].x;
            float _3369 = isnan(_3239) ? _3238 : (isnan(_3238) ? _3239 : max(_3238, _3239));
            float _3370 = isnan(_3239) ? _3238 : (isnan(_3238) ? _3239 : min(_3238, _3239));
            float _3379 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : min(_3369, 0.0));
            float _3380 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : min(_3370, 0.0));
            _3408 = ((abs(_3245 / _3233) * cbSceneParam._m0[80u].y) * ((((_3379 - _3380) * 2.0) - ((exp2(_3253 * (isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0)))) - exp2(_3253 * (isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))))) * _3368)) - ((exp2(_3255 * _3379) - exp2(_3255 * _3380)) * _3368))) + (_3248 * cbSceneParam._m0[80u].z);
        }
        vec4 _3410 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3144, _3145, 1.0), 0.0);
        float _3419 = exp2((_3408 * (-1.44269502162933349609375)) * (1.0 - _3410.w));
        float _3420 = log2(_3419);
        float _3436 = log2(_3164);
        _3257 = (exp2(_3436 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3420 * cbSceneParam._m0[78u].x)) * _3410.x) / cbSceneParam._m0[78u].x)) + _3161;
        _3259 = (exp2(_3436 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3420 * cbSceneParam._m0[78u].y)) * _3410.y) / cbSceneParam._m0[78u].y)) + _3162;
        _3261 = (exp2(_3436 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3420 * cbSceneParam._m0[78u].z)) * _3410.z) / cbSceneParam._m0[78u].z)) + _3163;
        _3263 = _3419 * _3164;
    }
    else
    {
        _3257 = _3161;
        _3259 = _3162;
        _3261 = _3163;
        _3263 = _3164;
    }
    float _3275 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3276 = _3275 == 3.0;
    float _3277 = log2(_3263);
    float _3284 = exp2(_3277 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3106 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1352))) + ((_3112 + ((isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0))) * _2158)) * cbPerFrame._m0[3u].x));
    float _3285 = exp2(_3277 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3108 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1352))) + ((_3114 + ((isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0))) * _2158)) * cbPerFrame._m0[3u].x));
    float _3286 = exp2(_3277 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3110 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1352))) + ((_3116 + ((isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0))) * _2158)) * cbPerFrame._m0[3u].x));
    float _3295 = (_3275 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3295 * (_3276 ? _3284 : (_3284 + (cbSceneParam._m0[72u].w * _3257)));
    SV_Target.y = _3295 * (_3276 ? _3285 : (_3285 + (cbSceneParam._m0[72u].w * _3259)));
    SV_Target.z = _3295 * (_3276 ? _3286 : (_3286 + (cbSceneParam._m0[72u].w * _3261)));
    SV_Target.w = cbInstanceData._m0[_3136].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3136].w;
}


