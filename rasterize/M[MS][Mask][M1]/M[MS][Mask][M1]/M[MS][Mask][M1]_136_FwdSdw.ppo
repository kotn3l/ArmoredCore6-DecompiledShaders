#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1582;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _313.x * cbMtdParam._m0[11u].x;
    float _320 = _313.y * cbMtdParam._m0[11u].y;
    float _321 = _313.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _359.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4188 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _437 = (_430 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _438 = (_430 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _439 = (_430 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _359.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4199 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _550 = _548.x;
    float _560 = dot(vec4(_550, _548.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _572 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _359.z) * 2.0) - ((((_550 - _560) * cbMtdParam._m0[23u].w) + _560) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4210 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _580 = (_573 * ((_531.x * cbMtdParam._m0[14u].x) - _510)) + _510;
    float _581 = (_573 * ((_531.y * cbMtdParam._m0[14u].y) - _511)) + _511;
    float _582 = (_573 * ((_531.z * cbMtdParam._m0[14u].z) - _512)) + _512;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _430) + _639;
    float _649 = ((_620.y - _640) * _430) + _640;
    float _650 = ((_620.z - _641) * _430) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_662.x - _648) * _503) + _648;
    float _674 = ((_662.y - _649) * _503) + _649;
    float _675 = ((_662.z - _650) * _503) + _650;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _700 = ((_687.z - _675) * _573) + _675;
    float _703 = ((((_687.x - _673) * _573) + _673) * 2.0) + (-1.0);
    float _705 = ((((_687.y - _674) * _573) + _674) * 2.0) + (-1.0);
    float _706 = dot(vec2(_703, _705), vec2(_703, _705));
    float _4221 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _711 = sqrt(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _761 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _764 = ((isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : min(_761, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _773 = (_764 - ((((((_752 - _753) * cbMtdParam._m0[24u].z) + _753) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _764))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4242 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _774 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _781 = (_774 * ((_600.x * cbMtdParam._m0[18u].x) - _580)) + _580;
    float _782 = (_774 * ((_600.y * cbMtdParam._m0[18u].y) - _581)) + _581;
    float _783 = (_774 * ((_600.z * cbMtdParam._m0[18u].z) - _582)) + _582;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _797 = _795.x;
    float _798 = 1.0 - _797;
    float _823 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_797 - _798) * cbMtdParam._m0[24u].w) + _798) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4253 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _824 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _832 = ((((cbMtdParam._m0[10u].x - _781) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _824) + _781;
    float _833 = ((((cbMtdParam._m0[10u].y - _782) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _824) + _782;
    float _834 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _783)) * _824) + _783;
    vec4 _860 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _862 = _860.x;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _862) * _430) + _862;
    float _897 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _880) * _503) + _880;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _897) * _573) + _897;
    float _918 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _914) * cbMtdParam._m0[19u].z) + _914;
    float _920 = _918 - (_918 * _774);
    float _922 = _920 - (_920 * _824);
    float _926 = (cbMtdParam._m0[19u].w * (_725.z - _700)) + _700;
    vec4 _940 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _947 = (_940.x * 2.0) + (-1.0);
    float _948 = (_940.y * 2.0) + (-1.0);
    float _949 = dot(vec2(_947, _948), vec2(_947, _948));
    float _4264 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _957 = (_774 * (_940.z - _926)) + _926;
    float _960 = ((cbMtdParam._m0[23u].x - _957) * _824) + _957;
    vec4 _983 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _989 = (_983.x * 2.0) + (-1.0);
    float _990 = (_983.y * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4275 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _999 = (((_725.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _1000 = (((_725.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _1012 = (((_947 - _999) + (cbMtdParam._m0[21u].x * _999)) * _774) + _999;
    float _1013 = (((_948 - _1000) + (cbMtdParam._m0[21u].x * _1000)) * _774) + _1000;
    float _1014 = (_774 * (sqrt(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) - _711)) + _711;
    float _1025 = (((_989 - _1012) + (_1012 * cbMtdParam._m0[22u].z)) * _824) + _1012;
    float _1026 = (((_990 - _1013) + (_1013 * cbMtdParam._m0[22u].z)) * _824) + _1013;
    float _1027 = ((sqrt(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) - _1014) * _824) + _1014;
    float _1029 = cbMtdParam._m0[22u].x + _725.w;
    float _1032 = fma(_1027, _260 * NORMAL.x, fma(_1026, _267 * TANGENT.x, (_253 * _245) * _1025));
    float _1035 = fma(_1027, _260 * NORMAL.y, fma(_1026, _267 * TANGENT.y, (_253 * _246) * _1025));
    float _1038 = fma(_1027, _260 * NORMAL.z, fma(_1026, _267 * TANGENT.z, (_253 * _247) * _1025));
    float _1042 = inversesqrt(dot(vec3(_1032, _1035, _1038), vec3(_1032, _1035, _1038)));
    float _1043 = _1042 * _1032;
    float _1044 = _1042 * _1035;
    float _1045 = _1042 * _1038;
    float _4286 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _1046 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _4308 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4319 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4330 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4341 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _1051 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _1065 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1105 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1115 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1105);
    float _1116 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1105);
    float _1117 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1105);
    float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
    float _1122 = _1115 * _1121;
    float _1123 = _1116 * _1121;
    float _1124 = _1117 * _1121;
    float _1130 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1131 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1149 = fma(_1045, cbSceneParam._m0[5u].z, fma(_1044, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1043));
    float _1152 = fma(_1045, cbSceneParam._m0[6u].z, fma(_1044, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1043));
    float _1155 = fma(_1045, cbSceneParam._m0[7u].z, fma(_1044, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1043));
    uint _1169 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1175 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * cbInstanceData._m0[_1169].x;
    float _1176 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * cbInstanceData._m0[_1169].y;
    float _1177 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * cbInstanceData._m0[_1169].z;
    float _4352 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _1179 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _4374 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _1181 = 1.0 - _1051;
    float _1182 = _1178 * _1181;
    float _1183 = _1179 * _1181;
    float _1184 = _1180 * _1181;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1051;
    float _1190 = (_1179 + (-0.039999999105930328369140625)) * _1051;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1051;
    float _1192 = _1189 + 0.039999999105930328369140625;
    float _1194 = _1190 + 0.039999999105930328369140625;
    float _1195 = _1191 + 0.039999999105930328369140625;
    vec4 _1204 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1130, cbSceneParam._m0[86u].y * _1131));
    float _1208 = ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * TEXCOORD_5.w) * _1204.x;
    float _1209 = dot(vec3(_1043, _1044, _1045), vec3(_1122, _1123, _1124));
    float _1212 = _1209 * 2.0;
    float _1216 = (_1212 * _1043) - _1122;
    float _1217 = (_1212 * _1044) - _1123;
    float _1218 = (_1212 * _1045) - _1124;
    float _1222 = abs(dot(vec3(_1122, _1123, _1124), vec3(_1043, _1044, _1045)));
    float _4385 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _1224 = sqrt(_1046);
    float _1237 = exp2((_1224 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1224 * 3.0));
    float _1243 = (1.0 - _1237) * ((_1224 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1244 = _1237 * _1224;
    float _1272 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1280 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1581;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1306 = fma(_1280, cbModelParam._m0[26u].z, fma(_1276, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1272));
        float _1310 = fma(_1280, cbModelParam._m0[27u].z, fma(_1276, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1272));
        float _1314 = fma(_1280, cbModelParam._m0[28u].z, fma(_1276, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1272));
        float _1339 = _1272 + _1043;
        float _1340 = _1276 + _1044;
        float _1341 = _1280 + _1045;
        float _1351 = fma(_1341, cbModelParam._m0[26u].z, fma(_1340, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1339)) - _1306;
        float _1352 = fma(_1341, cbModelParam._m0[27u].z, fma(_1340, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1339)) - _1310;
        float _1353 = fma(_1341, cbModelParam._m0[28u].z, fma(_1340, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1339)) - _1314;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1306 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1310 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[34u].z) + ((((((_1314 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1409 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1375.x + (-0.5));
        float _1411 = _1409 * (_1375.y + (-0.5));
        float _1412 = _1409 * (_1375.z + (-0.5));
        float _1419 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1382.x + (-0.5));
        float _1421 = _1419 * (_1382.y + (-0.5));
        float _1422 = _1419 * (_1382.z + (-0.5));
        float _1429 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1389.x + (-0.5));
        float _1431 = _1429 * (_1389.y + (-0.5));
        float _1432 = _1429 * (_1389.z + (-0.5));
        float _1439 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1396.x + (-0.5));
        float _1441 = _1439 * (_1396.y + (-0.5));
        float _1442 = _1439 * (_1396.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1463 = (dot(vec3(_1043, _1044, _1045), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1473 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4433 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1475 + 1.0))) + _1480) * _1443;
        float _1490 = _1411 * 0.5;
        float _1491 = _1421 * 0.5;
        float _1492 = _1431 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_1043, _1044, _1045), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4466 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1517 + 1.0))) + _1522) * _1444;
        float _1532 = _1412 * 0.5;
        float _1533 = _1422 * 0.5;
        float _1534 = _1432 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1043, _1044, _1045), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4499 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1559 + 1.0))) + _1564) * _1445;
        _1581 = _1412;
        _1583 = _1411;
        _1584 = _1410;
        _1585 = _1422;
        _1586 = _1421;
        _1587 = _1420;
        _1588 = _1432;
        _1589 = _1431;
        _1590 = _1430;
        _1591 = _1445;
        _1592 = _1444;
        _1593 = _1443;
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1595 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1582;
        _1583 = _1582;
        _1584 = _1582;
        _1585 = _1582;
        _1586 = _1582;
        _1587 = _1582;
        _1588 = _1582;
        _1589 = _1582;
        _1590 = _1582;
        _1591 = _1582;
        _1592 = _1582;
        _1593 = _1582;
        _1594 = 0.0;
        _1595 = 0.0;
        _1596 = 0.0;
    }
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1619 = fma(_1280, cbModelParam._m0[30u].z, fma(_1276, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272));
        float _1623 = fma(_1280, cbModelParam._m0[31u].z, fma(_1276, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272));
        float _1627 = fma(_1280, cbModelParam._m0[32u].z, fma(_1276, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272));
        float _1650 = _1272 + _1043;
        float _1651 = _1276 + _1044;
        float _1652 = _1280 + _1045;
        float _1662 = fma(_1652, cbModelParam._m0[30u].z, fma(_1651, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1650)) - _1619;
        float _1663 = fma(_1652, cbModelParam._m0[31u].z, fma(_1651, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1650)) - _1623;
        float _1664 = fma(_1652, cbModelParam._m0[32u].z, fma(_1651, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1650)) - _1627;
        float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
        float _1681 = ((_1668 * _1662) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1619 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1682 = ((_1668 * _1663) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1623 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1683 = ((_1668 * _1664) / cbModelParam._m0[35u].z) + ((((((_1627 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        vec4 _1706 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1681, _1682, _1683), 0.0);
        float _1718 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1685.x + (-0.5));
        float _1720 = _1718 * (_1685.y + (-0.5));
        float _1721 = _1718 * (_1685.z + (-0.5));
        float _1728 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1729 = _1728 * (_1692.x + (-0.5));
        float _1730 = _1728 * (_1692.y + (-0.5));
        float _1731 = _1728 * (_1692.z + (-0.5));
        float _1738 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1739 = _1738 * (_1699.x + (-0.5));
        float _1740 = _1738 * (_1699.y + (-0.5));
        float _1741 = _1738 * (_1699.z + (-0.5));
        float _1748 = exp2((_1706.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1706.x + (-0.5));
        float _1750 = _1748 * (_1706.y + (-0.5));
        float _1751 = _1748 * (_1706.z + (-0.5));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1754 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1755 = _1719 * 0.5;
        float _1756 = _1729 * 0.5;
        float _1757 = _1739 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_1043, _1044, _1045), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4540 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4551 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4562 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_1782 + 1.0))) + _1787) * _1752;
        float _1797 = _1720 * 0.5;
        float _1798 = _1730 * 0.5;
        float _1799 = _1740 * 0.5;
        float _1800 = dot(vec3(_1797, _1798, _1799), vec3(_1797, _1798, _1799));
        float _1805 = (_1800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1800);
        float _1813 = (dot(vec3(_1043, _1044, _1045), vec3(_1805 * _1797, _1805 * _1798, _1805 * _1799)) + 1.0) * 0.5;
        float _4573 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1822 = sqrt(((_1798 * _1798) + (_1797 * _1797)) + (_1799 * _1799)) / (_1753 + 9.9999997473787516355514526367188e-06);
        float _4584 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1824 = _1823 * 2.0;
        float _1828 = (1.0 - _1823) / (_1823 + 1.0);
        float _4595 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1829 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1838 = ((((1.0 - _1829) * (_1824 + 2.0)) * exp2(log2(isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_1824 + 1.0))) + _1829) * _1753;
        float _1839 = _1721 * 0.5;
        float _1840 = _1731 * 0.5;
        float _1841 = _1741 * 0.5;
        float _1842 = dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841));
        float _1847 = (_1842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1842);
        float _1855 = (dot(vec3(_1043, _1044, _1045), vec3(_1847 * _1839, _1847 * _1840, _1847 * _1841)) + 1.0) * 0.5;
        float _4606 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1864 = sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841)) / (_1754 + 9.9999997473787516355514526367188e-06);
        float _4617 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1866 = _1865 * 2.0;
        float _1870 = (1.0 - _1865) / (_1865 + 1.0);
        float _4628 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1871 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _1880 = ((((1.0 - _1871) * (_1866 + 2.0)) * exp2(log2(isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_1866 + 1.0))) + _1871) * _1754;
        _1888 = _1721;
        _1889 = _1720;
        _1890 = _1719;
        _1891 = _1731;
        _1892 = _1730;
        _1893 = _1729;
        _1894 = _1741;
        _1895 = _1740;
        _1896 = _1739;
        _1897 = _1754;
        _1898 = _1753;
        _1899 = _1752;
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
        _1901 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)));
        _1902 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)));
    }
    else
    {
        _1888 = _1582;
        _1889 = _1582;
        _1890 = _1582;
        _1891 = _1582;
        _1892 = _1582;
        _1893 = _1582;
        _1894 = _1582;
        _1895 = _1582;
        _1896 = _1582;
        _1897 = _1582;
        _1898 = _1582;
        _1899 = _1582;
        _1900 = 0.0;
        _1901 = 0.0;
        _1902 = 0.0;
    }
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1594)) + _1594;
    float _1913 = (cbModelParam._m0[1u].x * (_1901 - _1595)) + _1595;
    float _1914 = (cbModelParam._m0[1u].x * (_1902 - _1596)) + _1596;
    float _1935 = fma(_1914, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1912 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1914, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1912 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1914, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1912));
    float _1956 = _1216 * 0.5;
    float _1957 = _1217 * 0.5;
    float _1958 = _1218 * 0.5;
    float _1959 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1890, _1893, _1896, _1899));
    float _1962 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1889, _1892, _1895, _1898));
    float _1965 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1999;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1972 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1581, _1585, _1588, _1591));
        float _1976 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1583, _1586, _1589, _1592));
        float _1980 = dot(vec4(_1956, _1957, _1958, 1.0), vec4(_1584, _1587, _1590, _1593));
        float _1987 = dot(vec4(cbModelParam._m0[39u]), vec4(_1956, _1957, _1958, 1.0));
        _1999 = dot(vec3(isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1987) ? 0.0 : (isnan(0.0) ? _1987 : max(0.0, _1987))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1999 = 1.0;
    }
    float _2010;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2001 = dot(vec4(cbModelParam._m0[40u]), vec4(_1956, _1957, _1958, 1.0));
        _2010 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2001) ? 0.0 : (isnan(0.0) ? _2001 : max(0.0, _2001))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2010 = 1.0;
    }
    float _2014 = (_2010 * cbModelParam._m0[1u].x) + (_1999 * (1.0 - cbModelParam._m0[1u].x));
    float _2024 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1046);
    float _2025 = isnan(_2024) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2024 : min(cbModelParam._m0[25u].z, _2024));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2072 = fma(_1280, cbModelParam._m0[13u].z, fma(_1276, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1272)) + cbModelParam._m0[13u].w;
        float _2076 = fma(_1280, cbModelParam._m0[14u].z, fma(_1276, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1272)) + cbModelParam._m0[14u].w;
        float _2080 = fma(_1280, cbModelParam._m0[15u].z, fma(_1276, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1272)) + cbModelParam._m0[15u].w;
        float _2083 = fma(_1218, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1216));
        float _2086 = fma(_1218, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1216));
        float _2089 = fma(_1218, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1216));
        float _2117;
        if (_2083 > 0.0)
        {
            _2117 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2117 = frontier_phi_14_12_ladder;
        }
        float _2288;
        if (_2086 > 0.0)
        {
            _2288 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2288 = frontier_phi_23_19_ladder;
        }
        float _2583;
        if (_2089 > 0.0)
        {
            _2583 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2583 = frontier_phi_35_30_ladder;
        }
        float _2585 = isnan(_2288) ? _2117 : (isnan(_2117) ? _2288 : min(_2117, _2288));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _2083) + _2072;
        float _2591 = (_2586 * _2086) + _2076;
        float _2592 = (_2586 * _2089) + _2080;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2593;
        float _2597 = _2593 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 > _2597) || ((_2591 < _2595) || ((_2590 < _2595) || (_2590 > _2597))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2592, cbModelParam._m0[9u].z, fma(_2591, cbModelParam._m0[9u].y, _2590 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2592, cbModelParam._m0[10u].z, fma(_2591, cbModelParam._m0[10u].y, _2590 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2592, cbModelParam._m0[11u].z, fma(_2591, cbModelParam._m0[11u].y, _2590 * cbModelParam._m0[11u].x))), _2025);
            frontier_phi_13_35_ladder = _2737.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2737.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2737.x * cbModelParam._m0[1u].y;
        }
        _2105 = frontier_phi_13_35_ladder_2;
        _2107 = frontier_phi_13_35_ladder_1;
        _2109 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2093 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1216, _1217, _1218), _2025);
        _2105 = _2093.x * cbModelParam._m0[1u].y;
        _2107 = _2093.y * cbModelParam._m0[1u].y;
        _2109 = _2093.z * cbModelParam._m0[1u].y;
    }
    float _2113 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1046);
    float _2114 = isnan(_2113) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2113 : min(cbModelParam._m0[25u].w, _2113));
    float _2203;
    float _2205;
    float _2207;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2167 = fma(_1280, cbModelParam._m0[21u].z, fma(_1276, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1272)) + cbModelParam._m0[21u].w;
        float _2171 = fma(_1280, cbModelParam._m0[22u].z, fma(_1276, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1272)) + cbModelParam._m0[22u].w;
        float _2175 = fma(_1280, cbModelParam._m0[23u].z, fma(_1276, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1272)) + cbModelParam._m0[23u].w;
        float _2178 = fma(_1218, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1216));
        float _2181 = fma(_1218, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1216));
        float _2184 = fma(_1218, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1216));
        float _2293;
        if (_2178 > 0.0)
        {
            _2293 = abs((1.0 - _2167) / _2178);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2167 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2293 = frontier_phi_25_21_ladder;
        }
        float _2610;
        if (_2181 > 0.0)
        {
            _2610 = abs((1.0 - _2171) / _2181);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2171 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2610 = frontier_phi_37_32_ladder;
        }
        float _2948;
        if (_2184 > 0.0)
        {
            _2948 = abs((1.0 - _2175) / _2184);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2175 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2948 = frontier_phi_47_44_ladder;
        }
        float _2950 = isnan(_2610) ? _2293 : (isnan(_2293) ? _2610 : min(_2293, _2610));
        float _2951 = isnan(_2948) ? _2950 : (isnan(_2950) ? _2948 : min(_2950, _2948));
        float _2955 = (_2951 * _2178) + _2167;
        float _2956 = (_2951 * _2181) + _2171;
        float _2957 = (_2951 * _2184) + _2175;
        float _2958 = _2951 * 9.9999997473787516355514526367188e-05;
        float _2959 = (-1.0) - _2958;
        float _2961 = _2958 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2957 > _2961) || ((_2957 < _2959) || ((_2956 > _2961) || ((_2956 < _2959) || ((_2955 < _2959) || (_2955 > _2961))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2957, cbModelParam._m0[17u].z, fma(_2956, cbModelParam._m0[17u].y, _2955 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2957, cbModelParam._m0[18u].z, fma(_2956, cbModelParam._m0[18u].y, _2955 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2957, cbModelParam._m0[19u].z, fma(_2956, cbModelParam._m0[19u].y, _2955 * cbModelParam._m0[19u].x))), _2114);
            frontier_phi_22_47_ladder = _3079.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3079.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3079.x * cbModelParam._m0[1u].z;
        }
        _2203 = frontier_phi_22_47_ladder_2;
        _2205 = frontier_phi_22_47_ladder_1;
        _2207 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2187 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1216, _1217, _1218), _2114);
        _2203 = _2187.x * cbModelParam._m0[1u].z;
        _2205 = _2187.y * cbModelParam._m0[1u].z;
        _2207 = _2187.z * cbModelParam._m0[1u].z;
    }
    float _2220 = (((_1243 * _1192) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2203 - _2105)) + _2105);
    float _2222 = (((_1243 * _1194) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2224 = (((_1243 * _1195) + _1244) * _1208) * ((cbModelParam._m0[1u].w * (_2207 - _2109)) + _2109);
    float _2227 = fma(_2224, cbSceneParam._m0[89u].z, fma(_2222, cbSceneParam._m0[89u].y, _2220 * cbSceneParam._m0[89u].x));
    float _2230 = fma(_2224, cbSceneParam._m0[90u].z, fma(_2222, cbSceneParam._m0[90u].y, _2220 * cbSceneParam._m0[90u].x));
    float _2233 = fma(_2224, cbSceneParam._m0[91u].z, fma(_2222, cbSceneParam._m0[91u].y, _2220 * cbSceneParam._m0[91u].x));
    float _2267 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2271 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2275 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2279 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2280 = _2267 / _2279;
    float _2281 = _2271 / _2279;
    float _2282 = _2275 / _2279;
    float _2429;
    float _2430;
    float _2431;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2309 = ((uint(_2282 > cbSceneParam._m0[59u].y) + uint(_2282 > cbSceneParam._m0[59u].x)) + uint(_2282 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2310 = _2309 + 43u;
        uint _2318 = _2309 + 44u;
        uint _2326 = _2309 + 45u;
        uint _2334 = _2309 + 46u;
        float _2345 = fma(_2279, cbSceneParam._m0[_2310].w, fma(_2275, cbSceneParam._m0[_2310].z, fma(_2271, cbSceneParam._m0[_2310].y, _2267 * cbSceneParam._m0[_2310].x)));
        float _2349 = fma(_2279, cbSceneParam._m0[_2318].w, fma(_2275, cbSceneParam._m0[_2318].z, fma(_2271, cbSceneParam._m0[_2318].y, _2267 * cbSceneParam._m0[_2318].x)));
        float _2357 = fma(_2279, cbSceneParam._m0[_2334].w, fma(_2275, cbSceneParam._m0[_2334].z, fma(_2271, cbSceneParam._m0[_2334].y, _2267 * cbSceneParam._m0[_2334].x)));
        float _2362 = cbSceneParam._m0[33u].z * _2357;
        float _2364 = cbSceneParam._m0[33u].w * _2357;
        float _2367 = fma(_2279, cbSceneParam._m0[_2326].w, fma(_2275, cbSceneParam._m0[_2326].z, fma(_2271, cbSceneParam._m0[_2326].y, _2267 * cbSceneParam._m0[_2326].x))) / _2357;
        float _2415 = (cbSceneParam._m0[33u].x - sqrt(((_2281 * _2281) + (_2280 * _2280)) + (_2282 * _2282))) * cbSceneParam._m0[33u].y;
        float _4754 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2422 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2362 + _2345) / _2357, (_2364 + _2349) / _2357), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2364 + _2345) / _2357, (_2349 - _2362) / _2357), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2345 - _2362) / _2357, (_2349 - _2364) / _2357), _2367), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2345 - _2364) / _2357, (_2362 + _2349) / _2357), _2367), 0.0)).x), vec4(0.25)));
        _2429 = 1.0 - (_2422 * cbSceneParam._m0[34u].x);
        _2430 = 1.0 - (_2422 * cbSceneParam._m0[34u].y);
        _2431 = 1.0 - (_2422 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2429 = 1.0;
        _2430 = 1.0;
        _2431 = 1.0;
    }
    float _2495;
    float _2497;
    float _2499;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2483 = fma(_2279, cbSceneParam._m0[63u].w, fma(_2275, cbSceneParam._m0[63u].z, fma(_2271, cbSceneParam._m0[63u].y, _2267 * cbSceneParam._m0[63u].x)));
        float _2484 = fma(_2279, cbSceneParam._m0[60u].w, fma(_2275, cbSceneParam._m0[60u].z, fma(_2271, cbSceneParam._m0[60u].y, _2267 * cbSceneParam._m0[60u].x))) / _2483;
        float _2485 = fma(_2279, cbSceneParam._m0[61u].w, fma(_2275, cbSceneParam._m0[61u].z, fma(_2271, cbSceneParam._m0[61u].y, _2267 * cbSceneParam._m0[61u].x))) / _2483;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2484 >= cbSceneParam._m0[64u].x) && (_2485 >= cbSceneParam._m0[64u].y)) && (_2484 <= cbSceneParam._m0[64u].z)) && (_2485 <= cbSceneParam._m0[64u].w))
        {
            float _2623 = fma(_2279, cbSceneParam._m0[62u].w, fma(_2275, cbSceneParam._m0[62u].z, fma(_2271, cbSceneParam._m0[62u].y, _2267 * cbSceneParam._m0[62u].x))) / _2483;
            float _2627 = isnan(cbSceneParam._m0[41u].w) ? _2623 : (isnan(_2623) ? cbSceneParam._m0[41u].w : max(_2623, cbSceneParam._m0[41u].w));
            float _2670 = (cbSceneParam._m0[33u].x - sqrt(((_2281 * _2281) + (_2280 * _2280)) + (_2282 * _2282))) * cbSceneParam._m0[33u].y;
            float _4770 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
            float _2677 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2484, cbSceneParam._m0[33u].w + _2485), _2627), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2484, _2485 - cbSceneParam._m0[33u].z), _2627), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2484 - cbSceneParam._m0[33u].z, _2485 - cbSceneParam._m0[33u].w), _2627), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2484 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2485), _2627), 0.0)).x), vec4(0.25)));
            float _2681 = 1.0 - (_2677 * cbSceneParam._m0[34u].x);
            float _2682 = 1.0 - (_2677 * cbSceneParam._m0[34u].y);
            float _2683 = 1.0 - (_2677 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2683) ? _2431 : (isnan(_2431) ? _2683 : min(_2431, _2683));
            frontier_phi_34_33_ladder_1 = isnan(_2682) ? _2430 : (isnan(_2430) ? _2682 : min(_2430, _2682));
            frontier_phi_34_33_ladder_2 = isnan(_2681) ? _2429 : (isnan(_2429) ? _2681 : min(_2429, _2681));
        }
        else
        {
            frontier_phi_34_33_ladder = _2431;
            frontier_phi_34_33_ladder_1 = _2430;
            frontier_phi_34_33_ladder_2 = _2429;
        }
        _2495 = frontier_phi_34_33_ladder_2;
        _2497 = frontier_phi_34_33_ladder_1;
        _2499 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2495 = _2429;
        _2497 = _2430;
        _2499 = _2431;
    }
    uvec4 _2504 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2506 = _2504.x * 14u;
    uint _2507 = _2506 + 13u;
    float _2514 = _1208 + (-1.0);
    float _2519 = (cbLight._m0[_2507].x * _2514) + 1.0;
    float _2520 = (cbLight._m0[_2507].y * _2514) + 1.0;
    float _2521 = (cbLight._m0[_2507].z * _2514) + 1.0;
    float _2522 = (cbLight._m0[_2507].w * _2514) + 1.0;
    uint _2523 = _2506 + 5u;
    float _2529 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
    uint _2533 = _2506 + 4u;
    float _2542 = isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0));
    uint _2546 = _2506 | 1u;
    float _2557 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_1043, _1044, _1045));
    float _2560 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_1043, _1044, _1045));
    float _4806 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _4817 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2565 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * 0.3183098733425140380859375;
    float _2567 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * 0.3183098733425140380859375;
    float _2574 = ((cbLight._m0[_2523].x * _2529) * _2567) + (((cbLight._m0[_2533].x * _2495) * _2542) * _2565);
    float _2575 = ((_2529 * cbLight._m0[_2523].y) * _2567) + (((cbLight._m0[_2533].y * _2497) * _2542) * _2565);
    float _2576 = ((_2529 * cbLight._m0[_2523].z) * _2567) + (((cbLight._m0[_2533].z * _2499) * _2542) * _2565);
    uvec4 _2580 = floatBitsToUint(cbLight._m0[_2506 + 12u]);
    bool _2582 = _2580.x == 0u;
    float _2684;
    float _2686;
    float _2688;
    if (_2582)
    {
        _2684 = _2574;
        _2686 = _2575;
        _2688 = _2576;
    }
    else
    {
        uint _2692 = _2506 + 6u;
        float _2708 = (dot(vec3(cbLight._m0[_2506 + 2u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2709 = _2708 * _2708;
        float _4828 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2710 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2711 = isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0));
        _2684 = (((cbLight._m0[_2692].x * 0.3183098733425140380859375) * _2710) * _2711) + _2574;
        _2686 = (((cbLight._m0[_2692].y * 0.3183098733425140380859375) * _2710) * _2711) + _2575;
        _2688 = (((cbLight._m0[_2692].z * 0.3183098733425140380859375) * _2710) * _2711) + _2576;
    }
    bool _2691 = _2580.y == 0u;
    float _2746;
    float _2748;
    float _2750;
    if (_2691)
    {
        _2746 = _2684;
        _2748 = _2686;
        _2750 = _2688;
    }
    else
    {
        uint _2919 = _2506 + 7u;
        float _2935 = (dot(vec3(cbLight._m0[_2506 + 3u].xyz), vec3(_1043, _1044, _1045)) * 0.5) + 0.5;
        float _2936 = _2935 * _2935;
        float _4844 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
        float _2937 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2938 = isnan(1.0) ? _2522 : (isnan(_2522) ? 1.0 : min(_2522, 1.0));
        _2746 = (((cbLight._m0[_2919].x * 0.3183098733425140380859375) * _2937) * _2938) + _2684;
        _2748 = (((cbLight._m0[_2919].y * 0.3183098733425140380859375) * _2937) * _2938) + _2686;
        _2750 = (((cbLight._m0[_2919].z * 0.3183098733425140380859375) * _2937) * _2938) + _2688;
    }
    uint _2753 = _2506 + 8u;
    float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _1046) * 0.949999988079071044921875);
    float _2767 = _2766 * _2766;
    float _2768 = cbLight._m0[_2506].x + _1122;
    float _2769 = cbLight._m0[_2506].y + _1123;
    float _2770 = cbLight._m0[_2506].z + _1124;
    float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
    float _2775 = _2774 * _2768;
    float _2776 = _2774 * _2769;
    float _2777 = _2774 * _2770;
    float _2778 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2506].xyz));
    float _4860 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
    float _2781 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
    float _4871 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _2782 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2783 = dot(vec3(_1043, _1044, _1045), vec3(_2775, _2776, _2777));
    float _4882 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
    float _2786 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2787 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2775, _2776, _2777));
    float _4893 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2791 = _2767 * _2767;
    float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
    float _2803 = exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0);
    float _2804 = 0.959999978542327880859375 - _1189;
    float _2806 = 0.959999978542327880859375 - _1190;
    float _2807 = 0.959999978542327880859375 - _1191;
    float _2814 = 1.0 - _2767;
    float _2825 = (0.5 / (((_2782 * ((_2781 * _2814) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2782 * _2814) + _2767) * _2781))) * _2781;
    float _4904 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
    float _2827 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
    uint _2841 = _2506 + 9u;
    float _2852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _1046) * 0.949999988079071044921875);
    float _2853 = _2852 * _2852;
    float _2854 = cbLight._m0[_2546].x + _1122;
    float _2855 = cbLight._m0[_2546].y + _1123;
    float _2856 = cbLight._m0[_2546].z + _1124;
    float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
    float _2861 = _2860 * _2854;
    float _2862 = _2860 * _2855;
    float _2863 = _2860 * _2856;
    float _2864 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2546].xyz));
    float _4915 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2867 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
    float _2868 = dot(vec3(_1043, _1044, _1045), vec3(_2861, _2862, _2863));
    float _4926 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2871 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
    float _2872 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2861, _2862, _2863));
    float _4937 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
    float _2876 = _2853 * _2853;
    float _2880 = ((_2871 * _2871) * (_2876 + (-1.0))) + 1.0;
    float _2887 = exp2(log2(1.0 - (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) * 5.0);
    float _2894 = 1.0 - _2853;
    float _2904 = (0.5 / (((_2782 * ((_2867 * _2894) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2782 * _2894) + _2853) * _2867))) * _2867;
    float _4948 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
    float _2906 = (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2876 / ((_2880 * _2880) * 3.141590118408203125));
    float _2916 = (((((_2887 * _2804) + _1192) * cbLight._m0[_2841].x) * _2906) * _2529) + ((((cbLight._m0[_2753].x * _2495) * ((_2803 * _2804) + _1192)) * _2827) * _2542);
    float _2917 = (((((_2887 * _2806) + _1194) * cbLight._m0[_2841].y) * _2906) * _2529) + ((((cbLight._m0[_2753].y * _2497) * ((_2803 * _2806) + _1194)) * _2827) * _2542);
    float _2918 = (((((_2887 * _2807) + _1195) * cbLight._m0[_2841].z) * _2906) * _2529) + ((((cbLight._m0[_2753].z * _2499) * ((_2803 * _2807) + _1195)) * _2827) * _2542);
    float _2974;
    float _2976;
    float _2978;
    if (_2582)
    {
        _2974 = _2916;
        _2976 = _2917;
        _2978 = _2918;
    }
    else
    {
        uint _2980 = _2506 + 2u;
        uint _2984 = _2506 + 10u;
        float _2998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2980].w)) * _1046) * 0.949999988079071044921875);
        float _2999 = _2998 * _2998;
        float _3000 = cbLight._m0[_2980].x + _1122;
        float _3001 = cbLight._m0[_2980].y + _1123;
        float _3002 = cbLight._m0[_2980].z + _1124;
        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
        float _3007 = _3006 * _3000;
        float _3008 = _3006 * _3001;
        float _3009 = _3006 * _3002;
        float _3010 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_2980].xyz));
        float _4959 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3013 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
        float _3014 = dot(vec3(_1043, _1044, _1045), vec3(_3007, _3008, _3009));
        float _4970 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
        float _3018 = dot(vec3(cbLight._m0[_2980].xyz), vec3(_3007, _3008, _3009));
        float _4981 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3022 = _2999 * _2999;
        float _3026 = ((_3017 * _3017) * (_3022 + (-1.0))) + 1.0;
        float _3033 = exp2(log2(1.0 - (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) * 5.0);
        float _3040 = 1.0 - _2999;
        float _3050 = (0.5 / (((_2782 * ((_3013 * _3040) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_2782 * _3040) + _2999) * _3013))) * _3013;
        float _4992 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
        float _3052 = (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_3022 / ((_3026 * _3026) * 3.141590118408203125));
        float _3053 = isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0));
        _2974 = (((((_3033 * _2804) + _1192) * cbLight._m0[_2984].x) * _3052) * _3053) + _2916;
        _2976 = (((((_3033 * _2806) + _1194) * cbLight._m0[_2984].y) * _3052) * _3053) + _2917;
        _2978 = (((((_3033 * _2807) + _1195) * cbLight._m0[_2984].z) * _3052) * _3053) + _2918;
    }
    float _3084;
    float _3086;
    float _3088;
    if (_2691)
    {
        _3084 = _2974;
        _3086 = _2976;
        _3088 = _2978;
    }
    else
    {
        uint _3095 = _2506 + 3u;
        uint _3099 = _2506 + 11u;
        float _3113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3095].w)) * _1046) * 0.949999988079071044921875);
        float _3114 = _3113 * _3113;
        float _3115 = cbLight._m0[_3095].x + _1122;
        float _3116 = cbLight._m0[_3095].y + _1123;
        float _3117 = cbLight._m0[_3095].z + _1124;
        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
        float _3122 = _3121 * _3115;
        float _3123 = _3121 * _3116;
        float _3124 = _3121 * _3117;
        float _3125 = dot(vec3(_1043, _1044, _1045), vec3(cbLight._m0[_3095].xyz));
        float _5008 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
        float _3128 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _3129 = dot(vec3(_1043, _1044, _1045), vec3(_3122, _3123, _3124));
        float _5019 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        float _3132 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
        float _3133 = dot(vec3(cbLight._m0[_3095].xyz), vec3(_3122, _3123, _3124));
        float _5030 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
        float _3137 = _3114 * _3114;
        float _3141 = ((_3132 * _3132) * (_3137 + (-1.0))) + 1.0;
        float _3148 = exp2(log2(1.0 - (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) * 5.0);
        float _3155 = 1.0 - _3114;
        float _3165 = (0.5 / (((_2782 * ((_3128 * _3155) + _3114)) + 9.9999999392252902907785028219223e-09) + (((_2782 * _3155) + _3114) * _3128))) * _3128;
        float _5041 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
        float _3167 = (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3137 / ((_3141 * _3141) * 3.141590118408203125));
        float _3168 = isnan(1.0) ? _2522 : (isnan(_2522) ? 1.0 : min(_2522, 1.0));
        _3084 = (((((_3148 * _2804) + _1192) * cbLight._m0[_3099].x) * _3167) * _3168) + _2974;
        _3086 = (((((_3148 * _2806) + _1194) * cbLight._m0[_3099].y) * _3167) * _3168) + _2976;
        _3088 = (((((_3148 * _2807) + _1195) * cbLight._m0[_3099].z) * _3167) * _3168) + _2978;
    }
    float _3234;
    float _3236;
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    if (_2504.y == 0u)
    {
        uvec4 _3189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3190 = _3189.x;
        uint _3201 = uint((float(_3189.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1131) / _3190))) + floor(float(uint(cbSceneParam._m0[85u].x * _1130) / _3190)));
        float _3211 = (log2(_2282 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3212 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
        uint _3215 = uint(isnan(14.0) ? _3212 : (isnan(_3212) ? 14.0 : min(_3212, 14.0)));
        uvec4 _3220 = texelFetch(g_lightClusterGridBuffer, int(((_3215 << 2u) + (_3201 << 6u)) >> 2u));
        uint _3221 = _3220.x;
        uint _3222 = _3189.z;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        if (((((1u << ((_3222 >> 4u) & 15u)) + 4294967295u) & _3221) == 0u) || ((_3222 & 240u) == 0u))
        {
            _3301 = 0.0;
            _3303 = 0.0;
            _3305 = 0.0;
            _3307 = 0.0;
            _3309 = 0.0;
            _3311 = 0.0;
        }
        else
        {
            float _3302;
            float _3304;
            float _3306;
            float _3308;
            float _3310;
            float _3312;
            float _3446 = 0.0;
            float _3447 = 0.0;
            float _3448 = 0.0;
            float _3449 = 0.0;
            float _3450 = 0.0;
            float _3451 = 0.0;
            uint _3452 = 0u;
            uint _3461;
            bool _3462;
            for (;;)
            {
                _3461 = texelFetch(g_lightClassification, int((((_3215 << 5u) + (_3201 << 9u)) + (_3452 << 2u)) >> 2u)).x;
                _3462 = _3461 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3462)
                {
                    frontier_phi_66_pred = _3451;
                    frontier_phi_66_pred_1 = _3450;
                    frontier_phi_66_pred_2 = _3449;
                    frontier_phi_66_pred_3 = _3448;
                    frontier_phi_66_pred_4 = _3447;
                    frontier_phi_66_pred_5 = _3446;
                }
                else
                {
                    float _3570;
                    float _3571;
                    float _3572;
                    float _3573;
                    float _3574;
                    float _3575;
                    uint _3576;
                    _3570 = _3446;
                    _3571 = _3447;
                    _3572 = _3448;
                    _3573 = _3449;
                    _3574 = _3450;
                    _3575 = _3451;
                    _3576 = _3461;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    float _3507;
                    for (;;)
                    {
                        uint _3580 = uint(findLSB(_3576)) + (_3452 << 5u);
                        uint _3577 = (_3576 + 4294967295u) & _3576;
                        uint _3582 = _3580 * 48u;
                        vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3582)).x, texelFetch(g_PointLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3582 + 3u)).x));
                        uint _3602 = (_3580 * 48u) + 4u;
                        vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3602)).x, texelFetch(g_PointLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3602 + 3u)).x));
                        uint _3621 = (_3580 * 48u) + 8u;
                        vec3 _3632 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3621)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3621 + 2u)).x));
                        float _3636 = _3596.x - _2280;
                        float _3637 = _3596.y - _2281;
                        float _3638 = _3596.z - _2282;
                        float _3639 = dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638));
                        float _3642 = inversesqrt(_3639);
                        float _3643 = _3642 * _3636;
                        float _3644 = _3642 * _3637;
                        float _3645 = _3642 * _3638;
                        float _3646 = dot(vec3(_1149, _1152, _1155), vec3(_3643, _3644, _3645));
                        float _3651 = 1.0 - (_3639 * _3596.w);
                        float _5067 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                        float _3652 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3653 = sqrt(_3639) * _3615.w;
                        float _3656 = 1.39999997615814208984375 / (_3653 + 1.39999997615814208984375);
                        float _3657 = _3656 * _3656;
                        float _3660 = ((1.0 - _3657) * _3646) + _3657;
                        float _3663 = _3653 * _3653;
                        float _3667 = ((isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0))) * _3652) / ((_3663 * 0.699999988079071044921875) + 1.0);
                        float _3671 = (-0.0) - _2280;
                        float _3672 = (-0.0) - _2281;
                        float _3673 = (-0.0) - _2282;
                        float _3677 = inversesqrt(dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673)));
                        float _3678 = _3677 * _3671;
                        float _3679 = _3677 * _3672;
                        float _3680 = _3677 * _3673;
                        float _3687 = exp2(log2(1.0 / ((_3663 * 3.5) + 5.0)) * 0.25);
                        float _3688 = 1.0 - _1224;
                        float _3695 = sqrt(1.0 - ((1.0 - (_3688 * _3688)) * (1.0 - (_3687 * _3687))));
                        float _3696 = _3695 * _3695;
                        float _3697 = _3696 * _3696;
                        float _3698 = _3678 + _3643;
                        float _3699 = _3679 + _3644;
                        float _3700 = _3680 + _3645;
                        float _3704 = inversesqrt(dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700)));
                        float _3708 = dot(vec3(_1149, _1152, _1155), vec3(_3678, _3679, _3680));
                        float _5083 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                        float _3711 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                        float _3712 = dot(vec3(_1149, _1152, _1155), vec3(_3704 * _3698, _3704 * _3699, _3704 * _3700));
                        float _5094 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                        float _3715 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3719 = ((_3715 * _3715) * (_3697 + (-1.0))) + 1.0;
                        float _3720 = _3656 * _3696;
                        float _3721 = _3720 * _3720;
                        float _3724 = ((1.0 - _3721) * _3646) + _3721;
                        float _5105 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                        float _3725 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                        float _3726 = 1.0 - _3696;
                        float _3736 = (0.5 / (((_3725 * ((_3711 * _3726) + _3696)) + 9.9999999392252902907785028219223e-09) + (((_3725 * _3726) + _3696) * _3711))) * _3725;
                        float _5116 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                        float _3747 = (((_3697 * 3.1415927410125732421875) * (isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0)))) / ((_3719 * _3719) * ((_3663 * 2.1991131305694580078125) + 3.141590118408203125))) * _3652;
                        _3505 = (_3667 * _3615.x) + _3573;
                        _3506 = (_3667 * _3615.y) + _3574;
                        _3507 = (_3667 * _3615.z) + _3575;
                        _3502 = (_3747 * _3632.x) + _3570;
                        _3503 = (_3747 * _3632.y) + _3571;
                        _3504 = (_3747 * _3632.z) + _3572;
                        if (_3577 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3570 = _3502;
                            _3571 = _3503;
                            _3572 = _3504;
                            _3573 = _3505;
                            _3574 = _3506;
                            _3575 = _3507;
                            _3576 = _3577;
                        }
                    }
                    frontier_phi_66_pred = _3507;
                    frontier_phi_66_pred_1 = _3506;
                    frontier_phi_66_pred_2 = _3505;
                    frontier_phi_66_pred_3 = _3504;
                    frontier_phi_66_pred_4 = _3503;
                    frontier_phi_66_pred_5 = _3502;
                }
                _3312 = frontier_phi_66_pred;
                _3310 = frontier_phi_66_pred_1;
                _3308 = frontier_phi_66_pred_2;
                _3306 = frontier_phi_66_pred_3;
                _3304 = frontier_phi_66_pred_4;
                _3302 = frontier_phi_66_pred_5;
                uint _3453 = _3452 + 1u;
                if (_3453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3446 = _3302;
                    _3447 = _3304;
                    _3448 = _3306;
                    _3449 = _3308;
                    _3450 = _3310;
                    _3451 = _3312;
                    _3452 = _3453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3301 = _3302;
            _3303 = _3304;
            _3305 = _3306;
            _3307 = _3308;
            _3309 = _3310;
            _3311 = _3312;
        }
        uvec4 _3315 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3316 = _3315.z;
        uint _3318 = (_3316 >> 8u) & 15u;
        float _3414;
        float _3416;
        float _3418;
        float _3420;
        float _3422;
        float _3424;
        if (((4294967295u << _3318) & _3221) == 0u)
        {
            _3414 = _3301;
            _3416 = _3303;
            _3418 = _3305;
            _3420 = _3307;
            _3422 = _3309;
            _3424 = _3311;
        }
        else
        {
            float _3439 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
            float _3440 = _3439 * _2280;
            float _3441 = _3439 * _2281;
            float _3442 = _3439 * _2282;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3318 < ((_3316 >> 12u) & 15u))
            {
                float _3415;
                float _3417;
                float _3419;
                float _3421;
                float _3423;
                float _3425;
                float _3553 = _3301;
                float _3554 = _3303;
                float _3555 = _3305;
                float _3556 = _3307;
                float _3557 = _3309;
                float _3558 = _3311;
                uint _3559 = _3318;
                uint _3568;
                bool _3569;
                for (;;)
                {
                    _3568 = texelFetch(g_lightClassification, int((((_3215 << 5u) + (_3201 << 9u)) + (_3559 << 2u)) >> 2u)).x;
                    _3569 = _3568 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3569)
                    {
                        frontier_phi_72_pred = _3558;
                        frontier_phi_72_pred_1 = _3557;
                        frontier_phi_72_pred_2 = _3556;
                        frontier_phi_72_pred_3 = _3555;
                        frontier_phi_72_pred_4 = _3554;
                        frontier_phi_72_pred_5 = _3553;
                    }
                    else
                    {
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3756;
                        float _3757;
                        float _4045;
                        float _4046;
                        float _4047;
                        float _4048;
                        float _4049;
                        float _4050;
                        float _3765 = _3553;
                        float _3766 = _3554;
                        float _3767 = _3555;
                        float _3768 = _3556;
                        float _3769 = _3557;
                        float _3770 = _3558;
                        uint _3771 = _3568;
                        uint _3772;
                        vec4 _3797;
                        float _3798;
                        vec4 _3813;
                        vec3 _3825;
                        vec4 _3840;
                        vec4 _3855;
                        float _3901;
                        bool _3902;
                        for (;;)
                        {
                            uint _3782 = ((_3559 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3771));
                            _3772 = (_3771 + 4294967295u) & _3771;
                            uint _3784 = _3782 * 40u;
                            _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            _3798 = _3797.w;
                            uint _3800 = (_3782 * 40u) + 4u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3815 = (_3782 * 40u) + 8u;
                            _3825 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x));
                            uint _3827 = (_3782 * 40u) + 16u;
                            _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            uint _3842 = (_3782 * 40u) + 20u;
                            _3855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3842 + 3u)).x));
                            uint _3857 = (_3782 * 40u) + 24u;
                            vec4 _3870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 3u)).x));
                            uint _3876 = (_3782 * 40u) + 28u;
                            vec4 _3889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3876 + 3u)).x));
                            _3901 = fma(_2282, _3889.z, fma(_2281, _3889.y, _3889.x * _2280)) + _3889.w;
                            _3902 = !((fma(_2282, _3870.z, fma(_2281, _3870.y, _3870.x * _2280)) + _3870.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3902)
                            {
                                float _3929 = _3797.x - _2280;
                                float _3930 = _3797.y - _2281;
                                float _3931 = _3797.z - _2282;
                                float _3932 = dot(vec3(_3929, _3930, _3931), vec3(_3929, _3930, _3931));
                                float _3935 = inversesqrt(_3932);
                                float _3936 = _3935 * _3929;
                                float _3937 = _3935 * _3930;
                                float _3938 = _3935 * _3931;
                                float _3942 = 1.0 - (_3932 / (_3798 * _3798));
                                float _5127 = isnan(0.0) ? _3942 : (isnan(_3942) ? 0.0 : max(_3942, 0.0));
                                float _3943 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3947 = sqrt(_3932) * _3813.w;
                                float _3949 = 1.39999997615814208984375 / (_3947 + 1.39999997615814208984375);
                                float _3950 = _3949 * _3949;
                                float _3953 = ((1.0 - _3950) * dot(vec3(_3936, _3937, _3938), vec3(_1149, _1152, _1155))) + _3950;
                                float _3956 = _3947 * _3947;
                                float _3960 = (fma(_2282, _3840.z, fma(_2281, _3840.y, _3840.x * _2280)) + _3840.w) / _3901;
                                float _3961 = (fma(_2282, _3855.z, fma(_2281, _3855.y, _3855.x * _2280)) + _3855.w) / _3901;
                                float _3965 = 1.0 - dot(vec2(_3960, _3961), vec2(_3960, _3961));
                                float _5143 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3966 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                                float _3967 = _3966 * (((isnan(0.0) ? _3953 : (isnan(_3953) ? 0.0 : max(_3953, 0.0))) * _3943) / ((_3956 * 0.699999988079071044921875) + 1.0));
                                float _3979 = exp2(log2(1.0 / ((_3956 * 3.5) + 5.0)) * 0.25);
                                float _3980 = 1.0 - _1224;
                                float _3987 = sqrt(1.0 - ((1.0 - (_3980 * _3980)) * (1.0 - (_3979 * _3979))));
                                float _3988 = _3987 * _3987;
                                float _3989 = _3988 * _3988;
                                float _3990 = _3936 - _3440;
                                float _3991 = _3937 - _3441;
                                float _3992 = _3938 - _3442;
                                float _3996 = inversesqrt(dot(vec3(_3990, _3991, _3992), vec3(_3990, _3991, _3992)));
                                float _4000 = dot(vec3(_1149, _1152, _1155), vec3((-0.0) - _3440, (-0.0) - _3441, (-0.0) - _3442));
                                float _5154 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4003 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _4004 = dot(vec3(_1149, _1152, _1155), vec3(_3996 * _3990, _3996 * _3991, _3996 * _3992));
                                float _5165 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4007 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                                float _4011 = ((_4007 * _4007) * (_3989 + (-1.0))) + 1.0;
                                float _4012 = _3949 * _3988;
                                float _4013 = _4012 * _4012;
                                float _4019 = ((1.0 - _4013) * dot(vec3(_1149, _1152, _1155), vec3(_3936, _3937, _3938))) + _4013;
                                float _5176 = isnan(0.0) ? _4019 : (isnan(_4019) ? 0.0 : max(_4019, 0.0));
                                float _4020 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                                float _4021 = 1.0 - _3988;
                                float _4031 = (0.5 / (((_4020 * ((_4003 * _4021) + _3988)) + 9.9999999392252902907785028219223e-09) + (((_4020 * _4021) + _3988) * _4003))) * _4020;
                                float _5187 = isnan(0.0) ? _4031 : (isnan(_4031) ? 0.0 : max(_4031, 0.0));
                                float _4041 = (_3966 * _3943) * (((_3989 * 3.1415927410125732421875) * (isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0)))) / ((_4011 * _4011) * ((_3956 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3967 * _3813.y;
                                frontier_phi_78_pred_1 = _3967 * _3813.x;
                                frontier_phi_78_pred_2 = _4041 * _3825.z;
                                frontier_phi_78_pred_3 = _4041 * _3825.y;
                                frontier_phi_78_pred_4 = _4041 * _3825.x;
                                frontier_phi_78_pred_5 = _3967 * _3813.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4049 = frontier_phi_78_pred;
                            _4048 = frontier_phi_78_pred_1;
                            _4047 = frontier_phi_78_pred_2;
                            _4046 = frontier_phi_78_pred_3;
                            _4045 = frontier_phi_78_pred_4;
                            _4050 = frontier_phi_78_pred_5;
                            _3755 = _4048 + _3768;
                            _3756 = _4049 + _3769;
                            _3757 = _4050 + _3770;
                            _3752 = _4045 + _3765;
                            _3753 = _4046 + _3766;
                            _3754 = _4047 + _3767;
                            if (_3772 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3765 = _3752;
                                _3766 = _3753;
                                _3767 = _3754;
                                _3768 = _3755;
                                _3769 = _3756;
                                _3770 = _3757;
                                _3771 = _3772;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3757;
                        frontier_phi_72_pred_1 = _3756;
                        frontier_phi_72_pred_2 = _3755;
                        frontier_phi_72_pred_3 = _3754;
                        frontier_phi_72_pred_4 = _3753;
                        frontier_phi_72_pred_5 = _3752;
                    }
                    _3425 = frontier_phi_72_pred;
                    _3423 = frontier_phi_72_pred_1;
                    _3421 = frontier_phi_72_pred_2;
                    _3419 = frontier_phi_72_pred_3;
                    _3417 = frontier_phi_72_pred_4;
                    _3415 = frontier_phi_72_pred_5;
                    uint _3560 = _3559 + 1u;
                    if (_3560 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3553 = _3415;
                        _3554 = _3417;
                        _3555 = _3419;
                        _3556 = _3421;
                        _3557 = _3423;
                        _3558 = _3425;
                        _3559 = _3560;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3425;
                frontier_phi_60_61_ladder_1 = _3423;
                frontier_phi_60_61_ladder_2 = _3419;
                frontier_phi_60_61_ladder_3 = _3417;
                frontier_phi_60_61_ladder_4 = _3415;
                frontier_phi_60_61_ladder_5 = _3421;
            }
            else
            {
                frontier_phi_60_61_ladder = _3311;
                frontier_phi_60_61_ladder_1 = _3309;
                frontier_phi_60_61_ladder_2 = _3305;
                frontier_phi_60_61_ladder_3 = _3303;
                frontier_phi_60_61_ladder_4 = _3301;
                frontier_phi_60_61_ladder_5 = _3307;
            }
            _3414 = frontier_phi_60_61_ladder_4;
            _3416 = frontier_phi_60_61_ladder_3;
            _3418 = frontier_phi_60_61_ladder_2;
            _3420 = frontier_phi_60_61_ladder_5;
            _3422 = frontier_phi_60_61_ladder_1;
            _3424 = frontier_phi_60_61_ladder;
        }
        float _3429 = isnan(1.0) ? _1208 : (isnan(_1208) ? 1.0 : min(_1208, 1.0));
        _3234 = (_3429 * _3420) + _2746;
        _3236 = (_3429 * _3422) + _2748;
        _3238 = (_3429 * _3424) + _2750;
        _3240 = ((_3414 * _1192) * _3429) + _3084;
        _3242 = ((_3416 * _1194) * _3429) + _3086;
        _3244 = ((_3418 * _1195) * _3429) + _3088;
    }
    else
    {
        _3234 = _2746;
        _3236 = _2748;
        _3238 = _2750;
        _3240 = _3084;
        _3242 = _3086;
        _3244 = _3088;
    }
    float _5203 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _5214 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _5225 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    uint _3264 = _273 + 6u;
    float _3272 = _1130 / cbSceneParam._m0[86u].x;
    float _3273 = _1131 / cbSceneParam._m0[86u].y;
    vec4 _3287 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3272, _3273, (log2((isnan(cbSceneParam._m0[77u].w) ? _1065 : (isnan(_1065) ? cbSceneParam._m0[77u].w : min(_1065, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3289 = _3287.x;
    float _3290 = _3287.y;
    float _3291 = _3287.z;
    float _3292 = _3287.w;
    float _3364;
    float _3366;
    float _3368;
    float _3370;
    if (_1065 > cbSceneParam._m0[78u].w)
    {
        float _3326 = isnan(_1065) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1065 : min(cbSceneParam._m0[80u].w, _1065));
        float _3327 = _3326 / _1065;
        float _3338 = _3327 * _1115;
        float _3339 = _1116 * _3327;
        float _3340 = (-0.0) - _3339;
        float _3342 = _3327 * _1117;
        float _3344 = (cbSceneParam._m0[77u].w * _3340) / _3326;
        float _3345 = _3344 + cbSceneParam._m0[79u].w;
        float _3346 = cbSceneParam._m0[79u].w - _3339;
        float _3352 = sqrt(((_3338 * _3338) + (_3339 * _3339)) + (_3342 * _3342));
        float _3355 = (1.0 - (cbSceneParam._m0[77u].w / _3326)) * _3352;
        float _3360 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3362 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3515;
        if (abs((_3340 - _3344) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3515 = ((((_3345 > 0.0) ? exp2(_3360 * _3345) : (2.0 - exp2(_3362 * _3345))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3355;
        }
        else
        {
            float _3475 = 1.0 / cbSceneParam._m0[80u].x;
            float _3476 = isnan(_3346) ? _3345 : (isnan(_3345) ? _3346 : max(_3345, _3346));
            float _3477 = isnan(_3346) ? _3345 : (isnan(_3345) ? _3346 : min(_3345, _3346));
            float _3486 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : min(_3476, 0.0));
            float _3487 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : min(_3477, 0.0));
            _3515 = ((abs(_3352 / _3340) * cbSceneParam._m0[80u].y) * ((((_3486 - _3487) * 2.0) - ((exp2(_3360 * (isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0)))) - exp2(_3360 * (isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))))) * _3475)) - ((exp2(_3362 * _3486) - exp2(_3362 * _3487)) * _3475))) + (_3355 * cbSceneParam._m0[80u].z);
        }
        vec4 _3517 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3272, _3273, 1.0), 0.0);
        float _3526 = exp2((_3515 * (-1.44269502162933349609375)) * (1.0 - _3517.w));
        float _3527 = log2(_3526);
        float _3543 = log2(_3292);
        _3364 = (exp2(_3543 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3527 * cbSceneParam._m0[78u].x)) * _3517.x) / cbSceneParam._m0[78u].x)) + _3289;
        _3366 = (exp2(_3543 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3527 * cbSceneParam._m0[78u].y)) * _3517.y) / cbSceneParam._m0[78u].y)) + _3290;
        _3368 = (exp2(_3543 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3527 * cbSceneParam._m0[78u].z)) * _3517.z) / cbSceneParam._m0[78u].z)) + _3291;
        _3370 = _3526 * _3292;
    }
    else
    {
        _3364 = _3289;
        _3366 = _3290;
        _3368 = _3291;
        _3370 = _3292;
    }
    float _3382 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3383 = _3382 == 3.0;
    float _3384 = log2(_3370);
    float _3391 = exp2(_3384 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0))) * (_3234 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1208))) + ((_3240 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2014)) * cbPerFrame._m0[3u].x));
    float _3392 = exp2(_3384 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0))) * (_3236 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1208))) + ((_3242 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2014)) * cbPerFrame._m0[3u].x));
    float _3393 = exp2(_3384 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0))) * (_3238 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1208))) + ((_3244 + ((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * _2014)) * cbPerFrame._m0[3u].x));
    float _3402 = (_3382 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3402 * (_3383 ? _3391 : (_3391 + (cbSceneParam._m0[72u].w * _3364)));
    SV_Target.y = _3402 * (_3383 ? _3392 : (_3392 + (cbSceneParam._m0[72u].w * _3366)));
    SV_Target.z = _3402 * (_3383 ? _3393 : (_3393 + (cbSceneParam._m0[72u].w * _3368)));
    SV_Target.w = cbInstanceData._m0[_3264].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3264].w;
}


