#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1591;
float _3994;
float _3995;
float _3996;
float _3997;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4006 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4017 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4028 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[23u].w) + _448) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4039 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _473 = (_466 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _474 = (_466 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _475 = (_466 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _514 = _512.x;
    float _524 = dot(vec4(_514, _512.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _538 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_514 - _524) * cbMtdParam._m0[23u].w) + _524) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4050 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _546 = (_539 * ((_492.x * cbMtdParam._m0[13u].x) - _473)) + _473;
    float _547 = (_539 * ((_492.y * cbMtdParam._m0[13u].y) - _474)) + _474;
    float _548 = (_539 * ((_492.z * cbMtdParam._m0[13u].z) - _475)) + _475;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _586 = _584.x;
    float _596 = dot(vec4(_586, _584.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _608 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _399.z) * 2.0) - ((((_586 - _596) * cbMtdParam._m0[23u].w) + _596) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4061 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _616 = (_609 * ((_567.x * cbMtdParam._m0[14u].x) - _546)) + _546;
    float _617 = (_609 * ((_567.y * cbMtdParam._m0[14u].y) - _547)) + _547;
    float _618 = (_609 * ((_567.z * cbMtdParam._m0[14u].z) - _548)) + _548;
    float _622 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _616;
    float _625 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _617;
    float _628 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _618;
    float _635 = ((_616 - _622) * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) + _622;
    float _636 = ((_617 - _625) * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) + _625;
    float _637 = ((_618 - _628) * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) + _628;
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _691 = _689.x;
    float _692 = _689.y;
    float _693 = _689.z;
    float _700 = ((_672.x - _691) * _466) + _691;
    float _701 = ((_672.y - _692) * _466) + _692;
    float _702 = ((_672.z - _693) * _466) + _693;
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _725 = ((_714.x - _700) * _539) + _700;
    float _726 = ((_714.y - _701) * _539) + _701;
    float _727 = ((_714.z - _702) * _539) + _702;
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _752 = ((_739.z - _727) * _609) + _727;
    float _755 = ((((_739.x - _725) * _609) + _725) * 2.0) + (-1.0);
    float _756 = ((((_739.y - _726) * _609) + _726) * 2.0) + (-1.0);
    float _757 = dot(vec2(_755, _756), vec2(_755, _756));
    float _4072 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _762 = sqrt(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))));
    vec4 _782 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _794 = (_755 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_649.x * 2.0) + (-1.0)))) + (((_782.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _795 = (_756 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_649.y * 2.0) + (-1.0)))) + (((_782.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _809 = _807.x;
    float _810 = 1.0 - _809;
    float _838 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_809 - _810) * cbMtdParam._m0[24u].w) + _810) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4083 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _839 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _847 = ((((cbMtdParam._m0[10u].x - _635) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _839) + _635;
    float _848 = ((((cbMtdParam._m0[10u].y - _636) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _839) + _636;
    float _849 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _637)) * _839) + _637;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _877 = _875.x;
    float _895 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _877) * _466) + _877;
    float _913 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _895) * _539) + _895;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _316) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _317) + cbTextureTilingScale._m0[10u].w)).x - _913) * _609) + _913;
    float _934 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _930) * cbMtdParam._m0[19u].z) + _930;
    float _936 = _934 - (_934 * _839);
    float _941 = (((_649.z - _752) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _752;
    float _945 = ((_782.z - _941) * cbMtdParam._m0[19u].w) + _941;
    float _949 = ((cbMtdParam._m0[23u].x - _945) * _839) + _945;
    vec4 _970 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _976 = (_970.x * 2.0) + (-1.0);
    float _977 = (_970.y * 2.0) + (-1.0);
    float _978 = dot(vec2(_976, _977), vec2(_976, _977));
    float _4094 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _994 = (_839 * (((cbMtdParam._m0[22u].z * _794) - _794) + _976)) + _794;
    float _995 = (_839 * (((cbMtdParam._m0[22u].z * _795) - _795) + _977)) + _795;
    float _996 = (_839 * (sqrt(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) - _762)) + _762;
    float _998 = cbMtdParam._m0[22u].x + _782.w;
    float _1001 = fma(_996, _265 * NORMAL.x, fma(_995, _272 * TANGENT.x, (_258 * _250) * _994));
    float _1004 = fma(_996, _265 * NORMAL.y, fma(_995, _272 * TANGENT.y, (_258 * _251) * _994));
    float _1007 = fma(_996, _265 * NORMAL.z, fma(_995, _272 * TANGENT.z, (_258 * _252) * _994));
    float _1011 = inversesqrt(dot(vec3(_1001, _1004, _1007), vec3(_1001, _1004, _1007)));
    float _1012 = _1011 * _1001;
    float _1013 = _1011 * _1004;
    float _1014 = _1011 * _1007;
    float _4105 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _1015 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4127 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4138 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4149 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4160 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _1020 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _1034 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1084 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1074);
    float _1085 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1074);
    float _1086 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1074);
    float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
    float _1091 = _1084 * _1090;
    float _1092 = _1085 * _1090;
    float _1093 = _1086 * _1090;
    vec4 _1098 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1100 = _1098.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1272 = sqrt(((_1084 * _1084) + (_1085 * _1085)) + (_1086 * _1086));
        float _1278 = (cbMatDynParam._m0[5u].x * _1272) + cbMatDynParam._m0[5u].y;
        float _4171 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1283 = (cbMatDynParam._m0[5u].z * _1272) + cbMatDynParam._m0[5u].w;
        float _4182 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) - _1279)) + _1279) < ((_1100 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1111 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1112 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1130 = fma(_1014, cbSceneParam._m0[5u].z, fma(_1013, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1012));
    float _1133 = fma(_1014, cbSceneParam._m0[6u].z, fma(_1013, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1012));
    float _1136 = fma(_1014, cbSceneParam._m0[7u].z, fma(_1013, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1012));
    uint _1149 = _297 + 9u;
    uint _1150 = _1149 + uint(cbMatDynParam._m0[0u].w);
    float _1156 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * cbInstanceData._m0[_1150].x;
    float _1157 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * cbInstanceData._m0[_1150].y;
    float _1158 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_1150].z;
    float _4193 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1159 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
    float _1160 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _1161 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _1162 = 1.0 - _1020;
    float _1163 = _1159 * _1162;
    float _1164 = _1160 * _1162;
    float _1165 = _1161 * _1162;
    float _1170 = (_1159 + (-0.039999999105930328369140625)) * _1020;
    float _1171 = (_1160 + (-0.039999999105930328369140625)) * _1020;
    float _1172 = (_1161 + (-0.039999999105930328369140625)) * _1020;
    float _1173 = _1170 + 0.039999999105930328369140625;
    float _1175 = _1171 + 0.039999999105930328369140625;
    float _1176 = _1172 + 0.039999999105930328369140625;
    vec4 _1185 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1111, cbSceneParam._m0[86u].y * _1112));
    float _1189 = ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * TEXCOORD_5.w) * _1185.x;
    float _1190 = dot(vec3(_1012, _1013, _1014), vec3(_1091, _1092, _1093));
    float _1193 = _1190 * 2.0;
    float _1197 = (_1193 * _1012) - _1091;
    float _1198 = (_1193 * _1013) - _1092;
    float _1199 = (_1193 * _1014) - _1093;
    float _1203 = abs(dot(vec3(_1091, _1092, _1093), vec3(_1012, _1013, _1014)));
    float _4226 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1205 = sqrt(_1015);
    float _1218 = exp2((_1205 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1205 * 3.0));
    float _1224 = (1.0 - _1218) * ((_1205 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1225 = _1218 * _1205;
    float _1253 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1257 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1261 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1590;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1315 = fma(_1261, cbModelParam._m0[26u].z, fma(_1257, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1253));
        float _1319 = fma(_1261, cbModelParam._m0[27u].z, fma(_1257, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1253));
        float _1323 = fma(_1261, cbModelParam._m0[28u].z, fma(_1257, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1253));
        float _1348 = _1253 + _1012;
        float _1349 = _1257 + _1013;
        float _1350 = _1261 + _1014;
        float _1360 = fma(_1350, cbModelParam._m0[26u].z, fma(_1349, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1348)) - _1315;
        float _1361 = fma(_1350, cbModelParam._m0[27u].z, fma(_1349, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1348)) - _1319;
        float _1362 = fma(_1350, cbModelParam._m0[28u].z, fma(_1349, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1348)) - _1323;
        float _1366 = inversesqrt(dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362)));
        float _1379 = ((_1366 * _1360) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1315 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1366 * _1361) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1319 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1381 = ((_1366 * _1362) / cbModelParam._m0[34u].z) + ((((((_1323 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1379, _1380, _1381), 0.0);
        float _1418 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1384.x + (-0.5));
        float _1420 = _1418 * (_1384.y + (-0.5));
        float _1421 = _1418 * (_1384.z + (-0.5));
        float _1428 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1391.x + (-0.5));
        float _1430 = _1428 * (_1391.y + (-0.5));
        float _1431 = _1428 * (_1391.z + (-0.5));
        float _1438 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1398.x + (-0.5));
        float _1440 = _1438 * (_1398.y + (-0.5));
        float _1441 = _1438 * (_1398.z + (-0.5));
        float _1448 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1405.x + (-0.5));
        float _1450 = _1448 * (_1405.y + (-0.5));
        float _1451 = _1448 * (_1405.z + (-0.5));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = _1419 * 0.5;
        float _1456 = _1429 * 0.5;
        float _1457 = _1439 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1472 = (dot(vec3(_1012, _1013, _1014), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1482 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4274 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1484 + 1.0))) + _1489) * _1452;
        float _1499 = _1420 * 0.5;
        float _1500 = _1430 * 0.5;
        float _1501 = _1440 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_1012, _1013, _1014), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4307 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1526 + 1.0))) + _1531) * _1453;
        float _1541 = _1421 * 0.5;
        float _1542 = _1431 * 0.5;
        float _1543 = _1441 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_1012, _1013, _1014), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4340 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1568 + 1.0))) + _1573) * _1454;
        _1590 = _1421;
        _1592 = _1420;
        _1593 = _1419;
        _1594 = _1431;
        _1595 = _1430;
        _1596 = _1429;
        _1597 = _1441;
        _1598 = _1440;
        _1599 = _1439;
        _1600 = _1454;
        _1601 = _1453;
        _1602 = _1452;
        _1603 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
        _1604 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1605 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
    }
    else
    {
        _1590 = _1591;
        _1592 = _1591;
        _1593 = _1591;
        _1594 = _1591;
        _1595 = _1591;
        _1596 = _1591;
        _1597 = _1591;
        _1598 = _1591;
        _1599 = _1591;
        _1600 = _1591;
        _1601 = _1591;
        _1602 = _1591;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1631 = fma(_1261, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1253));
        float _1635 = fma(_1261, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1253));
        float _1639 = fma(_1261, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1253));
        float _1662 = _1253 + _1012;
        float _1663 = _1257 + _1013;
        float _1664 = _1261 + _1014;
        float _1674 = fma(_1664, cbModelParam._m0[30u].z, fma(_1663, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1662)) - _1631;
        float _1675 = fma(_1664, cbModelParam._m0[31u].z, fma(_1663, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1662)) - _1635;
        float _1676 = fma(_1664, cbModelParam._m0[32u].z, fma(_1663, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1662)) - _1639;
        float _1680 = inversesqrt(dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676)));
        float _1693 = ((_1680 * _1674) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1631 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1694 = ((_1680 * _1675) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1635 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1695 = ((_1680 * _1676) / cbModelParam._m0[35u].z) + ((((((_1639 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1697 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1693, _1694, _1695), 0.0);
        float _1730 = exp2((_1697.w + (-0.5)) * 20.0) * 2.0;
        float _1731 = _1730 * (_1697.x + (-0.5));
        float _1732 = _1730 * (_1697.y + (-0.5));
        float _1733 = _1730 * (_1697.z + (-0.5));
        float _1740 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1741 = _1740 * (_1704.x + (-0.5));
        float _1742 = _1740 * (_1704.y + (-0.5));
        float _1743 = _1740 * (_1704.z + (-0.5));
        float _1750 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1711.x + (-0.5));
        float _1752 = _1750 * (_1711.y + (-0.5));
        float _1753 = _1750 * (_1711.z + (-0.5));
        float _1760 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1718.x + (-0.5));
        float _1762 = _1760 * (_1718.y + (-0.5));
        float _1763 = _1760 * (_1718.z + (-0.5));
        float _1764 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1765 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1766 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1767 = _1731 * 0.5;
        float _1768 = _1741 * 0.5;
        float _1769 = _1751 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_1012, _1013, _1014), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1764 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4403 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1794 + 1.0))) + _1799) * _1764;
        float _1809 = _1732 * 0.5;
        float _1810 = _1742 * 0.5;
        float _1811 = _1752 * 0.5;
        float _1812 = dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811));
        float _1817 = (_1812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1812);
        float _1825 = (dot(vec3(_1012, _1013, _1014), vec3(_1817 * _1809, _1817 * _1810, _1817 * _1811)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1834 = sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811)) / (_1765 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1836 = _1835 * 2.0;
        float _1840 = (1.0 - _1835) / (_1835 + 1.0);
        float _4436 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1850 = ((((1.0 - _1841) * (_1836 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1836 + 1.0))) + _1841) * _1765;
        float _1851 = _1733 * 0.5;
        float _1852 = _1743 * 0.5;
        float _1853 = _1753 * 0.5;
        float _1854 = dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853));
        float _1859 = (_1854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1854);
        float _1867 = (dot(vec3(_1012, _1013, _1014), vec3(_1859 * _1851, _1859 * _1852, _1859 * _1853)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1876 = sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853)) / (_1766 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1878 = _1877 * 2.0;
        float _1882 = (1.0 - _1877) / (_1877 + 1.0);
        float _4469 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1892 = ((((1.0 - _1883) * (_1878 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1878 + 1.0))) + _1883) * _1766;
        _1900 = _1733;
        _1901 = _1732;
        _1902 = _1731;
        _1903 = _1743;
        _1904 = _1742;
        _1905 = _1741;
        _1906 = _1753;
        _1907 = _1752;
        _1908 = _1751;
        _1909 = _1766;
        _1910 = _1765;
        _1911 = _1764;
        _1912 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
        _1913 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)));
        _1914 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)));
    }
    else
    {
        _1900 = _1591;
        _1901 = _1591;
        _1902 = _1591;
        _1903 = _1591;
        _1904 = _1591;
        _1905 = _1591;
        _1906 = _1591;
        _1907 = _1591;
        _1908 = _1591;
        _1909 = _1591;
        _1910 = _1591;
        _1911 = _1591;
        _1912 = 0.0;
        _1913 = 0.0;
        _1914 = 0.0;
    }
    float _1924 = (cbModelParam._m0[1u].x * (_1912 - _1603)) + _1603;
    float _1925 = (cbModelParam._m0[1u].x * (_1913 - _1604)) + _1604;
    float _1926 = (cbModelParam._m0[1u].x * (_1914 - _1605)) + _1605;
    float _1947 = fma(_1926, cbSceneParam._m0[89u].z, fma(_1925, cbSceneParam._m0[89u].y, _1924 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1926, cbSceneParam._m0[90u].z, fma(_1925, cbSceneParam._m0[90u].y, _1924 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1926, cbSceneParam._m0[91u].z, fma(_1925, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1924));
    float _1968 = _1197 * 0.5;
    float _1969 = _1198 * 0.5;
    float _1970 = _1199 * 0.5;
    float _1971 = dot(vec4(_1968, _1969, _1970, 1.0), vec4(_1902, _1905, _1908, _1911));
    float _1974 = dot(vec4(_1968, _1969, _1970, 1.0), vec4(_1901, _1904, _1907, _1910));
    float _1977 = dot(vec4(_1968, _1969, _1970, 1.0), vec4(_1900, _1903, _1906, _1909));
    float _2011;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1984 = dot(vec4(_1968, _1969, _1970, 1.0), vec4(_1590, _1594, _1597, _1600));
        float _1988 = dot(vec4(_1968, _1969, _1970, 1.0), vec4(_1592, _1595, _1598, _1601));
        float _1992 = dot(vec4(_1968, _1969, _1970, 1.0), vec4(_1593, _1596, _1599, _1602));
        float _1999 = dot(vec4(cbModelParam._m0[39u]), vec4(_1968, _1969, _1970, 1.0));
        _2011 = dot(vec3(isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)), isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1999) ? 0.0 : (isnan(0.0) ? _1999 : max(0.0, _1999))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2011 = 1.0;
    }
    float _2022;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2013 = dot(vec4(cbModelParam._m0[40u]), vec4(_1968, _1969, _1970, 1.0));
        _2022 = dot(vec3(isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2013) ? 0.0 : (isnan(0.0) ? _2013 : max(0.0, _2013))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2022 = 1.0;
    }
    float _2026 = (_2022 * cbModelParam._m0[1u].x) + (_2011 * (1.0 - cbModelParam._m0[1u].x));
    float _2036 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1015);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2036 : min(cbModelParam._m0[25u].z, _2036));
    float _2118;
    float _2120;
    float _2122;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2085 = fma(_1261, cbModelParam._m0[13u].z, fma(_1257, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1253)) + cbModelParam._m0[13u].w;
        float _2089 = fma(_1261, cbModelParam._m0[14u].z, fma(_1257, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1253)) + cbModelParam._m0[14u].w;
        float _2093 = fma(_1261, cbModelParam._m0[15u].z, fma(_1257, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1253)) + cbModelParam._m0[15u].w;
        float _2096 = fma(_1199, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1197));
        float _2099 = fma(_1199, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1197));
        float _2102 = fma(_1199, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1197));
        float _2130;
        if (_2096 > 0.0)
        {
            _2130 = abs((1.0 - _2085) / _2096);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2096 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2085 + 1.0) / _2096);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2130 = frontier_phi_17_15_ladder;
        }
        float _2354;
        if (_2099 > 0.0)
        {
            _2354 = abs((1.0 - _2089) / _2099);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2089 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2354 = frontier_phi_26_22_ladder;
        }
        float _2611;
        if (_2102 > 0.0)
        {
            _2611 = abs((1.0 - _2093) / _2102);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2093 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2611 = frontier_phi_38_33_ladder;
        }
        float _2613 = isnan(_2354) ? _2130 : (isnan(_2130) ? _2354 : min(_2130, _2354));
        float _2614 = isnan(_2611) ? _2613 : (isnan(_2613) ? _2611 : min(_2613, _2611));
        float _2618 = (_2614 * _2096) + _2085;
        float _2619 = (_2614 * _2099) + _2089;
        float _2620 = (_2614 * _2102) + _2093;
        float _2621 = _2614 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2621;
        float _2625 = _2621 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 > _2625) || ((_2619 < _2623) || ((_2618 < _2623) || (_2618 > _2625))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2620, cbModelParam._m0[9u].z, fma(_2619, cbModelParam._m0[9u].y, _2618 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2620, cbModelParam._m0[10u].z, fma(_2619, cbModelParam._m0[10u].y, _2618 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2620, cbModelParam._m0[11u].z, fma(_2619, cbModelParam._m0[11u].y, _2618 * cbModelParam._m0[11u].x))), _2037);
            frontier_phi_16_38_ladder = _2748.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2748.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2748.x * cbModelParam._m0[1u].y;
        }
        _2118 = frontier_phi_16_38_ladder_2;
        _2120 = frontier_phi_16_38_ladder_1;
        _2122 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2106 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1197, _1198, _1199), _2037);
        _2118 = _2106.x * cbModelParam._m0[1u].y;
        _2120 = _2106.y * cbModelParam._m0[1u].y;
        _2122 = _2106.z * cbModelParam._m0[1u].y;
    }
    float _2126 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1015);
    float _2127 = isnan(_2126) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2126 : min(cbModelParam._m0[25u].w, _2126));
    float _2217;
    float _2219;
    float _2221;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2181 = fma(_1261, cbModelParam._m0[21u].z, fma(_1257, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1253)) + cbModelParam._m0[21u].w;
        float _2185 = fma(_1261, cbModelParam._m0[22u].z, fma(_1257, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1253)) + cbModelParam._m0[22u].w;
        float _2189 = fma(_1261, cbModelParam._m0[23u].z, fma(_1257, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1253)) + cbModelParam._m0[23u].w;
        float _2192 = fma(_1199, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1197));
        float _2195 = fma(_1199, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1197));
        float _2198 = fma(_1199, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1197));
        float _2359;
        if (_2192 > 0.0)
        {
            _2359 = abs((1.0 - _2181) / _2192);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2192 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2181 + 1.0) / _2192);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2359 = frontier_phi_28_24_ladder;
        }
        float _2638;
        if (_2195 > 0.0)
        {
            _2638 = abs((1.0 - _2185) / _2195);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2185 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2638 = frontier_phi_40_35_ladder;
        }
        float _2851;
        if (_2198 > 0.0)
        {
            _2851 = abs((1.0 - _2189) / _2198);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2189 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2851 = frontier_phi_49_46_ladder;
        }
        float _2853 = isnan(_2638) ? _2359 : (isnan(_2359) ? _2638 : min(_2359, _2638));
        float _2854 = isnan(_2851) ? _2853 : (isnan(_2853) ? _2851 : min(_2853, _2851));
        float _2858 = (_2854 * _2192) + _2181;
        float _2859 = (_2854 * _2195) + _2185;
        float _2860 = (_2854 * _2198) + _2189;
        float _2861 = _2854 * 9.9999997473787516355514526367188e-05;
        float _2862 = (-1.0) - _2861;
        float _2864 = _2861 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2860 > _2864) || ((_2860 < _2862) || ((_2859 > _2864) || ((_2859 < _2862) || ((_2858 < _2862) || (_2858 > _2864))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3059 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2860, cbModelParam._m0[17u].z, fma(_2859, cbModelParam._m0[17u].y, _2858 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2860, cbModelParam._m0[18u].z, fma(_2859, cbModelParam._m0[18u].y, _2858 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2860, cbModelParam._m0[19u].z, fma(_2859, cbModelParam._m0[19u].y, _2858 * cbModelParam._m0[19u].x))), _2127);
            frontier_phi_25_49_ladder = _3059.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3059.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3059.x * cbModelParam._m0[1u].z;
        }
        _2217 = frontier_phi_25_49_ladder_2;
        _2219 = frontier_phi_25_49_ladder_1;
        _2221 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2201 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1197, _1198, _1199), _2127);
        _2217 = _2201.x * cbModelParam._m0[1u].z;
        _2219 = _2201.y * cbModelParam._m0[1u].z;
        _2221 = _2201.z * cbModelParam._m0[1u].z;
    }
    float _2234 = (((_1224 * _1173) + _1225) * _1189) * ((cbModelParam._m0[1u].w * (_2217 - _2118)) + _2118);
    float _2236 = (((_1224 * _1175) + _1225) * _1189) * ((cbModelParam._m0[1u].w * (_2219 - _2120)) + _2120);
    float _2238 = (((_1224 * _1176) + _1225) * _1189) * ((cbModelParam._m0[1u].w * (_2221 - _2122)) + _2122);
    float _2241 = fma(_2238, cbSceneParam._m0[89u].z, fma(_2236, cbSceneParam._m0[89u].y, _2234 * cbSceneParam._m0[89u].x));
    float _2244 = fma(_2238, cbSceneParam._m0[90u].z, fma(_2236, cbSceneParam._m0[90u].y, _2234 * cbSceneParam._m0[90u].x));
    float _2247 = fma(_2238, cbSceneParam._m0[91u].z, fma(_2236, cbSceneParam._m0[91u].y, _2234 * cbSceneParam._m0[91u].x));
    vec4 _2255 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1111, _1112));
    float _2257 = _2255.w;
    float _2269 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2257);
    float _2270 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2257);
    float _2271 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2257);
    uvec4 _2275 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2277 = _2275.x * 14u;
    uint _2278 = _2277 + 13u;
    float _2285 = _1189 + (-1.0);
    float _2290 = (cbLight._m0[_2278].x * _2285) + 1.0;
    float _2291 = (cbLight._m0[_2278].y * _2285) + 1.0;
    float _2292 = (cbLight._m0[_2278].z * _2285) + 1.0;
    float _2293 = (cbLight._m0[_2278].w * _2285) + 1.0;
    uint _2294 = _2277 + 5u;
    float _2300 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
    uint _2304 = _2277 + 4u;
    float _2313 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2317 = _2277 | 1u;
    float _2328 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_1012, _1013, _1014));
    float _2331 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_1012, _1013, _1014));
    float _4605 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _4616 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2336 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * 0.3183098733425140380859375;
    float _2338 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2345 = ((cbLight._m0[_2294].x * _2300) * _2338) + (((cbLight._m0[_2304].x * _2269) * _2313) * _2336);
    float _2346 = ((_2300 * cbLight._m0[_2294].y) * _2338) + (((cbLight._m0[_2304].y * _2270) * _2313) * _2336);
    float _2347 = ((_2300 * cbLight._m0[_2294].z) * _2338) + (((cbLight._m0[_2304].z * _2271) * _2313) * _2336);
    uvec4 _2351 = floatBitsToUint(cbLight._m0[_2277 + 12u]);
    bool _2353 = _2351.x == 0u;
    float _2364;
    float _2366;
    float _2368;
    if (_2353)
    {
        _2364 = _2345;
        _2366 = _2346;
        _2368 = _2347;
    }
    else
    {
        uint _2372 = _2277 + 6u;
        float _2388 = (dot(vec3(cbLight._m0[_2277 + 2u].xyz), vec3(_1012, _1013, _1014)) * 0.5) + 0.5;
        float _2389 = _2388 * _2388;
        float _4627 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2390 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2391 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2364 = (((cbLight._m0[_2372].x * 0.3183098733425140380859375) * _2390) * _2391) + _2345;
        _2366 = (((cbLight._m0[_2372].y * 0.3183098733425140380859375) * _2390) * _2391) + _2346;
        _2368 = (((cbLight._m0[_2372].z * 0.3183098733425140380859375) * _2390) * _2391) + _2347;
    }
    bool _2371 = _2351.y == 0u;
    float _2409;
    float _2411;
    float _2413;
    if (_2371)
    {
        _2409 = _2364;
        _2411 = _2366;
        _2413 = _2368;
    }
    else
    {
        uint _2582 = _2277 + 7u;
        float _2598 = (dot(vec3(cbLight._m0[_2277 + 3u].xyz), vec3(_1012, _1013, _1014)) * 0.5) + 0.5;
        float _2599 = _2598 * _2598;
        float _4643 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2600 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2601 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2409 = (((cbLight._m0[_2582].x * 0.3183098733425140380859375) * _2600) * _2601) + _2364;
        _2411 = (((cbLight._m0[_2582].y * 0.3183098733425140380859375) * _2600) * _2601) + _2366;
        _2413 = (((cbLight._m0[_2582].z * 0.3183098733425140380859375) * _2600) * _2601) + _2368;
    }
    uint _2416 = _2277 + 8u;
    float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _1015) * 0.949999988079071044921875);
    float _2430 = _2429 * _2429;
    float _2431 = cbLight._m0[_2277].x + _1091;
    float _2432 = cbLight._m0[_2277].y + _1092;
    float _2433 = cbLight._m0[_2277].z + _1093;
    float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
    float _2438 = _2437 * _2431;
    float _2439 = _2437 * _2432;
    float _2440 = _2437 * _2433;
    float _2441 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2277].xyz));
    float _4659 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _4670 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _2445 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2446 = dot(vec3(_1012, _1013, _1014), vec3(_2438, _2439, _2440));
    float _4681 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2449 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2450 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2438, _2439, _2440));
    float _4692 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2454 = _2430 * _2430;
    float _2458 = ((_2449 * _2449) * (_2454 + (-1.0))) + 1.0;
    float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
    float _2467 = 0.959999978542327880859375 - _1170;
    float _2469 = 0.959999978542327880859375 - _1171;
    float _2470 = 0.959999978542327880859375 - _1172;
    float _2477 = 1.0 - _2430;
    float _2488 = (0.5 / (((_2445 * ((_2444 * _2477) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2477) + _2430) * _2444))) * _2444;
    float _4703 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2490 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2454 / ((_2458 * _2458) * 3.141590118408203125));
    uint _2504 = _2277 + 9u;
    float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _1015) * 0.949999988079071044921875);
    float _2516 = _2515 * _2515;
    float _2517 = cbLight._m0[_2317].x + _1091;
    float _2518 = cbLight._m0[_2317].y + _1092;
    float _2519 = cbLight._m0[_2317].z + _1093;
    float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
    float _2524 = _2523 * _2517;
    float _2525 = _2523 * _2518;
    float _2526 = _2523 * _2519;
    float _2527 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2317].xyz));
    float _4714 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2531 = dot(vec3(_1012, _1013, _1014), vec3(_2524, _2525, _2526));
    float _4725 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2524, _2525, _2526));
    float _4736 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2516 * _2516;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
    float _2557 = 1.0 - _2516;
    float _2567 = (0.5 / (((_2445 * ((_2530 * _2557) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2557) + _2516) * _2530))) * _2530;
    float _4747 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    float _2579 = (((((_2550 * _2467) + _1173) * cbLight._m0[_2504].x) * _2569) * _2300) + ((((cbLight._m0[_2416].x * _2269) * ((_2466 * _2467) + _1173)) * _2490) * _2313);
    float _2580 = (((((_2550 * _2469) + _1175) * cbLight._m0[_2504].y) * _2569) * _2300) + ((((cbLight._m0[_2416].y * _2270) * ((_2466 * _2469) + _1175)) * _2490) * _2313);
    float _2581 = (((((_2550 * _2470) + _1176) * cbLight._m0[_2504].z) * _2569) * _2300) + ((((cbLight._m0[_2416].z * _2271) * ((_2466 * _2470) + _1176)) * _2490) * _2313);
    float _2643;
    float _2645;
    float _2647;
    if (_2353)
    {
        _2643 = _2579;
        _2645 = _2580;
        _2647 = _2581;
    }
    else
    {
        uint _2649 = _2277 + 2u;
        uint _2653 = _2277 + 10u;
        float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _1015) * 0.949999988079071044921875);
        float _2668 = _2667 * _2667;
        float _2669 = cbLight._m0[_2649].x + _1091;
        float _2670 = cbLight._m0[_2649].y + _1092;
        float _2671 = cbLight._m0[_2649].z + _1093;
        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
        float _2676 = _2675 * _2669;
        float _2677 = _2675 * _2670;
        float _2678 = _2675 * _2671;
        float _2679 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2649].xyz));
        float _4758 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2683 = dot(vec3(_1012, _1013, _1014), vec3(_2676, _2677, _2678));
        float _4769 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2687 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2676, _2677, _2678));
        float _4780 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2691 = _2668 * _2668;
        float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
        float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
        float _2709 = 1.0 - _2668;
        float _2719 = (0.5 / (((_2445 * ((_2682 * _2709) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2709) + _2668) * _2682))) * _2682;
        float _4791 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2643 = (((((_2702 * _2467) + _1173) * cbLight._m0[_2653].x) * _2721) * _2722) + _2579;
        _2645 = (((((_2702 * _2469) + _1175) * cbLight._m0[_2653].y) * _2721) * _2722) + _2580;
        _2647 = (((((_2702 * _2470) + _1176) * cbLight._m0[_2653].z) * _2721) * _2722) + _2581;
    }
    float _2757;
    float _2759;
    float _2761;
    if (_2371)
    {
        _2757 = _2643;
        _2759 = _2645;
        _2761 = _2647;
    }
    else
    {
        uint _2768 = _2277 + 3u;
        uint _2772 = _2277 + 11u;
        float _2786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2768].w)) * _1015) * 0.949999988079071044921875);
        float _2787 = _2786 * _2786;
        float _2788 = cbLight._m0[_2768].x + _1091;
        float _2789 = cbLight._m0[_2768].y + _1092;
        float _2790 = cbLight._m0[_2768].z + _1093;
        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
        float _2795 = _2794 * _2788;
        float _2796 = _2794 * _2789;
        float _2797 = _2794 * _2790;
        float _2798 = dot(vec3(_1012, _1013, _1014), vec3(cbLight._m0[_2768].xyz));
        float _4807 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2802 = dot(vec3(_1012, _1013, _1014), vec3(_2795, _2796, _2797));
        float _4818 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2806 = dot(vec3(cbLight._m0[_2768].xyz), vec3(_2795, _2796, _2797));
        float _4829 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2810 = _2787 * _2787;
        float _2814 = ((_2805 * _2805) * (_2810 + (-1.0))) + 1.0;
        float _2821 = exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0);
        float _2828 = 1.0 - _2787;
        float _2838 = (0.5 / (((_2445 * ((_2801 * _2828) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2445 * _2828) + _2787) * _2801))) * _2801;
        float _4840 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2840 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2810 / ((_2814 * _2814) * 3.141590118408203125));
        float _2841 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2757 = (((((_2821 * _2467) + _1173) * cbLight._m0[_2772].x) * _2840) * _2841) + _2643;
        _2759 = (((((_2821 * _2469) + _1175) * cbLight._m0[_2772].y) * _2840) * _2841) + _2645;
        _2761 = (((((_2821 * _2470) + _1176) * cbLight._m0[_2772].z) * _2840) * _2841) + _2647;
    }
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    if (_2275.y == 0u)
    {
        float _2916 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2917 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2916;
        float _2918 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2916;
        float _2919 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2916;
        uvec4 _2931 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2932 = _2931.x;
        uint _2943 = uint((float(_2931.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1112) / _2932))) + floor(float(uint(cbSceneParam._m0[85u].x * _1111) / _2932)));
        float _2953 = (log2(_2919 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2954 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        uint _2957 = uint(isnan(14.0) ? _2954 : (isnan(_2954) ? 14.0 : min(_2954, 14.0)));
        uvec4 _2962 = texelFetch(g_lightClusterGridBuffer, int(((_2957 << 2u) + (_2943 << 6u)) >> 2u));
        uint _2963 = _2962.x;
        uint _2964 = _2931.z;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((((1u << ((_2964 >> 4u) & 15u)) + 4294967295u) & _2963) == 0u) || ((_2964 & 240u) == 0u))
        {
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
        }
        else
        {
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            uint _3223 = 0u;
            uint _3232;
            bool _3233;
            for (;;)
            {
                _3232 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3223 << 2u)) >> 2u)).x;
                _3233 = _3232 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3233)
                {
                    frontier_phi_66_pred = _3217;
                    frontier_phi_66_pred_1 = _3222;
                    frontier_phi_66_pred_2 = _3221;
                    frontier_phi_66_pred_3 = _3220;
                    frontier_phi_66_pred_4 = _3219;
                    frontier_phi_66_pred_5 = _3218;
                }
                else
                {
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    uint _3368;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3232;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    for (;;)
                    {
                        uint _3372 = uint(findLSB(_3368)) + (_3223 << 5u);
                        uint _3369 = (_3368 + 4294967295u) & _3368;
                        uint _3374 = _3372 * 48u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3394 = (_3372 * 48u) + 4u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3413 = (_3372 * 48u) + 8u;
                        vec3 _3424 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x));
                        float _3428 = _3388.x - _2917;
                        float _3429 = _3388.y - _2918;
                        float _3430 = _3388.z - _2919;
                        float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                        float _3434 = inversesqrt(_3431);
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3438 = dot(vec3(_1130, _1133, _1136), vec3(_3435, _3436, _3437));
                        float _3443 = 1.0 - (_3431 * _3388.w);
                        float _4866 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3445 = sqrt(_3431) * _3407.w;
                        float _3448 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3438) + _3449;
                        float _3455 = _3445 * _3445;
                        float _3459 = ((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3444) / ((_3455 * 0.699999988079071044921875) + 1.0);
                        float _3463 = (-0.0) - _2917;
                        float _3464 = (-0.0) - _2918;
                        float _3465 = (-0.0) - _2919;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3480 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                        float _3481 = 1.0 - _1205;
                        float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                        float _3489 = _3488 * _3488;
                        float _3490 = _3489 * _3489;
                        float _3491 = _3470 + _3435;
                        float _3492 = _3471 + _3436;
                        float _3493 = _3472 + _3437;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3501 = dot(vec3(_1130, _1133, _1136), vec3(_3470, _3471, _3472));
                        float _4882 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3505 = dot(vec3(_1130, _1133, _1136), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                        float _4893 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                        float _3513 = _3448 * _3489;
                        float _3514 = _3513 * _3513;
                        float _3517 = ((1.0 - _3514) * _3438) + _3514;
                        float _4904 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3518 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3519 = 1.0 - _3489;
                        float _3529 = (0.5 / (((_3518 * ((_3504 * _3519) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3489) * _3504))) * _3518;
                        float _4915 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3540 = (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3512 * _3512) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125))) * _3444;
                        _3292 = (_3459 * _3407.x) + _3365;
                        _3293 = (_3459 * _3407.y) + _3366;
                        _3294 = (_3459 * _3407.z) + _3367;
                        _3289 = (_3540 * _3424.x) + _3362;
                        _3290 = (_3540 * _3424.y) + _3363;
                        _3291 = (_3540 * _3424.z) + _3364;
                        if (_3369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3369;
                        }
                    }
                    frontier_phi_66_pred = _3289;
                    frontier_phi_66_pred_1 = _3294;
                    frontier_phi_66_pred_2 = _3293;
                    frontier_phi_66_pred_3 = _3292;
                    frontier_phi_66_pred_4 = _3291;
                    frontier_phi_66_pred_5 = _3290;
                }
                _3065 = frontier_phi_66_pred;
                _3075 = frontier_phi_66_pred_1;
                _3073 = frontier_phi_66_pred_2;
                _3071 = frontier_phi_66_pred_3;
                _3069 = frontier_phi_66_pred_4;
                _3067 = frontier_phi_66_pred_5;
                uint _3224 = _3223 + 1u;
                if (_3224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3217 = _3065;
                    _3218 = _3067;
                    _3219 = _3069;
                    _3220 = _3071;
                    _3221 = _3073;
                    _3222 = _3075;
                    _3223 = _3224;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
        }
        uvec4 _3078 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3079 = _3078.z;
        uint _3081 = (_3079 >> 8u) & 15u;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        if (((4294967295u << _3081) & _2963) == 0u)
        {
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
        }
        else
        {
            float _3210 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
            float _3211 = _3210 * _2917;
            float _3212 = _3210 * _2918;
            float _3213 = _3210 * _2919;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3081 < ((_3079 >> 12u) & 15u))
            {
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3345 = _3064;
                float _3346 = _3066;
                float _3347 = _3068;
                float _3348 = _3070;
                float _3349 = _3072;
                float _3350 = _3074;
                uint _3351 = _3081;
                uint _3360;
                bool _3361;
                for (;;)
                {
                    _3360 = texelFetch(g_lightClassification, int((((_2957 << 5u) + (_2943 << 9u)) + (_3351 << 2u)) >> 2u)).x;
                    _3361 = _3360 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3361)
                    {
                        frontier_phi_77_pred = _3350;
                        frontier_phi_77_pred_1 = _3349;
                        frontier_phi_77_pred_2 = _3348;
                        frontier_phi_77_pred_3 = _3347;
                        frontier_phi_77_pred_4 = _3346;
                        frontier_phi_77_pred_5 = _3345;
                    }
                    else
                    {
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3567 = _3345;
                        float _3568 = _3346;
                        float _3569 = _3347;
                        float _3570 = _3348;
                        float _3571 = _3349;
                        float _3572 = _3350;
                        uint _3573 = _3360;
                        uint _3574;
                        vec4 _3599;
                        float _3600;
                        vec4 _3615;
                        vec3 _3627;
                        vec4 _3642;
                        vec4 _3657;
                        float _3703;
                        bool _3704;
                        for (;;)
                        {
                            uint _3584 = ((_3351 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3573));
                            _3574 = (_3573 + 4294967295u) & _3573;
                            uint _3586 = _3584 * 40u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            _3600 = _3599.w;
                            uint _3602 = (_3584 * 40u) + 4u;
                            _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            uint _3617 = (_3584 * 40u) + 8u;
                            _3627 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x));
                            uint _3629 = (_3584 * 40u) + 16u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3584 * 40u) + 20u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3584 * 40u) + 24u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3678 = (_3584 * 40u) + 28u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            _3703 = fma(_2919, _3691.z, fma(_2918, _3691.y, _3691.x * _2917)) + _3691.w;
                            _3704 = !((fma(_2919, _3672.z, fma(_2918, _3672.y, _3672.x * _2917)) + _3672.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3704)
                            {
                                float _3731 = _3599.x - _2917;
                                float _3732 = _3599.y - _2918;
                                float _3733 = _3599.z - _2919;
                                float _3734 = dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733));
                                float _3737 = inversesqrt(_3734);
                                float _3738 = _3737 * _3731;
                                float _3739 = _3737 * _3732;
                                float _3740 = _3737 * _3733;
                                float _3744 = 1.0 - (_3734 / (_3600 * _3600));
                                float _4926 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3749 = sqrt(_3734) * _3615.w;
                                float _3751 = 1.39999997615814208984375 / (_3749 + 1.39999997615814208984375);
                                float _3752 = _3751 * _3751;
                                float _3755 = ((1.0 - _3752) * dot(vec3(_3738, _3739, _3740), vec3(_1130, _1133, _1136))) + _3752;
                                float _3758 = _3749 * _3749;
                                float _3762 = (fma(_2919, _3642.z, fma(_2918, _3642.y, _3642.x * _2917)) + _3642.w) / _3703;
                                float _3763 = (fma(_2919, _3657.z, fma(_2918, _3657.y, _3657.x * _2917)) + _3657.w) / _3703;
                                float _3767 = 1.0 - dot(vec2(_3762, _3763), vec2(_3762, _3763));
                                float _4942 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3769 = _3768 * (((isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0))) * _3745) / ((_3758 * 0.699999988079071044921875) + 1.0));
                                float _3781 = exp2(log2(1.0 / ((_3758 * 3.5) + 5.0)) * 0.25);
                                float _3782 = 1.0 - _1205;
                                float _3789 = sqrt(1.0 - ((1.0 - (_3782 * _3782)) * (1.0 - (_3781 * _3781))));
                                float _3790 = _3789 * _3789;
                                float _3791 = _3790 * _3790;
                                float _3792 = _3738 - _3211;
                                float _3793 = _3739 - _3212;
                                float _3794 = _3740 - _3213;
                                float _3798 = inversesqrt(dot(vec3(_3792, _3793, _3794), vec3(_3792, _3793, _3794)));
                                float _3802 = dot(vec3(_1130, _1133, _1136), vec3((-0.0) - _3211, (-0.0) - _3212, (-0.0) - _3213));
                                float _4953 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3806 = dot(vec3(_1130, _1133, _1136), vec3(_3798 * _3792, _3798 * _3793, _3798 * _3794));
                                float _4964 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3813 = ((_3809 * _3809) * (_3791 + (-1.0))) + 1.0;
                                float _3814 = _3751 * _3790;
                                float _3815 = _3814 * _3814;
                                float _3821 = ((1.0 - _3815) * dot(vec3(_1130, _1133, _1136), vec3(_3738, _3739, _3740))) + _3815;
                                float _4975 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3822 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3823 = 1.0 - _3790;
                                float _3833 = (0.5 / (((_3822 * ((_3805 * _3823) + _3790)) + 9.9999999392252902907785028219223e-09) + (((_3822 * _3823) + _3790) * _3805))) * _3822;
                                float _4986 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3843 = (_3768 * _3745) * (((_3791 * 3.1415927410125732421875) * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) / ((_3813 * _3813) * ((_3758 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3769 * _3615.y;
                                frontier_phi_83_pred_1 = _3769 * _3615.x;
                                frontier_phi_83_pred_2 = _3843 * _3627.z;
                                frontier_phi_83_pred_3 = _3843 * _3627.y;
                                frontier_phi_83_pred_4 = _3843 * _3627.x;
                                frontier_phi_83_pred_5 = _3769 * _3615.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3851 = frontier_phi_83_pred;
                            _3850 = frontier_phi_83_pred_1;
                            _3849 = frontier_phi_83_pred_2;
                            _3848 = frontier_phi_83_pred_3;
                            _3847 = frontier_phi_83_pred_4;
                            _3852 = frontier_phi_83_pred_5;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            if (_3574 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3574;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3559;
                        frontier_phi_77_pred_1 = _3558;
                        frontier_phi_77_pred_2 = _3557;
                        frontier_phi_77_pred_3 = _3556;
                        frontier_phi_77_pred_4 = _3555;
                        frontier_phi_77_pred_5 = _3554;
                    }
                    _3196 = frontier_phi_77_pred;
                    _3194 = frontier_phi_77_pred_1;
                    _3192 = frontier_phi_77_pred_2;
                    _3190 = frontier_phi_77_pred_3;
                    _3188 = frontier_phi_77_pred_4;
                    _3186 = frontier_phi_77_pred_5;
                    uint _3352 = _3351 + 1u;
                    if (_3352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3345 = _3186;
                        _3346 = _3188;
                        _3347 = _3190;
                        _3348 = _3192;
                        _3349 = _3194;
                        _3350 = _3196;
                        _3351 = _3352;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3190;
                frontier_phi_58_59_ladder_1 = _3196;
                frontier_phi_58_59_ladder_2 = _3194;
                frontier_phi_58_59_ladder_3 = _3192;
                frontier_phi_58_59_ladder_4 = _3188;
                frontier_phi_58_59_ladder_5 = _3186;
            }
            else
            {
                frontier_phi_58_59_ladder = _3068;
                frontier_phi_58_59_ladder_1 = _3074;
                frontier_phi_58_59_ladder_2 = _3072;
                frontier_phi_58_59_ladder_3 = _3070;
                frontier_phi_58_59_ladder_4 = _3066;
                frontier_phi_58_59_ladder_5 = _3064;
            }
            _3185 = frontier_phi_58_59_ladder_5;
            _3187 = frontier_phi_58_59_ladder_4;
            _3189 = frontier_phi_58_59_ladder;
            _3191 = frontier_phi_58_59_ladder_3;
            _3193 = frontier_phi_58_59_ladder_2;
            _3195 = frontier_phi_58_59_ladder_1;
        }
        float _3200 = isnan(1.0) ? _1189 : (isnan(_1189) ? 1.0 : min(_1189, 1.0));
        _2976 = (_3200 * _3191) + _2409;
        _2978 = (_3200 * _3193) + _2411;
        _2980 = (_3200 * _3195) + _2413;
        _2982 = ((_3185 * _1173) * _3200) + _2757;
        _2984 = ((_3187 * _1175) * _3200) + _2759;
        _2986 = ((_3189 * _1176) * _3200) + _2761;
    }
    else
    {
        _2976 = _2409;
        _2978 = _2411;
        _2980 = _2413;
        _2982 = _2757;
        _2984 = _2759;
        _2986 = _2761;
    }
    float _5002 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _5013 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _5024 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _3003 = ((isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_2976 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1189))) + ((_2982 + ((isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0))) * _2026)) * cbPerFrame._m0[3u].x);
    float _3004 = ((isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_2978 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1189))) + ((_2984 + ((isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0))) * _2026)) * cbPerFrame._m0[3u].x);
    float _3005 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2980 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1189))) + ((_2986 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2026)) * cbPerFrame._m0[3u].x);
    uint _3006 = _297 + 6u;
    float _3014 = _1111 / cbSceneParam._m0[86u].x;
    float _3015 = _1112 / cbSceneParam._m0[86u].y;
    vec4 _3029 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, (log2((isnan(cbSceneParam._m0[77u].w) ? _1034 : (isnan(_1034) ? cbSceneParam._m0[77u].w : min(_1034, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3031 = _3029.x;
    float _3032 = _3029.y;
    float _3033 = _3029.z;
    float _3034 = _3029.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_1034 > cbSceneParam._m0[78u].w)
    {
        float _3089 = isnan(_1034) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1034 : min(cbSceneParam._m0[80u].w, _1034));
        float _3090 = _3089 / _1034;
        float _3101 = _3090 * _1084;
        float _3102 = _1085 * _3090;
        float _3103 = (-0.0) - _3102;
        float _3105 = _3090 * _1086;
        float _3107 = (cbSceneParam._m0[77u].w * _3103) / _3089;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3102;
        float _3115 = sqrt(((_3101 * _3101) + (_3102 * _3102)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3089)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3302;
        if (abs((_3103 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3302 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3246 = 1.0 / cbSceneParam._m0[80u].x;
            float _3247 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3248 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3257 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : min(_3247, 0.0));
            float _3258 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : min(_3248, 0.0));
            _3302 = ((abs(_3115 / _3103) * cbSceneParam._m0[80u].y) * ((((_3257 - _3258) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))))) * _3246)) - ((exp2(_3125 * _3257) - exp2(_3125 * _3258)) * _3246))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3304 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, 1.0), 0.0);
        float _3313 = exp2((_3302 * (-1.44269502162933349609375)) * (1.0 - _3304.w));
        float _3314 = log2(_3313);
        float _3330 = log2(_3034);
        _3127 = (exp2(_3330 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].x)) * _3304.x) / cbSceneParam._m0[78u].x)) + _3031;
        _3129 = (exp2(_3330 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].y)) * _3304.y) / cbSceneParam._m0[78u].y)) + _3032;
        _3131 = (exp2(_3330 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3314 * cbSceneParam._m0[78u].z)) * _3304.z) / cbSceneParam._m0[78u].z)) + _3033;
        _3133 = _3313 * _3034;
    }
    else
    {
        _3127 = _3031;
        _3129 = _3032;
        _3131 = _3033;
        _3133 = _3034;
    }
    bool _3340;
    vec4 _3143;
    vec4 _3165;
    float _3167;
    float _3171;
    float _3172;
    float _3173;
    float _3174;
    bool _3184;
    for (;;)
    {
        _3143 = cbMatDynParam._m0[0u];
        float _3145 = roundEven(_3143.y);
        bool _3146 = _3145 == 3.0;
        float _3147 = log2(_3133);
        float _3154 = exp2(_3147 * cbSceneParam._m0[78u].x) * _3003;
        float _3155 = exp2(_3147 * cbSceneParam._m0[78u].y) * _3004;
        float _3156 = exp2(_3147 * cbSceneParam._m0[78u].z) * _3005;
        float _3163 = _1100 + (-0.5);
        _3165 = cbMtdParam._m0[1u];
        _3167 = _3165.y * _3163;
        float _3170 = (_3145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3171 = _3170 * (_3146 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3127)));
        _3172 = _3170 * (_3146 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3129)));
        _3173 = _3170 * (_3146 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3131)));
        _3174 = _3163 * 0.999000012874603271484375;
        _3184 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3184)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3174) < 0.5)
            {
                _3340 = true;
                break;
            }
        }
        uint _3281 = _1149 + uint(_3143.w);
        if ((cbInstanceData._m0[_3281].w < 1.0) && ((cbInstanceData._m0[_3281].w + _3174) < 0.5))
        {
            _3340 = true;
            break;
        }
        if ((_3167 + 1.0) < _3165.x)
        {
            _3340 = true;
            break;
        }
        _3340 = false;
        break;
    }
    float _3545;
    if (_3340)
    {
        discard_state = true;
        _3545 = 0.0;
    }
    else
    {
        _3545 = cbInstanceData._m0[_3006].w;
    }
    SV_Target.x = _3171;
    SV_Target.y = _3172;
    SV_Target.z = _3173;
    SV_Target.w = _3545;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3006].w;
    discard_exit();
}


