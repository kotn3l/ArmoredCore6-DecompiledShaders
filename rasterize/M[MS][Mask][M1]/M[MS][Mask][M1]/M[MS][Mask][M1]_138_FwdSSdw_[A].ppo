#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1719;
float _4120;
float _4121;
float _4122;
float _4123;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4132 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4143 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4154 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _442 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _444 = _442.x;
    float _456 = dot(vec4(_444, _442.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _473 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_444 - _456) * cbMtdParam._m0[23u].w) + _456) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4165 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _481 = (_474 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _482 = (_474 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _483 = (_474 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _522 = _520.x;
    float _532 = dot(vec4(_522, _520.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _546 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_522 - _532) * cbMtdParam._m0[23u].w) + _532) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4176 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _554 = (_547 * ((_500.x * cbMtdParam._m0[13u].x) - _481)) + _481;
    float _555 = (_547 * ((_500.y * cbMtdParam._m0[13u].y) - _482)) + _482;
    float _556 = (_547 * ((_500.z * cbMtdParam._m0[13u].z) - _483)) + _483;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _594 = _592.x;
    float _604 = dot(vec4(_594, _592.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _616 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _407.z) * 2.0) - ((((_594 - _604) * cbMtdParam._m0[23u].w) + _604) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4187 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _624 = (_617 * ((_575.x * cbMtdParam._m0[14u].x) - _554)) + _554;
    float _625 = (_617 * ((_575.y * cbMtdParam._m0[14u].y) - _555)) + _555;
    float _626 = (_617 * ((_575.z * cbMtdParam._m0[14u].z) - _556)) + _556;
    float _630 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _624;
    float _633 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _625;
    float _636 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _626;
    float _643 = ((_624 - _630) * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) + _630;
    float _644 = ((_625 - _633) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) + _633;
    float _645 = ((_626 - _636) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) + _636;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _324) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _325) + cbTextureTilingScale._m0[14u].w));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _724 = _722.x;
    float _725 = _722.y;
    float _726 = _722.z;
    float _733 = ((_705.x - _724) * _474) + _724;
    float _734 = ((_705.y - _725) * _474) + _725;
    float _735 = ((_705.z - _726) * _474) + _726;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _758 = ((_747.x - _733) * _547) + _733;
    float _759 = ((_747.y - _734) * _547) + _734;
    float _760 = ((_747.z - _735) * _547) + _735;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _785 = ((_772.z - _760) * _617) + _760;
    float _788 = ((((_772.x - _758) * _617) + _758) * 2.0) + (-1.0);
    float _789 = ((((_772.y - _759) * _617) + _759) * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4198 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _836 = _834.x;
    float _837 = 1.0 - _836;
    float _845 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _848 = ((isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : min(_845, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _857 = (_848 - ((((((_836 - _837) * cbMtdParam._m0[24u].z) + _837) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _848))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4219 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _865 = (_858 * ((_663.x * cbMtdParam._m0[18u].x) - _643)) + _643;
    float _866 = (_858 * ((_663.y * cbMtdParam._m0[18u].y) - _644)) + _644;
    float _867 = (_858 * ((_663.z * cbMtdParam._m0[18u].z) - _645)) + _645;
    vec4 _879 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _324) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _325) + cbTextureTilingScale._m0[19u].w));
    float _881 = _879.x;
    float _882 = 1.0 - _881;
    float _907 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_881 - _882) * cbMtdParam._m0[24u].w) + _882) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4230 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _908 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _916 = ((((cbMtdParam._m0[10u].x - _865) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _908) + _865;
    float _917 = ((((cbMtdParam._m0[10u].y - _866) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _908) + _866;
    float _918 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _867)) * _908) + _867;
    vec4 _944 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _946 = _944.x;
    float _964 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _946) * _474) + _946;
    float _981 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _964) * _547) + _964;
    float _998 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _981) * _617) + _981;
    float _1002 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _998) * cbMtdParam._m0[19u].z) + _998;
    float _1004 = _1002 - (_1002 * _858);
    float _1006 = _1004 - (_1004 * _908);
    float _1011 = (((_682.z - _785) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _785;
    float _1015 = ((_809.z - _1011) * cbMtdParam._m0[19u].w) + _1011;
    vec4 _1031 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1038 = (_1031.x * 2.0) + (-1.0);
    float _1039 = (_1031.y * 2.0) + (-1.0);
    float _1040 = dot(vec2(_1038, _1039), vec2(_1038, _1039));
    float _4241 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1048 = (_858 * (_1031.z - _1015)) + _1015;
    float _1051 = ((cbMtdParam._m0[23u].x - _1048) * _908) + _1048;
    vec4 _1074 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _324) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _325) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1080 = (_1074.x * 2.0) + (-1.0);
    float _1081 = (_1074.y * 2.0) + (-1.0);
    float _1082 = dot(vec2(_1080, _1081), vec2(_1080, _1081));
    float _4252 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1096 = (_788 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_682.x * 2.0) + (-1.0)))) + (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1097 = (_789 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_682.y * 2.0) + (-1.0)))) + (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1109 = (((_1038 - _1096) + (cbMtdParam._m0[21u].x * _1096)) * _858) + _1096;
    float _1110 = (((_1039 - _1097) + (cbMtdParam._m0[21u].x * _1097)) * _858) + _1097;
    float _1111 = (_858 * (sqrt(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) - _795)) + _795;
    float _1122 = (((_1080 - _1109) + (_1109 * cbMtdParam._m0[22u].z)) * _908) + _1109;
    float _1123 = (((_1081 - _1110) + (_1110 * cbMtdParam._m0[22u].z)) * _908) + _1110;
    float _1124 = ((sqrt(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) - _1111) * _908) + _1111;
    float _1126 = cbMtdParam._m0[22u].x + _809.w;
    float _1129 = fma(_1124, _273 * NORMAL.x, fma(_1123, _280 * TANGENT.x, (_266 * _258) * _1122));
    float _1132 = fma(_1124, _273 * NORMAL.y, fma(_1123, _280 * TANGENT.y, (_266 * _259) * _1122));
    float _1135 = fma(_1124, _273 * NORMAL.z, fma(_1123, _280 * TANGENT.z, (_266 * _260) * _1122));
    float _1139 = inversesqrt(dot(vec3(_1129, _1132, _1135), vec3(_1129, _1132, _1135)));
    float _1140 = _1139 * _1129;
    float _1141 = _1139 * _1132;
    float _1142 = _1139 * _1135;
    float _4263 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1143 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _4285 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4296 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4307 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4318 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1148 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _1162 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1212 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1202);
    float _1213 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1202);
    float _1214 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1202);
    float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
    float _1219 = _1212 * _1218;
    float _1220 = _1213 * _1218;
    float _1221 = _1214 * _1218;
    vec4 _1226 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1228 = _1226.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1400 = sqrt(((_1212 * _1212) + (_1213 * _1213)) + (_1214 * _1214));
        float _1406 = (cbMatDynParam._m0[5u].x * _1400) + cbMatDynParam._m0[5u].y;
        float _4329 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1411 = (cbMatDynParam._m0[5u].z * _1400) + cbMatDynParam._m0[5u].w;
        float _4340 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) - _1407)) + _1407) < ((_1228 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1239 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1240 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1258 = fma(_1142, cbSceneParam._m0[5u].z, fma(_1141, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1140));
    float _1261 = fma(_1142, cbSceneParam._m0[6u].z, fma(_1141, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1140));
    float _1264 = fma(_1142, cbSceneParam._m0[7u].z, fma(_1141, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1140));
    uint _1277 = _305 + 9u;
    uint _1278 = _1277 + uint(cbMatDynParam._m0[0u].w);
    float _1284 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * cbInstanceData._m0[_1278].x;
    float _1285 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * cbInstanceData._m0[_1278].y;
    float _1286 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1278].z;
    float _4351 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
    float _1287 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
    float _1288 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
    float _1289 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _1290 = 1.0 - _1148;
    float _1291 = _1287 * _1290;
    float _1292 = _1288 * _1290;
    float _1293 = _1289 * _1290;
    float _1298 = (_1287 + (-0.039999999105930328369140625)) * _1148;
    float _1299 = (_1288 + (-0.039999999105930328369140625)) * _1148;
    float _1300 = (_1289 + (-0.039999999105930328369140625)) * _1148;
    float _1301 = _1298 + 0.039999999105930328369140625;
    float _1303 = _1299 + 0.039999999105930328369140625;
    float _1304 = _1300 + 0.039999999105930328369140625;
    vec4 _1313 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1239, cbSceneParam._m0[86u].y * _1240));
    float _1317 = ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * TEXCOORD_5.w) * _1313.x;
    float _1318 = dot(vec3(_1140, _1141, _1142), vec3(_1219, _1220, _1221));
    float _1321 = _1318 * 2.0;
    float _1325 = (_1321 * _1140) - _1219;
    float _1326 = (_1321 * _1141) - _1220;
    float _1327 = (_1321 * _1142) - _1221;
    float _1331 = abs(dot(vec3(_1219, _1220, _1221), vec3(_1140, _1141, _1142)));
    float _4384 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _1333 = sqrt(_1143);
    float _1346 = exp2((_1333 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1333 * 3.0));
    float _1352 = (1.0 - _1346) * ((_1333 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1353 = _1346 * _1333;
    float _1381 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1385 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1389 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1718;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1443 = fma(_1389, cbModelParam._m0[26u].z, fma(_1385, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1381));
        float _1447 = fma(_1389, cbModelParam._m0[27u].z, fma(_1385, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1381));
        float _1451 = fma(_1389, cbModelParam._m0[28u].z, fma(_1385, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1381));
        float _1476 = _1381 + _1140;
        float _1477 = _1385 + _1141;
        float _1478 = _1389 + _1142;
        float _1488 = fma(_1478, cbModelParam._m0[26u].z, fma(_1477, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1476)) - _1443;
        float _1489 = fma(_1478, cbModelParam._m0[27u].z, fma(_1477, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1476)) - _1447;
        float _1490 = fma(_1478, cbModelParam._m0[28u].z, fma(_1477, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1476)) - _1451;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1443 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1447 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[34u].z) + ((((((_1451 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1546 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1512.x + (-0.5));
        float _1548 = _1546 * (_1512.y + (-0.5));
        float _1549 = _1546 * (_1512.z + (-0.5));
        float _1556 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1519.x + (-0.5));
        float _1558 = _1556 * (_1519.y + (-0.5));
        float _1559 = _1556 * (_1519.z + (-0.5));
        float _1566 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1526.x + (-0.5));
        float _1568 = _1566 * (_1526.y + (-0.5));
        float _1569 = _1566 * (_1526.z + (-0.5));
        float _1576 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1533.x + (-0.5));
        float _1578 = _1576 * (_1533.y + (-0.5));
        float _1579 = _1576 * (_1533.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1600 = (dot(vec3(_1140, _1141, _1142), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1610 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4432 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1612 + 1.0))) + _1617) * _1580;
        float _1627 = _1548 * 0.5;
        float _1628 = _1558 * 0.5;
        float _1629 = _1568 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_1140, _1141, _1142), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4465 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1654 + 1.0))) + _1659) * _1581;
        float _1669 = _1549 * 0.5;
        float _1670 = _1559 * 0.5;
        float _1671 = _1569 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_1140, _1141, _1142), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4498 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1696 + 1.0))) + _1701) * _1582;
        _1718 = _1549;
        _1720 = _1548;
        _1721 = _1547;
        _1722 = _1559;
        _1723 = _1558;
        _1724 = _1557;
        _1725 = _1569;
        _1726 = _1568;
        _1727 = _1567;
        _1728 = _1582;
        _1729 = _1581;
        _1730 = _1580;
        _1731 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1732 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1719;
        _1720 = _1719;
        _1721 = _1719;
        _1722 = _1719;
        _1723 = _1719;
        _1724 = _1719;
        _1725 = _1719;
        _1726 = _1719;
        _1727 = _1719;
        _1728 = _1719;
        _1729 = _1719;
        _1730 = _1719;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _2028;
    float _2029;
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1759 = fma(_1389, cbModelParam._m0[30u].z, fma(_1385, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381));
        float _1763 = fma(_1389, cbModelParam._m0[31u].z, fma(_1385, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381));
        float _1767 = fma(_1389, cbModelParam._m0[32u].z, fma(_1385, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381));
        float _1790 = _1381 + _1140;
        float _1791 = _1385 + _1141;
        float _1792 = _1389 + _1142;
        float _1802 = fma(_1792, cbModelParam._m0[30u].z, fma(_1791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1790)) - _1759;
        float _1803 = fma(_1792, cbModelParam._m0[31u].z, fma(_1791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1790)) - _1763;
        float _1804 = fma(_1792, cbModelParam._m0[32u].z, fma(_1791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1790)) - _1767;
        float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
        float _1821 = ((_1808 * _1802) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1759 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1822 = ((_1808 * _1803) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1763 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1823 = ((_1808 * _1804) / cbModelParam._m0[35u].z) + ((((((_1767 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1825 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1821, _1822, _1823), 0.0);
        vec4 _1832 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1821, _1822, _1823), 0.0);
        vec4 _1839 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1821, _1822, _1823), 0.0);
        vec4 _1846 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1821, _1822, _1823), 0.0);
        float _1858 = exp2((_1825.w + (-0.5)) * 20.0) * 2.0;
        float _1859 = _1858 * (_1825.x + (-0.5));
        float _1860 = _1858 * (_1825.y + (-0.5));
        float _1861 = _1858 * (_1825.z + (-0.5));
        float _1868 = exp2((_1832.w + (-0.5)) * 20.0) * 2.0;
        float _1869 = _1868 * (_1832.x + (-0.5));
        float _1870 = _1868 * (_1832.y + (-0.5));
        float _1871 = _1868 * (_1832.z + (-0.5));
        float _1878 = exp2((_1839.w + (-0.5)) * 20.0) * 2.0;
        float _1879 = _1878 * (_1839.x + (-0.5));
        float _1880 = _1878 * (_1839.y + (-0.5));
        float _1881 = _1878 * (_1839.z + (-0.5));
        float _1888 = exp2((_1846.w + (-0.5)) * 20.0) * 2.0;
        float _1889 = _1888 * (_1846.x + (-0.5));
        float _1890 = _1888 * (_1846.y + (-0.5));
        float _1891 = _1888 * (_1846.z + (-0.5));
        float _1892 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1893 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1894 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1895 = _1859 * 0.5;
        float _1896 = _1869 * 0.5;
        float _1897 = _1879 * 0.5;
        float _1898 = dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897));
        float _1903 = (_1898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1898);
        float _1911 = (dot(vec3(_1140, _1141, _1142), vec3(_1903 * _1895, _1903 * _1896, _1903 * _1897)) + 1.0) * 0.5;
        float _4539 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1920 = sqrt(((_1896 * _1896) + (_1895 * _1895)) + (_1897 * _1897)) / (_1892 + 9.9999997473787516355514526367188e-06);
        float _4550 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1922 = _1921 * 2.0;
        float _1926 = (1.0 - _1921) / (_1921 + 1.0);
        float _4561 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1936 = ((((1.0 - _1927) * (_1922 + 2.0)) * exp2(log2(isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_1922 + 1.0))) + _1927) * _1892;
        float _1937 = _1860 * 0.5;
        float _1938 = _1870 * 0.5;
        float _1939 = _1880 * 0.5;
        float _1940 = dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939));
        float _1945 = (_1940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1940);
        float _1953 = (dot(vec3(_1140, _1141, _1142), vec3(_1945 * _1937, _1945 * _1938, _1945 * _1939)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1962 = sqrt(((_1938 * _1938) + (_1937 * _1937)) + (_1939 * _1939)) / (_1893 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1963 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1964 = _1963 * 2.0;
        float _1968 = (1.0 - _1963) / (_1963 + 1.0);
        float _4594 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1978 = ((((1.0 - _1969) * (_1964 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1964 + 1.0))) + _1969) * _1893;
        float _1979 = _1861 * 0.5;
        float _1980 = _1871 * 0.5;
        float _1981 = _1881 * 0.5;
        float _1982 = dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981));
        float _1987 = (_1982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1982);
        float _1995 = (dot(vec3(_1140, _1141, _1142), vec3(_1987 * _1979, _1987 * _1980, _1987 * _1981)) + 1.0) * 0.5;
        float _4605 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _2004 = sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981)) / (_1894 + 9.9999997473787516355514526367188e-06);
        float _4616 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2006 = _2005 * 2.0;
        float _2010 = (1.0 - _2005) / (_2005 + 1.0);
        float _4627 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2011 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2020 = ((((1.0 - _2011) * (_2006 + 2.0)) * exp2(log2(isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2006 + 1.0))) + _2011) * _1894;
        _2028 = _1861;
        _2029 = _1860;
        _2030 = _1859;
        _2031 = _1871;
        _2032 = _1870;
        _2033 = _1869;
        _2034 = _1881;
        _2035 = _1880;
        _2036 = _1879;
        _2037 = _1894;
        _2038 = _1893;
        _2039 = _1892;
        _2040 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0)));
        _2041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)));
        _2042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)));
    }
    else
    {
        _2028 = _1719;
        _2029 = _1719;
        _2030 = _1719;
        _2031 = _1719;
        _2032 = _1719;
        _2033 = _1719;
        _2034 = _1719;
        _2035 = _1719;
        _2036 = _1719;
        _2037 = _1719;
        _2038 = _1719;
        _2039 = _1719;
        _2040 = 0.0;
        _2041 = 0.0;
        _2042 = 0.0;
    }
    float _2052 = (cbModelParam._m0[1u].x * (_2040 - _1731)) + _1731;
    float _2053 = (cbModelParam._m0[1u].x * (_2041 - _1732)) + _1732;
    float _2054 = (cbModelParam._m0[1u].x * (_2042 - _1733)) + _1733;
    float _2075 = fma(_2054, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2052 * cbSceneParam._m0[89u].x));
    float _2078 = fma(_2054, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2052 * cbSceneParam._m0[90u].x));
    float _2081 = fma(_2054, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2052));
    float _2096 = _1325 * 0.5;
    float _2097 = _1326 * 0.5;
    float _2098 = _1327 * 0.5;
    float _2099 = dot(vec4(_2096, _2097, _2098, 1.0), vec4(_2030, _2033, _2036, _2039));
    float _2102 = dot(vec4(_2096, _2097, _2098, 1.0), vec4(_2029, _2032, _2035, _2038));
    float _2105 = dot(vec4(_2096, _2097, _2098, 1.0), vec4(_2028, _2031, _2034, _2037));
    float _2139;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2112 = dot(vec4(_2096, _2097, _2098, 1.0), vec4(_1718, _1722, _1725, _1728));
        float _2116 = dot(vec4(_2096, _2097, _2098, 1.0), vec4(_1720, _1723, _1726, _1729));
        float _2120 = dot(vec4(_2096, _2097, _2098, 1.0), vec4(_1721, _1724, _1727, _1730));
        float _2127 = dot(vec4(cbModelParam._m0[39u]), vec4(_2096, _2097, _2098, 1.0));
        _2139 = dot(vec3(isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0)), isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0)), isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2127) ? 0.0 : (isnan(0.0) ? _2127 : max(0.0, _2127))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2139 = 1.0;
    }
    float _2150;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2141 = dot(vec4(cbModelParam._m0[40u]), vec4(_2096, _2097, _2098, 1.0));
        _2150 = dot(vec3(isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0)), isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0)), isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2141) ? 0.0 : (isnan(0.0) ? _2141 : max(0.0, _2141))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2150 = 1.0;
    }
    float _2154 = (_2150 * cbModelParam._m0[1u].x) + (_2139 * (1.0 - cbModelParam._m0[1u].x));
    float _2164 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1143);
    float _2165 = isnan(_2164) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2164 : min(cbModelParam._m0[25u].z, _2164));
    float _2245;
    float _2247;
    float _2249;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2212 = fma(_1389, cbModelParam._m0[13u].z, fma(_1385, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1381)) + cbModelParam._m0[13u].w;
        float _2216 = fma(_1389, cbModelParam._m0[14u].z, fma(_1385, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1381)) + cbModelParam._m0[14u].w;
        float _2220 = fma(_1389, cbModelParam._m0[15u].z, fma(_1385, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1381)) + cbModelParam._m0[15u].w;
        float _2223 = fma(_1327, cbModelParam._m0[13u].z, fma(_1326, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1325));
        float _2226 = fma(_1327, cbModelParam._m0[14u].z, fma(_1326, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1325));
        float _2229 = fma(_1327, cbModelParam._m0[15u].z, fma(_1326, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1325));
        float _2257;
        if (_2223 > 0.0)
        {
            _2257 = abs((1.0 - _2212) / _2223);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2212 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2257 = frontier_phi_17_15_ladder;
        }
        float _2480;
        if (_2226 > 0.0)
        {
            _2480 = abs((1.0 - _2216) / _2226);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2216 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2480 = frontier_phi_26_22_ladder;
        }
        float _2737;
        if (_2229 > 0.0)
        {
            _2737 = abs((1.0 - _2220) / _2229);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2220 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2737 = frontier_phi_38_33_ladder;
        }
        float _2739 = isnan(_2480) ? _2257 : (isnan(_2257) ? _2480 : min(_2257, _2480));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _2223) + _2212;
        float _2745 = (_2740 * _2226) + _2216;
        float _2746 = (_2740 * _2229) + _2220;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2749 = (-1.0) - _2747;
        float _2751 = _2747 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2746 > _2751) || ((_2746 < _2749) || ((_2745 > _2751) || ((_2745 < _2749) || ((_2744 < _2749) || (_2744 > _2751))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2746, cbModelParam._m0[9u].z, fma(_2745, cbModelParam._m0[9u].y, _2744 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2746, cbModelParam._m0[10u].z, fma(_2745, cbModelParam._m0[10u].y, _2744 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2746, cbModelParam._m0[11u].z, fma(_2745, cbModelParam._m0[11u].y, _2744 * cbModelParam._m0[11u].x))), _2165);
            frontier_phi_16_38_ladder = _2874.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2874.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2874.x * cbModelParam._m0[1u].y;
        }
        _2245 = frontier_phi_16_38_ladder_2;
        _2247 = frontier_phi_16_38_ladder_1;
        _2249 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2233 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1325, _1326, _1327), _2165);
        _2245 = _2233.x * cbModelParam._m0[1u].y;
        _2247 = _2233.y * cbModelParam._m0[1u].y;
        _2249 = _2233.z * cbModelParam._m0[1u].y;
    }
    float _2253 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1143);
    float _2254 = isnan(_2253) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2253 : min(cbModelParam._m0[25u].w, _2253));
    float _2343;
    float _2345;
    float _2347;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2307 = fma(_1389, cbModelParam._m0[21u].z, fma(_1385, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1381)) + cbModelParam._m0[21u].w;
        float _2311 = fma(_1389, cbModelParam._m0[22u].z, fma(_1385, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1381)) + cbModelParam._m0[22u].w;
        float _2315 = fma(_1389, cbModelParam._m0[23u].z, fma(_1385, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1381)) + cbModelParam._m0[23u].w;
        float _2318 = fma(_1327, cbModelParam._m0[21u].z, fma(_1326, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1325));
        float _2321 = fma(_1327, cbModelParam._m0[22u].z, fma(_1326, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1325));
        float _2324 = fma(_1327, cbModelParam._m0[23u].z, fma(_1326, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1325));
        float _2485;
        if (_2318 > 0.0)
        {
            _2485 = abs((1.0 - _2307) / _2318);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2318 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2307 + 1.0) / _2318);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2485 = frontier_phi_28_24_ladder;
        }
        float _2764;
        if (_2321 > 0.0)
        {
            _2764 = abs((1.0 - _2311) / _2321);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2321 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2311 + 1.0) / _2321);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2764 = frontier_phi_40_35_ladder;
        }
        float _2977;
        if (_2324 > 0.0)
        {
            _2977 = abs((1.0 - _2315) / _2324);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2324 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2315 + 1.0) / _2324);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2977 = frontier_phi_49_46_ladder;
        }
        float _2979 = isnan(_2764) ? _2485 : (isnan(_2485) ? _2764 : min(_2485, _2764));
        float _2980 = isnan(_2977) ? _2979 : (isnan(_2979) ? _2977 : min(_2979, _2977));
        float _2984 = (_2980 * _2318) + _2307;
        float _2985 = (_2980 * _2321) + _2311;
        float _2986 = (_2980 * _2324) + _2315;
        float _2987 = _2980 * 9.9999997473787516355514526367188e-05;
        float _2988 = (-1.0) - _2987;
        float _2990 = _2987 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2986 > _2990) || ((_2986 < _2988) || ((_2985 > _2990) || ((_2985 < _2988) || ((_2984 < _2988) || (_2984 > _2990))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3185 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2986, cbModelParam._m0[17u].z, fma(_2985, cbModelParam._m0[17u].y, _2984 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2986, cbModelParam._m0[18u].z, fma(_2985, cbModelParam._m0[18u].y, _2984 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2986, cbModelParam._m0[19u].z, fma(_2985, cbModelParam._m0[19u].y, _2984 * cbModelParam._m0[19u].x))), _2254);
            frontier_phi_25_49_ladder = _3185.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3185.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3185.x * cbModelParam._m0[1u].z;
        }
        _2343 = frontier_phi_25_49_ladder_2;
        _2345 = frontier_phi_25_49_ladder_1;
        _2347 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2327 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1325, _1326, _1327), _2254);
        _2343 = _2327.x * cbModelParam._m0[1u].z;
        _2345 = _2327.y * cbModelParam._m0[1u].z;
        _2347 = _2327.z * cbModelParam._m0[1u].z;
    }
    float _2360 = (((_1352 * _1301) + _1353) * _1317) * ((cbModelParam._m0[1u].w * (_2343 - _2245)) + _2245);
    float _2362 = (((_1352 * _1303) + _1353) * _1317) * ((cbModelParam._m0[1u].w * (_2345 - _2247)) + _2247);
    float _2364 = (((_1352 * _1304) + _1353) * _1317) * ((cbModelParam._m0[1u].w * (_2347 - _2249)) + _2249);
    float _2367 = fma(_2364, cbSceneParam._m0[89u].z, fma(_2362, cbSceneParam._m0[89u].y, _2360 * cbSceneParam._m0[89u].x));
    float _2370 = fma(_2364, cbSceneParam._m0[90u].z, fma(_2362, cbSceneParam._m0[90u].y, _2360 * cbSceneParam._m0[90u].x));
    float _2373 = fma(_2364, cbSceneParam._m0[91u].z, fma(_2362, cbSceneParam._m0[91u].y, _2360 * cbSceneParam._m0[91u].x));
    vec4 _2381 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1239, _1240));
    float _2383 = _2381.w;
    float _2395 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2383);
    float _2396 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2383);
    float _2397 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2383);
    uvec4 _2401 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2403 = _2401.x * 14u;
    uint _2404 = _2403 + 13u;
    float _2411 = _1317 + (-1.0);
    float _2416 = (cbLight._m0[_2404].x * _2411) + 1.0;
    float _2417 = (cbLight._m0[_2404].y * _2411) + 1.0;
    float _2418 = (cbLight._m0[_2404].z * _2411) + 1.0;
    float _2419 = (cbLight._m0[_2404].w * _2411) + 1.0;
    uint _2420 = _2403 + 5u;
    float _2426 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
    uint _2430 = _2403 + 4u;
    float _2439 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
    uint _2443 = _2403 | 1u;
    float _2454 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_1140, _1141, _1142));
    float _2457 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_1140, _1141, _1142));
    float _4763 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _4774 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2462 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * 0.3183098733425140380859375;
    float _2464 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * 0.3183098733425140380859375;
    float _2471 = ((cbLight._m0[_2420].x * _2426) * _2464) + (((cbLight._m0[_2430].x * _2395) * _2439) * _2462);
    float _2472 = ((_2426 * cbLight._m0[_2420].y) * _2464) + (((cbLight._m0[_2430].y * _2396) * _2439) * _2462);
    float _2473 = ((_2426 * cbLight._m0[_2420].z) * _2464) + (((cbLight._m0[_2430].z * _2397) * _2439) * _2462);
    uvec4 _2477 = floatBitsToUint(cbLight._m0[_2403 + 12u]);
    bool _2479 = _2477.x == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2479)
    {
        _2490 = _2471;
        _2492 = _2472;
        _2494 = _2473;
    }
    else
    {
        uint _2498 = _2403 + 6u;
        float _2514 = (dot(vec3(cbLight._m0[_2403 + 2u].xyz), vec3(_1140, _1141, _1142)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4785 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2517 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2490 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2471;
        _2492 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2472;
        _2494 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2473;
    }
    bool _2497 = _2477.y == 0u;
    float _2535;
    float _2537;
    float _2539;
    if (_2497)
    {
        _2535 = _2490;
        _2537 = _2492;
        _2539 = _2494;
    }
    else
    {
        uint _2708 = _2403 + 7u;
        float _2724 = (dot(vec3(cbLight._m0[_2403 + 3u].xyz), vec3(_1140, _1141, _1142)) * 0.5) + 0.5;
        float _2725 = _2724 * _2724;
        float _4801 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2726 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2727 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2535 = (((cbLight._m0[_2708].x * 0.3183098733425140380859375) * _2726) * _2727) + _2490;
        _2537 = (((cbLight._m0[_2708].y * 0.3183098733425140380859375) * _2726) * _2727) + _2492;
        _2539 = (((cbLight._m0[_2708].z * 0.3183098733425140380859375) * _2726) * _2727) + _2494;
    }
    uint _2542 = _2403 + 8u;
    float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2403].w)) * _1143) * 0.949999988079071044921875);
    float _2556 = _2555 * _2555;
    float _2557 = cbLight._m0[_2403].x + _1219;
    float _2558 = cbLight._m0[_2403].y + _1220;
    float _2559 = cbLight._m0[_2403].z + _1221;
    float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
    float _2564 = _2563 * _2557;
    float _2565 = _2563 * _2558;
    float _2566 = _2563 * _2559;
    float _2567 = dot(vec3(_1140, _1141, _1142), vec3(cbLight._m0[_2403].xyz));
    float _4817 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2570 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    float _4828 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _2571 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
    float _2572 = dot(vec3(_1140, _1141, _1142), vec3(_2564, _2565, _2566));
    float _4839 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _2576 = dot(vec3(cbLight._m0[_2403].xyz), vec3(_2564, _2565, _2566));
    float _4850 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2580 = _2556 * _2556;
    float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
    float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
    float _2593 = 0.959999978542327880859375 - _1298;
    float _2595 = 0.959999978542327880859375 - _1299;
    float _2596 = 0.959999978542327880859375 - _1300;
    float _2603 = 1.0 - _2556;
    float _2614 = (0.5 / (((_2571 * ((_2570 * _2603) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2603) + _2556) * _2570))) * _2570;
    float _4861 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
    uint _2630 = _2403 + 9u;
    float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2443].w)) * _1143) * 0.949999988079071044921875);
    float _2642 = _2641 * _2641;
    float _2643 = cbLight._m0[_2443].x + _1219;
    float _2644 = cbLight._m0[_2443].y + _1220;
    float _2645 = cbLight._m0[_2443].z + _1221;
    float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
    float _2650 = _2649 * _2643;
    float _2651 = _2649 * _2644;
    float _2652 = _2649 * _2645;
    float _2653 = dot(vec3(_1140, _1141, _1142), vec3(cbLight._m0[_2443].xyz));
    float _4872 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2656 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
    float _2657 = dot(vec3(_1140, _1141, _1142), vec3(_2650, _2651, _2652));
    float _4883 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    float _2661 = dot(vec3(cbLight._m0[_2443].xyz), vec3(_2650, _2651, _2652));
    float _4894 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2665 = _2642 * _2642;
    float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
    float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) * 5.0);
    float _2683 = 1.0 - _2642;
    float _2693 = (0.5 / (((_2571 * ((_2656 * _2683) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2683) + _2642) * _2656))) * _2656;
    float _4905 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2695 = (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
    float _2705 = (((((_2676 * _2593) + _1301) * cbLight._m0[_2630].x) * _2695) * _2426) + ((((cbLight._m0[_2542].x * _2395) * ((_2592 * _2593) + _1301)) * _2616) * _2439);
    float _2706 = (((((_2676 * _2595) + _1303) * cbLight._m0[_2630].y) * _2695) * _2426) + ((((cbLight._m0[_2542].y * _2396) * ((_2592 * _2595) + _1303)) * _2616) * _2439);
    float _2707 = (((((_2676 * _2596) + _1304) * cbLight._m0[_2630].z) * _2695) * _2426) + ((((cbLight._m0[_2542].z * _2397) * ((_2592 * _2596) + _1304)) * _2616) * _2439);
    float _2769;
    float _2771;
    float _2773;
    if (_2479)
    {
        _2769 = _2705;
        _2771 = _2706;
        _2773 = _2707;
    }
    else
    {
        uint _2775 = _2403 + 2u;
        uint _2779 = _2403 + 10u;
        float _2793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2775].w)) * _1143) * 0.949999988079071044921875);
        float _2794 = _2793 * _2793;
        float _2795 = cbLight._m0[_2775].x + _1219;
        float _2796 = cbLight._m0[_2775].y + _1220;
        float _2797 = cbLight._m0[_2775].z + _1221;
        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
        float _2802 = _2801 * _2795;
        float _2803 = _2801 * _2796;
        float _2804 = _2801 * _2797;
        float _2805 = dot(vec3(_1140, _1141, _1142), vec3(cbLight._m0[_2775].xyz));
        float _4916 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
        float _2809 = dot(vec3(_1140, _1141, _1142), vec3(_2802, _2803, _2804));
        float _4927 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2812 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _2813 = dot(vec3(cbLight._m0[_2775].xyz), vec3(_2802, _2803, _2804));
        float _4938 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2817 = _2794 * _2794;
        float _2821 = ((_2812 * _2812) * (_2817 + (-1.0))) + 1.0;
        float _2828 = exp2(log2(1.0 - (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) * 5.0);
        float _2835 = 1.0 - _2794;
        float _2845 = (0.5 / (((_2571 * ((_2808 * _2835) + _2794)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2835) + _2794) * _2808))) * _2808;
        float _4949 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2847 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2817 / ((_2821 * _2821) * 3.141590118408203125));
        float _2848 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2769 = (((((_2828 * _2593) + _1301) * cbLight._m0[_2779].x) * _2847) * _2848) + _2705;
        _2771 = (((((_2828 * _2595) + _1303) * cbLight._m0[_2779].y) * _2847) * _2848) + _2706;
        _2773 = (((((_2828 * _2596) + _1304) * cbLight._m0[_2779].z) * _2847) * _2848) + _2707;
    }
    float _2883;
    float _2885;
    float _2887;
    if (_2497)
    {
        _2883 = _2769;
        _2885 = _2771;
        _2887 = _2773;
    }
    else
    {
        uint _2894 = _2403 + 3u;
        uint _2898 = _2403 + 11u;
        float _2912 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2894].w)) * _1143) * 0.949999988079071044921875);
        float _2913 = _2912 * _2912;
        float _2914 = cbLight._m0[_2894].x + _1219;
        float _2915 = cbLight._m0[_2894].y + _1220;
        float _2916 = cbLight._m0[_2894].z + _1221;
        float _2920 = inversesqrt(dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916)));
        float _2921 = _2920 * _2914;
        float _2922 = _2920 * _2915;
        float _2923 = _2920 * _2916;
        float _2924 = dot(vec3(_1140, _1141, _1142), vec3(cbLight._m0[_2894].xyz));
        float _4965 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2927 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2928 = dot(vec3(_1140, _1141, _1142), vec3(_2921, _2922, _2923));
        float _4976 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
        float _2931 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _2932 = dot(vec3(cbLight._m0[_2894].xyz), vec3(_2921, _2922, _2923));
        float _4987 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        float _2936 = _2913 * _2913;
        float _2940 = ((_2931 * _2931) * (_2936 + (-1.0))) + 1.0;
        float _2947 = exp2(log2(1.0 - (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) * 5.0);
        float _2954 = 1.0 - _2913;
        float _2964 = (0.5 / (((_2571 * ((_2927 * _2954) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2571 * _2954) + _2913) * _2927))) * _2927;
        float _4998 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2966 = (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2936 / ((_2940 * _2940) * 3.141590118408203125));
        float _2967 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
        _2883 = (((((_2947 * _2593) + _1301) * cbLight._m0[_2898].x) * _2966) * _2967) + _2769;
        _2885 = (((((_2947 * _2595) + _1303) * cbLight._m0[_2898].y) * _2966) * _2967) + _2771;
        _2887 = (((((_2947 * _2596) + _1304) * cbLight._m0[_2898].z) * _2966) * _2967) + _2773;
    }
    float _3102;
    float _3104;
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    if (_2401.y == 0u)
    {
        float _3042 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3042;
        float _3044 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3042;
        float _3045 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3042;
        uvec4 _3057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3058 = _3057.x;
        uint _3069 = uint((float(_3057.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1240) / _3058))) + floor(float(uint(cbSceneParam._m0[85u].x * _1239) / _3058)));
        float _3079 = (log2(_3045 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3080 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        uint _3083 = uint(isnan(14.0) ? _3080 : (isnan(_3080) ? 14.0 : min(_3080, 14.0)));
        uvec4 _3088 = texelFetch(g_lightClusterGridBuffer, int(((_3083 << 2u) + (_3069 << 6u)) >> 2u));
        uint _3089 = _3088.x;
        uint _3090 = _3057.z;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((((1u << ((_3090 >> 4u) & 15u)) + 4294967295u) & _3089) == 0u) || ((_3090 & 240u) == 0u))
        {
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
            _3196 = 0.0;
            _3198 = 0.0;
            _3200 = 0.0;
        }
        else
        {
            float _3191;
            float _3193;
            float _3195;
            float _3197;
            float _3199;
            float _3201;
            float _3343 = 0.0;
            float _3344 = 0.0;
            float _3345 = 0.0;
            float _3346 = 0.0;
            float _3347 = 0.0;
            float _3348 = 0.0;
            uint _3349 = 0u;
            uint _3358;
            bool _3359;
            for (;;)
            {
                _3358 = texelFetch(g_lightClassification, int((((_3083 << 5u) + (_3069 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                _3359 = _3358 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3359)
                {
                    frontier_phi_66_pred = _3343;
                    frontier_phi_66_pred_1 = _3348;
                    frontier_phi_66_pred_2 = _3347;
                    frontier_phi_66_pred_3 = _3346;
                    frontier_phi_66_pred_4 = _3345;
                    frontier_phi_66_pred_5 = _3344;
                }
                else
                {
                    float _3488;
                    float _3489;
                    float _3490;
                    float _3491;
                    float _3492;
                    float _3493;
                    uint _3494;
                    _3488 = _3343;
                    _3489 = _3344;
                    _3490 = _3345;
                    _3491 = _3346;
                    _3492 = _3347;
                    _3493 = _3348;
                    _3494 = _3358;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    for (;;)
                    {
                        uint _3498 = uint(findLSB(_3494)) + (_3349 << 5u);
                        uint _3495 = (_3494 + 4294967295u) & _3494;
                        uint _3500 = _3498 * 48u;
                        vec4 _3514 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3500)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3500 + 3u)).x));
                        uint _3520 = (_3498 * 48u) + 4u;
                        vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3520)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3520 + 3u)).x));
                        uint _3539 = (_3498 * 48u) + 8u;
                        vec3 _3550 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3539)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3539 + 2u)).x));
                        float _3554 = _3514.x - _3043;
                        float _3555 = _3514.y - _3044;
                        float _3556 = _3514.z - _3045;
                        float _3557 = dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556));
                        float _3560 = inversesqrt(_3557);
                        float _3561 = _3560 * _3554;
                        float _3562 = _3560 * _3555;
                        float _3563 = _3560 * _3556;
                        float _3564 = dot(vec3(_1258, _1261, _1264), vec3(_3561, _3562, _3563));
                        float _3569 = 1.0 - (_3557 * _3514.w);
                        float _5024 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3570 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                        float _3571 = sqrt(_3557) * _3533.w;
                        float _3574 = 1.39999997615814208984375 / (_3571 + 1.39999997615814208984375);
                        float _3575 = _3574 * _3574;
                        float _3578 = ((1.0 - _3575) * _3564) + _3575;
                        float _3581 = _3571 * _3571;
                        float _3585 = ((isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0))) * _3570) / ((_3581 * 0.699999988079071044921875) + 1.0);
                        float _3589 = (-0.0) - _3043;
                        float _3590 = (-0.0) - _3044;
                        float _3591 = (-0.0) - _3045;
                        float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                        float _3596 = _3595 * _3589;
                        float _3597 = _3595 * _3590;
                        float _3598 = _3595 * _3591;
                        float _3606 = exp2(log2(1.0 / ((_3581 * 3.5) + 5.0)) * 0.25);
                        float _3607 = 1.0 - _1333;
                        float _3614 = sqrt(1.0 - ((1.0 - (_3607 * _3607)) * (1.0 - (_3606 * _3606))));
                        float _3615 = _3614 * _3614;
                        float _3616 = _3615 * _3615;
                        float _3617 = _3596 + _3561;
                        float _3618 = _3597 + _3562;
                        float _3619 = _3598 + _3563;
                        float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                        float _3627 = dot(vec3(_1258, _1261, _1264), vec3(_3596, _3597, _3598));
                        float _5040 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                        float _3630 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                        float _3631 = dot(vec3(_1258, _1261, _1264), vec3(_3623 * _3617, _3623 * _3618, _3623 * _3619));
                        float _5051 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3634 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                        float _3638 = ((_3634 * _3634) * (_3616 + (-1.0))) + 1.0;
                        float _3639 = _3574 * _3615;
                        float _3640 = _3639 * _3639;
                        float _3643 = ((1.0 - _3640) * _3564) + _3640;
                        float _5062 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3644 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3645 = 1.0 - _3615;
                        float _3655 = (0.5 / (((_3644 * ((_3630 * _3645) + _3615)) + 9.9999999392252902907785028219223e-09) + (((_3644 * _3645) + _3615) * _3630))) * _3644;
                        float _5073 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3666 = (((_3616 * 3.1415927410125732421875) * (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) / ((_3638 * _3638) * ((_3581 * 2.1991131305694580078125) + 3.141590118408203125))) * _3570;
                        _3418 = (_3585 * _3533.x) + _3491;
                        _3419 = (_3585 * _3533.y) + _3492;
                        _3420 = (_3585 * _3533.z) + _3493;
                        _3415 = (_3666 * _3550.x) + _3488;
                        _3416 = (_3666 * _3550.y) + _3489;
                        _3417 = (_3666 * _3550.z) + _3490;
                        if (_3495 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3488 = _3415;
                            _3489 = _3416;
                            _3490 = _3417;
                            _3491 = _3418;
                            _3492 = _3419;
                            _3493 = _3420;
                            _3494 = _3495;
                        }
                    }
                    frontier_phi_66_pred = _3415;
                    frontier_phi_66_pred_1 = _3420;
                    frontier_phi_66_pred_2 = _3419;
                    frontier_phi_66_pred_3 = _3418;
                    frontier_phi_66_pred_4 = _3417;
                    frontier_phi_66_pred_5 = _3416;
                }
                _3191 = frontier_phi_66_pred;
                _3201 = frontier_phi_66_pred_1;
                _3199 = frontier_phi_66_pred_2;
                _3197 = frontier_phi_66_pred_3;
                _3195 = frontier_phi_66_pred_4;
                _3193 = frontier_phi_66_pred_5;
                uint _3350 = _3349 + 1u;
                if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3343 = _3191;
                    _3344 = _3193;
                    _3345 = _3195;
                    _3346 = _3197;
                    _3347 = _3199;
                    _3348 = _3201;
                    _3349 = _3350;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
            _3196 = _3197;
            _3198 = _3199;
            _3200 = _3201;
        }
        uvec4 _3204 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3205 = _3204.z;
        uint _3207 = (_3205 >> 8u) & 15u;
        float _3311;
        float _3313;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        if (((4294967295u << _3207) & _3089) == 0u)
        {
            _3311 = _3190;
            _3313 = _3192;
            _3315 = _3194;
            _3317 = _3196;
            _3319 = _3198;
            _3321 = _3200;
        }
        else
        {
            float _3336 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
            float _3337 = _3336 * _3043;
            float _3338 = _3336 * _3044;
            float _3339 = _3336 * _3045;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3207 < ((_3205 >> 12u) & 15u))
            {
                float _3312;
                float _3314;
                float _3316;
                float _3318;
                float _3320;
                float _3322;
                float _3471 = _3190;
                float _3472 = _3192;
                float _3473 = _3194;
                float _3474 = _3196;
                float _3475 = _3198;
                float _3476 = _3200;
                uint _3477 = _3207;
                uint _3486;
                bool _3487;
                for (;;)
                {
                    _3486 = texelFetch(g_lightClassification, int((((_3083 << 5u) + (_3069 << 9u)) + (_3477 << 2u)) >> 2u)).x;
                    _3487 = _3486 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3487)
                    {
                        frontier_phi_77_pred = _3476;
                        frontier_phi_77_pred_1 = _3475;
                        frontier_phi_77_pred_2 = _3474;
                        frontier_phi_77_pred_3 = _3473;
                        frontier_phi_77_pred_4 = _3472;
                        frontier_phi_77_pred_5 = _3471;
                    }
                    else
                    {
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3973;
                        float _3974;
                        float _3975;
                        float _3976;
                        float _3977;
                        float _3978;
                        float _3693 = _3471;
                        float _3694 = _3472;
                        float _3695 = _3473;
                        float _3696 = _3474;
                        float _3697 = _3475;
                        float _3698 = _3476;
                        uint _3699 = _3486;
                        uint _3700;
                        vec4 _3725;
                        float _3726;
                        vec4 _3741;
                        vec3 _3753;
                        vec4 _3768;
                        vec4 _3783;
                        float _3829;
                        bool _3830;
                        for (;;)
                        {
                            uint _3710 = ((_3477 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3699));
                            _3700 = (_3699 + 4294967295u) & _3699;
                            uint _3712 = _3710 * 40u;
                            _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            _3726 = _3725.w;
                            uint _3728 = (_3710 * 40u) + 4u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3710 * 40u) + 8u;
                            _3753 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x));
                            uint _3755 = (_3710 * 40u) + 16u;
                            _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            uint _3770 = (_3710 * 40u) + 20u;
                            _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3785 = (_3710 * 40u) + 24u;
                            vec4 _3798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 3u)).x));
                            uint _3804 = (_3710 * 40u) + 28u;
                            vec4 _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            _3829 = fma(_3045, _3817.z, fma(_3044, _3817.y, _3817.x * _3043)) + _3817.w;
                            _3830 = !((fma(_3045, _3798.z, fma(_3044, _3798.y, _3798.x * _3043)) + _3798.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3830)
                            {
                                float _3857 = _3725.x - _3043;
                                float _3858 = _3725.y - _3044;
                                float _3859 = _3725.z - _3045;
                                float _3860 = dot(vec3(_3857, _3858, _3859), vec3(_3857, _3858, _3859));
                                float _3863 = inversesqrt(_3860);
                                float _3864 = _3863 * _3857;
                                float _3865 = _3863 * _3858;
                                float _3866 = _3863 * _3859;
                                float _3870 = 1.0 - (_3860 / (_3726 * _3726));
                                float _5084 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3871 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                                float _3875 = sqrt(_3860) * _3741.w;
                                float _3877 = 1.39999997615814208984375 / (_3875 + 1.39999997615814208984375);
                                float _3878 = _3877 * _3877;
                                float _3881 = ((1.0 - _3878) * dot(vec3(_3864, _3865, _3866), vec3(_1258, _1261, _1264))) + _3878;
                                float _3884 = _3875 * _3875;
                                float _3888 = (fma(_3045, _3768.z, fma(_3044, _3768.y, _3768.x * _3043)) + _3768.w) / _3829;
                                float _3889 = (fma(_3045, _3783.z, fma(_3044, _3783.y, _3783.x * _3043)) + _3783.w) / _3829;
                                float _3893 = 1.0 - dot(vec2(_3888, _3889), vec2(_3888, _3889));
                                float _5100 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3894 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                                float _3895 = _3894 * (((isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0))) * _3871) / ((_3884 * 0.699999988079071044921875) + 1.0));
                                float _3907 = exp2(log2(1.0 / ((_3884 * 3.5) + 5.0)) * 0.25);
                                float _3908 = 1.0 - _1333;
                                float _3915 = sqrt(1.0 - ((1.0 - (_3908 * _3908)) * (1.0 - (_3907 * _3907))));
                                float _3916 = _3915 * _3915;
                                float _3917 = _3916 * _3916;
                                float _3918 = _3864 - _3337;
                                float _3919 = _3865 - _3338;
                                float _3920 = _3866 - _3339;
                                float _3924 = inversesqrt(dot(vec3(_3918, _3919, _3920), vec3(_3918, _3919, _3920)));
                                float _3928 = dot(vec3(_1258, _1261, _1264), vec3((-0.0) - _3337, (-0.0) - _3338, (-0.0) - _3339));
                                float _5111 = isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0));
                                float _3931 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                                float _3932 = dot(vec3(_1258, _1261, _1264), vec3(_3924 * _3918, _3924 * _3919, _3924 * _3920));
                                float _5122 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3935 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3939 = ((_3935 * _3935) * (_3917 + (-1.0))) + 1.0;
                                float _3940 = _3877 * _3916;
                                float _3941 = _3940 * _3940;
                                float _3947 = ((1.0 - _3941) * dot(vec3(_1258, _1261, _1264), vec3(_3864, _3865, _3866))) + _3941;
                                float _5133 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                                float _3948 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3949 = 1.0 - _3916;
                                float _3959 = (0.5 / (((_3948 * ((_3931 * _3949) + _3916)) + 9.9999999392252902907785028219223e-09) + (((_3948 * _3949) + _3916) * _3931))) * _3948;
                                float _5144 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                                float _3969 = (_3894 * _3871) * (((_3917 * 3.1415927410125732421875) * (isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0)))) / ((_3939 * _3939) * ((_3884 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3895 * _3741.y;
                                frontier_phi_83_pred_1 = _3895 * _3741.x;
                                frontier_phi_83_pred_2 = _3969 * _3753.z;
                                frontier_phi_83_pred_3 = _3969 * _3753.y;
                                frontier_phi_83_pred_4 = _3969 * _3753.x;
                                frontier_phi_83_pred_5 = _3895 * _3741.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3977 = frontier_phi_83_pred;
                            _3976 = frontier_phi_83_pred_1;
                            _3975 = frontier_phi_83_pred_2;
                            _3974 = frontier_phi_83_pred_3;
                            _3973 = frontier_phi_83_pred_4;
                            _3978 = frontier_phi_83_pred_5;
                            _3683 = _3976 + _3696;
                            _3684 = _3977 + _3697;
                            _3685 = _3978 + _3698;
                            _3680 = _3973 + _3693;
                            _3681 = _3974 + _3694;
                            _3682 = _3975 + _3695;
                            if (_3700 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3693 = _3680;
                                _3694 = _3681;
                                _3695 = _3682;
                                _3696 = _3683;
                                _3697 = _3684;
                                _3698 = _3685;
                                _3699 = _3700;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3685;
                        frontier_phi_77_pred_1 = _3684;
                        frontier_phi_77_pred_2 = _3683;
                        frontier_phi_77_pred_3 = _3682;
                        frontier_phi_77_pred_4 = _3681;
                        frontier_phi_77_pred_5 = _3680;
                    }
                    _3322 = frontier_phi_77_pred;
                    _3320 = frontier_phi_77_pred_1;
                    _3318 = frontier_phi_77_pred_2;
                    _3316 = frontier_phi_77_pred_3;
                    _3314 = frontier_phi_77_pred_4;
                    _3312 = frontier_phi_77_pred_5;
                    uint _3478 = _3477 + 1u;
                    if (_3478 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3471 = _3312;
                        _3472 = _3314;
                        _3473 = _3316;
                        _3474 = _3318;
                        _3475 = _3320;
                        _3476 = _3322;
                        _3477 = _3478;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3316;
                frontier_phi_58_59_ladder_1 = _3322;
                frontier_phi_58_59_ladder_2 = _3320;
                frontier_phi_58_59_ladder_3 = _3318;
                frontier_phi_58_59_ladder_4 = _3314;
                frontier_phi_58_59_ladder_5 = _3312;
            }
            else
            {
                frontier_phi_58_59_ladder = _3194;
                frontier_phi_58_59_ladder_1 = _3200;
                frontier_phi_58_59_ladder_2 = _3198;
                frontier_phi_58_59_ladder_3 = _3196;
                frontier_phi_58_59_ladder_4 = _3192;
                frontier_phi_58_59_ladder_5 = _3190;
            }
            _3311 = frontier_phi_58_59_ladder_5;
            _3313 = frontier_phi_58_59_ladder_4;
            _3315 = frontier_phi_58_59_ladder;
            _3317 = frontier_phi_58_59_ladder_3;
            _3319 = frontier_phi_58_59_ladder_2;
            _3321 = frontier_phi_58_59_ladder_1;
        }
        float _3326 = isnan(1.0) ? _1317 : (isnan(_1317) ? 1.0 : min(_1317, 1.0));
        _3102 = (_3326 * _3317) + _2535;
        _3104 = (_3326 * _3319) + _2537;
        _3106 = (_3326 * _3321) + _2539;
        _3108 = ((_3311 * _1301) * _3326) + _2883;
        _3110 = ((_3313 * _1303) * _3326) + _2885;
        _3112 = ((_3315 * _1304) * _3326) + _2887;
    }
    else
    {
        _3102 = _2535;
        _3104 = _2537;
        _3106 = _2539;
        _3108 = _2883;
        _3110 = _2885;
        _3112 = _2887;
    }
    float _5160 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _5171 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
    float _5182 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _3129 = ((isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0))) * (_3102 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1317))) + ((_3108 + ((isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0))) * _2154)) * cbPerFrame._m0[3u].x);
    float _3130 = ((isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0))) * (_3104 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1317))) + ((_3110 + ((isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0))) * _2154)) * cbPerFrame._m0[3u].x);
    float _3131 = ((isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0))) * (_3106 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1317))) + ((_3112 + ((isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0))) * _2154)) * cbPerFrame._m0[3u].x);
    uint _3132 = _305 + 6u;
    float _3140 = _1239 / cbSceneParam._m0[86u].x;
    float _3141 = _1240 / cbSceneParam._m0[86u].y;
    vec4 _3155 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3140, _3141, (log2((isnan(cbSceneParam._m0[77u].w) ? _1162 : (isnan(_1162) ? cbSceneParam._m0[77u].w : min(_1162, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3157 = _3155.x;
    float _3158 = _3155.y;
    float _3159 = _3155.z;
    float _3160 = _3155.w;
    float _3253;
    float _3255;
    float _3257;
    float _3259;
    if (_1162 > cbSceneParam._m0[78u].w)
    {
        float _3215 = isnan(_1162) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1162 : min(cbSceneParam._m0[80u].w, _1162));
        float _3216 = _3215 / _1162;
        float _3227 = _3216 * _1212;
        float _3228 = _1213 * _3216;
        float _3229 = (-0.0) - _3228;
        float _3231 = _3216 * _1214;
        float _3233 = (cbSceneParam._m0[77u].w * _3229) / _3215;
        float _3234 = _3233 + cbSceneParam._m0[79u].w;
        float _3235 = cbSceneParam._m0[79u].w - _3228;
        float _3241 = sqrt(((_3227 * _3227) + (_3228 * _3228)) + (_3231 * _3231));
        float _3244 = (1.0 - (cbSceneParam._m0[77u].w / _3215)) * _3241;
        float _3249 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3251 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3428;
        if (abs((_3229 - _3233) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3428 = ((((_3234 > 0.0) ? exp2(_3249 * _3234) : (2.0 - exp2(_3251 * _3234))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3244;
        }
        else
        {
            float _3372 = 1.0 / cbSceneParam._m0[80u].x;
            float _3373 = isnan(_3235) ? _3234 : (isnan(_3234) ? _3235 : max(_3234, _3235));
            float _3374 = isnan(_3235) ? _3234 : (isnan(_3234) ? _3235 : min(_3234, _3235));
            float _3383 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : min(_3373, 0.0));
            float _3384 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : min(_3374, 0.0));
            _3428 = ((abs(_3241 / _3229) * cbSceneParam._m0[80u].y) * ((((_3383 - _3384) * 2.0) - ((exp2(_3249 * (isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0)))) - exp2(_3249 * (isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))))) * _3372)) - ((exp2(_3251 * _3383) - exp2(_3251 * _3384)) * _3372))) + (_3244 * cbSceneParam._m0[80u].z);
        }
        vec4 _3430 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3140, _3141, 1.0), 0.0);
        float _3439 = exp2((_3428 * (-1.44269502162933349609375)) * (1.0 - _3430.w));
        float _3440 = log2(_3439);
        float _3456 = log2(_3160);
        _3253 = (exp2(_3456 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].x)) * _3430.x) / cbSceneParam._m0[78u].x)) + _3157;
        _3255 = (exp2(_3456 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].y)) * _3430.y) / cbSceneParam._m0[78u].y)) + _3158;
        _3257 = (exp2(_3456 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3440 * cbSceneParam._m0[78u].z)) * _3430.z) / cbSceneParam._m0[78u].z)) + _3159;
        _3259 = _3439 * _3160;
    }
    else
    {
        _3253 = _3157;
        _3255 = _3158;
        _3257 = _3159;
        _3259 = _3160;
    }
    bool _3466;
    vec4 _3269;
    vec4 _3291;
    float _3293;
    float _3297;
    float _3298;
    float _3299;
    float _3300;
    bool _3310;
    for (;;)
    {
        _3269 = cbMatDynParam._m0[0u];
        float _3271 = roundEven(_3269.y);
        bool _3272 = _3271 == 3.0;
        float _3273 = log2(_3259);
        float _3280 = exp2(_3273 * cbSceneParam._m0[78u].x) * _3129;
        float _3281 = exp2(_3273 * cbSceneParam._m0[78u].y) * _3130;
        float _3282 = exp2(_3273 * cbSceneParam._m0[78u].z) * _3131;
        float _3289 = _1228 + (-0.5);
        _3291 = cbMtdParam._m0[1u];
        _3293 = _3291.y * _3289;
        float _3296 = (_3271 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3297 = _3296 * (_3272 ? _3280 : (_3280 + (cbSceneParam._m0[72u].w * _3253)));
        _3298 = _3296 * (_3272 ? _3281 : (_3281 + (cbSceneParam._m0[72u].w * _3255)));
        _3299 = _3296 * (_3272 ? _3282 : (_3282 + (cbSceneParam._m0[72u].w * _3257)));
        _3300 = _3289 * 0.999000012874603271484375;
        _3310 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3310)
        {
            if ((cbInstanceData._m0[_305 + 7u].x + _3300) < 0.5)
            {
                _3466 = true;
                break;
            }
        }
        uint _3407 = _1277 + uint(_3269.w);
        if ((cbInstanceData._m0[_3407].w < 1.0) && ((cbInstanceData._m0[_3407].w + _3300) < 0.5))
        {
            _3466 = true;
            break;
        }
        if ((_3293 + 1.0) < _3291.x)
        {
            _3466 = true;
            break;
        }
        _3466 = false;
        break;
    }
    float _3671;
    if (_3466)
    {
        discard_state = true;
        _3671 = 0.0;
    }
    else
    {
        _3671 = cbInstanceData._m0[_3132].w;
    }
    SV_Target.x = _3297;
    SV_Target.y = _3298;
    SV_Target.z = _3299;
    SV_Target.w = _3671;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3132].w;
    discard_exit();
}


