#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1552;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3901 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3912 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3923 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3934 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _462 = (_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _463 = (_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _464 = (_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3945 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    float _541 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _535;
    float _544 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _536;
    float _547 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _537;
    float _554 = ((_535 - _541) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) + _541;
    float _555 = ((_536 - _544) * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) + _544;
    float _556 = ((_537 - _547) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) + _547;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    float _626 = ((_598.x - _617) * _455) + _617;
    float _627 = ((_598.y - _618) * _455) + _618;
    float _628 = ((_598.z - _619) * _455) + _619;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _653 = ((_640.z - _628) * _528) + _628;
    float _656 = ((((_640.x - _626) * _528) + _626) * 2.0) + (-1.0);
    float _657 = ((((_640.y - _627) * _528) + _627) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3956 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _693 = (_656 + ((((_573.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_681.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _694 = (_657 + ((((_573.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_681.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _697 = fma(_663, _258, fma(_694, _265, _693 * _251));
    float _700 = fma(_663, _259, fma(_694, _266, _693 * _252));
    float _703 = fma(_663, _260, fma(_694, _267, _693 * _253));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _736 = _734.x;
    float _737 = 1.0 - _736;
    float _746 = (cbMtdParam._m0[19u].x + dot(vec4(_707 * _697, _707 * _700, _707 * _703, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_736 - _737) * cbMtdParam._m0[24u].z) + _737) * cbMtdParam._m0[21u].z);
    float _3967 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _747 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _749 = (-0.0) - cbMtdParam._m0[24u].x;
    float _751 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0));
    float _759 = _747 - ((_747 * TEXCOORD_8.x) * _752);
    float _760 = _747 - ((_747 * TEXCOORD_8.y) * _752);
    float _761 = _747 - ((_747 * TEXCOORD_8.z) * _752);
    float _768 = (_759 * (cbMtdParam._m0[17u].x - _554)) + _554;
    float _769 = (_760 * (cbMtdParam._m0[17u].y - _555)) + _555;
    float _770 = (_761 * (cbMtdParam._m0[17u].z - _556)) + _556;
    vec4 _782 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _784 = _782.x;
    float _785 = 1.0 - _784;
    float _811 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_784 - _785) * cbMtdParam._m0[24u].w) + _785) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3988 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _812 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _820 = ((((cbMtdParam._m0[10u].x - _768) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _812) + _768;
    float _821 = ((((cbMtdParam._m0[10u].y - _769) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _812) + _769;
    float _822 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _770)) * _812) + _770;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _850 = _848.x;
    float _868 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _850) * _455) + _850;
    float _885 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _868) * _528) + _868;
    float _889 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _885) * cbMtdParam._m0[19u].z) + _885;
    float _891 = _889 - (_889 * _759);
    float _893 = _891 - (_891 * _812);
    float _898 = (((_573.z - _653) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _653;
    float _902 = ((_681.z - _898) * cbMtdParam._m0[19u].w) + _898;
    vec4 _916 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _923 = (_916.x * 2.0) + (-1.0);
    float _924 = (_916.y * 2.0) + (-1.0);
    float _925 = dot(vec2(_923, _924), vec2(_923, _924));
    float _3999 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _933 = ((_916.z - _902) * _759) + _902;
    float _936 = ((cbMtdParam._m0[23u].x - _933) * _812) + _933;
    vec4 _957 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _963 = (_957.x * 2.0) + (-1.0);
    float _964 = (_957.y * 2.0) + (-1.0);
    float _965 = dot(vec2(_963, _964), vec2(_963, _964));
    float _4010 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _980 = ((sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _663) * _761) + _663;
    float _983 = (((_923 - _693) * _759) + _693) + (cbMtdParam._m0[21u].x * _693);
    float _984 = (((_924 - _694) * _760) + _694) + (cbMtdParam._m0[21u].x * _694);
    float _995 = (((_963 - _983) + (_983 * cbMtdParam._m0[22u].z)) * _812) + _983;
    float _996 = (((_964 - _984) + (_984 * cbMtdParam._m0[22u].z)) * _812) + _984;
    float _997 = (_812 * (sqrt(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) - _980)) + _980;
    float _999 = cbMtdParam._m0[22u].x + _681.w;
    float _1002 = fma(_997, _258, fma(_996, _265, _995 * _251));
    float _1005 = fma(_997, _259, fma(_996, _266, _995 * _252));
    float _1008 = fma(_997, _260, fma(_996, _267, _995 * _253));
    float _1012 = inversesqrt(dot(vec3(_1002, _1005, _1008), vec3(_1002, _1005, _1008)));
    float _1013 = _1012 * _1002;
    float _1014 = _1012 * _1005;
    float _1015 = _1012 * _1008;
    float _4021 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _1016 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4043 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4054 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4065 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4076 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _1021 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1035 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1085 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1075);
    float _1086 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1075);
    float _1087 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1075);
    float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
    float _1092 = _1085 * _1091;
    float _1093 = _1086 * _1091;
    float _1094 = _1087 * _1091;
    float _1100 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1101 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1119 = fma(_1015, cbSceneParam._m0[5u].z, fma(_1014, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1013));
    float _1122 = fma(_1015, cbSceneParam._m0[6u].z, fma(_1014, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1013));
    float _1125 = fma(_1015, cbSceneParam._m0[7u].z, fma(_1014, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1013));
    uint _1139 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1145 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1139].x;
    float _1146 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_1139].y;
    float _1147 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * cbInstanceData._m0[_1139].z;
    float _4087 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _1151 = 1.0 - _1021;
    float _1152 = _1148 * _1151;
    float _1153 = _1149 * _1151;
    float _1154 = _1150 * _1151;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1021;
    float _1160 = (_1149 + (-0.039999999105930328369140625)) * _1021;
    float _1161 = (_1150 + (-0.039999999105930328369140625)) * _1021;
    float _1162 = _1159 + 0.039999999105930328369140625;
    float _1164 = _1160 + 0.039999999105930328369140625;
    float _1165 = _1161 + 0.039999999105930328369140625;
    vec4 _1174 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1100, cbSceneParam._m0[86u].y * _1101));
    float _1178 = ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * TEXCOORD_5.w) * _1174.x;
    float _1179 = dot(vec3(_1013, _1014, _1015), vec3(_1092, _1093, _1094));
    float _1182 = _1179 * 2.0;
    float _1186 = (_1182 * _1013) - _1092;
    float _1187 = (_1182 * _1014) - _1093;
    float _1188 = (_1182 * _1015) - _1094;
    float _1192 = abs(dot(vec3(_1092, _1093, _1094), vec3(_1013, _1014, _1015)));
    float _4120 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1194 = sqrt(_1016);
    float _1207 = exp2((_1194 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1194 * 3.0));
    float _1213 = (1.0 - _1207) * ((_1194 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1214 = _1207 * _1194;
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1276 = fma(_1250, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242));
        float _1280 = fma(_1250, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242));
        float _1284 = fma(_1250, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242));
        float _1309 = _1242 + _1013;
        float _1310 = _1246 + _1014;
        float _1311 = _1250 + _1015;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1276;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1280;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1284;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1276 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1280 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1284 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_1013, _1014, _1015), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4146 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4157 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4168 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_1013, _1014, _1015), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4179 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4190 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4201 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_1013, _1014, _1015), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4234 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1590 = fma(_1250, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242));
        float _1594 = fma(_1250, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242));
        float _1598 = fma(_1250, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242));
        float _1621 = _1242 + _1013;
        float _1622 = _1246 + _1014;
        float _1623 = _1250 + _1015;
        float _1633 = fma(_1623, cbModelParam._m0[30u].z, fma(_1622, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1621)) - _1590;
        float _1634 = fma(_1623, cbModelParam._m0[31u].z, fma(_1622, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1621)) - _1594;
        float _1635 = fma(_1623, cbModelParam._m0[32u].z, fma(_1622, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1621)) - _1598;
        float _1639 = inversesqrt(dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635)));
        float _1652 = ((_1639 * _1633) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1590 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1653 = ((_1639 * _1634) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1594 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1654 = ((_1639 * _1635) / cbModelParam._m0[35u].z) + ((((((_1598 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1652, _1653, _1654), 0.0);
        float _1689 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1656.x + (-0.5));
        float _1691 = _1689 * (_1656.y + (-0.5));
        float _1692 = _1689 * (_1656.z + (-0.5));
        float _1699 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1663.x + (-0.5));
        float _1701 = _1699 * (_1663.y + (-0.5));
        float _1702 = _1699 * (_1663.z + (-0.5));
        float _1709 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1670.x + (-0.5));
        float _1711 = _1709 * (_1670.y + (-0.5));
        float _1712 = _1709 * (_1670.z + (-0.5));
        float _1719 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1677.x + (-0.5));
        float _1721 = _1719 * (_1677.y + (-0.5));
        float _1722 = _1719 * (_1677.z + (-0.5));
        float _1723 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1724 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1725 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1726 = _1690 * 0.5;
        float _1727 = _1700 * 0.5;
        float _1728 = _1710 * 0.5;
        float _1729 = dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728));
        float _1734 = (_1729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1729);
        float _1742 = (dot(vec3(_1013, _1014, _1015), vec3(_1734 * _1726, _1734 * _1727, _1734 * _1728)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1751 = sqrt(((_1727 * _1727) + (_1726 * _1726)) + (_1728 * _1728)) / (_1723 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1753 = _1752 * 2.0;
        float _1757 = (1.0 - _1752) / (_1752 + 1.0);
        float _4297 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1767 = ((((1.0 - _1758) * (_1753 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1753 + 1.0))) + _1758) * _1723;
        float _1768 = _1691 * 0.5;
        float _1769 = _1701 * 0.5;
        float _1770 = _1711 * 0.5;
        float _1771 = dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770));
        float _1776 = (_1771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1771);
        float _1784 = (dot(vec3(_1013, _1014, _1015), vec3(_1776 * _1768, _1776 * _1769, _1776 * _1770)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1793 = sqrt(((_1769 * _1769) + (_1768 * _1768)) + (_1770 * _1770)) / (_1724 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1795 = _1794 * 2.0;
        float _1799 = (1.0 - _1794) / (_1794 + 1.0);
        float _4330 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1809 = ((((1.0 - _1800) * (_1795 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1795 + 1.0))) + _1800) * _1724;
        float _1810 = _1692 * 0.5;
        float _1811 = _1702 * 0.5;
        float _1812 = _1712 * 0.5;
        float _1813 = dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812));
        float _1818 = (_1813 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1813);
        float _1826 = (dot(vec3(_1013, _1014, _1015), vec3(_1818 * _1810, _1818 * _1811, _1818 * _1812)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1835 = sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812)) / (_1725 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1837 = _1836 * 2.0;
        float _1841 = (1.0 - _1836) / (_1836 + 1.0);
        float _4363 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1851 = ((((1.0 - _1842) * (_1837 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1837 + 1.0))) + _1842) * _1725;
        _1859 = _1692;
        _1860 = _1691;
        _1861 = _1690;
        _1862 = _1702;
        _1863 = _1701;
        _1864 = _1700;
        _1865 = _1712;
        _1866 = _1711;
        _1867 = _1710;
        _1868 = _1725;
        _1869 = _1724;
        _1870 = _1723;
        _1871 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)));
        _1872 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)));
        _1873 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)));
    }
    else
    {
        _1859 = _1552;
        _1860 = _1552;
        _1861 = _1552;
        _1862 = _1552;
        _1863 = _1552;
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = _1552;
        _1871 = 0.0;
        _1872 = 0.0;
        _1873 = 0.0;
    }
    float _1883 = (cbModelParam._m0[1u].x * (_1871 - _1564)) + _1564;
    float _1884 = (cbModelParam._m0[1u].x * (_1872 - _1565)) + _1565;
    float _1885 = (cbModelParam._m0[1u].x * (_1873 - _1566)) + _1566;
    float _1906 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1883));
    float _1927 = _1186 * 0.5;
    float _1928 = _1187 * 0.5;
    float _1929 = _1188 * 0.5;
    float _1930 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1861, _1864, _1867, _1870));
    float _1933 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1860, _1863, _1866, _1869));
    float _1936 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1859, _1862, _1865, _1868));
    float _1970;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1943 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1947 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1951 = dot(vec4(_1927, _1928, _1929, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1958 = dot(vec4(cbModelParam._m0[39u]), vec4(_1927, _1928, _1929, 1.0));
        _1970 = dot(vec3(isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1958) ? 0.0 : (isnan(0.0) ? _1958 : max(0.0, _1958))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1970 = 1.0;
    }
    float _1981;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1972 = dot(vec4(cbModelParam._m0[40u]), vec4(_1927, _1928, _1929, 1.0));
        _1981 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1972) ? 0.0 : (isnan(0.0) ? _1972 : max(0.0, _1972))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1981 = 1.0;
    }
    float _1985 = (_1981 * cbModelParam._m0[1u].x) + (_1970 * (1.0 - cbModelParam._m0[1u].x));
    float _1995 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1016);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1995 : min(cbModelParam._m0[25u].z, _1995));
    float _2077;
    float _2079;
    float _2081;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2044 = fma(_1250, cbModelParam._m0[13u].z, fma(_1246, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1242)) + cbModelParam._m0[13u].w;
        float _2048 = fma(_1250, cbModelParam._m0[14u].z, fma(_1246, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1242)) + cbModelParam._m0[14u].w;
        float _2052 = fma(_1250, cbModelParam._m0[15u].z, fma(_1246, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1242)) + cbModelParam._m0[15u].w;
        float _2055 = fma(_1188, cbModelParam._m0[13u].z, fma(_1187, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186));
        float _2058 = fma(_1188, cbModelParam._m0[14u].z, fma(_1187, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186));
        float _2061 = fma(_1188, cbModelParam._m0[15u].z, fma(_1187, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186));
        float _2089;
        if (_2055 > 0.0)
        {
            _2089 = abs((1.0 - _2044) / _2055);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2044 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2089 = frontier_phi_14_12_ladder;
        }
        float _2313;
        if (_2058 > 0.0)
        {
            _2313 = abs((1.0 - _2048) / _2058);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2048 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2313 = frontier_phi_23_19_ladder;
        }
        float _2570;
        if (_2061 > 0.0)
        {
            _2570 = abs((1.0 - _2052) / _2061);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2052 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2570 = frontier_phi_35_30_ladder;
        }
        float _2572 = isnan(_2313) ? _2089 : (isnan(_2089) ? _2313 : min(_2089, _2313));
        float _2573 = isnan(_2570) ? _2572 : (isnan(_2572) ? _2570 : min(_2572, _2570));
        float _2577 = (_2573 * _2055) + _2044;
        float _2578 = (_2573 * _2058) + _2048;
        float _2579 = (_2573 * _2061) + _2052;
        float _2580 = _2573 * 9.9999997473787516355514526367188e-05;
        float _2582 = (-1.0) - _2580;
        float _2584 = _2580 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2579 > _2584) || ((_2579 < _2582) || ((_2578 > _2584) || ((_2578 < _2582) || ((_2577 < _2582) || (_2577 > _2584))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2579, cbModelParam._m0[9u].z, fma(_2578, cbModelParam._m0[9u].y, _2577 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2579, cbModelParam._m0[10u].z, fma(_2578, cbModelParam._m0[10u].y, _2577 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2579, cbModelParam._m0[11u].z, fma(_2578, cbModelParam._m0[11u].y, _2577 * cbModelParam._m0[11u].x))), _1996);
            frontier_phi_13_35_ladder = _2707.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2707.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2707.x * cbModelParam._m0[1u].y;
        }
        _2077 = frontier_phi_13_35_ladder_2;
        _2079 = frontier_phi_13_35_ladder_1;
        _2081 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1186, _1187, _1188), _1996);
        _2077 = _2065.x * cbModelParam._m0[1u].y;
        _2079 = _2065.y * cbModelParam._m0[1u].y;
        _2081 = _2065.z * cbModelParam._m0[1u].y;
    }
    float _2085 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1016);
    float _2086 = isnan(_2085) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2085 : min(cbModelParam._m0[25u].w, _2085));
    float _2176;
    float _2178;
    float _2180;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2140 = fma(_1250, cbModelParam._m0[21u].z, fma(_1246, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1242)) + cbModelParam._m0[21u].w;
        float _2144 = fma(_1250, cbModelParam._m0[22u].z, fma(_1246, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1242)) + cbModelParam._m0[22u].w;
        float _2148 = fma(_1250, cbModelParam._m0[23u].z, fma(_1246, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1242)) + cbModelParam._m0[23u].w;
        float _2151 = fma(_1188, cbModelParam._m0[21u].z, fma(_1187, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186));
        float _2154 = fma(_1188, cbModelParam._m0[22u].z, fma(_1187, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186));
        float _2157 = fma(_1188, cbModelParam._m0[23u].z, fma(_1187, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186));
        float _2318;
        if (_2151 > 0.0)
        {
            _2318 = abs((1.0 - _2140) / _2151);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2140 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2318 = frontier_phi_25_21_ladder;
        }
        float _2597;
        if (_2154 > 0.0)
        {
            _2597 = abs((1.0 - _2144) / _2154);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2144 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2597 = frontier_phi_37_32_ladder;
        }
        float _2810;
        if (_2157 > 0.0)
        {
            _2810 = abs((1.0 - _2148) / _2157);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2148 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2810 = frontier_phi_46_43_ladder;
        }
        float _2812 = isnan(_2597) ? _2318 : (isnan(_2318) ? _2597 : min(_2318, _2597));
        float _2813 = isnan(_2810) ? _2812 : (isnan(_2812) ? _2810 : min(_2812, _2810));
        float _2817 = (_2813 * _2151) + _2140;
        float _2818 = (_2813 * _2154) + _2144;
        float _2819 = (_2813 * _2157) + _2148;
        float _2820 = _2813 * 9.9999997473787516355514526367188e-05;
        float _2821 = (-1.0) - _2820;
        float _2823 = _2820 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2819 > _2823) || ((_2819 < _2821) || ((_2818 > _2823) || ((_2818 < _2821) || ((_2817 < _2821) || (_2817 > _2823))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2819, cbModelParam._m0[17u].z, fma(_2818, cbModelParam._m0[17u].y, _2817 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2819, cbModelParam._m0[18u].z, fma(_2818, cbModelParam._m0[18u].y, _2817 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2819, cbModelParam._m0[19u].z, fma(_2818, cbModelParam._m0[19u].y, _2817 * cbModelParam._m0[19u].x))), _2086);
            frontier_phi_22_46_ladder = _3018.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3018.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3018.x * cbModelParam._m0[1u].z;
        }
        _2176 = frontier_phi_22_46_ladder_2;
        _2178 = frontier_phi_22_46_ladder_1;
        _2180 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2160 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1186, _1187, _1188), _2086);
        _2176 = _2160.x * cbModelParam._m0[1u].z;
        _2178 = _2160.y * cbModelParam._m0[1u].z;
        _2180 = _2160.z * cbModelParam._m0[1u].z;
    }
    float _2193 = (((_1213 * _1162) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2176 - _2077)) + _2077);
    float _2195 = (((_1213 * _1164) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2178 - _2079)) + _2079);
    float _2197 = (((_1213 * _1165) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2180 - _2081)) + _2081);
    float _2200 = fma(_2197, cbSceneParam._m0[89u].z, fma(_2195, cbSceneParam._m0[89u].y, _2193 * cbSceneParam._m0[89u].x));
    float _2203 = fma(_2197, cbSceneParam._m0[90u].z, fma(_2195, cbSceneParam._m0[90u].y, _2193 * cbSceneParam._m0[90u].x));
    float _2206 = fma(_2197, cbSceneParam._m0[91u].z, fma(_2195, cbSceneParam._m0[91u].y, _2193 * cbSceneParam._m0[91u].x));
    vec4 _2214 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1100, _1101));
    float _2216 = _2214.w;
    float _2228 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2216);
    float _2229 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2216);
    float _2230 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2216);
    uvec4 _2234 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2236 = _2234.x * 14u;
    uint _2237 = _2236 + 13u;
    float _2244 = _1178 + (-1.0);
    float _2249 = (cbLight._m0[_2237].x * _2244) + 1.0;
    float _2250 = (cbLight._m0[_2237].y * _2244) + 1.0;
    float _2251 = (cbLight._m0[_2237].z * _2244) + 1.0;
    float _2252 = (cbLight._m0[_2237].w * _2244) + 1.0;
    uint _2253 = _2236 + 5u;
    float _2259 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2263 = _2236 + 4u;
    float _2272 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2276 = _2236 | 1u;
    float _2287 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_1013, _1014, _1015));
    float _2290 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_1013, _1014, _1015));
    float _4499 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _4510 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2295 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2297 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2304 = ((cbLight._m0[_2253].x * _2259) * _2297) + (((cbLight._m0[_2263].x * _2228) * _2272) * _2295);
    float _2305 = ((_2259 * cbLight._m0[_2253].y) * _2297) + (((cbLight._m0[_2263].y * _2229) * _2272) * _2295);
    float _2306 = ((_2259 * cbLight._m0[_2253].z) * _2297) + (((cbLight._m0[_2263].z * _2230) * _2272) * _2295);
    uvec4 _2310 = floatBitsToUint(cbLight._m0[_2236 + 12u]);
    bool _2312 = _2310.x == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2312)
    {
        _2323 = _2304;
        _2325 = _2305;
        _2327 = _2306;
    }
    else
    {
        uint _2331 = _2236 + 6u;
        float _2347 = (dot(vec3(cbLight._m0[_2236 + 2u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4521 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2350 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2323 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2304;
        _2325 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2305;
        _2327 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2306;
    }
    bool _2330 = _2310.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2330)
    {
        _2368 = _2323;
        _2370 = _2325;
        _2372 = _2327;
    }
    else
    {
        uint _2541 = _2236 + 7u;
        float _2557 = (dot(vec3(cbLight._m0[_2236 + 3u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2558 = _2557 * _2557;
        float _4537 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2559 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2560 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2368 = (((cbLight._m0[_2541].x * 0.3183098733425140380859375) * _2559) * _2560) + _2323;
        _2370 = (((cbLight._m0[_2541].y * 0.3183098733425140380859375) * _2559) * _2560) + _2325;
        _2372 = (((cbLight._m0[_2541].z * 0.3183098733425140380859375) * _2559) * _2560) + _2327;
    }
    uint _2375 = _2236 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _1016) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2236].x + _1092;
    float _2391 = cbLight._m0[_2236].y + _1093;
    float _2392 = cbLight._m0[_2236].z + _1094;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2236].xyz));
    float _4553 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _4564 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _2404 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2405 = dot(vec3(_1013, _1014, _1015), vec3(_2397, _2398, _2399));
    float _4575 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2397, _2398, _2399));
    float _4586 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
    float _2426 = 0.959999978542327880859375 - _1159;
    float _2428 = 0.959999978542327880859375 - _1160;
    float _2429 = 0.959999978542327880859375 - _1161;
    float _2436 = 1.0 - _2389;
    float _2447 = (0.5 / (((_2404 * ((_2403 * _2436) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2436) + _2389) * _2403))) * _2403;
    float _4597 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2463 = _2236 + 9u;
    float _2474 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _1016) * 0.949999988079071044921875);
    float _2475 = _2474 * _2474;
    float _2476 = cbLight._m0[_2276].x + _1092;
    float _2477 = cbLight._m0[_2276].y + _1093;
    float _2478 = cbLight._m0[_2276].z + _1094;
    float _2482 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
    float _2483 = _2482 * _2476;
    float _2484 = _2482 * _2477;
    float _2485 = _2482 * _2478;
    float _2486 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2276].xyz));
    float _4608 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2490 = dot(vec3(_1013, _1014, _1015), vec3(_2483, _2484, _2485));
    float _4619 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2483, _2484, _2485));
    float _4630 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2475 * _2475;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2509 = exp2(log2(1.0 - (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) * 5.0);
    float _2516 = 1.0 - _2475;
    float _2526 = (0.5 / (((_2404 * ((_2489 * _2516) + _2475)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2516) + _2475) * _2489))) * _2489;
    float _4641 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    float _2538 = (((((_2509 * _2426) + _1162) * cbLight._m0[_2463].x) * _2528) * _2259) + ((((cbLight._m0[_2375].x * _2228) * ((_2425 * _2426) + _1162)) * _2449) * _2272);
    float _2539 = (((((_2509 * _2428) + _1164) * cbLight._m0[_2463].y) * _2528) * _2259) + ((((cbLight._m0[_2375].y * _2229) * ((_2425 * _2428) + _1164)) * _2449) * _2272);
    float _2540 = (((((_2509 * _2429) + _1165) * cbLight._m0[_2463].z) * _2528) * _2259) + ((((cbLight._m0[_2375].z * _2230) * ((_2425 * _2429) + _1165)) * _2449) * _2272);
    float _2602;
    float _2604;
    float _2606;
    if (_2312)
    {
        _2602 = _2538;
        _2604 = _2539;
        _2606 = _2540;
    }
    else
    {
        uint _2608 = _2236 + 2u;
        uint _2612 = _2236 + 10u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _1016) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _1092;
        float _2629 = cbLight._m0[_2608].y + _1093;
        float _2630 = cbLight._m0[_2608].z + _1094;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2608].xyz));
        float _4652 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2642 = dot(vec3(_1013, _1014, _1015), vec3(_2635, _2636, _2637));
        float _4663 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4674 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2404 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2668) + _2627) * _2641))) * _2641;
        float _4685 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2602 = (((((_2661 * _2426) + _1162) * cbLight._m0[_2612].x) * _2680) * _2681) + _2538;
        _2604 = (((((_2661 * _2428) + _1164) * cbLight._m0[_2612].y) * _2680) * _2681) + _2539;
        _2606 = (((((_2661 * _2429) + _1165) * cbLight._m0[_2612].z) * _2680) * _2681) + _2540;
    }
    float _2716;
    float _2718;
    float _2720;
    if (_2330)
    {
        _2716 = _2602;
        _2718 = _2604;
        _2720 = _2606;
    }
    else
    {
        uint _2727 = _2236 + 3u;
        uint _2731 = _2236 + 11u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _1016) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _1092;
        float _2748 = cbLight._m0[_2727].y + _1093;
        float _2749 = cbLight._m0[_2727].z + _1094;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2727].xyz));
        float _4701 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2761 = dot(vec3(_1013, _1014, _1015), vec3(_2754, _2755, _2756));
        float _4712 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4723 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2780 = exp2(log2(1.0 - (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0)))) * 5.0);
        float _2787 = 1.0 - _2746;
        float _2797 = (0.5 / (((_2404 * ((_2760 * _2787) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2787) + _2746) * _2760))) * _2760;
        float _4734 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2799 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2800 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2716 = (((((_2780 * _2426) + _1162) * cbLight._m0[_2731].x) * _2799) * _2800) + _2602;
        _2718 = (((((_2780 * _2428) + _1164) * cbLight._m0[_2731].y) * _2799) * _2800) + _2604;
        _2720 = (((((_2780 * _2429) + _1165) * cbLight._m0[_2731].z) * _2799) * _2800) + _2606;
    }
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    float _2945;
    if (_2234.y == 0u)
    {
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2875;
        float _2877 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2875;
        float _2878 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2875;
        uvec4 _2890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2891 = _2890.x;
        uint _2902 = uint((float(_2890.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1101) / _2891))) + floor(float(uint(cbSceneParam._m0[85u].x * _1100) / _2891)));
        float _2912 = (log2(_2878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2913 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        uint _2916 = uint(isnan(14.0) ? _2913 : (isnan(_2913) ? 14.0 : min(_2913, 14.0)));
        uvec4 _2921 = texelFetch(g_lightClusterGridBuffer, int(((_2916 << 2u) + (_2902 << 6u)) >> 2u));
        uint _2922 = _2921.x;
        uint _2923 = _2890.z;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((((1u << ((_2923 >> 4u) & 15u)) + 4294967295u) & _2922) == 0u) || ((_2923 & 240u) == 0u))
        {
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
        }
        else
        {
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3034;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            uint _3173 = 0u;
            uint _3182;
            bool _3183;
            for (;;)
            {
                _3182 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                _3183 = _3182 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3183)
                {
                    frontier_phi_61_pred = _3167;
                    frontier_phi_61_pred_1 = _3172;
                    frontier_phi_61_pred_2 = _3171;
                    frontier_phi_61_pred_3 = _3170;
                    frontier_phi_61_pred_4 = _3169;
                    frontier_phi_61_pred_5 = _3168;
                }
                else
                {
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    uint _3297;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3182;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    for (;;)
                    {
                        uint _3301 = uint(findLSB(_3297)) + (_3173 << 5u);
                        uint _3298 = (_3297 + 4294967295u) & _3297;
                        uint _3303 = _3301 * 48u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3323 = (_3301 * 48u) + 4u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3342 = (_3301 * 48u) + 8u;
                        vec3 _3353 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x));
                        float _3357 = _3317.x - _2876;
                        float _3358 = _3317.y - _2877;
                        float _3359 = _3317.z - _2878;
                        float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                        float _3363 = inversesqrt(_3360);
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3367 = dot(vec3(_1119, _1122, _1125), vec3(_3364, _3365, _3366));
                        float _3372 = 1.0 - (_3360 * _3317.w);
                        float _4760 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                        float _3374 = sqrt(_3360) * _3336.w;
                        float _3377 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3367) + _3378;
                        float _3384 = _3374 * _3374;
                        float _3388 = ((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3373) / ((_3384 * 0.699999988079071044921875) + 1.0);
                        float _3392 = (-0.0) - _2876;
                        float _3393 = (-0.0) - _2877;
                        float _3394 = (-0.0) - _2878;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3409 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                        float _3410 = 1.0 - _1194;
                        float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                        float _3418 = _3417 * _3417;
                        float _3419 = _3418 * _3418;
                        float _3420 = _3399 + _3364;
                        float _3421 = _3400 + _3365;
                        float _3422 = _3401 + _3366;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3430 = dot(vec3(_1119, _1122, _1125), vec3(_3399, _3400, _3401));
                        float _4776 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3434 = dot(vec3(_1119, _1122, _1125), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                        float _4787 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                        float _3442 = _3377 * _3418;
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3367) + _3443;
                        float _4798 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3448 = 1.0 - _3418;
                        float _3458 = (0.5 / (((_3447 * ((_3433 * _3448) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3418) * _3433))) * _3447;
                        float _4809 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3469 = (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0)))) / ((_3441 * _3441) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125))) * _3373;
                        _3226 = (_3388 * _3336.x) + _3294;
                        _3227 = (_3388 * _3336.y) + _3295;
                        _3228 = (_3388 * _3336.z) + _3296;
                        _3223 = (_3469 * _3353.x) + _3291;
                        _3224 = (_3469 * _3353.y) + _3292;
                        _3225 = (_3469 * _3353.z) + _3293;
                        if (_3298 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3298;
                        }
                    }
                    frontier_phi_61_pred = _3223;
                    frontier_phi_61_pred_1 = _3228;
                    frontier_phi_61_pred_2 = _3227;
                    frontier_phi_61_pred_3 = _3226;
                    frontier_phi_61_pred_4 = _3225;
                    frontier_phi_61_pred_5 = _3224;
                }
                _3024 = frontier_phi_61_pred;
                _3034 = frontier_phi_61_pred_1;
                _3032 = frontier_phi_61_pred_2;
                _3030 = frontier_phi_61_pred_3;
                _3028 = frontier_phi_61_pred_4;
                _3026 = frontier_phi_61_pred_5;
                uint _3174 = _3173 + 1u;
                if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3167 = _3024;
                    _3168 = _3026;
                    _3169 = _3028;
                    _3170 = _3030;
                    _3171 = _3032;
                    _3172 = _3034;
                    _3173 = _3174;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
        }
        uvec4 _3037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3038 = _3037.z;
        uint _3040 = (_3038 >> 8u) & 15u;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((4294967295u << _3040) & _2922) == 0u)
        {
            _3135 = _3023;
            _3137 = _3025;
            _3139 = _3027;
            _3141 = _3029;
            _3143 = _3031;
            _3145 = _3033;
        }
        else
        {
            float _3160 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
            float _3161 = _3160 * _2876;
            float _3162 = _3160 * _2877;
            float _3163 = _3160 * _2878;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3040 < ((_3038 >> 12u) & 15u))
            {
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3274 = _3023;
                float _3275 = _3025;
                float _3276 = _3027;
                float _3277 = _3029;
                float _3278 = _3031;
                float _3279 = _3033;
                uint _3280 = _3040;
                uint _3289;
                bool _3290;
                for (;;)
                {
                    _3289 = texelFetch(g_lightClassification, int((((_2916 << 5u) + (_2902 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                    _3290 = _3289 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3290)
                    {
                        frontier_phi_67_pred = _3277;
                        frontier_phi_67_pred_1 = _3278;
                        frontier_phi_67_pred_2 = _3279;
                        frontier_phi_67_pred_3 = _3276;
                        frontier_phi_67_pred_4 = _3275;
                        frontier_phi_67_pred_5 = _3274;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3487 = _3274;
                        float _3488 = _3275;
                        float _3489 = _3276;
                        float _3490 = _3277;
                        float _3491 = _3278;
                        float _3492 = _3279;
                        uint _3493 = _3289;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3504 = ((_3280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3504 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3504 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3504 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_2878, _3611.z, fma(_2877, _3611.y, _3611.x * _2876)) + _3611.w;
                            _3624 = !((fma(_2878, _3592.z, fma(_2877, _3592.y, _3592.x * _2876)) + _3592.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3519.x - _2876;
                                float _3652 = _3519.y - _2877;
                                float _3653 = _3519.z - _2878;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3520 * _3520));
                                float _4820 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3669 = sqrt(_3654) * _3535.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_1119, _1122, _1125))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_2878, _3562.z, fma(_2877, _3562.y, _3562.x * _2876)) + _3562.w) / _3623;
                                float _3683 = (fma(_2878, _3577.z, fma(_2877, _3577.y, _3577.x * _2876)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4836 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _1194;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3161;
                                float _3713 = _3659 - _3162;
                                float _3714 = _3660 - _3163;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_1119, _1122, _1125), vec3((-0.0) - _3161, (-0.0) - _3162, (-0.0) - _3163));
                                float _4847 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3726 = dot(vec3(_1119, _1122, _1125), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4858 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_1119, _1122, _1125), vec3(_3658, _3659, _3660))) + _3735;
                                float _4869 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4880 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3763 * _3547.x;
                                frontier_phi_73_pred_1 = _3763 * _3547.y;
                                frontier_phi_73_pred_2 = _3689 * _3535.z;
                                frontier_phi_73_pred_3 = _3689 * _3535.y;
                                frontier_phi_73_pred_4 = _3689 * _3535.x;
                                frontier_phi_73_pred_5 = _3763 * _3547.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3767 = frontier_phi_73_pred;
                            _3768 = frontier_phi_73_pred_1;
                            _3772 = frontier_phi_73_pred_2;
                            _3771 = frontier_phi_73_pred_3;
                            _3770 = frontier_phi_73_pred_4;
                            _3769 = frontier_phi_73_pred_5;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3477;
                        frontier_phi_67_pred_1 = _3478;
                        frontier_phi_67_pred_2 = _3479;
                        frontier_phi_67_pred_3 = _3476;
                        frontier_phi_67_pred_4 = _3475;
                        frontier_phi_67_pred_5 = _3474;
                    }
                    _3142 = frontier_phi_67_pred;
                    _3144 = frontier_phi_67_pred_1;
                    _3146 = frontier_phi_67_pred_2;
                    _3140 = frontier_phi_67_pred_3;
                    _3138 = frontier_phi_67_pred_4;
                    _3136 = frontier_phi_67_pred_5;
                    uint _3281 = _3280 + 1u;
                    if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3274 = _3136;
                        _3275 = _3138;
                        _3276 = _3140;
                        _3277 = _3142;
                        _3278 = _3144;
                        _3279 = _3146;
                        _3280 = _3281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3144;
                frontier_phi_55_56_ladder_1 = _3146;
                frontier_phi_55_56_ladder_2 = _3142;
                frontier_phi_55_56_ladder_3 = _3140;
                frontier_phi_55_56_ladder_4 = _3138;
                frontier_phi_55_56_ladder_5 = _3136;
            }
            else
            {
                frontier_phi_55_56_ladder = _3031;
                frontier_phi_55_56_ladder_1 = _3033;
                frontier_phi_55_56_ladder_2 = _3029;
                frontier_phi_55_56_ladder_3 = _3027;
                frontier_phi_55_56_ladder_4 = _3025;
                frontier_phi_55_56_ladder_5 = _3023;
            }
            _3135 = frontier_phi_55_56_ladder_5;
            _3137 = frontier_phi_55_56_ladder_4;
            _3139 = frontier_phi_55_56_ladder_3;
            _3141 = frontier_phi_55_56_ladder_2;
            _3143 = frontier_phi_55_56_ladder;
            _3145 = frontier_phi_55_56_ladder_1;
        }
        float _3150 = isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0));
        _2935 = (_3150 * _3141) + _2368;
        _2937 = (_3150 * _3143) + _2370;
        _2939 = (_3150 * _3145) + _2372;
        _2941 = ((_3135 * _1162) * _3150) + _2716;
        _2943 = ((_3137 * _1164) * _3150) + _2718;
        _2945 = ((_3139 * _1165) * _3150) + _2720;
    }
    else
    {
        _2935 = _2368;
        _2937 = _2370;
        _2939 = _2372;
        _2941 = _2716;
        _2943 = _2718;
        _2945 = _2720;
    }
    float _4896 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _4907 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _4918 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    uint _2965 = _289 + 6u;
    float _2973 = _1100 / cbSceneParam._m0[86u].x;
    float _2974 = _1101 / cbSceneParam._m0[86u].y;
    vec4 _2988 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, (log2((isnan(cbSceneParam._m0[77u].w) ? _1035 : (isnan(_1035) ? cbSceneParam._m0[77u].w : min(_1035, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2990 = _2988.x;
    float _2991 = _2988.y;
    float _2992 = _2988.z;
    float _2993 = _2988.w;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_1035 > cbSceneParam._m0[78u].w)
    {
        float _3048 = isnan(_1035) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1035 : min(cbSceneParam._m0[80u].w, _1035));
        float _3049 = _3048 / _1035;
        float _3060 = _3049 * _1085;
        float _3061 = _1086 * _3049;
        float _3062 = (-0.0) - _3061;
        float _3063 = _3049 * _1087;
        float _3065 = (cbSceneParam._m0[77u].w * _3062) / _3048;
        float _3066 = _3065 + cbSceneParam._m0[79u].w;
        float _3067 = cbSceneParam._m0[79u].w - _3061;
        float _3073 = sqrt(((_3060 * _3060) + (_3061 * _3061)) + (_3063 * _3063));
        float _3076 = (1.0 - (cbSceneParam._m0[77u].w / _3048)) * _3073;
        float _3081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3236;
        if (abs((_3062 - _3065) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3236 = ((((_3066 > 0.0) ? exp2(_3081 * _3066) : (2.0 - exp2(_3083 * _3066))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3076;
        }
        else
        {
            float _3196 = 1.0 / cbSceneParam._m0[80u].x;
            float _3197 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : max(_3066, _3067));
            float _3198 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : min(_3066, _3067));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            _3236 = ((abs(_3073 / _3062) * cbSceneParam._m0[80u].y) * ((((_3207 - _3208) * 2.0) - ((exp2(_3081 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0)))) - exp2(_3081 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))))) * _3196)) - ((exp2(_3083 * _3207) - exp2(_3083 * _3208)) * _3196))) + (_3076 * cbSceneParam._m0[80u].z);
        }
        vec4 _3238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2973, _2974, 1.0), 0.0);
        float _3247 = exp2((_3236 * (-1.44269502162933349609375)) * (1.0 - _3238.w));
        float _3248 = log2(_3247);
        float _3264 = log2(_2993);
        _3085 = (exp2(_3264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].x)) * _3238.x) / cbSceneParam._m0[78u].x)) + _2990;
        _3087 = (exp2(_3264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].y)) * _3238.y) / cbSceneParam._m0[78u].y)) + _2991;
        _3089 = (exp2(_3264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].z)) * _3238.z) / cbSceneParam._m0[78u].z)) + _2992;
        _3091 = _3247 * _2993;
    }
    else
    {
        _3085 = _2990;
        _3087 = _2991;
        _3089 = _2992;
        _3091 = _2993;
    }
    float _3103 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3104 = _3103 == 3.0;
    float _3105 = log2(_3091);
    float _3112 = exp2(_3105 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2935 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1178))) + ((_2941 + ((isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3113 = exp2(_3105 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2937 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1178))) + ((_2943 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3114 = exp2(_3105 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2939 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1178))) + ((_2945 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1985)) * cbPerFrame._m0[3u].x));
    float _3123 = (_3103 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3123 * (_3104 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.y = _3123 * (_3104 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.z = _3123 * (_3104 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.w = cbInstanceData._m0[_2965].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2965].w;
}


