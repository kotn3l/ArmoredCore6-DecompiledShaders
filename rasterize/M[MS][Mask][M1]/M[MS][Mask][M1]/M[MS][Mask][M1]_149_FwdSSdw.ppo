#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1753;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _263 = _262 * _254;
    float _264 = _262 * _255;
    float _265 = _262 * _256;
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = _269 * NORMAL.x;
    float _271 = _269 * NORMAL.y;
    float _272 = _269 * NORMAL.z;
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _277 = _276 * TANGENT.x;
    float _278 = _276 * TANGENT.y;
    float _279 = _276 * TANGENT.z;
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4099 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4110 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4121 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _388 = _383.x * cbMtdParam._m0[11u].x;
    float _389 = _383.y * cbMtdParam._m0[11u].y;
    float _390 = _383.z * cbMtdParam._m0[11u].z;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _477 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _494 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _428.x) * 2.0) - ((((_465 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4132 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _502 = (_495 * ((_409.x * cbMtdParam._m0[12u].x) - _388)) + _388;
    float _503 = (_495 * ((_409.y * cbMtdParam._m0[12u].y) - _389)) + _389;
    float _504 = (_495 * ((_409.z * cbMtdParam._m0[12u].z) - _390)) + _390;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _543 = _541.x;
    float _553 = dot(vec4(_543, _541.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _567 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _428.y) * 2.0) - ((((_543 - _553) * cbMtdParam._m0[23u].w) + _553) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4143 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _575 = (_568 * ((_521.x * cbMtdParam._m0[13u].x) - _502)) + _502;
    float _576 = (_568 * ((_521.y * cbMtdParam._m0[13u].y) - _503)) + _503;
    float _577 = (_568 * ((_521.z * cbMtdParam._m0[13u].z) - _504)) + _504;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _625 = dot(vec4(_615, _613.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _637 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _428.z) * 2.0) - ((((_615 - _625) * cbMtdParam._m0[23u].w) + _625) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4154 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _648 = (_357.x * cbMtdParam._m0[9u].x) * ((_638 * ((_596.x * cbMtdParam._m0[14u].x) - _575)) + _575);
    float _649 = (_357.y * cbMtdParam._m0[9u].y) * ((_638 * ((_596.y * cbMtdParam._m0[14u].y) - _576)) + _576);
    float _650 = (_357.z * cbMtdParam._m0[9u].z) * ((_638 * ((_596.z * cbMtdParam._m0[14u].z) - _577)) + _577);
    float _654 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _648;
    float _657 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _649;
    float _660 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _650;
    float _668 = (((_648 - _654) * (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) + _654) * 4.55000019073486328125;
    float _670 = (((_649 - _657) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) + _657) * 4.55000019073486328125;
    float _672 = (((_650 - _660) * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) + _660) * 4.55000019073486328125;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _320) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _321) + cbTextureTilingScale._m0[14u].w));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _753 = _751.x;
    float _754 = _751.y;
    float _755 = _751.z;
    float _762 = ((_734.x - _753) * _495) + _753;
    float _763 = ((_734.y - _754) * _495) + _754;
    float _764 = ((_734.z - _755) * _495) + _755;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _787 = ((_776.x - _762) * _568) + _762;
    float _788 = ((_776.y - _763) * _568) + _763;
    float _789 = ((_776.z - _764) * _568) + _764;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _814 = ((_801.z - _789) * _638) + _789;
    float _817 = ((((_801.x - _787) * _638) + _787) * 2.0) + (-1.0);
    float _818 = ((((_801.y - _788) * _638) + _788) * 2.0) + (-1.0);
    float _819 = dot(vec2(_817, _818), vec2(_817, _818));
    float _4165 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _824 = sqrt(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))));
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _854 = (_817 + ((((_709.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_842.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _855 = (_818 + ((((_709.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_842.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _858 = fma(_824, _270, fma(_855, _277, _854 * _263));
    float _861 = fma(_824, _271, fma(_855, _278, _854 * _264));
    float _864 = fma(_824, _272, fma(_855, _279, _854 * _265));
    float _868 = inversesqrt(dot(vec3(_858, _861, _864), vec3(_858, _861, _864)));
    vec4 _895 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _897 = _895.x;
    float _898 = 1.0 - _897;
    float _906 = (cbMtdParam._m0[19u].x + dot(vec4(_868 * _858, _868 * _861, _868 * _864, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_897 - _898) * cbMtdParam._m0[24u].z) + _898) * cbMtdParam._m0[21u].z);
    float _4176 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _907 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _909 = (-0.0) - cbMtdParam._m0[24u].x;
    float _911 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
    float _919 = _907 - ((_907 * TEXCOORD_8.x) * _912);
    float _920 = _907 - ((_907 * TEXCOORD_8.y) * _912);
    float _921 = _907 - ((_907 * TEXCOORD_8.z) * _912);
    float _928 = (_919 * ((_690.x * cbMtdParam._m0[18u].x) - _668)) + _668;
    float _929 = (_920 * ((_690.y * cbMtdParam._m0[18u].y) - _670)) + _670;
    float _930 = (_921 * ((_690.z * cbMtdParam._m0[18u].z) - _672)) + _672;
    float _945 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _946 = _945 * TEXCOORD.z;
    float _947 = _945 * TEXCOORD.w;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _946) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _947) + cbTextureTilingScale._m0[19u].w));
    float _961 = _959.x;
    float _962 = 1.0 - _961;
    float _988 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_961 - _962) * cbMtdParam._m0[24u].w) + _962) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4197 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _989 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _997 = ((((cbMtdParam._m0[10u].x - _928) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _989) + _928;
    float _998 = ((((cbMtdParam._m0[10u].y - _929) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _989) + _929;
    float _999 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _930)) * _989) + _930;
    vec4 _1025 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1027 = _1025.x;
    float _1044 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _1027) * _495) + _1027;
    float _1061 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _1044) * _568) + _1044;
    float _1078 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1061) * _638) + _1061;
    float _1084 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1078) * cbMtdParam._m0[19u].z) + _1078;
    float _1086 = _1084 - (_1084 * _919);
    float _1088 = _1086 - (_1086 * _989);
    float _1095 = (((_709.z - _814) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _814;
    float _1099 = ((_842.z - _1095) * cbMtdParam._m0[19u].w) + _1095;
    vec4 _1115 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1122 = (_1115.x * 2.0) + (-1.0);
    float _1123 = (_1115.y * 2.0) + (-1.0);
    float _1124 = dot(vec2(_1122, _1123), vec2(_1122, _1123));
    float _4208 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1132 = ((_1115.z - _1099) * _919) + _1099;
    float _1135 = ((cbMtdParam._m0[23u].x - _1132) * _989) + _1132;
    vec4 _1158 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _946) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _947) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1164 = (_1158.x * 2.0) + (-1.0);
    float _1165 = (_1158.y * 2.0) + (-1.0);
    float _1166 = dot(vec2(_1164, _1165), vec2(_1164, _1165));
    float _4219 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1181 = ((sqrt(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) - _824) * _921) + _824;
    float _1184 = (((_1122 - _854) * _919) + _854) + (cbMtdParam._m0[21u].x * _854);
    float _1185 = (((_1123 - _855) * _920) + _855) + (cbMtdParam._m0[21u].x * _855);
    float _1196 = (((_1164 - _1184) + (_1184 * cbMtdParam._m0[22u].z)) * _989) + _1184;
    float _1197 = (((_1165 - _1185) + (_1185 * cbMtdParam._m0[22u].z)) * _989) + _1185;
    float _1198 = (_989 * (sqrt(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) - _1181)) + _1181;
    float _1200 = cbMtdParam._m0[22u].x + _842.w;
    float _1203 = fma(_1198, _270, fma(_1197, _277, _1196 * _263));
    float _1206 = fma(_1198, _271, fma(_1197, _278, _1196 * _264));
    float _1209 = fma(_1198, _272, fma(_1197, _279, _1196 * _265));
    float _1213 = inversesqrt(dot(vec3(_1203, _1206, _1209), vec3(_1203, _1206, _1209)));
    float _1214 = _1213 * _1203;
    float _1215 = _1213 * _1206;
    float _1216 = _1213 * _1209;
    float _4230 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _1217 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _4252 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _4263 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _4274 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4285 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1222 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _1236 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1286 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1276);
    float _1287 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1276);
    float _1288 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1276);
    float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
    float _1293 = _1286 * _1292;
    float _1294 = _1287 * _1292;
    float _1295 = _1288 * _1292;
    float _1301 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1302 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1320 = fma(_1216, cbSceneParam._m0[5u].z, fma(_1215, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1214));
    float _1323 = fma(_1216, cbSceneParam._m0[6u].z, fma(_1215, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1214));
    float _1326 = fma(_1216, cbSceneParam._m0[7u].z, fma(_1215, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1214));
    uint _1340 = (_301 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1346 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * cbInstanceData._m0[_1340].x;
    float _1347 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * cbInstanceData._m0[_1340].y;
    float _1348 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) * cbInstanceData._m0[_1340].z;
    float _4296 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1349 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _4307 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
    float _1350 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _4318 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _1351 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _1352 = 1.0 - _1222;
    float _1353 = _1349 * _1352;
    float _1354 = _1350 * _1352;
    float _1355 = _1351 * _1352;
    float _1360 = (_1349 + (-0.039999999105930328369140625)) * _1222;
    float _1361 = (_1350 + (-0.039999999105930328369140625)) * _1222;
    float _1362 = (_1351 + (-0.039999999105930328369140625)) * _1222;
    float _1363 = _1360 + 0.039999999105930328369140625;
    float _1365 = _1361 + 0.039999999105930328369140625;
    float _1366 = _1362 + 0.039999999105930328369140625;
    vec4 _1375 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1301, cbSceneParam._m0[86u].y * _1302));
    float _1379 = ((isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * TEXCOORD_5.w) * _1375.x;
    float _1380 = dot(vec3(_1214, _1215, _1216), vec3(_1293, _1294, _1295));
    float _1383 = _1380 * 2.0;
    float _1387 = (_1383 * _1214) - _1293;
    float _1388 = (_1383 * _1215) - _1294;
    float _1389 = (_1383 * _1216) - _1295;
    float _1393 = abs(dot(vec3(_1293, _1294, _1295), vec3(_1214, _1215, _1216)));
    float _4329 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
    float _1395 = sqrt(_1217);
    float _1408 = exp2((_1395 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1395 * 3.0));
    float _1414 = (1.0 - _1408) * ((_1395 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1415 = _1408 * _1395;
    float _1443 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1447 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1451 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1752;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1477 = fma(_1451, cbModelParam._m0[26u].z, fma(_1447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1443));
        float _1481 = fma(_1451, cbModelParam._m0[27u].z, fma(_1447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1443));
        float _1485 = fma(_1451, cbModelParam._m0[28u].z, fma(_1447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1443));
        float _1510 = _1443 + _1214;
        float _1511 = _1447 + _1215;
        float _1512 = _1451 + _1216;
        float _1522 = fma(_1512, cbModelParam._m0[26u].z, fma(_1511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1510)) - _1477;
        float _1523 = fma(_1512, cbModelParam._m0[27u].z, fma(_1511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1510)) - _1481;
        float _1524 = fma(_1512, cbModelParam._m0[28u].z, fma(_1511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1510)) - _1485;
        float _1528 = inversesqrt(dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524)));
        float _1541 = ((_1528 * _1522) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1477 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1528 * _1523) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1481 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1528 * _1524) / cbModelParam._m0[34u].z) + ((((((_1485 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        vec4 _1567 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1541, _1542, _1543), 0.0);
        float _1580 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1546.x + (-0.5));
        float _1582 = _1580 * (_1546.y + (-0.5));
        float _1583 = _1580 * (_1546.z + (-0.5));
        float _1590 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1553.x + (-0.5));
        float _1592 = _1590 * (_1553.y + (-0.5));
        float _1593 = _1590 * (_1553.z + (-0.5));
        float _1600 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1560.x + (-0.5));
        float _1602 = _1600 * (_1560.y + (-0.5));
        float _1603 = _1600 * (_1560.z + (-0.5));
        float _1610 = exp2((_1567.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1567.x + (-0.5));
        float _1612 = _1610 * (_1567.y + (-0.5));
        float _1613 = _1610 * (_1567.z + (-0.5));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = _1581 * 0.5;
        float _1618 = _1591 * 0.5;
        float _1619 = _1601 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1634 = (dot(vec3(_1214, _1215, _1216), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1644 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1646 = _1645 * 2.0;
        float _1650 = (1.0 - _1645) / (_1645 + 1.0);
        float _4377 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1660 = ((((1.0 - _1651) * (_1646 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1646 + 1.0))) + _1651) * _1614;
        float _1661 = _1582 * 0.5;
        float _1662 = _1592 * 0.5;
        float _1663 = _1602 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_1214, _1215, _1216), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4388 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4399 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4410 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_1688 + 1.0))) + _1693) * _1615;
        float _1703 = _1583 * 0.5;
        float _1704 = _1593 * 0.5;
        float _1705 = _1603 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_1214, _1215, _1216), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4421 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4432 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4443 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_1730 + 1.0))) + _1735) * _1616;
        _1752 = _1583;
        _1754 = _1582;
        _1755 = _1581;
        _1756 = _1593;
        _1757 = _1592;
        _1758 = _1591;
        _1759 = _1603;
        _1760 = _1602;
        _1761 = _1601;
        _1762 = _1616;
        _1763 = _1615;
        _1764 = _1614;
        _1765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)));
        _1766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
    }
    else
    {
        _1752 = _1753;
        _1754 = _1753;
        _1755 = _1753;
        _1756 = _1753;
        _1757 = _1753;
        _1758 = _1753;
        _1759 = _1753;
        _1760 = _1753;
        _1761 = _1753;
        _1762 = _1753;
        _1763 = _1753;
        _1764 = _1753;
        _1765 = 0.0;
        _1766 = 0.0;
        _1767 = 0.0;
    }
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1790 = fma(_1451, cbModelParam._m0[30u].z, fma(_1447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1443));
        float _1794 = fma(_1451, cbModelParam._m0[31u].z, fma(_1447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1443));
        float _1798 = fma(_1451, cbModelParam._m0[32u].z, fma(_1447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1443));
        float _1821 = _1443 + _1214;
        float _1822 = _1447 + _1215;
        float _1823 = _1451 + _1216;
        float _1833 = fma(_1823, cbModelParam._m0[30u].z, fma(_1822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1821)) - _1790;
        float _1834 = fma(_1823, cbModelParam._m0[31u].z, fma(_1822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1821)) - _1794;
        float _1835 = fma(_1823, cbModelParam._m0[32u].z, fma(_1822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1821)) - _1798;
        float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
        float _1852 = ((_1839 * _1833) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1790 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1853 = ((_1839 * _1834) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1794 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1854 = ((_1839 * _1835) / cbModelParam._m0[35u].z) + ((((((_1798 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1856 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1863 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1870 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1877 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        float _1889 = exp2((_1856.w + (-0.5)) * 20.0) * 2.0;
        float _1890 = _1889 * (_1856.x + (-0.5));
        float _1891 = _1889 * (_1856.y + (-0.5));
        float _1892 = _1889 * (_1856.z + (-0.5));
        float _1899 = exp2((_1863.w + (-0.5)) * 20.0) * 2.0;
        float _1900 = _1899 * (_1863.x + (-0.5));
        float _1901 = _1899 * (_1863.y + (-0.5));
        float _1902 = _1899 * (_1863.z + (-0.5));
        float _1909 = exp2((_1870.w + (-0.5)) * 20.0) * 2.0;
        float _1910 = _1909 * (_1870.x + (-0.5));
        float _1911 = _1909 * (_1870.y + (-0.5));
        float _1912 = _1909 * (_1870.z + (-0.5));
        float _1919 = exp2((_1877.w + (-0.5)) * 20.0) * 2.0;
        float _1920 = _1919 * (_1877.x + (-0.5));
        float _1921 = _1919 * (_1877.y + (-0.5));
        float _1922 = _1919 * (_1877.z + (-0.5));
        float _1923 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1924 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = _1890 * 0.5;
        float _1927 = _1900 * 0.5;
        float _1928 = _1910 * 0.5;
        float _1929 = dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928));
        float _1934 = (_1929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1929);
        float _1942 = (dot(vec3(_1214, _1215, _1216), vec3(_1934 * _1926, _1934 * _1927, _1934 * _1928)) + 1.0) * 0.5;
        float _4484 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1951 = sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928)) / (_1923 + 9.9999997473787516355514526367188e-06);
        float _4495 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1953 = _1952 * 2.0;
        float _1957 = (1.0 - _1952) / (_1952 + 1.0);
        float _4506 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1967 = ((((1.0 - _1958) * (_1953 + 2.0)) * exp2(log2(isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_1953 + 1.0))) + _1958) * _1923;
        float _1968 = _1891 * 0.5;
        float _1969 = _1901 * 0.5;
        float _1970 = _1911 * 0.5;
        float _1971 = dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970));
        float _1976 = (_1971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1971);
        float _1984 = (dot(vec3(_1214, _1215, _1216), vec3(_1976 * _1968, _1976 * _1969, _1976 * _1970)) + 1.0) * 0.5;
        float _4517 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1993 = sqrt(((_1969 * _1969) + (_1968 * _1968)) + (_1970 * _1970)) / (_1924 + 9.9999997473787516355514526367188e-06);
        float _4528 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _1995 = _1994 * 2.0;
        float _1999 = (1.0 - _1994) / (_1994 + 1.0);
        float _4539 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2009 = ((((1.0 - _2000) * (_1995 + 2.0)) * exp2(log2(isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_1995 + 1.0))) + _2000) * _1924;
        float _2010 = _1892 * 0.5;
        float _2011 = _1902 * 0.5;
        float _2012 = _1912 * 0.5;
        float _2013 = dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012));
        float _2018 = (_2013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2013);
        float _2026 = (dot(vec3(_1214, _1215, _1216), vec3(_2018 * _2010, _2018 * _2011, _2018 * _2012)) + 1.0) * 0.5;
        float _4550 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2035 = sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012)) / (_1925 + 9.9999997473787516355514526367188e-06);
        float _4561 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2037 = _2036 * 2.0;
        float _2041 = (1.0 - _2036) / (_2036 + 1.0);
        float _4572 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2051 = ((((1.0 - _2042) * (_2037 + 2.0)) * exp2(log2(isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * (_2037 + 1.0))) + _2042) * _1925;
        _2059 = _1892;
        _2060 = _1891;
        _2061 = _1890;
        _2062 = _1902;
        _2063 = _1901;
        _2064 = _1900;
        _2065 = _1912;
        _2066 = _1911;
        _2067 = _1910;
        _2068 = _1925;
        _2069 = _1924;
        _2070 = _1923;
        _2071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)));
        _2072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
        _2073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    }
    else
    {
        _2059 = _1753;
        _2060 = _1753;
        _2061 = _1753;
        _2062 = _1753;
        _2063 = _1753;
        _2064 = _1753;
        _2065 = _1753;
        _2066 = _1753;
        _2067 = _1753;
        _2068 = _1753;
        _2069 = _1753;
        _2070 = _1753;
        _2071 = 0.0;
        _2072 = 0.0;
        _2073 = 0.0;
    }
    float _2083 = (cbModelParam._m0[1u].x * (_2071 - _1765)) + _1765;
    float _2084 = (cbModelParam._m0[1u].x * (_2072 - _1766)) + _1766;
    float _2085 = (cbModelParam._m0[1u].x * (_2073 - _1767)) + _1767;
    float _2106 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2109 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2112 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2083));
    float _2127 = _1387 * 0.5;
    float _2128 = _1388 * 0.5;
    float _2129 = _1389 * 0.5;
    float _2130 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2061, _2064, _2067, _2070));
    float _2133 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2060, _2063, _2066, _2069));
    float _2136 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2059, _2062, _2065, _2068));
    float _2170;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2143 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1752, _1756, _1759, _1762));
        float _2147 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1754, _1757, _1760, _1763));
        float _2151 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1755, _1758, _1761, _1764));
        float _2158 = dot(vec4(cbModelParam._m0[39u]), vec4(_2127, _2128, _2129, 1.0));
        _2170 = dot(vec3(isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0)), isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)), isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2158) ? 0.0 : (isnan(0.0) ? _2158 : max(0.0, _2158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2170 = 1.0;
    }
    float _2181;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2172 = dot(vec4(cbModelParam._m0[40u]), vec4(_2127, _2128, _2129, 1.0));
        _2181 = dot(vec3(isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0)), isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)), isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2172) ? 0.0 : (isnan(0.0) ? _2172 : max(0.0, _2172))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2181 = 1.0;
    }
    float _2185 = (_2181 * cbModelParam._m0[1u].x) + (_2170 * (1.0 - cbModelParam._m0[1u].x));
    float _2195 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1217);
    float _2196 = isnan(_2195) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2195 : min(cbModelParam._m0[25u].z, _2195));
    float _2276;
    float _2278;
    float _2280;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2243 = fma(_1451, cbModelParam._m0[13u].z, fma(_1447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1443)) + cbModelParam._m0[13u].w;
        float _2247 = fma(_1451, cbModelParam._m0[14u].z, fma(_1447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1443)) + cbModelParam._m0[14u].w;
        float _2251 = fma(_1451, cbModelParam._m0[15u].z, fma(_1447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1443)) + cbModelParam._m0[15u].w;
        float _2254 = fma(_1389, cbModelParam._m0[13u].z, fma(_1388, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1387));
        float _2257 = fma(_1389, cbModelParam._m0[14u].z, fma(_1388, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1387));
        float _2260 = fma(_1389, cbModelParam._m0[15u].z, fma(_1388, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1387));
        float _2288;
        if (_2254 > 0.0)
        {
            _2288 = abs((1.0 - _2243) / _2254);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2243 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2288 = frontier_phi_14_12_ladder;
        }
        float _2511;
        if (_2257 > 0.0)
        {
            _2511 = abs((1.0 - _2247) / _2257);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2257 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2247 + 1.0) / _2257);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2511 = frontier_phi_23_19_ladder;
        }
        float _2768;
        if (_2260 > 0.0)
        {
            _2768 = abs((1.0 - _2251) / _2260);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2260 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2251 + 1.0) / _2260);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2768 = frontier_phi_35_30_ladder;
        }
        float _2770 = isnan(_2511) ? _2288 : (isnan(_2288) ? _2511 : min(_2288, _2511));
        float _2771 = isnan(_2768) ? _2770 : (isnan(_2770) ? _2768 : min(_2770, _2768));
        float _2775 = (_2771 * _2254) + _2243;
        float _2776 = (_2771 * _2257) + _2247;
        float _2777 = (_2771 * _2260) + _2251;
        float _2778 = _2771 * 9.9999997473787516355514526367188e-05;
        float _2780 = (-1.0) - _2778;
        float _2782 = _2778 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2777 > _2782) || ((_2777 < _2780) || ((_2776 > _2782) || ((_2776 < _2780) || ((_2775 < _2780) || (_2775 > _2782))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2777, cbModelParam._m0[9u].z, fma(_2776, cbModelParam._m0[9u].y, _2775 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2777, cbModelParam._m0[10u].z, fma(_2776, cbModelParam._m0[10u].y, _2775 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2777, cbModelParam._m0[11u].z, fma(_2776, cbModelParam._m0[11u].y, _2775 * cbModelParam._m0[11u].x))), _2196);
            frontier_phi_13_35_ladder = _2905.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2905.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2905.x * cbModelParam._m0[1u].y;
        }
        _2276 = frontier_phi_13_35_ladder_2;
        _2278 = frontier_phi_13_35_ladder_1;
        _2280 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1387, _1388, _1389), _2196);
        _2276 = _2264.x * cbModelParam._m0[1u].y;
        _2278 = _2264.y * cbModelParam._m0[1u].y;
        _2280 = _2264.z * cbModelParam._m0[1u].y;
    }
    float _2284 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1217);
    float _2285 = isnan(_2284) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2284 : min(cbModelParam._m0[25u].w, _2284));
    float _2374;
    float _2376;
    float _2378;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2338 = fma(_1451, cbModelParam._m0[21u].z, fma(_1447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1443)) + cbModelParam._m0[21u].w;
        float _2342 = fma(_1451, cbModelParam._m0[22u].z, fma(_1447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1443)) + cbModelParam._m0[22u].w;
        float _2346 = fma(_1451, cbModelParam._m0[23u].z, fma(_1447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1443)) + cbModelParam._m0[23u].w;
        float _2349 = fma(_1389, cbModelParam._m0[21u].z, fma(_1388, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1387));
        float _2352 = fma(_1389, cbModelParam._m0[22u].z, fma(_1388, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1387));
        float _2355 = fma(_1389, cbModelParam._m0[23u].z, fma(_1388, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1387));
        float _2516;
        if (_2349 > 0.0)
        {
            _2516 = abs((1.0 - _2338) / _2349);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2349 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2338 + 1.0) / _2349);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2516 = frontier_phi_25_21_ladder;
        }
        float _2795;
        if (_2352 > 0.0)
        {
            _2795 = abs((1.0 - _2342) / _2352);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2352 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2342 + 1.0) / _2352);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2795 = frontier_phi_37_32_ladder;
        }
        float _3008;
        if (_2355 > 0.0)
        {
            _3008 = abs((1.0 - _2346) / _2355);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2355 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2346 + 1.0) / _2355);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _3008 = frontier_phi_46_43_ladder;
        }
        float _3010 = isnan(_2795) ? _2516 : (isnan(_2516) ? _2795 : min(_2516, _2795));
        float _3011 = isnan(_3008) ? _3010 : (isnan(_3010) ? _3008 : min(_3010, _3008));
        float _3015 = (_3011 * _2349) + _2338;
        float _3016 = (_3011 * _2352) + _2342;
        float _3017 = (_3011 * _2355) + _2346;
        float _3018 = _3011 * 9.9999997473787516355514526367188e-05;
        float _3019 = (-1.0) - _3018;
        float _3021 = _3018 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_3017 > _3021) || ((_3017 < _3019) || ((_3016 > _3021) || ((_3016 < _3019) || ((_3015 < _3019) || (_3015 > _3021))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3216 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3017, cbModelParam._m0[17u].z, fma(_3016, cbModelParam._m0[17u].y, _3015 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3017, cbModelParam._m0[18u].z, fma(_3016, cbModelParam._m0[18u].y, _3015 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3017, cbModelParam._m0[19u].z, fma(_3016, cbModelParam._m0[19u].y, _3015 * cbModelParam._m0[19u].x))), _2285);
            frontier_phi_22_46_ladder = _3216.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3216.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3216.x * cbModelParam._m0[1u].z;
        }
        _2374 = frontier_phi_22_46_ladder_2;
        _2376 = frontier_phi_22_46_ladder_1;
        _2378 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1387, _1388, _1389), _2285);
        _2374 = _2358.x * cbModelParam._m0[1u].z;
        _2376 = _2358.y * cbModelParam._m0[1u].z;
        _2378 = _2358.z * cbModelParam._m0[1u].z;
    }
    float _2391 = (((_1414 * _1363) + _1415) * _1379) * ((cbModelParam._m0[1u].w * (_2374 - _2276)) + _2276);
    float _2393 = (((_1414 * _1365) + _1415) * _1379) * ((cbModelParam._m0[1u].w * (_2376 - _2278)) + _2278);
    float _2395 = (((_1414 * _1366) + _1415) * _1379) * ((cbModelParam._m0[1u].w * (_2378 - _2280)) + _2280);
    float _2398 = fma(_2395, cbSceneParam._m0[89u].z, fma(_2393, cbSceneParam._m0[89u].y, _2391 * cbSceneParam._m0[89u].x));
    float _2401 = fma(_2395, cbSceneParam._m0[90u].z, fma(_2393, cbSceneParam._m0[90u].y, _2391 * cbSceneParam._m0[90u].x));
    float _2404 = fma(_2395, cbSceneParam._m0[91u].z, fma(_2393, cbSceneParam._m0[91u].y, _2391 * cbSceneParam._m0[91u].x));
    vec4 _2412 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1301, _1302));
    float _2414 = _2412.w;
    float _2426 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2414);
    float _2427 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2414);
    float _2428 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2414);
    uvec4 _2432 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2434 = _2432.x * 14u;
    uint _2435 = _2434 + 13u;
    float _2442 = _1379 + (-1.0);
    float _2447 = (cbLight._m0[_2435].x * _2442) + 1.0;
    float _2448 = (cbLight._m0[_2435].y * _2442) + 1.0;
    float _2449 = (cbLight._m0[_2435].z * _2442) + 1.0;
    float _2450 = (cbLight._m0[_2435].w * _2442) + 1.0;
    uint _2451 = _2434 + 5u;
    float _2457 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2461 = _2434 + 4u;
    float _2470 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2474 = _2434 | 1u;
    float _2485 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_1214, _1215, _1216));
    float _2488 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_1214, _1215, _1216));
    float _4708 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _4719 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2493 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * 0.3183098733425140380859375;
    float _2495 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * 0.3183098733425140380859375;
    float _2502 = ((cbLight._m0[_2451].x * _2457) * _2495) + (((cbLight._m0[_2461].x * _2426) * _2470) * _2493);
    float _2503 = ((_2457 * cbLight._m0[_2451].y) * _2495) + (((cbLight._m0[_2461].y * _2427) * _2470) * _2493);
    float _2504 = ((_2457 * cbLight._m0[_2451].z) * _2495) + (((cbLight._m0[_2461].z * _2428) * _2470) * _2493);
    uvec4 _2508 = floatBitsToUint(cbLight._m0[_2434 + 12u]);
    bool _2510 = _2508.x == 0u;
    float _2521;
    float _2523;
    float _2525;
    if (_2510)
    {
        _2521 = _2502;
        _2523 = _2503;
        _2525 = _2504;
    }
    else
    {
        uint _2529 = _2434 + 6u;
        float _2545 = (dot(vec3(cbLight._m0[_2434 + 2u].xyz), vec3(_1214, _1215, _1216)) * 0.5) + 0.5;
        float _2546 = _2545 * _2545;
        float _4730 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2547 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
        float _2548 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2521 = (((cbLight._m0[_2529].x * 0.3183098733425140380859375) * _2547) * _2548) + _2502;
        _2523 = (((cbLight._m0[_2529].y * 0.3183098733425140380859375) * _2547) * _2548) + _2503;
        _2525 = (((cbLight._m0[_2529].z * 0.3183098733425140380859375) * _2547) * _2548) + _2504;
    }
    bool _2528 = _2508.y == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2528)
    {
        _2566 = _2521;
        _2568 = _2523;
        _2570 = _2525;
    }
    else
    {
        uint _2739 = _2434 + 7u;
        float _2755 = (dot(vec3(cbLight._m0[_2434 + 3u].xyz), vec3(_1214, _1215, _1216)) * 0.5) + 0.5;
        float _2756 = _2755 * _2755;
        float _4746 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2757 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2758 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2566 = (((cbLight._m0[_2739].x * 0.3183098733425140380859375) * _2757) * _2758) + _2521;
        _2568 = (((cbLight._m0[_2739].y * 0.3183098733425140380859375) * _2757) * _2758) + _2523;
        _2570 = (((cbLight._m0[_2739].z * 0.3183098733425140380859375) * _2757) * _2758) + _2525;
    }
    uint _2573 = _2434 + 8u;
    float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _1217) * 0.949999988079071044921875);
    float _2587 = _2586 * _2586;
    float _2588 = cbLight._m0[_2434].x + _1293;
    float _2589 = cbLight._m0[_2434].y + _1294;
    float _2590 = cbLight._m0[_2434].z + _1295;
    float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
    float _2595 = _2594 * _2588;
    float _2596 = _2594 * _2589;
    float _2597 = _2594 * _2590;
    float _2598 = dot(vec3(_1214, _1215, _1216), vec3(cbLight._m0[_2434].xyz));
    float _4762 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _4773 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
    float _2602 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2603 = dot(vec3(_1214, _1215, _1216), vec3(_2595, _2596, _2597));
    float _4784 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2595, _2596, _2597));
    float _4795 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2587 * _2587;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
    float _2624 = 0.959999978542327880859375 - _1360;
    float _2626 = 0.959999978542327880859375 - _1361;
    float _2627 = 0.959999978542327880859375 - _1362;
    float _2634 = 1.0 - _2587;
    float _2645 = (0.5 / (((_2602 * ((_2601 * _2634) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2634) + _2587) * _2601))) * _2601;
    float _4806 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2647 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    uint _2661 = _2434 + 9u;
    float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _1217) * 0.949999988079071044921875);
    float _2673 = _2672 * _2672;
    float _2674 = cbLight._m0[_2474].x + _1293;
    float _2675 = cbLight._m0[_2474].y + _1294;
    float _2676 = cbLight._m0[_2474].z + _1295;
    float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
    float _2681 = _2680 * _2674;
    float _2682 = _2680 * _2675;
    float _2683 = _2680 * _2676;
    float _2684 = dot(vec3(_1214, _1215, _1216), vec3(cbLight._m0[_2474].xyz));
    float _4817 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    float _2688 = dot(vec3(_1214, _1215, _1216), vec3(_2681, _2682, _2683));
    float _4828 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
    float _2692 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2681, _2682, _2683));
    float _4839 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2696 = _2673 * _2673;
    float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
    float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0)))) * 5.0);
    float _2714 = 1.0 - _2673;
    float _2724 = (0.5 / (((_2602 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2714) + _2673) * _2687))) * _2687;
    float _4850 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2726 = (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
    float _2736 = (((((_2707 * _2624) + _1363) * cbLight._m0[_2661].x) * _2726) * _2457) + ((((cbLight._m0[_2573].x * _2426) * ((_2623 * _2624) + _1363)) * _2647) * _2470);
    float _2737 = (((((_2707 * _2626) + _1365) * cbLight._m0[_2661].y) * _2726) * _2457) + ((((cbLight._m0[_2573].y * _2427) * ((_2623 * _2626) + _1365)) * _2647) * _2470);
    float _2738 = (((((_2707 * _2627) + _1366) * cbLight._m0[_2661].z) * _2726) * _2457) + ((((cbLight._m0[_2573].z * _2428) * ((_2623 * _2627) + _1366)) * _2647) * _2470);
    float _2800;
    float _2802;
    float _2804;
    if (_2510)
    {
        _2800 = _2736;
        _2802 = _2737;
        _2804 = _2738;
    }
    else
    {
        uint _2806 = _2434 + 2u;
        uint _2810 = _2434 + 10u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _1217) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _1293;
        float _2827 = cbLight._m0[_2806].y + _1294;
        float _2828 = cbLight._m0[_2806].z + _1295;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_1214, _1215, _1216), vec3(cbLight._m0[_2806].xyz));
        float _4861 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2840 = dot(vec3(_1214, _1215, _1216), vec3(_2833, _2834, _2835));
        float _4872 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4883 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2602 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2866) + _2825) * _2839))) * _2839;
        float _4894 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2800 = (((((_2859 * _2624) + _1363) * cbLight._m0[_2810].x) * _2878) * _2879) + _2736;
        _2802 = (((((_2859 * _2626) + _1365) * cbLight._m0[_2810].y) * _2878) * _2879) + _2737;
        _2804 = (((((_2859 * _2627) + _1366) * cbLight._m0[_2810].z) * _2878) * _2879) + _2738;
    }
    float _2914;
    float _2916;
    float _2918;
    if (_2528)
    {
        _2914 = _2800;
        _2916 = _2802;
        _2918 = _2804;
    }
    else
    {
        uint _2925 = _2434 + 3u;
        uint _2929 = _2434 + 11u;
        float _2943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2925].w)) * _1217) * 0.949999988079071044921875);
        float _2944 = _2943 * _2943;
        float _2945 = cbLight._m0[_2925].x + _1293;
        float _2946 = cbLight._m0[_2925].y + _1294;
        float _2947 = cbLight._m0[_2925].z + _1295;
        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
        float _2952 = _2951 * _2945;
        float _2953 = _2951 * _2946;
        float _2954 = _2951 * _2947;
        float _2955 = dot(vec3(_1214, _1215, _1216), vec3(cbLight._m0[_2925].xyz));
        float _4910 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
        float _2959 = dot(vec3(_1214, _1215, _1216), vec3(_2952, _2953, _2954));
        float _4921 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
        float _2963 = dot(vec3(cbLight._m0[_2925].xyz), vec3(_2952, _2953, _2954));
        float _4932 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2967 = _2944 * _2944;
        float _2971 = ((_2962 * _2962) * (_2967 + (-1.0))) + 1.0;
        float _2978 = exp2(log2(1.0 - (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)))) * 5.0);
        float _2985 = 1.0 - _2944;
        float _2995 = (0.5 / (((_2602 * ((_2958 * _2985) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2985) + _2944) * _2958))) * _2958;
        float _4943 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2997 = (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2967 / ((_2971 * _2971) * 3.141590118408203125));
        float _2998 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2914 = (((((_2978 * _2624) + _1363) * cbLight._m0[_2929].x) * _2997) * _2998) + _2800;
        _2916 = (((((_2978 * _2626) + _1365) * cbLight._m0[_2929].y) * _2997) * _2998) + _2802;
        _2918 = (((((_2978 * _2627) + _1366) * cbLight._m0[_2929].z) * _2997) * _2998) + _2804;
    }
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_2432.y == 0u)
    {
        float _3073 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3074 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3073;
        float _3075 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3073;
        float _3076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3073;
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.x;
        uint _3100 = uint((float(_3088.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1302) / _3089))) + floor(float(uint(cbSceneParam._m0[85u].x * _1301) / _3089)));
        float _3110 = (log2(_3076 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3111 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
        uint _3114 = uint(isnan(14.0) ? _3111 : (isnan(_3111) ? 14.0 : min(_3111, 14.0)));
        uvec4 _3119 = texelFetch(g_lightClusterGridBuffer, int(((_3114 << 2u) + (_3100 << 6u)) >> 2u));
        uint _3120 = _3119.x;
        uint _3121 = _3088.z;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        if (((((1u << ((_3121 >> 4u) & 15u)) + 4294967295u) & _3120) == 0u) || ((_3121 & 240u) == 0u))
        {
            _3221 = 0.0;
            _3223 = 0.0;
            _3225 = 0.0;
            _3227 = 0.0;
            _3229 = 0.0;
            _3231 = 0.0;
        }
        else
        {
            float _3222;
            float _3224;
            float _3226;
            float _3228;
            float _3230;
            float _3232;
            float _3365 = 0.0;
            float _3366 = 0.0;
            float _3367 = 0.0;
            float _3368 = 0.0;
            float _3369 = 0.0;
            float _3370 = 0.0;
            uint _3371 = 0u;
            uint _3380;
            bool _3381;
            for (;;)
            {
                _3380 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                _3381 = _3380 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3381)
                {
                    frontier_phi_61_pred = _3365;
                    frontier_phi_61_pred_1 = _3370;
                    frontier_phi_61_pred_2 = _3369;
                    frontier_phi_61_pred_3 = _3368;
                    frontier_phi_61_pred_4 = _3367;
                    frontier_phi_61_pred_5 = _3366;
                }
                else
                {
                    float _3489;
                    float _3490;
                    float _3491;
                    float _3492;
                    float _3493;
                    float _3494;
                    uint _3495;
                    _3489 = _3365;
                    _3490 = _3366;
                    _3491 = _3367;
                    _3492 = _3368;
                    _3493 = _3369;
                    _3494 = _3370;
                    _3495 = _3380;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    float _3426;
                    for (;;)
                    {
                        uint _3499 = uint(findLSB(_3495)) + (_3371 << 5u);
                        uint _3496 = (_3495 + 4294967295u) & _3495;
                        uint _3501 = _3499 * 48u;
                        vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3501)).x, texelFetch(g_PointLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3501 + 3u)).x));
                        uint _3521 = (_3499 * 48u) + 4u;
                        vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3521)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3521 + 3u)).x));
                        uint _3540 = (_3499 * 48u) + 8u;
                        vec3 _3551 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3540)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3540 + 2u)).x));
                        float _3555 = _3515.x - _3074;
                        float _3556 = _3515.y - _3075;
                        float _3557 = _3515.z - _3076;
                        float _3558 = dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557));
                        float _3561 = inversesqrt(_3558);
                        float _3562 = _3561 * _3555;
                        float _3563 = _3561 * _3556;
                        float _3564 = _3561 * _3557;
                        float _3565 = dot(vec3(_1320, _1323, _1326), vec3(_3562, _3563, _3564));
                        float _3570 = 1.0 - (_3558 * _3515.w);
                        float _4969 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3571 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3572 = sqrt(_3558) * _3534.w;
                        float _3575 = 1.39999997615814208984375 / (_3572 + 1.39999997615814208984375);
                        float _3576 = _3575 * _3575;
                        float _3579 = ((1.0 - _3576) * _3565) + _3576;
                        float _3582 = _3572 * _3572;
                        float _3586 = ((isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * _3571) / ((_3582 * 0.699999988079071044921875) + 1.0);
                        float _3590 = (-0.0) - _3074;
                        float _3591 = (-0.0) - _3075;
                        float _3592 = (-0.0) - _3076;
                        float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                        float _3597 = _3596 * _3590;
                        float _3598 = _3596 * _3591;
                        float _3599 = _3596 * _3592;
                        float _3607 = exp2(log2(1.0 / ((_3582 * 3.5) + 5.0)) * 0.25);
                        float _3608 = 1.0 - _1395;
                        float _3615 = sqrt(1.0 - ((1.0 - (_3608 * _3608)) * (1.0 - (_3607 * _3607))));
                        float _3616 = _3615 * _3615;
                        float _3617 = _3616 * _3616;
                        float _3618 = _3597 + _3562;
                        float _3619 = _3598 + _3563;
                        float _3620 = _3599 + _3564;
                        float _3624 = inversesqrt(dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620)));
                        float _3628 = dot(vec3(_1320, _1323, _1326), vec3(_3597, _3598, _3599));
                        float _4985 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3631 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3632 = dot(vec3(_1320, _1323, _1326), vec3(_3624 * _3618, _3624 * _3619, _3624 * _3620));
                        float _4996 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3635 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                        float _3639 = ((_3635 * _3635) * (_3617 + (-1.0))) + 1.0;
                        float _3640 = _3575 * _3616;
                        float _3641 = _3640 * _3640;
                        float _3644 = ((1.0 - _3641) * _3565) + _3641;
                        float _5007 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3645 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                        float _3646 = 1.0 - _3616;
                        float _3656 = (0.5 / (((_3645 * ((_3631 * _3646) + _3616)) + 9.9999999392252902907785028219223e-09) + (((_3645 * _3646) + _3616) * _3631))) * _3645;
                        float _5018 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                        float _3667 = (((_3617 * 3.1415927410125732421875) * (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) / ((_3639 * _3639) * ((_3582 * 2.1991131305694580078125) + 3.141590118408203125))) * _3571;
                        _3424 = (_3586 * _3534.x) + _3492;
                        _3425 = (_3586 * _3534.y) + _3493;
                        _3426 = (_3586 * _3534.z) + _3494;
                        _3421 = (_3667 * _3551.x) + _3489;
                        _3422 = (_3667 * _3551.y) + _3490;
                        _3423 = (_3667 * _3551.z) + _3491;
                        if (_3496 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3489 = _3421;
                            _3490 = _3422;
                            _3491 = _3423;
                            _3492 = _3424;
                            _3493 = _3425;
                            _3494 = _3426;
                            _3495 = _3496;
                        }
                    }
                    frontier_phi_61_pred = _3421;
                    frontier_phi_61_pred_1 = _3426;
                    frontier_phi_61_pred_2 = _3425;
                    frontier_phi_61_pred_3 = _3424;
                    frontier_phi_61_pred_4 = _3423;
                    frontier_phi_61_pred_5 = _3422;
                }
                _3222 = frontier_phi_61_pred;
                _3232 = frontier_phi_61_pred_1;
                _3230 = frontier_phi_61_pred_2;
                _3228 = frontier_phi_61_pred_3;
                _3226 = frontier_phi_61_pred_4;
                _3224 = frontier_phi_61_pred_5;
                uint _3372 = _3371 + 1u;
                if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3365 = _3222;
                    _3366 = _3224;
                    _3367 = _3226;
                    _3368 = _3228;
                    _3369 = _3230;
                    _3370 = _3232;
                    _3371 = _3372;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3221 = _3222;
            _3223 = _3224;
            _3225 = _3226;
            _3227 = _3228;
            _3229 = _3230;
            _3231 = _3232;
        }
        uvec4 _3235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3236 = _3235.z;
        uint _3238 = (_3236 >> 8u) & 15u;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        float _3343;
        if (((4294967295u << _3238) & _3120) == 0u)
        {
            _3333 = _3221;
            _3335 = _3223;
            _3337 = _3225;
            _3339 = _3227;
            _3341 = _3229;
            _3343 = _3231;
        }
        else
        {
            float _3358 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
            float _3359 = _3358 * _3074;
            float _3360 = _3358 * _3075;
            float _3361 = _3358 * _3076;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3238 < ((_3236 >> 12u) & 15u))
            {
                float _3334;
                float _3336;
                float _3338;
                float _3340;
                float _3342;
                float _3344;
                float _3472 = _3221;
                float _3473 = _3223;
                float _3474 = _3225;
                float _3475 = _3227;
                float _3476 = _3229;
                float _3477 = _3231;
                uint _3478 = _3238;
                uint _3487;
                bool _3488;
                for (;;)
                {
                    _3487 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3478 << 2u)) >> 2u)).x;
                    _3488 = _3487 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3488)
                    {
                        frontier_phi_67_pred = _3475;
                        frontier_phi_67_pred_1 = _3476;
                        frontier_phi_67_pred_2 = _3477;
                        frontier_phi_67_pred_3 = _3474;
                        frontier_phi_67_pred_4 = _3473;
                        frontier_phi_67_pred_5 = _3472;
                    }
                    else
                    {
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3965;
                        float _3966;
                        float _3967;
                        float _3968;
                        float _3969;
                        float _3970;
                        float _3685 = _3472;
                        float _3686 = _3473;
                        float _3687 = _3474;
                        float _3688 = _3475;
                        float _3689 = _3476;
                        float _3690 = _3477;
                        uint _3691 = _3487;
                        uint _3692;
                        vec4 _3717;
                        float _3718;
                        vec4 _3733;
                        vec3 _3745;
                        vec4 _3760;
                        vec4 _3775;
                        float _3821;
                        bool _3822;
                        for (;;)
                        {
                            uint _3702 = ((_3478 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3691));
                            _3692 = (_3691 + 4294967295u) & _3691;
                            uint _3704 = _3702 * 40u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3718 = _3717.w;
                            uint _3720 = (_3702 * 40u) + 4u;
                            _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            uint _3735 = (_3702 * 40u) + 8u;
                            _3745 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x));
                            uint _3747 = (_3702 * 40u) + 16u;
                            _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            uint _3762 = (_3702 * 40u) + 20u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            uint _3777 = (_3702 * 40u) + 24u;
                            vec4 _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            uint _3796 = (_3702 * 40u) + 28u;
                            vec4 _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            _3821 = fma(_3076, _3809.z, fma(_3075, _3809.y, _3809.x * _3074)) + _3809.w;
                            _3822 = !((fma(_3076, _3790.z, fma(_3075, _3790.y, _3790.x * _3074)) + _3790.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3822)
                            {
                                float _3849 = _3717.x - _3074;
                                float _3850 = _3717.y - _3075;
                                float _3851 = _3717.z - _3076;
                                float _3852 = dot(vec3(_3849, _3850, _3851), vec3(_3849, _3850, _3851));
                                float _3855 = inversesqrt(_3852);
                                float _3856 = _3855 * _3849;
                                float _3857 = _3855 * _3850;
                                float _3858 = _3855 * _3851;
                                float _3862 = 1.0 - (_3852 / (_3718 * _3718));
                                float _5029 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3867 = sqrt(_3852) * _3733.w;
                                float _3869 = 1.39999997615814208984375 / (_3867 + 1.39999997615814208984375);
                                float _3870 = _3869 * _3869;
                                float _3873 = ((1.0 - _3870) * dot(vec3(_3856, _3857, _3858), vec3(_1320, _1323, _1326))) + _3870;
                                float _3876 = _3867 * _3867;
                                float _3880 = (fma(_3076, _3760.z, fma(_3075, _3760.y, _3760.x * _3074)) + _3760.w) / _3821;
                                float _3881 = (fma(_3076, _3775.z, fma(_3075, _3775.y, _3775.x * _3074)) + _3775.w) / _3821;
                                float _3885 = 1.0 - dot(vec2(_3880, _3881), vec2(_3880, _3881));
                                float _5045 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3887 = _3886 * (((isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0))) * _3863) / ((_3876 * 0.699999988079071044921875) + 1.0));
                                float _3899 = exp2(log2(1.0 / ((_3876 * 3.5) + 5.0)) * 0.25);
                                float _3900 = 1.0 - _1395;
                                float _3907 = sqrt(1.0 - ((1.0 - (_3900 * _3900)) * (1.0 - (_3899 * _3899))));
                                float _3908 = _3907 * _3907;
                                float _3909 = _3908 * _3908;
                                float _3910 = _3856 - _3359;
                                float _3911 = _3857 - _3360;
                                float _3912 = _3858 - _3361;
                                float _3916 = inversesqrt(dot(vec3(_3910, _3911, _3912), vec3(_3910, _3911, _3912)));
                                float _3920 = dot(vec3(_1320, _1323, _1326), vec3((-0.0) - _3359, (-0.0) - _3360, (-0.0) - _3361));
                                float _5056 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3923 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                                float _3924 = dot(vec3(_1320, _1323, _1326), vec3(_3916 * _3910, _3916 * _3911, _3916 * _3912));
                                float _5067 = isnan(0.0) ? _3924 : (isnan(_3924) ? 0.0 : max(_3924, 0.0));
                                float _3927 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                                float _3931 = ((_3927 * _3927) * (_3909 + (-1.0))) + 1.0;
                                float _3932 = _3869 * _3908;
                                float _3933 = _3932 * _3932;
                                float _3939 = ((1.0 - _3933) * dot(vec3(_1320, _1323, _1326), vec3(_3856, _3857, _3858))) + _3933;
                                float _5078 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3940 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                                float _3941 = 1.0 - _3908;
                                float _3951 = (0.5 / (((_3940 * ((_3923 * _3941) + _3908)) + 9.9999999392252902907785028219223e-09) + (((_3940 * _3941) + _3908) * _3923))) * _3940;
                                float _5089 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3961 = (_3886 * _3863) * (((_3909 * 3.1415927410125732421875) * (isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0)))) / ((_3931 * _3931) * ((_3876 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3961 * _3745.x;
                                frontier_phi_73_pred_1 = _3961 * _3745.y;
                                frontier_phi_73_pred_2 = _3887 * _3733.z;
                                frontier_phi_73_pred_3 = _3887 * _3733.y;
                                frontier_phi_73_pred_4 = _3887 * _3733.x;
                                frontier_phi_73_pred_5 = _3961 * _3745.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3965 = frontier_phi_73_pred;
                            _3966 = frontier_phi_73_pred_1;
                            _3970 = frontier_phi_73_pred_2;
                            _3969 = frontier_phi_73_pred_3;
                            _3968 = frontier_phi_73_pred_4;
                            _3967 = frontier_phi_73_pred_5;
                            _3675 = _3968 + _3688;
                            _3676 = _3969 + _3689;
                            _3677 = _3970 + _3690;
                            _3672 = _3965 + _3685;
                            _3673 = _3966 + _3686;
                            _3674 = _3967 + _3687;
                            if (_3692 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3685 = _3672;
                                _3686 = _3673;
                                _3687 = _3674;
                                _3688 = _3675;
                                _3689 = _3676;
                                _3690 = _3677;
                                _3691 = _3692;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3675;
                        frontier_phi_67_pred_1 = _3676;
                        frontier_phi_67_pred_2 = _3677;
                        frontier_phi_67_pred_3 = _3674;
                        frontier_phi_67_pred_4 = _3673;
                        frontier_phi_67_pred_5 = _3672;
                    }
                    _3340 = frontier_phi_67_pred;
                    _3342 = frontier_phi_67_pred_1;
                    _3344 = frontier_phi_67_pred_2;
                    _3338 = frontier_phi_67_pred_3;
                    _3336 = frontier_phi_67_pred_4;
                    _3334 = frontier_phi_67_pred_5;
                    uint _3479 = _3478 + 1u;
                    if (_3479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3472 = _3334;
                        _3473 = _3336;
                        _3474 = _3338;
                        _3475 = _3340;
                        _3476 = _3342;
                        _3477 = _3344;
                        _3478 = _3479;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3342;
                frontier_phi_55_56_ladder_1 = _3344;
                frontier_phi_55_56_ladder_2 = _3340;
                frontier_phi_55_56_ladder_3 = _3338;
                frontier_phi_55_56_ladder_4 = _3336;
                frontier_phi_55_56_ladder_5 = _3334;
            }
            else
            {
                frontier_phi_55_56_ladder = _3229;
                frontier_phi_55_56_ladder_1 = _3231;
                frontier_phi_55_56_ladder_2 = _3227;
                frontier_phi_55_56_ladder_3 = _3225;
                frontier_phi_55_56_ladder_4 = _3223;
                frontier_phi_55_56_ladder_5 = _3221;
            }
            _3333 = frontier_phi_55_56_ladder_5;
            _3335 = frontier_phi_55_56_ladder_4;
            _3337 = frontier_phi_55_56_ladder_3;
            _3339 = frontier_phi_55_56_ladder_2;
            _3341 = frontier_phi_55_56_ladder;
            _3343 = frontier_phi_55_56_ladder_1;
        }
        float _3348 = isnan(1.0) ? _1379 : (isnan(_1379) ? 1.0 : min(_1379, 1.0));
        _3133 = (_3348 * _3339) + _2566;
        _3135 = (_3348 * _3341) + _2568;
        _3137 = (_3348 * _3343) + _2570;
        _3139 = ((_3333 * _1363) * _3348) + _2914;
        _3141 = ((_3335 * _1365) * _3348) + _2916;
        _3143 = ((_3337 * _1366) * _3348) + _2918;
    }
    else
    {
        _3133 = _2566;
        _3135 = _2568;
        _3137 = _2570;
        _3139 = _2914;
        _3141 = _2916;
        _3143 = _2918;
    }
    float _5105 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _5116 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _5127 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
    uint _3163 = _301 + 6u;
    float _3171 = _1301 / cbSceneParam._m0[86u].x;
    float _3172 = _1302 / cbSceneParam._m0[86u].y;
    vec4 _3186 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3171, _3172, (log2((isnan(cbSceneParam._m0[77u].w) ? _1236 : (isnan(_1236) ? cbSceneParam._m0[77u].w : min(_1236, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3188 = _3186.x;
    float _3189 = _3186.y;
    float _3190 = _3186.z;
    float _3191 = _3186.w;
    float _3283;
    float _3285;
    float _3287;
    float _3289;
    if (_1236 > cbSceneParam._m0[78u].w)
    {
        float _3246 = isnan(_1236) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1236 : min(cbSceneParam._m0[80u].w, _1236));
        float _3247 = _3246 / _1236;
        float _3258 = _3247 * _1286;
        float _3259 = _1287 * _3247;
        float _3260 = (-0.0) - _3259;
        float _3261 = _3247 * _1288;
        float _3263 = (cbSceneParam._m0[77u].w * _3260) / _3246;
        float _3264 = _3263 + cbSceneParam._m0[79u].w;
        float _3265 = cbSceneParam._m0[79u].w - _3259;
        float _3271 = sqrt(((_3258 * _3258) + (_3259 * _3259)) + (_3261 * _3261));
        float _3274 = (1.0 - (cbSceneParam._m0[77u].w / _3246)) * _3271;
        float _3279 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3281 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3434;
        if (abs((_3260 - _3263) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3434 = ((((_3264 > 0.0) ? exp2(_3279 * _3264) : (2.0 - exp2(_3281 * _3264))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3274;
        }
        else
        {
            float _3394 = 1.0 / cbSceneParam._m0[80u].x;
            float _3395 = isnan(_3265) ? _3264 : (isnan(_3264) ? _3265 : max(_3264, _3265));
            float _3396 = isnan(_3265) ? _3264 : (isnan(_3264) ? _3265 : min(_3264, _3265));
            float _3405 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : min(_3395, 0.0));
            float _3406 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : min(_3396, 0.0));
            _3434 = ((abs(_3271 / _3260) * cbSceneParam._m0[80u].y) * ((((_3405 - _3406) * 2.0) - ((exp2(_3279 * (isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0)))) - exp2(_3279 * (isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))))) * _3394)) - ((exp2(_3281 * _3405) - exp2(_3281 * _3406)) * _3394))) + (_3274 * cbSceneParam._m0[80u].z);
        }
        vec4 _3436 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3171, _3172, 1.0), 0.0);
        float _3445 = exp2((_3434 * (-1.44269502162933349609375)) * (1.0 - _3436.w));
        float _3446 = log2(_3445);
        float _3462 = log2(_3191);
        _3283 = (exp2(_3462 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3446 * cbSceneParam._m0[78u].x)) * _3436.x) / cbSceneParam._m0[78u].x)) + _3188;
        _3285 = (exp2(_3462 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3446 * cbSceneParam._m0[78u].y)) * _3436.y) / cbSceneParam._m0[78u].y)) + _3189;
        _3287 = (exp2(_3462 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3446 * cbSceneParam._m0[78u].z)) * _3436.z) / cbSceneParam._m0[78u].z)) + _3190;
        _3289 = _3445 * _3191;
    }
    else
    {
        _3283 = _3188;
        _3285 = _3189;
        _3287 = _3190;
        _3289 = _3191;
    }
    float _3301 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3302 = _3301 == 3.0;
    float _3303 = log2(_3289);
    float _3310 = exp2(_3303 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_3133 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1379))) + ((_3139 + ((isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0))) * _2185)) * cbPerFrame._m0[3u].x));
    float _3311 = exp2(_3303 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0))) * (_3135 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1379))) + ((_3141 + ((isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0))) * _2185)) * cbPerFrame._m0[3u].x));
    float _3312 = exp2(_3303 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0))) * (_3137 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1379))) + ((_3143 + ((isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0))) * _2185)) * cbPerFrame._m0[3u].x));
    float _3321 = (_3301 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3321 * (_3302 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3283)));
    SV_Target.y = _3321 * (_3302 ? _3311 : (_3311 + (cbSceneParam._m0[72u].w * _3285)));
    SV_Target.z = _3321 * (_3302 ? _3312 : (_3312 + (cbSceneParam._m0[72u].w * _3287)));
    SV_Target.w = cbInstanceData._m0[_3163].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3163].w;
}


