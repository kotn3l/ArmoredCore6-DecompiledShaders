#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1303;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3631 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3642 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3653 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _404 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _406 = _404.x;
    float _418 = dot(vec4(_406, _404.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _435 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _372.x) * 2.0) - ((((_406 - _418) * cbMtdParam._m0[23u].w) + _418) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3664 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _443 = (_436 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _444 = (_436 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _445 = (_436 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    vec4 _462 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _482 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _484 = _482.x;
    float _494 = dot(vec4(_484, _482.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _508 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _372.y) * 2.0) - ((((_484 - _494) * cbMtdParam._m0[23u].w) + _494) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3675 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _516 = (_509 * ((_462.x * cbMtdParam._m0[13u].x) - _443)) + _443;
    float _517 = (_509 * ((_462.y * cbMtdParam._m0[13u].y) - _444)) + _444;
    float _518 = (_509 * ((_462.z * cbMtdParam._m0[13u].z) - _445)) + _445;
    float _522 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _516;
    float _525 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _517;
    float _528 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _518;
    float _535 = ((_516 - _522) * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) + _522;
    float _536 = ((_517 - _525) * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) + _525;
    float _537 = ((_518 - _528) * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) + _528;
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    float _600 = ((_572.x - _591) * _436) + _591;
    float _601 = ((_572.y - _592) * _436) + _592;
    float _602 = ((_572.z - _593) * _436) + _593;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _627 = ((_614.z - _602) * _509) + _602;
    float _630 = ((((_614.x - _600) * _509) + _600) * 2.0) + (-1.0);
    float _631 = ((((_614.y - _601) * _509) + _601) * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3686 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _637 = sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))));
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _669 = (_630 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_549.x * 2.0) + (-1.0)))) + (((_657.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _670 = (_631 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_549.y * 2.0) + (-1.0)))) + (((_657.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _698 = _696.x;
    float _716 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _289) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _290) + cbTextureTilingScale._m0[9u].w)).x - _698) * _436) + _698;
    float _734 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _289) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _290) + cbTextureTilingScale._m0[21u].w)).x - _716) * _509) + _716;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _734) * cbMtdParam._m0[19u].z) + _734;
    float _743 = (((_549.z - _627) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _627;
    float _747 = ((_657.z - _743) * cbMtdParam._m0[19u].w) + _743;
    float _749 = cbMtdParam._m0[22u].x + _657.w;
    float _752 = fma(_637, _236 * NORMAL.x, fma(_670, _243 * TANGENT.x, (_229 * _221) * _669));
    float _755 = fma(_637, _236 * NORMAL.y, fma(_670, _243 * TANGENT.y, (_229 * _222) * _669));
    float _758 = fma(_637, _236 * NORMAL.z, fma(_670, _243 * TANGENT.z, (_229 * _223) * _669));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _3697 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _766 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3719 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3730 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3741 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3752 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _771 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _870 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _873 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _876 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _890 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _896 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_890].x;
    float _897 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_890].y;
    float _898 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_890].z;
    float _3763 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _902 = 1.0 - _771;
    float _903 = _899 * _902;
    float _904 = _900 * _902;
    float _905 = _901 * _902;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _771;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _771;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _771;
    float _913 = _910 + 0.039999999105930328369140625;
    float _915 = _911 + 0.039999999105930328369140625;
    float _916 = _912 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _929 = ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * TEXCOORD_5.w) * _925.x;
    float _930 = dot(vec3(_763, _764, _765), vec3(_843, _844, _845));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _763) - _843;
    float _938 = (_933 * _764) - _844;
    float _939 = (_933 * _765) - _845;
    float _943 = abs(dot(vec3(_843, _844, _845), vec3(_763, _764, _765)));
    float _3796 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_766);
    float _958 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _964 = (1.0 - _958) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _965 = _958 * _945;
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1031 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1035 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1060 = _993 + _763;
        float _1061 = _997 + _764;
        float _1062 = _1001 + _765;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_763, _764, _765), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3844 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_763, _764, _765), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3877 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_763, _764, _765), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3910 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1341 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1345 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1349 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1372 = _993 + _763;
        float _1373 = _997 + _764;
        float _1374 = _1001 + _765;
        float _1384 = fma(_1374, cbModelParam._m0[30u].z, fma(_1373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1372)) - _1341;
        float _1385 = fma(_1374, cbModelParam._m0[31u].z, fma(_1373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1372)) - _1345;
        float _1386 = fma(_1374, cbModelParam._m0[32u].z, fma(_1373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1372)) - _1349;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1341 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1345 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[35u].z) + ((((((_1349 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1440 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1407.x + (-0.5));
        float _1442 = _1440 * (_1407.y + (-0.5));
        float _1443 = _1440 * (_1407.z + (-0.5));
        float _1450 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1414.x + (-0.5));
        float _1452 = _1450 * (_1414.y + (-0.5));
        float _1453 = _1450 * (_1414.z + (-0.5));
        float _1460 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1421.x + (-0.5));
        float _1462 = _1460 * (_1421.y + (-0.5));
        float _1463 = _1460 * (_1421.z + (-0.5));
        float _1470 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1428.x + (-0.5));
        float _1472 = _1470 * (_1428.y + (-0.5));
        float _1473 = _1470 * (_1428.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_763, _764, _765), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3973 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1504 + 1.0))) + _1509) * _1474;
        float _1519 = _1442 * 0.5;
        float _1520 = _1452 * 0.5;
        float _1521 = _1462 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_763, _764, _765), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _3984 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _3995 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4006 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_1546 + 1.0))) + _1551) * _1475;
        float _1561 = _1443 * 0.5;
        float _1562 = _1453 * 0.5;
        float _1563 = _1463 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_763, _764, _765), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4017 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4028 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4039 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1588 + 1.0))) + _1593) * _1476;
        _1610 = _1443;
        _1611 = _1442;
        _1612 = _1441;
        _1613 = _1453;
        _1614 = _1452;
        _1615 = _1451;
        _1616 = _1463;
        _1617 = _1462;
        _1618 = _1461;
        _1619 = _1476;
        _1620 = _1475;
        _1621 = _1474;
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1303;
        _1611 = _1303;
        _1612 = _1303;
        _1613 = _1303;
        _1614 = _1303;
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1315)) + _1315;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1316)) + _1316;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1317)) + _1317;
    float _1657 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1634));
    float _1678 = _937 * 0.5;
    float _1679 = _938 * 0.5;
    float _1680 = _939 * 0.5;
    float _1681 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1684 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1687 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1721;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1694 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1698 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1702 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1709 = dot(vec4(cbModelParam._m0[39u]), vec4(_1678, _1679, _1680, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1732;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1723 = dot(vec4(cbModelParam._m0[40u]), vec4(_1678, _1679, _1680, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1736 = (_1732 * cbModelParam._m0[1u].x) + (_1721 * (1.0 - cbModelParam._m0[1u].x));
    float _1746 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1746 : min(cbModelParam._m0[25u].z, _1746));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1810 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1813 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1841 = frontier_phi_14_12_ladder;
        }
        float _2044;
        if (_1810 > 0.0)
        {
            _2044 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2044 = frontier_phi_23_19_ladder;
        }
        float _2298;
        if (_1813 > 0.0)
        {
            _2298 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2298 = frontier_phi_35_30_ladder;
        }
        float _2300 = isnan(_2044) ? _1841 : (isnan(_1841) ? _2044 : min(_1841, _2044));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1807) + _1796;
        float _2306 = (_2301 * _1810) + _1800;
        float _2307 = (_2301 * _1813) + _1804;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2308;
        float _2312 = _2308 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 > _2312) || ((_2306 < _2310) || ((_2305 < _2310) || (_2305 > _2312))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2307, cbModelParam._m0[9u].z, fma(_2306, cbModelParam._m0[9u].y, _2305 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2307, cbModelParam._m0[10u].z, fma(_2306, cbModelParam._m0[10u].y, _2305 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2307, cbModelParam._m0[11u].z, fma(_2306, cbModelParam._m0[11u].y, _2305 * cbModelParam._m0[11u].x))), _1747);
            frontier_phi_13_35_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_13_35_ladder_2;
        _1831 = frontier_phi_13_35_ladder_1;
        _1833 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1747);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1906 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1909 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2049;
        if (_1903 > 0.0)
        {
            _2049 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2049 = frontier_phi_25_21_ladder;
        }
        float _2325;
        if (_1906 > 0.0)
        {
            _2325 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2325 = frontier_phi_37_32_ladder;
        }
        float _2538;
        if (_1909 > 0.0)
        {
            _2538 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2538 = frontier_phi_46_43_ladder;
        }
        float _2540 = isnan(_2325) ? _2049 : (isnan(_2049) ? _2325 : min(_2049, _2325));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1903) + _1892;
        float _2546 = (_2541 * _1906) + _1896;
        float _2547 = (_2541 * _1909) + _1900;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_22_46_ladder = _2746.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2746.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2746.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_22_46_ladder_2;
        _1930 = frontier_phi_22_46_ladder_1;
        _1932 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1838);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1945 = (((_964 * _913) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1928 - _1829)) + _1829);
    float _1947 = (((_964 * _915) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1930 - _1831)) + _1831);
    float _1949 = (((_964 * _916) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1932 - _1833)) + _1833);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _929 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2003 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2007 = _1970 | 1u;
    float _2018 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_763, _764, _765));
    float _2021 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_763, _764, _765));
    float _4175 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _4186 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2026 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _2028 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _2035 = ((cbLight._m0[_1987].x * _1993) * _2028) + ((cbLight._m0[_1997].x * _2003) * _2026);
    float _2036 = ((_1993 * cbLight._m0[_1987].y) * _2028) + ((_2003 * cbLight._m0[_1997].y) * _2026);
    float _2037 = ((_1993 * cbLight._m0[_1987].z) * _2028) + ((_2003 * cbLight._m0[_1997].z) * _2026);
    uvec4 _2041 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2043 = _2041.x == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2043)
    {
        _2054 = _2035;
        _2056 = _2036;
        _2058 = _2037;
    }
    else
    {
        uint _2062 = _1970 + 6u;
        float _2078 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4197 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2081 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2054 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _2035;
        _2056 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _2036;
        _2058 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _2037;
    }
    bool _2061 = _2041.y == 0u;
    float _2099;
    float _2101;
    float _2103;
    if (_2061)
    {
        _2099 = _2054;
        _2101 = _2056;
        _2103 = _2058;
    }
    else
    {
        uint _2269 = _1970 + 7u;
        float _2285 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4213 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2288 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2099 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2054;
        _2101 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2056;
        _2103 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2058;
    }
    uint _2106 = _1970 + 8u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _766) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1970].x + _843;
    float _2122 = cbLight._m0[_1970].y + _844;
    float _2123 = cbLight._m0[_1970].z + _845;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_1970].xyz));
    float _4229 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2135 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2136 = dot(vec3(_763, _764, _765), vec3(_2128, _2129, _2130));
    float _4251 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2128, _2129, _2130));
    float _4262 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2120 * _2120;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * 5.0);
    float _2157 = 0.959999978542327880859375 - _910;
    float _2159 = 0.959999978542327880859375 - _911;
    float _2160 = 0.959999978542327880859375 - _912;
    float _2167 = 1.0 - _2120;
    float _2178 = (0.5 / (((_2135 * ((_2134 * _2167) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2167) + _2120) * _2134))) * _2134;
    float _4273 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2180 = (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    uint _2191 = _1970 + 9u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _766) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_2007].x + _843;
    float _2205 = cbLight._m0[_2007].y + _844;
    float _2206 = cbLight._m0[_2007].z + _845;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2007].xyz));
    float _4284 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2218 = dot(vec3(_763, _764, _765), vec3(_2211, _2212, _2213));
    float _4295 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2211, _2212, _2213));
    float _4306 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2203 * _2203;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2237 = exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0);
    float _2244 = 1.0 - _2203;
    float _2254 = (0.5 / (((_2135 * ((_2217 * _2244) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2244) + _2203) * _2217))) * _2217;
    float _4317 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2256 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    float _2266 = (((((_2237 * _2157) + _913) * cbLight._m0[_2191].x) * _2256) * _1993) + (((((_2156 * _2157) + _913) * cbLight._m0[_2106].x) * _2180) * _2003);
    float _2267 = (((((_2237 * _2159) + _915) * cbLight._m0[_2191].y) * _2256) * _1993) + (((((_2156 * _2159) + _915) * cbLight._m0[_2106].y) * _2180) * _2003);
    float _2268 = (((((_2237 * _2160) + _916) * cbLight._m0[_2191].z) * _2256) * _1993) + (((((_2156 * _2160) + _916) * cbLight._m0[_2106].z) * _2180) * _2003);
    float _2330;
    float _2332;
    float _2334;
    if (_2043)
    {
        _2330 = _2266;
        _2332 = _2267;
        _2334 = _2268;
    }
    else
    {
        uint _2336 = _1970 + 2u;
        uint _2340 = _1970 + 10u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _766) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _843;
        float _2357 = cbLight._m0[_2336].y + _844;
        float _2358 = cbLight._m0[_2336].z + _845;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2336].xyz));
        float _4328 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2370 = dot(vec3(_763, _764, _765), vec3(_2363, _2364, _2365));
        float _4339 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4350 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) * 5.0);
        float _2396 = 1.0 - _2355;
        float _2406 = (0.5 / (((_2135 * ((_2369 * _2396) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2396) + _2355) * _2369))) * _2369;
        float _4361 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2330 = (((((_2389 * _2157) + _913) * cbLight._m0[_2340].x) * _2408) * _2409) + _2266;
        _2332 = (((((_2389 * _2159) + _915) * cbLight._m0[_2340].y) * _2408) * _2409) + _2267;
        _2334 = (((((_2389 * _2160) + _916) * cbLight._m0[_2340].z) * _2408) * _2409) + _2268;
    }
    float _2444;
    float _2446;
    float _2448;
    if (_2061)
    {
        _2444 = _2330;
        _2446 = _2332;
        _2448 = _2334;
    }
    else
    {
        uint _2455 = _1970 + 3u;
        uint _2459 = _1970 + 11u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _766) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _843;
        float _2476 = cbLight._m0[_2455].y + _844;
        float _2477 = cbLight._m0[_2455].z + _845;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2455].xyz));
        float _4377 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2489 = dot(vec3(_763, _764, _765), vec3(_2482, _2483, _2484));
        float _4388 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4399 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2508 = exp2(log2(1.0 - (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) * 5.0);
        float _2515 = 1.0 - _2474;
        float _2525 = (0.5 / (((_2135 * ((_2488 * _2515) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2135 * _2515) + _2474) * _2488))) * _2488;
        float _4410 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2444 = (((((_2508 * _2157) + _913) * cbLight._m0[_2459].x) * _2527) * _2528) + _2330;
        _2446 = (((((_2508 * _2159) + _915) * cbLight._m0[_2459].y) * _2527) * _2528) + _2332;
        _2448 = (((((_2508 * _2160) + _916) * cbLight._m0[_2459].z) * _2527) * _2528) + _2334;
    }
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    if (_1968.y == 0u)
    {
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2603;
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2603;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2603;
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.x;
        uint _2630 = uint((float(_2618.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2619))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2619)));
        float _2640 = (log2(_2606 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2641 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        uint _2644 = uint(isnan(14.0) ? _2641 : (isnan(_2641) ? 14.0 : min(_2641, 14.0)));
        uvec4 _2649 = texelFetch(g_lightClusterGridBuffer, int(((_2644 << 2u) + (_2630 << 6u)) >> 2u));
        uint _2650 = _2649.x;
        uint _2651 = _2618.z;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((((1u << ((_2651 >> 4u) & 15u)) + 4294967295u) & _2650) == 0u) || ((_2651 & 240u) == 0u))
        {
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
        }
        else
        {
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            uint _2902 = 0u;
            uint _2911;
            bool _2912;
            for (;;)
            {
                _2911 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                _2912 = _2911 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2912)
                {
                    frontier_phi_61_pred = _2896;
                    frontier_phi_61_pred_1 = _2901;
                    frontier_phi_61_pred_2 = _2900;
                    frontier_phi_61_pred_3 = _2899;
                    frontier_phi_61_pred_4 = _2898;
                    frontier_phi_61_pred_5 = _2897;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    uint _3026;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2911;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3030 = uint(findLSB(_3026)) + (_2902 << 5u);
                        uint _3027 = (_3026 + 4294967295u) & _3026;
                        uint _3032 = _3030 * 48u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3052 = (_3030 * 48u) + 4u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3071 = (_3030 * 48u) + 8u;
                        vec3 _3082 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x));
                        float _3086 = _3046.x - _2604;
                        float _3087 = _3046.y - _2605;
                        float _3088 = _3046.z - _2606;
                        float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                        float _3092 = inversesqrt(_3089);
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3096 = dot(vec3(_870, _873, _876), vec3(_3093, _3094, _3095));
                        float _3101 = 1.0 - (_3089 * _3046.w);
                        float _4436 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3103 = sqrt(_3089) * _3065.w;
                        float _3106 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3096) + _3107;
                        float _3113 = _3103 * _3103;
                        float _3117 = ((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3102) / ((_3113 * 0.699999988079071044921875) + 1.0);
                        float _3121 = (-0.0) - _2604;
                        float _3122 = (-0.0) - _2605;
                        float _3123 = (-0.0) - _2606;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3138 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                        float _3139 = 1.0 - _945;
                        float _3146 = sqrt(1.0 - ((1.0 - (_3139 * _3139)) * (1.0 - (_3138 * _3138))));
                        float _3147 = _3146 * _3146;
                        float _3148 = _3147 * _3147;
                        float _3149 = _3128 + _3093;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3159 = dot(vec3(_870, _873, _876), vec3(_3128, _3129, _3130));
                        float _4452 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3163 = dot(vec3(_870, _873, _876), vec3(_3155 * _3149, _3155 * _3150, _3155 * _3151));
                        float _4463 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3170 = ((_3166 * _3166) * (_3148 + (-1.0))) + 1.0;
                        float _3171 = _3106 * _3147;
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3096) + _3172;
                        float _4474 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3177 = 1.0 - _3147;
                        float _3187 = (0.5 / (((_3176 * ((_3162 * _3177) + _3147)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3147) * _3162))) * _3176;
                        float _4485 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3198 = (((_3148 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3170 * _3170) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125))) * _3102;
                        _2955 = (_3117 * _3065.x) + _3023;
                        _2956 = (_3117 * _3065.y) + _3024;
                        _2957 = (_3117 * _3065.z) + _3025;
                        _2952 = (_3198 * _3082.x) + _3020;
                        _2953 = (_3198 * _3082.y) + _3021;
                        _2954 = (_3198 * _3082.z) + _3022;
                        if (_3027 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _3027;
                        }
                    }
                    frontier_phi_61_pred = _2952;
                    frontier_phi_61_pred_1 = _2957;
                    frontier_phi_61_pred_2 = _2956;
                    frontier_phi_61_pred_3 = _2955;
                    frontier_phi_61_pred_4 = _2954;
                    frontier_phi_61_pred_5 = _2953;
                }
                _2752 = frontier_phi_61_pred;
                _2762 = frontier_phi_61_pred_1;
                _2760 = frontier_phi_61_pred_2;
                _2758 = frontier_phi_61_pred_3;
                _2756 = frontier_phi_61_pred_4;
                _2754 = frontier_phi_61_pred_5;
                uint _2903 = _2902 + 1u;
                if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2896 = _2752;
                    _2897 = _2754;
                    _2898 = _2756;
                    _2899 = _2758;
                    _2900 = _2760;
                    _2901 = _2762;
                    _2902 = _2903;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
        }
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.z;
        uint _2768 = (_2766 >> 8u) & 15u;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((4294967295u << _2768) & _2650) == 0u)
        {
            _2864 = _2751;
            _2866 = _2753;
            _2868 = _2755;
            _2870 = _2757;
            _2872 = _2759;
            _2874 = _2761;
        }
        else
        {
            float _2889 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
            float _2890 = _2889 * _2604;
            float _2891 = _2889 * _2605;
            float _2892 = _2889 * _2606;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2768 < ((_2766 >> 12u) & 15u))
            {
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _3003 = _2751;
                float _3004 = _2753;
                float _3005 = _2755;
                float _3006 = _2757;
                float _3007 = _2759;
                float _3008 = _2761;
                uint _3009 = _2768;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2644 << 5u) + (_2630 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3019)
                    {
                        frontier_phi_67_pred = _3006;
                        frontier_phi_67_pred_1 = _3007;
                        frontier_phi_67_pred_2 = _3008;
                        frontier_phi_67_pred_3 = _3005;
                        frontier_phi_67_pred_4 = _3004;
                        frontier_phi_67_pred_5 = _3003;
                    }
                    else
                    {
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3216 = _3003;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        uint _3222 = _3018;
                        uint _3223;
                        vec4 _3248;
                        float _3249;
                        vec4 _3264;
                        vec3 _3276;
                        vec4 _3291;
                        vec4 _3306;
                        float _3353;
                        bool _3354;
                        for (;;)
                        {
                            uint _3233 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3222));
                            _3223 = (_3222 + 4294967295u) & _3222;
                            uint _3235 = _3233 * 40u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3249 = _3248.w;
                            uint _3251 = (_3233 * 40u) + 4u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3266 = (_3233 * 40u) + 8u;
                            _3276 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x));
                            uint _3278 = (_3233 * 40u) + 16u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3233 * 40u) + 20u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3233 * 40u) + 24u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3328 = (_3233 * 40u) + 28u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3353 = fma(_2606, _3341.z, fma(_2605, _3341.y, _3341.x * _2604)) + _3341.w;
                            _3354 = !((fma(_2606, _3322.z, fma(_2605, _3322.y, _3322.x * _2604)) + _3322.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3354)
                            {
                                float _3381 = _3248.x - _2604;
                                float _3382 = _3248.y - _2605;
                                float _3383 = _3248.z - _2606;
                                float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                                float _3387 = inversesqrt(_3384);
                                float _3388 = _3387 * _3381;
                                float _3389 = _3387 * _3382;
                                float _3390 = _3387 * _3383;
                                float _3394 = 1.0 - (_3384 / (_3249 * _3249));
                                float _4496 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3399 = sqrt(_3384) * _3264.w;
                                float _3401 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                                float _3402 = _3401 * _3401;
                                float _3405 = ((1.0 - _3402) * dot(vec3(_3388, _3389, _3390), vec3(_870, _873, _876))) + _3402;
                                float _3408 = _3399 * _3399;
                                float _3412 = (fma(_2606, _3291.z, fma(_2605, _3291.y, _3291.x * _2604)) + _3291.w) / _3353;
                                float _3413 = (fma(_2606, _3306.z, fma(_2605, _3306.y, _3306.x * _2604)) + _3306.w) / _3353;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4512 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3395) / ((_3408 * 0.699999988079071044921875) + 1.0));
                                float _3431 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                                float _3432 = 1.0 - _945;
                                float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                                float _3440 = _3439 * _3439;
                                float _3441 = _3440 * _3440;
                                float _3442 = _3388 - _2890;
                                float _3443 = _3389 - _2891;
                                float _3444 = _3390 - _2892;
                                float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                                float _3452 = dot(vec3(_870, _873, _876), vec3((-0.0) - _2890, (-0.0) - _2891, (-0.0) - _2892));
                                float _4523 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3456 = dot(vec3(_870, _873, _876), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                                float _4534 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                                float _3464 = _3401 * _3440;
                                float _3465 = _3464 * _3464;
                                float _3471 = ((1.0 - _3465) * dot(vec3(_870, _873, _876), vec3(_3388, _3389, _3390))) + _3465;
                                float _4545 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3473 = 1.0 - _3440;
                                float _3483 = (0.5 / (((_3472 * ((_3455 * _3473) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3440) * _3455))) * _3472;
                                float _4556 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3493 = (_3418 * _3395) * (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) / ((_3463 * _3463) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3493 * _3276.x;
                                frontier_phi_73_pred_1 = _3493 * _3276.y;
                                frontier_phi_73_pred_2 = _3419 * _3264.z;
                                frontier_phi_73_pred_3 = _3419 * _3264.y;
                                frontier_phi_73_pred_4 = _3419 * _3264.x;
                                frontier_phi_73_pred_5 = _3493 * _3276.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_73_pred;
                            _3498 = frontier_phi_73_pred_1;
                            _3502 = frontier_phi_73_pred_2;
                            _3501 = frontier_phi_73_pred_3;
                            _3500 = frontier_phi_73_pred_4;
                            _3499 = frontier_phi_73_pred_5;
                            _3206 = _3500 + _3219;
                            _3207 = _3501 + _3220;
                            _3208 = _3502 + _3221;
                            _3203 = _3497 + _3216;
                            _3204 = _3498 + _3217;
                            _3205 = _3499 + _3218;
                            if (_3223 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3223;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3206;
                        frontier_phi_67_pred_1 = _3207;
                        frontier_phi_67_pred_2 = _3208;
                        frontier_phi_67_pred_3 = _3205;
                        frontier_phi_67_pred_4 = _3204;
                        frontier_phi_67_pred_5 = _3203;
                    }
                    _2871 = frontier_phi_67_pred;
                    _2873 = frontier_phi_67_pred_1;
                    _2875 = frontier_phi_67_pred_2;
                    _2869 = frontier_phi_67_pred_3;
                    _2867 = frontier_phi_67_pred_4;
                    _2865 = frontier_phi_67_pred_5;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3003 = _2865;
                        _3004 = _2867;
                        _3005 = _2869;
                        _3006 = _2871;
                        _3007 = _2873;
                        _3008 = _2875;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2873;
                frontier_phi_55_56_ladder_1 = _2875;
                frontier_phi_55_56_ladder_2 = _2871;
                frontier_phi_55_56_ladder_3 = _2869;
                frontier_phi_55_56_ladder_4 = _2867;
                frontier_phi_55_56_ladder_5 = _2865;
            }
            else
            {
                frontier_phi_55_56_ladder = _2759;
                frontier_phi_55_56_ladder_1 = _2761;
                frontier_phi_55_56_ladder_2 = _2757;
                frontier_phi_55_56_ladder_3 = _2755;
                frontier_phi_55_56_ladder_4 = _2753;
                frontier_phi_55_56_ladder_5 = _2751;
            }
            _2864 = frontier_phi_55_56_ladder_5;
            _2866 = frontier_phi_55_56_ladder_4;
            _2868 = frontier_phi_55_56_ladder_3;
            _2870 = frontier_phi_55_56_ladder_2;
            _2872 = frontier_phi_55_56_ladder;
            _2874 = frontier_phi_55_56_ladder_1;
        }
        float _2879 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2663 = (_2879 * _2870) + _2099;
        _2665 = (_2879 * _2872) + _2101;
        _2667 = (_2879 * _2874) + _2103;
        _2669 = ((_2864 * _913) * _2879) + _2444;
        _2671 = ((_2866 * _915) * _2879) + _2446;
        _2673 = ((_2868 * _916) * _2879) + _2448;
    }
    else
    {
        _2663 = _2099;
        _2665 = _2101;
        _2667 = _2103;
        _2669 = _2444;
        _2671 = _2446;
        _2673 = _2448;
    }
    float _4572 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4583 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4594 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    uint _2693 = _270 + 6u;
    float _2701 = _851 / cbSceneParam._m0[86u].x;
    float _2702 = _852 / cbSceneParam._m0[86u].y;
    vec4 _2716 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2718 = _2716.x;
    float _2719 = _2716.y;
    float _2720 = _2716.z;
    float _2721 = _2716.w;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _2776 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _2777 = _2776 / _785;
        float _2788 = _2777 * _836;
        float _2789 = _837 * _2777;
        float _2790 = (-0.0) - _2789;
        float _2792 = _2777 * _838;
        float _2794 = (cbSceneParam._m0[77u].w * _2790) / _2776;
        float _2795 = _2794 + cbSceneParam._m0[79u].w;
        float _2796 = cbSceneParam._m0[79u].w - _2789;
        float _2802 = sqrt(((_2788 * _2788) + (_2789 * _2789)) + (_2792 * _2792));
        float _2805 = (1.0 - (cbSceneParam._m0[77u].w / _2776)) * _2802;
        float _2810 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2812 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2790 - _2794) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2795 > 0.0) ? exp2(_2810 * _2795) : (2.0 - exp2(_2812 * _2795))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2805;
        }
        else
        {
            float _2925 = 1.0 / cbSceneParam._m0[80u].x;
            float _2926 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : max(_2795, _2796));
            float _2927 = isnan(_2796) ? _2795 : (isnan(_2795) ? _2796 : min(_2795, _2796));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            _2965 = ((abs(_2802 / _2790) * cbSceneParam._m0[80u].y) * ((((_2936 - _2937) * 2.0) - ((exp2(_2810 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0)))) - exp2(_2810 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))))) * _2925)) - ((exp2(_2812 * _2936) - exp2(_2812 * _2937)) * _2925))) + (_2805 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2701, _2702, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2721);
        _2814 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2718;
        _2816 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2719;
        _2818 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2720;
        _2820 = _2976 * _2721;
    }
    else
    {
        _2814 = _2718;
        _2816 = _2719;
        _2818 = _2720;
        _2820 = _2721;
    }
    float _2832 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2833 = _2832 == 3.0;
    float _2834 = log2(_2820);
    float _2841 = exp2(_2834 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2663 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _929))) + ((_2669 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _2842 = exp2(_2834 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2665 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _929))) + ((_2671 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _2843 = exp2(_2834 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2667 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _929))) + ((_2673 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1736)) * cbPerFrame._m0[3u].x));
    float _2852 = (_2832 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2852 * (_2833 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.y = _2852 * (_2833 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2816)));
    SV_Target.z = _2852 * (_2833 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2818)));
    SV_Target.w = cbInstanceData._m0[_2693].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2693].w;
}


