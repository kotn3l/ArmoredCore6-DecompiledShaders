#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1699;
float _4360;
float _4361;
float _4362;
float _4363;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _258 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _259 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _260 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _266 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _273 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _280 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _294 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _295 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4372 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4383 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _4394 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    uint _305 = uint(roundEven(NORMAL.w)) * 13u;
    uint _310 = _305 + 1u;
    uint _314 = _305 + 2u;
    float _323 = sqrt(((cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x)) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x));
    float _324 = _323 * TEXCOORD.z;
    float _325 = _323 * TEXCOORD.w;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _324) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _325) + cbTextureTilingScale._m0[13u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _324) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _325) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _442 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _444 = _442.x;
    float _456 = dot(vec4(_444, _442.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _473 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_444 - _456) * cbMtdParam._m0[23u].w) + _456) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4405 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _481 = (_474 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _482 = (_474 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _483 = (_474 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _500 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _324) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _325) + cbTextureTilingScale._m0[3u].w));
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _522 = _520.x;
    float _532 = dot(vec4(_522, _520.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _546 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_522 - _532) * cbMtdParam._m0[23u].w) + _532) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4416 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _554 = (_547 * ((_500.x * cbMtdParam._m0[13u].x) - _481)) + _481;
    float _555 = (_547 * ((_500.y * cbMtdParam._m0[13u].y) - _482)) + _482;
    float _556 = (_547 * ((_500.z * cbMtdParam._m0[13u].z) - _483)) + _483;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _324) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _325) + cbTextureTilingScale._m0[24u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _594 = _592.x;
    float _604 = dot(vec4(_594, _592.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _616 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _407.z) * 2.0) - ((((_594 - _604) * cbMtdParam._m0[23u].w) + _604) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4427 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _624 = (_617 * ((_575.x * cbMtdParam._m0[14u].x) - _554)) + _554;
    float _625 = (_617 * ((_575.y * cbMtdParam._m0[14u].y) - _555)) + _555;
    float _626 = (_617 * ((_575.z * cbMtdParam._m0[14u].z) - _556)) + _556;
    float _630 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _338.x) * _624;
    float _633 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _338.y) * _625;
    float _636 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _338.z) * _626;
    float _643 = ((_624 - _630) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) + _630;
    float _644 = ((_625 - _633) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) + _633;
    float _645 = ((_626 - _636) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) + _636;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _324) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _325) + cbTextureTilingScale._m0[20u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _324) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _325) + cbTextureTilingScale._m0[4u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _704 = _702.x;
    float _705 = _702.y;
    float _706 = _702.z;
    float _713 = ((_685.x - _704) * _474) + _704;
    float _714 = ((_685.y - _705) * _474) + _705;
    float _715 = ((_685.z - _706) * _474) + _706;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _324) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _325) + cbTextureTilingScale._m0[2u].w));
    float _738 = ((_727.x - _713) * _547) + _713;
    float _739 = ((_727.y - _714) * _547) + _714;
    float _740 = ((_727.z - _715) * _547) + _715;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _324) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _325) + cbTextureTilingScale._m0[23u].w));
    float _765 = ((_752.z - _740) * _617) + _740;
    float _768 = ((((_752.x - _738) * _617) + _738) * 2.0) + (-1.0);
    float _769 = ((((_752.y - _739) * _617) + _739) * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _4438 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _775 = sqrt(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))));
    vec4 _789 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _814 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _324) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _325) + cbTextureTilingScale._m0[11u].w));
    float _816 = _814.x;
    float _817 = 1.0 - _816;
    float _825 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _828 = ((isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : min(_825, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _837 = (_828 - ((((((_816 - _817) * cbMtdParam._m0[24u].z) + _817) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _828))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4459 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _838 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _845 = (_838 * (cbMtdParam._m0[17u].x - _643)) + _643;
    float _846 = (_838 * (cbMtdParam._m0[17u].y - _644)) + _644;
    float _847 = (_838 * (cbMtdParam._m0[17u].z - _645)) + _645;
    vec4 _859 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _324) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _325) + cbTextureTilingScale._m0[19u].w));
    float _861 = _859.x;
    float _862 = 1.0 - _861;
    float _887 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_861 - _862) * cbMtdParam._m0[24u].w) + _862) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4470 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _888 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _896 = ((((cbMtdParam._m0[10u].x - _845) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _888) + _845;
    float _897 = ((((cbMtdParam._m0[10u].y - _846) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _888) + _846;
    float _898 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _847)) * _888) + _847;
    vec4 _924 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _926 = _924.x;
    float _944 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _324) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _325) + cbTextureTilingScale._m0[9u].w)).x - _926) * _474) + _926;
    float _961 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _324) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _325) + cbTextureTilingScale._m0[21u].w)).x - _944) * _547) + _944;
    float _978 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _324) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _325) + cbTextureTilingScale._m0[10u].w)).x - _961) * _617) + _961;
    float _982 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _978) * cbMtdParam._m0[19u].z) + _978;
    float _984 = _982 - (_982 * _838);
    float _986 = _984 - (_984 * _888);
    float _991 = (((_662.z - _765) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _765;
    float _995 = ((_789.z - _991) * cbMtdParam._m0[19u].w) + _991;
    vec4 _1011 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _324) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _325) + cbTextureTilingScale._m0[15u].w));
    float _1018 = (_1011.x * 2.0) + (-1.0);
    float _1019 = (_1011.y * 2.0) + (-1.0);
    float _1020 = dot(vec2(_1018, _1019), vec2(_1018, _1019));
    float _4481 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1028 = (_838 * (_1011.z - _995)) + _995;
    float _1031 = ((cbMtdParam._m0[23u].x - _1028) * _888) + _1028;
    vec4 _1054 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _324) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _325) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1060 = (_1054.x * 2.0) + (-1.0);
    float _1061 = (_1054.y * 2.0) + (-1.0);
    float _1062 = dot(vec2(_1060, _1061), vec2(_1060, _1061));
    float _4492 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1076 = (_768 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_662.x * 2.0) + (-1.0)))) + (((_789.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1077 = (_769 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_662.y * 2.0) + (-1.0)))) + (((_789.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1089 = (((_1018 - _1076) + (cbMtdParam._m0[21u].x * _1076)) * _838) + _1076;
    float _1090 = (((_1019 - _1077) + (cbMtdParam._m0[21u].x * _1077)) * _838) + _1077;
    float _1091 = (_838 * (sqrt(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) - _775)) + _775;
    float _1102 = (((_1060 - _1089) + (_1089 * cbMtdParam._m0[22u].z)) * _888) + _1089;
    float _1103 = (((_1061 - _1090) + (_1090 * cbMtdParam._m0[22u].z)) * _888) + _1090;
    float _1104 = ((sqrt(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) - _1091) * _888) + _1091;
    float _1106 = cbMtdParam._m0[22u].x + _789.w;
    float _1109 = fma(_1104, _273 * NORMAL.x, fma(_1103, _280 * TANGENT.x, (_266 * _258) * _1102));
    float _1112 = fma(_1104, _273 * NORMAL.y, fma(_1103, _280 * TANGENT.y, (_266 * _259) * _1102));
    float _1115 = fma(_1104, _273 * NORMAL.z, fma(_1103, _280 * TANGENT.z, (_266 * _260) * _1102));
    float _1119 = inversesqrt(dot(vec3(_1109, _1112, _1115), vec3(_1109, _1112, _1115)));
    float _1120 = _1119 * _1109;
    float _1121 = _1119 * _1112;
    float _1122 = _1119 * _1115;
    float _4503 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1123 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _4514 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4525 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4536 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4547 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4558 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _1128 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _1142 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1192 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1182);
    float _1193 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1182);
    float _1194 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1182);
    float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
    float _1199 = _1192 * _1198;
    float _1200 = _1193 * _1198;
    float _1201 = _1194 * _1198;
    vec4 _1206 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1208 = _1206.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1380 = sqrt(((_1192 * _1192) + (_1193 * _1193)) + (_1194 * _1194));
        float _1386 = (cbMatDynParam._m0[5u].x * _1380) + cbMatDynParam._m0[5u].y;
        float _4569 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1391 = (cbMatDynParam._m0[5u].z * _1380) + cbMatDynParam._m0[5u].w;
        float _4580 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) - _1387)) + _1387) < ((_1208 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1219 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1220 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1238 = fma(_1122, cbSceneParam._m0[5u].z, fma(_1121, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1120));
    float _1241 = fma(_1122, cbSceneParam._m0[6u].z, fma(_1121, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1120));
    float _1244 = fma(_1122, cbSceneParam._m0[7u].z, fma(_1121, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1120));
    uint _1257 = _305 + 9u;
    uint _1258 = _1257 + uint(cbMatDynParam._m0[0u].w);
    float _1264 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * cbInstanceData._m0[_1258].x;
    float _1265 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * cbInstanceData._m0[_1258].y;
    float _1266 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * cbInstanceData._m0[_1258].z;
    float _4591 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
    float _1267 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _4602 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _1268 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _4613 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _1269 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _1270 = 1.0 - _1128;
    float _1271 = _1267 * _1270;
    float _1272 = _1268 * _1270;
    float _1273 = _1269 * _1270;
    float _1278 = (_1267 + (-0.039999999105930328369140625)) * _1128;
    float _1279 = (_1268 + (-0.039999999105930328369140625)) * _1128;
    float _1280 = (_1269 + (-0.039999999105930328369140625)) * _1128;
    float _1281 = _1278 + 0.039999999105930328369140625;
    float _1283 = _1279 + 0.039999999105930328369140625;
    float _1284 = _1280 + 0.039999999105930328369140625;
    vec4 _1293 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1219, cbSceneParam._m0[86u].y * _1220));
    float _1297 = ((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * TEXCOORD_5.w) * _1293.x;
    float _1298 = dot(vec3(_1120, _1121, _1122), vec3(_1199, _1200, _1201));
    float _1301 = _1298 * 2.0;
    float _1305 = (_1301 * _1120) - _1199;
    float _1306 = (_1301 * _1121) - _1200;
    float _1307 = (_1301 * _1122) - _1201;
    float _1311 = abs(dot(vec3(_1199, _1200, _1201), vec3(_1120, _1121, _1122)));
    float _4624 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _1313 = sqrt(_1123);
    float _1326 = exp2((_1313 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1313 * 3.0));
    float _1332 = (1.0 - _1326) * ((_1313 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1333 = _1326 * _1313;
    float _1361 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1365 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1369 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1698;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1423 = fma(_1369, cbModelParam._m0[26u].z, fma(_1365, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1361));
        float _1427 = fma(_1369, cbModelParam._m0[27u].z, fma(_1365, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1361));
        float _1431 = fma(_1369, cbModelParam._m0[28u].z, fma(_1365, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1361));
        float _1456 = _1361 + _1120;
        float _1457 = _1365 + _1121;
        float _1458 = _1369 + _1122;
        float _1468 = fma(_1458, cbModelParam._m0[26u].z, fma(_1457, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1456)) - _1423;
        float _1469 = fma(_1458, cbModelParam._m0[27u].z, fma(_1457, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1456)) - _1427;
        float _1470 = fma(_1458, cbModelParam._m0[28u].z, fma(_1457, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1456)) - _1431;
        float _1474 = inversesqrt(dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470)));
        float _1487 = ((_1474 * _1468) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1423 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1474 * _1469) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1427 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1474 * _1470) / cbModelParam._m0[34u].z) + ((((((_1431 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        float _1526 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1492.x + (-0.5));
        float _1528 = _1526 * (_1492.y + (-0.5));
        float _1529 = _1526 * (_1492.z + (-0.5));
        float _1536 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1499.x + (-0.5));
        float _1538 = _1536 * (_1499.y + (-0.5));
        float _1539 = _1536 * (_1499.z + (-0.5));
        float _1546 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1506.x + (-0.5));
        float _1548 = _1546 * (_1506.y + (-0.5));
        float _1549 = _1546 * (_1506.z + (-0.5));
        float _1556 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1513.x + (-0.5));
        float _1558 = _1556 * (_1513.y + (-0.5));
        float _1559 = _1556 * (_1513.z + (-0.5));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1527 * 0.5;
        float _1564 = _1537 * 0.5;
        float _1565 = _1547 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1580 = (dot(vec3(_1120, _1121, _1122), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4650 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1590 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4661 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4672 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_1592 + 1.0))) + _1597) * _1560;
        float _1607 = _1528 * 0.5;
        float _1608 = _1538 * 0.5;
        float _1609 = _1548 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_1120, _1121, _1122), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4683 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4694 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4705 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_1634 + 1.0))) + _1639) * _1561;
        float _1649 = _1529 * 0.5;
        float _1650 = _1539 * 0.5;
        float _1651 = _1549 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_1120, _1121, _1122), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4716 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4727 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4738 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0))) * (_1676 + 1.0))) + _1681) * _1562;
        _1698 = _1529;
        _1700 = _1528;
        _1701 = _1527;
        _1702 = _1539;
        _1703 = _1538;
        _1704 = _1537;
        _1705 = _1549;
        _1706 = _1548;
        _1707 = _1547;
        _1708 = _1562;
        _1709 = _1561;
        _1710 = _1560;
        _1711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1712 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1713 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1699;
        _1700 = _1699;
        _1701 = _1699;
        _1702 = _1699;
        _1703 = _1699;
        _1704 = _1699;
        _1705 = _1699;
        _1706 = _1699;
        _1707 = _1699;
        _1708 = _1699;
        _1709 = _1699;
        _1710 = _1699;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    float _2021;
    float _2022;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1739 = fma(_1369, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1361));
        float _1743 = fma(_1369, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1361));
        float _1747 = fma(_1369, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1361));
        float _1770 = _1361 + _1120;
        float _1771 = _1365 + _1121;
        float _1772 = _1369 + _1122;
        float _1782 = fma(_1772, cbModelParam._m0[30u].z, fma(_1771, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1770)) - _1739;
        float _1783 = fma(_1772, cbModelParam._m0[31u].z, fma(_1771, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1770)) - _1743;
        float _1784 = fma(_1772, cbModelParam._m0[32u].z, fma(_1771, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1770)) - _1747;
        float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
        float _1801 = ((_1788 * _1782) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1739 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1802 = ((_1788 * _1783) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1743 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1803 = ((_1788 * _1784) / cbModelParam._m0[35u].z) + ((((((_1747 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1805 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1801, _1802, _1803), 0.0);
        vec4 _1812 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1801, _1802, _1803), 0.0);
        vec4 _1819 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1801, _1802, _1803), 0.0);
        vec4 _1826 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1801, _1802, _1803), 0.0);
        float _1838 = exp2((_1805.w + (-0.5)) * 20.0) * 2.0;
        float _1839 = _1838 * (_1805.x + (-0.5));
        float _1840 = _1838 * (_1805.y + (-0.5));
        float _1841 = _1838 * (_1805.z + (-0.5));
        float _1848 = exp2((_1812.w + (-0.5)) * 20.0) * 2.0;
        float _1849 = _1848 * (_1812.x + (-0.5));
        float _1850 = _1848 * (_1812.y + (-0.5));
        float _1851 = _1848 * (_1812.z + (-0.5));
        float _1858 = exp2((_1819.w + (-0.5)) * 20.0) * 2.0;
        float _1859 = _1858 * (_1819.x + (-0.5));
        float _1860 = _1858 * (_1819.y + (-0.5));
        float _1861 = _1858 * (_1819.z + (-0.5));
        float _1868 = exp2((_1826.w + (-0.5)) * 20.0) * 2.0;
        float _1869 = _1868 * (_1826.x + (-0.5));
        float _1870 = _1868 * (_1826.y + (-0.5));
        float _1871 = _1868 * (_1826.z + (-0.5));
        float _1872 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1873 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1874 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1875 = _1839 * 0.5;
        float _1876 = _1849 * 0.5;
        float _1877 = _1859 * 0.5;
        float _1878 = dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877));
        float _1883 = (_1878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1878);
        float _1891 = (dot(vec3(_1120, _1121, _1122), vec3(_1883 * _1875, _1883 * _1876, _1883 * _1877)) + 1.0) * 0.5;
        float _4779 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1900 = sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877)) / (_1872 + 9.9999997473787516355514526367188e-06);
        float _4790 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _1902 = _1901 * 2.0;
        float _1906 = (1.0 - _1901) / (_1901 + 1.0);
        float _4801 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _1916 = ((((1.0 - _1907) * (_1902 + 2.0)) * exp2(log2(isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_1902 + 1.0))) + _1907) * _1872;
        float _1917 = _1840 * 0.5;
        float _1918 = _1850 * 0.5;
        float _1919 = _1860 * 0.5;
        float _1920 = dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919));
        float _1925 = (_1920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1920);
        float _1933 = (dot(vec3(_1120, _1121, _1122), vec3(_1925 * _1917, _1925 * _1918, _1925 * _1919)) + 1.0) * 0.5;
        float _4812 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1942 = sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919)) / (_1873 + 9.9999997473787516355514526367188e-06);
        float _4823 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _1944 = _1943 * 2.0;
        float _1948 = (1.0 - _1943) / (_1943 + 1.0);
        float _4834 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _1958 = ((((1.0 - _1949) * (_1944 + 2.0)) * exp2(log2(isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_1944 + 1.0))) + _1949) * _1873;
        float _1959 = _1841 * 0.5;
        float _1960 = _1851 * 0.5;
        float _1961 = _1861 * 0.5;
        float _1962 = dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961));
        float _1967 = (_1962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1962);
        float _1975 = (dot(vec3(_1120, _1121, _1122), vec3(_1967 * _1959, _1967 * _1960, _1967 * _1961)) + 1.0) * 0.5;
        float _4845 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1984 = sqrt(((_1960 * _1960) + (_1959 * _1959)) + (_1961 * _1961)) / (_1874 + 9.9999997473787516355514526367188e-06);
        float _4856 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
        float _1986 = _1985 * 2.0;
        float _1990 = (1.0 - _1985) / (_1985 + 1.0);
        float _4867 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2000 = ((((1.0 - _1991) * (_1986 + 2.0)) * exp2(log2(isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_1986 + 1.0))) + _1991) * _1874;
        _2008 = _1841;
        _2009 = _1840;
        _2010 = _1839;
        _2011 = _1851;
        _2012 = _1850;
        _2013 = _1849;
        _2014 = _1861;
        _2015 = _1860;
        _2016 = _1859;
        _2017 = _1874;
        _2018 = _1873;
        _2019 = _1872;
        _2020 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)));
        _2021 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)));
        _2022 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)));
    }
    else
    {
        _2008 = _1699;
        _2009 = _1699;
        _2010 = _1699;
        _2011 = _1699;
        _2012 = _1699;
        _2013 = _1699;
        _2014 = _1699;
        _2015 = _1699;
        _2016 = _1699;
        _2017 = _1699;
        _2018 = _1699;
        _2019 = _1699;
        _2020 = 0.0;
        _2021 = 0.0;
        _2022 = 0.0;
    }
    float _2032 = (cbModelParam._m0[1u].x * (_2020 - _1711)) + _1711;
    float _2033 = (cbModelParam._m0[1u].x * (_2021 - _1712)) + _1712;
    float _2034 = (cbModelParam._m0[1u].x * (_2022 - _1713)) + _1713;
    float _2055 = fma(_2034, cbSceneParam._m0[89u].z, fma(_2033, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2034, cbSceneParam._m0[90u].z, fma(_2033, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2034, cbSceneParam._m0[91u].z, fma(_2033, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2032));
    float _2076 = _1305 * 0.5;
    float _2077 = _1306 * 0.5;
    float _2078 = _1307 * 0.5;
    float _2079 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_2010, _2013, _2016, _2019));
    float _2082 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_2009, _2012, _2015, _2018));
    float _2085 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_2008, _2011, _2014, _2017));
    float _2119;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2092 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_1698, _1702, _1705, _1708));
        float _2096 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_1700, _1703, _1706, _1709));
        float _2100 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_1701, _1704, _1707, _1710));
        float _2107 = dot(vec4(cbModelParam._m0[39u]), vec4(_2076, _2077, _2078, 1.0));
        _2119 = dot(vec3(isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)), isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)), isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2107) ? 0.0 : (isnan(0.0) ? _2107 : max(0.0, _2107))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2119 = 1.0;
    }
    float _2130;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2121 = dot(vec4(cbModelParam._m0[40u]), vec4(_2076, _2077, _2078, 1.0));
        _2130 = dot(vec3(isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0)), isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0)), isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2121) ? 0.0 : (isnan(0.0) ? _2121 : max(0.0, _2121))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2130 = 1.0;
    }
    float _2134 = (_2130 * cbModelParam._m0[1u].x) + (_2119 * (1.0 - cbModelParam._m0[1u].x));
    float _2144 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1123);
    float _2145 = isnan(_2144) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2144 : min(cbModelParam._m0[25u].z, _2144));
    float _2225;
    float _2227;
    float _2229;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2192 = fma(_1369, cbModelParam._m0[13u].z, fma(_1365, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1361)) + cbModelParam._m0[13u].w;
        float _2196 = fma(_1369, cbModelParam._m0[14u].z, fma(_1365, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1361)) + cbModelParam._m0[14u].w;
        float _2200 = fma(_1369, cbModelParam._m0[15u].z, fma(_1365, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1361)) + cbModelParam._m0[15u].w;
        float _2203 = fma(_1307, cbModelParam._m0[13u].z, fma(_1306, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1305));
        float _2206 = fma(_1307, cbModelParam._m0[14u].z, fma(_1306, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1305));
        float _2209 = fma(_1307, cbModelParam._m0[15u].z, fma(_1306, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1305));
        float _2237;
        if (_2203 > 0.0)
        {
            _2237 = abs((1.0 - _2192) / _2203);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2192 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2237 = frontier_phi_17_15_ladder;
        }
        float _2409;
        if (_2206 > 0.0)
        {
            _2409 = abs((1.0 - _2196) / _2206);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2196 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2409 = frontier_phi_26_22_ladder;
        }
        float _2704;
        if (_2209 > 0.0)
        {
            _2704 = abs((1.0 - _2200) / _2209);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2200 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2704 = frontier_phi_38_33_ladder;
        }
        float _2706 = isnan(_2409) ? _2237 : (isnan(_2237) ? _2409 : min(_2237, _2409));
        float _2707 = isnan(_2704) ? _2706 : (isnan(_2706) ? _2704 : min(_2706, _2704));
        float _2711 = (_2707 * _2203) + _2192;
        float _2712 = (_2707 * _2206) + _2196;
        float _2713 = (_2707 * _2209) + _2200;
        float _2714 = _2707 * 9.9999997473787516355514526367188e-05;
        float _2716 = (-1.0) - _2714;
        float _2718 = _2714 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2713 > _2718) || ((_2713 < _2716) || ((_2712 > _2718) || ((_2712 < _2716) || ((_2711 < _2716) || (_2711 > _2718))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2713, cbModelParam._m0[9u].z, fma(_2712, cbModelParam._m0[9u].y, _2711 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2713, cbModelParam._m0[10u].z, fma(_2712, cbModelParam._m0[10u].y, _2711 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2713, cbModelParam._m0[11u].z, fma(_2712, cbModelParam._m0[11u].y, _2711 * cbModelParam._m0[11u].x))), _2145);
            frontier_phi_16_38_ladder = _2858.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2858.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2858.x * cbModelParam._m0[1u].y;
        }
        _2225 = frontier_phi_16_38_ladder_2;
        _2227 = frontier_phi_16_38_ladder_1;
        _2229 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1305, _1306, _1307), _2145);
        _2225 = _2213.x * cbModelParam._m0[1u].y;
        _2227 = _2213.y * cbModelParam._m0[1u].y;
        _2229 = _2213.z * cbModelParam._m0[1u].y;
    }
    float _2233 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1123);
    float _2234 = isnan(_2233) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2233 : min(cbModelParam._m0[25u].w, _2233));
    float _2324;
    float _2326;
    float _2328;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2288 = fma(_1369, cbModelParam._m0[21u].z, fma(_1365, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1361)) + cbModelParam._m0[21u].w;
        float _2292 = fma(_1369, cbModelParam._m0[22u].z, fma(_1365, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1361)) + cbModelParam._m0[22u].w;
        float _2296 = fma(_1369, cbModelParam._m0[23u].z, fma(_1365, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1361)) + cbModelParam._m0[23u].w;
        float _2299 = fma(_1307, cbModelParam._m0[21u].z, fma(_1306, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1305));
        float _2302 = fma(_1307, cbModelParam._m0[22u].z, fma(_1306, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1305));
        float _2305 = fma(_1307, cbModelParam._m0[23u].z, fma(_1306, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1305));
        float _2414;
        if (_2299 > 0.0)
        {
            _2414 = abs((1.0 - _2288) / _2299);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2299 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2288 + 1.0) / _2299);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2414 = frontier_phi_28_24_ladder;
        }
        float _2731;
        if (_2302 > 0.0)
        {
            _2731 = abs((1.0 - _2292) / _2302);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2302 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2292 + 1.0) / _2302);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2731 = frontier_phi_40_35_ladder;
        }
        float _3069;
        if (_2305 > 0.0)
        {
            _3069 = abs((1.0 - _2296) / _2305);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2305 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2296 + 1.0) / _2305);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3069 = frontier_phi_50_47_ladder;
        }
        float _3071 = isnan(_2731) ? _2414 : (isnan(_2414) ? _2731 : min(_2414, _2731));
        float _3072 = isnan(_3069) ? _3071 : (isnan(_3071) ? _3069 : min(_3071, _3069));
        float _3076 = (_3072 * _2299) + _2288;
        float _3077 = (_3072 * _2302) + _2292;
        float _3078 = (_3072 * _2305) + _2296;
        float _3079 = _3072 * 9.9999997473787516355514526367188e-05;
        float _3080 = (-1.0) - _3079;
        float _3082 = _3079 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3078 > _3082) || ((_3078 < _3080) || ((_3077 > _3082) || ((_3077 < _3080) || ((_3076 < _3080) || (_3076 > _3082))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3200 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3078, cbModelParam._m0[17u].z, fma(_3077, cbModelParam._m0[17u].y, _3076 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3078, cbModelParam._m0[18u].z, fma(_3077, cbModelParam._m0[18u].y, _3076 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3078, cbModelParam._m0[19u].z, fma(_3077, cbModelParam._m0[19u].y, _3076 * cbModelParam._m0[19u].x))), _2234);
            frontier_phi_25_50_ladder = _3200.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3200.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3200.x * cbModelParam._m0[1u].z;
        }
        _2324 = frontier_phi_25_50_ladder_2;
        _2326 = frontier_phi_25_50_ladder_1;
        _2328 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2308 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1305, _1306, _1307), _2234);
        _2324 = _2308.x * cbModelParam._m0[1u].z;
        _2326 = _2308.y * cbModelParam._m0[1u].z;
        _2328 = _2308.z * cbModelParam._m0[1u].z;
    }
    float _2341 = (((_1332 * _1281) + _1333) * _1297) * ((cbModelParam._m0[1u].w * (_2324 - _2225)) + _2225);
    float _2343 = (((_1332 * _1283) + _1333) * _1297) * ((cbModelParam._m0[1u].w * (_2326 - _2227)) + _2227);
    float _2345 = (((_1332 * _1284) + _1333) * _1297) * ((cbModelParam._m0[1u].w * (_2328 - _2229)) + _2229);
    float _2348 = fma(_2345, cbSceneParam._m0[89u].z, fma(_2343, cbSceneParam._m0[89u].y, _2341 * cbSceneParam._m0[89u].x));
    float _2351 = fma(_2345, cbSceneParam._m0[90u].z, fma(_2343, cbSceneParam._m0[90u].y, _2341 * cbSceneParam._m0[90u].x));
    float _2354 = fma(_2345, cbSceneParam._m0[91u].z, fma(_2343, cbSceneParam._m0[91u].y, _2341 * cbSceneParam._m0[91u].x));
    float _2388 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2392 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2396 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2400 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2401 = _2388 / _2400;
    float _2402 = _2392 / _2400;
    float _2403 = _2396 / _2400;
    float _2550;
    float _2551;
    float _2552;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2430 = ((uint(_2403 > cbSceneParam._m0[59u].y) + uint(_2403 > cbSceneParam._m0[59u].x)) + uint(_2403 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2431 = _2430 + 43u;
        uint _2439 = _2430 + 44u;
        uint _2447 = _2430 + 45u;
        uint _2455 = _2430 + 46u;
        float _2466 = fma(_2400, cbSceneParam._m0[_2431].w, fma(_2396, cbSceneParam._m0[_2431].z, fma(_2392, cbSceneParam._m0[_2431].y, _2388 * cbSceneParam._m0[_2431].x)));
        float _2470 = fma(_2400, cbSceneParam._m0[_2439].w, fma(_2396, cbSceneParam._m0[_2439].z, fma(_2392, cbSceneParam._m0[_2439].y, _2388 * cbSceneParam._m0[_2439].x)));
        float _2478 = fma(_2400, cbSceneParam._m0[_2455].w, fma(_2396, cbSceneParam._m0[_2455].z, fma(_2392, cbSceneParam._m0[_2455].y, _2388 * cbSceneParam._m0[_2455].x)));
        float _2483 = cbSceneParam._m0[33u].z * _2478;
        float _2485 = cbSceneParam._m0[33u].w * _2478;
        float _2488 = fma(_2400, cbSceneParam._m0[_2447].w, fma(_2396, cbSceneParam._m0[_2447].z, fma(_2392, cbSceneParam._m0[_2447].y, _2388 * cbSceneParam._m0[_2447].x))) / _2478;
        float _2536 = (cbSceneParam._m0[33u].x - sqrt(((_2402 * _2402) + (_2401 * _2401)) + (_2403 * _2403))) * cbSceneParam._m0[33u].y;
        float _4993 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2543 = (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2483 + _2466) / _2478, (_2485 + _2470) / _2478), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2485 + _2466) / _2478, (_2470 - _2483) / _2478), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2466 - _2483) / _2478, (_2470 - _2485) / _2478), _2488), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2466 - _2485) / _2478, (_2483 + _2470) / _2478), _2488), 0.0)).x), vec4(0.25)));
        _2550 = 1.0 - (_2543 * cbSceneParam._m0[34u].x);
        _2551 = 1.0 - (_2543 * cbSceneParam._m0[34u].y);
        _2552 = 1.0 - (_2543 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2550 = 1.0;
        _2551 = 1.0;
        _2552 = 1.0;
    }
    float _2616;
    float _2618;
    float _2620;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2604 = fma(_2400, cbSceneParam._m0[63u].w, fma(_2396, cbSceneParam._m0[63u].z, fma(_2392, cbSceneParam._m0[63u].y, _2388 * cbSceneParam._m0[63u].x)));
        float _2605 = fma(_2400, cbSceneParam._m0[60u].w, fma(_2396, cbSceneParam._m0[60u].z, fma(_2392, cbSceneParam._m0[60u].y, _2388 * cbSceneParam._m0[60u].x))) / _2604;
        float _2606 = fma(_2400, cbSceneParam._m0[61u].w, fma(_2396, cbSceneParam._m0[61u].z, fma(_2392, cbSceneParam._m0[61u].y, _2388 * cbSceneParam._m0[61u].x))) / _2604;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2605 >= cbSceneParam._m0[64u].x) && (_2606 >= cbSceneParam._m0[64u].y)) && (_2605 <= cbSceneParam._m0[64u].z)) && (_2606 <= cbSceneParam._m0[64u].w))
        {
            float _2744 = fma(_2400, cbSceneParam._m0[62u].w, fma(_2396, cbSceneParam._m0[62u].z, fma(_2392, cbSceneParam._m0[62u].y, _2388 * cbSceneParam._m0[62u].x))) / _2604;
            float _2748 = isnan(cbSceneParam._m0[41u].w) ? _2744 : (isnan(_2744) ? cbSceneParam._m0[41u].w : max(_2744, cbSceneParam._m0[41u].w));
            float _2791 = (cbSceneParam._m0[33u].x - sqrt(((_2402 * _2402) + (_2401 * _2401)) + (_2403 * _2403))) * cbSceneParam._m0[33u].y;
            float _5009 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
            float _2798 = (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2605, cbSceneParam._m0[33u].w + _2606), _2748), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2605, _2606 - cbSceneParam._m0[33u].z), _2748), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2605 - cbSceneParam._m0[33u].z, _2606 - cbSceneParam._m0[33u].w), _2748), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2605 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2606), _2748), 0.0)).x), vec4(0.25)));
            float _2802 = 1.0 - (_2798 * cbSceneParam._m0[34u].x);
            float _2803 = 1.0 - (_2798 * cbSceneParam._m0[34u].y);
            float _2804 = 1.0 - (_2798 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2804) ? _2552 : (isnan(_2552) ? _2804 : min(_2552, _2804));
            frontier_phi_37_36_ladder_1 = isnan(_2803) ? _2551 : (isnan(_2551) ? _2803 : min(_2551, _2803));
            frontier_phi_37_36_ladder_2 = isnan(_2802) ? _2550 : (isnan(_2550) ? _2802 : min(_2550, _2802));
        }
        else
        {
            frontier_phi_37_36_ladder = _2552;
            frontier_phi_37_36_ladder_1 = _2551;
            frontier_phi_37_36_ladder_2 = _2550;
        }
        _2616 = frontier_phi_37_36_ladder_2;
        _2618 = frontier_phi_37_36_ladder_1;
        _2620 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2616 = _2550;
        _2618 = _2551;
        _2620 = _2552;
    }
    uvec4 _2625 = floatBitsToUint(cbInstanceData._m0[_305 + 5u]);
    uint _2627 = _2625.x * 14u;
    uint _2628 = _2627 + 13u;
    float _2635 = _1297 + (-1.0);
    float _2640 = (cbLight._m0[_2628].x * _2635) + 1.0;
    float _2641 = (cbLight._m0[_2628].y * _2635) + 1.0;
    float _2642 = (cbLight._m0[_2628].z * _2635) + 1.0;
    float _2643 = (cbLight._m0[_2628].w * _2635) + 1.0;
    uint _2644 = _2627 + 5u;
    float _2650 = isnan(1.0) ? _2641 : (isnan(_2641) ? 1.0 : min(_2641, 1.0));
    uint _2654 = _2627 + 4u;
    float _2663 = isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0));
    uint _2667 = _2627 | 1u;
    float _2678 = dot(vec3(cbLight._m0[_2627].xyz), vec3(_1120, _1121, _1122));
    float _2681 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_1120, _1121, _1122));
    float _5045 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _5056 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2686 = (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * 0.3183098733425140380859375;
    float _2688 = (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * 0.3183098733425140380859375;
    float _2695 = ((cbLight._m0[_2644].x * _2650) * _2688) + (((cbLight._m0[_2654].x * _2616) * _2663) * _2686);
    float _2696 = ((_2650 * cbLight._m0[_2644].y) * _2688) + (((cbLight._m0[_2654].y * _2618) * _2663) * _2686);
    float _2697 = ((_2650 * cbLight._m0[_2644].z) * _2688) + (((cbLight._m0[_2654].z * _2620) * _2663) * _2686);
    uvec4 _2701 = floatBitsToUint(cbLight._m0[_2627 + 12u]);
    bool _2703 = _2701.x == 0u;
    float _2805;
    float _2807;
    float _2809;
    if (_2703)
    {
        _2805 = _2695;
        _2807 = _2696;
        _2809 = _2697;
    }
    else
    {
        uint _2813 = _2627 + 6u;
        float _2829 = (dot(vec3(cbLight._m0[_2627 + 2u].xyz), vec3(_1120, _1121, _1122)) * 0.5) + 0.5;
        float _2830 = _2829 * _2829;
        float _5067 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2831 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
        float _2832 = isnan(1.0) ? _2642 : (isnan(_2642) ? 1.0 : min(_2642, 1.0));
        _2805 = (((cbLight._m0[_2813].x * 0.3183098733425140380859375) * _2831) * _2832) + _2695;
        _2807 = (((cbLight._m0[_2813].y * 0.3183098733425140380859375) * _2831) * _2832) + _2696;
        _2809 = (((cbLight._m0[_2813].z * 0.3183098733425140380859375) * _2831) * _2832) + _2697;
    }
    bool _2812 = _2701.y == 0u;
    float _2867;
    float _2869;
    float _2871;
    if (_2812)
    {
        _2867 = _2805;
        _2869 = _2807;
        _2871 = _2809;
    }
    else
    {
        uint _3040 = _2627 + 7u;
        float _3056 = (dot(vec3(cbLight._m0[_2627 + 3u].xyz), vec3(_1120, _1121, _1122)) * 0.5) + 0.5;
        float _3057 = _3056 * _3056;
        float _5083 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3058 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
        float _3059 = isnan(1.0) ? _2643 : (isnan(_2643) ? 1.0 : min(_2643, 1.0));
        _2867 = (((cbLight._m0[_3040].x * 0.3183098733425140380859375) * _3058) * _3059) + _2805;
        _2869 = (((cbLight._m0[_3040].y * 0.3183098733425140380859375) * _3058) * _3059) + _2807;
        _2871 = (((cbLight._m0[_3040].z * 0.3183098733425140380859375) * _3058) * _3059) + _2809;
    }
    uint _2874 = _2627 + 8u;
    float _2887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2627].w)) * _1123) * 0.949999988079071044921875);
    float _2888 = _2887 * _2887;
    float _2889 = cbLight._m0[_2627].x + _1199;
    float _2890 = cbLight._m0[_2627].y + _1200;
    float _2891 = cbLight._m0[_2627].z + _1201;
    float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
    float _2896 = _2895 * _2889;
    float _2897 = _2895 * _2890;
    float _2898 = _2895 * _2891;
    float _2899 = dot(vec3(_1120, _1121, _1122), vec3(cbLight._m0[_2627].xyz));
    float _5099 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    float _2902 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
    float _5110 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _2903 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
    float _2904 = dot(vec3(_1120, _1121, _1122), vec3(_2896, _2897, _2898));
    float _5121 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
    float _2907 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
    float _2908 = dot(vec3(cbLight._m0[_2627].xyz), vec3(_2896, _2897, _2898));
    float _5132 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
    float _2912 = _2888 * _2888;
    float _2916 = ((_2907 * _2907) * (_2912 + (-1.0))) + 1.0;
    float _2924 = exp2(log2(1.0 - (isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0)))) * 5.0);
    float _2925 = 0.959999978542327880859375 - _1278;
    float _2927 = 0.959999978542327880859375 - _1279;
    float _2928 = 0.959999978542327880859375 - _1280;
    float _2935 = 1.0 - _2888;
    float _2946 = (0.5 / (((_2903 * ((_2902 * _2935) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2903 * _2935) + _2888) * _2902))) * _2902;
    float _5143 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
    float _2948 = (isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0))) * (_2912 / ((_2916 * _2916) * 3.141590118408203125));
    uint _2962 = _2627 + 9u;
    float _2973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _1123) * 0.949999988079071044921875);
    float _2974 = _2973 * _2973;
    float _2975 = cbLight._m0[_2667].x + _1199;
    float _2976 = cbLight._m0[_2667].y + _1200;
    float _2977 = cbLight._m0[_2667].z + _1201;
    float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
    float _2982 = _2981 * _2975;
    float _2983 = _2981 * _2976;
    float _2984 = _2981 * _2977;
    float _2985 = dot(vec3(_1120, _1121, _1122), vec3(cbLight._m0[_2667].xyz));
    float _5154 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
    float _2988 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
    float _2989 = dot(vec3(_1120, _1121, _1122), vec3(_2982, _2983, _2984));
    float _5165 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
    float _2992 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
    float _2993 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2982, _2983, _2984));
    float _5176 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
    float _2997 = _2974 * _2974;
    float _3001 = ((_2992 * _2992) * (_2997 + (-1.0))) + 1.0;
    float _3008 = exp2(log2(1.0 - (isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0)))) * 5.0);
    float _3015 = 1.0 - _2974;
    float _3025 = (0.5 / (((_2903 * ((_2988 * _3015) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_2903 * _3015) + _2974) * _2988))) * _2988;
    float _5187 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
    float _3027 = (isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_2997 / ((_3001 * _3001) * 3.141590118408203125));
    float _3037 = (((((_3008 * _2925) + _1281) * cbLight._m0[_2962].x) * _3027) * _2650) + ((((cbLight._m0[_2874].x * _2616) * ((_2924 * _2925) + _1281)) * _2948) * _2663);
    float _3038 = (((((_3008 * _2927) + _1283) * cbLight._m0[_2962].y) * _3027) * _2650) + ((((cbLight._m0[_2874].y * _2618) * ((_2924 * _2927) + _1283)) * _2948) * _2663);
    float _3039 = (((((_3008 * _2928) + _1284) * cbLight._m0[_2962].z) * _3027) * _2650) + ((((cbLight._m0[_2874].z * _2620) * ((_2924 * _2928) + _1284)) * _2948) * _2663);
    float _3095;
    float _3097;
    float _3099;
    if (_2703)
    {
        _3095 = _3037;
        _3097 = _3038;
        _3099 = _3039;
    }
    else
    {
        uint _3101 = _2627 + 2u;
        uint _3105 = _2627 + 10u;
        float _3119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3101].w)) * _1123) * 0.949999988079071044921875);
        float _3120 = _3119 * _3119;
        float _3121 = cbLight._m0[_3101].x + _1199;
        float _3122 = cbLight._m0[_3101].y + _1200;
        float _3123 = cbLight._m0[_3101].z + _1201;
        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
        float _3128 = _3127 * _3121;
        float _3129 = _3127 * _3122;
        float _3130 = _3127 * _3123;
        float _3131 = dot(vec3(_1120, _1121, _1122), vec3(cbLight._m0[_3101].xyz));
        float _5198 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
        float _3134 = isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0));
        float _3135 = dot(vec3(_1120, _1121, _1122), vec3(_3128, _3129, _3130));
        float _5209 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
        float _3138 = isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0));
        float _3139 = dot(vec3(cbLight._m0[_3101].xyz), vec3(_3128, _3129, _3130));
        float _5220 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
        float _3143 = _3120 * _3120;
        float _3147 = ((_3138 * _3138) * (_3143 + (-1.0))) + 1.0;
        float _3154 = exp2(log2(1.0 - (isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0)))) * 5.0);
        float _3161 = 1.0 - _3120;
        float _3171 = (0.5 / (((_2903 * ((_3134 * _3161) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_2903 * _3161) + _3120) * _3134))) * _3134;
        float _5231 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
        float _3173 = (isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3143 / ((_3147 * _3147) * 3.141590118408203125));
        float _3174 = isnan(1.0) ? _2642 : (isnan(_2642) ? 1.0 : min(_2642, 1.0));
        _3095 = (((((_3154 * _2925) + _1281) * cbLight._m0[_3105].x) * _3173) * _3174) + _3037;
        _3097 = (((((_3154 * _2927) + _1283) * cbLight._m0[_3105].y) * _3173) * _3174) + _3038;
        _3099 = (((((_3154 * _2928) + _1284) * cbLight._m0[_3105].z) * _3173) * _3174) + _3039;
    }
    float _3205;
    float _3207;
    float _3209;
    if (_2812)
    {
        _3205 = _3095;
        _3207 = _3097;
        _3209 = _3099;
    }
    else
    {
        uint _3216 = _2627 + 3u;
        uint _3220 = _2627 + 11u;
        float _3234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3216].w)) * _1123) * 0.949999988079071044921875);
        float _3235 = _3234 * _3234;
        float _3236 = cbLight._m0[_3216].x + _1199;
        float _3237 = cbLight._m0[_3216].y + _1200;
        float _3238 = cbLight._m0[_3216].z + _1201;
        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
        float _3243 = _3242 * _3236;
        float _3244 = _3242 * _3237;
        float _3245 = _3242 * _3238;
        float _3246 = dot(vec3(_1120, _1121, _1122), vec3(cbLight._m0[_3216].xyz));
        float _5247 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
        float _3249 = isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0));
        float _3250 = dot(vec3(_1120, _1121, _1122), vec3(_3243, _3244, _3245));
        float _5258 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
        float _3253 = isnan(1.0) ? _5258 : (isnan(_5258) ? 1.0 : min(_5258, 1.0));
        float _3254 = dot(vec3(cbLight._m0[_3216].xyz), vec3(_3243, _3244, _3245));
        float _5269 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
        float _3258 = _3235 * _3235;
        float _3262 = ((_3253 * _3253) * (_3258 + (-1.0))) + 1.0;
        float _3269 = exp2(log2(1.0 - (isnan(1.0) ? _5269 : (isnan(_5269) ? 1.0 : min(_5269, 1.0)))) * 5.0);
        float _3276 = 1.0 - _3235;
        float _3286 = (0.5 / (((_2903 * ((_3249 * _3276) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_2903 * _3276) + _3235) * _3249))) * _3249;
        float _5280 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
        float _3288 = (isnan(1.0) ? _5280 : (isnan(_5280) ? 1.0 : min(_5280, 1.0))) * (_3258 / ((_3262 * _3262) * 3.141590118408203125));
        float _3289 = isnan(1.0) ? _2643 : (isnan(_2643) ? 1.0 : min(_2643, 1.0));
        _3205 = (((((_3269 * _2925) + _1281) * cbLight._m0[_3220].x) * _3288) * _3289) + _3095;
        _3207 = (((((_3269 * _2927) + _1283) * cbLight._m0[_3220].y) * _3288) * _3289) + _3097;
        _3209 = (((((_3269 * _2928) + _1284) * cbLight._m0[_3220].z) * _3288) * _3289) + _3099;
    }
    float _3355;
    float _3357;
    float _3359;
    float _3361;
    float _3363;
    float _3365;
    if (_2625.y == 0u)
    {
        uvec4 _3310 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3311 = _3310.x;
        uint _3322 = uint((float(_3310.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1220) / _3311))) + floor(float(uint(cbSceneParam._m0[85u].x * _1219) / _3311)));
        float _3332 = (log2(_2403 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3333 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
        uint _3336 = uint(isnan(14.0) ? _3333 : (isnan(_3333) ? 14.0 : min(_3333, 14.0)));
        uvec4 _3341 = texelFetch(g_lightClusterGridBuffer, int(((_3336 << 2u) + (_3322 << 6u)) >> 2u));
        uint _3342 = _3341.x;
        uint _3343 = _3310.z;
        float _3422;
        float _3424;
        float _3426;
        float _3428;
        float _3430;
        float _3432;
        if (((((1u << ((_3343 >> 4u) & 15u)) + 4294967295u) & _3342) == 0u) || ((_3343 & 240u) == 0u))
        {
            _3422 = 0.0;
            _3424 = 0.0;
            _3426 = 0.0;
            _3428 = 0.0;
            _3430 = 0.0;
            _3432 = 0.0;
        }
        else
        {
            float _3423;
            float _3425;
            float _3427;
            float _3429;
            float _3431;
            float _3433;
            float _3575 = 0.0;
            float _3576 = 0.0;
            float _3577 = 0.0;
            float _3578 = 0.0;
            float _3579 = 0.0;
            float _3580 = 0.0;
            uint _3581 = 0u;
            uint _3590;
            bool _3591;
            for (;;)
            {
                _3590 = texelFetch(g_lightClassification, int((((_3336 << 5u) + (_3322 << 9u)) + (_3581 << 2u)) >> 2u)).x;
                _3591 = _3590 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3591)
                {
                    frontier_phi_71_pred = _3580;
                    frontier_phi_71_pred_1 = _3579;
                    frontier_phi_71_pred_2 = _3578;
                    frontier_phi_71_pred_3 = _3577;
                    frontier_phi_71_pred_4 = _3576;
                    frontier_phi_71_pred_5 = _3575;
                }
                else
                {
                    float _3720;
                    float _3721;
                    float _3722;
                    float _3723;
                    float _3724;
                    float _3725;
                    uint _3726;
                    _3720 = _3575;
                    _3721 = _3576;
                    _3722 = _3577;
                    _3723 = _3578;
                    _3724 = _3579;
                    _3725 = _3580;
                    _3726 = _3590;
                    float _3647;
                    float _3648;
                    float _3649;
                    float _3650;
                    float _3651;
                    float _3652;
                    for (;;)
                    {
                        uint _3730 = uint(findLSB(_3726)) + (_3581 << 5u);
                        uint _3727 = (_3726 + 4294967295u) & _3726;
                        uint _3732 = _3730 * 48u;
                        vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3732)).x, texelFetch(g_PointLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3732 + 3u)).x));
                        uint _3752 = (_3730 * 48u) + 4u;
                        vec4 _3765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3752)).x, texelFetch(g_PointLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3752 + 3u)).x));
                        uint _3771 = (_3730 * 48u) + 8u;
                        vec3 _3782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3771)).x, texelFetch(g_PointLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3771 + 2u)).x));
                        float _3786 = _3746.x - _2401;
                        float _3787 = _3746.y - _2402;
                        float _3788 = _3746.z - _2403;
                        float _3789 = dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788));
                        float _3792 = inversesqrt(_3789);
                        float _3793 = _3792 * _3786;
                        float _3794 = _3792 * _3787;
                        float _3795 = _3792 * _3788;
                        float _3796 = dot(vec3(_1238, _1241, _1244), vec3(_3793, _3794, _3795));
                        float _3801 = 1.0 - (_3789 * _3746.w);
                        float _5306 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                        float _3802 = isnan(1.0) ? _5306 : (isnan(_5306) ? 1.0 : min(_5306, 1.0));
                        float _3803 = sqrt(_3789) * _3765.w;
                        float _3806 = 1.39999997615814208984375 / (_3803 + 1.39999997615814208984375);
                        float _3807 = _3806 * _3806;
                        float _3810 = ((1.0 - _3807) * _3796) + _3807;
                        float _3813 = _3803 * _3803;
                        float _3817 = ((isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0))) * _3802) / ((_3813 * 0.699999988079071044921875) + 1.0);
                        float _3821 = (-0.0) - _2401;
                        float _3822 = (-0.0) - _2402;
                        float _3823 = (-0.0) - _2403;
                        float _3827 = inversesqrt(dot(vec3(_3821, _3822, _3823), vec3(_3821, _3822, _3823)));
                        float _3828 = _3827 * _3821;
                        float _3829 = _3827 * _3822;
                        float _3830 = _3827 * _3823;
                        float _3837 = exp2(log2(1.0 / ((_3813 * 3.5) + 5.0)) * 0.25);
                        float _3838 = 1.0 - _1313;
                        float _3845 = sqrt(1.0 - ((1.0 - (_3838 * _3838)) * (1.0 - (_3837 * _3837))));
                        float _3846 = _3845 * _3845;
                        float _3847 = _3846 * _3846;
                        float _3848 = _3828 + _3793;
                        float _3849 = _3829 + _3794;
                        float _3850 = _3830 + _3795;
                        float _3854 = inversesqrt(dot(vec3(_3848, _3849, _3850), vec3(_3848, _3849, _3850)));
                        float _3858 = dot(vec3(_1238, _1241, _1244), vec3(_3828, _3829, _3830));
                        float _5322 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                        float _3861 = isnan(1.0) ? _5322 : (isnan(_5322) ? 1.0 : min(_5322, 1.0));
                        float _3862 = dot(vec3(_1238, _1241, _1244), vec3(_3854 * _3848, _3854 * _3849, _3854 * _3850));
                        float _5333 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                        float _3865 = isnan(1.0) ? _5333 : (isnan(_5333) ? 1.0 : min(_5333, 1.0));
                        float _3869 = ((_3865 * _3865) * (_3847 + (-1.0))) + 1.0;
                        float _3870 = _3806 * _3846;
                        float _3871 = _3870 * _3870;
                        float _3874 = ((1.0 - _3871) * _3796) + _3871;
                        float _5344 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                        float _3875 = isnan(1.0) ? _5344 : (isnan(_5344) ? 1.0 : min(_5344, 1.0));
                        float _3876 = 1.0 - _3846;
                        float _3886 = (0.5 / (((_3875 * ((_3861 * _3876) + _3846)) + 9.9999999392252902907785028219223e-09) + (((_3875 * _3876) + _3846) * _3861))) * _3875;
                        float _5355 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                        float _3897 = (((_3847 * 3.1415927410125732421875) * (isnan(1.0) ? _5355 : (isnan(_5355) ? 1.0 : min(_5355, 1.0)))) / ((_3869 * _3869) * ((_3813 * 2.1991131305694580078125) + 3.141590118408203125))) * _3802;
                        _3650 = (_3817 * _3765.x) + _3723;
                        _3651 = (_3817 * _3765.y) + _3724;
                        _3652 = (_3817 * _3765.z) + _3725;
                        _3647 = (_3897 * _3782.x) + _3720;
                        _3648 = (_3897 * _3782.y) + _3721;
                        _3649 = (_3897 * _3782.z) + _3722;
                        if (_3727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3720 = _3647;
                            _3721 = _3648;
                            _3722 = _3649;
                            _3723 = _3650;
                            _3724 = _3651;
                            _3725 = _3652;
                            _3726 = _3727;
                        }
                    }
                    frontier_phi_71_pred = _3652;
                    frontier_phi_71_pred_1 = _3651;
                    frontier_phi_71_pred_2 = _3650;
                    frontier_phi_71_pred_3 = _3649;
                    frontier_phi_71_pred_4 = _3648;
                    frontier_phi_71_pred_5 = _3647;
                }
                _3433 = frontier_phi_71_pred;
                _3431 = frontier_phi_71_pred_1;
                _3429 = frontier_phi_71_pred_2;
                _3427 = frontier_phi_71_pred_3;
                _3425 = frontier_phi_71_pred_4;
                _3423 = frontier_phi_71_pred_5;
                uint _3582 = _3581 + 1u;
                if (_3582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3575 = _3423;
                    _3576 = _3425;
                    _3577 = _3427;
                    _3578 = _3429;
                    _3579 = _3431;
                    _3580 = _3433;
                    _3581 = _3582;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3422 = _3423;
            _3424 = _3425;
            _3426 = _3427;
            _3428 = _3429;
            _3430 = _3431;
            _3432 = _3433;
        }
        uvec4 _3436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3437 = _3436.z;
        uint _3439 = (_3437 >> 8u) & 15u;
        float _3543;
        float _3545;
        float _3547;
        float _3549;
        float _3551;
        float _3553;
        if (((4294967295u << _3439) & _3342) == 0u)
        {
            _3543 = _3422;
            _3545 = _3424;
            _3547 = _3426;
            _3549 = _3428;
            _3551 = _3430;
            _3553 = _3432;
        }
        else
        {
            float _3568 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
            float _3569 = _3568 * _2401;
            float _3570 = _3568 * _2402;
            float _3571 = _3568 * _2403;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3439 < ((_3437 >> 12u) & 15u))
            {
                float _3544;
                float _3546;
                float _3548;
                float _3550;
                float _3552;
                float _3554;
                float _3703 = _3422;
                float _3704 = _3424;
                float _3705 = _3426;
                float _3706 = _3428;
                float _3707 = _3430;
                float _3708 = _3432;
                uint _3709 = _3439;
                uint _3718;
                bool _3719;
                for (;;)
                {
                    _3718 = texelFetch(g_lightClassification, int((((_3336 << 5u) + (_3322 << 9u)) + (_3709 << 2u)) >> 2u)).x;
                    _3719 = _3718 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3719)
                    {
                        frontier_phi_82_pred = _3708;
                        frontier_phi_82_pred_1 = _3707;
                        frontier_phi_82_pred_2 = _3706;
                        frontier_phi_82_pred_3 = _3705;
                        frontier_phi_82_pred_4 = _3704;
                        frontier_phi_82_pred_5 = _3703;
                    }
                    else
                    {
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _4204;
                        float _4205;
                        float _4206;
                        float _4207;
                        float _4208;
                        float _4209;
                        float _3924 = _3703;
                        float _3925 = _3704;
                        float _3926 = _3705;
                        float _3927 = _3706;
                        float _3928 = _3707;
                        float _3929 = _3708;
                        uint _3930 = _3718;
                        uint _3931;
                        vec4 _3956;
                        float _3957;
                        vec4 _3972;
                        vec3 _3984;
                        vec4 _3999;
                        vec4 _4014;
                        float _4060;
                        bool _4061;
                        for (;;)
                        {
                            uint _3941 = ((_3709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3930));
                            _3931 = (_3930 + 4294967295u) & _3930;
                            uint _3943 = _3941 * 40u;
                            _3956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 3u)).x));
                            _3957 = _3956.w;
                            uint _3959 = (_3941 * 40u) + 4u;
                            _3972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3959 + 3u)).x));
                            uint _3974 = (_3941 * 40u) + 8u;
                            _3984 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3974 + 2u)).x));
                            uint _3986 = (_3941 * 40u) + 16u;
                            _3999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3986 + 3u)).x));
                            uint _4001 = (_3941 * 40u) + 20u;
                            _4014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4001 + 3u)).x));
                            uint _4016 = (_3941 * 40u) + 24u;
                            vec4 _4029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4016 + 3u)).x));
                            uint _4035 = (_3941 * 40u) + 28u;
                            vec4 _4048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4035 + 3u)).x));
                            _4060 = fma(_2403, _4048.z, fma(_2402, _4048.y, _4048.x * _2401)) + _4048.w;
                            _4061 = !((fma(_2403, _4029.z, fma(_2402, _4029.y, _4029.x * _2401)) + _4029.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4061)
                            {
                                float _4088 = _3956.x - _2401;
                                float _4089 = _3956.y - _2402;
                                float _4090 = _3956.z - _2403;
                                float _4091 = dot(vec3(_4088, _4089, _4090), vec3(_4088, _4089, _4090));
                                float _4094 = inversesqrt(_4091);
                                float _4095 = _4094 * _4088;
                                float _4096 = _4094 * _4089;
                                float _4097 = _4094 * _4090;
                                float _4101 = 1.0 - (_4091 / (_3957 * _3957));
                                float _5366 = isnan(0.0) ? _4101 : (isnan(_4101) ? 0.0 : max(_4101, 0.0));
                                float _4102 = isnan(1.0) ? _5366 : (isnan(_5366) ? 1.0 : min(_5366, 1.0));
                                float _4106 = sqrt(_4091) * _3972.w;
                                float _4108 = 1.39999997615814208984375 / (_4106 + 1.39999997615814208984375);
                                float _4109 = _4108 * _4108;
                                float _4112 = ((1.0 - _4109) * dot(vec3(_4095, _4096, _4097), vec3(_1238, _1241, _1244))) + _4109;
                                float _4115 = _4106 * _4106;
                                float _4119 = (fma(_2403, _3999.z, fma(_2402, _3999.y, _3999.x * _2401)) + _3999.w) / _4060;
                                float _4120 = (fma(_2403, _4014.z, fma(_2402, _4014.y, _4014.x * _2401)) + _4014.w) / _4060;
                                float _4124 = 1.0 - dot(vec2(_4119, _4120), vec2(_4119, _4120));
                                float _5382 = isnan(0.0) ? _4124 : (isnan(_4124) ? 0.0 : max(_4124, 0.0));
                                float _4125 = isnan(1.0) ? _5382 : (isnan(_5382) ? 1.0 : min(_5382, 1.0));
                                float _4126 = _4125 * (((isnan(0.0) ? _4112 : (isnan(_4112) ? 0.0 : max(_4112, 0.0))) * _4102) / ((_4115 * 0.699999988079071044921875) + 1.0));
                                float _4138 = exp2(log2(1.0 / ((_4115 * 3.5) + 5.0)) * 0.25);
                                float _4139 = 1.0 - _1313;
                                float _4146 = sqrt(1.0 - ((1.0 - (_4139 * _4139)) * (1.0 - (_4138 * _4138))));
                                float _4147 = _4146 * _4146;
                                float _4148 = _4147 * _4147;
                                float _4149 = _4095 - _3569;
                                float _4150 = _4096 - _3570;
                                float _4151 = _4097 - _3571;
                                float _4155 = inversesqrt(dot(vec3(_4149, _4150, _4151), vec3(_4149, _4150, _4151)));
                                float _4159 = dot(vec3(_1238, _1241, _1244), vec3((-0.0) - _3569, (-0.0) - _3570, (-0.0) - _3571));
                                float _5393 = isnan(0.0) ? _4159 : (isnan(_4159) ? 0.0 : max(_4159, 0.0));
                                float _4162 = isnan(1.0) ? _5393 : (isnan(_5393) ? 1.0 : min(_5393, 1.0));
                                float _4163 = dot(vec3(_1238, _1241, _1244), vec3(_4155 * _4149, _4155 * _4150, _4155 * _4151));
                                float _5404 = isnan(0.0) ? _4163 : (isnan(_4163) ? 0.0 : max(_4163, 0.0));
                                float _4166 = isnan(1.0) ? _5404 : (isnan(_5404) ? 1.0 : min(_5404, 1.0));
                                float _4170 = ((_4166 * _4166) * (_4148 + (-1.0))) + 1.0;
                                float _4171 = _4108 * _4147;
                                float _4172 = _4171 * _4171;
                                float _4178 = ((1.0 - _4172) * dot(vec3(_1238, _1241, _1244), vec3(_4095, _4096, _4097))) + _4172;
                                float _5415 = isnan(0.0) ? _4178 : (isnan(_4178) ? 0.0 : max(_4178, 0.0));
                                float _4179 = isnan(1.0) ? _5415 : (isnan(_5415) ? 1.0 : min(_5415, 1.0));
                                float _4180 = 1.0 - _4147;
                                float _4190 = (0.5 / (((_4179 * ((_4162 * _4180) + _4147)) + 9.9999999392252902907785028219223e-09) + (((_4179 * _4180) + _4147) * _4162))) * _4179;
                                float _5426 = isnan(0.0) ? _4190 : (isnan(_4190) ? 0.0 : max(_4190, 0.0));
                                float _4200 = (_4125 * _4102) * (((_4148 * 3.1415927410125732421875) * (isnan(1.0) ? _5426 : (isnan(_5426) ? 1.0 : min(_5426, 1.0)))) / ((_4170 * _4170) * ((_4115 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4126 * _3972.z;
                                frontier_phi_88_pred_1 = _4126 * _3972.y;
                                frontier_phi_88_pred_2 = _4126 * _3972.x;
                                frontier_phi_88_pred_3 = _4200 * _3984.z;
                                frontier_phi_88_pred_4 = _4200 * _3984.y;
                                frontier_phi_88_pred_5 = _4200 * _3984.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4209 = frontier_phi_88_pred;
                            _4208 = frontier_phi_88_pred_1;
                            _4207 = frontier_phi_88_pred_2;
                            _4206 = frontier_phi_88_pred_3;
                            _4205 = frontier_phi_88_pred_4;
                            _4204 = frontier_phi_88_pred_5;
                            _3914 = _4207 + _3927;
                            _3915 = _4208 + _3928;
                            _3916 = _4209 + _3929;
                            _3911 = _4204 + _3924;
                            _3912 = _4205 + _3925;
                            _3913 = _4206 + _3926;
                            if (_3931 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3924 = _3911;
                                _3925 = _3912;
                                _3926 = _3913;
                                _3927 = _3914;
                                _3928 = _3915;
                                _3929 = _3916;
                                _3930 = _3931;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3916;
                        frontier_phi_82_pred_1 = _3915;
                        frontier_phi_82_pred_2 = _3914;
                        frontier_phi_82_pred_3 = _3913;
                        frontier_phi_82_pred_4 = _3912;
                        frontier_phi_82_pred_5 = _3911;
                    }
                    _3554 = frontier_phi_82_pred;
                    _3552 = frontier_phi_82_pred_1;
                    _3550 = frontier_phi_82_pred_2;
                    _3548 = frontier_phi_82_pred_3;
                    _3546 = frontier_phi_82_pred_4;
                    _3544 = frontier_phi_82_pred_5;
                    uint _3710 = _3709 + 1u;
                    if (_3710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3703 = _3544;
                        _3704 = _3546;
                        _3705 = _3548;
                        _3706 = _3550;
                        _3707 = _3552;
                        _3708 = _3554;
                        _3709 = _3710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3550;
                frontier_phi_63_64_ladder_1 = _3554;
                frontier_phi_63_64_ladder_2 = _3552;
                frontier_phi_63_64_ladder_3 = _3548;
                frontier_phi_63_64_ladder_4 = _3546;
                frontier_phi_63_64_ladder_5 = _3544;
            }
            else
            {
                frontier_phi_63_64_ladder = _3428;
                frontier_phi_63_64_ladder_1 = _3432;
                frontier_phi_63_64_ladder_2 = _3430;
                frontier_phi_63_64_ladder_3 = _3426;
                frontier_phi_63_64_ladder_4 = _3424;
                frontier_phi_63_64_ladder_5 = _3422;
            }
            _3543 = frontier_phi_63_64_ladder_5;
            _3545 = frontier_phi_63_64_ladder_4;
            _3547 = frontier_phi_63_64_ladder_3;
            _3549 = frontier_phi_63_64_ladder;
            _3551 = frontier_phi_63_64_ladder_2;
            _3553 = frontier_phi_63_64_ladder_1;
        }
        float _3558 = isnan(1.0) ? _1297 : (isnan(_1297) ? 1.0 : min(_1297, 1.0));
        _3355 = (_3558 * _3549) + _2867;
        _3357 = (_3558 * _3551) + _2869;
        _3359 = (_3558 * _3553) + _2871;
        _3361 = ((_3543 * _1281) * _3558) + _3205;
        _3363 = ((_3545 * _1283) * _3558) + _3207;
        _3365 = ((_3547 * _1284) * _3558) + _3209;
    }
    else
    {
        _3355 = _2867;
        _3357 = _2869;
        _3359 = _2871;
        _3361 = _3205;
        _3363 = _3207;
        _3365 = _3209;
    }
    float _5442 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
    float _5453 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    float _5464 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _3382 = ((isnan(1.0) ? _5442 : (isnan(_5442) ? 1.0 : min(_5442, 1.0))) * (_3355 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1297))) + ((_3361 + ((isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0))) * _2134)) * cbPerFrame._m0[3u].x);
    float _3383 = ((isnan(1.0) ? _5453 : (isnan(_5453) ? 1.0 : min(_5453, 1.0))) * (_3357 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1297))) + ((_3363 + ((isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0))) * _2134)) * cbPerFrame._m0[3u].x);
    float _3384 = ((isnan(1.0) ? _5464 : (isnan(_5464) ? 1.0 : min(_5464, 1.0))) * (_3359 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1297))) + ((_3365 + ((isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0))) * _2134)) * cbPerFrame._m0[3u].x);
    uint _3385 = _305 + 6u;
    float _3393 = _1219 / cbSceneParam._m0[86u].x;
    float _3394 = _1220 / cbSceneParam._m0[86u].y;
    vec4 _3408 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3393, _3394, (log2((isnan(cbSceneParam._m0[77u].w) ? _1142 : (isnan(_1142) ? cbSceneParam._m0[77u].w : min(_1142, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3410 = _3408.x;
    float _3411 = _3408.y;
    float _3412 = _3408.z;
    float _3413 = _3408.w;
    float _3485;
    float _3487;
    float _3489;
    float _3491;
    if (_1142 > cbSceneParam._m0[78u].w)
    {
        float _3447 = isnan(_1142) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1142 : min(cbSceneParam._m0[80u].w, _1142));
        float _3448 = _3447 / _1142;
        float _3459 = _3448 * _1192;
        float _3460 = _1193 * _3448;
        float _3461 = (-0.0) - _3460;
        float _3463 = _3448 * _1194;
        float _3465 = (cbSceneParam._m0[77u].w * _3461) / _3447;
        float _3466 = _3465 + cbSceneParam._m0[79u].w;
        float _3467 = cbSceneParam._m0[79u].w - _3460;
        float _3473 = sqrt(((_3459 * _3459) + (_3460 * _3460)) + (_3463 * _3463));
        float _3476 = (1.0 - (cbSceneParam._m0[77u].w / _3447)) * _3473;
        float _3481 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3483 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3660;
        if (abs((_3461 - _3465) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3660 = ((((_3466 > 0.0) ? exp2(_3481 * _3466) : (2.0 - exp2(_3483 * _3466))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3476;
        }
        else
        {
            float _3604 = 1.0 / cbSceneParam._m0[80u].x;
            float _3605 = isnan(_3467) ? _3466 : (isnan(_3466) ? _3467 : max(_3466, _3467));
            float _3606 = isnan(_3467) ? _3466 : (isnan(_3466) ? _3467 : min(_3466, _3467));
            float _3615 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : min(_3605, 0.0));
            float _3616 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : min(_3606, 0.0));
            _3660 = ((abs(_3473 / _3461) * cbSceneParam._m0[80u].y) * ((((_3615 - _3616) * 2.0) - ((exp2(_3481 * (isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0)))) - exp2(_3481 * (isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0))))) * _3604)) - ((exp2(_3483 * _3615) - exp2(_3483 * _3616)) * _3604))) + (_3476 * cbSceneParam._m0[80u].z);
        }
        vec4 _3662 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3393, _3394, 1.0), 0.0);
        float _3671 = exp2((_3660 * (-1.44269502162933349609375)) * (1.0 - _3662.w));
        float _3672 = log2(_3671);
        float _3688 = log2(_3413);
        _3485 = (exp2(_3688 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3672 * cbSceneParam._m0[78u].x)) * _3662.x) / cbSceneParam._m0[78u].x)) + _3410;
        _3487 = (exp2(_3688 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3672 * cbSceneParam._m0[78u].y)) * _3662.y) / cbSceneParam._m0[78u].y)) + _3411;
        _3489 = (exp2(_3688 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3672 * cbSceneParam._m0[78u].z)) * _3662.z) / cbSceneParam._m0[78u].z)) + _3412;
        _3491 = _3671 * _3413;
    }
    else
    {
        _3485 = _3410;
        _3487 = _3411;
        _3489 = _3412;
        _3491 = _3413;
    }
    bool _3698;
    vec4 _3501;
    vec4 _3523;
    float _3525;
    float _3529;
    float _3530;
    float _3531;
    float _3532;
    bool _3542;
    for (;;)
    {
        _3501 = cbMatDynParam._m0[0u];
        float _3503 = roundEven(_3501.y);
        bool _3504 = _3503 == 3.0;
        float _3505 = log2(_3491);
        float _3512 = exp2(_3505 * cbSceneParam._m0[78u].x) * _3382;
        float _3513 = exp2(_3505 * cbSceneParam._m0[78u].y) * _3383;
        float _3514 = exp2(_3505 * cbSceneParam._m0[78u].z) * _3384;
        float _3521 = _1208 + (-0.5);
        _3523 = cbMtdParam._m0[1u];
        _3525 = _3523.y * _3521;
        float _3528 = (_3503 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3529 = _3528 * (_3504 ? _3512 : (_3512 + (cbSceneParam._m0[72u].w * _3485)));
        _3530 = _3528 * (_3504 ? _3513 : (_3513 + (cbSceneParam._m0[72u].w * _3487)));
        _3531 = _3528 * (_3504 ? _3514 : (_3514 + (cbSceneParam._m0[72u].w * _3489)));
        _3532 = _3521 * 0.999000012874603271484375;
        _3542 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3542)
        {
            if ((cbInstanceData._m0[_305 + 7u].x + _3532) < 0.5)
            {
                _3698 = true;
                break;
            }
        }
        uint _3639 = _1257 + uint(_3501.w);
        if ((cbInstanceData._m0[_3639].w < 1.0) && ((cbInstanceData._m0[_3639].w + _3532) < 0.5))
        {
            _3698 = true;
            break;
        }
        if ((_3525 + 1.0) < _3523.x)
        {
            _3698 = true;
            break;
        }
        _3698 = false;
        break;
    }
    float _3902;
    if (_3698)
    {
        discard_state = true;
        _3902 = 0.0;
    }
    else
    {
        _3902 = cbInstanceData._m0[_3385].w;
    }
    SV_Target.x = _3529;
    SV_Target.y = _3530;
    SV_Target.z = _3531;
    SV_Target.w = _3902;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3385].w;
    discard_exit();
}


