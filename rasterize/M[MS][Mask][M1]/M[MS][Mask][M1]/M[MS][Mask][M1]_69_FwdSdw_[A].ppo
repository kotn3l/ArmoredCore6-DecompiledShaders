#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1605;
float _4268;
float _4269;
float _4270;
float _4271;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4280 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4291 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4302 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _386 = _381.x * cbMtdParam._m0[11u].x;
    float _387 = _381.y * cbMtdParam._m0[11u].y;
    float _388 = _381.z * cbMtdParam._m0[11u].z;
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _426.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[23u].w) + _472) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4313 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _497 = (_490 * ((_407.x * cbMtdParam._m0[12u].x) - _386)) + _386;
    float _498 = (_490 * ((_407.y * cbMtdParam._m0[12u].y) - _387)) + _387;
    float _499 = (_490 * ((_407.z * cbMtdParam._m0[12u].z) - _388)) + _388;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _426.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[23u].w) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4324 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _573 = (_355.x * cbMtdParam._m0[9u].x) * ((_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497);
    float _574 = (_355.y * cbMtdParam._m0[9u].y) * ((_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498);
    float _575 = (_355.z * cbMtdParam._m0[9u].z) * ((_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499);
    float _579 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _573;
    float _582 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _574;
    float _585 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _575;
    float _593 = (((_573 - _579) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) + _579) * 4.55000019073486328125;
    float _595 = (((_574 - _582) * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) + _582) * 4.55000019073486328125;
    float _597 = (((_575 - _585) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) + _585) * 4.55000019073486328125;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _656 = _654.x;
    float _657 = _654.y;
    float _658 = _654.z;
    float _665 = ((_637.x - _656) * _490) + _656;
    float _666 = ((_637.y - _657) * _490) + _657;
    float _667 = ((_637.z - _658) * _490) + _658;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _692 = ((_679.z - _667) * _563) + _667;
    float _695 = ((((_679.x - _665) * _563) + _665) * 2.0) + (-1.0);
    float _696 = ((((_679.y - _666) * _563) + _666) * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _4335 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _702 = sqrt(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _743 = _741.x;
    float _744 = 1.0 - _743;
    float _753 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _756 = ((isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : min(_753, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _765 = (_756 - ((((((_743 - _744) * cbMtdParam._m0[24u].z) + _744) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _756))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4356 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _773 = (_766 * (cbMtdParam._m0[17u].x - _593)) + _593;
    float _774 = (_766 * (cbMtdParam._m0[17u].y - _595)) + _595;
    float _775 = (_766 * (cbMtdParam._m0[17u].z - _597)) + _597;
    vec4 _787 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _789 = _787.x;
    float _790 = 1.0 - _789;
    float _815 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_789 - _790) * cbMtdParam._m0[24u].w) + _790) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4367 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _816 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _824 = ((((cbMtdParam._m0[10u].x - _773) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _816) + _773;
    float _825 = ((((cbMtdParam._m0[10u].y - _774) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _816) + _774;
    float _826 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _775)) * _816) + _775;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _854 = _852.x;
    float _871 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _854) * _490) + _854;
    float _888 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _871) * _563) + _871;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _888) * cbMtdParam._m0[19u].z) + _888;
    float _894 = _892 - (_892 * _766);
    float _896 = _894 - (_894 * _816);
    float _901 = (((_614.z - _692) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _692;
    float _905 = ((_716.z - _901) * cbMtdParam._m0[19u].w) + _901;
    vec4 _919 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _926 = (_919.x * 2.0) + (-1.0);
    float _927 = (_919.y * 2.0) + (-1.0);
    float _928 = dot(vec2(_926, _927), vec2(_926, _927));
    float _4378 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _936 = (_766 * (_919.z - _905)) + _905;
    float _939 = ((cbMtdParam._m0[23u].x - _936) * _816) + _936;
    vec4 _960 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _966 = (_960.x * 2.0) + (-1.0);
    float _967 = (_960.y * 2.0) + (-1.0);
    float _968 = dot(vec2(_966, _967), vec2(_966, _967));
    float _4389 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _982 = (_695 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_614.x * 2.0) + (-1.0)))) + (((_716.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _983 = (_696 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_614.y * 2.0) + (-1.0)))) + (((_716.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _995 = (((_926 - _982) + (cbMtdParam._m0[21u].x * _982)) * _766) + _982;
    float _996 = (((_927 - _983) + (cbMtdParam._m0[21u].x * _983)) * _766) + _983;
    float _997 = (_766 * (sqrt(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) - _702)) + _702;
    float _1008 = (((_966 - _995) + (_995 * cbMtdParam._m0[22u].z)) * _816) + _995;
    float _1009 = (((_967 - _996) + (_996 * cbMtdParam._m0[22u].z)) * _816) + _996;
    float _1010 = ((sqrt(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) - _997) * _816) + _997;
    float _1012 = cbMtdParam._m0[22u].x + _716.w;
    float _1015 = fma(_1010, _267 * NORMAL.x, fma(_1009, _274 * TANGENT.x, (_260 * _252) * _1008));
    float _1018 = fma(_1010, _267 * NORMAL.y, fma(_1009, _274 * TANGENT.y, (_260 * _253) * _1008));
    float _1021 = fma(_1010, _267 * NORMAL.z, fma(_1009, _274 * TANGENT.z, (_260 * _254) * _1008));
    float _1025 = inversesqrt(dot(vec3(_1015, _1018, _1021), vec3(_1015, _1018, _1021)));
    float _1026 = _1025 * _1015;
    float _1027 = _1025 * _1018;
    float _1028 = _1025 * _1021;
    float _4400 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _1029 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _4422 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4433 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4444 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4455 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _1034 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _1048 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1088 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1098 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1088);
    float _1099 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1088);
    float _1100 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1088);
    float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
    float _1105 = _1098 * _1104;
    float _1106 = _1099 * _1104;
    float _1107 = _1100 * _1104;
    vec4 _1112 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1114 = _1112.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1286 = sqrt(((_1098 * _1098) + (_1099 * _1099)) + (_1100 * _1100));
        float _1292 = (cbMatDynParam._m0[5u].x * _1286) + cbMatDynParam._m0[5u].y;
        float _4466 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1297 = (cbMatDynParam._m0[5u].z * _1286) + cbMatDynParam._m0[5u].w;
        float _4477 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) - _1293)) + _1293) < ((_1114 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1125 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1126 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1144 = fma(_1028, cbSceneParam._m0[5u].z, fma(_1027, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1026));
    float _1147 = fma(_1028, cbSceneParam._m0[6u].z, fma(_1027, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1026));
    float _1150 = fma(_1028, cbSceneParam._m0[7u].z, fma(_1027, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1026));
    uint _1163 = _299 + 9u;
    uint _1164 = _1163 + uint(cbMatDynParam._m0[0u].w);
    float _1170 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * cbInstanceData._m0[_1164].x;
    float _1171 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * cbInstanceData._m0[_1164].y;
    float _1172 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * cbInstanceData._m0[_1164].z;
    float _4488 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _4499 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _4510 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _1176 = 1.0 - _1034;
    float _1177 = _1173 * _1176;
    float _1178 = _1174 * _1176;
    float _1179 = _1175 * _1176;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1034;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1034;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1034;
    float _1187 = _1184 + 0.039999999105930328369140625;
    float _1189 = _1185 + 0.039999999105930328369140625;
    float _1190 = _1186 + 0.039999999105930328369140625;
    vec4 _1199 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1125, cbSceneParam._m0[86u].y * _1126));
    float _1203 = ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * TEXCOORD_5.w) * _1199.x;
    float _1204 = dot(vec3(_1026, _1027, _1028), vec3(_1105, _1106, _1107));
    float _1207 = _1204 * 2.0;
    float _1211 = (_1207 * _1026) - _1105;
    float _1212 = (_1207 * _1027) - _1106;
    float _1213 = (_1207 * _1028) - _1107;
    float _1217 = abs(dot(vec3(_1105, _1106, _1107), vec3(_1026, _1027, _1028)));
    float _4521 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1219 = sqrt(_1029);
    float _1232 = exp2((_1219 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1219 * 3.0));
    float _1238 = (1.0 - _1232) * ((_1219 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1239 = _1232 * _1219;
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1604;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1329 = fma(_1275, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267));
        float _1333 = fma(_1275, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267));
        float _1337 = fma(_1275, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267));
        float _1362 = _1267 + _1026;
        float _1363 = _1271 + _1027;
        float _1364 = _1275 + _1028;
        float _1374 = fma(_1364, cbModelParam._m0[26u].z, fma(_1363, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1362)) - _1329;
        float _1375 = fma(_1364, cbModelParam._m0[27u].z, fma(_1363, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1362)) - _1333;
        float _1376 = fma(_1364, cbModelParam._m0[28u].z, fma(_1363, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1362)) - _1337;
        float _1380 = inversesqrt(dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376)));
        float _1393 = ((_1380 * _1374) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1329 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1380 * _1375) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1333 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1380 * _1376) / cbModelParam._m0[34u].z) + ((((((_1337 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        float _1432 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1398.x + (-0.5));
        float _1434 = _1432 * (_1398.y + (-0.5));
        float _1435 = _1432 * (_1398.z + (-0.5));
        float _1442 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1405.x + (-0.5));
        float _1444 = _1442 * (_1405.y + (-0.5));
        float _1445 = _1442 * (_1405.z + (-0.5));
        float _1452 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1412.x + (-0.5));
        float _1454 = _1452 * (_1412.y + (-0.5));
        float _1455 = _1452 * (_1412.z + (-0.5));
        float _1462 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1419.x + (-0.5));
        float _1464 = _1462 * (_1419.y + (-0.5));
        float _1465 = _1462 * (_1419.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1486 = (dot(vec3(_1026, _1027, _1028), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1496 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4569 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1498 + 1.0))) + _1503) * _1466;
        float _1513 = _1434 * 0.5;
        float _1514 = _1444 * 0.5;
        float _1515 = _1454 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_1026, _1027, _1028), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4580 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4591 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4602 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_1540 + 1.0))) + _1545) * _1467;
        float _1555 = _1435 * 0.5;
        float _1556 = _1445 * 0.5;
        float _1557 = _1455 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_1026, _1027, _1028), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4613 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4624 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4635 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_1582 + 1.0))) + _1587) * _1468;
        _1604 = _1435;
        _1606 = _1434;
        _1607 = _1433;
        _1608 = _1445;
        _1609 = _1444;
        _1610 = _1443;
        _1611 = _1455;
        _1612 = _1454;
        _1613 = _1453;
        _1614 = _1468;
        _1615 = _1467;
        _1616 = _1466;
        _1617 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1605;
        _1606 = _1605;
        _1607 = _1605;
        _1608 = _1605;
        _1609 = _1605;
        _1610 = _1605;
        _1611 = _1605;
        _1612 = _1605;
        _1613 = _1605;
        _1614 = _1605;
        _1615 = _1605;
        _1616 = _1605;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1646 = fma(_1275, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267));
        float _1650 = fma(_1275, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267));
        float _1654 = fma(_1275, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267));
        float _1677 = _1267 + _1026;
        float _1678 = _1271 + _1027;
        float _1679 = _1275 + _1028;
        float _1689 = fma(_1679, cbModelParam._m0[30u].z, fma(_1678, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1677)) - _1646;
        float _1690 = fma(_1679, cbModelParam._m0[31u].z, fma(_1678, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1677)) - _1650;
        float _1691 = fma(_1679, cbModelParam._m0[32u].z, fma(_1678, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1677)) - _1654;
        float _1695 = inversesqrt(dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691)));
        float _1708 = ((_1695 * _1689) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1646 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1709 = ((_1695 * _1690) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1650 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1710 = ((_1695 * _1691) / cbModelParam._m0[35u].z) + ((((((_1654 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1712 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1708, _1709, _1710), 0.0);
        float _1745 = exp2((_1712.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1712.x + (-0.5));
        float _1747 = _1745 * (_1712.y + (-0.5));
        float _1748 = _1745 * (_1712.z + (-0.5));
        float _1755 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = _1755 * (_1719.x + (-0.5));
        float _1757 = _1755 * (_1719.y + (-0.5));
        float _1758 = _1755 * (_1719.z + (-0.5));
        float _1765 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = _1765 * (_1726.x + (-0.5));
        float _1767 = _1765 * (_1726.y + (-0.5));
        float _1768 = _1765 * (_1726.z + (-0.5));
        float _1775 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1776 = _1775 * (_1733.x + (-0.5));
        float _1777 = _1775 * (_1733.y + (-0.5));
        float _1778 = _1775 * (_1733.z + (-0.5));
        float _1779 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1782 = _1746 * 0.5;
        float _1783 = _1756 * 0.5;
        float _1784 = _1766 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_1026, _1027, _1028), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4676 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1779 + 9.9999997473787516355514526367188e-06);
        float _4687 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4698 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_1809 + 1.0))) + _1814) * _1779;
        float _1824 = _1747 * 0.5;
        float _1825 = _1757 * 0.5;
        float _1826 = _1767 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_1026, _1027, _1028), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4709 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4720 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4731 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_1851 + 1.0))) + _1856) * _1780;
        float _1866 = _1748 * 0.5;
        float _1867 = _1758 * 0.5;
        float _1868 = _1768 * 0.5;
        float _1869 = dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868));
        float _1874 = (_1869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1869);
        float _1882 = (dot(vec3(_1026, _1027, _1028), vec3(_1874 * _1866, _1874 * _1867, _1874 * _1868)) + 1.0) * 0.5;
        float _4742 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1891 = sqrt(((_1867 * _1867) + (_1866 * _1866)) + (_1868 * _1868)) / (_1781 + 9.9999997473787516355514526367188e-06);
        float _4753 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _1893 = _1892 * 2.0;
        float _1897 = (1.0 - _1892) / (_1892 + 1.0);
        float _4764 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _1907 = ((((1.0 - _1898) * (_1893 + 2.0)) * exp2(log2(isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_1893 + 1.0))) + _1898) * _1781;
        _1915 = _1748;
        _1916 = _1747;
        _1917 = _1746;
        _1918 = _1758;
        _1919 = _1757;
        _1920 = _1756;
        _1921 = _1768;
        _1922 = _1767;
        _1923 = _1766;
        _1924 = _1781;
        _1925 = _1780;
        _1926 = _1779;
        _1927 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
        _1929 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)));
    }
    else
    {
        _1915 = _1605;
        _1916 = _1605;
        _1917 = _1605;
        _1918 = _1605;
        _1919 = _1605;
        _1920 = _1605;
        _1921 = _1605;
        _1922 = _1605;
        _1923 = _1605;
        _1924 = _1605;
        _1925 = _1605;
        _1926 = _1605;
        _1927 = 0.0;
        _1928 = 0.0;
        _1929 = 0.0;
    }
    float _1939 = (cbModelParam._m0[1u].x * (_1927 - _1617)) + _1617;
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1618)) + _1618;
    float _1941 = (cbModelParam._m0[1u].x * (_1929 - _1619)) + _1619;
    float _1962 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1965 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1968 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1939));
    float _1983 = _1211 * 0.5;
    float _1984 = _1212 * 0.5;
    float _1985 = _1213 * 0.5;
    float _1986 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1917, _1920, _1923, _1926));
    float _1989 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _1992 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1915, _1918, _1921, _1924));
    float _2026;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1999 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1604, _1608, _1611, _1614));
        float _2003 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1606, _1609, _1612, _1615));
        float _2007 = dot(vec4(_1983, _1984, _1985, 1.0), vec4(_1607, _1610, _1613, _1616));
        float _2014 = dot(vec4(cbModelParam._m0[39u]), vec4(_1983, _1984, _1985, 1.0));
        _2026 = dot(vec3(isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2014) ? 0.0 : (isnan(0.0) ? _2014 : max(0.0, _2014))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2026 = 1.0;
    }
    float _2037;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2028 = dot(vec4(cbModelParam._m0[40u]), vec4(_1983, _1984, _1985, 1.0));
        _2037 = dot(vec3(isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0)), isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2028) ? 0.0 : (isnan(0.0) ? _2028 : max(0.0, _2028))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2037 = 1.0;
    }
    float _2041 = (_2037 * cbModelParam._m0[1u].x) + (_2026 * (1.0 - cbModelParam._m0[1u].x));
    float _2051 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1029);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2051 : min(cbModelParam._m0[25u].z, _2051));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2100 = fma(_1275, cbModelParam._m0[13u].z, fma(_1271, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267)) + cbModelParam._m0[13u].w;
        float _2104 = fma(_1275, cbModelParam._m0[14u].z, fma(_1271, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267)) + cbModelParam._m0[14u].w;
        float _2108 = fma(_1275, cbModelParam._m0[15u].z, fma(_1271, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267)) + cbModelParam._m0[15u].w;
        float _2111 = fma(_1213, cbModelParam._m0[13u].z, fma(_1212, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1211));
        float _2114 = fma(_1213, cbModelParam._m0[14u].z, fma(_1212, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1211));
        float _2117 = fma(_1213, cbModelParam._m0[15u].z, fma(_1212, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1211));
        float _2145;
        if (_2111 > 0.0)
        {
            _2145 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2145 = frontier_phi_17_15_ladder;
        }
        float _2317;
        if (_2114 > 0.0)
        {
            _2317 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2317 = frontier_phi_26_22_ladder;
        }
        float _2612;
        if (_2117 > 0.0)
        {
            _2612 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2612 = frontier_phi_38_33_ladder;
        }
        float _2614 = isnan(_2317) ? _2145 : (isnan(_2145) ? _2317 : min(_2145, _2317));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _2111) + _2100;
        float _2620 = (_2615 * _2114) + _2104;
        float _2621 = (_2615 * _2117) + _2108;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2622;
        float _2626 = _2622 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 > _2626) || ((_2620 < _2624) || ((_2619 < _2624) || (_2619 > _2626))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2621, cbModelParam._m0[9u].z, fma(_2620, cbModelParam._m0[9u].y, _2619 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2621, cbModelParam._m0[10u].z, fma(_2620, cbModelParam._m0[10u].y, _2619 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2621, cbModelParam._m0[11u].z, fma(_2620, cbModelParam._m0[11u].y, _2619 * cbModelParam._m0[11u].x))), _2052);
            frontier_phi_16_38_ladder = _2766.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2766.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2766.x * cbModelParam._m0[1u].y;
        }
        _2133 = frontier_phi_16_38_ladder_2;
        _2135 = frontier_phi_16_38_ladder_1;
        _2137 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1211, _1212, _1213), _2052);
        _2133 = _2121.x * cbModelParam._m0[1u].y;
        _2135 = _2121.y * cbModelParam._m0[1u].y;
        _2137 = _2121.z * cbModelParam._m0[1u].y;
    }
    float _2141 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1029);
    float _2142 = isnan(_2141) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2141 : min(cbModelParam._m0[25u].w, _2141));
    float _2232;
    float _2234;
    float _2236;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2196 = fma(_1275, cbModelParam._m0[21u].z, fma(_1271, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267)) + cbModelParam._m0[21u].w;
        float _2200 = fma(_1275, cbModelParam._m0[22u].z, fma(_1271, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267)) + cbModelParam._m0[22u].w;
        float _2204 = fma(_1275, cbModelParam._m0[23u].z, fma(_1271, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267)) + cbModelParam._m0[23u].w;
        float _2207 = fma(_1213, cbModelParam._m0[21u].z, fma(_1212, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1211));
        float _2210 = fma(_1213, cbModelParam._m0[22u].z, fma(_1212, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1211));
        float _2213 = fma(_1213, cbModelParam._m0[23u].z, fma(_1212, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1211));
        float _2322;
        if (_2207 > 0.0)
        {
            _2322 = abs((1.0 - _2196) / _2207);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2196 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2322 = frontier_phi_28_24_ladder;
        }
        float _2639;
        if (_2210 > 0.0)
        {
            _2639 = abs((1.0 - _2200) / _2210);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2200 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2639 = frontier_phi_40_35_ladder;
        }
        float _2977;
        if (_2213 > 0.0)
        {
            _2977 = abs((1.0 - _2204) / _2213);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2204 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2977 = frontier_phi_50_47_ladder;
        }
        float _2979 = isnan(_2639) ? _2322 : (isnan(_2322) ? _2639 : min(_2322, _2639));
        float _2980 = isnan(_2977) ? _2979 : (isnan(_2979) ? _2977 : min(_2979, _2977));
        float _2984 = (_2980 * _2207) + _2196;
        float _2985 = (_2980 * _2210) + _2200;
        float _2986 = (_2980 * _2213) + _2204;
        float _2987 = _2980 * 9.9999997473787516355514526367188e-05;
        float _2988 = (-1.0) - _2987;
        float _2990 = _2987 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2986 > _2990) || ((_2986 < _2988) || ((_2985 > _2990) || ((_2985 < _2988) || ((_2984 < _2988) || (_2984 > _2990))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2986, cbModelParam._m0[17u].z, fma(_2985, cbModelParam._m0[17u].y, _2984 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2986, cbModelParam._m0[18u].z, fma(_2985, cbModelParam._m0[18u].y, _2984 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2986, cbModelParam._m0[19u].z, fma(_2985, cbModelParam._m0[19u].y, _2984 * cbModelParam._m0[19u].x))), _2142);
            frontier_phi_25_50_ladder = _3108.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3108.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3108.x * cbModelParam._m0[1u].z;
        }
        _2232 = frontier_phi_25_50_ladder_2;
        _2234 = frontier_phi_25_50_ladder_1;
        _2236 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2216 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1211, _1212, _1213), _2142);
        _2232 = _2216.x * cbModelParam._m0[1u].z;
        _2234 = _2216.y * cbModelParam._m0[1u].z;
        _2236 = _2216.z * cbModelParam._m0[1u].z;
    }
    float _2249 = (((_1238 * _1187) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2232 - _2133)) + _2133);
    float _2251 = (((_1238 * _1189) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2234 - _2135)) + _2135);
    float _2253 = (((_1238 * _1190) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2236 - _2137)) + _2137);
    float _2256 = fma(_2253, cbSceneParam._m0[89u].z, fma(_2251, cbSceneParam._m0[89u].y, _2249 * cbSceneParam._m0[89u].x));
    float _2259 = fma(_2253, cbSceneParam._m0[90u].z, fma(_2251, cbSceneParam._m0[90u].y, _2249 * cbSceneParam._m0[90u].x));
    float _2262 = fma(_2253, cbSceneParam._m0[91u].z, fma(_2251, cbSceneParam._m0[91u].y, _2249 * cbSceneParam._m0[91u].x));
    float _2296 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2300 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2304 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2308 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2309 = _2296 / _2308;
    float _2310 = _2300 / _2308;
    float _2311 = _2304 / _2308;
    float _2458;
    float _2459;
    float _2460;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2338 = ((uint(_2311 > cbSceneParam._m0[59u].y) + uint(_2311 > cbSceneParam._m0[59u].x)) + uint(_2311 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2339 = _2338 + 43u;
        uint _2347 = _2338 + 44u;
        uint _2355 = _2338 + 45u;
        uint _2363 = _2338 + 46u;
        float _2374 = fma(_2308, cbSceneParam._m0[_2339].w, fma(_2304, cbSceneParam._m0[_2339].z, fma(_2300, cbSceneParam._m0[_2339].y, _2296 * cbSceneParam._m0[_2339].x)));
        float _2378 = fma(_2308, cbSceneParam._m0[_2347].w, fma(_2304, cbSceneParam._m0[_2347].z, fma(_2300, cbSceneParam._m0[_2347].y, _2296 * cbSceneParam._m0[_2347].x)));
        float _2386 = fma(_2308, cbSceneParam._m0[_2363].w, fma(_2304, cbSceneParam._m0[_2363].z, fma(_2300, cbSceneParam._m0[_2363].y, _2296 * cbSceneParam._m0[_2363].x)));
        float _2391 = cbSceneParam._m0[33u].z * _2386;
        float _2393 = cbSceneParam._m0[33u].w * _2386;
        float _2396 = fma(_2308, cbSceneParam._m0[_2355].w, fma(_2304, cbSceneParam._m0[_2355].z, fma(_2300, cbSceneParam._m0[_2355].y, _2296 * cbSceneParam._m0[_2355].x))) / _2386;
        float _2444 = (cbSceneParam._m0[33u].x - sqrt(((_2310 * _2310) + (_2309 * _2309)) + (_2311 * _2311))) * cbSceneParam._m0[33u].y;
        float _4890 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2451 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2391 + _2374) / _2386, (_2393 + _2378) / _2386), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2393 + _2374) / _2386, (_2378 - _2391) / _2386), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2374 - _2391) / _2386, (_2378 - _2393) / _2386), _2396), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2374 - _2393) / _2386, (_2391 + _2378) / _2386), _2396), 0.0)).x), vec4(0.25)));
        _2458 = 1.0 - (_2451 * cbSceneParam._m0[34u].x);
        _2459 = 1.0 - (_2451 * cbSceneParam._m0[34u].y);
        _2460 = 1.0 - (_2451 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2458 = 1.0;
        _2459 = 1.0;
        _2460 = 1.0;
    }
    float _2524;
    float _2526;
    float _2528;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2512 = fma(_2308, cbSceneParam._m0[63u].w, fma(_2304, cbSceneParam._m0[63u].z, fma(_2300, cbSceneParam._m0[63u].y, _2296 * cbSceneParam._m0[63u].x)));
        float _2513 = fma(_2308, cbSceneParam._m0[60u].w, fma(_2304, cbSceneParam._m0[60u].z, fma(_2300, cbSceneParam._m0[60u].y, _2296 * cbSceneParam._m0[60u].x))) / _2512;
        float _2514 = fma(_2308, cbSceneParam._m0[61u].w, fma(_2304, cbSceneParam._m0[61u].z, fma(_2300, cbSceneParam._m0[61u].y, _2296 * cbSceneParam._m0[61u].x))) / _2512;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2513 >= cbSceneParam._m0[64u].x) && (_2514 >= cbSceneParam._m0[64u].y)) && (_2513 <= cbSceneParam._m0[64u].z)) && (_2514 <= cbSceneParam._m0[64u].w))
        {
            float _2652 = fma(_2308, cbSceneParam._m0[62u].w, fma(_2304, cbSceneParam._m0[62u].z, fma(_2300, cbSceneParam._m0[62u].y, _2296 * cbSceneParam._m0[62u].x))) / _2512;
            float _2656 = isnan(cbSceneParam._m0[41u].w) ? _2652 : (isnan(_2652) ? cbSceneParam._m0[41u].w : max(_2652, cbSceneParam._m0[41u].w));
            float _2699 = (cbSceneParam._m0[33u].x - sqrt(((_2310 * _2310) + (_2309 * _2309)) + (_2311 * _2311))) * cbSceneParam._m0[33u].y;
            float _4906 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
            float _2706 = (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2513, cbSceneParam._m0[33u].w + _2514), _2656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2513, _2514 - cbSceneParam._m0[33u].z), _2656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2513 - cbSceneParam._m0[33u].z, _2514 - cbSceneParam._m0[33u].w), _2656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2513 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2514), _2656), 0.0)).x), vec4(0.25)));
            float _2710 = 1.0 - (_2706 * cbSceneParam._m0[34u].x);
            float _2711 = 1.0 - (_2706 * cbSceneParam._m0[34u].y);
            float _2712 = 1.0 - (_2706 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2712) ? _2460 : (isnan(_2460) ? _2712 : min(_2460, _2712));
            frontier_phi_37_36_ladder_1 = isnan(_2711) ? _2459 : (isnan(_2459) ? _2711 : min(_2459, _2711));
            frontier_phi_37_36_ladder_2 = isnan(_2710) ? _2458 : (isnan(_2458) ? _2710 : min(_2458, _2710));
        }
        else
        {
            frontier_phi_37_36_ladder = _2460;
            frontier_phi_37_36_ladder_1 = _2459;
            frontier_phi_37_36_ladder_2 = _2458;
        }
        _2524 = frontier_phi_37_36_ladder_2;
        _2526 = frontier_phi_37_36_ladder_1;
        _2528 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2524 = _2458;
        _2526 = _2459;
        _2528 = _2460;
    }
    uvec4 _2533 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2535 = _2533.x * 14u;
    uint _2536 = _2535 + 13u;
    float _2543 = _1203 + (-1.0);
    float _2548 = (cbLight._m0[_2536].x * _2543) + 1.0;
    float _2549 = (cbLight._m0[_2536].y * _2543) + 1.0;
    float _2550 = (cbLight._m0[_2536].z * _2543) + 1.0;
    float _2551 = (cbLight._m0[_2536].w * _2543) + 1.0;
    uint _2552 = _2535 + 5u;
    float _2558 = isnan(1.0) ? _2549 : (isnan(_2549) ? 1.0 : min(_2549, 1.0));
    uint _2562 = _2535 + 4u;
    float _2571 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
    uint _2575 = _2535 | 1u;
    float _2586 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_1026, _1027, _1028));
    float _2589 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_1026, _1027, _1028));
    float _4942 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _4953 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2594 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * 0.3183098733425140380859375;
    float _2596 = (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * 0.3183098733425140380859375;
    float _2603 = ((cbLight._m0[_2552].x * _2558) * _2596) + (((cbLight._m0[_2562].x * _2524) * _2571) * _2594);
    float _2604 = ((_2558 * cbLight._m0[_2552].y) * _2596) + (((cbLight._m0[_2562].y * _2526) * _2571) * _2594);
    float _2605 = ((_2558 * cbLight._m0[_2552].z) * _2596) + (((cbLight._m0[_2562].z * _2528) * _2571) * _2594);
    uvec4 _2609 = floatBitsToUint(cbLight._m0[_2535 + 12u]);
    bool _2611 = _2609.x == 0u;
    float _2713;
    float _2715;
    float _2717;
    if (_2611)
    {
        _2713 = _2603;
        _2715 = _2604;
        _2717 = _2605;
    }
    else
    {
        uint _2721 = _2535 + 6u;
        float _2737 = (dot(vec3(cbLight._m0[_2535 + 2u].xyz), vec3(_1026, _1027, _1028)) * 0.5) + 0.5;
        float _2738 = _2737 * _2737;
        float _4964 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2739 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2740 = isnan(1.0) ? _2550 : (isnan(_2550) ? 1.0 : min(_2550, 1.0));
        _2713 = (((cbLight._m0[_2721].x * 0.3183098733425140380859375) * _2739) * _2740) + _2603;
        _2715 = (((cbLight._m0[_2721].y * 0.3183098733425140380859375) * _2739) * _2740) + _2604;
        _2717 = (((cbLight._m0[_2721].z * 0.3183098733425140380859375) * _2739) * _2740) + _2605;
    }
    bool _2720 = _2609.y == 0u;
    float _2775;
    float _2777;
    float _2779;
    if (_2720)
    {
        _2775 = _2713;
        _2777 = _2715;
        _2779 = _2717;
    }
    else
    {
        uint _2948 = _2535 + 7u;
        float _2964 = (dot(vec3(cbLight._m0[_2535 + 3u].xyz), vec3(_1026, _1027, _1028)) * 0.5) + 0.5;
        float _2965 = _2964 * _2964;
        float _4980 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2966 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
        float _2967 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _2775 = (((cbLight._m0[_2948].x * 0.3183098733425140380859375) * _2966) * _2967) + _2713;
        _2777 = (((cbLight._m0[_2948].y * 0.3183098733425140380859375) * _2966) * _2967) + _2715;
        _2779 = (((cbLight._m0[_2948].z * 0.3183098733425140380859375) * _2966) * _2967) + _2717;
    }
    uint _2782 = _2535 + 8u;
    float _2795 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _1029) * 0.949999988079071044921875);
    float _2796 = _2795 * _2795;
    float _2797 = cbLight._m0[_2535].x + _1105;
    float _2798 = cbLight._m0[_2535].y + _1106;
    float _2799 = cbLight._m0[_2535].z + _1107;
    float _2803 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
    float _2804 = _2803 * _2797;
    float _2805 = _2803 * _2798;
    float _2806 = _2803 * _2799;
    float _2807 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2535].xyz));
    float _4996 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2810 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
    float _5007 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _2811 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
    float _2812 = dot(vec3(_1026, _1027, _1028), vec3(_2804, _2805, _2806));
    float _5018 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
    float _2815 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
    float _2816 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2804, _2805, _2806));
    float _5029 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
    float _2820 = _2796 * _2796;
    float _2824 = ((_2815 * _2815) * (_2820 + (-1.0))) + 1.0;
    float _2832 = exp2(log2(1.0 - (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) * 5.0);
    float _2833 = 0.959999978542327880859375 - _1184;
    float _2835 = 0.959999978542327880859375 - _1185;
    float _2836 = 0.959999978542327880859375 - _1186;
    float _2843 = 1.0 - _2796;
    float _2854 = (0.5 / (((_2811 * ((_2810 * _2843) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2811 * _2843) + _2796) * _2810))) * _2810;
    float _5040 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2856 = (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2820 / ((_2824 * _2824) * 3.141590118408203125));
    uint _2870 = _2535 + 9u;
    float _2881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2575].w)) * _1029) * 0.949999988079071044921875);
    float _2882 = _2881 * _2881;
    float _2883 = cbLight._m0[_2575].x + _1105;
    float _2884 = cbLight._m0[_2575].y + _1106;
    float _2885 = cbLight._m0[_2575].z + _1107;
    float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
    float _2890 = _2889 * _2883;
    float _2891 = _2889 * _2884;
    float _2892 = _2889 * _2885;
    float _2893 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_2575].xyz));
    float _5051 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
    float _2896 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
    float _2897 = dot(vec3(_1026, _1027, _1028), vec3(_2890, _2891, _2892));
    float _5062 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
    float _2900 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
    float _2901 = dot(vec3(cbLight._m0[_2575].xyz), vec3(_2890, _2891, _2892));
    float _5073 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
    float _2905 = _2882 * _2882;
    float _2909 = ((_2900 * _2900) * (_2905 + (-1.0))) + 1.0;
    float _2916 = exp2(log2(1.0 - (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0)))) * 5.0);
    float _2923 = 1.0 - _2882;
    float _2933 = (0.5 / (((_2811 * ((_2896 * _2923) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2811 * _2923) + _2882) * _2896))) * _2896;
    float _5084 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
    float _2935 = (isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_2905 / ((_2909 * _2909) * 3.141590118408203125));
    float _2945 = (((((_2916 * _2833) + _1187) * cbLight._m0[_2870].x) * _2935) * _2558) + ((((cbLight._m0[_2782].x * _2524) * ((_2832 * _2833) + _1187)) * _2856) * _2571);
    float _2946 = (((((_2916 * _2835) + _1189) * cbLight._m0[_2870].y) * _2935) * _2558) + ((((cbLight._m0[_2782].y * _2526) * ((_2832 * _2835) + _1189)) * _2856) * _2571);
    float _2947 = (((((_2916 * _2836) + _1190) * cbLight._m0[_2870].z) * _2935) * _2558) + ((((cbLight._m0[_2782].z * _2528) * ((_2832 * _2836) + _1190)) * _2856) * _2571);
    float _3003;
    float _3005;
    float _3007;
    if (_2611)
    {
        _3003 = _2945;
        _3005 = _2946;
        _3007 = _2947;
    }
    else
    {
        uint _3009 = _2535 + 2u;
        uint _3013 = _2535 + 10u;
        float _3027 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3009].w)) * _1029) * 0.949999988079071044921875);
        float _3028 = _3027 * _3027;
        float _3029 = cbLight._m0[_3009].x + _1105;
        float _3030 = cbLight._m0[_3009].y + _1106;
        float _3031 = cbLight._m0[_3009].z + _1107;
        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
        float _3036 = _3035 * _3029;
        float _3037 = _3035 * _3030;
        float _3038 = _3035 * _3031;
        float _3039 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_3009].xyz));
        float _5095 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3042 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
        float _3043 = dot(vec3(_1026, _1027, _1028), vec3(_3036, _3037, _3038));
        float _5106 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
        float _3046 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
        float _3047 = dot(vec3(cbLight._m0[_3009].xyz), vec3(_3036, _3037, _3038));
        float _5117 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
        float _3051 = _3028 * _3028;
        float _3055 = ((_3046 * _3046) * (_3051 + (-1.0))) + 1.0;
        float _3062 = exp2(log2(1.0 - (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0)))) * 5.0);
        float _3069 = 1.0 - _3028;
        float _3079 = (0.5 / (((_2811 * ((_3042 * _3069) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_2811 * _3069) + _3028) * _3042))) * _3042;
        float _5128 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        float _3081 = (isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3051 / ((_3055 * _3055) * 3.141590118408203125));
        float _3082 = isnan(1.0) ? _2550 : (isnan(_2550) ? 1.0 : min(_2550, 1.0));
        _3003 = (((((_3062 * _2833) + _1187) * cbLight._m0[_3013].x) * _3081) * _3082) + _2945;
        _3005 = (((((_3062 * _2835) + _1189) * cbLight._m0[_3013].y) * _3081) * _3082) + _2946;
        _3007 = (((((_3062 * _2836) + _1190) * cbLight._m0[_3013].z) * _3081) * _3082) + _2947;
    }
    float _3113;
    float _3115;
    float _3117;
    if (_2720)
    {
        _3113 = _3003;
        _3115 = _3005;
        _3117 = _3007;
    }
    else
    {
        uint _3124 = _2535 + 3u;
        uint _3128 = _2535 + 11u;
        float _3142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3124].w)) * _1029) * 0.949999988079071044921875);
        float _3143 = _3142 * _3142;
        float _3144 = cbLight._m0[_3124].x + _1105;
        float _3145 = cbLight._m0[_3124].y + _1106;
        float _3146 = cbLight._m0[_3124].z + _1107;
        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
        float _3151 = _3150 * _3144;
        float _3152 = _3150 * _3145;
        float _3153 = _3150 * _3146;
        float _3154 = dot(vec3(_1026, _1027, _1028), vec3(cbLight._m0[_3124].xyz));
        float _5144 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
        float _3157 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
        float _3158 = dot(vec3(_1026, _1027, _1028), vec3(_3151, _3152, _3153));
        float _5155 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
        float _3161 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
        float _3162 = dot(vec3(cbLight._m0[_3124].xyz), vec3(_3151, _3152, _3153));
        float _5166 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
        float _3166 = _3143 * _3143;
        float _3170 = ((_3161 * _3161) * (_3166 + (-1.0))) + 1.0;
        float _3177 = exp2(log2(1.0 - (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0)))) * 5.0);
        float _3184 = 1.0 - _3143;
        float _3194 = (0.5 / (((_2811 * ((_3157 * _3184) + _3143)) + 9.9999999392252902907785028219223e-09) + (((_2811 * _3184) + _3143) * _3157))) * _3157;
        float _5177 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
        float _3196 = (isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0))) * (_3166 / ((_3170 * _3170) * 3.141590118408203125));
        float _3197 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _3113 = (((((_3177 * _2833) + _1187) * cbLight._m0[_3128].x) * _3196) * _3197) + _3003;
        _3115 = (((((_3177 * _2835) + _1189) * cbLight._m0[_3128].y) * _3196) * _3197) + _3005;
        _3117 = (((((_3177 * _2836) + _1190) * cbLight._m0[_3128].z) * _3196) * _3197) + _3007;
    }
    float _3263;
    float _3265;
    float _3267;
    float _3269;
    float _3271;
    float _3273;
    if (_2533.y == 0u)
    {
        uvec4 _3218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3219 = _3218.x;
        uint _3230 = uint((float(_3218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1126) / _3219))) + floor(float(uint(cbSceneParam._m0[85u].x * _1125) / _3219)));
        float _3240 = (log2(_2311 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3241 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
        uint _3244 = uint(isnan(14.0) ? _3241 : (isnan(_3241) ? 14.0 : min(_3241, 14.0)));
        uvec4 _3249 = texelFetch(g_lightClusterGridBuffer, int(((_3244 << 2u) + (_3230 << 6u)) >> 2u));
        uint _3250 = _3249.x;
        uint _3251 = _3218.z;
        float _3330;
        float _3332;
        float _3334;
        float _3336;
        float _3338;
        float _3340;
        if (((((1u << ((_3251 >> 4u) & 15u)) + 4294967295u) & _3250) == 0u) || ((_3251 & 240u) == 0u))
        {
            _3330 = 0.0;
            _3332 = 0.0;
            _3334 = 0.0;
            _3336 = 0.0;
            _3338 = 0.0;
            _3340 = 0.0;
        }
        else
        {
            float _3331;
            float _3333;
            float _3335;
            float _3337;
            float _3339;
            float _3341;
            float _3483 = 0.0;
            float _3484 = 0.0;
            float _3485 = 0.0;
            float _3486 = 0.0;
            float _3487 = 0.0;
            float _3488 = 0.0;
            uint _3489 = 0u;
            uint _3498;
            bool _3499;
            for (;;)
            {
                _3498 = texelFetch(g_lightClassification, int((((_3244 << 5u) + (_3230 << 9u)) + (_3489 << 2u)) >> 2u)).x;
                _3499 = _3498 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3499)
                {
                    frontier_phi_71_pred = _3488;
                    frontier_phi_71_pred_1 = _3487;
                    frontier_phi_71_pred_2 = _3486;
                    frontier_phi_71_pred_3 = _3485;
                    frontier_phi_71_pred_4 = _3484;
                    frontier_phi_71_pred_5 = _3483;
                }
                else
                {
                    float _3628;
                    float _3629;
                    float _3630;
                    float _3631;
                    float _3632;
                    float _3633;
                    uint _3634;
                    _3628 = _3483;
                    _3629 = _3484;
                    _3630 = _3485;
                    _3631 = _3486;
                    _3632 = _3487;
                    _3633 = _3488;
                    _3634 = _3498;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    for (;;)
                    {
                        uint _3638 = uint(findLSB(_3634)) + (_3489 << 5u);
                        uint _3635 = (_3634 + 4294967295u) & _3634;
                        uint _3640 = _3638 * 48u;
                        vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3640)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 3u)).x));
                        uint _3660 = (_3638 * 48u) + 4u;
                        vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3660)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3660 + 3u)).x));
                        uint _3679 = (_3638 * 48u) + 8u;
                        vec3 _3690 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3679)).x, texelFetch(g_PointLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3679 + 2u)).x));
                        float _3694 = _3654.x - _2309;
                        float _3695 = _3654.y - _2310;
                        float _3696 = _3654.z - _2311;
                        float _3697 = dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696));
                        float _3700 = inversesqrt(_3697);
                        float _3701 = _3700 * _3694;
                        float _3702 = _3700 * _3695;
                        float _3703 = _3700 * _3696;
                        float _3704 = dot(vec3(_1144, _1147, _1150), vec3(_3701, _3702, _3703));
                        float _3709 = 1.0 - (_3697 * _3654.w);
                        float _5203 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                        float _3710 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                        float _3711 = sqrt(_3697) * _3673.w;
                        float _3714 = 1.39999997615814208984375 / (_3711 + 1.39999997615814208984375);
                        float _3715 = _3714 * _3714;
                        float _3718 = ((1.0 - _3715) * _3704) + _3715;
                        float _3721 = _3711 * _3711;
                        float _3725 = ((isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0))) * _3710) / ((_3721 * 0.699999988079071044921875) + 1.0);
                        float _3729 = (-0.0) - _2309;
                        float _3730 = (-0.0) - _2310;
                        float _3731 = (-0.0) - _2311;
                        float _3735 = inversesqrt(dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731)));
                        float _3736 = _3735 * _3729;
                        float _3737 = _3735 * _3730;
                        float _3738 = _3735 * _3731;
                        float _3745 = exp2(log2(1.0 / ((_3721 * 3.5) + 5.0)) * 0.25);
                        float _3746 = 1.0 - _1219;
                        float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                        float _3754 = _3753 * _3753;
                        float _3755 = _3754 * _3754;
                        float _3756 = _3736 + _3701;
                        float _3757 = _3737 + _3702;
                        float _3758 = _3738 + _3703;
                        float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                        float _3766 = dot(vec3(_1144, _1147, _1150), vec3(_3736, _3737, _3738));
                        float _5219 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                        float _3769 = isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0));
                        float _3770 = dot(vec3(_1144, _1147, _1150), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                        float _5230 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                        float _3773 = isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0));
                        float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                        float _3778 = _3714 * _3754;
                        float _3779 = _3778 * _3778;
                        float _3782 = ((1.0 - _3779) * _3704) + _3779;
                        float _5241 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                        float _3783 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
                        float _3784 = 1.0 - _3754;
                        float _3794 = (0.5 / (((_3783 * ((_3769 * _3784) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3754) * _3769))) * _3783;
                        float _5252 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                        float _3805 = (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0)))) / ((_3777 * _3777) * ((_3721 * 2.1991131305694580078125) + 3.141590118408203125))) * _3710;
                        _3558 = (_3725 * _3673.x) + _3631;
                        _3559 = (_3725 * _3673.y) + _3632;
                        _3560 = (_3725 * _3673.z) + _3633;
                        _3555 = (_3805 * _3690.x) + _3628;
                        _3556 = (_3805 * _3690.y) + _3629;
                        _3557 = (_3805 * _3690.z) + _3630;
                        if (_3635 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3628 = _3555;
                            _3629 = _3556;
                            _3630 = _3557;
                            _3631 = _3558;
                            _3632 = _3559;
                            _3633 = _3560;
                            _3634 = _3635;
                        }
                    }
                    frontier_phi_71_pred = _3560;
                    frontier_phi_71_pred_1 = _3559;
                    frontier_phi_71_pred_2 = _3558;
                    frontier_phi_71_pred_3 = _3557;
                    frontier_phi_71_pred_4 = _3556;
                    frontier_phi_71_pred_5 = _3555;
                }
                _3341 = frontier_phi_71_pred;
                _3339 = frontier_phi_71_pred_1;
                _3337 = frontier_phi_71_pred_2;
                _3335 = frontier_phi_71_pred_3;
                _3333 = frontier_phi_71_pred_4;
                _3331 = frontier_phi_71_pred_5;
                uint _3490 = _3489 + 1u;
                if (_3490 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3483 = _3331;
                    _3484 = _3333;
                    _3485 = _3335;
                    _3486 = _3337;
                    _3487 = _3339;
                    _3488 = _3341;
                    _3489 = _3490;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3330 = _3331;
            _3332 = _3333;
            _3334 = _3335;
            _3336 = _3337;
            _3338 = _3339;
            _3340 = _3341;
        }
        uvec4 _3344 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3345 = _3344.z;
        uint _3347 = (_3345 >> 8u) & 15u;
        float _3451;
        float _3453;
        float _3455;
        float _3457;
        float _3459;
        float _3461;
        if (((4294967295u << _3347) & _3250) == 0u)
        {
            _3451 = _3330;
            _3453 = _3332;
            _3455 = _3334;
            _3457 = _3336;
            _3459 = _3338;
            _3461 = _3340;
        }
        else
        {
            float _3476 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
            float _3477 = _3476 * _2309;
            float _3478 = _3476 * _2310;
            float _3479 = _3476 * _2311;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3347 < ((_3345 >> 12u) & 15u))
            {
                float _3452;
                float _3454;
                float _3456;
                float _3458;
                float _3460;
                float _3462;
                float _3611 = _3330;
                float _3612 = _3332;
                float _3613 = _3334;
                float _3614 = _3336;
                float _3615 = _3338;
                float _3616 = _3340;
                uint _3617 = _3347;
                uint _3626;
                bool _3627;
                for (;;)
                {
                    _3626 = texelFetch(g_lightClassification, int((((_3244 << 5u) + (_3230 << 9u)) + (_3617 << 2u)) >> 2u)).x;
                    _3627 = _3626 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3627)
                    {
                        frontier_phi_82_pred = _3616;
                        frontier_phi_82_pred_1 = _3615;
                        frontier_phi_82_pred_2 = _3614;
                        frontier_phi_82_pred_3 = _3613;
                        frontier_phi_82_pred_4 = _3612;
                        frontier_phi_82_pred_5 = _3611;
                    }
                    else
                    {
                        float _3819;
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _4112;
                        float _4113;
                        float _4114;
                        float _4115;
                        float _4116;
                        float _4117;
                        float _3832 = _3611;
                        float _3833 = _3612;
                        float _3834 = _3613;
                        float _3835 = _3614;
                        float _3836 = _3615;
                        float _3837 = _3616;
                        uint _3838 = _3626;
                        uint _3839;
                        vec4 _3864;
                        float _3865;
                        vec4 _3880;
                        vec3 _3892;
                        vec4 _3907;
                        vec4 _3922;
                        float _3968;
                        bool _3969;
                        for (;;)
                        {
                            uint _3849 = ((_3617 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3838));
                            _3839 = (_3838 + 4294967295u) & _3838;
                            uint _3851 = _3849 * 40u;
                            _3864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 3u)).x));
                            _3865 = _3864.w;
                            uint _3867 = (_3849 * 40u) + 4u;
                            _3880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 3u)).x));
                            uint _3882 = (_3849 * 40u) + 8u;
                            _3892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3882 + 2u)).x));
                            uint _3894 = (_3849 * 40u) + 16u;
                            _3907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3894 + 3u)).x));
                            uint _3909 = (_3849 * 40u) + 20u;
                            _3922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3909 + 3u)).x));
                            uint _3924 = (_3849 * 40u) + 24u;
                            vec4 _3937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 3u)).x));
                            uint _3943 = (_3849 * 40u) + 28u;
                            vec4 _3956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3943 + 3u)).x));
                            _3968 = fma(_2311, _3956.z, fma(_2310, _3956.y, _3956.x * _2309)) + _3956.w;
                            _3969 = !((fma(_2311, _3937.z, fma(_2310, _3937.y, _3937.x * _2309)) + _3937.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3969)
                            {
                                float _3996 = _3864.x - _2309;
                                float _3997 = _3864.y - _2310;
                                float _3998 = _3864.z - _2311;
                                float _3999 = dot(vec3(_3996, _3997, _3998), vec3(_3996, _3997, _3998));
                                float _4002 = inversesqrt(_3999);
                                float _4003 = _4002 * _3996;
                                float _4004 = _4002 * _3997;
                                float _4005 = _4002 * _3998;
                                float _4009 = 1.0 - (_3999 / (_3865 * _3865));
                                float _5263 = isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0));
                                float _4010 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                                float _4014 = sqrt(_3999) * _3880.w;
                                float _4016 = 1.39999997615814208984375 / (_4014 + 1.39999997615814208984375);
                                float _4017 = _4016 * _4016;
                                float _4020 = ((1.0 - _4017) * dot(vec3(_4003, _4004, _4005), vec3(_1144, _1147, _1150))) + _4017;
                                float _4023 = _4014 * _4014;
                                float _4027 = (fma(_2311, _3907.z, fma(_2310, _3907.y, _3907.x * _2309)) + _3907.w) / _3968;
                                float _4028 = (fma(_2311, _3922.z, fma(_2310, _3922.y, _3922.x * _2309)) + _3922.w) / _3968;
                                float _4032 = 1.0 - dot(vec2(_4027, _4028), vec2(_4027, _4028));
                                float _5279 = isnan(0.0) ? _4032 : (isnan(_4032) ? 0.0 : max(_4032, 0.0));
                                float _4033 = isnan(1.0) ? _5279 : (isnan(_5279) ? 1.0 : min(_5279, 1.0));
                                float _4034 = _4033 * (((isnan(0.0) ? _4020 : (isnan(_4020) ? 0.0 : max(_4020, 0.0))) * _4010) / ((_4023 * 0.699999988079071044921875) + 1.0));
                                float _4046 = exp2(log2(1.0 / ((_4023 * 3.5) + 5.0)) * 0.25);
                                float _4047 = 1.0 - _1219;
                                float _4054 = sqrt(1.0 - ((1.0 - (_4047 * _4047)) * (1.0 - (_4046 * _4046))));
                                float _4055 = _4054 * _4054;
                                float _4056 = _4055 * _4055;
                                float _4057 = _4003 - _3477;
                                float _4058 = _4004 - _3478;
                                float _4059 = _4005 - _3479;
                                float _4063 = inversesqrt(dot(vec3(_4057, _4058, _4059), vec3(_4057, _4058, _4059)));
                                float _4067 = dot(vec3(_1144, _1147, _1150), vec3((-0.0) - _3477, (-0.0) - _3478, (-0.0) - _3479));
                                float _5290 = isnan(0.0) ? _4067 : (isnan(_4067) ? 0.0 : max(_4067, 0.0));
                                float _4070 = isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0));
                                float _4071 = dot(vec3(_1144, _1147, _1150), vec3(_4063 * _4057, _4063 * _4058, _4063 * _4059));
                                float _5301 = isnan(0.0) ? _4071 : (isnan(_4071) ? 0.0 : max(_4071, 0.0));
                                float _4074 = isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0));
                                float _4078 = ((_4074 * _4074) * (_4056 + (-1.0))) + 1.0;
                                float _4079 = _4016 * _4055;
                                float _4080 = _4079 * _4079;
                                float _4086 = ((1.0 - _4080) * dot(vec3(_1144, _1147, _1150), vec3(_4003, _4004, _4005))) + _4080;
                                float _5312 = isnan(0.0) ? _4086 : (isnan(_4086) ? 0.0 : max(_4086, 0.0));
                                float _4087 = isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0));
                                float _4088 = 1.0 - _4055;
                                float _4098 = (0.5 / (((_4087 * ((_4070 * _4088) + _4055)) + 9.9999999392252902907785028219223e-09) + (((_4087 * _4088) + _4055) * _4070))) * _4087;
                                float _5323 = isnan(0.0) ? _4098 : (isnan(_4098) ? 0.0 : max(_4098, 0.0));
                                float _4108 = (_4033 * _4010) * (((_4056 * 3.1415927410125732421875) * (isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0)))) / ((_4078 * _4078) * ((_4023 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4034 * _3880.z;
                                frontier_phi_88_pred_1 = _4034 * _3880.y;
                                frontier_phi_88_pred_2 = _4034 * _3880.x;
                                frontier_phi_88_pred_3 = _4108 * _3892.z;
                                frontier_phi_88_pred_4 = _4108 * _3892.y;
                                frontier_phi_88_pred_5 = _4108 * _3892.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4117 = frontier_phi_88_pred;
                            _4116 = frontier_phi_88_pred_1;
                            _4115 = frontier_phi_88_pred_2;
                            _4114 = frontier_phi_88_pred_3;
                            _4113 = frontier_phi_88_pred_4;
                            _4112 = frontier_phi_88_pred_5;
                            _3822 = _4115 + _3835;
                            _3823 = _4116 + _3836;
                            _3824 = _4117 + _3837;
                            _3819 = _4112 + _3832;
                            _3820 = _4113 + _3833;
                            _3821 = _4114 + _3834;
                            if (_3839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3832 = _3819;
                                _3833 = _3820;
                                _3834 = _3821;
                                _3835 = _3822;
                                _3836 = _3823;
                                _3837 = _3824;
                                _3838 = _3839;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3824;
                        frontier_phi_82_pred_1 = _3823;
                        frontier_phi_82_pred_2 = _3822;
                        frontier_phi_82_pred_3 = _3821;
                        frontier_phi_82_pred_4 = _3820;
                        frontier_phi_82_pred_5 = _3819;
                    }
                    _3462 = frontier_phi_82_pred;
                    _3460 = frontier_phi_82_pred_1;
                    _3458 = frontier_phi_82_pred_2;
                    _3456 = frontier_phi_82_pred_3;
                    _3454 = frontier_phi_82_pred_4;
                    _3452 = frontier_phi_82_pred_5;
                    uint _3618 = _3617 + 1u;
                    if (_3618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3611 = _3452;
                        _3612 = _3454;
                        _3613 = _3456;
                        _3614 = _3458;
                        _3615 = _3460;
                        _3616 = _3462;
                        _3617 = _3618;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3458;
                frontier_phi_63_64_ladder_1 = _3462;
                frontier_phi_63_64_ladder_2 = _3460;
                frontier_phi_63_64_ladder_3 = _3456;
                frontier_phi_63_64_ladder_4 = _3454;
                frontier_phi_63_64_ladder_5 = _3452;
            }
            else
            {
                frontier_phi_63_64_ladder = _3336;
                frontier_phi_63_64_ladder_1 = _3340;
                frontier_phi_63_64_ladder_2 = _3338;
                frontier_phi_63_64_ladder_3 = _3334;
                frontier_phi_63_64_ladder_4 = _3332;
                frontier_phi_63_64_ladder_5 = _3330;
            }
            _3451 = frontier_phi_63_64_ladder_5;
            _3453 = frontier_phi_63_64_ladder_4;
            _3455 = frontier_phi_63_64_ladder_3;
            _3457 = frontier_phi_63_64_ladder;
            _3459 = frontier_phi_63_64_ladder_2;
            _3461 = frontier_phi_63_64_ladder_1;
        }
        float _3466 = isnan(1.0) ? _1203 : (isnan(_1203) ? 1.0 : min(_1203, 1.0));
        _3263 = (_3466 * _3457) + _2775;
        _3265 = (_3466 * _3459) + _2777;
        _3267 = (_3466 * _3461) + _2779;
        _3269 = ((_3451 * _1187) * _3466) + _3113;
        _3271 = ((_3453 * _1189) * _3466) + _3115;
        _3273 = ((_3455 * _1190) * _3466) + _3117;
    }
    else
    {
        _3263 = _2775;
        _3265 = _2777;
        _3267 = _2779;
        _3269 = _3113;
        _3271 = _3115;
        _3273 = _3117;
    }
    float _5339 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _5350 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _5361 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _3290 = ((isnan(1.0) ? _5339 : (isnan(_5339) ? 1.0 : min(_5339, 1.0))) * (_3263 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1203))) + ((_3269 + ((isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))) * _2041)) * cbPerFrame._m0[3u].x);
    float _3291 = ((isnan(1.0) ? _5350 : (isnan(_5350) ? 1.0 : min(_5350, 1.0))) * (_3265 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1203))) + ((_3271 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2041)) * cbPerFrame._m0[3u].x);
    float _3292 = ((isnan(1.0) ? _5361 : (isnan(_5361) ? 1.0 : min(_5361, 1.0))) * (_3267 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1203))) + ((_3273 + ((isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))) * _2041)) * cbPerFrame._m0[3u].x);
    uint _3293 = _299 + 6u;
    float _3301 = _1125 / cbSceneParam._m0[86u].x;
    float _3302 = _1126 / cbSceneParam._m0[86u].y;
    vec4 _3316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3301, _3302, (log2((isnan(cbSceneParam._m0[77u].w) ? _1048 : (isnan(_1048) ? cbSceneParam._m0[77u].w : min(_1048, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3318 = _3316.x;
    float _3319 = _3316.y;
    float _3320 = _3316.z;
    float _3321 = _3316.w;
    float _3393;
    float _3395;
    float _3397;
    float _3399;
    if (_1048 > cbSceneParam._m0[78u].w)
    {
        float _3355 = isnan(_1048) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1048 : min(cbSceneParam._m0[80u].w, _1048));
        float _3356 = _3355 / _1048;
        float _3367 = _3356 * _1098;
        float _3368 = _1099 * _3356;
        float _3369 = (-0.0) - _3368;
        float _3371 = _3356 * _1100;
        float _3373 = (cbSceneParam._m0[77u].w * _3369) / _3355;
        float _3374 = _3373 + cbSceneParam._m0[79u].w;
        float _3375 = cbSceneParam._m0[79u].w - _3368;
        float _3381 = sqrt(((_3367 * _3367) + (_3368 * _3368)) + (_3371 * _3371));
        float _3384 = (1.0 - (cbSceneParam._m0[77u].w / _3355)) * _3381;
        float _3389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3568;
        if (abs((_3369 - _3373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3568 = ((((_3374 > 0.0) ? exp2(_3389 * _3374) : (2.0 - exp2(_3391 * _3374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3384;
        }
        else
        {
            float _3512 = 1.0 / cbSceneParam._m0[80u].x;
            float _3513 = isnan(_3375) ? _3374 : (isnan(_3374) ? _3375 : max(_3374, _3375));
            float _3514 = isnan(_3375) ? _3374 : (isnan(_3374) ? _3375 : min(_3374, _3375));
            float _3523 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : min(_3513, 0.0));
            float _3524 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : min(_3514, 0.0));
            _3568 = ((abs(_3381 / _3369) * cbSceneParam._m0[80u].y) * ((((_3523 - _3524) * 2.0) - ((exp2(_3389 * (isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0)))) - exp2(_3389 * (isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0))))) * _3512)) - ((exp2(_3391 * _3523) - exp2(_3391 * _3524)) * _3512))) + (_3384 * cbSceneParam._m0[80u].z);
        }
        vec4 _3570 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3301, _3302, 1.0), 0.0);
        float _3579 = exp2((_3568 * (-1.44269502162933349609375)) * (1.0 - _3570.w));
        float _3580 = log2(_3579);
        float _3596 = log2(_3321);
        _3393 = (exp2(_3596 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3580 * cbSceneParam._m0[78u].x)) * _3570.x) / cbSceneParam._m0[78u].x)) + _3318;
        _3395 = (exp2(_3596 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3580 * cbSceneParam._m0[78u].y)) * _3570.y) / cbSceneParam._m0[78u].y)) + _3319;
        _3397 = (exp2(_3596 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3580 * cbSceneParam._m0[78u].z)) * _3570.z) / cbSceneParam._m0[78u].z)) + _3320;
        _3399 = _3579 * _3321;
    }
    else
    {
        _3393 = _3318;
        _3395 = _3319;
        _3397 = _3320;
        _3399 = _3321;
    }
    bool _3606;
    vec4 _3409;
    vec4 _3431;
    float _3433;
    float _3437;
    float _3438;
    float _3439;
    float _3440;
    bool _3450;
    for (;;)
    {
        _3409 = cbMatDynParam._m0[0u];
        float _3411 = roundEven(_3409.y);
        bool _3412 = _3411 == 3.0;
        float _3413 = log2(_3399);
        float _3420 = exp2(_3413 * cbSceneParam._m0[78u].x) * _3290;
        float _3421 = exp2(_3413 * cbSceneParam._m0[78u].y) * _3291;
        float _3422 = exp2(_3413 * cbSceneParam._m0[78u].z) * _3292;
        float _3429 = _1114 + (-0.5);
        _3431 = cbMtdParam._m0[1u];
        _3433 = _3431.y * _3429;
        float _3436 = (_3411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3437 = _3436 * (_3412 ? _3420 : (_3420 + (cbSceneParam._m0[72u].w * _3393)));
        _3438 = _3436 * (_3412 ? _3421 : (_3421 + (cbSceneParam._m0[72u].w * _3395)));
        _3439 = _3436 * (_3412 ? _3422 : (_3422 + (cbSceneParam._m0[72u].w * _3397)));
        _3440 = _3429 * 0.999000012874603271484375;
        _3450 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3450)
        {
            if ((cbInstanceData._m0[_299 + 7u].x + _3440) < 0.5)
            {
                _3606 = true;
                break;
            }
        }
        uint _3547 = _1163 + uint(_3409.w);
        if ((cbInstanceData._m0[_3547].w < 1.0) && ((cbInstanceData._m0[_3547].w + _3440) < 0.5))
        {
            _3606 = true;
            break;
        }
        if ((_3433 + 1.0) < _3431.x)
        {
            _3606 = true;
            break;
        }
        _3606 = false;
        break;
    }
    float _3810;
    if (_3606)
    {
        discard_state = true;
        _3810 = 0.0;
    }
    else
    {
        _3810 = cbInstanceData._m0[_3293].w;
    }
    SV_Target.x = _3437;
    SV_Target.y = _3438;
    SV_Target.z = _3439;
    SV_Target.w = _3810;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3293].w;
    discard_exit();
}


