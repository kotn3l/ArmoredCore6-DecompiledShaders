#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1584;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4191 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4202 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4213 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4224 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _495 = (_488 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _496 = (_488 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _497 = (_488 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4235 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _571 = (_353.x * cbMtdParam._m0[9u].x) * ((_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495);
    float _572 = (_353.y * cbMtdParam._m0[9u].y) * ((_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496);
    float _573 = (_353.z * cbMtdParam._m0[9u].z) * ((_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497);
    float _577 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _571;
    float _580 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _572;
    float _583 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _573;
    float _591 = (((_571 - _577) * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) + _577) * 4.55000019073486328125;
    float _593 = (((_572 - _580) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) + _580) * 4.55000019073486328125;
    float _595 = (((_573 - _583) * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) + _583) * 4.55000019073486328125;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _677 = _673.z;
    float _684 = ((_656.x - _675) * _488) + _675;
    float _685 = ((_656.y - _676) * _488) + _676;
    float _686 = ((_656.z - _677) * _488) + _677;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _711 = ((_698.z - _686) * _561) + _686;
    float _714 = ((((_698.x - _684) * _561) + _684) * 2.0) + (-1.0);
    float _715 = ((((_698.y - _685) * _561) + _685) * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4246 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _762 = _760.x;
    float _763 = 1.0 - _762;
    float _772 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _775 = ((isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : min(_772, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _784 = (_775 - ((((((_762 - _763) * cbMtdParam._m0[24u].z) + _763) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _775))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4267 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _785 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _792 = (_785 * ((_614.x * cbMtdParam._m0[18u].x) - _591)) + _591;
    float _793 = (_785 * ((_614.y * cbMtdParam._m0[18u].y) - _593)) + _593;
    float _794 = (_785 * ((_614.z * cbMtdParam._m0[18u].z) - _595)) + _595;
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _808 = _806.x;
    float _809 = 1.0 - _808;
    float _834 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_808 - _809) * cbMtdParam._m0[24u].w) + _809) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4278 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _843 = ((((cbMtdParam._m0[10u].x - _792) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _835) + _792;
    float _844 = ((((cbMtdParam._m0[10u].y - _793) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _835) + _793;
    float _845 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _794)) * _835) + _794;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _873 = _871.x;
    float _890 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _873) * _488) + _873;
    float _907 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _890) * _561) + _890;
    float _911 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _907) * cbMtdParam._m0[19u].z) + _907;
    float _913 = _911 - (_911 * _785);
    float _915 = _913 - (_913 * _835);
    float _920 = (((_633.z - _711) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _711;
    float _924 = ((_735.z - _920) * cbMtdParam._m0[19u].w) + _920;
    vec4 _938 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _945 = (_938.x * 2.0) + (-1.0);
    float _946 = (_938.y * 2.0) + (-1.0);
    float _947 = dot(vec2(_945, _946), vec2(_945, _946));
    float _4289 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _955 = (_785 * (_938.z - _924)) + _924;
    float _958 = ((cbMtdParam._m0[23u].x - _955) * _835) + _955;
    vec4 _979 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _985 = (_979.x * 2.0) + (-1.0);
    float _986 = (_979.y * 2.0) + (-1.0);
    float _987 = dot(vec2(_985, _986), vec2(_985, _986));
    float _4300 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _1001 = (_714 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_633.x * 2.0) + (-1.0)))) + (((_735.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1002 = (_715 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_633.y * 2.0) + (-1.0)))) + (((_735.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1014 = (((_945 - _1001) + (cbMtdParam._m0[21u].x * _1001)) * _785) + _1001;
    float _1015 = (((_946 - _1002) + (cbMtdParam._m0[21u].x * _1002)) * _785) + _1002;
    float _1016 = (_785 * (sqrt(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) - _721)) + _721;
    float _1027 = (((_985 - _1014) + (_1014 * cbMtdParam._m0[22u].z)) * _835) + _1014;
    float _1028 = (((_986 - _1015) + (_1015 * cbMtdParam._m0[22u].z)) * _835) + _1015;
    float _1029 = ((sqrt(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) - _1016) * _835) + _1016;
    float _1031 = cbMtdParam._m0[22u].x + _735.w;
    float _1034 = fma(_1029, _265 * NORMAL.x, fma(_1028, _272 * TANGENT.x, (_258 * _250) * _1027));
    float _1037 = fma(_1029, _265 * NORMAL.y, fma(_1028, _272 * TANGENT.y, (_258 * _251) * _1027));
    float _1040 = fma(_1029, _265 * NORMAL.z, fma(_1028, _272 * TANGENT.z, (_258 * _252) * _1027));
    float _1044 = inversesqrt(dot(vec3(_1034, _1037, _1040), vec3(_1034, _1037, _1040)));
    float _1045 = _1044 * _1034;
    float _1046 = _1044 * _1037;
    float _1047 = _1044 * _1040;
    float _4311 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _1048 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4333 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4344 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4355 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4366 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _1053 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _1067 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1107 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1117 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1107);
    float _1118 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1107);
    float _1119 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1107);
    float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
    float _1124 = _1117 * _1123;
    float _1125 = _1118 * _1123;
    float _1126 = _1119 * _1123;
    float _1132 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1133 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1151 = fma(_1047, cbSceneParam._m0[5u].z, fma(_1046, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1045));
    float _1154 = fma(_1047, cbSceneParam._m0[6u].z, fma(_1046, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1045));
    float _1157 = fma(_1047, cbSceneParam._m0[7u].z, fma(_1046, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1045));
    uint _1171 = (_297 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1177 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * cbInstanceData._m0[_1171].x;
    float _1178 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * cbInstanceData._m0[_1171].y;
    float _1179 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) * cbInstanceData._m0[_1171].z;
    float _4377 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _1180 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _4388 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _1183 = 1.0 - _1053;
    float _1184 = _1180 * _1183;
    float _1185 = _1181 * _1183;
    float _1186 = _1182 * _1183;
    float _1191 = (_1180 + (-0.039999999105930328369140625)) * _1053;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1053;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1053;
    float _1194 = _1191 + 0.039999999105930328369140625;
    float _1196 = _1192 + 0.039999999105930328369140625;
    float _1197 = _1193 + 0.039999999105930328369140625;
    vec4 _1206 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1132, cbSceneParam._m0[86u].y * _1133));
    float _1210 = ((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * TEXCOORD_5.w) * _1206.x;
    float _1211 = dot(vec3(_1045, _1046, _1047), vec3(_1124, _1125, _1126));
    float _1214 = _1211 * 2.0;
    float _1218 = (_1214 * _1045) - _1124;
    float _1219 = (_1214 * _1046) - _1125;
    float _1220 = (_1214 * _1047) - _1126;
    float _1224 = abs(dot(vec3(_1124, _1125, _1126), vec3(_1045, _1046, _1047)));
    float _4410 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1226 = sqrt(_1048);
    float _1239 = exp2((_1226 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1226 * 3.0));
    float _1245 = (1.0 - _1239) * ((_1226 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1246 = _1239 * _1226;
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1282 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1583;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1308 = fma(_1282, cbModelParam._m0[26u].z, fma(_1278, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1274));
        float _1312 = fma(_1282, cbModelParam._m0[27u].z, fma(_1278, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1274));
        float _1316 = fma(_1282, cbModelParam._m0[28u].z, fma(_1278, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1274));
        float _1341 = _1274 + _1045;
        float _1342 = _1278 + _1046;
        float _1343 = _1282 + _1047;
        float _1353 = fma(_1343, cbModelParam._m0[26u].z, fma(_1342, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1341)) - _1308;
        float _1354 = fma(_1343, cbModelParam._m0[27u].z, fma(_1342, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1341)) - _1312;
        float _1355 = fma(_1343, cbModelParam._m0[28u].z, fma(_1342, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1341)) - _1316;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1308 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1312 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[34u].z) + ((((((_1316 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1411 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1377.x + (-0.5));
        float _1413 = _1411 * (_1377.y + (-0.5));
        float _1414 = _1411 * (_1377.z + (-0.5));
        float _1421 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1384.x + (-0.5));
        float _1423 = _1421 * (_1384.y + (-0.5));
        float _1424 = _1421 * (_1384.z + (-0.5));
        float _1431 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1391.x + (-0.5));
        float _1433 = _1431 * (_1391.y + (-0.5));
        float _1434 = _1431 * (_1391.z + (-0.5));
        float _1441 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1398.x + (-0.5));
        float _1443 = _1441 * (_1398.y + (-0.5));
        float _1444 = _1441 * (_1398.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1465 = (dot(vec3(_1045, _1046, _1047), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1475 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4458 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1477 + 1.0))) + _1482) * _1445;
        float _1492 = _1413 * 0.5;
        float _1493 = _1423 * 0.5;
        float _1494 = _1433 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_1045, _1046, _1047), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4491 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1519 + 1.0))) + _1524) * _1446;
        float _1534 = _1414 * 0.5;
        float _1535 = _1424 * 0.5;
        float _1536 = _1434 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_1045, _1046, _1047), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4524 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1561 + 1.0))) + _1566) * _1447;
        _1583 = _1414;
        _1585 = _1413;
        _1586 = _1412;
        _1587 = _1424;
        _1588 = _1423;
        _1589 = _1422;
        _1590 = _1434;
        _1591 = _1433;
        _1592 = _1432;
        _1593 = _1447;
        _1594 = _1446;
        _1595 = _1445;
        _1596 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
        _1597 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1598 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
    }
    else
    {
        _1583 = _1584;
        _1585 = _1584;
        _1586 = _1584;
        _1587 = _1584;
        _1588 = _1584;
        _1589 = _1584;
        _1590 = _1584;
        _1591 = _1584;
        _1592 = _1584;
        _1593 = _1584;
        _1594 = _1584;
        _1595 = _1584;
        _1596 = 0.0;
        _1597 = 0.0;
        _1598 = 0.0;
    }
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1622 = fma(_1282, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274));
        float _1626 = fma(_1282, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274));
        float _1630 = fma(_1282, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274));
        float _1653 = _1274 + _1045;
        float _1654 = _1278 + _1046;
        float _1655 = _1282 + _1047;
        float _1665 = fma(_1655, cbModelParam._m0[30u].z, fma(_1654, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1653)) - _1622;
        float _1666 = fma(_1655, cbModelParam._m0[31u].z, fma(_1654, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1653)) - _1626;
        float _1667 = fma(_1655, cbModelParam._m0[32u].z, fma(_1654, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1653)) - _1630;
        float _1671 = inversesqrt(dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667)));
        float _1684 = ((_1671 * _1665) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1622 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1685 = ((_1671 * _1666) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1626 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1686 = ((_1671 * _1667) / cbModelParam._m0[35u].z) + ((((((_1630 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1684, _1685, _1686), 0.0);
        float _1721 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1688.x + (-0.5));
        float _1723 = _1721 * (_1688.y + (-0.5));
        float _1724 = _1721 * (_1688.z + (-0.5));
        float _1731 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1695.x + (-0.5));
        float _1733 = _1731 * (_1695.y + (-0.5));
        float _1734 = _1731 * (_1695.z + (-0.5));
        float _1741 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1702.x + (-0.5));
        float _1743 = _1741 * (_1702.y + (-0.5));
        float _1744 = _1741 * (_1702.z + (-0.5));
        float _1751 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1709.x + (-0.5));
        float _1753 = _1751 * (_1709.y + (-0.5));
        float _1754 = _1751 * (_1709.z + (-0.5));
        float _1755 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1756 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1757 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1758 = _1722 * 0.5;
        float _1759 = _1732 * 0.5;
        float _1760 = _1742 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_1045, _1046, _1047), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4565 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1755 + 9.9999997473787516355514526367188e-06);
        float _4576 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4587 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_1785 + 1.0))) + _1790) * _1755;
        float _1800 = _1723 * 0.5;
        float _1801 = _1733 * 0.5;
        float _1802 = _1743 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_1045, _1046, _1047), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4598 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1756 + 9.9999997473787516355514526367188e-06);
        float _4609 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4620 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_1827 + 1.0))) + _1832) * _1756;
        float _1842 = _1724 * 0.5;
        float _1843 = _1734 * 0.5;
        float _1844 = _1744 * 0.5;
        float _1845 = dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844));
        float _1850 = (_1845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1845);
        float _1858 = (dot(vec3(_1045, _1046, _1047), vec3(_1850 * _1842, _1850 * _1843, _1850 * _1844)) + 1.0) * 0.5;
        float _4631 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1867 = sqrt(((_1843 * _1843) + (_1842 * _1842)) + (_1844 * _1844)) / (_1757 + 9.9999997473787516355514526367188e-06);
        float _4642 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _1869 = _1868 * 2.0;
        float _1873 = (1.0 - _1868) / (_1868 + 1.0);
        float _4653 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _1883 = ((((1.0 - _1874) * (_1869 + 2.0)) * exp2(log2(isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_1869 + 1.0))) + _1874) * _1757;
        _1891 = _1724;
        _1892 = _1723;
        _1893 = _1722;
        _1894 = _1734;
        _1895 = _1733;
        _1896 = _1732;
        _1897 = _1744;
        _1898 = _1743;
        _1899 = _1742;
        _1900 = _1757;
        _1901 = _1756;
        _1902 = _1755;
        _1903 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
        _1904 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
        _1905 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)));
    }
    else
    {
        _1891 = _1584;
        _1892 = _1584;
        _1893 = _1584;
        _1894 = _1584;
        _1895 = _1584;
        _1896 = _1584;
        _1897 = _1584;
        _1898 = _1584;
        _1899 = _1584;
        _1900 = _1584;
        _1901 = _1584;
        _1902 = _1584;
        _1903 = 0.0;
        _1904 = 0.0;
        _1905 = 0.0;
    }
    float _1915 = (cbModelParam._m0[1u].x * (_1903 - _1596)) + _1596;
    float _1916 = (cbModelParam._m0[1u].x * (_1904 - _1597)) + _1597;
    float _1917 = (cbModelParam._m0[1u].x * (_1905 - _1598)) + _1598;
    float _1938 = fma(_1917, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1915 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1917, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1915 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1917, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1915));
    float _1959 = _1218 * 0.5;
    float _1960 = _1219 * 0.5;
    float _1961 = _1220 * 0.5;
    float _1962 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1893, _1896, _1899, _1902));
    float _1965 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1892, _1895, _1898, _1901));
    float _1968 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1891, _1894, _1897, _1900));
    float _2002;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1975 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1583, _1587, _1590, _1593));
        float _1979 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1585, _1588, _1591, _1594));
        float _1983 = dot(vec4(_1959, _1960, _1961, 1.0), vec4(_1586, _1589, _1592, _1595));
        float _1990 = dot(vec4(cbModelParam._m0[39u]), vec4(_1959, _1960, _1961, 1.0));
        _2002 = dot(vec3(isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1990) ? 0.0 : (isnan(0.0) ? _1990 : max(0.0, _1990))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2002 = 1.0;
    }
    float _2013;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2004 = dot(vec4(cbModelParam._m0[40u]), vec4(_1959, _1960, _1961, 1.0));
        _2013 = dot(vec3(isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2004) ? 0.0 : (isnan(0.0) ? _2004 : max(0.0, _2004))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2013 = 1.0;
    }
    float _2017 = (_2013 * cbModelParam._m0[1u].x) + (_2002 * (1.0 - cbModelParam._m0[1u].x));
    float _2027 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1048);
    float _2028 = isnan(_2027) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2027 : min(cbModelParam._m0[25u].z, _2027));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2075 = fma(_1282, cbModelParam._m0[13u].z, fma(_1278, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1274)) + cbModelParam._m0[13u].w;
        float _2079 = fma(_1282, cbModelParam._m0[14u].z, fma(_1278, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1274)) + cbModelParam._m0[14u].w;
        float _2083 = fma(_1282, cbModelParam._m0[15u].z, fma(_1278, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1274)) + cbModelParam._m0[15u].w;
        float _2086 = fma(_1220, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1218));
        float _2089 = fma(_1220, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1218));
        float _2092 = fma(_1220, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1218));
        float _2120;
        if (_2086 > 0.0)
        {
            _2120 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2120 = frontier_phi_14_12_ladder;
        }
        float _2291;
        if (_2089 > 0.0)
        {
            _2291 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2291 = frontier_phi_23_19_ladder;
        }
        float _2586;
        if (_2092 > 0.0)
        {
            _2586 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2586 = frontier_phi_35_30_ladder;
        }
        float _2588 = isnan(_2291) ? _2120 : (isnan(_2120) ? _2291 : min(_2120, _2291));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _2086) + _2075;
        float _2594 = (_2589 * _2089) + _2079;
        float _2595 = (_2589 * _2092) + _2083;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2598 = (-1.0) - _2596;
        float _2600 = _2596 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2595 > _2600) || ((_2595 < _2598) || ((_2594 > _2600) || ((_2594 < _2598) || ((_2593 < _2598) || (_2593 > _2600))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2595, cbModelParam._m0[9u].z, fma(_2594, cbModelParam._m0[9u].y, _2593 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2595, cbModelParam._m0[10u].z, fma(_2594, cbModelParam._m0[10u].y, _2593 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2595, cbModelParam._m0[11u].z, fma(_2594, cbModelParam._m0[11u].y, _2593 * cbModelParam._m0[11u].x))), _2028);
            frontier_phi_13_35_ladder = _2740.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2740.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2740.x * cbModelParam._m0[1u].y;
        }
        _2108 = frontier_phi_13_35_ladder_2;
        _2110 = frontier_phi_13_35_ladder_1;
        _2112 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2096 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1218, _1219, _1220), _2028);
        _2108 = _2096.x * cbModelParam._m0[1u].y;
        _2110 = _2096.y * cbModelParam._m0[1u].y;
        _2112 = _2096.z * cbModelParam._m0[1u].y;
    }
    float _2116 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1048);
    float _2117 = isnan(_2116) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2116 : min(cbModelParam._m0[25u].w, _2116));
    float _2206;
    float _2208;
    float _2210;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2170 = fma(_1282, cbModelParam._m0[21u].z, fma(_1278, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1274)) + cbModelParam._m0[21u].w;
        float _2174 = fma(_1282, cbModelParam._m0[22u].z, fma(_1278, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1274)) + cbModelParam._m0[22u].w;
        float _2178 = fma(_1282, cbModelParam._m0[23u].z, fma(_1278, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1274)) + cbModelParam._m0[23u].w;
        float _2181 = fma(_1220, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1218));
        float _2184 = fma(_1220, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1218));
        float _2187 = fma(_1220, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1218));
        float _2296;
        if (_2181 > 0.0)
        {
            _2296 = abs((1.0 - _2170) / _2181);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2170 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2296 = frontier_phi_25_21_ladder;
        }
        float _2613;
        if (_2184 > 0.0)
        {
            _2613 = abs((1.0 - _2174) / _2184);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2174 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2613 = frontier_phi_37_32_ladder;
        }
        float _2951;
        if (_2187 > 0.0)
        {
            _2951 = abs((1.0 - _2178) / _2187);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2187 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2178 + 1.0) / _2187);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2951 = frontier_phi_47_44_ladder;
        }
        float _2953 = isnan(_2613) ? _2296 : (isnan(_2296) ? _2613 : min(_2296, _2613));
        float _2954 = isnan(_2951) ? _2953 : (isnan(_2953) ? _2951 : min(_2953, _2951));
        float _2958 = (_2954 * _2181) + _2170;
        float _2959 = (_2954 * _2184) + _2174;
        float _2960 = (_2954 * _2187) + _2178;
        float _2961 = _2954 * 9.9999997473787516355514526367188e-05;
        float _2962 = (-1.0) - _2961;
        float _2964 = _2961 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2960 > _2964) || ((_2960 < _2962) || ((_2959 > _2964) || ((_2959 < _2962) || ((_2958 < _2962) || (_2958 > _2964))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2960, cbModelParam._m0[17u].z, fma(_2959, cbModelParam._m0[17u].y, _2958 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2960, cbModelParam._m0[18u].z, fma(_2959, cbModelParam._m0[18u].y, _2958 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2960, cbModelParam._m0[19u].z, fma(_2959, cbModelParam._m0[19u].y, _2958 * cbModelParam._m0[19u].x))), _2117);
            frontier_phi_22_47_ladder = _3082.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3082.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3082.x * cbModelParam._m0[1u].z;
        }
        _2206 = frontier_phi_22_47_ladder_2;
        _2208 = frontier_phi_22_47_ladder_1;
        _2210 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2190 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1218, _1219, _1220), _2117);
        _2206 = _2190.x * cbModelParam._m0[1u].z;
        _2208 = _2190.y * cbModelParam._m0[1u].z;
        _2210 = _2190.z * cbModelParam._m0[1u].z;
    }
    float _2223 = (((_1245 * _1194) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2206 - _2108)) + _2108);
    float _2225 = (((_1245 * _1196) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2208 - _2110)) + _2110);
    float _2227 = (((_1245 * _1197) + _1246) * _1210) * ((cbModelParam._m0[1u].w * (_2210 - _2112)) + _2112);
    float _2230 = fma(_2227, cbSceneParam._m0[89u].z, fma(_2225, cbSceneParam._m0[89u].y, _2223 * cbSceneParam._m0[89u].x));
    float _2233 = fma(_2227, cbSceneParam._m0[90u].z, fma(_2225, cbSceneParam._m0[90u].y, _2223 * cbSceneParam._m0[90u].x));
    float _2236 = fma(_2227, cbSceneParam._m0[91u].z, fma(_2225, cbSceneParam._m0[91u].y, _2223 * cbSceneParam._m0[91u].x));
    float _2270 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2274 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2278 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2282 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2283 = _2270 / _2282;
    float _2284 = _2274 / _2282;
    float _2285 = _2278 / _2282;
    float _2432;
    float _2433;
    float _2434;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2312 = ((uint(_2285 > cbSceneParam._m0[59u].y) + uint(_2285 > cbSceneParam._m0[59u].x)) + uint(_2285 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2313 = _2312 + 43u;
        uint _2321 = _2312 + 44u;
        uint _2329 = _2312 + 45u;
        uint _2337 = _2312 + 46u;
        float _2348 = fma(_2282, cbSceneParam._m0[_2313].w, fma(_2278, cbSceneParam._m0[_2313].z, fma(_2274, cbSceneParam._m0[_2313].y, _2270 * cbSceneParam._m0[_2313].x)));
        float _2352 = fma(_2282, cbSceneParam._m0[_2321].w, fma(_2278, cbSceneParam._m0[_2321].z, fma(_2274, cbSceneParam._m0[_2321].y, _2270 * cbSceneParam._m0[_2321].x)));
        float _2360 = fma(_2282, cbSceneParam._m0[_2337].w, fma(_2278, cbSceneParam._m0[_2337].z, fma(_2274, cbSceneParam._m0[_2337].y, _2270 * cbSceneParam._m0[_2337].x)));
        float _2365 = cbSceneParam._m0[33u].z * _2360;
        float _2367 = cbSceneParam._m0[33u].w * _2360;
        float _2370 = fma(_2282, cbSceneParam._m0[_2329].w, fma(_2278, cbSceneParam._m0[_2329].z, fma(_2274, cbSceneParam._m0[_2329].y, _2270 * cbSceneParam._m0[_2329].x))) / _2360;
        float _2418 = (cbSceneParam._m0[33u].x - sqrt(((_2284 * _2284) + (_2283 * _2283)) + (_2285 * _2285))) * cbSceneParam._m0[33u].y;
        float _4779 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2425 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2365 + _2348) / _2360, (_2367 + _2352) / _2360), _2370), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2367 + _2348) / _2360, (_2352 - _2365) / _2360), _2370), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2348 - _2365) / _2360, (_2352 - _2367) / _2360), _2370), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2348 - _2367) / _2360, (_2365 + _2352) / _2360), _2370), 0.0)).x), vec4(0.25)));
        _2432 = 1.0 - (_2425 * cbSceneParam._m0[34u].x);
        _2433 = 1.0 - (_2425 * cbSceneParam._m0[34u].y);
        _2434 = 1.0 - (_2425 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2432 = 1.0;
        _2433 = 1.0;
        _2434 = 1.0;
    }
    float _2498;
    float _2500;
    float _2502;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2486 = fma(_2282, cbSceneParam._m0[63u].w, fma(_2278, cbSceneParam._m0[63u].z, fma(_2274, cbSceneParam._m0[63u].y, _2270 * cbSceneParam._m0[63u].x)));
        float _2487 = fma(_2282, cbSceneParam._m0[60u].w, fma(_2278, cbSceneParam._m0[60u].z, fma(_2274, cbSceneParam._m0[60u].y, _2270 * cbSceneParam._m0[60u].x))) / _2486;
        float _2488 = fma(_2282, cbSceneParam._m0[61u].w, fma(_2278, cbSceneParam._m0[61u].z, fma(_2274, cbSceneParam._m0[61u].y, _2270 * cbSceneParam._m0[61u].x))) / _2486;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2487 >= cbSceneParam._m0[64u].x) && (_2488 >= cbSceneParam._m0[64u].y)) && (_2487 <= cbSceneParam._m0[64u].z)) && (_2488 <= cbSceneParam._m0[64u].w))
        {
            float _2626 = fma(_2282, cbSceneParam._m0[62u].w, fma(_2278, cbSceneParam._m0[62u].z, fma(_2274, cbSceneParam._m0[62u].y, _2270 * cbSceneParam._m0[62u].x))) / _2486;
            float _2630 = isnan(cbSceneParam._m0[41u].w) ? _2626 : (isnan(_2626) ? cbSceneParam._m0[41u].w : max(_2626, cbSceneParam._m0[41u].w));
            float _2673 = (cbSceneParam._m0[33u].x - sqrt(((_2284 * _2284) + (_2283 * _2283)) + (_2285 * _2285))) * cbSceneParam._m0[33u].y;
            float _4795 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
            float _2680 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2487, cbSceneParam._m0[33u].w + _2488), _2630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2487, _2488 - cbSceneParam._m0[33u].z), _2630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2487 - cbSceneParam._m0[33u].z, _2488 - cbSceneParam._m0[33u].w), _2630), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2487 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2488), _2630), 0.0)).x), vec4(0.25)));
            float _2684 = 1.0 - (_2680 * cbSceneParam._m0[34u].x);
            float _2685 = 1.0 - (_2680 * cbSceneParam._m0[34u].y);
            float _2686 = 1.0 - (_2680 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2686) ? _2434 : (isnan(_2434) ? _2686 : min(_2434, _2686));
            frontier_phi_34_33_ladder_1 = isnan(_2685) ? _2433 : (isnan(_2433) ? _2685 : min(_2433, _2685));
            frontier_phi_34_33_ladder_2 = isnan(_2684) ? _2432 : (isnan(_2432) ? _2684 : min(_2432, _2684));
        }
        else
        {
            frontier_phi_34_33_ladder = _2434;
            frontier_phi_34_33_ladder_1 = _2433;
            frontier_phi_34_33_ladder_2 = _2432;
        }
        _2498 = frontier_phi_34_33_ladder_2;
        _2500 = frontier_phi_34_33_ladder_1;
        _2502 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2498 = _2432;
        _2500 = _2433;
        _2502 = _2434;
    }
    uvec4 _2507 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2509 = _2507.x * 14u;
    uint _2510 = _2509 + 13u;
    float _2517 = _1210 + (-1.0);
    float _2522 = (cbLight._m0[_2510].x * _2517) + 1.0;
    float _2523 = (cbLight._m0[_2510].y * _2517) + 1.0;
    float _2524 = (cbLight._m0[_2510].z * _2517) + 1.0;
    float _2525 = (cbLight._m0[_2510].w * _2517) + 1.0;
    uint _2526 = _2509 + 5u;
    float _2532 = isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0));
    uint _2536 = _2509 + 4u;
    float _2545 = isnan(1.0) ? _2522 : (isnan(_2522) ? 1.0 : min(_2522, 1.0));
    uint _2549 = _2509 | 1u;
    float _2560 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_1045, _1046, _1047));
    float _2563 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_1045, _1046, _1047));
    float _4831 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _4842 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2568 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * 0.3183098733425140380859375;
    float _2570 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * 0.3183098733425140380859375;
    float _2577 = ((cbLight._m0[_2526].x * _2532) * _2570) + (((cbLight._m0[_2536].x * _2498) * _2545) * _2568);
    float _2578 = ((_2532 * cbLight._m0[_2526].y) * _2570) + (((cbLight._m0[_2536].y * _2500) * _2545) * _2568);
    float _2579 = ((_2532 * cbLight._m0[_2526].z) * _2570) + (((cbLight._m0[_2536].z * _2502) * _2545) * _2568);
    uvec4 _2583 = floatBitsToUint(cbLight._m0[_2509 + 12u]);
    bool _2585 = _2583.x == 0u;
    float _2687;
    float _2689;
    float _2691;
    if (_2585)
    {
        _2687 = _2577;
        _2689 = _2578;
        _2691 = _2579;
    }
    else
    {
        uint _2695 = _2509 + 6u;
        float _2711 = (dot(vec3(cbLight._m0[_2509 + 2u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2712 = _2711 * _2711;
        float _4853 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2713 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2714 = isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0));
        _2687 = (((cbLight._m0[_2695].x * 0.3183098733425140380859375) * _2713) * _2714) + _2577;
        _2689 = (((cbLight._m0[_2695].y * 0.3183098733425140380859375) * _2713) * _2714) + _2578;
        _2691 = (((cbLight._m0[_2695].z * 0.3183098733425140380859375) * _2713) * _2714) + _2579;
    }
    bool _2694 = _2583.y == 0u;
    float _2749;
    float _2751;
    float _2753;
    if (_2694)
    {
        _2749 = _2687;
        _2751 = _2689;
        _2753 = _2691;
    }
    else
    {
        uint _2922 = _2509 + 7u;
        float _2938 = (dot(vec3(cbLight._m0[_2509 + 3u].xyz), vec3(_1045, _1046, _1047)) * 0.5) + 0.5;
        float _2939 = _2938 * _2938;
        float _4869 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2940 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2941 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _2749 = (((cbLight._m0[_2922].x * 0.3183098733425140380859375) * _2940) * _2941) + _2687;
        _2751 = (((cbLight._m0[_2922].y * 0.3183098733425140380859375) * _2940) * _2941) + _2689;
        _2753 = (((cbLight._m0[_2922].z * 0.3183098733425140380859375) * _2940) * _2941) + _2691;
    }
    uint _2756 = _2509 + 8u;
    float _2769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _1048) * 0.949999988079071044921875);
    float _2770 = _2769 * _2769;
    float _2771 = cbLight._m0[_2509].x + _1124;
    float _2772 = cbLight._m0[_2509].y + _1125;
    float _2773 = cbLight._m0[_2509].z + _1126;
    float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
    float _2778 = _2777 * _2771;
    float _2779 = _2777 * _2772;
    float _2780 = _2777 * _2773;
    float _2781 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2509].xyz));
    float _4885 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
    float _2784 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
    float _4896 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _2785 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
    float _2786 = dot(vec3(_1045, _1046, _1047), vec3(_2778, _2779, _2780));
    float _4907 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
    float _2789 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
    float _2790 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2778, _2779, _2780));
    float _4918 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
    float _2794 = _2770 * _2770;
    float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
    float _2806 = exp2(log2(1.0 - (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) * 5.0);
    float _2807 = 0.959999978542327880859375 - _1191;
    float _2809 = 0.959999978542327880859375 - _1192;
    float _2810 = 0.959999978542327880859375 - _1193;
    float _2817 = 1.0 - _2770;
    float _2828 = (0.5 / (((_2785 * ((_2784 * _2817) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2785 * _2817) + _2770) * _2784))) * _2784;
    float _4929 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
    float _2830 = (isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
    uint _2844 = _2509 + 9u;
    float _2855 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _1048) * 0.949999988079071044921875);
    float _2856 = _2855 * _2855;
    float _2857 = cbLight._m0[_2549].x + _1124;
    float _2858 = cbLight._m0[_2549].y + _1125;
    float _2859 = cbLight._m0[_2549].z + _1126;
    float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
    float _2864 = _2863 * _2857;
    float _2865 = _2863 * _2858;
    float _2866 = _2863 * _2859;
    float _2867 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2549].xyz));
    float _4940 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
    float _2870 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
    float _2871 = dot(vec3(_1045, _1046, _1047), vec3(_2864, _2865, _2866));
    float _4951 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
    float _2874 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
    float _2875 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2864, _2865, _2866));
    float _4962 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
    float _2879 = _2856 * _2856;
    float _2883 = ((_2874 * _2874) * (_2879 + (-1.0))) + 1.0;
    float _2890 = exp2(log2(1.0 - (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) * 5.0);
    float _2897 = 1.0 - _2856;
    float _2907 = (0.5 / (((_2785 * ((_2870 * _2897) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2785 * _2897) + _2856) * _2870))) * _2870;
    float _4973 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2909 = (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0))) * (_2879 / ((_2883 * _2883) * 3.141590118408203125));
    float _2919 = (((((_2890 * _2807) + _1194) * cbLight._m0[_2844].x) * _2909) * _2532) + ((((cbLight._m0[_2756].x * _2498) * ((_2806 * _2807) + _1194)) * _2830) * _2545);
    float _2920 = (((((_2890 * _2809) + _1196) * cbLight._m0[_2844].y) * _2909) * _2532) + ((((cbLight._m0[_2756].y * _2500) * ((_2806 * _2809) + _1196)) * _2830) * _2545);
    float _2921 = (((((_2890 * _2810) + _1197) * cbLight._m0[_2844].z) * _2909) * _2532) + ((((cbLight._m0[_2756].z * _2502) * ((_2806 * _2810) + _1197)) * _2830) * _2545);
    float _2977;
    float _2979;
    float _2981;
    if (_2585)
    {
        _2977 = _2919;
        _2979 = _2920;
        _2981 = _2921;
    }
    else
    {
        uint _2983 = _2509 + 2u;
        uint _2987 = _2509 + 10u;
        float _3001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2983].w)) * _1048) * 0.949999988079071044921875);
        float _3002 = _3001 * _3001;
        float _3003 = cbLight._m0[_2983].x + _1124;
        float _3004 = cbLight._m0[_2983].y + _1125;
        float _3005 = cbLight._m0[_2983].z + _1126;
        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
        float _3010 = _3009 * _3003;
        float _3011 = _3009 * _3004;
        float _3012 = _3009 * _3005;
        float _3013 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_2983].xyz));
        float _4984 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3016 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _3017 = dot(vec3(_1045, _1046, _1047), vec3(_3010, _3011, _3012));
        float _4995 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        float _3020 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _3021 = dot(vec3(cbLight._m0[_2983].xyz), vec3(_3010, _3011, _3012));
        float _5006 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3025 = _3002 * _3002;
        float _3029 = ((_3020 * _3020) * (_3025 + (-1.0))) + 1.0;
        float _3036 = exp2(log2(1.0 - (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) * 5.0);
        float _3043 = 1.0 - _3002;
        float _3053 = (0.5 / (((_2785 * ((_3016 * _3043) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_2785 * _3043) + _3002) * _3016))) * _3016;
        float _5017 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3055 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_3025 / ((_3029 * _3029) * 3.141590118408203125));
        float _3056 = isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0));
        _2977 = (((((_3036 * _2807) + _1194) * cbLight._m0[_2987].x) * _3055) * _3056) + _2919;
        _2979 = (((((_3036 * _2809) + _1196) * cbLight._m0[_2987].y) * _3055) * _3056) + _2920;
        _2981 = (((((_3036 * _2810) + _1197) * cbLight._m0[_2987].z) * _3055) * _3056) + _2921;
    }
    float _3087;
    float _3089;
    float _3091;
    if (_2694)
    {
        _3087 = _2977;
        _3089 = _2979;
        _3091 = _2981;
    }
    else
    {
        uint _3098 = _2509 + 3u;
        uint _3102 = _2509 + 11u;
        float _3116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3098].w)) * _1048) * 0.949999988079071044921875);
        float _3117 = _3116 * _3116;
        float _3118 = cbLight._m0[_3098].x + _1124;
        float _3119 = cbLight._m0[_3098].y + _1125;
        float _3120 = cbLight._m0[_3098].z + _1126;
        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
        float _3125 = _3124 * _3118;
        float _3126 = _3124 * _3119;
        float _3127 = _3124 * _3120;
        float _3128 = dot(vec3(_1045, _1046, _1047), vec3(cbLight._m0[_3098].xyz));
        float _5033 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
        float _3131 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
        float _3132 = dot(vec3(_1045, _1046, _1047), vec3(_3125, _3126, _3127));
        float _5044 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
        float _3135 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
        float _3136 = dot(vec3(cbLight._m0[_3098].xyz), vec3(_3125, _3126, _3127));
        float _5055 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
        float _3140 = _3117 * _3117;
        float _3144 = ((_3135 * _3135) * (_3140 + (-1.0))) + 1.0;
        float _3151 = exp2(log2(1.0 - (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) * 5.0);
        float _3158 = 1.0 - _3117;
        float _3168 = (0.5 / (((_2785 * ((_3131 * _3158) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_2785 * _3158) + _3117) * _3131))) * _3131;
        float _5066 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        float _3170 = (isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3140 / ((_3144 * _3144) * 3.141590118408203125));
        float _3171 = isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0));
        _3087 = (((((_3151 * _2807) + _1194) * cbLight._m0[_3102].x) * _3170) * _3171) + _2977;
        _3089 = (((((_3151 * _2809) + _1196) * cbLight._m0[_3102].y) * _3170) * _3171) + _2979;
        _3091 = (((((_3151 * _2810) + _1197) * cbLight._m0[_3102].z) * _3170) * _3171) + _2981;
    }
    float _3237;
    float _3239;
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    if (_2507.y == 0u)
    {
        uvec4 _3192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3193 = _3192.x;
        uint _3204 = uint((float(_3192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1133) / _3193))) + floor(float(uint(cbSceneParam._m0[85u].x * _1132) / _3193)));
        float _3214 = (log2(_2285 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3215 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
        uint _3218 = uint(isnan(14.0) ? _3215 : (isnan(_3215) ? 14.0 : min(_3215, 14.0)));
        uvec4 _3223 = texelFetch(g_lightClusterGridBuffer, int(((_3218 << 2u) + (_3204 << 6u)) >> 2u));
        uint _3224 = _3223.x;
        uint _3225 = _3192.z;
        float _3304;
        float _3306;
        float _3308;
        float _3310;
        float _3312;
        float _3314;
        if (((((1u << ((_3225 >> 4u) & 15u)) + 4294967295u) & _3224) == 0u) || ((_3225 & 240u) == 0u))
        {
            _3304 = 0.0;
            _3306 = 0.0;
            _3308 = 0.0;
            _3310 = 0.0;
            _3312 = 0.0;
            _3314 = 0.0;
        }
        else
        {
            float _3305;
            float _3307;
            float _3309;
            float _3311;
            float _3313;
            float _3315;
            float _3449 = 0.0;
            float _3450 = 0.0;
            float _3451 = 0.0;
            float _3452 = 0.0;
            float _3453 = 0.0;
            float _3454 = 0.0;
            uint _3455 = 0u;
            uint _3464;
            bool _3465;
            for (;;)
            {
                _3464 = texelFetch(g_lightClassification, int((((_3218 << 5u) + (_3204 << 9u)) + (_3455 << 2u)) >> 2u)).x;
                _3465 = _3464 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3465)
                {
                    frontier_phi_66_pred = _3454;
                    frontier_phi_66_pred_1 = _3453;
                    frontier_phi_66_pred_2 = _3452;
                    frontier_phi_66_pred_3 = _3451;
                    frontier_phi_66_pred_4 = _3450;
                    frontier_phi_66_pred_5 = _3449;
                }
                else
                {
                    float _3573;
                    float _3574;
                    float _3575;
                    float _3576;
                    float _3577;
                    float _3578;
                    uint _3579;
                    _3573 = _3449;
                    _3574 = _3450;
                    _3575 = _3451;
                    _3576 = _3452;
                    _3577 = _3453;
                    _3578 = _3454;
                    _3579 = _3464;
                    float _3505;
                    float _3506;
                    float _3507;
                    float _3508;
                    float _3509;
                    float _3510;
                    for (;;)
                    {
                        uint _3583 = uint(findLSB(_3579)) + (_3455 << 5u);
                        uint _3580 = (_3579 + 4294967295u) & _3579;
                        uint _3585 = _3583 * 48u;
                        vec4 _3599 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 3u)).x));
                        uint _3605 = (_3583 * 48u) + 4u;
                        vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3605)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3605 + 3u)).x));
                        uint _3624 = (_3583 * 48u) + 8u;
                        vec3 _3635 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3624)).x, texelFetch(g_PointLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3624 + 2u)).x));
                        float _3639 = _3599.x - _2283;
                        float _3640 = _3599.y - _2284;
                        float _3641 = _3599.z - _2285;
                        float _3642 = dot(vec3(_3639, _3640, _3641), vec3(_3639, _3640, _3641));
                        float _3645 = inversesqrt(_3642);
                        float _3646 = _3645 * _3639;
                        float _3647 = _3645 * _3640;
                        float _3648 = _3645 * _3641;
                        float _3649 = dot(vec3(_1151, _1154, _1157), vec3(_3646, _3647, _3648));
                        float _3654 = 1.0 - (_3642 * _3599.w);
                        float _5092 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                        float _3655 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                        float _3656 = sqrt(_3642) * _3618.w;
                        float _3659 = 1.39999997615814208984375 / (_3656 + 1.39999997615814208984375);
                        float _3660 = _3659 * _3659;
                        float _3663 = ((1.0 - _3660) * _3649) + _3660;
                        float _3666 = _3656 * _3656;
                        float _3670 = ((isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0))) * _3655) / ((_3666 * 0.699999988079071044921875) + 1.0);
                        float _3674 = (-0.0) - _2283;
                        float _3675 = (-0.0) - _2284;
                        float _3676 = (-0.0) - _2285;
                        float _3680 = inversesqrt(dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676)));
                        float _3681 = _3680 * _3674;
                        float _3682 = _3680 * _3675;
                        float _3683 = _3680 * _3676;
                        float _3690 = exp2(log2(1.0 / ((_3666 * 3.5) + 5.0)) * 0.25);
                        float _3691 = 1.0 - _1226;
                        float _3698 = sqrt(1.0 - ((1.0 - (_3691 * _3691)) * (1.0 - (_3690 * _3690))));
                        float _3699 = _3698 * _3698;
                        float _3700 = _3699 * _3699;
                        float _3701 = _3681 + _3646;
                        float _3702 = _3682 + _3647;
                        float _3703 = _3683 + _3648;
                        float _3707 = inversesqrt(dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703)));
                        float _3711 = dot(vec3(_1151, _1154, _1157), vec3(_3681, _3682, _3683));
                        float _5108 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                        float _3714 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                        float _3715 = dot(vec3(_1151, _1154, _1157), vec3(_3707 * _3701, _3707 * _3702, _3707 * _3703));
                        float _5119 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                        float _3718 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                        float _3722 = ((_3718 * _3718) * (_3700 + (-1.0))) + 1.0;
                        float _3723 = _3659 * _3699;
                        float _3724 = _3723 * _3723;
                        float _3727 = ((1.0 - _3724) * _3649) + _3724;
                        float _5130 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                        float _3728 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                        float _3729 = 1.0 - _3699;
                        float _3739 = (0.5 / (((_3728 * ((_3714 * _3729) + _3699)) + 9.9999999392252902907785028219223e-09) + (((_3728 * _3729) + _3699) * _3714))) * _3728;
                        float _5141 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                        float _3750 = (((_3700 * 3.1415927410125732421875) * (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0)))) / ((_3722 * _3722) * ((_3666 * 2.1991131305694580078125) + 3.141590118408203125))) * _3655;
                        _3508 = (_3670 * _3618.x) + _3576;
                        _3509 = (_3670 * _3618.y) + _3577;
                        _3510 = (_3670 * _3618.z) + _3578;
                        _3505 = (_3750 * _3635.x) + _3573;
                        _3506 = (_3750 * _3635.y) + _3574;
                        _3507 = (_3750 * _3635.z) + _3575;
                        if (_3580 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3573 = _3505;
                            _3574 = _3506;
                            _3575 = _3507;
                            _3576 = _3508;
                            _3577 = _3509;
                            _3578 = _3510;
                            _3579 = _3580;
                        }
                    }
                    frontier_phi_66_pred = _3510;
                    frontier_phi_66_pred_1 = _3509;
                    frontier_phi_66_pred_2 = _3508;
                    frontier_phi_66_pred_3 = _3507;
                    frontier_phi_66_pred_4 = _3506;
                    frontier_phi_66_pred_5 = _3505;
                }
                _3315 = frontier_phi_66_pred;
                _3313 = frontier_phi_66_pred_1;
                _3311 = frontier_phi_66_pred_2;
                _3309 = frontier_phi_66_pred_3;
                _3307 = frontier_phi_66_pred_4;
                _3305 = frontier_phi_66_pred_5;
                uint _3456 = _3455 + 1u;
                if (_3456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3449 = _3305;
                    _3450 = _3307;
                    _3451 = _3309;
                    _3452 = _3311;
                    _3453 = _3313;
                    _3454 = _3315;
                    _3455 = _3456;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3304 = _3305;
            _3306 = _3307;
            _3308 = _3309;
            _3310 = _3311;
            _3312 = _3313;
            _3314 = _3315;
        }
        uvec4 _3318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3319 = _3318.z;
        uint _3321 = (_3319 >> 8u) & 15u;
        float _3417;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        float _3427;
        if (((4294967295u << _3321) & _3224) == 0u)
        {
            _3417 = _3304;
            _3419 = _3306;
            _3421 = _3308;
            _3423 = _3310;
            _3425 = _3312;
            _3427 = _3314;
        }
        else
        {
            float _3442 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
            float _3443 = _3442 * _2283;
            float _3444 = _3442 * _2284;
            float _3445 = _3442 * _2285;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3321 < ((_3319 >> 12u) & 15u))
            {
                float _3418;
                float _3420;
                float _3422;
                float _3424;
                float _3426;
                float _3428;
                float _3556 = _3304;
                float _3557 = _3306;
                float _3558 = _3308;
                float _3559 = _3310;
                float _3560 = _3312;
                float _3561 = _3314;
                uint _3562 = _3321;
                uint _3571;
                bool _3572;
                for (;;)
                {
                    _3571 = texelFetch(g_lightClassification, int((((_3218 << 5u) + (_3204 << 9u)) + (_3562 << 2u)) >> 2u)).x;
                    _3572 = _3571 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3572)
                    {
                        frontier_phi_72_pred = _3561;
                        frontier_phi_72_pred_1 = _3560;
                        frontier_phi_72_pred_2 = _3559;
                        frontier_phi_72_pred_3 = _3558;
                        frontier_phi_72_pred_4 = _3557;
                        frontier_phi_72_pred_5 = _3556;
                    }
                    else
                    {
                        float _3755;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _4048;
                        float _4049;
                        float _4050;
                        float _4051;
                        float _4052;
                        float _4053;
                        float _3768 = _3556;
                        float _3769 = _3557;
                        float _3770 = _3558;
                        float _3771 = _3559;
                        float _3772 = _3560;
                        float _3773 = _3561;
                        uint _3774 = _3571;
                        uint _3775;
                        vec4 _3800;
                        float _3801;
                        vec4 _3816;
                        vec3 _3828;
                        vec4 _3843;
                        vec4 _3858;
                        float _3904;
                        bool _3905;
                        for (;;)
                        {
                            uint _3785 = ((_3562 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3774));
                            _3775 = (_3774 + 4294967295u) & _3774;
                            uint _3787 = _3785 * 40u;
                            _3800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 3u)).x));
                            _3801 = _3800.w;
                            uint _3803 = (_3785 * 40u) + 4u;
                            _3816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3803 + 3u)).x));
                            uint _3818 = (_3785 * 40u) + 8u;
                            _3828 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 2u)).x));
                            uint _3830 = (_3785 * 40u) + 16u;
                            _3843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 3u)).x));
                            uint _3845 = (_3785 * 40u) + 20u;
                            _3858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 3u)).x));
                            uint _3860 = (_3785 * 40u) + 24u;
                            vec4 _3873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3860 + 3u)).x));
                            uint _3879 = (_3785 * 40u) + 28u;
                            vec4 _3892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 3u)).x));
                            _3904 = fma(_2285, _3892.z, fma(_2284, _3892.y, _3892.x * _2283)) + _3892.w;
                            _3905 = !((fma(_2285, _3873.z, fma(_2284, _3873.y, _3873.x * _2283)) + _3873.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3905)
                            {
                                float _3932 = _3800.x - _2283;
                                float _3933 = _3800.y - _2284;
                                float _3934 = _3800.z - _2285;
                                float _3935 = dot(vec3(_3932, _3933, _3934), vec3(_3932, _3933, _3934));
                                float _3938 = inversesqrt(_3935);
                                float _3939 = _3938 * _3932;
                                float _3940 = _3938 * _3933;
                                float _3941 = _3938 * _3934;
                                float _3945 = 1.0 - (_3935 / (_3801 * _3801));
                                float _5152 = isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0));
                                float _3946 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3950 = sqrt(_3935) * _3816.w;
                                float _3952 = 1.39999997615814208984375 / (_3950 + 1.39999997615814208984375);
                                float _3953 = _3952 * _3952;
                                float _3956 = ((1.0 - _3953) * dot(vec3(_3939, _3940, _3941), vec3(_1151, _1154, _1157))) + _3953;
                                float _3959 = _3950 * _3950;
                                float _3963 = (fma(_2285, _3843.z, fma(_2284, _3843.y, _3843.x * _2283)) + _3843.w) / _3904;
                                float _3964 = (fma(_2285, _3858.z, fma(_2284, _3858.y, _3858.x * _2283)) + _3858.w) / _3904;
                                float _3968 = 1.0 - dot(vec2(_3963, _3964), vec2(_3963, _3964));
                                float _5168 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3969 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
                                float _3970 = _3969 * (((isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0))) * _3946) / ((_3959 * 0.699999988079071044921875) + 1.0));
                                float _3982 = exp2(log2(1.0 / ((_3959 * 3.5) + 5.0)) * 0.25);
                                float _3983 = 1.0 - _1226;
                                float _3990 = sqrt(1.0 - ((1.0 - (_3983 * _3983)) * (1.0 - (_3982 * _3982))));
                                float _3991 = _3990 * _3990;
                                float _3992 = _3991 * _3991;
                                float _3993 = _3939 - _3443;
                                float _3994 = _3940 - _3444;
                                float _3995 = _3941 - _3445;
                                float _3999 = inversesqrt(dot(vec3(_3993, _3994, _3995), vec3(_3993, _3994, _3995)));
                                float _4003 = dot(vec3(_1151, _1154, _1157), vec3((-0.0) - _3443, (-0.0) - _3444, (-0.0) - _3445));
                                float _5179 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4006 = isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0));
                                float _4007 = dot(vec3(_1151, _1154, _1157), vec3(_3999 * _3993, _3999 * _3994, _3999 * _3995));
                                float _5190 = isnan(0.0) ? _4007 : (isnan(_4007) ? 0.0 : max(_4007, 0.0));
                                float _4010 = isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0));
                                float _4014 = ((_4010 * _4010) * (_3992 + (-1.0))) + 1.0;
                                float _4015 = _3952 * _3991;
                                float _4016 = _4015 * _4015;
                                float _4022 = ((1.0 - _4016) * dot(vec3(_1151, _1154, _1157), vec3(_3939, _3940, _3941))) + _4016;
                                float _5201 = isnan(0.0) ? _4022 : (isnan(_4022) ? 0.0 : max(_4022, 0.0));
                                float _4023 = isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0));
                                float _4024 = 1.0 - _3991;
                                float _4034 = (0.5 / (((_4023 * ((_4006 * _4024) + _3991)) + 9.9999999392252902907785028219223e-09) + (((_4023 * _4024) + _3991) * _4006))) * _4023;
                                float _5212 = isnan(0.0) ? _4034 : (isnan(_4034) ? 0.0 : max(_4034, 0.0));
                                float _4044 = (_3969 * _3946) * (((_3992 * 3.1415927410125732421875) * (isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0)))) / ((_4014 * _4014) * ((_3959 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3970 * _3816.y;
                                frontier_phi_78_pred_1 = _3970 * _3816.x;
                                frontier_phi_78_pred_2 = _4044 * _3828.z;
                                frontier_phi_78_pred_3 = _4044 * _3828.y;
                                frontier_phi_78_pred_4 = _4044 * _3828.x;
                                frontier_phi_78_pred_5 = _3970 * _3816.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4052 = frontier_phi_78_pred;
                            _4051 = frontier_phi_78_pred_1;
                            _4050 = frontier_phi_78_pred_2;
                            _4049 = frontier_phi_78_pred_3;
                            _4048 = frontier_phi_78_pred_4;
                            _4053 = frontier_phi_78_pred_5;
                            _3758 = _4051 + _3771;
                            _3759 = _4052 + _3772;
                            _3760 = _4053 + _3773;
                            _3755 = _4048 + _3768;
                            _3756 = _4049 + _3769;
                            _3757 = _4050 + _3770;
                            if (_3775 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3768 = _3755;
                                _3769 = _3756;
                                _3770 = _3757;
                                _3771 = _3758;
                                _3772 = _3759;
                                _3773 = _3760;
                                _3774 = _3775;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3760;
                        frontier_phi_72_pred_1 = _3759;
                        frontier_phi_72_pred_2 = _3758;
                        frontier_phi_72_pred_3 = _3757;
                        frontier_phi_72_pred_4 = _3756;
                        frontier_phi_72_pred_5 = _3755;
                    }
                    _3428 = frontier_phi_72_pred;
                    _3426 = frontier_phi_72_pred_1;
                    _3424 = frontier_phi_72_pred_2;
                    _3422 = frontier_phi_72_pred_3;
                    _3420 = frontier_phi_72_pred_4;
                    _3418 = frontier_phi_72_pred_5;
                    uint _3563 = _3562 + 1u;
                    if (_3563 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3556 = _3418;
                        _3557 = _3420;
                        _3558 = _3422;
                        _3559 = _3424;
                        _3560 = _3426;
                        _3561 = _3428;
                        _3562 = _3563;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3428;
                frontier_phi_60_61_ladder_1 = _3426;
                frontier_phi_60_61_ladder_2 = _3422;
                frontier_phi_60_61_ladder_3 = _3420;
                frontier_phi_60_61_ladder_4 = _3418;
                frontier_phi_60_61_ladder_5 = _3424;
            }
            else
            {
                frontier_phi_60_61_ladder = _3314;
                frontier_phi_60_61_ladder_1 = _3312;
                frontier_phi_60_61_ladder_2 = _3308;
                frontier_phi_60_61_ladder_3 = _3306;
                frontier_phi_60_61_ladder_4 = _3304;
                frontier_phi_60_61_ladder_5 = _3310;
            }
            _3417 = frontier_phi_60_61_ladder_4;
            _3419 = frontier_phi_60_61_ladder_3;
            _3421 = frontier_phi_60_61_ladder_2;
            _3423 = frontier_phi_60_61_ladder_5;
            _3425 = frontier_phi_60_61_ladder_1;
            _3427 = frontier_phi_60_61_ladder;
        }
        float _3432 = isnan(1.0) ? _1210 : (isnan(_1210) ? 1.0 : min(_1210, 1.0));
        _3237 = (_3432 * _3423) + _2749;
        _3239 = (_3432 * _3425) + _2751;
        _3241 = (_3432 * _3427) + _2753;
        _3243 = ((_3417 * _1194) * _3432) + _3087;
        _3245 = ((_3419 * _1196) * _3432) + _3089;
        _3247 = ((_3421 * _1197) * _3432) + _3091;
    }
    else
    {
        _3237 = _2749;
        _3239 = _2751;
        _3241 = _2753;
        _3243 = _3087;
        _3245 = _3089;
        _3247 = _3091;
    }
    float _5228 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _5239 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _5250 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    uint _3267 = _297 + 6u;
    float _3275 = _1132 / cbSceneParam._m0[86u].x;
    float _3276 = _1133 / cbSceneParam._m0[86u].y;
    vec4 _3290 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3275, _3276, (log2((isnan(cbSceneParam._m0[77u].w) ? _1067 : (isnan(_1067) ? cbSceneParam._m0[77u].w : min(_1067, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3292 = _3290.x;
    float _3293 = _3290.y;
    float _3294 = _3290.z;
    float _3295 = _3290.w;
    float _3367;
    float _3369;
    float _3371;
    float _3373;
    if (_1067 > cbSceneParam._m0[78u].w)
    {
        float _3329 = isnan(_1067) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1067 : min(cbSceneParam._m0[80u].w, _1067));
        float _3330 = _3329 / _1067;
        float _3341 = _3330 * _1117;
        float _3342 = _1118 * _3330;
        float _3343 = (-0.0) - _3342;
        float _3345 = _3330 * _1119;
        float _3347 = (cbSceneParam._m0[77u].w * _3343) / _3329;
        float _3348 = _3347 + cbSceneParam._m0[79u].w;
        float _3349 = cbSceneParam._m0[79u].w - _3342;
        float _3355 = sqrt(((_3341 * _3341) + (_3342 * _3342)) + (_3345 * _3345));
        float _3358 = (1.0 - (cbSceneParam._m0[77u].w / _3329)) * _3355;
        float _3363 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3365 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3518;
        if (abs((_3343 - _3347) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3518 = ((((_3348 > 0.0) ? exp2(_3363 * _3348) : (2.0 - exp2(_3365 * _3348))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3358;
        }
        else
        {
            float _3478 = 1.0 / cbSceneParam._m0[80u].x;
            float _3479 = isnan(_3349) ? _3348 : (isnan(_3348) ? _3349 : max(_3348, _3349));
            float _3480 = isnan(_3349) ? _3348 : (isnan(_3348) ? _3349 : min(_3348, _3349));
            float _3489 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : min(_3479, 0.0));
            float _3490 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : min(_3480, 0.0));
            _3518 = ((abs(_3355 / _3343) * cbSceneParam._m0[80u].y) * ((((_3489 - _3490) * 2.0) - ((exp2(_3363 * (isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0)))) - exp2(_3363 * (isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0))))) * _3478)) - ((exp2(_3365 * _3489) - exp2(_3365 * _3490)) * _3478))) + (_3358 * cbSceneParam._m0[80u].z);
        }
        vec4 _3520 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3275, _3276, 1.0), 0.0);
        float _3529 = exp2((_3518 * (-1.44269502162933349609375)) * (1.0 - _3520.w));
        float _3530 = log2(_3529);
        float _3546 = log2(_3295);
        _3367 = (exp2(_3546 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3530 * cbSceneParam._m0[78u].x)) * _3520.x) / cbSceneParam._m0[78u].x)) + _3292;
        _3369 = (exp2(_3546 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3530 * cbSceneParam._m0[78u].y)) * _3520.y) / cbSceneParam._m0[78u].y)) + _3293;
        _3371 = (exp2(_3546 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3530 * cbSceneParam._m0[78u].z)) * _3520.z) / cbSceneParam._m0[78u].z)) + _3294;
        _3373 = _3529 * _3295;
    }
    else
    {
        _3367 = _3292;
        _3369 = _3293;
        _3371 = _3294;
        _3373 = _3295;
    }
    float _3385 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3386 = _3385 == 3.0;
    float _3387 = log2(_3373);
    float _3394 = exp2(_3387 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0))) * (_3237 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1210))) + ((_3243 + ((isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3395 = exp2(_3387 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0))) * (_3239 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1210))) + ((_3245 + ((isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3396 = exp2(_3387 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0))) * (_3241 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1210))) + ((_3247 + ((isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0))) * _2017)) * cbPerFrame._m0[3u].x));
    float _3405 = (_3385 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3405 * (_3386 ? _3394 : (_3394 + (cbSceneParam._m0[72u].w * _3367)));
    SV_Target.y = _3405 * (_3386 ? _3395 : (_3395 + (cbSceneParam._m0[72u].w * _3369)));
    SV_Target.z = _3405 * (_3386 ? _3396 : (_3396 + (cbSceneParam._m0[72u].w * _3371)));
    SV_Target.w = cbInstanceData._m0[_3267].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3267].w;
}


