#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1503;
float _4165;
float _4166;
float _4167;
float _4168;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4177 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _426 = (_419 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _427 = (_419 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _428 = (_419 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4188 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _547 = ((_519.x - _538) * _419) + _538;
    float _548 = ((_519.y - _539) * _419) + _539;
    float _549 = ((_519.z - _540) * _419) + _540;
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _574 = ((_561.z - _549) * _492) + _549;
    float _577 = ((((_561.x - _547) * _492) + _547) * 2.0) + (-1.0);
    float _579 = ((((_561.y - _548) * _492) + _548) * 2.0) + (-1.0);
    float _580 = dot(vec2(_577, _579), vec2(_577, _579));
    float _4199 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _585 = sqrt(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _611 = (((_599.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _577;
    float _612 = (((_599.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _579;
    float _615 = fma(_585, _253, fma(_612, _260, _611 * _246));
    float _618 = fma(_585, _254, fma(_612, _261, _611 * _247));
    float _621 = fma(_585, _255, fma(_612, _262, _611 * _248));
    float _625 = inversesqrt(dot(vec3(_615, _618, _621), vec3(_615, _618, _621)));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _654 = _652.x;
    float _655 = 1.0 - _654;
    float _664 = (cbMtdParam._m0[19u].x + dot(vec4(_625 * _615, _625 * _618, _625 * _621, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_654 - _655) * cbMtdParam._m0[24u].z) + _655) * cbMtdParam._m0[21u].z);
    float _4210 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _667 = (-0.0) - cbMtdParam._m0[24u].x;
    float _669 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _669 : (isnan(_669) ? 1.0 : min(_669, 1.0));
    float _677 = _665 - ((_665 * TEXCOORD_8.x) * _670);
    float _678 = _665 - ((_665 * TEXCOORD_8.y) * _670);
    float _679 = _665 - ((_665 * TEXCOORD_8.z) * _670);
    float _686 = (_677 * (cbMtdParam._m0[17u].x - _499)) + _499;
    float _687 = (_678 * (cbMtdParam._m0[17u].y - _500)) + _500;
    float _688 = (_679 * (cbMtdParam._m0[17u].z - _501)) + _501;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _702 = _700.x;
    float _703 = 1.0 - _702;
    float _729 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_702 - _703) * cbMtdParam._m0[24u].w) + _703) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4231 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _738 = ((((cbMtdParam._m0[10u].x - _686) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _730) + _686;
    float _739 = ((((cbMtdParam._m0[10u].y - _687) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _730) + _687;
    float _740 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _688)) * _730) + _688;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _768 = _766.x;
    float _786 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _768) * _419) + _768;
    float _803 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _786) * _492) + _786;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _803) * cbMtdParam._m0[19u].z) + _803;
    float _809 = _807 - (_807 * _677);
    float _811 = _809 - (_809 * _730);
    float _815 = (cbMtdParam._m0[19u].w * (_599.z - _574)) + _574;
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _836 = (_829.x * 2.0) + (-1.0);
    float _837 = (_829.y * 2.0) + (-1.0);
    float _838 = dot(vec2(_836, _837), vec2(_836, _837));
    float _4242 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _846 = ((_829.z - _815) * _677) + _815;
    float _849 = ((cbMtdParam._m0[23u].x - _846) * _730) + _846;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _874 = (_868.x * 2.0) + (-1.0);
    float _875 = (_868.y * 2.0) + (-1.0);
    float _876 = dot(vec2(_874, _875), vec2(_874, _875));
    float _4253 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _891 = ((sqrt(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) - _585) * _679) + _585;
    float _894 = (((_836 - _611) * _677) + _611) + (cbMtdParam._m0[21u].x * _611);
    float _895 = (((_837 - _612) * _678) + _612) + (cbMtdParam._m0[21u].x * _612);
    float _906 = (((_874 - _894) + (_894 * cbMtdParam._m0[22u].z)) * _730) + _894;
    float _907 = (((_875 - _895) + (_895 * cbMtdParam._m0[22u].z)) * _730) + _895;
    float _908 = (_730 * (sqrt(1.0 - (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) - _891)) + _891;
    float _910 = cbMtdParam._m0[22u].x + _599.w;
    float _913 = fma(_908, _253, fma(_907, _260, _906 * _246));
    float _916 = fma(_908, _254, fma(_907, _261, _906 * _247));
    float _919 = fma(_908, _255, fma(_907, _262, _906 * _248));
    float _923 = inversesqrt(dot(vec3(_913, _916, _919), vec3(_913, _916, _919)));
    float _924 = _923 * _913;
    float _925 = _923 * _916;
    float _926 = _923 * _919;
    float _4264 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _927 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4286 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4297 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4308 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4319 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _932 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _946 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _996 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _986);
    float _997 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _986);
    float _998 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _986);
    float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
    float _1003 = _996 * _1002;
    float _1004 = _997 * _1002;
    float _1005 = _998 * _1002;
    vec4 _1010 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1012 = _1010.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1184 = sqrt(((_996 * _996) + (_997 * _997)) + (_998 * _998));
        float _1190 = (cbMatDynParam._m0[5u].x * _1184) + cbMatDynParam._m0[5u].y;
        float _4330 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1195 = (cbMatDynParam._m0[5u].z * _1184) + cbMatDynParam._m0[5u].w;
        float _4341 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) - _1191)) + _1191) < ((_1012 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1023 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1024 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1042 = fma(_926, cbSceneParam._m0[5u].z, fma(_925, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _924));
    float _1045 = fma(_926, cbSceneParam._m0[6u].z, fma(_925, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _924));
    float _1048 = fma(_926, cbSceneParam._m0[7u].z, fma(_925, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _924));
    uint _1061 = _265 + 9u;
    uint _1062 = _1061 + uint(cbMatDynParam._m0[0u].w);
    float _1068 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * cbInstanceData._m0[_1062].x;
    float _1069 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * cbInstanceData._m0[_1062].y;
    float _1070 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * cbInstanceData._m0[_1062].z;
    float _4352 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _4374 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _1074 = 1.0 - _932;
    float _1075 = _1071 * _1074;
    float _1076 = _1072 * _1074;
    float _1077 = _1073 * _1074;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _932;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _932;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _932;
    float _1085 = _1082 + 0.039999999105930328369140625;
    float _1087 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    vec4 _1097 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1023, cbSceneParam._m0[86u].y * _1024));
    float _1101 = ((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * TEXCOORD_5.w) * _1097.x;
    float _1102 = dot(vec3(_924, _925, _926), vec3(_1003, _1004, _1005));
    float _1105 = _1102 * 2.0;
    float _1109 = (_1105 * _924) - _1003;
    float _1110 = (_1105 * _925) - _1004;
    float _1111 = (_1105 * _926) - _1005;
    float _1115 = abs(dot(vec3(_1003, _1004, _1005), vec3(_924, _925, _926)));
    float _4385 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _1117 = sqrt(_927);
    float _1130 = exp2((_1117 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1117 * 3.0));
    float _1136 = (1.0 - _1130) * ((_1117 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1137 = _1130 * _1117;
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1502;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1227 = fma(_1173, cbModelParam._m0[26u].z, fma(_1169, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165));
        float _1231 = fma(_1173, cbModelParam._m0[27u].z, fma(_1169, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165));
        float _1235 = fma(_1173, cbModelParam._m0[28u].z, fma(_1169, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165));
        float _1260 = _1165 + _924;
        float _1261 = _1169 + _925;
        float _1262 = _1173 + _926;
        float _1272 = fma(_1262, cbModelParam._m0[26u].z, fma(_1261, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1260)) - _1227;
        float _1273 = fma(_1262, cbModelParam._m0[27u].z, fma(_1261, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1260)) - _1231;
        float _1274 = fma(_1262, cbModelParam._m0[28u].z, fma(_1261, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1260)) - _1235;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1227 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1231 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[34u].z) + ((((((_1235 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1330 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1296.x + (-0.5));
        float _1332 = _1330 * (_1296.y + (-0.5));
        float _1333 = _1330 * (_1296.z + (-0.5));
        float _1340 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1303.x + (-0.5));
        float _1342 = _1340 * (_1303.y + (-0.5));
        float _1343 = _1340 * (_1303.z + (-0.5));
        float _1350 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1310.x + (-0.5));
        float _1352 = _1350 * (_1310.y + (-0.5));
        float _1353 = _1350 * (_1310.z + (-0.5));
        float _1360 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1317.x + (-0.5));
        float _1362 = _1360 * (_1317.y + (-0.5));
        float _1363 = _1360 * (_1317.z + (-0.5));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = _1331 * 0.5;
        float _1368 = _1341 * 0.5;
        float _1369 = _1351 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1384 = (dot(vec3(_924, _925, _926), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1394 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4433 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1396 + 1.0))) + _1401) * _1364;
        float _1411 = _1332 * 0.5;
        float _1412 = _1342 * 0.5;
        float _1413 = _1352 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_924, _925, _926), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4466 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1438 + 1.0))) + _1443) * _1365;
        float _1453 = _1333 * 0.5;
        float _1454 = _1343 * 0.5;
        float _1455 = _1353 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_924, _925, _926), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _4499 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1480 + 1.0))) + _1485) * _1366;
        _1502 = _1333;
        _1504 = _1332;
        _1505 = _1331;
        _1506 = _1343;
        _1507 = _1342;
        _1508 = _1341;
        _1509 = _1353;
        _1510 = _1352;
        _1511 = _1351;
        _1512 = _1366;
        _1513 = _1365;
        _1514 = _1364;
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1516 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1503;
        _1504 = _1503;
        _1505 = _1503;
        _1506 = _1503;
        _1507 = _1503;
        _1508 = _1503;
        _1509 = _1503;
        _1510 = _1503;
        _1511 = _1503;
        _1512 = _1503;
        _1513 = _1503;
        _1514 = _1503;
        _1515 = 0.0;
        _1516 = 0.0;
        _1517 = 0.0;
    }
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1544 = fma(_1173, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165));
        float _1548 = fma(_1173, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165));
        float _1552 = fma(_1173, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165));
        float _1575 = _1165 + _924;
        float _1576 = _1169 + _925;
        float _1577 = _1173 + _926;
        float _1587 = fma(_1577, cbModelParam._m0[30u].z, fma(_1576, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1575)) - _1544;
        float _1588 = fma(_1577, cbModelParam._m0[31u].z, fma(_1576, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1575)) - _1548;
        float _1589 = fma(_1577, cbModelParam._m0[32u].z, fma(_1576, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1575)) - _1552;
        float _1593 = inversesqrt(dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589)));
        float _1606 = ((_1593 * _1587) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1544 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1607 = ((_1593 * _1588) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1548 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1593 * _1589) / cbModelParam._m0[35u].z) + ((((((_1552 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1610 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1617 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1624 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        vec4 _1631 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1606, _1607, _1608), 0.0);
        float _1643 = exp2((_1610.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1610.x + (-0.5));
        float _1645 = _1643 * (_1610.y + (-0.5));
        float _1646 = _1643 * (_1610.z + (-0.5));
        float _1653 = exp2((_1617.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1617.x + (-0.5));
        float _1655 = _1653 * (_1617.y + (-0.5));
        float _1656 = _1653 * (_1617.z + (-0.5));
        float _1663 = exp2((_1624.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1624.x + (-0.5));
        float _1665 = _1663 * (_1624.y + (-0.5));
        float _1666 = _1663 * (_1624.z + (-0.5));
        float _1673 = exp2((_1631.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1631.x + (-0.5));
        float _1675 = _1673 * (_1631.y + (-0.5));
        float _1676 = _1673 * (_1631.z + (-0.5));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = _1644 * 0.5;
        float _1681 = _1654 * 0.5;
        float _1682 = _1664 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_924, _925, _926), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4540 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4551 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4562 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_1707 + 1.0))) + _1712) * _1677;
        float _1722 = _1645 * 0.5;
        float _1723 = _1655 * 0.5;
        float _1724 = _1665 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_924, _925, _926), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4573 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4584 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4595 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_1749 + 1.0))) + _1754) * _1678;
        float _1764 = _1646 * 0.5;
        float _1765 = _1656 * 0.5;
        float _1766 = _1666 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_924, _925, _926), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4606 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4617 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4628 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_1791 + 1.0))) + _1796) * _1679;
        _1813 = _1646;
        _1814 = _1645;
        _1815 = _1644;
        _1816 = _1656;
        _1817 = _1655;
        _1818 = _1654;
        _1819 = _1666;
        _1820 = _1665;
        _1821 = _1664;
        _1822 = _1679;
        _1823 = _1678;
        _1824 = _1677;
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    }
    else
    {
        _1813 = _1503;
        _1814 = _1503;
        _1815 = _1503;
        _1816 = _1503;
        _1817 = _1503;
        _1818 = _1503;
        _1819 = _1503;
        _1820 = _1503;
        _1821 = _1503;
        _1822 = _1503;
        _1823 = _1503;
        _1824 = _1503;
        _1825 = 0.0;
        _1826 = 0.0;
        _1827 = 0.0;
    }
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1515)) + _1515;
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1516)) + _1516;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1517)) + _1517;
    float _1860 = fma(_1839, cbSceneParam._m0[89u].z, fma(_1838, cbSceneParam._m0[89u].y, _1837 * cbSceneParam._m0[89u].x));
    float _1863 = fma(_1839, cbSceneParam._m0[90u].z, fma(_1838, cbSceneParam._m0[90u].y, _1837 * cbSceneParam._m0[90u].x));
    float _1866 = fma(_1839, cbSceneParam._m0[91u].z, fma(_1838, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1837));
    float _1881 = _1109 * 0.5;
    float _1882 = _1110 * 0.5;
    float _1883 = _1111 * 0.5;
    float _1884 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1887 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1890 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1924;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1897 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1502, _1506, _1509, _1512));
        float _1901 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1504, _1507, _1510, _1513));
        float _1905 = dot(vec4(_1881, _1882, _1883, 1.0), vec4(_1505, _1508, _1511, _1514));
        float _1912 = dot(vec4(cbModelParam._m0[39u]), vec4(_1881, _1882, _1883, 1.0));
        _1924 = dot(vec3(isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1912) ? 0.0 : (isnan(0.0) ? _1912 : max(0.0, _1912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1924 = 1.0;
    }
    float _1935;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1926 = dot(vec4(cbModelParam._m0[40u]), vec4(_1881, _1882, _1883, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1926) ? 0.0 : (isnan(0.0) ? _1926 : max(0.0, _1926))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1939 = (_1935 * cbModelParam._m0[1u].x) + (_1924 * (1.0 - cbModelParam._m0[1u].x));
    float _1949 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1950 = isnan(_1949) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1949 : min(cbModelParam._m0[25u].z, _1949));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1998 = fma(_1173, cbModelParam._m0[13u].z, fma(_1169, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165)) + cbModelParam._m0[13u].w;
        float _2002 = fma(_1173, cbModelParam._m0[14u].z, fma(_1169, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165)) + cbModelParam._m0[14u].w;
        float _2006 = fma(_1173, cbModelParam._m0[15u].z, fma(_1169, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165)) + cbModelParam._m0[15u].w;
        float _2009 = fma(_1111, cbModelParam._m0[13u].z, fma(_1110, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1109));
        float _2012 = fma(_1111, cbModelParam._m0[14u].z, fma(_1110, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1109));
        float _2015 = fma(_1111, cbModelParam._m0[15u].z, fma(_1110, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1109));
        float _2043;
        if (_2009 > 0.0)
        {
            _2043 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2043 = frontier_phi_17_15_ladder;
        }
        float _2215;
        if (_2012 > 0.0)
        {
            _2215 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2215 = frontier_phi_26_22_ladder;
        }
        float _2510;
        if (_2015 > 0.0)
        {
            _2510 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2510 = frontier_phi_38_33_ladder;
        }
        float _2512 = isnan(_2215) ? _2043 : (isnan(_2043) ? _2215 : min(_2043, _2215));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _2009) + _1998;
        float _2518 = (_2513 * _2012) + _2002;
        float _2519 = (_2513 * _2015) + _2006;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2520;
        float _2524 = _2520 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 > _2524) || ((_2518 < _2522) || ((_2517 < _2522) || (_2517 > _2524))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2519, cbModelParam._m0[9u].z, fma(_2518, cbModelParam._m0[9u].y, _2517 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2519, cbModelParam._m0[10u].z, fma(_2518, cbModelParam._m0[10u].y, _2517 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2519, cbModelParam._m0[11u].z, fma(_2518, cbModelParam._m0[11u].y, _2517 * cbModelParam._m0[11u].x))), _1950);
            frontier_phi_16_38_ladder = _2664.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2664.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2664.x * cbModelParam._m0[1u].y;
        }
        _2031 = frontier_phi_16_38_ladder_2;
        _2033 = frontier_phi_16_38_ladder_1;
        _2035 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1109, _1110, _1111), _1950);
        _2031 = _2019.x * cbModelParam._m0[1u].y;
        _2033 = _2019.y * cbModelParam._m0[1u].y;
        _2035 = _2019.z * cbModelParam._m0[1u].y;
    }
    float _2039 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2039 : min(cbModelParam._m0[25u].w, _2039));
    float _2130;
    float _2132;
    float _2134;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2094 = fma(_1173, cbModelParam._m0[21u].z, fma(_1169, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165)) + cbModelParam._m0[21u].w;
        float _2098 = fma(_1173, cbModelParam._m0[22u].z, fma(_1169, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165)) + cbModelParam._m0[22u].w;
        float _2102 = fma(_1173, cbModelParam._m0[23u].z, fma(_1169, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165)) + cbModelParam._m0[23u].w;
        float _2105 = fma(_1111, cbModelParam._m0[21u].z, fma(_1110, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1109));
        float _2108 = fma(_1111, cbModelParam._m0[22u].z, fma(_1110, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1109));
        float _2111 = fma(_1111, cbModelParam._m0[23u].z, fma(_1110, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1109));
        float _2220;
        if (_2105 > 0.0)
        {
            _2220 = abs((1.0 - _2094) / _2105);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2094 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2220 = frontier_phi_28_24_ladder;
        }
        float _2537;
        if (_2108 > 0.0)
        {
            _2537 = abs((1.0 - _2098) / _2108);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2098 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2537 = frontier_phi_40_35_ladder;
        }
        float _2875;
        if (_2111 > 0.0)
        {
            _2875 = abs((1.0 - _2102) / _2111);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2102 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2875 = frontier_phi_50_47_ladder;
        }
        float _2877 = isnan(_2537) ? _2220 : (isnan(_2220) ? _2537 : min(_2220, _2537));
        float _2878 = isnan(_2875) ? _2877 : (isnan(_2877) ? _2875 : min(_2877, _2875));
        float _2882 = (_2878 * _2105) + _2094;
        float _2883 = (_2878 * _2108) + _2098;
        float _2884 = (_2878 * _2111) + _2102;
        float _2885 = _2878 * 9.9999997473787516355514526367188e-05;
        float _2886 = (-1.0) - _2885;
        float _2888 = _2885 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2884 > _2888) || ((_2884 < _2886) || ((_2883 > _2888) || ((_2883 < _2886) || ((_2882 < _2886) || (_2882 > _2888))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3006 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2884, cbModelParam._m0[17u].z, fma(_2883, cbModelParam._m0[17u].y, _2882 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2884, cbModelParam._m0[18u].z, fma(_2883, cbModelParam._m0[18u].y, _2882 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2884, cbModelParam._m0[19u].z, fma(_2883, cbModelParam._m0[19u].y, _2882 * cbModelParam._m0[19u].x))), _2040);
            frontier_phi_25_50_ladder = _3006.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3006.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3006.x * cbModelParam._m0[1u].z;
        }
        _2130 = frontier_phi_25_50_ladder_2;
        _2132 = frontier_phi_25_50_ladder_1;
        _2134 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1109, _1110, _1111), _2040);
        _2130 = _2114.x * cbModelParam._m0[1u].z;
        _2132 = _2114.y * cbModelParam._m0[1u].z;
        _2134 = _2114.z * cbModelParam._m0[1u].z;
    }
    float _2147 = (((_1136 * _1085) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2130 - _2031)) + _2031);
    float _2149 = (((_1136 * _1087) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2132 - _2033)) + _2033);
    float _2151 = (((_1136 * _1088) + _1137) * _1101) * ((cbModelParam._m0[1u].w * (_2134 - _2035)) + _2035);
    float _2154 = fma(_2151, cbSceneParam._m0[89u].z, fma(_2149, cbSceneParam._m0[89u].y, _2147 * cbSceneParam._m0[89u].x));
    float _2157 = fma(_2151, cbSceneParam._m0[90u].z, fma(_2149, cbSceneParam._m0[90u].y, _2147 * cbSceneParam._m0[90u].x));
    float _2160 = fma(_2151, cbSceneParam._m0[91u].z, fma(_2149, cbSceneParam._m0[91u].y, _2147 * cbSceneParam._m0[91u].x));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2206 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2207 = _2194 / _2206;
    float _2208 = _2198 / _2206;
    float _2209 = _2202 / _2206;
    float _2356;
    float _2357;
    float _2358;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2236 = ((uint(_2209 > cbSceneParam._m0[59u].y) + uint(_2209 > cbSceneParam._m0[59u].x)) + uint(_2209 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2237 = _2236 + 43u;
        uint _2245 = _2236 + 44u;
        uint _2253 = _2236 + 45u;
        uint _2261 = _2236 + 46u;
        float _2272 = fma(_2206, cbSceneParam._m0[_2237].w, fma(_2202, cbSceneParam._m0[_2237].z, fma(_2198, cbSceneParam._m0[_2237].y, _2194 * cbSceneParam._m0[_2237].x)));
        float _2276 = fma(_2206, cbSceneParam._m0[_2245].w, fma(_2202, cbSceneParam._m0[_2245].z, fma(_2198, cbSceneParam._m0[_2245].y, _2194 * cbSceneParam._m0[_2245].x)));
        float _2284 = fma(_2206, cbSceneParam._m0[_2261].w, fma(_2202, cbSceneParam._m0[_2261].z, fma(_2198, cbSceneParam._m0[_2261].y, _2194 * cbSceneParam._m0[_2261].x)));
        float _2289 = cbSceneParam._m0[33u].z * _2284;
        float _2291 = cbSceneParam._m0[33u].w * _2284;
        float _2294 = fma(_2206, cbSceneParam._m0[_2253].w, fma(_2202, cbSceneParam._m0[_2253].z, fma(_2198, cbSceneParam._m0[_2253].y, _2194 * cbSceneParam._m0[_2253].x))) / _2284;
        float _2342 = (cbSceneParam._m0[33u].x - sqrt(((_2208 * _2208) + (_2207 * _2207)) + (_2209 * _2209))) * cbSceneParam._m0[33u].y;
        float _4754 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2349 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2289 + _2272) / _2284, (_2291 + _2276) / _2284), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2291 + _2272) / _2284, (_2276 - _2289) / _2284), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 - _2289) / _2284, (_2276 - _2291) / _2284), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2272 - _2291) / _2284, (_2289 + _2276) / _2284), _2294), 0.0)).x), vec4(0.25)));
        _2356 = 1.0 - (_2349 * cbSceneParam._m0[34u].x);
        _2357 = 1.0 - (_2349 * cbSceneParam._m0[34u].y);
        _2358 = 1.0 - (_2349 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2356 = 1.0;
        _2357 = 1.0;
        _2358 = 1.0;
    }
    float _2422;
    float _2424;
    float _2426;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2410 = fma(_2206, cbSceneParam._m0[63u].w, fma(_2202, cbSceneParam._m0[63u].z, fma(_2198, cbSceneParam._m0[63u].y, _2194 * cbSceneParam._m0[63u].x)));
        float _2411 = fma(_2206, cbSceneParam._m0[60u].w, fma(_2202, cbSceneParam._m0[60u].z, fma(_2198, cbSceneParam._m0[60u].y, _2194 * cbSceneParam._m0[60u].x))) / _2410;
        float _2412 = fma(_2206, cbSceneParam._m0[61u].w, fma(_2202, cbSceneParam._m0[61u].z, fma(_2198, cbSceneParam._m0[61u].y, _2194 * cbSceneParam._m0[61u].x))) / _2410;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2411 >= cbSceneParam._m0[64u].x) && (_2412 >= cbSceneParam._m0[64u].y)) && (_2411 <= cbSceneParam._m0[64u].z)) && (_2412 <= cbSceneParam._m0[64u].w))
        {
            float _2550 = fma(_2206, cbSceneParam._m0[62u].w, fma(_2202, cbSceneParam._m0[62u].z, fma(_2198, cbSceneParam._m0[62u].y, _2194 * cbSceneParam._m0[62u].x))) / _2410;
            float _2554 = isnan(cbSceneParam._m0[41u].w) ? _2550 : (isnan(_2550) ? cbSceneParam._m0[41u].w : max(_2550, cbSceneParam._m0[41u].w));
            float _2597 = (cbSceneParam._m0[33u].x - sqrt(((_2208 * _2208) + (_2207 * _2207)) + (_2209 * _2209))) * cbSceneParam._m0[33u].y;
            float _4770 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
            float _2604 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2411, cbSceneParam._m0[33u].w + _2412), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2411, _2412 - cbSceneParam._m0[33u].z), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2411 - cbSceneParam._m0[33u].z, _2412 - cbSceneParam._m0[33u].w), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2411 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2412), _2554), 0.0)).x), vec4(0.25)));
            float _2608 = 1.0 - (_2604 * cbSceneParam._m0[34u].x);
            float _2609 = 1.0 - (_2604 * cbSceneParam._m0[34u].y);
            float _2610 = 1.0 - (_2604 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2610) ? _2358 : (isnan(_2358) ? _2610 : min(_2358, _2610));
            frontier_phi_37_36_ladder_1 = isnan(_2609) ? _2357 : (isnan(_2357) ? _2609 : min(_2357, _2609));
            frontier_phi_37_36_ladder_2 = isnan(_2608) ? _2356 : (isnan(_2356) ? _2608 : min(_2356, _2608));
        }
        else
        {
            frontier_phi_37_36_ladder = _2358;
            frontier_phi_37_36_ladder_1 = _2357;
            frontier_phi_37_36_ladder_2 = _2356;
        }
        _2422 = frontier_phi_37_36_ladder_2;
        _2424 = frontier_phi_37_36_ladder_1;
        _2426 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2422 = _2356;
        _2424 = _2357;
        _2426 = _2358;
    }
    uvec4 _2431 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2433 = _2431.x * 14u;
    uint _2434 = _2433 + 13u;
    float _2441 = _1101 + (-1.0);
    float _2446 = (cbLight._m0[_2434].x * _2441) + 1.0;
    float _2447 = (cbLight._m0[_2434].y * _2441) + 1.0;
    float _2448 = (cbLight._m0[_2434].z * _2441) + 1.0;
    float _2449 = (cbLight._m0[_2434].w * _2441) + 1.0;
    uint _2450 = _2433 + 5u;
    float _2456 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2460 = _2433 + 4u;
    float _2469 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
    uint _2473 = _2433 | 1u;
    float _2484 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_924, _925, _926));
    float _2487 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_924, _925, _926));
    float _4806 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _4817 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2492 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * 0.3183098733425140380859375;
    float _2494 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * 0.3183098733425140380859375;
    float _2501 = ((cbLight._m0[_2450].x * _2456) * _2494) + (((cbLight._m0[_2460].x * _2422) * _2469) * _2492);
    float _2502 = ((_2456 * cbLight._m0[_2450].y) * _2494) + (((cbLight._m0[_2460].y * _2424) * _2469) * _2492);
    float _2503 = ((_2456 * cbLight._m0[_2450].z) * _2494) + (((cbLight._m0[_2460].z * _2426) * _2469) * _2492);
    uvec4 _2507 = floatBitsToUint(cbLight._m0[_2433 + 12u]);
    bool _2509 = _2507.x == 0u;
    float _2611;
    float _2613;
    float _2615;
    if (_2509)
    {
        _2611 = _2501;
        _2613 = _2502;
        _2615 = _2503;
    }
    else
    {
        uint _2619 = _2433 + 6u;
        float _2635 = (dot(vec3(cbLight._m0[_2433 + 2u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2636 = _2635 * _2635;
        float _4828 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2637 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2638 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2611 = (((cbLight._m0[_2619].x * 0.3183098733425140380859375) * _2637) * _2638) + _2501;
        _2613 = (((cbLight._m0[_2619].y * 0.3183098733425140380859375) * _2637) * _2638) + _2502;
        _2615 = (((cbLight._m0[_2619].z * 0.3183098733425140380859375) * _2637) * _2638) + _2503;
    }
    bool _2618 = _2507.y == 0u;
    float _2673;
    float _2675;
    float _2677;
    if (_2618)
    {
        _2673 = _2611;
        _2675 = _2613;
        _2677 = _2615;
    }
    else
    {
        uint _2846 = _2433 + 7u;
        float _2862 = (dot(vec3(cbLight._m0[_2433 + 3u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2863 = _2862 * _2862;
        float _4844 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2864 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2865 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2673 = (((cbLight._m0[_2846].x * 0.3183098733425140380859375) * _2864) * _2865) + _2611;
        _2675 = (((cbLight._m0[_2846].y * 0.3183098733425140380859375) * _2864) * _2865) + _2613;
        _2677 = (((cbLight._m0[_2846].z * 0.3183098733425140380859375) * _2864) * _2865) + _2615;
    }
    uint _2680 = _2433 + 8u;
    float _2693 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _927) * 0.949999988079071044921875);
    float _2694 = _2693 * _2693;
    float _2695 = cbLight._m0[_2433].x + _1003;
    float _2696 = cbLight._m0[_2433].y + _1004;
    float _2697 = cbLight._m0[_2433].z + _1005;
    float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
    float _2702 = _2701 * _2695;
    float _2703 = _2701 * _2696;
    float _2704 = _2701 * _2697;
    float _2705 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2433].xyz));
    float _4860 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2708 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
    float _4871 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2709 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2710 = dot(vec3(_924, _925, _926), vec3(_2702, _2703, _2704));
    float _4882 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
    float _2714 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2702, _2703, _2704));
    float _4893 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2718 = _2694 * _2694;
    float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
    float _2730 = exp2(log2(1.0 - (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0)))) * 5.0);
    float _2731 = 0.959999978542327880859375 - _1082;
    float _2733 = 0.959999978542327880859375 - _1083;
    float _2734 = 0.959999978542327880859375 - _1084;
    float _2741 = 1.0 - _2694;
    float _2752 = (0.5 / (((_2709 * ((_2708 * _2741) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _2741) + _2694) * _2708))) * _2708;
    float _4904 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2754 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
    uint _2768 = _2433 + 9u;
    float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _927) * 0.949999988079071044921875);
    float _2780 = _2779 * _2779;
    float _2781 = cbLight._m0[_2473].x + _1003;
    float _2782 = cbLight._m0[_2473].y + _1004;
    float _2783 = cbLight._m0[_2473].z + _1005;
    float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
    float _2788 = _2787 * _2781;
    float _2789 = _2787 * _2782;
    float _2790 = _2787 * _2783;
    float _2791 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2473].xyz));
    float _4915 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2794 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
    float _2795 = dot(vec3(_924, _925, _926), vec3(_2788, _2789, _2790));
    float _4926 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2798 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
    float _2799 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2788, _2789, _2790));
    float _4937 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2803 = _2780 * _2780;
    float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
    float _2814 = exp2(log2(1.0 - (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) * 5.0);
    float _2821 = 1.0 - _2780;
    float _2831 = (0.5 / (((_2709 * ((_2794 * _2821) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _2821) + _2780) * _2794))) * _2794;
    float _4948 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
    float _2833 = (isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
    float _2843 = (((((_2814 * _2731) + _1085) * cbLight._m0[_2768].x) * _2833) * _2456) + ((((cbLight._m0[_2680].x * _2422) * ((_2730 * _2731) + _1085)) * _2754) * _2469);
    float _2844 = (((((_2814 * _2733) + _1087) * cbLight._m0[_2768].y) * _2833) * _2456) + ((((cbLight._m0[_2680].y * _2424) * ((_2730 * _2733) + _1087)) * _2754) * _2469);
    float _2845 = (((((_2814 * _2734) + _1088) * cbLight._m0[_2768].z) * _2833) * _2456) + ((((cbLight._m0[_2680].z * _2426) * ((_2730 * _2734) + _1088)) * _2754) * _2469);
    float _2901;
    float _2903;
    float _2905;
    if (_2509)
    {
        _2901 = _2843;
        _2903 = _2844;
        _2905 = _2845;
    }
    else
    {
        uint _2907 = _2433 + 2u;
        uint _2911 = _2433 + 10u;
        float _2925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2907].w)) * _927) * 0.949999988079071044921875);
        float _2926 = _2925 * _2925;
        float _2927 = cbLight._m0[_2907].x + _1003;
        float _2928 = cbLight._m0[_2907].y + _1004;
        float _2929 = cbLight._m0[_2907].z + _1005;
        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
        float _2934 = _2933 * _2927;
        float _2935 = _2933 * _2928;
        float _2936 = _2933 * _2929;
        float _2937 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2907].xyz));
        float _4959 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
        float _2941 = dot(vec3(_924, _925, _926), vec3(_2934, _2935, _2936));
        float _4970 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
        float _2945 = dot(vec3(cbLight._m0[_2907].xyz), vec3(_2934, _2935, _2936));
        float _4981 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2949 = _2926 * _2926;
        float _2953 = ((_2944 * _2944) * (_2949 + (-1.0))) + 1.0;
        float _2960 = exp2(log2(1.0 - (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) * 5.0);
        float _2967 = 1.0 - _2926;
        float _2977 = (0.5 / (((_2709 * ((_2940 * _2967) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _2967) + _2926) * _2940))) * _2940;
        float _4992 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2979 = (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2949 / ((_2953 * _2953) * 3.141590118408203125));
        float _2980 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
        _2901 = (((((_2960 * _2731) + _1085) * cbLight._m0[_2911].x) * _2979) * _2980) + _2843;
        _2903 = (((((_2960 * _2733) + _1087) * cbLight._m0[_2911].y) * _2979) * _2980) + _2844;
        _2905 = (((((_2960 * _2734) + _1088) * cbLight._m0[_2911].z) * _2979) * _2980) + _2845;
    }
    float _3011;
    float _3013;
    float _3015;
    if (_2618)
    {
        _3011 = _2901;
        _3013 = _2903;
        _3015 = _2905;
    }
    else
    {
        uint _3022 = _2433 + 3u;
        uint _3026 = _2433 + 11u;
        float _3040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3022].w)) * _927) * 0.949999988079071044921875);
        float _3041 = _3040 * _3040;
        float _3042 = cbLight._m0[_3022].x + _1003;
        float _3043 = cbLight._m0[_3022].y + _1004;
        float _3044 = cbLight._m0[_3022].z + _1005;
        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
        float _3049 = _3048 * _3042;
        float _3050 = _3048 * _3043;
        float _3051 = _3048 * _3044;
        float _3052 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_3022].xyz));
        float _5008 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3055 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _3056 = dot(vec3(_924, _925, _926), vec3(_3049, _3050, _3051));
        float _5019 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3059 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
        float _3060 = dot(vec3(cbLight._m0[_3022].xyz), vec3(_3049, _3050, _3051));
        float _5030 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3064 = _3041 * _3041;
        float _3068 = ((_3059 * _3059) * (_3064 + (-1.0))) + 1.0;
        float _3075 = exp2(log2(1.0 - (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) * 5.0);
        float _3082 = 1.0 - _3041;
        float _3092 = (0.5 / (((_2709 * ((_3055 * _3082) + _3041)) + 9.9999999392252902907785028219223e-09) + (((_2709 * _3082) + _3041) * _3055))) * _3055;
        float _5041 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        float _3094 = (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_3064 / ((_3068 * _3068) * 3.141590118408203125));
        float _3095 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _3011 = (((((_3075 * _2731) + _1085) * cbLight._m0[_3026].x) * _3094) * _3095) + _2901;
        _3013 = (((((_3075 * _2733) + _1087) * cbLight._m0[_3026].y) * _3094) * _3095) + _2903;
        _3015 = (((((_3075 * _2734) + _1088) * cbLight._m0[_3026].z) * _3094) * _3095) + _2905;
    }
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_2431.y == 0u)
    {
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.x;
        uint _3128 = uint((float(_3116.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1024) / _3117))) + floor(float(uint(cbSceneParam._m0[85u].x * _1023) / _3117)));
        float _3138 = (log2(_2209 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3139 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
        uint _3142 = uint(isnan(14.0) ? _3139 : (isnan(_3139) ? 14.0 : min(_3139, 14.0)));
        uvec4 _3147 = texelFetch(g_lightClusterGridBuffer, int(((_3142 << 2u) + (_3128 << 6u)) >> 2u));
        uint _3148 = _3147.x;
        uint _3149 = _3116.z;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((((1u << ((_3149 >> 4u) & 15u)) + 4294967295u) & _3148) == 0u) || ((_3149 & 240u) == 0u))
        {
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
            _3238 = 0.0;
        }
        else
        {
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3237;
            float _3239;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            uint _3386 = 0u;
            uint _3395;
            bool _3396;
            for (;;)
            {
                _3395 = texelFetch(g_lightClassification, int((((_3142 << 5u) + (_3128 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                _3396 = _3395 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3396)
                {
                    frontier_phi_71_pred = _3385;
                    frontier_phi_71_pred_1 = _3384;
                    frontier_phi_71_pred_2 = _3383;
                    frontier_phi_71_pred_3 = _3382;
                    frontier_phi_71_pred_4 = _3381;
                    frontier_phi_71_pred_5 = _3380;
                }
                else
                {
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    float _3529;
                    float _3530;
                    uint _3531;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3395;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    for (;;)
                    {
                        uint _3535 = uint(findLSB(_3531)) + (_3386 << 5u);
                        uint _3532 = (_3531 + 4294967295u) & _3531;
                        uint _3537 = _3535 * 48u;
                        vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 3u)).x));
                        uint _3557 = (_3535 * 48u) + 4u;
                        vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3557)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 3u)).x));
                        uint _3576 = (_3535 * 48u) + 8u;
                        vec3 _3587 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3576)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 2u)).x));
                        float _3591 = _3551.x - _2207;
                        float _3592 = _3551.y - _2208;
                        float _3593 = _3551.z - _2209;
                        float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                        float _3597 = inversesqrt(_3594);
                        float _3598 = _3597 * _3591;
                        float _3599 = _3597 * _3592;
                        float _3600 = _3597 * _3593;
                        float _3601 = dot(vec3(_1042, _1045, _1048), vec3(_3598, _3599, _3600));
                        float _3606 = 1.0 - (_3594 * _3551.w);
                        float _5067 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3608 = sqrt(_3594) * _3570.w;
                        float _3611 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                        float _3612 = _3611 * _3611;
                        float _3615 = ((1.0 - _3612) * _3601) + _3612;
                        float _3618 = _3608 * _3608;
                        float _3622 = ((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3607) / ((_3618 * 0.699999988079071044921875) + 1.0);
                        float _3626 = (-0.0) - _2207;
                        float _3627 = (-0.0) - _2208;
                        float _3628 = (-0.0) - _2209;
                        float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                        float _3633 = _3632 * _3626;
                        float _3634 = _3632 * _3627;
                        float _3635 = _3632 * _3628;
                        float _3642 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                        float _3643 = 1.0 - _1117;
                        float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                        float _3651 = _3650 * _3650;
                        float _3652 = _3651 * _3651;
                        float _3653 = _3633 + _3598;
                        float _3654 = _3634 + _3599;
                        float _3655 = _3635 + _3600;
                        float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                        float _3663 = dot(vec3(_1042, _1045, _1048), vec3(_3633, _3634, _3635));
                        float _5083 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3666 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                        float _3667 = dot(vec3(_1042, _1045, _1048), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                        float _5094 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3670 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                        float _3675 = _3611 * _3651;
                        float _3676 = _3675 * _3675;
                        float _3679 = ((1.0 - _3676) * _3601) + _3676;
                        float _5105 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                        float _3680 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                        float _3681 = 1.0 - _3651;
                        float _3691 = (0.5 / (((_3680 * ((_3666 * _3681) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3680 * _3681) + _3651) * _3666))) * _3680;
                        float _5116 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3702 = (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0)))) / ((_3674 * _3674) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125))) * _3607;
                        _3455 = (_3622 * _3570.x) + _3528;
                        _3456 = (_3622 * _3570.y) + _3529;
                        _3457 = (_3622 * _3570.z) + _3530;
                        _3452 = (_3702 * _3587.x) + _3525;
                        _3453 = (_3702 * _3587.y) + _3526;
                        _3454 = (_3702 * _3587.z) + _3527;
                        if (_3532 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3532;
                        }
                    }
                    frontier_phi_71_pred = _3457;
                    frontier_phi_71_pred_1 = _3456;
                    frontier_phi_71_pred_2 = _3455;
                    frontier_phi_71_pred_3 = _3454;
                    frontier_phi_71_pred_4 = _3453;
                    frontier_phi_71_pred_5 = _3452;
                }
                _3239 = frontier_phi_71_pred;
                _3237 = frontier_phi_71_pred_1;
                _3235 = frontier_phi_71_pred_2;
                _3233 = frontier_phi_71_pred_3;
                _3231 = frontier_phi_71_pred_4;
                _3229 = frontier_phi_71_pred_5;
                uint _3387 = _3386 + 1u;
                if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3380 = _3229;
                    _3381 = _3231;
                    _3382 = _3233;
                    _3383 = _3235;
                    _3384 = _3237;
                    _3385 = _3239;
                    _3386 = _3387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
            _3238 = _3239;
        }
        uvec4 _3242 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3243 = _3242.z;
        uint _3245 = (_3243 >> 8u) & 15u;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        if (((4294967295u << _3245) & _3148) == 0u)
        {
            _3348 = _3228;
            _3350 = _3230;
            _3352 = _3232;
            _3354 = _3234;
            _3356 = _3236;
            _3358 = _3238;
        }
        else
        {
            float _3373 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
            float _3374 = _3373 * _2207;
            float _3375 = _3373 * _2208;
            float _3376 = _3373 * _2209;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3245 < ((_3243 >> 12u) & 15u))
            {
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3508 = _3228;
                float _3509 = _3230;
                float _3510 = _3232;
                float _3511 = _3234;
                float _3512 = _3236;
                float _3513 = _3238;
                uint _3514 = _3245;
                uint _3523;
                bool _3524;
                for (;;)
                {
                    _3523 = texelFetch(g_lightClassification, int((((_3142 << 5u) + (_3128 << 9u)) + (_3514 << 2u)) >> 2u)).x;
                    _3524 = _3523 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3524)
                    {
                        frontier_phi_82_pred = _3513;
                        frontier_phi_82_pred_1 = _3512;
                        frontier_phi_82_pred_2 = _3511;
                        frontier_phi_82_pred_3 = _3510;
                        frontier_phi_82_pred_4 = _3509;
                        frontier_phi_82_pred_5 = _3508;
                    }
                    else
                    {
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _4009;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        float _3731 = _3510;
                        float _3732 = _3511;
                        float _3733 = _3512;
                        float _3734 = _3513;
                        uint _3735 = _3523;
                        uint _3736;
                        vec4 _3761;
                        float _3762;
                        vec4 _3777;
                        vec3 _3789;
                        vec4 _3804;
                        vec4 _3819;
                        float _3865;
                        bool _3866;
                        for (;;)
                        {
                            uint _3746 = ((_3514 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3735));
                            _3736 = (_3735 + 4294967295u) & _3735;
                            uint _3748 = _3746 * 40u;
                            _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            _3762 = _3761.w;
                            uint _3764 = (_3746 * 40u) + 4u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3779 = (_3746 * 40u) + 8u;
                            _3789 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x));
                            uint _3791 = (_3746 * 40u) + 16u;
                            _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            uint _3806 = (_3746 * 40u) + 20u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3746 * 40u) + 24u;
                            vec4 _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3840 = (_3746 * 40u) + 28u;
                            vec4 _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            _3865 = fma(_2209, _3853.z, fma(_2208, _3853.y, _3853.x * _2207)) + _3853.w;
                            _3866 = !((fma(_2209, _3834.z, fma(_2208, _3834.y, _3834.x * _2207)) + _3834.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3866)
                            {
                                float _3893 = _3761.x - _2207;
                                float _3894 = _3761.y - _2208;
                                float _3895 = _3761.z - _2209;
                                float _3896 = dot(vec3(_3893, _3894, _3895), vec3(_3893, _3894, _3895));
                                float _3899 = inversesqrt(_3896);
                                float _3900 = _3899 * _3893;
                                float _3901 = _3899 * _3894;
                                float _3902 = _3899 * _3895;
                                float _3906 = 1.0 - (_3896 / (_3762 * _3762));
                                float _5127 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3907 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3911 = sqrt(_3896) * _3777.w;
                                float _3913 = 1.39999997615814208984375 / (_3911 + 1.39999997615814208984375);
                                float _3914 = _3913 * _3913;
                                float _3917 = ((1.0 - _3914) * dot(vec3(_3900, _3901, _3902), vec3(_1042, _1045, _1048))) + _3914;
                                float _3920 = _3911 * _3911;
                                float _3924 = (fma(_2209, _3804.z, fma(_2208, _3804.y, _3804.x * _2207)) + _3804.w) / _3865;
                                float _3925 = (fma(_2209, _3819.z, fma(_2208, _3819.y, _3819.x * _2207)) + _3819.w) / _3865;
                                float _3929 = 1.0 - dot(vec2(_3924, _3925), vec2(_3924, _3925));
                                float _5143 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3930 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                                float _3931 = _3930 * (((isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0))) * _3907) / ((_3920 * 0.699999988079071044921875) + 1.0));
                                float _3943 = exp2(log2(1.0 / ((_3920 * 3.5) + 5.0)) * 0.25);
                                float _3944 = 1.0 - _1117;
                                float _3951 = sqrt(1.0 - ((1.0 - (_3944 * _3944)) * (1.0 - (_3943 * _3943))));
                                float _3952 = _3951 * _3951;
                                float _3953 = _3952 * _3952;
                                float _3954 = _3900 - _3374;
                                float _3955 = _3901 - _3375;
                                float _3956 = _3902 - _3376;
                                float _3960 = inversesqrt(dot(vec3(_3954, _3955, _3956), vec3(_3954, _3955, _3956)));
                                float _3964 = dot(vec3(_1042, _1045, _1048), vec3((-0.0) - _3374, (-0.0) - _3375, (-0.0) - _3376));
                                float _5154 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3967 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _3968 = dot(vec3(_1042, _1045, _1048), vec3(_3960 * _3954, _3960 * _3955, _3960 * _3956));
                                float _5165 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3971 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                                float _3975 = ((_3971 * _3971) * (_3953 + (-1.0))) + 1.0;
                                float _3976 = _3913 * _3952;
                                float _3977 = _3976 * _3976;
                                float _3983 = ((1.0 - _3977) * dot(vec3(_1042, _1045, _1048), vec3(_3900, _3901, _3902))) + _3977;
                                float _5176 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3984 = isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0));
                                float _3985 = 1.0 - _3952;
                                float _3995 = (0.5 / (((_3984 * ((_3967 * _3985) + _3952)) + 9.9999999392252902907785028219223e-09) + (((_3984 * _3985) + _3952) * _3967))) * _3984;
                                float _5187 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _4005 = (_3930 * _3907) * (((_3953 * 3.1415927410125732421875) * (isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0)))) / ((_3975 * _3975) * ((_3920 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3931 * _3777.z;
                                frontier_phi_88_pred_1 = _3931 * _3777.y;
                                frontier_phi_88_pred_2 = _3931 * _3777.x;
                                frontier_phi_88_pred_3 = _4005 * _3789.z;
                                frontier_phi_88_pred_4 = _4005 * _3789.y;
                                frontier_phi_88_pred_5 = _4005 * _3789.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4014 = frontier_phi_88_pred;
                            _4013 = frontier_phi_88_pred_1;
                            _4012 = frontier_phi_88_pred_2;
                            _4011 = frontier_phi_88_pred_3;
                            _4010 = frontier_phi_88_pred_4;
                            _4009 = frontier_phi_88_pred_5;
                            _3719 = _4012 + _3732;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3716 = _4009 + _3729;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            if (_3736 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3736;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3721;
                        frontier_phi_82_pred_1 = _3720;
                        frontier_phi_82_pred_2 = _3719;
                        frontier_phi_82_pred_3 = _3718;
                        frontier_phi_82_pred_4 = _3717;
                        frontier_phi_82_pred_5 = _3716;
                    }
                    _3359 = frontier_phi_82_pred;
                    _3357 = frontier_phi_82_pred_1;
                    _3355 = frontier_phi_82_pred_2;
                    _3353 = frontier_phi_82_pred_3;
                    _3351 = frontier_phi_82_pred_4;
                    _3349 = frontier_phi_82_pred_5;
                    uint _3515 = _3514 + 1u;
                    if (_3515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3508 = _3349;
                        _3509 = _3351;
                        _3510 = _3353;
                        _3511 = _3355;
                        _3512 = _3357;
                        _3513 = _3359;
                        _3514 = _3515;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3355;
                frontier_phi_63_64_ladder_1 = _3359;
                frontier_phi_63_64_ladder_2 = _3357;
                frontier_phi_63_64_ladder_3 = _3353;
                frontier_phi_63_64_ladder_4 = _3351;
                frontier_phi_63_64_ladder_5 = _3349;
            }
            else
            {
                frontier_phi_63_64_ladder = _3234;
                frontier_phi_63_64_ladder_1 = _3238;
                frontier_phi_63_64_ladder_2 = _3236;
                frontier_phi_63_64_ladder_3 = _3232;
                frontier_phi_63_64_ladder_4 = _3230;
                frontier_phi_63_64_ladder_5 = _3228;
            }
            _3348 = frontier_phi_63_64_ladder_5;
            _3350 = frontier_phi_63_64_ladder_4;
            _3352 = frontier_phi_63_64_ladder_3;
            _3354 = frontier_phi_63_64_ladder;
            _3356 = frontier_phi_63_64_ladder_2;
            _3358 = frontier_phi_63_64_ladder_1;
        }
        float _3363 = isnan(1.0) ? _1101 : (isnan(_1101) ? 1.0 : min(_1101, 1.0));
        _3161 = (_3363 * _3354) + _2673;
        _3163 = (_3363 * _3356) + _2675;
        _3165 = (_3363 * _3358) + _2677;
        _3167 = ((_3348 * _1085) * _3363) + _3011;
        _3169 = ((_3350 * _1087) * _3363) + _3013;
        _3171 = ((_3352 * _1088) * _3363) + _3015;
    }
    else
    {
        _3161 = _2673;
        _3163 = _2675;
        _3165 = _2677;
        _3167 = _3011;
        _3169 = _3013;
        _3171 = _3015;
    }
    float _5203 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _5214 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _5225 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _3188 = ((isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0))) * (_3161 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1101))) + ((_3167 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _3189 = ((isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0))) * (_3163 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1101))) + ((_3169 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    float _3190 = ((isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0))) * (_3165 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1101))) + ((_3171 + ((isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0))) * _1939)) * cbPerFrame._m0[3u].x);
    uint _3191 = _265 + 6u;
    float _3199 = _1023 / cbSceneParam._m0[86u].x;
    float _3200 = _1024 / cbSceneParam._m0[86u].y;
    vec4 _3214 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3199, _3200, (log2((isnan(cbSceneParam._m0[77u].w) ? _946 : (isnan(_946) ? cbSceneParam._m0[77u].w : min(_946, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3216 = _3214.x;
    float _3217 = _3214.y;
    float _3218 = _3214.z;
    float _3219 = _3214.w;
    float _3290;
    float _3292;
    float _3294;
    float _3296;
    if (_946 > cbSceneParam._m0[78u].w)
    {
        float _3253 = isnan(_946) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _946 : min(cbSceneParam._m0[80u].w, _946));
        float _3254 = _3253 / _946;
        float _3265 = _3254 * _996;
        float _3266 = _997 * _3254;
        float _3267 = (-0.0) - _3266;
        float _3268 = _3254 * _998;
        float _3270 = (cbSceneParam._m0[77u].w * _3267) / _3253;
        float _3271 = _3270 + cbSceneParam._m0[79u].w;
        float _3272 = cbSceneParam._m0[79u].w - _3266;
        float _3278 = sqrt(((_3265 * _3265) + (_3266 * _3266)) + (_3268 * _3268));
        float _3281 = (1.0 - (cbSceneParam._m0[77u].w / _3253)) * _3278;
        float _3286 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3288 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3465;
        if (abs((_3267 - _3270) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3465 = ((((_3271 > 0.0) ? exp2(_3286 * _3271) : (2.0 - exp2(_3288 * _3271))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3281;
        }
        else
        {
            float _3409 = 1.0 / cbSceneParam._m0[80u].x;
            float _3410 = isnan(_3272) ? _3271 : (isnan(_3271) ? _3272 : max(_3271, _3272));
            float _3411 = isnan(_3272) ? _3271 : (isnan(_3271) ? _3272 : min(_3271, _3272));
            float _3420 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : min(_3410, 0.0));
            float _3421 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : min(_3411, 0.0));
            _3465 = ((abs(_3278 / _3267) * cbSceneParam._m0[80u].y) * ((((_3420 - _3421) * 2.0) - ((exp2(_3286 * (isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0)))) - exp2(_3286 * (isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))))) * _3409)) - ((exp2(_3288 * _3420) - exp2(_3288 * _3421)) * _3409))) + (_3281 * cbSceneParam._m0[80u].z);
        }
        vec4 _3467 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3199, _3200, 1.0), 0.0);
        float _3476 = exp2((_3465 * (-1.44269502162933349609375)) * (1.0 - _3467.w));
        float _3477 = log2(_3476);
        float _3493 = log2(_3219);
        _3290 = (exp2(_3493 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].x)) * _3467.x) / cbSceneParam._m0[78u].x)) + _3216;
        _3292 = (exp2(_3493 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].y)) * _3467.y) / cbSceneParam._m0[78u].y)) + _3217;
        _3294 = (exp2(_3493 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].z)) * _3467.z) / cbSceneParam._m0[78u].z)) + _3218;
        _3296 = _3476 * _3219;
    }
    else
    {
        _3290 = _3216;
        _3292 = _3217;
        _3294 = _3218;
        _3296 = _3219;
    }
    bool _3503;
    vec4 _3306;
    vec4 _3328;
    float _3330;
    float _3334;
    float _3335;
    float _3336;
    float _3337;
    bool _3347;
    for (;;)
    {
        _3306 = cbMatDynParam._m0[0u];
        float _3308 = roundEven(_3306.y);
        bool _3309 = _3308 == 3.0;
        float _3310 = log2(_3296);
        float _3317 = exp2(_3310 * cbSceneParam._m0[78u].x) * _3188;
        float _3318 = exp2(_3310 * cbSceneParam._m0[78u].y) * _3189;
        float _3319 = exp2(_3310 * cbSceneParam._m0[78u].z) * _3190;
        float _3326 = _1012 + (-0.5);
        _3328 = cbMtdParam._m0[1u];
        _3330 = _3328.y * _3326;
        float _3333 = (_3308 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3334 = _3333 * (_3309 ? _3317 : (_3317 + (cbSceneParam._m0[72u].w * _3290)));
        _3335 = _3333 * (_3309 ? _3318 : (_3318 + (cbSceneParam._m0[72u].w * _3292)));
        _3336 = _3333 * (_3309 ? _3319 : (_3319 + (cbSceneParam._m0[72u].w * _3294)));
        _3337 = _3326 * 0.999000012874603271484375;
        _3347 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3347)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3337) < 0.5)
            {
                _3503 = true;
                break;
            }
        }
        uint _3444 = _1061 + uint(_3306.w);
        if ((cbInstanceData._m0[_3444].w < 1.0) && ((cbInstanceData._m0[_3444].w + _3337) < 0.5))
        {
            _3503 = true;
            break;
        }
        if ((_3330 + 1.0) < _3328.x)
        {
            _3503 = true;
            break;
        }
        _3503 = false;
        break;
    }
    float _3707;
    if (_3503)
    {
        discard_state = true;
        _3707 = 0.0;
    }
    else
    {
        _3707 = cbInstanceData._m0[_3191].w;
    }
    SV_Target.x = _3334;
    SV_Target.y = _3335;
    SV_Target.z = _3336;
    SV_Target.w = _3707;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3191].w;
    discard_exit();
}


