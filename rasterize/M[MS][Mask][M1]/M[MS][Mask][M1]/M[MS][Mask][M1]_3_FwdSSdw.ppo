#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1183;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3537 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3548 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3559 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    uint _264 = uint(roundEven(NORMAL.w)) * 13u;
    uint _269 = _264 + 1u;
    uint _273 = _264 + 2u;
    float _282 = sqrt(((cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x)) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x));
    float _283 = _282 * TEXCOORD.z;
    float _284 = _282 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _283) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _284) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _326 = _321.x * cbMtdParam._m0[11u].x;
    float _327 = _321.y * cbMtdParam._m0[11u].y;
    float _328 = _321.z * cbMtdParam._m0[11u].z;
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _283) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _284) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _397 = _395.x;
    float _409 = dot(vec4(_397, _395.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _426 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_397 - _409) * cbMtdParam._m0[23u].w) + _409) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3570 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _434 = (_427 * ((_347.x * cbMtdParam._m0[12u].x) - _326)) + _326;
    float _435 = (_427 * ((_347.y * cbMtdParam._m0[12u].y) - _327)) + _327;
    float _436 = (_427 * ((_347.z * cbMtdParam._m0[12u].z) - _328)) + _328;
    float _440 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _297.x) * _434;
    float _443 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _297.y) * _435;
    float _446 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _297.z) * _436;
    float _453 = ((_434 - _440) * (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0)))) + _440;
    float _454 = ((_435 - _443) * (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) + _443;
    float _455 = ((_436 - _446) * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) + _446;
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _283) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _284) + cbTextureTilingScale._m0[20u].w));
    vec4 _493 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _283) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _284) + cbTextureTilingScale._m0[4u].w));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    float _523 = ((_493.z - _514) * _427) + _514;
    float _526 = ((((_493.x - _512) * _427) + _512) * 2.0) + (-1.0);
    float _527 = ((((_493.y - _513) * _427) + _513) * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3581 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _567 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_468.x * 2.0) + (-1.0)))) + (((_555.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _568 = (_527 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_468.y * 2.0) + (-1.0)))) + (((_555.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _596 = _594.x;
    float _614 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _283) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _284) + cbTextureTilingScale._m0[9u].w)).x - _596) * _427) + _596;
    float _618 = ((_580.x - _614) * cbMtdParam._m0[19u].z) + _614;
    float _623 = (((_468.z - _523) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _523;
    float _627 = ((_555.z - _623) * cbMtdParam._m0[19u].w) + _623;
    float _629 = cbMtdParam._m0[22u].x + _555.w;
    float _632 = fma(_533, _230 * NORMAL.x, fma(_568, _237 * TANGENT.x, (_223 * _215) * _567));
    float _635 = fma(_533, _230 * NORMAL.y, fma(_568, _237 * TANGENT.y, (_223 * _216) * _567));
    float _638 = fma(_533, _230 * NORMAL.z, fma(_568, _237 * TANGENT.z, (_223 * _217) * _567));
    float _642 = inversesqrt(dot(vec3(_632, _635, _638), vec3(_632, _635, _638)));
    float _643 = _642 * _632;
    float _644 = _642 * _635;
    float _645 = _642 * _638;
    float _3592 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _646 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _3603 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3614 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3625 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3636 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3647 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _651 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _665 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _716 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _706);
    float _717 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _706);
    float _718 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _706);
    float _722 = inversesqrt(dot(vec3(_716, _717, _718), vec3(_716, _717, _718)));
    float _723 = _716 * _722;
    float _724 = _717 * _722;
    float _725 = _718 * _722;
    float _731 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _732 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _750 = fma(_645, cbSceneParam._m0[5u].z, fma(_644, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _643));
    float _753 = fma(_645, cbSceneParam._m0[6u].z, fma(_644, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _643));
    float _756 = fma(_645, cbSceneParam._m0[7u].z, fma(_644, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _643));
    uint _770 = (_264 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _776 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_770].x;
    float _777 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0)))) * cbInstanceData._m0[_770].y;
    float _778 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_770].z;
    float _3658 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _780 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _3680 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _782 = 1.0 - _651;
    float _783 = _779 * _782;
    float _784 = _780 * _782;
    float _785 = _781 * _782;
    float _790 = (_779 + (-0.039999999105930328369140625)) * _651;
    float _791 = (_780 + (-0.039999999105930328369140625)) * _651;
    float _792 = (_781 + (-0.039999999105930328369140625)) * _651;
    float _793 = _790 + 0.039999999105930328369140625;
    float _795 = _791 + 0.039999999105930328369140625;
    float _796 = _792 + 0.039999999105930328369140625;
    vec4 _805 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _731, cbSceneParam._m0[86u].y * _732));
    float _809 = ((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * TEXCOORD_5.w) * _805.x;
    float _810 = dot(vec3(_643, _644, _645), vec3(_723, _724, _725));
    float _813 = _810 * 2.0;
    float _817 = (_813 * _643) - _723;
    float _818 = (_813 * _644) - _724;
    float _819 = (_813 * _645) - _725;
    float _823 = abs(dot(vec3(_723, _724, _725), vec3(_643, _644, _645)));
    float _3691 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _825 = sqrt(_646);
    float _838 = exp2((_825 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_825 * 3.0));
    float _844 = (1.0 - _838) * ((_825 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _845 = _838 * _825;
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1182;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _907 = fma(_881, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873));
        float _911 = fma(_881, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873));
        float _915 = fma(_881, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873));
        float _940 = _873 + _643;
        float _941 = _877 + _644;
        float _942 = _881 + _645;
        float _952 = fma(_942, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940)) - _907;
        float _953 = fma(_942, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940)) - _911;
        float _954 = fma(_942, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940)) - _915;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_907 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_911 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[34u].z) + ((((((_915 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1010 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_976.x + (-0.5));
        float _1012 = _1010 * (_976.y + (-0.5));
        float _1013 = _1010 * (_976.z + (-0.5));
        float _1020 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_983.x + (-0.5));
        float _1022 = _1020 * (_983.y + (-0.5));
        float _1023 = _1020 * (_983.z + (-0.5));
        float _1030 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_990.x + (-0.5));
        float _1032 = _1030 * (_990.y + (-0.5));
        float _1033 = _1030 * (_990.z + (-0.5));
        float _1040 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_997.x + (-0.5));
        float _1042 = _1040 * (_997.y + (-0.5));
        float _1043 = _1040 * (_997.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1064 = (dot(vec3(_643, _644, _645), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1074 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3739 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1076 + 1.0))) + _1081) * _1044;
        float _1091 = _1012 * 0.5;
        float _1092 = _1022 * 0.5;
        float _1093 = _1032 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_643, _644, _645), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3772 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1118 + 1.0))) + _1123) * _1045;
        float _1133 = _1013 * 0.5;
        float _1134 = _1023 * 0.5;
        float _1135 = _1033 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_643, _644, _645), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3805 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1160 + 1.0))) + _1165) * _1046;
        _1182 = _1013;
        _1184 = _1012;
        _1185 = _1011;
        _1186 = _1023;
        _1187 = _1022;
        _1188 = _1021;
        _1189 = _1033;
        _1190 = _1032;
        _1191 = _1031;
        _1192 = _1046;
        _1193 = _1045;
        _1194 = _1044;
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _1183;
        _1184 = _1183;
        _1185 = _1183;
        _1186 = _1183;
        _1187 = _1183;
        _1188 = _1183;
        _1189 = _1183;
        _1190 = _1183;
        _1191 = _1183;
        _1192 = _1183;
        _1193 = _1183;
        _1194 = _1183;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1222 = fma(_881, cbModelParam._m0[30u].z, fma(_877, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _873));
        float _1226 = fma(_881, cbModelParam._m0[31u].z, fma(_877, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _873));
        float _1230 = fma(_881, cbModelParam._m0[32u].z, fma(_877, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _873));
        float _1253 = _873 + _643;
        float _1254 = _877 + _644;
        float _1255 = _881 + _645;
        float _1265 = fma(_1255, cbModelParam._m0[30u].z, fma(_1254, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1253)) - _1222;
        float _1266 = fma(_1255, cbModelParam._m0[31u].z, fma(_1254, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1253)) - _1226;
        float _1267 = fma(_1255, cbModelParam._m0[32u].z, fma(_1254, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1253)) - _1230;
        float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
        float _1284 = ((_1271 * _1265) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1222 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1271 * _1266) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1226 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1271 * _1267) / cbModelParam._m0[35u].z) + ((((((_1230 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        float _1321 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1288.x + (-0.5));
        float _1323 = _1321 * (_1288.y + (-0.5));
        float _1324 = _1321 * (_1288.z + (-0.5));
        float _1331 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1295.x + (-0.5));
        float _1333 = _1331 * (_1295.y + (-0.5));
        float _1334 = _1331 * (_1295.z + (-0.5));
        float _1341 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1302.x + (-0.5));
        float _1343 = _1341 * (_1302.y + (-0.5));
        float _1344 = _1341 * (_1302.z + (-0.5));
        float _1351 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1309.x + (-0.5));
        float _1353 = _1351 * (_1309.y + (-0.5));
        float _1354 = _1351 * (_1309.z + (-0.5));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = _1322 * 0.5;
        float _1359 = _1332 * 0.5;
        float _1360 = _1342 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_643, _644, _645), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3868 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1385 + 1.0))) + _1390) * _1355;
        float _1400 = _1323 * 0.5;
        float _1401 = _1333 * 0.5;
        float _1402 = _1343 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_643, _644, _645), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3901 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1427 + 1.0))) + _1432) * _1356;
        float _1442 = _1324 * 0.5;
        float _1443 = _1334 * 0.5;
        float _1444 = _1344 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_643, _644, _645), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3934 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1469 + 1.0))) + _1474) * _1357;
        _1491 = _1324;
        _1492 = _1323;
        _1493 = _1322;
        _1494 = _1334;
        _1495 = _1333;
        _1496 = _1332;
        _1497 = _1344;
        _1498 = _1343;
        _1499 = _1342;
        _1500 = _1357;
        _1501 = _1356;
        _1502 = _1355;
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
    }
    else
    {
        _1491 = _1183;
        _1492 = _1183;
        _1493 = _1183;
        _1494 = _1183;
        _1495 = _1183;
        _1496 = _1183;
        _1497 = _1183;
        _1498 = _1183;
        _1499 = _1183;
        _1500 = _1183;
        _1501 = _1183;
        _1502 = _1183;
        _1503 = 0.0;
        _1504 = 0.0;
        _1505 = 0.0;
    }
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1195)) + _1195;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1196)) + _1196;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1197)) + _1197;
    float _1538 = fma(_1517, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1515 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1517, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1515 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1517, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1515));
    float _1559 = _817 * 0.5;
    float _1560 = _818 * 0.5;
    float _1561 = _819 * 0.5;
    float _1562 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1565 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1568 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1602;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1575 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1182, _1186, _1189, _1192));
        float _1579 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1583 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1590 = dot(vec4(cbModelParam._m0[39u]), vec4(_1559, _1560, _1561, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1613;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1604 = dot(vec4(cbModelParam._m0[40u]), vec4(_1559, _1560, _1561, 1.0));
        _1613 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1613 = 1.0;
    }
    float _1617 = (_1613 * cbModelParam._m0[1u].x) + (_1602 * (1.0 - cbModelParam._m0[1u].x));
    float _1627 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _646);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1627 : min(cbModelParam._m0[25u].z, _1627));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1677 = fma(_881, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873)) + cbModelParam._m0[13u].w;
        float _1681 = fma(_881, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873)) + cbModelParam._m0[14u].w;
        float _1685 = fma(_881, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873)) + cbModelParam._m0[15u].w;
        float _1688 = fma(_819, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _817));
        float _1691 = fma(_819, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _817));
        float _1694 = fma(_819, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _817));
        float _1722;
        if (_1688 > 0.0)
        {
            _1722 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1722 = frontier_phi_14_12_ladder;
        }
        float _1947;
        if (_1691 > 0.0)
        {
            _1947 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1947 = frontier_phi_23_19_ladder;
        }
        float _2204;
        if (_1694 > 0.0)
        {
            _2204 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2204 = frontier_phi_35_30_ladder;
        }
        float _2206 = isnan(_1947) ? _1722 : (isnan(_1722) ? _1947 : min(_1722, _1947));
        float _2207 = isnan(_2204) ? _2206 : (isnan(_2206) ? _2204 : min(_2206, _2204));
        float _2211 = (_2207 * _1688) + _1677;
        float _2212 = (_2207 * _1691) + _1681;
        float _2213 = (_2207 * _1694) + _1685;
        float _2214 = _2207 * 9.9999997473787516355514526367188e-05;
        float _2216 = (-1.0) - _2214;
        float _2218 = _2214 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2213 > _2218) || ((_2213 < _2216) || ((_2212 > _2218) || ((_2212 < _2216) || ((_2211 < _2216) || (_2211 > _2218))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2341 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2213, cbModelParam._m0[9u].z, fma(_2212, cbModelParam._m0[9u].y, _2211 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2213, cbModelParam._m0[10u].z, fma(_2212, cbModelParam._m0[10u].y, _2211 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2213, cbModelParam._m0[11u].z, fma(_2212, cbModelParam._m0[11u].y, _2211 * cbModelParam._m0[11u].x))), _1628);
            frontier_phi_13_35_ladder = _2341.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2341.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2341.x * cbModelParam._m0[1u].y;
        }
        _1710 = frontier_phi_13_35_ladder_2;
        _1712 = frontier_phi_13_35_ladder_1;
        _1714 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_817, _818, _819), _1628);
        _1710 = _1698.x * cbModelParam._m0[1u].y;
        _1712 = _1698.y * cbModelParam._m0[1u].y;
        _1714 = _1698.z * cbModelParam._m0[1u].y;
    }
    float _1718 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _646);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1718 : min(cbModelParam._m0[25u].w, _1718));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1774 = fma(_881, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873)) + cbModelParam._m0[21u].w;
        float _1778 = fma(_881, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873)) + cbModelParam._m0[22u].w;
        float _1782 = fma(_881, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873)) + cbModelParam._m0[23u].w;
        float _1785 = fma(_819, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _817));
        float _1788 = fma(_819, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _817));
        float _1791 = fma(_819, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _817));
        float _1952;
        if (_1785 > 0.0)
        {
            _1952 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1952 = frontier_phi_25_21_ladder;
        }
        float _2231;
        if (_1788 > 0.0)
        {
            _2231 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2231 = frontier_phi_37_32_ladder;
        }
        float _2444;
        if (_1791 > 0.0)
        {
            _2444 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2444 = frontier_phi_46_43_ladder;
        }
        float _2446 = isnan(_2231) ? _1952 : (isnan(_1952) ? _2231 : min(_1952, _2231));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1785) + _1774;
        float _2452 = (_2447 * _1788) + _1778;
        float _2453 = (_2447 * _1791) + _1782;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1719);
            frontier_phi_22_46_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1810 = frontier_phi_22_46_ladder_2;
        _1812 = frontier_phi_22_46_ladder_1;
        _1814 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_817, _818, _819), _1719);
        _1810 = _1794.x * cbModelParam._m0[1u].z;
        _1812 = _1794.y * cbModelParam._m0[1u].z;
        _1814 = _1794.z * cbModelParam._m0[1u].z;
    }
    float _1827 = (((_844 * _793) + _845) * _809) * ((cbModelParam._m0[1u].w * (_1810 - _1710)) + _1710);
    float _1829 = (((_844 * _795) + _845) * _809) * ((cbModelParam._m0[1u].w * (_1812 - _1712)) + _1712);
    float _1831 = (((_844 * _796) + _845) * _809) * ((cbModelParam._m0[1u].w * (_1814 - _1714)) + _1714);
    float _1834 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, _1827 * cbSceneParam._m0[91u].x));
    vec4 _1848 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_731, _732));
    float _1850 = _1848.w;
    float _1862 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1850);
    float _1863 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1850);
    float _1864 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1850);
    uvec4 _1868 = floatBitsToUint(cbInstanceData._m0[_264 + 5u]);
    uint _1870 = _1868.x * 14u;
    uint _1871 = _1870 + 13u;
    float _1878 = _809 + (-1.0);
    float _1883 = (cbLight._m0[_1871].x * _1878) + 1.0;
    float _1884 = (cbLight._m0[_1871].y * _1878) + 1.0;
    float _1885 = (cbLight._m0[_1871].z * _1878) + 1.0;
    float _1886 = (cbLight._m0[_1871].w * _1878) + 1.0;
    uint _1887 = _1870 + 5u;
    float _1893 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1897 = _1870 + 4u;
    float _1906 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1910 = _1870 | 1u;
    float _1921 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_643, _644, _645));
    float _1924 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_643, _644, _645));
    float _4070 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _4081 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1929 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1931 = (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 0.3183098733425140380859375;
    float _1938 = ((cbLight._m0[_1887].x * _1893) * _1931) + (((cbLight._m0[_1897].x * _1862) * _1906) * _1929);
    float _1939 = ((_1893 * cbLight._m0[_1887].y) * _1931) + (((cbLight._m0[_1897].y * _1863) * _1906) * _1929);
    float _1940 = ((_1893 * cbLight._m0[_1887].z) * _1931) + (((cbLight._m0[_1897].z * _1864) * _1906) * _1929);
    uvec4 _1944 = floatBitsToUint(cbLight._m0[_1870 + 12u]);
    bool _1946 = _1944.x == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1946)
    {
        _1957 = _1938;
        _1959 = _1939;
        _1961 = _1940;
    }
    else
    {
        uint _1965 = _1870 + 6u;
        float _1981 = (dot(vec3(cbLight._m0[_1870 + 2u].xyz), vec3(_643, _644, _645)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _4092 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1984 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _1957 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1938;
        _1959 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1939;
        _1961 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1940;
    }
    bool _1964 = _1944.y == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1964)
    {
        _2002 = _1957;
        _2004 = _1959;
        _2006 = _1961;
    }
    else
    {
        uint _2175 = _1870 + 7u;
        float _2191 = (dot(vec3(cbLight._m0[_1870 + 3u].xyz), vec3(_643, _644, _645)) * 0.5) + 0.5;
        float _2192 = _2191 * _2191;
        float _4108 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2193 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2194 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2002 = (((cbLight._m0[_2175].x * 0.3183098733425140380859375) * _2193) * _2194) + _1957;
        _2004 = (((cbLight._m0[_2175].y * 0.3183098733425140380859375) * _2193) * _2194) + _1959;
        _2006 = (((cbLight._m0[_2175].z * 0.3183098733425140380859375) * _2193) * _2194) + _1961;
    }
    uint _2009 = _1870 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _646) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1870].x + _723;
    float _2025 = cbLight._m0[_1870].y + _724;
    float _2026 = cbLight._m0[_1870].z + _725;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_1870].xyz));
    float _4124 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _4135 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _2038 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2039 = dot(vec3(_643, _644, _645), vec3(_2031, _2032, _2033));
    float _4146 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2031, _2032, _2033));
    float _4157 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2059 = exp2(log2(1.0 - (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * 5.0);
    float _2060 = 0.959999978542327880859375 - _790;
    float _2062 = 0.959999978542327880859375 - _791;
    float _2063 = 0.959999978542327880859375 - _792;
    float _2070 = 1.0 - _2023;
    float _2081 = (0.5 / (((_2038 * ((_2037 * _2070) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2070) + _2023) * _2037))) * _2037;
    float _4168 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2083 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2097 = _1870 + 9u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _646) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1910].x + _723;
    float _2111 = cbLight._m0[_1910].y + _724;
    float _2112 = cbLight._m0[_1910].z + _725;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_1910].xyz));
    float _4179 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2124 = dot(vec3(_643, _644, _645), vec3(_2117, _2118, _2119));
    float _4190 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2117, _2118, _2119));
    float _4201 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2109 * _2109;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * 5.0);
    float _2150 = 1.0 - _2109;
    float _2160 = (0.5 / (((_2038 * ((_2123 * _2150) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2150) + _2109) * _2123))) * _2123;
    float _4212 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    float _2172 = (((((_2143 * _2060) + _793) * cbLight._m0[_2097].x) * _2162) * _1893) + ((((cbLight._m0[_2009].x * _1862) * ((_2059 * _2060) + _793)) * _2083) * _1906);
    float _2173 = (((((_2143 * _2062) + _795) * cbLight._m0[_2097].y) * _2162) * _1893) + ((((cbLight._m0[_2009].y * _1863) * ((_2059 * _2062) + _795)) * _2083) * _1906);
    float _2174 = (((((_2143 * _2063) + _796) * cbLight._m0[_2097].z) * _2162) * _1893) + ((((cbLight._m0[_2009].z * _1864) * ((_2059 * _2063) + _796)) * _2083) * _1906);
    float _2236;
    float _2238;
    float _2240;
    if (_1946)
    {
        _2236 = _2172;
        _2238 = _2173;
        _2240 = _2174;
    }
    else
    {
        uint _2242 = _1870 + 2u;
        uint _2246 = _1870 + 10u;
        float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _646) * 0.949999988079071044921875);
        float _2261 = _2260 * _2260;
        float _2262 = cbLight._m0[_2242].x + _723;
        float _2263 = cbLight._m0[_2242].y + _724;
        float _2264 = cbLight._m0[_2242].z + _725;
        float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
        float _2269 = _2268 * _2262;
        float _2270 = _2268 * _2263;
        float _2271 = _2268 * _2264;
        float _2272 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_2242].xyz));
        float _4223 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2276 = dot(vec3(_643, _644, _645), vec3(_2269, _2270, _2271));
        float _4234 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2280 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2269, _2270, _2271));
        float _4245 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2284 = _2261 * _2261;
        float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
        float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
        float _2302 = 1.0 - _2261;
        float _2312 = (0.5 / (((_2038 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2302) + _2261) * _2275))) * _2275;
        float _4256 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2314 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
        float _2315 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2236 = (((((_2295 * _2060) + _793) * cbLight._m0[_2246].x) * _2314) * _2315) + _2172;
        _2238 = (((((_2295 * _2062) + _795) * cbLight._m0[_2246].y) * _2314) * _2315) + _2173;
        _2240 = (((((_2295 * _2063) + _796) * cbLight._m0[_2246].z) * _2314) * _2315) + _2174;
    }
    float _2350;
    float _2352;
    float _2354;
    if (_1964)
    {
        _2350 = _2236;
        _2352 = _2238;
        _2354 = _2240;
    }
    else
    {
        uint _2361 = _1870 + 3u;
        uint _2365 = _1870 + 11u;
        float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _646) * 0.949999988079071044921875);
        float _2380 = _2379 * _2379;
        float _2381 = cbLight._m0[_2361].x + _723;
        float _2382 = cbLight._m0[_2361].y + _724;
        float _2383 = cbLight._m0[_2361].z + _725;
        float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
        float _2388 = _2387 * _2381;
        float _2389 = _2387 * _2382;
        float _2390 = _2387 * _2383;
        float _2391 = dot(vec3(_643, _644, _645), vec3(cbLight._m0[_2361].xyz));
        float _4272 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2395 = dot(vec3(_643, _644, _645), vec3(_2388, _2389, _2390));
        float _4283 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2399 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2388, _2389, _2390));
        float _4294 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2403 = _2380 * _2380;
        float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
        float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) * 5.0);
        float _2421 = 1.0 - _2380;
        float _2431 = (0.5 / (((_2038 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2421) + _2380) * _2394))) * _2394;
        float _4305 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2350 = (((((_2414 * _2060) + _793) * cbLight._m0[_2365].x) * _2433) * _2434) + _2236;
        _2352 = (((((_2414 * _2062) + _795) * cbLight._m0[_2365].y) * _2433) * _2434) + _2238;
        _2354 = (((((_2414 * _2063) + _796) * cbLight._m0[_2365].z) * _2433) * _2434) + _2240;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1868.y == 0u)
    {
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2509;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2509;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2509;
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _732) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _731) / _2525)));
        float _2546 = (log2(_2512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
        }
        else
        {
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2802 = 0.0;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            uint _2808 = 0u;
            uint _2817;
            bool _2818;
            for (;;)
            {
                _2817 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2808 << 2u)) >> 2u)).x;
                _2818 = _2817 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2818)
                {
                    frontier_phi_61_pred = _2802;
                    frontier_phi_61_pred_1 = _2807;
                    frontier_phi_61_pred_2 = _2806;
                    frontier_phi_61_pred_3 = _2805;
                    frontier_phi_61_pred_4 = _2804;
                    frontier_phi_61_pred_5 = _2803;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2802;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2817;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2808 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _2510;
                        float _2993 = _2952.y - _2511;
                        float _2994 = _2952.z - _2512;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_750, _753, _756), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4331 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _2510;
                        float _3028 = (-0.0) - _2511;
                        float _3029 = (-0.0) - _2512;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3044 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3045 = 1.0 - _825;
                        float _3052 = sqrt(1.0 - ((1.0 - (_3045 * _3045)) * (1.0 - (_3044 * _3044))));
                        float _3053 = _3052 * _3052;
                        float _3054 = _3053 * _3053;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3065 = dot(vec3(_750, _753, _756), vec3(_3034, _3035, _3036));
                        float _4347 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3068 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3069 = dot(vec3(_750, _753, _756), vec3(_3061 * _3055, _3061 * _3056, _3061 * _3057));
                        float _4358 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3076 = ((_3072 * _3072) * (_3054 + (-1.0))) + 1.0;
                        float _3077 = _3012 * _3053;
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3002) + _3078;
                        float _4369 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                        float _3083 = 1.0 - _3053;
                        float _3093 = (0.5 / (((_3082 * ((_3068 * _3083) + _3053)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3053) * _3068))) * _3082;
                        float _4380 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3104 = (((_3054 * 3.1415927410125732421875) * (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) / ((_3076 * _3076) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2861 = (_3023 * _2971.x) + _2929;
                        _2862 = (_3023 * _2971.y) + _2930;
                        _2863 = (_3023 * _2971.z) + _2931;
                        _2858 = (_3104 * _2988.x) + _2926;
                        _2859 = (_3104 * _2988.y) + _2927;
                        _2860 = (_3104 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2858;
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_61_pred = _2858;
                    frontier_phi_61_pred_1 = _2863;
                    frontier_phi_61_pred_2 = _2862;
                    frontier_phi_61_pred_3 = _2861;
                    frontier_phi_61_pred_4 = _2860;
                    frontier_phi_61_pred_5 = _2859;
                }
                _2658 = frontier_phi_61_pred;
                _2668 = frontier_phi_61_pred_1;
                _2666 = frontier_phi_61_pred_2;
                _2664 = frontier_phi_61_pred_3;
                _2662 = frontier_phi_61_pred_4;
                _2660 = frontier_phi_61_pred_5;
                uint _2809 = _2808 + 1u;
                if (_2809 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2802 = _2658;
                    _2803 = _2660;
                    _2804 = _2662;
                    _2805 = _2664;
                    _2806 = _2666;
                    _2807 = _2668;
                    _2808 = _2809;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
        }
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.z;
        uint _2674 = (_2672 >> 8u) & 15u;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        if (((4294967295u << _2674) & _2556) == 0u)
        {
            _2770 = _2657;
            _2772 = _2659;
            _2774 = _2661;
            _2776 = _2663;
            _2778 = _2665;
            _2780 = _2667;
        }
        else
        {
            float _2795 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
            float _2796 = _2795 * _2510;
            float _2797 = _2795 * _2511;
            float _2798 = _2795 * _2512;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2674 < ((_2672 >> 12u) & 15u))
            {
                float _2771;
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2909 = _2657;
                float _2910 = _2659;
                float _2911 = _2661;
                float _2912 = _2663;
                float _2913 = _2665;
                float _2914 = _2667;
                uint _2915 = _2674;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2925)
                    {
                        frontier_phi_67_pred = _2912;
                        frontier_phi_67_pred_1 = _2913;
                        frontier_phi_67_pred_2 = _2914;
                        frontier_phi_67_pred_3 = _2911;
                        frontier_phi_67_pred_4 = _2910;
                        frontier_phi_67_pred_5 = _2909;
                    }
                    else
                    {
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3403;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3122 = _2909;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        uint _3128 = _2924;
                        uint _3129;
                        vec4 _3154;
                        float _3155;
                        vec4 _3170;
                        vec3 _3182;
                        vec4 _3197;
                        vec4 _3212;
                        float _3259;
                        bool _3260;
                        for (;;)
                        {
                            uint _3139 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3128));
                            _3129 = (_3128 + 4294967295u) & _3128;
                            uint _3141 = _3139 * 40u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            _3155 = _3154.w;
                            uint _3157 = (_3139 * 40u) + 4u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3139 * 40u) + 8u;
                            _3182 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x));
                            uint _3184 = (_3139 * 40u) + 16u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3139 * 40u) + 20u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3215 = (_3139 * 40u) + 24u;
                            vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3234 = (_3139 * 40u) + 28u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3259 = fma(_2512, _3247.z, fma(_2511, _3247.y, _3247.x * _2510)) + _3247.w;
                            _3260 = !((fma(_2512, _3228.z, fma(_2511, _3228.y, _3228.x * _2510)) + _3228.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3260)
                            {
                                float _3287 = _3154.x - _2510;
                                float _3288 = _3154.y - _2511;
                                float _3289 = _3154.z - _2512;
                                float _3290 = dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289));
                                float _3293 = inversesqrt(_3290);
                                float _3294 = _3293 * _3287;
                                float _3295 = _3293 * _3288;
                                float _3296 = _3293 * _3289;
                                float _3300 = 1.0 - (_3290 / (_3155 * _3155));
                                float _4391 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3305 = sqrt(_3290) * _3170.w;
                                float _3307 = 1.39999997615814208984375 / (_3305 + 1.39999997615814208984375);
                                float _3308 = _3307 * _3307;
                                float _3311 = ((1.0 - _3308) * dot(vec3(_3294, _3295, _3296), vec3(_750, _753, _756))) + _3308;
                                float _3314 = _3305 * _3305;
                                float _3318 = (fma(_2512, _3197.z, fma(_2511, _3197.y, _3197.x * _2510)) + _3197.w) / _3259;
                                float _3319 = (fma(_2512, _3212.z, fma(_2511, _3212.y, _3212.x * _2510)) + _3212.w) / _3259;
                                float _3323 = 1.0 - dot(vec2(_3318, _3319), vec2(_3318, _3319));
                                float _4407 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3325 = _3324 * (((isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0))) * _3301) / ((_3314 * 0.699999988079071044921875) + 1.0));
                                float _3337 = exp2(log2(1.0 / ((_3314 * 3.5) + 5.0)) * 0.25);
                                float _3338 = 1.0 - _825;
                                float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                                float _3346 = _3345 * _3345;
                                float _3347 = _3346 * _3346;
                                float _3348 = _3294 - _2796;
                                float _3349 = _3295 - _2797;
                                float _3350 = _3296 - _2798;
                                float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                                float _3358 = dot(vec3(_750, _753, _756), vec3((-0.0) - _2796, (-0.0) - _2797, (-0.0) - _2798));
                                float _4418 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3361 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3362 = dot(vec3(_750, _753, _756), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                                float _4429 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                                float _3370 = _3307 * _3346;
                                float _3371 = _3370 * _3370;
                                float _3377 = ((1.0 - _3371) * dot(vec3(_750, _753, _756), vec3(_3294, _3295, _3296))) + _3371;
                                float _4440 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3378 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3379 = 1.0 - _3346;
                                float _3389 = (0.5 / (((_3378 * ((_3361 * _3379) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3378 * _3379) + _3346) * _3361))) * _3378;
                                float _4451 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3399 = (_3324 * _3301) * (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) / ((_3369 * _3369) * ((_3314 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3399 * _3182.x;
                                frontier_phi_73_pred_1 = _3399 * _3182.y;
                                frontier_phi_73_pred_2 = _3325 * _3170.z;
                                frontier_phi_73_pred_3 = _3325 * _3170.y;
                                frontier_phi_73_pred_4 = _3325 * _3170.x;
                                frontier_phi_73_pred_5 = _3399 * _3182.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3403 = frontier_phi_73_pred;
                            _3404 = frontier_phi_73_pred_1;
                            _3408 = frontier_phi_73_pred_2;
                            _3407 = frontier_phi_73_pred_3;
                            _3406 = frontier_phi_73_pred_4;
                            _3405 = frontier_phi_73_pred_5;
                            _3112 = _3406 + _3125;
                            _3113 = _3407 + _3126;
                            _3114 = _3408 + _3127;
                            _3109 = _3403 + _3122;
                            _3110 = _3404 + _3123;
                            _3111 = _3405 + _3124;
                            if (_3129 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3129;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3112;
                        frontier_phi_67_pred_1 = _3113;
                        frontier_phi_67_pred_2 = _3114;
                        frontier_phi_67_pred_3 = _3111;
                        frontier_phi_67_pred_4 = _3110;
                        frontier_phi_67_pred_5 = _3109;
                    }
                    _2777 = frontier_phi_67_pred;
                    _2779 = frontier_phi_67_pred_1;
                    _2781 = frontier_phi_67_pred_2;
                    _2775 = frontier_phi_67_pred_3;
                    _2773 = frontier_phi_67_pred_4;
                    _2771 = frontier_phi_67_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2771;
                        _2910 = _2773;
                        _2911 = _2775;
                        _2912 = _2777;
                        _2913 = _2779;
                        _2914 = _2781;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2779;
                frontier_phi_55_56_ladder_1 = _2781;
                frontier_phi_55_56_ladder_2 = _2777;
                frontier_phi_55_56_ladder_3 = _2775;
                frontier_phi_55_56_ladder_4 = _2773;
                frontier_phi_55_56_ladder_5 = _2771;
            }
            else
            {
                frontier_phi_55_56_ladder = _2665;
                frontier_phi_55_56_ladder_1 = _2667;
                frontier_phi_55_56_ladder_2 = _2663;
                frontier_phi_55_56_ladder_3 = _2661;
                frontier_phi_55_56_ladder_4 = _2659;
                frontier_phi_55_56_ladder_5 = _2657;
            }
            _2770 = frontier_phi_55_56_ladder_5;
            _2772 = frontier_phi_55_56_ladder_4;
            _2774 = frontier_phi_55_56_ladder_3;
            _2776 = frontier_phi_55_56_ladder_2;
            _2778 = frontier_phi_55_56_ladder;
            _2780 = frontier_phi_55_56_ladder_1;
        }
        float _2785 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
        _2569 = (_2785 * _2776) + _2002;
        _2571 = (_2785 * _2778) + _2004;
        _2573 = (_2785 * _2780) + _2006;
        _2575 = ((_2770 * _793) * _2785) + _2350;
        _2577 = ((_2772 * _795) * _2785) + _2352;
        _2579 = ((_2774 * _796) * _2785) + _2354;
    }
    else
    {
        _2569 = _2002;
        _2571 = _2004;
        _2573 = _2006;
        _2575 = _2350;
        _2577 = _2352;
        _2579 = _2354;
    }
    float _4467 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4478 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4489 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    uint _2599 = _264 + 6u;
    float _2607 = _731 / cbSceneParam._m0[86u].x;
    float _2608 = _732 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _665 : (isnan(_665) ? cbSceneParam._m0[77u].w : min(_665, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_665 > cbSceneParam._m0[78u].w)
    {
        float _2682 = isnan(_665) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _665 : min(cbSceneParam._m0[80u].w, _665));
        float _2683 = _2682 / _665;
        float _2694 = _2683 * _716;
        float _2695 = _717 * _2683;
        float _2696 = (-0.0) - _2695;
        float _2698 = _2683 * _718;
        float _2700 = (cbSceneParam._m0[77u].w * _2696) / _2682;
        float _2701 = _2700 + cbSceneParam._m0[79u].w;
        float _2702 = cbSceneParam._m0[79u].w - _2695;
        float _2708 = sqrt(((_2694 * _2694) + (_2695 * _2695)) + (_2698 * _2698));
        float _2711 = (1.0 - (cbSceneParam._m0[77u].w / _2682)) * _2708;
        float _2716 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2718 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2871;
        if (abs((_2696 - _2700) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2871 = ((((_2701 > 0.0) ? exp2(_2716 * _2701) : (2.0 - exp2(_2718 * _2701))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2711;
        }
        else
        {
            float _2831 = 1.0 / cbSceneParam._m0[80u].x;
            float _2832 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : max(_2701, _2702));
            float _2833 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : min(_2701, _2702));
            float _2842 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : min(_2832, 0.0));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            _2871 = ((abs(_2708 / _2696) * cbSceneParam._m0[80u].y) * ((((_2842 - _2843) * 2.0) - ((exp2(_2716 * (isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0)))) - exp2(_2716 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0))))) * _2831)) - ((exp2(_2718 * _2842) - exp2(_2718 * _2843)) * _2831))) + (_2711 * cbSceneParam._m0[80u].z);
        }
        vec4 _2873 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2882 = exp2((_2871 * (-1.44269502162933349609375)) * (1.0 - _2873.w));
        float _2883 = log2(_2882);
        float _2899 = log2(_2627);
        _2720 = (exp2(_2899 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].x)) * _2873.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2722 = (exp2(_2899 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].y)) * _2873.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2724 = (exp2(_2899 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2883 * cbSceneParam._m0[78u].z)) * _2873.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2726 = _2882 * _2627;
    }
    else
    {
        _2720 = _2624;
        _2722 = _2625;
        _2724 = _2626;
        _2726 = _2627;
    }
    float _2738 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2739 = _2738 == 3.0;
    float _2740 = log2(_2726);
    float _2747 = exp2(_2740 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2569 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _809))) + ((_2575 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1617)) * cbPerFrame._m0[3u].x));
    float _2748 = exp2(_2740 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2571 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _809))) + ((_2577 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1617)) * cbPerFrame._m0[3u].x));
    float _2749 = exp2(_2740 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2573 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _809))) + ((_2579 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1617)) * cbPerFrame._m0[3u].x));
    float _2758 = (_2738 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2758 * (_2739 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2720)));
    SV_Target.y = _2758 * (_2739 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.z = _2758 * (_2739 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.w = cbInstanceData._m0[_2599].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
}


