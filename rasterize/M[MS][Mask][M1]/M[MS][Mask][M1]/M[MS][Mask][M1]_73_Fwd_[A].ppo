#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1466;
float _3846;
float _3847;
float _3848;
float _3849;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3858 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3869 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3880 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3891 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _451 = (_444 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _452 = (_444 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _453 = (_444 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[23u].w) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3902 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    float _530 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _524;
    float _533 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _525;
    float _536 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _526;
    float _543 = ((_524 - _530) * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) + _530;
    float _544 = ((_525 - _533) * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) + _533;
    float _545 = ((_526 - _536) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _536;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _444) + _606;
    float _616 = ((_587.y - _607) * _444) + _607;
    float _617 = ((_587.z - _608) * _444) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_629.z - _617) * _517) + _617;
    float _645 = ((((_629.x - _615) * _517) + _615) * 2.0) + (-1.0);
    float _646 = ((((_629.y - _616) * _517) + _616) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3913 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _682 = (_645 + ((((_562.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_670.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _683 = (_646 + ((((_562.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_670.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _686 = fma(_652, _245, fma(_683, _252, _682 * _238));
    float _689 = fma(_652, _246, fma(_683, _253, _682 * _239));
    float _692 = fma(_652, _247, fma(_683, _254, _682 * _240));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _735 = (cbMtdParam._m0[19u].x + dot(vec4(_696 * _686, _696 * _689, _696 * _692, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_725 - _726) * cbMtdParam._m0[24u].z) + _726) * cbMtdParam._m0[21u].z);
    float _3924 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _743 = (_736 * (cbMtdParam._m0[17u].x - _543)) + _543;
    float _744 = (_736 * (cbMtdParam._m0[17u].y - _544)) + _544;
    float _745 = (_736 * (cbMtdParam._m0[17u].z - _545)) + _545;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _773 = _771.x;
    float _791 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _773) * _444) + _773;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _791) * _517) + _791;
    float _812 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _808) * cbMtdParam._m0[19u].z) + _808;
    float _814 = _812 - (_812 * _736);
    float _819 = (((_562.z - _642) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _642;
    float _823 = ((_670.z - _819) * cbMtdParam._m0[19u].w) + _819;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _843 = (_836.x * 2.0) + (-1.0);
    float _844 = (_836.y * 2.0) + (-1.0);
    float _845 = dot(vec2(_843, _844), vec2(_843, _844));
    float _3935 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _853 = ((_836.z - _823) * _736) + _823;
    float _863 = ((sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) - _652) * _736) + _652;
    float _866 = (((_843 - _682) * _736) + _682) + (cbMtdParam._m0[21u].x * _682);
    float _867 = (((_844 - _683) * _736) + _683) + (cbMtdParam._m0[21u].x * _683);
    float _871 = cbMtdParam._m0[22u].x + _670.w;
    float _874 = fma(_863, _245, fma(_867, _252, _866 * _238));
    float _877 = fma(_863, _246, fma(_867, _253, _866 * _239));
    float _880 = fma(_863, _247, fma(_867, _254, _866 * _240));
    float _884 = inversesqrt(dot(vec3(_874, _877, _880), vec3(_874, _877, _880)));
    float _885 = _884 * _874;
    float _886 = _884 * _877;
    float _887 = _884 * _880;
    float _3946 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _888 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _3968 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _3979 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3990 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4001 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _893 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _907 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _958 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _948);
    float _959 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _948);
    float _960 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _948);
    float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
    float _965 = _958 * _964;
    float _966 = _959 * _964;
    float _967 = _960 * _964;
    vec4 _972 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _974 = _972.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1146 = sqrt(((_958 * _958) + (_959 * _959)) + (_960 * _960));
        float _1152 = (cbMatDynParam._m0[5u].x * _1146) + cbMatDynParam._m0[5u].y;
        float _4012 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1157 = (cbMatDynParam._m0[5u].z * _1146) + cbMatDynParam._m0[5u].w;
        float _4023 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) - _1153)) + _1153) < ((_974 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _985 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _986 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1004 = fma(_887, cbSceneParam._m0[5u].z, fma(_886, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _885));
    float _1007 = fma(_887, cbSceneParam._m0[6u].z, fma(_886, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _885));
    float _1010 = fma(_887, cbSceneParam._m0[7u].z, fma(_886, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _885));
    uint _1023 = _278 + 9u;
    uint _1024 = _1023 + uint(cbMatDynParam._m0[0u].w);
    float _1030 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_1024].x;
    float _1031 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_1024].y;
    float _1032 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_1024].z;
    float _4034 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1034 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _1035 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _1036 = 1.0 - _893;
    float _1037 = _1033 * _1036;
    float _1038 = _1034 * _1036;
    float _1039 = _1035 * _1036;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _893;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _893;
    float _1046 = (_1035 + (-0.039999999105930328369140625)) * _893;
    float _1047 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    float _1050 = _1046 + 0.039999999105930328369140625;
    vec4 _1059 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _985, cbSceneParam._m0[86u].y * _986));
    float _1063 = ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * TEXCOORD_5.w) * _1059.x;
    float _1064 = dot(vec3(_885, _886, _887), vec3(_965, _966, _967));
    float _1067 = _1064 * 2.0;
    float _1071 = (_1067 * _885) - _965;
    float _1072 = (_1067 * _886) - _966;
    float _1073 = (_1067 * _887) - _967;
    float _1077 = abs(dot(vec3(_965, _966, _967), vec3(_885, _886, _887)));
    float _4067 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1079 = sqrt(_888);
    float _1092 = exp2((_1079 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1079 * 3.0));
    float _1098 = (1.0 - _1092) * ((_1079 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1099 = _1092 * _1079;
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1465;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1190 = fma(_1135, cbModelParam._m0[26u].z, fma(_1131, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1127));
        float _1194 = fma(_1135, cbModelParam._m0[27u].z, fma(_1131, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1127));
        float _1198 = fma(_1135, cbModelParam._m0[28u].z, fma(_1131, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1127));
        float _1223 = _1127 + _885;
        float _1224 = _1131 + _886;
        float _1225 = _1135 + _887;
        float _1235 = fma(_1225, cbModelParam._m0[26u].z, fma(_1224, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1223)) - _1190;
        float _1236 = fma(_1225, cbModelParam._m0[27u].z, fma(_1224, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1223)) - _1194;
        float _1237 = fma(_1225, cbModelParam._m0[28u].z, fma(_1224, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1223)) - _1198;
        float _1241 = inversesqrt(dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237)));
        float _1254 = ((_1241 * _1235) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1190 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1241 * _1236) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1194 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1241 * _1237) / cbModelParam._m0[34u].z) + ((((((_1198 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1254, _1255, _1256), 0.0);
        float _1293 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1259.x + (-0.5));
        float _1295 = _1293 * (_1259.y + (-0.5));
        float _1296 = _1293 * (_1259.z + (-0.5));
        float _1303 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1266.x + (-0.5));
        float _1305 = _1303 * (_1266.y + (-0.5));
        float _1306 = _1303 * (_1266.z + (-0.5));
        float _1313 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1273.x + (-0.5));
        float _1315 = _1313 * (_1273.y + (-0.5));
        float _1316 = _1313 * (_1273.z + (-0.5));
        float _1323 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1280.x + (-0.5));
        float _1325 = _1323 * (_1280.y + (-0.5));
        float _1326 = _1323 * (_1280.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1347 = (dot(vec3(_885, _886, _887), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1357 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4115 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1359 + 1.0))) + _1364) * _1327;
        float _1374 = _1295 * 0.5;
        float _1375 = _1305 * 0.5;
        float _1376 = _1315 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_885, _886, _887), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4148 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1401 + 1.0))) + _1406) * _1328;
        float _1416 = _1296 * 0.5;
        float _1417 = _1306 * 0.5;
        float _1418 = _1316 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_885, _886, _887), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4181 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1443 + 1.0))) + _1448) * _1329;
        _1465 = _1296;
        _1467 = _1295;
        _1468 = _1294;
        _1469 = _1306;
        _1470 = _1305;
        _1471 = _1304;
        _1472 = _1316;
        _1473 = _1315;
        _1474 = _1314;
        _1475 = _1329;
        _1476 = _1328;
        _1477 = _1327;
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1480 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1466;
        _1467 = _1466;
        _1468 = _1466;
        _1469 = _1466;
        _1470 = _1466;
        _1471 = _1466;
        _1472 = _1466;
        _1473 = _1466;
        _1474 = _1466;
        _1475 = _1466;
        _1476 = _1466;
        _1477 = _1466;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1507 = fma(_1135, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127));
        float _1511 = fma(_1135, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127));
        float _1515 = fma(_1135, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127));
        float _1538 = _1127 + _885;
        float _1539 = _1131 + _886;
        float _1540 = _1135 + _887;
        float _1550 = fma(_1540, cbModelParam._m0[30u].z, fma(_1539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1538)) - _1507;
        float _1551 = fma(_1540, cbModelParam._m0[31u].z, fma(_1539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1538)) - _1511;
        float _1552 = fma(_1540, cbModelParam._m0[32u].z, fma(_1539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1538)) - _1515;
        float _1556 = inversesqrt(dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552)));
        float _1569 = ((_1556 * _1550) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1507 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1570 = ((_1556 * _1551) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1511 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1556 * _1552) / cbModelParam._m0[35u].z) + ((((((_1515 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        float _1606 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1573.x + (-0.5));
        float _1608 = _1606 * (_1573.y + (-0.5));
        float _1609 = _1606 * (_1573.z + (-0.5));
        float _1616 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1580.x + (-0.5));
        float _1618 = _1616 * (_1580.y + (-0.5));
        float _1619 = _1616 * (_1580.z + (-0.5));
        float _1626 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1587.x + (-0.5));
        float _1628 = _1626 * (_1587.y + (-0.5));
        float _1629 = _1626 * (_1587.z + (-0.5));
        float _1636 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1594.x + (-0.5));
        float _1638 = _1636 * (_1594.y + (-0.5));
        float _1639 = _1636 * (_1594.z + (-0.5));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = _1607 * 0.5;
        float _1644 = _1617 * 0.5;
        float _1645 = _1627 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_885, _886, _887), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4244 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1670 + 1.0))) + _1675) * _1640;
        float _1685 = _1608 * 0.5;
        float _1686 = _1618 * 0.5;
        float _1687 = _1628 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_885, _886, _887), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4277 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1712 + 1.0))) + _1717) * _1641;
        float _1727 = _1609 * 0.5;
        float _1728 = _1619 * 0.5;
        float _1729 = _1629 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_885, _886, _887), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4310 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1754 + 1.0))) + _1759) * _1642;
        _1776 = _1609;
        _1777 = _1608;
        _1778 = _1607;
        _1779 = _1619;
        _1780 = _1618;
        _1781 = _1617;
        _1782 = _1629;
        _1783 = _1628;
        _1784 = _1627;
        _1785 = _1642;
        _1786 = _1641;
        _1787 = _1640;
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
    }
    else
    {
        _1776 = _1466;
        _1777 = _1466;
        _1778 = _1466;
        _1779 = _1466;
        _1780 = _1466;
        _1781 = _1466;
        _1782 = _1466;
        _1783 = _1466;
        _1784 = _1466;
        _1785 = _1466;
        _1786 = _1466;
        _1787 = _1466;
        _1788 = 0.0;
        _1789 = 0.0;
        _1790 = 0.0;
    }
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1478)) + _1478;
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1479)) + _1479;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1480)) + _1480;
    float _1823 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1800));
    float _1844 = _1071 * 0.5;
    float _1845 = _1072 * 0.5;
    float _1846 = _1073 * 0.5;
    float _1847 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1850 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1853 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1887;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1860 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1465, _1469, _1472, _1475));
        float _1864 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1868 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1468, _1471, _1474, _1477));
        float _1875 = dot(vec4(cbModelParam._m0[39u]), vec4(_1844, _1845, _1846, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1898;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1889 = dot(vec4(cbModelParam._m0[40u]), vec4(_1844, _1845, _1846, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1902 = (_1898 * cbModelParam._m0[1u].x) + (_1887 * (1.0 - cbModelParam._m0[1u].x));
    float _1912 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _888);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1912 : min(cbModelParam._m0[25u].z, _1912));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1961 = fma(_1135, cbModelParam._m0[13u].z, fma(_1131, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1127)) + cbModelParam._m0[13u].w;
        float _1965 = fma(_1135, cbModelParam._m0[14u].z, fma(_1131, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1127)) + cbModelParam._m0[14u].w;
        float _1969 = fma(_1135, cbModelParam._m0[15u].z, fma(_1131, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1127)) + cbModelParam._m0[15u].w;
        float _1972 = fma(_1073, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1071));
        float _1975 = fma(_1073, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1071));
        float _1978 = fma(_1073, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1071));
        float _2006;
        if (_1972 > 0.0)
        {
            _2006 = abs((1.0 - _1961) / _1972);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1961 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2006 = frontier_phi_17_15_ladder;
        }
        float _2209;
        if (_1975 > 0.0)
        {
            _2209 = abs((1.0 - _1965) / _1975);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1965 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2209 = frontier_phi_26_22_ladder;
        }
        float _2463;
        if (_1978 > 0.0)
        {
            _2463 = abs((1.0 - _1969) / _1978);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1969 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2463 = frontier_phi_38_33_ladder;
        }
        float _2465 = isnan(_2209) ? _2006 : (isnan(_2006) ? _2209 : min(_2006, _2209));
        float _2466 = isnan(_2463) ? _2465 : (isnan(_2465) ? _2463 : min(_2465, _2463));
        float _2470 = (_2466 * _1972) + _1961;
        float _2471 = (_2466 * _1975) + _1965;
        float _2472 = (_2466 * _1978) + _1969;
        float _2473 = _2466 * 9.9999997473787516355514526367188e-05;
        float _2475 = (-1.0) - _2473;
        float _2477 = _2473 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2472 > _2477) || ((_2472 < _2475) || ((_2471 > _2477) || ((_2471 < _2475) || ((_2470 < _2475) || (_2470 > _2477))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2472, cbModelParam._m0[9u].z, fma(_2471, cbModelParam._m0[9u].y, _2470 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2472, cbModelParam._m0[10u].z, fma(_2471, cbModelParam._m0[10u].y, _2470 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2472, cbModelParam._m0[11u].z, fma(_2471, cbModelParam._m0[11u].y, _2470 * cbModelParam._m0[11u].x))), _1913);
            frontier_phi_16_38_ladder = _2600.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2600.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2600.x * cbModelParam._m0[1u].y;
        }
        _1994 = frontier_phi_16_38_ladder_2;
        _1996 = frontier_phi_16_38_ladder_1;
        _1998 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1071, _1072, _1073), _1913);
        _1994 = _1982.x * cbModelParam._m0[1u].y;
        _1996 = _1982.y * cbModelParam._m0[1u].y;
        _1998 = _1982.z * cbModelParam._m0[1u].y;
    }
    float _2002 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _888);
    float _2003 = isnan(_2002) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2002 : min(cbModelParam._m0[25u].w, _2002));
    float _2093;
    float _2095;
    float _2097;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2057 = fma(_1135, cbModelParam._m0[21u].z, fma(_1131, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1127)) + cbModelParam._m0[21u].w;
        float _2061 = fma(_1135, cbModelParam._m0[22u].z, fma(_1131, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1127)) + cbModelParam._m0[22u].w;
        float _2065 = fma(_1135, cbModelParam._m0[23u].z, fma(_1131, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1127)) + cbModelParam._m0[23u].w;
        float _2068 = fma(_1073, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1071));
        float _2071 = fma(_1073, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1071));
        float _2074 = fma(_1073, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1071));
        float _2214;
        if (_2068 > 0.0)
        {
            _2214 = abs((1.0 - _2057) / _2068);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2057 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2214 = frontier_phi_28_24_ladder;
        }
        float _2490;
        if (_2071 > 0.0)
        {
            _2490 = abs((1.0 - _2061) / _2071);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2061 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2490 = frontier_phi_40_35_ladder;
        }
        float _2703;
        if (_2074 > 0.0)
        {
            _2703 = abs((1.0 - _2065) / _2074);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2065 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2703 = frontier_phi_49_46_ladder;
        }
        float _2705 = isnan(_2490) ? _2214 : (isnan(_2214) ? _2490 : min(_2214, _2490));
        float _2706 = isnan(_2703) ? _2705 : (isnan(_2705) ? _2703 : min(_2705, _2703));
        float _2710 = (_2706 * _2068) + _2057;
        float _2711 = (_2706 * _2071) + _2061;
        float _2712 = (_2706 * _2074) + _2065;
        float _2713 = _2706 * 9.9999997473787516355514526367188e-05;
        float _2714 = (-1.0) - _2713;
        float _2716 = _2713 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2712 > _2716) || ((_2712 < _2714) || ((_2711 > _2716) || ((_2711 < _2714) || ((_2710 < _2714) || (_2710 > _2716))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2712, cbModelParam._m0[17u].z, fma(_2711, cbModelParam._m0[17u].y, _2710 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2712, cbModelParam._m0[18u].z, fma(_2711, cbModelParam._m0[18u].y, _2710 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2712, cbModelParam._m0[19u].z, fma(_2711, cbModelParam._m0[19u].y, _2710 * cbModelParam._m0[19u].x))), _2003);
            frontier_phi_25_49_ladder = _2911.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2911.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2911.x * cbModelParam._m0[1u].z;
        }
        _2093 = frontier_phi_25_49_ladder_2;
        _2095 = frontier_phi_25_49_ladder_1;
        _2097 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2077 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1071, _1072, _1073), _2003);
        _2093 = _2077.x * cbModelParam._m0[1u].z;
        _2095 = _2077.y * cbModelParam._m0[1u].z;
        _2097 = _2077.z * cbModelParam._m0[1u].z;
    }
    float _2110 = (((_1098 * _1047) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2093 - _1994)) + _1994);
    float _2112 = (((_1098 * _1049) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2095 - _1996)) + _1996);
    float _2114 = (((_1098 * _1050) + _1099) * _1063) * ((cbModelParam._m0[1u].w * (_2097 - _1998)) + _1998);
    float _2117 = fma(_2114, cbSceneParam._m0[89u].z, fma(_2112, cbSceneParam._m0[89u].y, _2110 * cbSceneParam._m0[89u].x));
    float _2120 = fma(_2114, cbSceneParam._m0[90u].z, fma(_2112, cbSceneParam._m0[90u].y, _2110 * cbSceneParam._m0[90u].x));
    float _2123 = fma(_2114, cbSceneParam._m0[91u].z, fma(_2112, cbSceneParam._m0[91u].y, _2110 * cbSceneParam._m0[91u].x));
    uvec4 _2133 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2135 = _2133.x * 14u;
    uint _2136 = _2135 + 13u;
    float _2143 = _1063 + (-1.0);
    float _2148 = (cbLight._m0[_2136].x * _2143) + 1.0;
    float _2149 = (cbLight._m0[_2136].y * _2143) + 1.0;
    float _2150 = (cbLight._m0[_2136].z * _2143) + 1.0;
    float _2151 = (cbLight._m0[_2136].w * _2143) + 1.0;
    uint _2152 = _2135 + 5u;
    float _2158 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2162 = _2135 + 4u;
    float _2168 = isnan(1.0) ? _2148 : (isnan(_2148) ? 1.0 : min(_2148, 1.0));
    uint _2172 = _2135 | 1u;
    float _2183 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_885, _886, _887));
    float _2186 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_885, _886, _887));
    float _4446 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _4457 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2191 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * 0.3183098733425140380859375;
    float _2193 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2200 = ((cbLight._m0[_2152].x * _2158) * _2193) + ((cbLight._m0[_2162].x * _2168) * _2191);
    float _2201 = ((_2158 * cbLight._m0[_2152].y) * _2193) + ((_2168 * cbLight._m0[_2162].y) * _2191);
    float _2202 = ((_2158 * cbLight._m0[_2152].z) * _2193) + ((_2168 * cbLight._m0[_2162].z) * _2191);
    uvec4 _2206 = floatBitsToUint(cbLight._m0[_2135 + 12u]);
    bool _2208 = _2206.x == 0u;
    float _2219;
    float _2221;
    float _2223;
    if (_2208)
    {
        _2219 = _2200;
        _2221 = _2201;
        _2223 = _2202;
    }
    else
    {
        uint _2227 = _2135 + 6u;
        float _2243 = (dot(vec3(cbLight._m0[_2135 + 2u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4468 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2246 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2219 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2200;
        _2221 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2201;
        _2223 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2202;
    }
    bool _2226 = _2206.y == 0u;
    float _2264;
    float _2266;
    float _2268;
    if (_2226)
    {
        _2264 = _2219;
        _2266 = _2221;
        _2268 = _2223;
    }
    else
    {
        uint _2434 = _2135 + 7u;
        float _2450 = (dot(vec3(cbLight._m0[_2135 + 3u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2451 = _2450 * _2450;
        float _4484 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2452 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2453 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2264 = (((cbLight._m0[_2434].x * 0.3183098733425140380859375) * _2452) * _2453) + _2219;
        _2266 = (((cbLight._m0[_2434].y * 0.3183098733425140380859375) * _2452) * _2453) + _2221;
        _2268 = (((cbLight._m0[_2434].z * 0.3183098733425140380859375) * _2452) * _2453) + _2223;
    }
    uint _2271 = _2135 + 8u;
    float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2135].w)) * _888) * 0.949999988079071044921875);
    float _2285 = _2284 * _2284;
    float _2286 = cbLight._m0[_2135].x + _965;
    float _2287 = cbLight._m0[_2135].y + _966;
    float _2288 = cbLight._m0[_2135].z + _967;
    float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
    float _2293 = _2292 * _2286;
    float _2294 = _2292 * _2287;
    float _2295 = _2292 * _2288;
    float _2296 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2135].xyz));
    float _4500 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _4511 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _2300 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _2301 = dot(vec3(_885, _886, _887), vec3(_2293, _2294, _2295));
    float _4522 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_2135].xyz), vec3(_2293, _2294, _2295));
    float _4533 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2285 * _2285;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0);
    float _2322 = 0.959999978542327880859375 - _1044;
    float _2324 = 0.959999978542327880859375 - _1045;
    float _2325 = 0.959999978542327880859375 - _1046;
    float _2332 = 1.0 - _2285;
    float _2343 = (0.5 / (((_2300 * ((_2299 * _2332) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2332) + _2285) * _2299))) * _2299;
    float _4544 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2345 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    uint _2356 = _2135 + 9u;
    float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2172].w)) * _888) * 0.949999988079071044921875);
    float _2368 = _2367 * _2367;
    float _2369 = cbLight._m0[_2172].x + _965;
    float _2370 = cbLight._m0[_2172].y + _966;
    float _2371 = cbLight._m0[_2172].z + _967;
    float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
    float _2376 = _2375 * _2369;
    float _2377 = _2375 * _2370;
    float _2378 = _2375 * _2371;
    float _2379 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2172].xyz));
    float _4555 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2383 = dot(vec3(_885, _886, _887), vec3(_2376, _2377, _2378));
    float _4566 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2172].xyz), vec3(_2376, _2377, _2378));
    float _4577 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2368 * _2368;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2402 = exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0);
    float _2409 = 1.0 - _2368;
    float _2419 = (0.5 / (((_2300 * ((_2382 * _2409) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2409) + _2368) * _2382))) * _2382;
    float _4588 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2421 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    float _2431 = (((((_2402 * _2322) + _1047) * cbLight._m0[_2356].x) * _2421) * _2158) + (((((_2321 * _2322) + _1047) * cbLight._m0[_2271].x) * _2345) * _2168);
    float _2432 = (((((_2402 * _2324) + _1049) * cbLight._m0[_2356].y) * _2421) * _2158) + (((((_2321 * _2324) + _1049) * cbLight._m0[_2271].y) * _2345) * _2168);
    float _2433 = (((((_2402 * _2325) + _1050) * cbLight._m0[_2356].z) * _2421) * _2158) + (((((_2321 * _2325) + _1050) * cbLight._m0[_2271].z) * _2345) * _2168);
    float _2495;
    float _2497;
    float _2499;
    if (_2208)
    {
        _2495 = _2431;
        _2497 = _2432;
        _2499 = _2433;
    }
    else
    {
        uint _2501 = _2135 + 2u;
        uint _2505 = _2135 + 10u;
        float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _888) * 0.949999988079071044921875);
        float _2520 = _2519 * _2519;
        float _2521 = cbLight._m0[_2501].x + _965;
        float _2522 = cbLight._m0[_2501].y + _966;
        float _2523 = cbLight._m0[_2501].z + _967;
        float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
        float _2528 = _2527 * _2521;
        float _2529 = _2527 * _2522;
        float _2530 = _2527 * _2523;
        float _2531 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2501].xyz));
        float _4599 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2534 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2535 = dot(vec3(_885, _886, _887), vec3(_2528, _2529, _2530));
        float _4610 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2538 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2539 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2528, _2529, _2530));
        float _4621 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2543 = _2520 * _2520;
        float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
        float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
        float _2561 = 1.0 - _2520;
        float _2571 = (0.5 / (((_2300 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2561) + _2520) * _2534))) * _2534;
        float _4632 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2573 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
        float _2574 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
        _2495 = (((((_2554 * _2322) + _1047) * cbLight._m0[_2505].x) * _2573) * _2574) + _2431;
        _2497 = (((((_2554 * _2324) + _1049) * cbLight._m0[_2505].y) * _2573) * _2574) + _2432;
        _2499 = (((((_2554 * _2325) + _1050) * cbLight._m0[_2505].z) * _2573) * _2574) + _2433;
    }
    float _2609;
    float _2611;
    float _2613;
    if (_2226)
    {
        _2609 = _2495;
        _2611 = _2497;
        _2613 = _2499;
    }
    else
    {
        uint _2620 = _2135 + 3u;
        uint _2624 = _2135 + 11u;
        float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2620].w)) * _888) * 0.949999988079071044921875);
        float _2639 = _2638 * _2638;
        float _2640 = cbLight._m0[_2620].x + _965;
        float _2641 = cbLight._m0[_2620].y + _966;
        float _2642 = cbLight._m0[_2620].z + _967;
        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
        float _2647 = _2646 * _2640;
        float _2648 = _2646 * _2641;
        float _2649 = _2646 * _2642;
        float _2650 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2620].xyz));
        float _4648 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        float _2653 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2654 = dot(vec3(_885, _886, _887), vec3(_2647, _2648, _2649));
        float _4659 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2658 = dot(vec3(cbLight._m0[_2620].xyz), vec3(_2647, _2648, _2649));
        float _4670 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2662 = _2639 * _2639;
        float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
        float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2680 = 1.0 - _2639;
        float _2690 = (0.5 / (((_2300 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2300 * _2680) + _2639) * _2653))) * _2653;
        float _4681 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2692 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
        float _2693 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2609 = (((((_2673 * _2322) + _1047) * cbLight._m0[_2624].x) * _2692) * _2693) + _2495;
        _2611 = (((((_2673 * _2324) + _1049) * cbLight._m0[_2624].y) * _2692) * _2693) + _2497;
        _2613 = (((((_2673 * _2325) + _1050) * cbLight._m0[_2624].z) * _2692) * _2693) + _2499;
    }
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    if (_2133.y == 0u)
    {
        float _2768 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2768;
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2768;
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2768;
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.x;
        uint _2795 = uint((float(_2783.y) * floor(float(uint(cbSceneParam._m0[85u].y * _986) / _2784))) + floor(float(uint(cbSceneParam._m0[85u].x * _985) / _2784)));
        float _2805 = (log2(_2771 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2806 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        uint _2809 = uint(isnan(14.0) ? _2806 : (isnan(_2806) ? 14.0 : min(_2806, 14.0)));
        uvec4 _2814 = texelFetch(g_lightClusterGridBuffer, int(((_2809 << 2u) + (_2795 << 6u)) >> 2u));
        uint _2815 = _2814.x;
        uint _2816 = _2783.z;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        if (((((1u << ((_2816 >> 4u) & 15u)) + 4294967295u) & _2815) == 0u) || ((_2816 & 240u) == 0u))
        {
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
        }
        else
        {
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _2927;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            uint _3075 = 0u;
            uint _3084;
            bool _3085;
            for (;;)
            {
                _3084 = texelFetch(g_lightClassification, int((((_2809 << 5u) + (_2795 << 9u)) + (_3075 << 2u)) >> 2u)).x;
                _3085 = _3084 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3085)
                {
                    frontier_phi_66_pred = _3069;
                    frontier_phi_66_pred_1 = _3074;
                    frontier_phi_66_pred_2 = _3073;
                    frontier_phi_66_pred_3 = _3072;
                    frontier_phi_66_pred_4 = _3071;
                    frontier_phi_66_pred_5 = _3070;
                }
                else
                {
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    uint _3220;
                    _3214 = _3069;
                    _3215 = _3070;
                    _3216 = _3071;
                    _3217 = _3072;
                    _3218 = _3073;
                    _3219 = _3074;
                    _3220 = _3084;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    for (;;)
                    {
                        uint _3224 = uint(findLSB(_3220)) + (_3075 << 5u);
                        uint _3221 = (_3220 + 4294967295u) & _3220;
                        uint _3226 = _3224 * 48u;
                        vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 3u)).x));
                        uint _3246 = (_3224 * 48u) + 4u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 3u)).x));
                        uint _3265 = (_3224 * 48u) + 8u;
                        vec3 _3276 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x));
                        float _3280 = _3240.x - _2769;
                        float _3281 = _3240.y - _2770;
                        float _3282 = _3240.z - _2771;
                        float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                        float _3286 = inversesqrt(_3283);
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3290 = dot(vec3(_1004, _1007, _1010), vec3(_3287, _3288, _3289));
                        float _3295 = 1.0 - (_3283 * _3240.w);
                        float _4707 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3297 = sqrt(_3283) * _3259.w;
                        float _3300 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                        float _3301 = _3300 * _3300;
                        float _3304 = ((1.0 - _3301) * _3290) + _3301;
                        float _3307 = _3297 * _3297;
                        float _3311 = ((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3296) / ((_3307 * 0.699999988079071044921875) + 1.0);
                        float _3315 = (-0.0) - _2769;
                        float _3316 = (-0.0) - _2770;
                        float _3317 = (-0.0) - _2771;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3322 = _3321 * _3315;
                        float _3323 = _3321 * _3316;
                        float _3324 = _3321 * _3317;
                        float _3332 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                        float _3333 = 1.0 - _1079;
                        float _3340 = sqrt(1.0 - ((1.0 - (_3333 * _3333)) * (1.0 - (_3332 * _3332))));
                        float _3341 = _3340 * _3340;
                        float _3342 = _3341 * _3341;
                        float _3343 = _3322 + _3287;
                        float _3344 = _3323 + _3288;
                        float _3345 = _3324 + _3289;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3353 = dot(vec3(_1004, _1007, _1010), vec3(_3322, _3323, _3324));
                        float _4723 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3356 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                        float _3357 = dot(vec3(_1004, _1007, _1010), vec3(_3349 * _3343, _3349 * _3344, _3349 * _3345));
                        float _4734 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                        float _3360 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3364 = ((_3360 * _3360) * (_3342 + (-1.0))) + 1.0;
                        float _3365 = _3300 * _3341;
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3290) + _3366;
                        float _4745 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3371 = 1.0 - _3341;
                        float _3381 = (0.5 / (((_3370 * ((_3356 * _3371) + _3341)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3341) * _3356))) * _3370;
                        float _4756 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3392 = (((_3342 * 3.1415927410125732421875) * (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) / ((_3364 * _3364) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125))) * _3296;
                        _3144 = (_3311 * _3259.x) + _3217;
                        _3145 = (_3311 * _3259.y) + _3218;
                        _3146 = (_3311 * _3259.z) + _3219;
                        _3141 = (_3392 * _3276.x) + _3214;
                        _3142 = (_3392 * _3276.y) + _3215;
                        _3143 = (_3392 * _3276.z) + _3216;
                        if (_3221 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3214 = _3141;
                            _3215 = _3142;
                            _3216 = _3143;
                            _3217 = _3144;
                            _3218 = _3145;
                            _3219 = _3146;
                            _3220 = _3221;
                        }
                    }
                    frontier_phi_66_pred = _3141;
                    frontier_phi_66_pred_1 = _3146;
                    frontier_phi_66_pred_2 = _3145;
                    frontier_phi_66_pred_3 = _3144;
                    frontier_phi_66_pred_4 = _3143;
                    frontier_phi_66_pred_5 = _3142;
                }
                _2917 = frontier_phi_66_pred;
                _2927 = frontier_phi_66_pred_1;
                _2925 = frontier_phi_66_pred_2;
                _2923 = frontier_phi_66_pred_3;
                _2921 = frontier_phi_66_pred_4;
                _2919 = frontier_phi_66_pred_5;
                uint _3076 = _3075 + 1u;
                if (_3076 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3069 = _2917;
                    _3070 = _2919;
                    _3071 = _2921;
                    _3072 = _2923;
                    _3073 = _2925;
                    _3074 = _2927;
                    _3075 = _3076;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
        }
        uvec4 _2930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2931 = _2930.z;
        uint _2933 = (_2931 >> 8u) & 15u;
        float _3037;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        if (((4294967295u << _2933) & _2815) == 0u)
        {
            _3037 = _2916;
            _3039 = _2918;
            _3041 = _2920;
            _3043 = _2922;
            _3045 = _2924;
            _3047 = _2926;
        }
        else
        {
            float _3062 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
            float _3063 = _3062 * _2769;
            float _3064 = _3062 * _2770;
            float _3065 = _3062 * _2771;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2933 < ((_2931 >> 12u) & 15u))
            {
                float _3038;
                float _3040;
                float _3042;
                float _3044;
                float _3046;
                float _3048;
                float _3197 = _2916;
                float _3198 = _2918;
                float _3199 = _2920;
                float _3200 = _2922;
                float _3201 = _2924;
                float _3202 = _2926;
                uint _3203 = _2933;
                uint _3212;
                bool _3213;
                for (;;)
                {
                    _3212 = texelFetch(g_lightClassification, int((((_2809 << 5u) + (_2795 << 9u)) + (_3203 << 2u)) >> 2u)).x;
                    _3213 = _3212 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3213)
                    {
                        frontier_phi_77_pred = _3202;
                        frontier_phi_77_pred_1 = _3201;
                        frontier_phi_77_pred_2 = _3200;
                        frontier_phi_77_pred_3 = _3199;
                        frontier_phi_77_pred_4 = _3198;
                        frontier_phi_77_pred_5 = _3197;
                    }
                    else
                    {
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3699;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3419 = _3197;
                        float _3420 = _3198;
                        float _3421 = _3199;
                        float _3422 = _3200;
                        float _3423 = _3201;
                        float _3424 = _3202;
                        uint _3425 = _3212;
                        uint _3426;
                        vec4 _3451;
                        float _3452;
                        vec4 _3467;
                        vec3 _3479;
                        vec4 _3494;
                        vec4 _3509;
                        float _3555;
                        bool _3556;
                        for (;;)
                        {
                            uint _3436 = ((_3203 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3425));
                            _3426 = (_3425 + 4294967295u) & _3425;
                            uint _3438 = _3436 * 40u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3452 = _3451.w;
                            uint _3454 = (_3436 * 40u) + 4u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3436 * 40u) + 8u;
                            _3479 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x));
                            uint _3481 = (_3436 * 40u) + 16u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            uint _3496 = (_3436 * 40u) + 20u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3436 * 40u) + 24u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            uint _3530 = (_3436 * 40u) + 28u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            _3555 = fma(_2771, _3543.z, fma(_2770, _3543.y, _3543.x * _2769)) + _3543.w;
                            _3556 = !((fma(_2771, _3524.z, fma(_2770, _3524.y, _3524.x * _2769)) + _3524.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3556)
                            {
                                float _3583 = _3451.x - _2769;
                                float _3584 = _3451.y - _2770;
                                float _3585 = _3451.z - _2771;
                                float _3586 = dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585));
                                float _3589 = inversesqrt(_3586);
                                float _3590 = _3589 * _3583;
                                float _3591 = _3589 * _3584;
                                float _3592 = _3589 * _3585;
                                float _3596 = 1.0 - (_3586 / (_3452 * _3452));
                                float _4767 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3601 = sqrt(_3586) * _3467.w;
                                float _3603 = 1.39999997615814208984375 / (_3601 + 1.39999997615814208984375);
                                float _3604 = _3603 * _3603;
                                float _3607 = ((1.0 - _3604) * dot(vec3(_3590, _3591, _3592), vec3(_1004, _1007, _1010))) + _3604;
                                float _3610 = _3601 * _3601;
                                float _3614 = (fma(_2771, _3494.z, fma(_2770, _3494.y, _3494.x * _2769)) + _3494.w) / _3555;
                                float _3615 = (fma(_2771, _3509.z, fma(_2770, _3509.y, _3509.x * _2769)) + _3509.w) / _3555;
                                float _3619 = 1.0 - dot(vec2(_3614, _3615), vec2(_3614, _3615));
                                float _4783 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                                float _3621 = _3620 * (((isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0))) * _3597) / ((_3610 * 0.699999988079071044921875) + 1.0));
                                float _3633 = exp2(log2(1.0 / ((_3610 * 3.5) + 5.0)) * 0.25);
                                float _3634 = 1.0 - _1079;
                                float _3641 = sqrt(1.0 - ((1.0 - (_3634 * _3634)) * (1.0 - (_3633 * _3633))));
                                float _3642 = _3641 * _3641;
                                float _3643 = _3642 * _3642;
                                float _3644 = _3590 - _3063;
                                float _3645 = _3591 - _3064;
                                float _3646 = _3592 - _3065;
                                float _3650 = inversesqrt(dot(vec3(_3644, _3645, _3646), vec3(_3644, _3645, _3646)));
                                float _3654 = dot(vec3(_1004, _1007, _1010), vec3((-0.0) - _3063, (-0.0) - _3064, (-0.0) - _3065));
                                float _4794 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3657 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3658 = dot(vec3(_1004, _1007, _1010), vec3(_3650 * _3644, _3650 * _3645, _3650 * _3646));
                                float _4805 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3661 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3665 = ((_3661 * _3661) * (_3643 + (-1.0))) + 1.0;
                                float _3666 = _3603 * _3642;
                                float _3667 = _3666 * _3666;
                                float _3673 = ((1.0 - _3667) * dot(vec3(_1004, _1007, _1010), vec3(_3590, _3591, _3592))) + _3667;
                                float _4816 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3675 = 1.0 - _3642;
                                float _3685 = (0.5 / (((_3674 * ((_3657 * _3675) + _3642)) + 9.9999999392252902907785028219223e-09) + (((_3674 * _3675) + _3642) * _3657))) * _3674;
                                float _4827 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3695 = (_3620 * _3597) * (((_3643 * 3.1415927410125732421875) * (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) / ((_3665 * _3665) * ((_3610 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3621 * _3467.y;
                                frontier_phi_83_pred_1 = _3621 * _3467.x;
                                frontier_phi_83_pred_2 = _3695 * _3479.z;
                                frontier_phi_83_pred_3 = _3695 * _3479.y;
                                frontier_phi_83_pred_4 = _3695 * _3479.x;
                                frontier_phi_83_pred_5 = _3621 * _3467.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3703 = frontier_phi_83_pred;
                            _3702 = frontier_phi_83_pred_1;
                            _3701 = frontier_phi_83_pred_2;
                            _3700 = frontier_phi_83_pred_3;
                            _3699 = frontier_phi_83_pred_4;
                            _3704 = frontier_phi_83_pred_5;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3406 = _3699 + _3419;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            if (_3426 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3419 = _3406;
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3426;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3411;
                        frontier_phi_77_pred_1 = _3410;
                        frontier_phi_77_pred_2 = _3409;
                        frontier_phi_77_pred_3 = _3408;
                        frontier_phi_77_pred_4 = _3407;
                        frontier_phi_77_pred_5 = _3406;
                    }
                    _3048 = frontier_phi_77_pred;
                    _3046 = frontier_phi_77_pred_1;
                    _3044 = frontier_phi_77_pred_2;
                    _3042 = frontier_phi_77_pred_3;
                    _3040 = frontier_phi_77_pred_4;
                    _3038 = frontier_phi_77_pred_5;
                    uint _3204 = _3203 + 1u;
                    if (_3204 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3197 = _3038;
                        _3198 = _3040;
                        _3199 = _3042;
                        _3200 = _3044;
                        _3201 = _3046;
                        _3202 = _3048;
                        _3203 = _3204;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3042;
                frontier_phi_58_59_ladder_1 = _3048;
                frontier_phi_58_59_ladder_2 = _3046;
                frontier_phi_58_59_ladder_3 = _3044;
                frontier_phi_58_59_ladder_4 = _3040;
                frontier_phi_58_59_ladder_5 = _3038;
            }
            else
            {
                frontier_phi_58_59_ladder = _2920;
                frontier_phi_58_59_ladder_1 = _2926;
                frontier_phi_58_59_ladder_2 = _2924;
                frontier_phi_58_59_ladder_3 = _2922;
                frontier_phi_58_59_ladder_4 = _2918;
                frontier_phi_58_59_ladder_5 = _2916;
            }
            _3037 = frontier_phi_58_59_ladder_5;
            _3039 = frontier_phi_58_59_ladder_4;
            _3041 = frontier_phi_58_59_ladder;
            _3043 = frontier_phi_58_59_ladder_3;
            _3045 = frontier_phi_58_59_ladder_2;
            _3047 = frontier_phi_58_59_ladder_1;
        }
        float _3052 = isnan(1.0) ? _1063 : (isnan(_1063) ? 1.0 : min(_1063, 1.0));
        _2828 = (_3052 * _3043) + _2264;
        _2830 = (_3052 * _3045) + _2266;
        _2832 = (_3052 * _3047) + _2268;
        _2834 = ((_3037 * _1047) * _3052) + _2609;
        _2836 = ((_3039 * _1049) * _3052) + _2611;
        _2838 = ((_3041 * _1050) * _3052) + _2613;
    }
    else
    {
        _2828 = _2264;
        _2830 = _2266;
        _2832 = _2268;
        _2834 = _2609;
        _2836 = _2611;
        _2838 = _2613;
    }
    float _4843 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4854 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4865 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2855 = ((isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2828 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1063))) + ((_2834 + ((isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))) * _1902)) * cbPerFrame._m0[3u].x);
    float _2856 = ((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2830 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1063))) + ((_2836 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1902)) * cbPerFrame._m0[3u].x);
    float _2857 = ((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2832 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1063))) + ((_2838 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1902)) * cbPerFrame._m0[3u].x);
    uint _2858 = _278 + 6u;
    float _2866 = _985 / cbSceneParam._m0[86u].x;
    float _2867 = _986 / cbSceneParam._m0[86u].y;
    vec4 _2881 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2866, _2867, (log2((isnan(cbSceneParam._m0[77u].w) ? _907 : (isnan(_907) ? cbSceneParam._m0[77u].w : min(_907, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2883 = _2881.x;
    float _2884 = _2881.y;
    float _2885 = _2881.z;
    float _2886 = _2881.w;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    if (_907 > cbSceneParam._m0[78u].w)
    {
        float _2941 = isnan(_907) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _907 : min(cbSceneParam._m0[80u].w, _907));
        float _2942 = _2941 / _907;
        float _2953 = _2942 * _958;
        float _2954 = _959 * _2942;
        float _2955 = (-0.0) - _2954;
        float _2957 = _2942 * _960;
        float _2959 = (cbSceneParam._m0[77u].w * _2955) / _2941;
        float _2960 = _2959 + cbSceneParam._m0[79u].w;
        float _2961 = cbSceneParam._m0[79u].w - _2954;
        float _2967 = sqrt(((_2953 * _2953) + (_2954 * _2954)) + (_2957 * _2957));
        float _2970 = (1.0 - (cbSceneParam._m0[77u].w / _2941)) * _2967;
        float _2975 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2977 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3154;
        if (abs((_2955 - _2959) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3154 = ((((_2960 > 0.0) ? exp2(_2975 * _2960) : (2.0 - exp2(_2977 * _2960))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2970;
        }
        else
        {
            float _3098 = 1.0 / cbSceneParam._m0[80u].x;
            float _3099 = isnan(_2961) ? _2960 : (isnan(_2960) ? _2961 : max(_2960, _2961));
            float _3100 = isnan(_2961) ? _2960 : (isnan(_2960) ? _2961 : min(_2960, _2961));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            float _3110 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : min(_3100, 0.0));
            _3154 = ((abs(_2967 / _2955) * cbSceneParam._m0[80u].y) * ((((_3109 - _3110) * 2.0) - ((exp2(_2975 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0)))) - exp2(_2975 * (isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))))) * _3098)) - ((exp2(_2977 * _3109) - exp2(_2977 * _3110)) * _3098))) + (_2970 * cbSceneParam._m0[80u].z);
        }
        vec4 _3156 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2866, _2867, 1.0), 0.0);
        float _3165 = exp2((_3154 * (-1.44269502162933349609375)) * (1.0 - _3156.w));
        float _3166 = log2(_3165);
        float _3182 = log2(_2886);
        _2979 = (exp2(_3182 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].x)) * _3156.x) / cbSceneParam._m0[78u].x)) + _2883;
        _2981 = (exp2(_3182 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].y)) * _3156.y) / cbSceneParam._m0[78u].y)) + _2884;
        _2983 = (exp2(_3182 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3166 * cbSceneParam._m0[78u].z)) * _3156.z) / cbSceneParam._m0[78u].z)) + _2885;
        _2985 = _3165 * _2886;
    }
    else
    {
        _2979 = _2883;
        _2981 = _2884;
        _2983 = _2885;
        _2985 = _2886;
    }
    bool _3192;
    vec4 _2995;
    vec4 _3017;
    float _3019;
    float _3023;
    float _3024;
    float _3025;
    float _3026;
    bool _3036;
    for (;;)
    {
        _2995 = cbMatDynParam._m0[0u];
        float _2997 = roundEven(_2995.y);
        bool _2998 = _2997 == 3.0;
        float _2999 = log2(_2985);
        float _3006 = exp2(_2999 * cbSceneParam._m0[78u].x) * _2855;
        float _3007 = exp2(_2999 * cbSceneParam._m0[78u].y) * _2856;
        float _3008 = exp2(_2999 * cbSceneParam._m0[78u].z) * _2857;
        float _3015 = _974 + (-0.5);
        _3017 = cbMtdParam._m0[1u];
        _3019 = _3017.y * _3015;
        float _3022 = (_2997 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3023 = _3022 * (_2998 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2979)));
        _3024 = _3022 * (_2998 ? _3007 : (_3007 + (cbSceneParam._m0[72u].w * _2981)));
        _3025 = _3022 * (_2998 ? _3008 : (_3008 + (cbSceneParam._m0[72u].w * _2983)));
        _3026 = _3015 * 0.999000012874603271484375;
        _3036 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3036)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3026) < 0.5)
            {
                _3192 = true;
                break;
            }
        }
        uint _3133 = _1023 + uint(_2995.w);
        if ((cbInstanceData._m0[_3133].w < 1.0) && ((cbInstanceData._m0[_3133].w + _3026) < 0.5))
        {
            _3192 = true;
            break;
        }
        if ((_3019 + 1.0) < _3017.x)
        {
            _3192 = true;
            break;
        }
        _3192 = false;
        break;
    }
    float _3397;
    if (_3192)
    {
        discard_state = true;
        _3397 = 0.0;
    }
    else
    {
        _3397 = cbInstanceData._m0[_2858].w;
    }
    SV_Target.x = _3023;
    SV_Target.y = _3024;
    SV_Target.z = _3025;
    SV_Target.w = _3397;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2858].w;
    discard_exit();
}


