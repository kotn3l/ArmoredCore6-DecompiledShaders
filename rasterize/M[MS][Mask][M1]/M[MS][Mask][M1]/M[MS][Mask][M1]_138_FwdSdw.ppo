#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1677;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4283 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4294 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4305 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[23u].w) + _454) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4316 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[23u].w) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4327 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _552 = (_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479;
    float _553 = (_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480;
    float _554 = (_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _405.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[23u].w) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4338 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _622 = (_615 * ((_573.x * cbMtdParam._m0[14u].x) - _552)) + _552;
    float _623 = (_615 * ((_573.y * cbMtdParam._m0[14u].y) - _553)) + _553;
    float _624 = (_615 * ((_573.z * cbMtdParam._m0[14u].z) - _554)) + _554;
    float _628 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _622;
    float _631 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _623;
    float _634 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _624;
    float _641 = ((_622 - _628) * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) + _628;
    float _642 = ((_623 - _631) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) + _631;
    float _643 = ((_624 - _634) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) + _634;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _322) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _323) + cbTextureTilingScale._m0[14u].w));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _724 = _720.z;
    float _731 = ((_703.x - _722) * _472) + _722;
    float _732 = ((_703.y - _723) * _472) + _723;
    float _733 = ((_703.z - _724) * _472) + _724;
    vec4 _745 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _756 = ((_745.x - _731) * _545) + _731;
    float _757 = ((_745.y - _732) * _545) + _732;
    float _758 = ((_745.z - _733) * _545) + _733;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _783 = ((_770.z - _758) * _615) + _758;
    float _786 = ((((_770.x - _756) * _615) + _756) * 2.0) + (-1.0);
    float _787 = ((((_770.y - _757) * _615) + _757) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _4349 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))));
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _832 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _834 = _832.x;
    float _835 = 1.0 - _834;
    float _843 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _846 = ((isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : min(_843, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _855 = (_846 - ((((((_834 - _835) * cbMtdParam._m0[24u].z) + _835) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _846))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4370 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _856 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _863 = (_856 * ((_661.x * cbMtdParam._m0[18u].x) - _641)) + _641;
    float _864 = (_856 * ((_661.y * cbMtdParam._m0[18u].y) - _642)) + _642;
    float _865 = (_856 * ((_661.z * cbMtdParam._m0[18u].z) - _643)) + _643;
    vec4 _877 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _322) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _323) + cbTextureTilingScale._m0[19u].w));
    float _879 = _877.x;
    float _880 = 1.0 - _879;
    float _905 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_879 - _880) * cbMtdParam._m0[24u].w) + _880) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4381 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _906 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _914 = ((((cbMtdParam._m0[10u].x - _863) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _906) + _863;
    float _915 = ((((cbMtdParam._m0[10u].y - _864) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _906) + _864;
    float _916 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _865)) * _906) + _865;
    vec4 _942 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _944 = _942.x;
    float _962 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _944) * _472) + _944;
    float _979 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _962) * _545) + _962;
    float _996 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _979) * _615) + _979;
    float _1000 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _996) * cbMtdParam._m0[19u].z) + _996;
    float _1002 = _1000 - (_1000 * _856);
    float _1004 = _1002 - (_1002 * _906);
    float _1009 = (((_680.z - _783) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _783;
    float _1013 = ((_807.z - _1009) * cbMtdParam._m0[19u].w) + _1009;
    vec4 _1029 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1036 = (_1029.x * 2.0) + (-1.0);
    float _1037 = (_1029.y * 2.0) + (-1.0);
    float _1038 = dot(vec2(_1036, _1037), vec2(_1036, _1037));
    float _4392 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1046 = (_856 * (_1029.z - _1013)) + _1013;
    float _1049 = ((cbMtdParam._m0[23u].x - _1046) * _906) + _1046;
    vec4 _1072 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _322) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _323) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1078 = (_1072.x * 2.0) + (-1.0);
    float _1079 = (_1072.y * 2.0) + (-1.0);
    float _1080 = dot(vec2(_1078, _1079), vec2(_1078, _1079));
    float _4403 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1094 = (_786 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_680.x * 2.0) + (-1.0)))) + (((_807.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1095 = (_787 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_680.y * 2.0) + (-1.0)))) + (((_807.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1107 = (((_1036 - _1094) + (cbMtdParam._m0[21u].x * _1094)) * _856) + _1094;
    float _1108 = (((_1037 - _1095) + (cbMtdParam._m0[21u].x * _1095)) * _856) + _1095;
    float _1109 = (_856 * (sqrt(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) - _793)) + _793;
    float _1120 = (((_1078 - _1107) + (_1107 * cbMtdParam._m0[22u].z)) * _906) + _1107;
    float _1121 = (((_1079 - _1108) + (_1108 * cbMtdParam._m0[22u].z)) * _906) + _1108;
    float _1122 = ((sqrt(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) - _1109) * _906) + _1109;
    float _1124 = cbMtdParam._m0[22u].x + _807.w;
    float _1127 = fma(_1122, _271 * NORMAL.x, fma(_1121, _278 * TANGENT.x, (_264 * _256) * _1120));
    float _1130 = fma(_1122, _271 * NORMAL.y, fma(_1121, _278 * TANGENT.y, (_264 * _257) * _1120));
    float _1133 = fma(_1122, _271 * NORMAL.z, fma(_1121, _278 * TANGENT.z, (_264 * _258) * _1120));
    float _1137 = inversesqrt(dot(vec3(_1127, _1130, _1133), vec3(_1127, _1130, _1133)));
    float _1138 = _1137 * _1127;
    float _1139 = _1137 * _1130;
    float _1140 = _1137 * _1133;
    float _4414 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1141 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4436 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4447 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4458 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4469 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1146 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _1160 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1210 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1200);
    float _1211 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1200);
    float _1212 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1200);
    float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
    float _1217 = _1210 * _1216;
    float _1218 = _1211 * _1216;
    float _1219 = _1212 * _1216;
    float _1225 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1226 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1244 = fma(_1140, cbSceneParam._m0[5u].z, fma(_1139, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1138));
    float _1247 = fma(_1140, cbSceneParam._m0[6u].z, fma(_1139, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1138));
    float _1250 = fma(_1140, cbSceneParam._m0[7u].z, fma(_1139, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1138));
    uint _1264 = (_303 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1270 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) * cbInstanceData._m0[_1264].x;
    float _1271 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * cbInstanceData._m0[_1264].y;
    float _1272 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * cbInstanceData._m0[_1264].z;
    float _4480 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
    float _1273 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _4491 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
    float _1274 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _4502 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    float _1275 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _1276 = 1.0 - _1146;
    float _1277 = _1273 * _1276;
    float _1278 = _1274 * _1276;
    float _1279 = _1275 * _1276;
    float _1284 = (_1273 + (-0.039999999105930328369140625)) * _1146;
    float _1285 = (_1274 + (-0.039999999105930328369140625)) * _1146;
    float _1286 = (_1275 + (-0.039999999105930328369140625)) * _1146;
    float _1287 = _1284 + 0.039999999105930328369140625;
    float _1289 = _1285 + 0.039999999105930328369140625;
    float _1290 = _1286 + 0.039999999105930328369140625;
    vec4 _1299 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1225, cbSceneParam._m0[86u].y * _1226));
    float _1303 = ((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * TEXCOORD_5.w) * _1299.x;
    float _1304 = dot(vec3(_1138, _1139, _1140), vec3(_1217, _1218, _1219));
    float _1307 = _1304 * 2.0;
    float _1311 = (_1307 * _1138) - _1217;
    float _1312 = (_1307 * _1139) - _1218;
    float _1313 = (_1307 * _1140) - _1219;
    float _1317 = abs(dot(vec3(_1217, _1218, _1219), vec3(_1138, _1139, _1140)));
    float _4513 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1319 = sqrt(_1141);
    float _1332 = exp2((_1319 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1319 * 3.0));
    float _1338 = (1.0 - _1332) * ((_1319 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1339 = _1332 * _1319;
    float _1367 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1371 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1375 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1676;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1401 = fma(_1375, cbModelParam._m0[26u].z, fma(_1371, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1367));
        float _1405 = fma(_1375, cbModelParam._m0[27u].z, fma(_1371, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1367));
        float _1409 = fma(_1375, cbModelParam._m0[28u].z, fma(_1371, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1367));
        float _1434 = _1367 + _1138;
        float _1435 = _1371 + _1139;
        float _1436 = _1375 + _1140;
        float _1446 = fma(_1436, cbModelParam._m0[26u].z, fma(_1435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1434)) - _1401;
        float _1447 = fma(_1436, cbModelParam._m0[27u].z, fma(_1435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1434)) - _1405;
        float _1448 = fma(_1436, cbModelParam._m0[28u].z, fma(_1435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1434)) - _1409;
        float _1452 = inversesqrt(dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448)));
        float _1465 = ((_1452 * _1446) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1401 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1466 = ((_1452 * _1447) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1405 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1452 * _1448) / cbModelParam._m0[34u].z) + ((((((_1409 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1465, _1466, _1467), 0.0);
        float _1504 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1470.x + (-0.5));
        float _1506 = _1504 * (_1470.y + (-0.5));
        float _1507 = _1504 * (_1470.z + (-0.5));
        float _1514 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1477.x + (-0.5));
        float _1516 = _1514 * (_1477.y + (-0.5));
        float _1517 = _1514 * (_1477.z + (-0.5));
        float _1524 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1484.x + (-0.5));
        float _1526 = _1524 * (_1484.y + (-0.5));
        float _1527 = _1524 * (_1484.z + (-0.5));
        float _1534 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1491.x + (-0.5));
        float _1536 = _1534 * (_1491.y + (-0.5));
        float _1537 = _1534 * (_1491.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1558 = (dot(vec3(_1138, _1139, _1140), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4539 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1568 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4550 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1570 = _1569 * 2.0;
        float _1574 = (1.0 - _1569) / (_1569 + 1.0);
        float _4561 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _1584 = ((((1.0 - _1575) * (_1570 + 2.0)) * exp2(log2(isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_1570 + 1.0))) + _1575) * _1538;
        float _1585 = _1506 * 0.5;
        float _1586 = _1516 * 0.5;
        float _1587 = _1526 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_1138, _1139, _1140), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4572 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4583 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4594 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_1612 + 1.0))) + _1617) * _1539;
        float _1627 = _1507 * 0.5;
        float _1628 = _1517 * 0.5;
        float _1629 = _1527 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_1138, _1139, _1140), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4605 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4616 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4627 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_1654 + 1.0))) + _1659) * _1540;
        _1676 = _1507;
        _1678 = _1506;
        _1679 = _1505;
        _1680 = _1517;
        _1681 = _1516;
        _1682 = _1515;
        _1683 = _1527;
        _1684 = _1526;
        _1685 = _1525;
        _1686 = _1540;
        _1687 = _1539;
        _1688 = _1538;
        _1689 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)));
        _1690 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1691 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
    }
    else
    {
        _1676 = _1677;
        _1678 = _1677;
        _1679 = _1677;
        _1680 = _1677;
        _1681 = _1677;
        _1682 = _1677;
        _1683 = _1677;
        _1684 = _1677;
        _1685 = _1677;
        _1686 = _1677;
        _1687 = _1677;
        _1688 = _1677;
        _1689 = 0.0;
        _1690 = 0.0;
        _1691 = 0.0;
    }
    float _1983;
    float _1984;
    float _1985;
    float _1986;
    float _1987;
    float _1988;
    float _1989;
    float _1990;
    float _1991;
    float _1992;
    float _1993;
    float _1994;
    float _1995;
    float _1996;
    float _1997;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1714 = fma(_1375, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367));
        float _1718 = fma(_1375, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367));
        float _1722 = fma(_1375, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367));
        float _1745 = _1367 + _1138;
        float _1746 = _1371 + _1139;
        float _1747 = _1375 + _1140;
        float _1757 = fma(_1747, cbModelParam._m0[30u].z, fma(_1746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1745)) - _1714;
        float _1758 = fma(_1747, cbModelParam._m0[31u].z, fma(_1746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1745)) - _1718;
        float _1759 = fma(_1747, cbModelParam._m0[32u].z, fma(_1746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1745)) - _1722;
        float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
        float _1776 = ((_1763 * _1757) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1714 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1777 = ((_1763 * _1758) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1718 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1778 = ((_1763 * _1759) / cbModelParam._m0[35u].z) + ((((((_1722 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1780 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1776, _1777, _1778), 0.0);
        vec4 _1787 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1776, _1777, _1778), 0.0);
        vec4 _1794 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1776, _1777, _1778), 0.0);
        vec4 _1801 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1776, _1777, _1778), 0.0);
        float _1813 = exp2((_1780.w + (-0.5)) * 20.0) * 2.0;
        float _1814 = _1813 * (_1780.x + (-0.5));
        float _1815 = _1813 * (_1780.y + (-0.5));
        float _1816 = _1813 * (_1780.z + (-0.5));
        float _1823 = exp2((_1787.w + (-0.5)) * 20.0) * 2.0;
        float _1824 = _1823 * (_1787.x + (-0.5));
        float _1825 = _1823 * (_1787.y + (-0.5));
        float _1826 = _1823 * (_1787.z + (-0.5));
        float _1833 = exp2((_1794.w + (-0.5)) * 20.0) * 2.0;
        float _1834 = _1833 * (_1794.x + (-0.5));
        float _1835 = _1833 * (_1794.y + (-0.5));
        float _1836 = _1833 * (_1794.z + (-0.5));
        float _1843 = exp2((_1801.w + (-0.5)) * 20.0) * 2.0;
        float _1844 = _1843 * (_1801.x + (-0.5));
        float _1845 = _1843 * (_1801.y + (-0.5));
        float _1846 = _1843 * (_1801.z + (-0.5));
        float _1847 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1848 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1849 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1850 = _1814 * 0.5;
        float _1851 = _1824 * 0.5;
        float _1852 = _1834 * 0.5;
        float _1853 = dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852));
        float _1858 = (_1853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1853);
        float _1866 = (dot(vec3(_1138, _1139, _1140), vec3(_1858 * _1850, _1858 * _1851, _1858 * _1852)) + 1.0) * 0.5;
        float _4668 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1875 = sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852)) / (_1847 + 9.9999997473787516355514526367188e-06);
        float _4679 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1877 = _1876 * 2.0;
        float _1881 = (1.0 - _1876) / (_1876 + 1.0);
        float _4690 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _1891 = ((((1.0 - _1882) * (_1877 + 2.0)) * exp2(log2(isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_1877 + 1.0))) + _1882) * _1847;
        float _1892 = _1815 * 0.5;
        float _1893 = _1825 * 0.5;
        float _1894 = _1835 * 0.5;
        float _1895 = dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894));
        float _1900 = (_1895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1895);
        float _1908 = (dot(vec3(_1138, _1139, _1140), vec3(_1900 * _1892, _1900 * _1893, _1900 * _1894)) + 1.0) * 0.5;
        float _4701 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1917 = sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894)) / (_1848 + 9.9999997473787516355514526367188e-06);
        float _4712 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _1919 = _1918 * 2.0;
        float _1923 = (1.0 - _1918) / (_1918 + 1.0);
        float _4723 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _1933 = ((((1.0 - _1924) * (_1919 + 2.0)) * exp2(log2(isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_1919 + 1.0))) + _1924) * _1848;
        float _1934 = _1816 * 0.5;
        float _1935 = _1826 * 0.5;
        float _1936 = _1836 * 0.5;
        float _1937 = dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936));
        float _1942 = (_1937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1937);
        float _1950 = (dot(vec3(_1138, _1139, _1140), vec3(_1942 * _1934, _1942 * _1935, _1942 * _1936)) + 1.0) * 0.5;
        float _4734 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1959 = sqrt(((_1935 * _1935) + (_1934 * _1934)) + (_1936 * _1936)) / (_1849 + 9.9999997473787516355514526367188e-06);
        float _4745 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _1961 = _1960 * 2.0;
        float _1965 = (1.0 - _1960) / (_1960 + 1.0);
        float _4756 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _1975 = ((((1.0 - _1966) * (_1961 + 2.0)) * exp2(log2(isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_1961 + 1.0))) + _1966) * _1849;
        _1983 = _1816;
        _1984 = _1815;
        _1985 = _1814;
        _1986 = _1826;
        _1987 = _1825;
        _1988 = _1824;
        _1989 = _1836;
        _1990 = _1835;
        _1991 = _1834;
        _1992 = _1849;
        _1993 = _1848;
        _1994 = _1847;
        _1995 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)));
        _1996 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)));
        _1997 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)));
    }
    else
    {
        _1983 = _1677;
        _1984 = _1677;
        _1985 = _1677;
        _1986 = _1677;
        _1987 = _1677;
        _1988 = _1677;
        _1989 = _1677;
        _1990 = _1677;
        _1991 = _1677;
        _1992 = _1677;
        _1993 = _1677;
        _1994 = _1677;
        _1995 = 0.0;
        _1996 = 0.0;
        _1997 = 0.0;
    }
    float _2007 = (cbModelParam._m0[1u].x * (_1995 - _1689)) + _1689;
    float _2008 = (cbModelParam._m0[1u].x * (_1996 - _1690)) + _1690;
    float _2009 = (cbModelParam._m0[1u].x * (_1997 - _1691)) + _1691;
    float _2030 = fma(_2009, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2007 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2009, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2007 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2009, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2007));
    float _2051 = _1311 * 0.5;
    float _2052 = _1312 * 0.5;
    float _2053 = _1313 * 0.5;
    float _2054 = dot(vec4(_2051, _2052, _2053, 1.0), vec4(_1985, _1988, _1991, _1994));
    float _2057 = dot(vec4(_2051, _2052, _2053, 1.0), vec4(_1984, _1987, _1990, _1993));
    float _2060 = dot(vec4(_2051, _2052, _2053, 1.0), vec4(_1983, _1986, _1989, _1992));
    float _2094;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2067 = dot(vec4(_2051, _2052, _2053, 1.0), vec4(_1676, _1680, _1683, _1686));
        float _2071 = dot(vec4(_2051, _2052, _2053, 1.0), vec4(_1678, _1681, _1684, _1687));
        float _2075 = dot(vec4(_2051, _2052, _2053, 1.0), vec4(_1679, _1682, _1685, _1688));
        float _2082 = dot(vec4(cbModelParam._m0[39u]), vec4(_2051, _2052, _2053, 1.0));
        _2094 = dot(vec3(isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0)), isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)), isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2082) ? 0.0 : (isnan(0.0) ? _2082 : max(0.0, _2082))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2094 = 1.0;
    }
    float _2105;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2096 = dot(vec4(cbModelParam._m0[40u]), vec4(_2051, _2052, _2053, 1.0));
        _2105 = dot(vec3(isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)), isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0)), isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2096) ? 0.0 : (isnan(0.0) ? _2096 : max(0.0, _2096))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2105 = 1.0;
    }
    float _2109 = (_2105 * cbModelParam._m0[1u].x) + (_2094 * (1.0 - cbModelParam._m0[1u].x));
    float _2119 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1141);
    float _2120 = isnan(_2119) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2119 : min(cbModelParam._m0[25u].z, _2119));
    float _2200;
    float _2202;
    float _2204;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2167 = fma(_1375, cbModelParam._m0[13u].z, fma(_1371, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1367)) + cbModelParam._m0[13u].w;
        float _2171 = fma(_1375, cbModelParam._m0[14u].z, fma(_1371, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1367)) + cbModelParam._m0[14u].w;
        float _2175 = fma(_1375, cbModelParam._m0[15u].z, fma(_1371, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1367)) + cbModelParam._m0[15u].w;
        float _2178 = fma(_1313, cbModelParam._m0[13u].z, fma(_1312, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1311));
        float _2181 = fma(_1313, cbModelParam._m0[14u].z, fma(_1312, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1311));
        float _2184 = fma(_1313, cbModelParam._m0[15u].z, fma(_1312, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1311));
        float _2212;
        if (_2178 > 0.0)
        {
            _2212 = abs((1.0 - _2167) / _2178);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2167 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2212 = frontier_phi_14_12_ladder;
        }
        float _2383;
        if (_2181 > 0.0)
        {
            _2383 = abs((1.0 - _2171) / _2181);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2181 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2171 + 1.0) / _2181);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2383 = frontier_phi_23_19_ladder;
        }
        float _2678;
        if (_2184 > 0.0)
        {
            _2678 = abs((1.0 - _2175) / _2184);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2184 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2175 + 1.0) / _2184);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2678 = frontier_phi_35_30_ladder;
        }
        float _2680 = isnan(_2383) ? _2212 : (isnan(_2212) ? _2383 : min(_2212, _2383));
        float _2681 = isnan(_2678) ? _2680 : (isnan(_2680) ? _2678 : min(_2680, _2678));
        float _2685 = (_2681 * _2178) + _2167;
        float _2686 = (_2681 * _2181) + _2171;
        float _2687 = (_2681 * _2184) + _2175;
        float _2688 = _2681 * 9.9999997473787516355514526367188e-05;
        float _2690 = (-1.0) - _2688;
        float _2692 = _2688 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2687 > _2692) || ((_2687 < _2690) || ((_2686 > _2692) || ((_2686 < _2690) || ((_2685 < _2690) || (_2685 > _2692))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2687, cbModelParam._m0[9u].z, fma(_2686, cbModelParam._m0[9u].y, _2685 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2687, cbModelParam._m0[10u].z, fma(_2686, cbModelParam._m0[10u].y, _2685 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2687, cbModelParam._m0[11u].z, fma(_2686, cbModelParam._m0[11u].y, _2685 * cbModelParam._m0[11u].x))), _2120);
            frontier_phi_13_35_ladder = _2832.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2832.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2832.x * cbModelParam._m0[1u].y;
        }
        _2200 = frontier_phi_13_35_ladder_2;
        _2202 = frontier_phi_13_35_ladder_1;
        _2204 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2188 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1311, _1312, _1313), _2120);
        _2200 = _2188.x * cbModelParam._m0[1u].y;
        _2202 = _2188.y * cbModelParam._m0[1u].y;
        _2204 = _2188.z * cbModelParam._m0[1u].y;
    }
    float _2208 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1141);
    float _2209 = isnan(_2208) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2208 : min(cbModelParam._m0[25u].w, _2208));
    float _2298;
    float _2300;
    float _2302;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2262 = fma(_1375, cbModelParam._m0[21u].z, fma(_1371, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1367)) + cbModelParam._m0[21u].w;
        float _2266 = fma(_1375, cbModelParam._m0[22u].z, fma(_1371, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1367)) + cbModelParam._m0[22u].w;
        float _2270 = fma(_1375, cbModelParam._m0[23u].z, fma(_1371, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1367)) + cbModelParam._m0[23u].w;
        float _2273 = fma(_1313, cbModelParam._m0[21u].z, fma(_1312, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1311));
        float _2276 = fma(_1313, cbModelParam._m0[22u].z, fma(_1312, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1311));
        float _2279 = fma(_1313, cbModelParam._m0[23u].z, fma(_1312, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1311));
        float _2388;
        if (_2273 > 0.0)
        {
            _2388 = abs((1.0 - _2262) / _2273);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2273 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2262 + 1.0) / _2273);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2388 = frontier_phi_25_21_ladder;
        }
        float _2705;
        if (_2276 > 0.0)
        {
            _2705 = abs((1.0 - _2266) / _2276);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2276 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2266 + 1.0) / _2276);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2705 = frontier_phi_37_32_ladder;
        }
        float _3043;
        if (_2279 > 0.0)
        {
            _3043 = abs((1.0 - _2270) / _2279);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2279 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2270 + 1.0) / _2279);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3043 = frontier_phi_47_44_ladder;
        }
        float _3045 = isnan(_2705) ? _2388 : (isnan(_2388) ? _2705 : min(_2388, _2705));
        float _3046 = isnan(_3043) ? _3045 : (isnan(_3045) ? _3043 : min(_3045, _3043));
        float _3050 = (_3046 * _2273) + _2262;
        float _3051 = (_3046 * _2276) + _2266;
        float _3052 = (_3046 * _2279) + _2270;
        float _3053 = _3046 * 9.9999997473787516355514526367188e-05;
        float _3054 = (-1.0) - _3053;
        float _3056 = _3053 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3052 > _3056) || ((_3052 < _3054) || ((_3051 > _3056) || ((_3051 < _3054) || ((_3050 < _3054) || (_3050 > _3056))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3174 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3052, cbModelParam._m0[17u].z, fma(_3051, cbModelParam._m0[17u].y, _3050 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3052, cbModelParam._m0[18u].z, fma(_3051, cbModelParam._m0[18u].y, _3050 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3052, cbModelParam._m0[19u].z, fma(_3051, cbModelParam._m0[19u].y, _3050 * cbModelParam._m0[19u].x))), _2209);
            frontier_phi_22_47_ladder = _3174.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3174.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3174.x * cbModelParam._m0[1u].z;
        }
        _2298 = frontier_phi_22_47_ladder_2;
        _2300 = frontier_phi_22_47_ladder_1;
        _2302 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2282 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1311, _1312, _1313), _2209);
        _2298 = _2282.x * cbModelParam._m0[1u].z;
        _2300 = _2282.y * cbModelParam._m0[1u].z;
        _2302 = _2282.z * cbModelParam._m0[1u].z;
    }
    float _2315 = (((_1338 * _1287) + _1339) * _1303) * ((cbModelParam._m0[1u].w * (_2298 - _2200)) + _2200);
    float _2317 = (((_1338 * _1289) + _1339) * _1303) * ((cbModelParam._m0[1u].w * (_2300 - _2202)) + _2202);
    float _2319 = (((_1338 * _1290) + _1339) * _1303) * ((cbModelParam._m0[1u].w * (_2302 - _2204)) + _2204);
    float _2322 = fma(_2319, cbSceneParam._m0[89u].z, fma(_2317, cbSceneParam._m0[89u].y, _2315 * cbSceneParam._m0[89u].x));
    float _2325 = fma(_2319, cbSceneParam._m0[90u].z, fma(_2317, cbSceneParam._m0[90u].y, _2315 * cbSceneParam._m0[90u].x));
    float _2328 = fma(_2319, cbSceneParam._m0[91u].z, fma(_2317, cbSceneParam._m0[91u].y, _2315 * cbSceneParam._m0[91u].x));
    float _2362 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2366 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2370 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2374 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2375 = _2362 / _2374;
    float _2376 = _2366 / _2374;
    float _2377 = _2370 / _2374;
    float _2524;
    float _2525;
    float _2526;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2404 = ((uint(_2377 > cbSceneParam._m0[59u].y) + uint(_2377 > cbSceneParam._m0[59u].x)) + uint(_2377 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2405 = _2404 + 43u;
        uint _2413 = _2404 + 44u;
        uint _2421 = _2404 + 45u;
        uint _2429 = _2404 + 46u;
        float _2440 = fma(_2374, cbSceneParam._m0[_2405].w, fma(_2370, cbSceneParam._m0[_2405].z, fma(_2366, cbSceneParam._m0[_2405].y, _2362 * cbSceneParam._m0[_2405].x)));
        float _2444 = fma(_2374, cbSceneParam._m0[_2413].w, fma(_2370, cbSceneParam._m0[_2413].z, fma(_2366, cbSceneParam._m0[_2413].y, _2362 * cbSceneParam._m0[_2413].x)));
        float _2452 = fma(_2374, cbSceneParam._m0[_2429].w, fma(_2370, cbSceneParam._m0[_2429].z, fma(_2366, cbSceneParam._m0[_2429].y, _2362 * cbSceneParam._m0[_2429].x)));
        float _2457 = cbSceneParam._m0[33u].z * _2452;
        float _2459 = cbSceneParam._m0[33u].w * _2452;
        float _2462 = fma(_2374, cbSceneParam._m0[_2421].w, fma(_2370, cbSceneParam._m0[_2421].z, fma(_2366, cbSceneParam._m0[_2421].y, _2362 * cbSceneParam._m0[_2421].x))) / _2452;
        float _2510 = (cbSceneParam._m0[33u].x - sqrt(((_2376 * _2376) + (_2375 * _2375)) + (_2377 * _2377))) * cbSceneParam._m0[33u].y;
        float _4882 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2517 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2457 + _2440) / _2452, (_2459 + _2444) / _2452), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2459 + _2440) / _2452, (_2444 - _2457) / _2452), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2440 - _2457) / _2452, (_2444 - _2459) / _2452), _2462), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2440 - _2459) / _2452, (_2457 + _2444) / _2452), _2462), 0.0)).x), vec4(0.25)));
        _2524 = 1.0 - (_2517 * cbSceneParam._m0[34u].x);
        _2525 = 1.0 - (_2517 * cbSceneParam._m0[34u].y);
        _2526 = 1.0 - (_2517 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2524 = 1.0;
        _2525 = 1.0;
        _2526 = 1.0;
    }
    float _2590;
    float _2592;
    float _2594;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2578 = fma(_2374, cbSceneParam._m0[63u].w, fma(_2370, cbSceneParam._m0[63u].z, fma(_2366, cbSceneParam._m0[63u].y, _2362 * cbSceneParam._m0[63u].x)));
        float _2579 = fma(_2374, cbSceneParam._m0[60u].w, fma(_2370, cbSceneParam._m0[60u].z, fma(_2366, cbSceneParam._m0[60u].y, _2362 * cbSceneParam._m0[60u].x))) / _2578;
        float _2580 = fma(_2374, cbSceneParam._m0[61u].w, fma(_2370, cbSceneParam._m0[61u].z, fma(_2366, cbSceneParam._m0[61u].y, _2362 * cbSceneParam._m0[61u].x))) / _2578;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2579 >= cbSceneParam._m0[64u].x) && (_2580 >= cbSceneParam._m0[64u].y)) && (_2579 <= cbSceneParam._m0[64u].z)) && (_2580 <= cbSceneParam._m0[64u].w))
        {
            float _2718 = fma(_2374, cbSceneParam._m0[62u].w, fma(_2370, cbSceneParam._m0[62u].z, fma(_2366, cbSceneParam._m0[62u].y, _2362 * cbSceneParam._m0[62u].x))) / _2578;
            float _2722 = isnan(cbSceneParam._m0[41u].w) ? _2718 : (isnan(_2718) ? cbSceneParam._m0[41u].w : max(_2718, cbSceneParam._m0[41u].w));
            float _2765 = (cbSceneParam._m0[33u].x - sqrt(((_2376 * _2376) + (_2375 * _2375)) + (_2377 * _2377))) * cbSceneParam._m0[33u].y;
            float _4898 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
            float _2772 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2579, cbSceneParam._m0[33u].w + _2580), _2722), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2579, _2580 - cbSceneParam._m0[33u].z), _2722), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2579 - cbSceneParam._m0[33u].z, _2580 - cbSceneParam._m0[33u].w), _2722), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2579 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2580), _2722), 0.0)).x), vec4(0.25)));
            float _2776 = 1.0 - (_2772 * cbSceneParam._m0[34u].x);
            float _2777 = 1.0 - (_2772 * cbSceneParam._m0[34u].y);
            float _2778 = 1.0 - (_2772 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2778) ? _2526 : (isnan(_2526) ? _2778 : min(_2526, _2778));
            frontier_phi_34_33_ladder_1 = isnan(_2777) ? _2525 : (isnan(_2525) ? _2777 : min(_2525, _2777));
            frontier_phi_34_33_ladder_2 = isnan(_2776) ? _2524 : (isnan(_2524) ? _2776 : min(_2524, _2776));
        }
        else
        {
            frontier_phi_34_33_ladder = _2526;
            frontier_phi_34_33_ladder_1 = _2525;
            frontier_phi_34_33_ladder_2 = _2524;
        }
        _2590 = frontier_phi_34_33_ladder_2;
        _2592 = frontier_phi_34_33_ladder_1;
        _2594 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2590 = _2524;
        _2592 = _2525;
        _2594 = _2526;
    }
    uvec4 _2599 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2601 = _2599.x * 14u;
    uint _2602 = _2601 + 13u;
    float _2609 = _1303 + (-1.0);
    float _2614 = (cbLight._m0[_2602].x * _2609) + 1.0;
    float _2615 = (cbLight._m0[_2602].y * _2609) + 1.0;
    float _2616 = (cbLight._m0[_2602].z * _2609) + 1.0;
    float _2617 = (cbLight._m0[_2602].w * _2609) + 1.0;
    uint _2618 = _2601 + 5u;
    float _2624 = isnan(1.0) ? _2615 : (isnan(_2615) ? 1.0 : min(_2615, 1.0));
    uint _2628 = _2601 + 4u;
    float _2637 = isnan(1.0) ? _2614 : (isnan(_2614) ? 1.0 : min(_2614, 1.0));
    uint _2641 = _2601 | 1u;
    float _2652 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_1138, _1139, _1140));
    float _2655 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_1138, _1139, _1140));
    float _4934 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _4945 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2660 = (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * 0.3183098733425140380859375;
    float _2662 = (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * 0.3183098733425140380859375;
    float _2669 = ((cbLight._m0[_2618].x * _2624) * _2662) + (((cbLight._m0[_2628].x * _2590) * _2637) * _2660);
    float _2670 = ((_2624 * cbLight._m0[_2618].y) * _2662) + (((cbLight._m0[_2628].y * _2592) * _2637) * _2660);
    float _2671 = ((_2624 * cbLight._m0[_2618].z) * _2662) + (((cbLight._m0[_2628].z * _2594) * _2637) * _2660);
    uvec4 _2675 = floatBitsToUint(cbLight._m0[_2601 + 12u]);
    bool _2677 = _2675.x == 0u;
    float _2779;
    float _2781;
    float _2783;
    if (_2677)
    {
        _2779 = _2669;
        _2781 = _2670;
        _2783 = _2671;
    }
    else
    {
        uint _2787 = _2601 + 6u;
        float _2803 = (dot(vec3(cbLight._m0[_2601 + 2u].xyz), vec3(_1138, _1139, _1140)) * 0.5) + 0.5;
        float _2804 = _2803 * _2803;
        float _4956 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2805 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
        float _2806 = isnan(1.0) ? _2616 : (isnan(_2616) ? 1.0 : min(_2616, 1.0));
        _2779 = (((cbLight._m0[_2787].x * 0.3183098733425140380859375) * _2805) * _2806) + _2669;
        _2781 = (((cbLight._m0[_2787].y * 0.3183098733425140380859375) * _2805) * _2806) + _2670;
        _2783 = (((cbLight._m0[_2787].z * 0.3183098733425140380859375) * _2805) * _2806) + _2671;
    }
    bool _2786 = _2675.y == 0u;
    float _2841;
    float _2843;
    float _2845;
    if (_2786)
    {
        _2841 = _2779;
        _2843 = _2781;
        _2845 = _2783;
    }
    else
    {
        uint _3014 = _2601 + 7u;
        float _3030 = (dot(vec3(cbLight._m0[_2601 + 3u].xyz), vec3(_1138, _1139, _1140)) * 0.5) + 0.5;
        float _3031 = _3030 * _3030;
        float _4972 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3032 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _3033 = isnan(1.0) ? _2617 : (isnan(_2617) ? 1.0 : min(_2617, 1.0));
        _2841 = (((cbLight._m0[_3014].x * 0.3183098733425140380859375) * _3032) * _3033) + _2779;
        _2843 = (((cbLight._m0[_3014].y * 0.3183098733425140380859375) * _3032) * _3033) + _2781;
        _2845 = (((cbLight._m0[_3014].z * 0.3183098733425140380859375) * _3032) * _3033) + _2783;
    }
    uint _2848 = _2601 + 8u;
    float _2861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _1141) * 0.949999988079071044921875);
    float _2862 = _2861 * _2861;
    float _2863 = cbLight._m0[_2601].x + _1217;
    float _2864 = cbLight._m0[_2601].y + _1218;
    float _2865 = cbLight._m0[_2601].z + _1219;
    float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
    float _2870 = _2869 * _2863;
    float _2871 = _2869 * _2864;
    float _2872 = _2869 * _2865;
    float _2873 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_2601].xyz));
    float _4988 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
    float _2876 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
    float _4999 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    float _2877 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
    float _2878 = dot(vec3(_1138, _1139, _1140), vec3(_2870, _2871, _2872));
    float _5010 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
    float _2881 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
    float _2882 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2870, _2871, _2872));
    float _5021 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
    float _2886 = _2862 * _2862;
    float _2890 = ((_2881 * _2881) * (_2886 + (-1.0))) + 1.0;
    float _2898 = exp2(log2(1.0 - (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) * 5.0);
    float _2899 = 0.959999978542327880859375 - _1284;
    float _2901 = 0.959999978542327880859375 - _1285;
    float _2902 = 0.959999978542327880859375 - _1286;
    float _2909 = 1.0 - _2862;
    float _2920 = (0.5 / (((_2877 * ((_2876 * _2909) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _2909) + _2862) * _2876))) * _2876;
    float _5032 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
    float _2922 = (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2886 / ((_2890 * _2890) * 3.141590118408203125));
    uint _2936 = _2601 + 9u;
    float _2947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _1141) * 0.949999988079071044921875);
    float _2948 = _2947 * _2947;
    float _2949 = cbLight._m0[_2641].x + _1217;
    float _2950 = cbLight._m0[_2641].y + _1218;
    float _2951 = cbLight._m0[_2641].z + _1219;
    float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
    float _2956 = _2955 * _2949;
    float _2957 = _2955 * _2950;
    float _2958 = _2955 * _2951;
    float _2959 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_2641].xyz));
    float _5043 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
    float _2962 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
    float _2963 = dot(vec3(_1138, _1139, _1140), vec3(_2956, _2957, _2958));
    float _5054 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
    float _2966 = isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0));
    float _2967 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2956, _2957, _2958));
    float _5065 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
    float _2971 = _2948 * _2948;
    float _2975 = ((_2966 * _2966) * (_2971 + (-1.0))) + 1.0;
    float _2982 = exp2(log2(1.0 - (isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0)))) * 5.0);
    float _2989 = 1.0 - _2948;
    float _2999 = (0.5 / (((_2877 * ((_2962 * _2989) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _2989) + _2948) * _2962))) * _2962;
    float _5076 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
    float _3001 = (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_2971 / ((_2975 * _2975) * 3.141590118408203125));
    float _3011 = (((((_2982 * _2899) + _1287) * cbLight._m0[_2936].x) * _3001) * _2624) + ((((cbLight._m0[_2848].x * _2590) * ((_2898 * _2899) + _1287)) * _2922) * _2637);
    float _3012 = (((((_2982 * _2901) + _1289) * cbLight._m0[_2936].y) * _3001) * _2624) + ((((cbLight._m0[_2848].y * _2592) * ((_2898 * _2901) + _1289)) * _2922) * _2637);
    float _3013 = (((((_2982 * _2902) + _1290) * cbLight._m0[_2936].z) * _3001) * _2624) + ((((cbLight._m0[_2848].z * _2594) * ((_2898 * _2902) + _1290)) * _2922) * _2637);
    float _3069;
    float _3071;
    float _3073;
    if (_2677)
    {
        _3069 = _3011;
        _3071 = _3012;
        _3073 = _3013;
    }
    else
    {
        uint _3075 = _2601 + 2u;
        uint _3079 = _2601 + 10u;
        float _3093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3075].w)) * _1141) * 0.949999988079071044921875);
        float _3094 = _3093 * _3093;
        float _3095 = cbLight._m0[_3075].x + _1217;
        float _3096 = cbLight._m0[_3075].y + _1218;
        float _3097 = cbLight._m0[_3075].z + _1219;
        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
        float _3102 = _3101 * _3095;
        float _3103 = _3101 * _3096;
        float _3104 = _3101 * _3097;
        float _3105 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_3075].xyz));
        float _5087 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
        float _3108 = isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0));
        float _3109 = dot(vec3(_1138, _1139, _1140), vec3(_3102, _3103, _3104));
        float _5098 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        float _3112 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
        float _3113 = dot(vec3(cbLight._m0[_3075].xyz), vec3(_3102, _3103, _3104));
        float _5109 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
        float _3117 = _3094 * _3094;
        float _3121 = ((_3112 * _3112) * (_3117 + (-1.0))) + 1.0;
        float _3128 = exp2(log2(1.0 - (isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0)))) * 5.0);
        float _3135 = 1.0 - _3094;
        float _3145 = (0.5 / (((_2877 * ((_3108 * _3135) + _3094)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _3135) + _3094) * _3108))) * _3108;
        float _5120 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
        float _3147 = (isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3117 / ((_3121 * _3121) * 3.141590118408203125));
        float _3148 = isnan(1.0) ? _2616 : (isnan(_2616) ? 1.0 : min(_2616, 1.0));
        _3069 = (((((_3128 * _2899) + _1287) * cbLight._m0[_3079].x) * _3147) * _3148) + _3011;
        _3071 = (((((_3128 * _2901) + _1289) * cbLight._m0[_3079].y) * _3147) * _3148) + _3012;
        _3073 = (((((_3128 * _2902) + _1290) * cbLight._m0[_3079].z) * _3147) * _3148) + _3013;
    }
    float _3179;
    float _3181;
    float _3183;
    if (_2786)
    {
        _3179 = _3069;
        _3181 = _3071;
        _3183 = _3073;
    }
    else
    {
        uint _3190 = _2601 + 3u;
        uint _3194 = _2601 + 11u;
        float _3208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3190].w)) * _1141) * 0.949999988079071044921875);
        float _3209 = _3208 * _3208;
        float _3210 = cbLight._m0[_3190].x + _1217;
        float _3211 = cbLight._m0[_3190].y + _1218;
        float _3212 = cbLight._m0[_3190].z + _1219;
        float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
        float _3217 = _3216 * _3210;
        float _3218 = _3216 * _3211;
        float _3219 = _3216 * _3212;
        float _3220 = dot(vec3(_1138, _1139, _1140), vec3(cbLight._m0[_3190].xyz));
        float _5136 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
        float _3223 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
        float _3224 = dot(vec3(_1138, _1139, _1140), vec3(_3217, _3218, _3219));
        float _5147 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
        float _3227 = isnan(1.0) ? _5147 : (isnan(_5147) ? 1.0 : min(_5147, 1.0));
        float _3228 = dot(vec3(cbLight._m0[_3190].xyz), vec3(_3217, _3218, _3219));
        float _5158 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
        float _3232 = _3209 * _3209;
        float _3236 = ((_3227 * _3227) * (_3232 + (-1.0))) + 1.0;
        float _3243 = exp2(log2(1.0 - (isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0)))) * 5.0);
        float _3250 = 1.0 - _3209;
        float _3260 = (0.5 / (((_2877 * ((_3223 * _3250) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _3250) + _3209) * _3223))) * _3223;
        float _5169 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
        float _3262 = (isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0))) * (_3232 / ((_3236 * _3236) * 3.141590118408203125));
        float _3263 = isnan(1.0) ? _2617 : (isnan(_2617) ? 1.0 : min(_2617, 1.0));
        _3179 = (((((_3243 * _2899) + _1287) * cbLight._m0[_3194].x) * _3262) * _3263) + _3069;
        _3181 = (((((_3243 * _2901) + _1289) * cbLight._m0[_3194].y) * _3262) * _3263) + _3071;
        _3183 = (((((_3243 * _2902) + _1290) * cbLight._m0[_3194].z) * _3262) * _3263) + _3073;
    }
    float _3329;
    float _3331;
    float _3333;
    float _3335;
    float _3337;
    float _3339;
    if (_2599.y == 0u)
    {
        uvec4 _3284 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3285 = _3284.x;
        uint _3296 = uint((float(_3284.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1226) / _3285))) + floor(float(uint(cbSceneParam._m0[85u].x * _1225) / _3285)));
        float _3306 = (log2(_2377 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3307 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
        uint _3310 = uint(isnan(14.0) ? _3307 : (isnan(_3307) ? 14.0 : min(_3307, 14.0)));
        uvec4 _3315 = texelFetch(g_lightClusterGridBuffer, int(((_3310 << 2u) + (_3296 << 6u)) >> 2u));
        uint _3316 = _3315.x;
        uint _3317 = _3284.z;
        float _3396;
        float _3398;
        float _3400;
        float _3402;
        float _3404;
        float _3406;
        if (((((1u << ((_3317 >> 4u) & 15u)) + 4294967295u) & _3316) == 0u) || ((_3317 & 240u) == 0u))
        {
            _3396 = 0.0;
            _3398 = 0.0;
            _3400 = 0.0;
            _3402 = 0.0;
            _3404 = 0.0;
            _3406 = 0.0;
        }
        else
        {
            float _3397;
            float _3399;
            float _3401;
            float _3403;
            float _3405;
            float _3407;
            float _3541 = 0.0;
            float _3542 = 0.0;
            float _3543 = 0.0;
            float _3544 = 0.0;
            float _3545 = 0.0;
            float _3546 = 0.0;
            uint _3547 = 0u;
            uint _3556;
            bool _3557;
            for (;;)
            {
                _3556 = texelFetch(g_lightClassification, int((((_3310 << 5u) + (_3296 << 9u)) + (_3547 << 2u)) >> 2u)).x;
                _3557 = _3556 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3557)
                {
                    frontier_phi_66_pred = _3546;
                    frontier_phi_66_pred_1 = _3545;
                    frontier_phi_66_pred_2 = _3544;
                    frontier_phi_66_pred_3 = _3543;
                    frontier_phi_66_pred_4 = _3542;
                    frontier_phi_66_pred_5 = _3541;
                }
                else
                {
                    float _3665;
                    float _3666;
                    float _3667;
                    float _3668;
                    float _3669;
                    float _3670;
                    uint _3671;
                    _3665 = _3541;
                    _3666 = _3542;
                    _3667 = _3543;
                    _3668 = _3544;
                    _3669 = _3545;
                    _3670 = _3546;
                    _3671 = _3556;
                    float _3597;
                    float _3598;
                    float _3599;
                    float _3600;
                    float _3601;
                    float _3602;
                    for (;;)
                    {
                        uint _3675 = uint(findLSB(_3671)) + (_3547 << 5u);
                        uint _3672 = (_3671 + 4294967295u) & _3671;
                        uint _3677 = _3675 * 48u;
                        vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3677)).x, texelFetch(g_PointLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3677 + 3u)).x));
                        uint _3697 = (_3675 * 48u) + 4u;
                        vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3697)).x, texelFetch(g_PointLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3697 + 3u)).x));
                        uint _3716 = (_3675 * 48u) + 8u;
                        vec3 _3727 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3716)).x, texelFetch(g_PointLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3716 + 2u)).x));
                        float _3731 = _3691.x - _2375;
                        float _3732 = _3691.y - _2376;
                        float _3733 = _3691.z - _2377;
                        float _3734 = dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733));
                        float _3737 = inversesqrt(_3734);
                        float _3738 = _3737 * _3731;
                        float _3739 = _3737 * _3732;
                        float _3740 = _3737 * _3733;
                        float _3741 = dot(vec3(_1244, _1247, _1250), vec3(_3738, _3739, _3740));
                        float _3746 = 1.0 - (_3734 * _3691.w);
                        float _5195 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                        float _3747 = isnan(1.0) ? _5195 : (isnan(_5195) ? 1.0 : min(_5195, 1.0));
                        float _3748 = sqrt(_3734) * _3710.w;
                        float _3751 = 1.39999997615814208984375 / (_3748 + 1.39999997615814208984375);
                        float _3752 = _3751 * _3751;
                        float _3755 = ((1.0 - _3752) * _3741) + _3752;
                        float _3758 = _3748 * _3748;
                        float _3762 = ((isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0))) * _3747) / ((_3758 * 0.699999988079071044921875) + 1.0);
                        float _3766 = (-0.0) - _2375;
                        float _3767 = (-0.0) - _2376;
                        float _3768 = (-0.0) - _2377;
                        float _3772 = inversesqrt(dot(vec3(_3766, _3767, _3768), vec3(_3766, _3767, _3768)));
                        float _3773 = _3772 * _3766;
                        float _3774 = _3772 * _3767;
                        float _3775 = _3772 * _3768;
                        float _3782 = exp2(log2(1.0 / ((_3758 * 3.5) + 5.0)) * 0.25);
                        float _3783 = 1.0 - _1319;
                        float _3790 = sqrt(1.0 - ((1.0 - (_3783 * _3783)) * (1.0 - (_3782 * _3782))));
                        float _3791 = _3790 * _3790;
                        float _3792 = _3791 * _3791;
                        float _3793 = _3773 + _3738;
                        float _3794 = _3774 + _3739;
                        float _3795 = _3775 + _3740;
                        float _3799 = inversesqrt(dot(vec3(_3793, _3794, _3795), vec3(_3793, _3794, _3795)));
                        float _3803 = dot(vec3(_1244, _1247, _1250), vec3(_3773, _3774, _3775));
                        float _5211 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                        float _3806 = isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0));
                        float _3807 = dot(vec3(_1244, _1247, _1250), vec3(_3799 * _3793, _3799 * _3794, _3799 * _3795));
                        float _5222 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                        float _3810 = isnan(1.0) ? _5222 : (isnan(_5222) ? 1.0 : min(_5222, 1.0));
                        float _3814 = ((_3810 * _3810) * (_3792 + (-1.0))) + 1.0;
                        float _3815 = _3751 * _3791;
                        float _3816 = _3815 * _3815;
                        float _3819 = ((1.0 - _3816) * _3741) + _3816;
                        float _5233 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                        float _3820 = isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0));
                        float _3821 = 1.0 - _3791;
                        float _3831 = (0.5 / (((_3820 * ((_3806 * _3821) + _3791)) + 9.9999999392252902907785028219223e-09) + (((_3820 * _3821) + _3791) * _3806))) * _3820;
                        float _5244 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                        float _3842 = (((_3792 * 3.1415927410125732421875) * (isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0)))) / ((_3814 * _3814) * ((_3758 * 2.1991131305694580078125) + 3.141590118408203125))) * _3747;
                        _3600 = (_3762 * _3710.x) + _3668;
                        _3601 = (_3762 * _3710.y) + _3669;
                        _3602 = (_3762 * _3710.z) + _3670;
                        _3597 = (_3842 * _3727.x) + _3665;
                        _3598 = (_3842 * _3727.y) + _3666;
                        _3599 = (_3842 * _3727.z) + _3667;
                        if (_3672 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3665 = _3597;
                            _3666 = _3598;
                            _3667 = _3599;
                            _3668 = _3600;
                            _3669 = _3601;
                            _3670 = _3602;
                            _3671 = _3672;
                        }
                    }
                    frontier_phi_66_pred = _3602;
                    frontier_phi_66_pred_1 = _3601;
                    frontier_phi_66_pred_2 = _3600;
                    frontier_phi_66_pred_3 = _3599;
                    frontier_phi_66_pred_4 = _3598;
                    frontier_phi_66_pred_5 = _3597;
                }
                _3407 = frontier_phi_66_pred;
                _3405 = frontier_phi_66_pred_1;
                _3403 = frontier_phi_66_pred_2;
                _3401 = frontier_phi_66_pred_3;
                _3399 = frontier_phi_66_pred_4;
                _3397 = frontier_phi_66_pred_5;
                uint _3548 = _3547 + 1u;
                if (_3548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3541 = _3397;
                    _3542 = _3399;
                    _3543 = _3401;
                    _3544 = _3403;
                    _3545 = _3405;
                    _3546 = _3407;
                    _3547 = _3548;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3396 = _3397;
            _3398 = _3399;
            _3400 = _3401;
            _3402 = _3403;
            _3404 = _3405;
            _3406 = _3407;
        }
        uvec4 _3410 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3411 = _3410.z;
        uint _3413 = (_3411 >> 8u) & 15u;
        float _3509;
        float _3511;
        float _3513;
        float _3515;
        float _3517;
        float _3519;
        if (((4294967295u << _3413) & _3316) == 0u)
        {
            _3509 = _3396;
            _3511 = _3398;
            _3513 = _3400;
            _3515 = _3402;
            _3517 = _3404;
            _3519 = _3406;
        }
        else
        {
            float _3534 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
            float _3535 = _3534 * _2375;
            float _3536 = _3534 * _2376;
            float _3537 = _3534 * _2377;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3413 < ((_3411 >> 12u) & 15u))
            {
                float _3510;
                float _3512;
                float _3514;
                float _3516;
                float _3518;
                float _3520;
                float _3648 = _3396;
                float _3649 = _3398;
                float _3650 = _3400;
                float _3651 = _3402;
                float _3652 = _3404;
                float _3653 = _3406;
                uint _3654 = _3413;
                uint _3663;
                bool _3664;
                for (;;)
                {
                    _3663 = texelFetch(g_lightClassification, int((((_3310 << 5u) + (_3296 << 9u)) + (_3654 << 2u)) >> 2u)).x;
                    _3664 = _3663 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3664)
                    {
                        frontier_phi_72_pred = _3653;
                        frontier_phi_72_pred_1 = _3652;
                        frontier_phi_72_pred_2 = _3651;
                        frontier_phi_72_pred_3 = _3650;
                        frontier_phi_72_pred_4 = _3649;
                        frontier_phi_72_pred_5 = _3648;
                    }
                    else
                    {
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _4140;
                        float _4141;
                        float _4142;
                        float _4143;
                        float _4144;
                        float _4145;
                        float _3860 = _3648;
                        float _3861 = _3649;
                        float _3862 = _3650;
                        float _3863 = _3651;
                        float _3864 = _3652;
                        float _3865 = _3653;
                        uint _3866 = _3663;
                        uint _3867;
                        vec4 _3892;
                        float _3893;
                        vec4 _3908;
                        vec3 _3920;
                        vec4 _3935;
                        vec4 _3950;
                        float _3996;
                        bool _3997;
                        for (;;)
                        {
                            uint _3877 = ((_3654 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3866));
                            _3867 = (_3866 + 4294967295u) & _3866;
                            uint _3879 = _3877 * 40u;
                            _3892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3879 + 3u)).x));
                            _3893 = _3892.w;
                            uint _3895 = (_3877 * 40u) + 4u;
                            _3908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 3u)).x));
                            uint _3910 = (_3877 * 40u) + 8u;
                            _3920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 2u)).x));
                            uint _3922 = (_3877 * 40u) + 16u;
                            _3935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3922 + 3u)).x));
                            uint _3937 = (_3877 * 40u) + 20u;
                            _3950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 3u)).x));
                            uint _3952 = (_3877 * 40u) + 24u;
                            vec4 _3965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3952 + 3u)).x));
                            uint _3971 = (_3877 * 40u) + 28u;
                            vec4 _3984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3971 + 3u)).x));
                            _3996 = fma(_2377, _3984.z, fma(_2376, _3984.y, _3984.x * _2375)) + _3984.w;
                            _3997 = !((fma(_2377, _3965.z, fma(_2376, _3965.y, _3965.x * _2375)) + _3965.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3997)
                            {
                                float _4024 = _3892.x - _2375;
                                float _4025 = _3892.y - _2376;
                                float _4026 = _3892.z - _2377;
                                float _4027 = dot(vec3(_4024, _4025, _4026), vec3(_4024, _4025, _4026));
                                float _4030 = inversesqrt(_4027);
                                float _4031 = _4030 * _4024;
                                float _4032 = _4030 * _4025;
                                float _4033 = _4030 * _4026;
                                float _4037 = 1.0 - (_4027 / (_3893 * _3893));
                                float _5255 = isnan(0.0) ? _4037 : (isnan(_4037) ? 0.0 : max(_4037, 0.0));
                                float _4038 = isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0));
                                float _4042 = sqrt(_4027) * _3908.w;
                                float _4044 = 1.39999997615814208984375 / (_4042 + 1.39999997615814208984375);
                                float _4045 = _4044 * _4044;
                                float _4048 = ((1.0 - _4045) * dot(vec3(_4031, _4032, _4033), vec3(_1244, _1247, _1250))) + _4045;
                                float _4051 = _4042 * _4042;
                                float _4055 = (fma(_2377, _3935.z, fma(_2376, _3935.y, _3935.x * _2375)) + _3935.w) / _3996;
                                float _4056 = (fma(_2377, _3950.z, fma(_2376, _3950.y, _3950.x * _2375)) + _3950.w) / _3996;
                                float _4060 = 1.0 - dot(vec2(_4055, _4056), vec2(_4055, _4056));
                                float _5271 = isnan(0.0) ? _4060 : (isnan(_4060) ? 0.0 : max(_4060, 0.0));
                                float _4061 = isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0));
                                float _4062 = _4061 * (((isnan(0.0) ? _4048 : (isnan(_4048) ? 0.0 : max(_4048, 0.0))) * _4038) / ((_4051 * 0.699999988079071044921875) + 1.0));
                                float _4074 = exp2(log2(1.0 / ((_4051 * 3.5) + 5.0)) * 0.25);
                                float _4075 = 1.0 - _1319;
                                float _4082 = sqrt(1.0 - ((1.0 - (_4075 * _4075)) * (1.0 - (_4074 * _4074))));
                                float _4083 = _4082 * _4082;
                                float _4084 = _4083 * _4083;
                                float _4085 = _4031 - _3535;
                                float _4086 = _4032 - _3536;
                                float _4087 = _4033 - _3537;
                                float _4091 = inversesqrt(dot(vec3(_4085, _4086, _4087), vec3(_4085, _4086, _4087)));
                                float _4095 = dot(vec3(_1244, _1247, _1250), vec3((-0.0) - _3535, (-0.0) - _3536, (-0.0) - _3537));
                                float _5282 = isnan(0.0) ? _4095 : (isnan(_4095) ? 0.0 : max(_4095, 0.0));
                                float _4098 = isnan(1.0) ? _5282 : (isnan(_5282) ? 1.0 : min(_5282, 1.0));
                                float _4099 = dot(vec3(_1244, _1247, _1250), vec3(_4091 * _4085, _4091 * _4086, _4091 * _4087));
                                float _5293 = isnan(0.0) ? _4099 : (isnan(_4099) ? 0.0 : max(_4099, 0.0));
                                float _4102 = isnan(1.0) ? _5293 : (isnan(_5293) ? 1.0 : min(_5293, 1.0));
                                float _4106 = ((_4102 * _4102) * (_4084 + (-1.0))) + 1.0;
                                float _4107 = _4044 * _4083;
                                float _4108 = _4107 * _4107;
                                float _4114 = ((1.0 - _4108) * dot(vec3(_1244, _1247, _1250), vec3(_4031, _4032, _4033))) + _4108;
                                float _5304 = isnan(0.0) ? _4114 : (isnan(_4114) ? 0.0 : max(_4114, 0.0));
                                float _4115 = isnan(1.0) ? _5304 : (isnan(_5304) ? 1.0 : min(_5304, 1.0));
                                float _4116 = 1.0 - _4083;
                                float _4126 = (0.5 / (((_4115 * ((_4098 * _4116) + _4083)) + 9.9999999392252902907785028219223e-09) + (((_4115 * _4116) + _4083) * _4098))) * _4115;
                                float _5315 = isnan(0.0) ? _4126 : (isnan(_4126) ? 0.0 : max(_4126, 0.0));
                                float _4136 = (_4061 * _4038) * (((_4084 * 3.1415927410125732421875) * (isnan(1.0) ? _5315 : (isnan(_5315) ? 1.0 : min(_5315, 1.0)))) / ((_4106 * _4106) * ((_4051 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4062 * _3908.y;
                                frontier_phi_78_pred_1 = _4062 * _3908.x;
                                frontier_phi_78_pred_2 = _4136 * _3920.z;
                                frontier_phi_78_pred_3 = _4136 * _3920.y;
                                frontier_phi_78_pred_4 = _4136 * _3920.x;
                                frontier_phi_78_pred_5 = _4062 * _3908.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4144 = frontier_phi_78_pred;
                            _4143 = frontier_phi_78_pred_1;
                            _4142 = frontier_phi_78_pred_2;
                            _4141 = frontier_phi_78_pred_3;
                            _4140 = frontier_phi_78_pred_4;
                            _4145 = frontier_phi_78_pred_5;
                            _3850 = _4143 + _3863;
                            _3851 = _4144 + _3864;
                            _3852 = _4145 + _3865;
                            _3847 = _4140 + _3860;
                            _3848 = _4141 + _3861;
                            _3849 = _4142 + _3862;
                            if (_3867 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3860 = _3847;
                                _3861 = _3848;
                                _3862 = _3849;
                                _3863 = _3850;
                                _3864 = _3851;
                                _3865 = _3852;
                                _3866 = _3867;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3852;
                        frontier_phi_72_pred_1 = _3851;
                        frontier_phi_72_pred_2 = _3850;
                        frontier_phi_72_pred_3 = _3849;
                        frontier_phi_72_pred_4 = _3848;
                        frontier_phi_72_pred_5 = _3847;
                    }
                    _3520 = frontier_phi_72_pred;
                    _3518 = frontier_phi_72_pred_1;
                    _3516 = frontier_phi_72_pred_2;
                    _3514 = frontier_phi_72_pred_3;
                    _3512 = frontier_phi_72_pred_4;
                    _3510 = frontier_phi_72_pred_5;
                    uint _3655 = _3654 + 1u;
                    if (_3655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3648 = _3510;
                        _3649 = _3512;
                        _3650 = _3514;
                        _3651 = _3516;
                        _3652 = _3518;
                        _3653 = _3520;
                        _3654 = _3655;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3520;
                frontier_phi_60_61_ladder_1 = _3518;
                frontier_phi_60_61_ladder_2 = _3514;
                frontier_phi_60_61_ladder_3 = _3512;
                frontier_phi_60_61_ladder_4 = _3510;
                frontier_phi_60_61_ladder_5 = _3516;
            }
            else
            {
                frontier_phi_60_61_ladder = _3406;
                frontier_phi_60_61_ladder_1 = _3404;
                frontier_phi_60_61_ladder_2 = _3400;
                frontier_phi_60_61_ladder_3 = _3398;
                frontier_phi_60_61_ladder_4 = _3396;
                frontier_phi_60_61_ladder_5 = _3402;
            }
            _3509 = frontier_phi_60_61_ladder_4;
            _3511 = frontier_phi_60_61_ladder_3;
            _3513 = frontier_phi_60_61_ladder_2;
            _3515 = frontier_phi_60_61_ladder_5;
            _3517 = frontier_phi_60_61_ladder_1;
            _3519 = frontier_phi_60_61_ladder;
        }
        float _3524 = isnan(1.0) ? _1303 : (isnan(_1303) ? 1.0 : min(_1303, 1.0));
        _3329 = (_3524 * _3515) + _2841;
        _3331 = (_3524 * _3517) + _2843;
        _3333 = (_3524 * _3519) + _2845;
        _3335 = ((_3509 * _1287) * _3524) + _3179;
        _3337 = ((_3511 * _1289) * _3524) + _3181;
        _3339 = ((_3513 * _1290) * _3524) + _3183;
    }
    else
    {
        _3329 = _2841;
        _3331 = _2843;
        _3333 = _2845;
        _3335 = _3179;
        _3337 = _3181;
        _3339 = _3183;
    }
    float _5331 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _5342 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
    float _5353 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    uint _3359 = _303 + 6u;
    float _3367 = _1225 / cbSceneParam._m0[86u].x;
    float _3368 = _1226 / cbSceneParam._m0[86u].y;
    vec4 _3382 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3367, _3368, (log2((isnan(cbSceneParam._m0[77u].w) ? _1160 : (isnan(_1160) ? cbSceneParam._m0[77u].w : min(_1160, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3384 = _3382.x;
    float _3385 = _3382.y;
    float _3386 = _3382.z;
    float _3387 = _3382.w;
    float _3459;
    float _3461;
    float _3463;
    float _3465;
    if (_1160 > cbSceneParam._m0[78u].w)
    {
        float _3421 = isnan(_1160) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1160 : min(cbSceneParam._m0[80u].w, _1160));
        float _3422 = _3421 / _1160;
        float _3433 = _3422 * _1210;
        float _3434 = _1211 * _3422;
        float _3435 = (-0.0) - _3434;
        float _3437 = _3422 * _1212;
        float _3439 = (cbSceneParam._m0[77u].w * _3435) / _3421;
        float _3440 = _3439 + cbSceneParam._m0[79u].w;
        float _3441 = cbSceneParam._m0[79u].w - _3434;
        float _3447 = sqrt(((_3433 * _3433) + (_3434 * _3434)) + (_3437 * _3437));
        float _3450 = (1.0 - (cbSceneParam._m0[77u].w / _3421)) * _3447;
        float _3455 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3457 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3610;
        if (abs((_3435 - _3439) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3610 = ((((_3440 > 0.0) ? exp2(_3455 * _3440) : (2.0 - exp2(_3457 * _3440))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3450;
        }
        else
        {
            float _3570 = 1.0 / cbSceneParam._m0[80u].x;
            float _3571 = isnan(_3441) ? _3440 : (isnan(_3440) ? _3441 : max(_3440, _3441));
            float _3572 = isnan(_3441) ? _3440 : (isnan(_3440) ? _3441 : min(_3440, _3441));
            float _3581 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : min(_3571, 0.0));
            float _3582 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : min(_3572, 0.0));
            _3610 = ((abs(_3447 / _3435) * cbSceneParam._m0[80u].y) * ((((_3581 - _3582) * 2.0) - ((exp2(_3455 * (isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0)))) - exp2(_3455 * (isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))))) * _3570)) - ((exp2(_3457 * _3581) - exp2(_3457 * _3582)) * _3570))) + (_3450 * cbSceneParam._m0[80u].z);
        }
        vec4 _3612 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3367, _3368, 1.0), 0.0);
        float _3621 = exp2((_3610 * (-1.44269502162933349609375)) * (1.0 - _3612.w));
        float _3622 = log2(_3621);
        float _3638 = log2(_3387);
        _3459 = (exp2(_3638 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3622 * cbSceneParam._m0[78u].x)) * _3612.x) / cbSceneParam._m0[78u].x)) + _3384;
        _3461 = (exp2(_3638 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3622 * cbSceneParam._m0[78u].y)) * _3612.y) / cbSceneParam._m0[78u].y)) + _3385;
        _3463 = (exp2(_3638 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3622 * cbSceneParam._m0[78u].z)) * _3612.z) / cbSceneParam._m0[78u].z)) + _3386;
        _3465 = _3621 * _3387;
    }
    else
    {
        _3459 = _3384;
        _3461 = _3385;
        _3463 = _3386;
        _3465 = _3387;
    }
    float _3477 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3478 = _3477 == 3.0;
    float _3479 = log2(_3465);
    float _3486 = exp2(_3479 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5331 : (isnan(_5331) ? 1.0 : min(_5331, 1.0))) * (_3329 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1303))) + ((_3335 + ((isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0))) * _2109)) * cbPerFrame._m0[3u].x));
    float _3487 = exp2(_3479 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5342 : (isnan(_5342) ? 1.0 : min(_5342, 1.0))) * (_3331 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1303))) + ((_3337 + ((isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0))) * _2109)) * cbPerFrame._m0[3u].x));
    float _3488 = exp2(_3479 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5353 : (isnan(_5353) ? 1.0 : min(_5353, 1.0))) * (_3333 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1303))) + ((_3339 + ((isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0))) * _2109)) * cbPerFrame._m0[3u].x));
    float _3497 = (_3477 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3497 * (_3478 ? _3486 : (_3486 + (cbSceneParam._m0[72u].w * _3459)));
    SV_Target.y = _3497 * (_3478 ? _3487 : (_3487 + (cbSceneParam._m0[72u].w * _3461)));
    SV_Target.z = _3497 * (_3478 ? _3488 : (_3488 + (cbSceneParam._m0[72u].w * _3463)));
    SV_Target.w = cbInstanceData._m0[_3359].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3359].w;
}


