#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1487;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4095 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _453 = (_446 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _454 = (_446 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _455 = (_446 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4106 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _566 = _564.x;
    float _576 = dot(vec4(_566, _564.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _588 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _375.z) * 2.0) - ((((_566 - _576) * cbMtdParam._m0[23u].w) + _576) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4117 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _602 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_589 * ((_547.x * cbMtdParam._m0[14u].x) - _526)) + _526);
    float _605 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_589 * ((_547.y * cbMtdParam._m0[14u].y) - _527)) + _527);
    float _608 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_589 * ((_547.z * cbMtdParam._m0[14u].z) - _528)) + _528);
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    float _649 = ((_621.x - _640) * _446) + _640;
    float _650 = ((_621.y - _641) * _446) + _641;
    float _651 = ((_621.z - _642) * _446) + _642;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_663.x - _649) * _519) + _649;
    float _675 = ((_663.y - _650) * _519) + _650;
    float _676 = ((_663.z - _651) * _519) + _651;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _701 = ((_688.z - _676) * _589) + _676;
    float _704 = ((((_688.x - _674) * _589) + _674) * 2.0) + (-1.0);
    float _706 = ((((_688.y - _675) * _589) + _675) * 2.0) + (-1.0);
    float _707 = dot(vec2(_704, _706), vec2(_704, _706));
    float _4128 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _738 = (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _704;
    float _739 = (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _706;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _753 = _751.x;
    float _754 = 1.0 - _753;
    float _782 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_753 - _754) * cbMtdParam._m0[24u].w) + _754) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4139 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _791 = ((((cbMtdParam._m0[10u].x - _602) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _783) + _602;
    float _792 = ((((cbMtdParam._m0[10u].y - _605) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _783) + _605;
    float _793 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _608)) * _783) + _608;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _821 = _819.x;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _821) * _446) + _821;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _838) * _519) + _838;
    float _873 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w)).x - _856) * _589) + _856;
    float _877 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _873) * cbMtdParam._m0[19u].z) + _873;
    float _879 = _877 - (_877 * _783);
    float _883 = (cbMtdParam._m0[19u].w * (_726.z - _701)) + _701;
    float _887 = ((cbMtdParam._m0[23u].x - _883) * _783) + _883;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _912 = (_906.x * 2.0) + (-1.0);
    float _913 = (_906.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _4150 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _930 = (_783 * (((cbMtdParam._m0[22u].z * _738) - _738) + _912)) + _738;
    float _931 = (_783 * (((cbMtdParam._m0[22u].z * _739) - _739) + _913)) + _739;
    float _932 = (_783 * (sqrt(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) - _712)) + _712;
    float _934 = cbMtdParam._m0[22u].x + _726.w;
    float _937 = fma(_932, _254 * NORMAL.x, fma(_931, _261 * TANGENT.x, (_247 * _239) * _930));
    float _940 = fma(_932, _254 * NORMAL.y, fma(_931, _261 * TANGENT.y, (_247 * _240) * _930));
    float _943 = fma(_932, _254 * NORMAL.z, fma(_931, _261 * TANGENT.z, (_247 * _241) * _930));
    float _947 = inversesqrt(dot(vec3(_937, _940, _943), vec3(_937, _940, _943)));
    float _948 = _947 * _937;
    float _949 = _947 * _940;
    float _950 = _947 * _943;
    float _4161 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _951 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4183 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4194 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4205 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4216 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _956 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _970 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1020 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1010);
    float _1021 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1010);
    float _1022 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1010);
    float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
    float _1027 = _1020 * _1026;
    float _1028 = _1021 * _1026;
    float _1029 = _1022 * _1026;
    float _1035 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1036 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1054 = fma(_950, cbSceneParam._m0[5u].z, fma(_949, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _948));
    float _1057 = fma(_950, cbSceneParam._m0[6u].z, fma(_949, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _948));
    float _1060 = fma(_950, cbSceneParam._m0[7u].z, fma(_949, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _948));
    uint _1074 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1080 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_1074].x;
    float _1081 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_1074].y;
    float _1082 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1074].z;
    float _4227 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _1086 = 1.0 - _956;
    float _1087 = _1083 * _1086;
    float _1088 = _1084 * _1086;
    float _1089 = _1085 * _1086;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _956;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _956;
    float _1096 = (_1085 + (-0.039999999105930328369140625)) * _956;
    float _1097 = _1094 + 0.039999999105930328369140625;
    float _1099 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    vec4 _1109 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1035, cbSceneParam._m0[86u].y * _1036));
    float _1113 = ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * TEXCOORD_5.w) * _1109.x;
    float _1114 = dot(vec3(_948, _949, _950), vec3(_1027, _1028, _1029));
    float _1117 = _1114 * 2.0;
    float _1121 = (_1117 * _948) - _1027;
    float _1122 = (_1117 * _949) - _1028;
    float _1123 = (_1117 * _950) - _1029;
    float _1127 = abs(dot(vec3(_1027, _1028, _1029), vec3(_948, _949, _950)));
    float _4260 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1129 = sqrt(_951);
    float _1142 = exp2((_1129 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1129 * 3.0));
    float _1148 = (1.0 - _1142) * ((_1129 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1149 = _1142 * _1129;
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1486;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1211 = fma(_1185, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1177));
        float _1215 = fma(_1185, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1177));
        float _1219 = fma(_1185, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1177));
        float _1244 = _1177 + _948;
        float _1245 = _1181 + _949;
        float _1246 = _1185 + _950;
        float _1256 = fma(_1246, cbModelParam._m0[26u].z, fma(_1245, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1244)) - _1211;
        float _1257 = fma(_1246, cbModelParam._m0[27u].z, fma(_1245, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1244)) - _1215;
        float _1258 = fma(_1246, cbModelParam._m0[28u].z, fma(_1245, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1244)) - _1219;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1211 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1215 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[34u].z) + ((((((_1219 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1314 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1280.x + (-0.5));
        float _1316 = _1314 * (_1280.y + (-0.5));
        float _1317 = _1314 * (_1280.z + (-0.5));
        float _1324 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1287.x + (-0.5));
        float _1326 = _1324 * (_1287.y + (-0.5));
        float _1327 = _1324 * (_1287.z + (-0.5));
        float _1334 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1294.x + (-0.5));
        float _1336 = _1334 * (_1294.y + (-0.5));
        float _1337 = _1334 * (_1294.z + (-0.5));
        float _1344 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1301.x + (-0.5));
        float _1346 = _1344 * (_1301.y + (-0.5));
        float _1347 = _1344 * (_1301.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1368 = (dot(vec3(_948, _949, _950), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1378 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4308 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1380 + 1.0))) + _1385) * _1348;
        float _1395 = _1316 * 0.5;
        float _1396 = _1326 * 0.5;
        float _1397 = _1336 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_948, _949, _950), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4341 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1422 + 1.0))) + _1427) * _1349;
        float _1437 = _1317 * 0.5;
        float _1438 = _1327 * 0.5;
        float _1439 = _1337 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_948, _949, _950), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4374 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1464 + 1.0))) + _1469) * _1350;
        _1486 = _1317;
        _1488 = _1316;
        _1489 = _1315;
        _1490 = _1327;
        _1491 = _1326;
        _1492 = _1325;
        _1493 = _1337;
        _1494 = _1336;
        _1495 = _1335;
        _1496 = _1350;
        _1497 = _1349;
        _1498 = _1348;
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1487;
        _1488 = _1487;
        _1489 = _1487;
        _1490 = _1487;
        _1491 = _1487;
        _1492 = _1487;
        _1493 = _1487;
        _1494 = _1487;
        _1495 = _1487;
        _1496 = _1487;
        _1497 = _1487;
        _1498 = _1487;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1524 = fma(_1185, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177));
        float _1528 = fma(_1185, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177));
        float _1532 = fma(_1185, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177));
        float _1555 = _1177 + _948;
        float _1556 = _1181 + _949;
        float _1557 = _1185 + _950;
        float _1567 = fma(_1557, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1555)) - _1524;
        float _1568 = fma(_1557, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1555)) - _1528;
        float _1569 = fma(_1557, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1555)) - _1532;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1524 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1528 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[35u].z) + ((((((_1532 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1623 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1590.x + (-0.5));
        float _1625 = _1623 * (_1590.y + (-0.5));
        float _1626 = _1623 * (_1590.z + (-0.5));
        float _1633 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1597.x + (-0.5));
        float _1635 = _1633 * (_1597.y + (-0.5));
        float _1636 = _1633 * (_1597.z + (-0.5));
        float _1643 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1604.x + (-0.5));
        float _1645 = _1643 * (_1604.y + (-0.5));
        float _1646 = _1643 * (_1604.z + (-0.5));
        float _1653 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1611.x + (-0.5));
        float _1655 = _1653 * (_1611.y + (-0.5));
        float _1656 = _1653 * (_1611.z + (-0.5));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1624 * 0.5;
        float _1661 = _1634 * 0.5;
        float _1662 = _1644 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_948, _949, _950), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4437 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1687 + 1.0))) + _1692) * _1657;
        float _1702 = _1625 * 0.5;
        float _1703 = _1635 * 0.5;
        float _1704 = _1645 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_948, _949, _950), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4470 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1729 + 1.0))) + _1734) * _1658;
        float _1744 = _1626 * 0.5;
        float _1745 = _1636 * 0.5;
        float _1746 = _1646 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_948, _949, _950), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4481 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4492 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4503 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_1771 + 1.0))) + _1776) * _1659;
        _1793 = _1626;
        _1794 = _1625;
        _1795 = _1624;
        _1796 = _1636;
        _1797 = _1635;
        _1798 = _1634;
        _1799 = _1646;
        _1800 = _1645;
        _1801 = _1644;
        _1802 = _1659;
        _1803 = _1658;
        _1804 = _1657;
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
    }
    else
    {
        _1793 = _1487;
        _1794 = _1487;
        _1795 = _1487;
        _1796 = _1487;
        _1797 = _1487;
        _1798 = _1487;
        _1799 = _1487;
        _1800 = _1487;
        _1801 = _1487;
        _1802 = _1487;
        _1803 = _1487;
        _1804 = _1487;
        _1805 = 0.0;
        _1806 = 0.0;
        _1807 = 0.0;
    }
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1499)) + _1499;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1500)) + _1500;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1501)) + _1501;
    float _1840 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1817));
    float _1861 = _1121 * 0.5;
    float _1862 = _1122 * 0.5;
    float _1863 = _1123 * 0.5;
    float _1864 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1867 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1870 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1904;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1877 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1486, _1490, _1493, _1496));
        float _1881 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1885 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1892 = dot(vec4(cbModelParam._m0[39u]), vec4(_1861, _1862, _1863, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1915;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1906 = dot(vec4(cbModelParam._m0[40u]), vec4(_1861, _1862, _1863, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1919 = (_1915 * cbModelParam._m0[1u].x) + (_1904 * (1.0 - cbModelParam._m0[1u].x));
    float _1929 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1929 : min(cbModelParam._m0[25u].z, _1929));
    float _2011;
    float _2013;
    float _2015;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1978 = fma(_1185, cbModelParam._m0[13u].z, fma(_1181, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177)) + cbModelParam._m0[13u].w;
        float _1982 = fma(_1185, cbModelParam._m0[14u].z, fma(_1181, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177)) + cbModelParam._m0[14u].w;
        float _1986 = fma(_1185, cbModelParam._m0[15u].z, fma(_1181, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177)) + cbModelParam._m0[15u].w;
        float _1989 = fma(_1123, cbModelParam._m0[13u].z, fma(_1122, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121));
        float _1992 = fma(_1123, cbModelParam._m0[14u].z, fma(_1122, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121));
        float _1995 = fma(_1123, cbModelParam._m0[15u].z, fma(_1122, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121));
        float _2023;
        if (_1989 > 0.0)
        {
            _2023 = abs((1.0 - _1978) / _1989);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1978 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2023 = frontier_phi_14_12_ladder;
        }
        float _2195;
        if (_1992 > 0.0)
        {
            _2195 = abs((1.0 - _1982) / _1992);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1982 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2195 = frontier_phi_23_19_ladder;
        }
        float _2490;
        if (_1995 > 0.0)
        {
            _2490 = abs((1.0 - _1986) / _1995);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1995 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1986 + 1.0) / _1995);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2490 = frontier_phi_35_30_ladder;
        }
        float _2492 = isnan(_2195) ? _2023 : (isnan(_2023) ? _2195 : min(_2023, _2195));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1989) + _1978;
        float _2498 = (_2493 * _1992) + _1982;
        float _2499 = (_2493 * _1995) + _1986;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2500;
        float _2504 = _2500 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 > _2504) || ((_2498 < _2502) || ((_2497 < _2502) || (_2497 > _2504))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2644 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2499, cbModelParam._m0[9u].z, fma(_2498, cbModelParam._m0[9u].y, _2497 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2499, cbModelParam._m0[10u].z, fma(_2498, cbModelParam._m0[10u].y, _2497 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2499, cbModelParam._m0[11u].z, fma(_2498, cbModelParam._m0[11u].y, _2497 * cbModelParam._m0[11u].x))), _1930);
            frontier_phi_13_35_ladder = _2644.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2644.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2644.x * cbModelParam._m0[1u].y;
        }
        _2011 = frontier_phi_13_35_ladder_2;
        _2013 = frontier_phi_13_35_ladder_1;
        _2015 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1121, _1122, _1123), _1930);
        _2011 = _1999.x * cbModelParam._m0[1u].y;
        _2013 = _1999.y * cbModelParam._m0[1u].y;
        _2015 = _1999.z * cbModelParam._m0[1u].y;
    }
    float _2019 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2019 : min(cbModelParam._m0[25u].w, _2019));
    float _2110;
    float _2112;
    float _2114;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2074 = fma(_1185, cbModelParam._m0[21u].z, fma(_1181, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177)) + cbModelParam._m0[21u].w;
        float _2078 = fma(_1185, cbModelParam._m0[22u].z, fma(_1181, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177)) + cbModelParam._m0[22u].w;
        float _2082 = fma(_1185, cbModelParam._m0[23u].z, fma(_1181, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177)) + cbModelParam._m0[23u].w;
        float _2085 = fma(_1123, cbModelParam._m0[21u].z, fma(_1122, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121));
        float _2088 = fma(_1123, cbModelParam._m0[22u].z, fma(_1122, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121));
        float _2091 = fma(_1123, cbModelParam._m0[23u].z, fma(_1122, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121));
        float _2200;
        if (_2085 > 0.0)
        {
            _2200 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2200 = frontier_phi_25_21_ladder;
        }
        float _2517;
        if (_2088 > 0.0)
        {
            _2517 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2517 = frontier_phi_37_32_ladder;
        }
        float _2855;
        if (_2091 > 0.0)
        {
            _2855 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2855 = frontier_phi_47_44_ladder;
        }
        float _2857 = isnan(_2517) ? _2200 : (isnan(_2200) ? _2517 : min(_2200, _2517));
        float _2858 = isnan(_2855) ? _2857 : (isnan(_2857) ? _2855 : min(_2857, _2855));
        float _2862 = (_2858 * _2085) + _2074;
        float _2863 = (_2858 * _2088) + _2078;
        float _2864 = (_2858 * _2091) + _2082;
        float _2865 = _2858 * 9.9999997473787516355514526367188e-05;
        float _2866 = (-1.0) - _2865;
        float _2868 = _2865 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2864 > _2868) || ((_2864 < _2866) || ((_2863 > _2868) || ((_2863 < _2866) || ((_2862 < _2866) || (_2862 > _2868))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2986 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2864, cbModelParam._m0[17u].z, fma(_2863, cbModelParam._m0[17u].y, _2862 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2864, cbModelParam._m0[18u].z, fma(_2863, cbModelParam._m0[18u].y, _2862 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2864, cbModelParam._m0[19u].z, fma(_2863, cbModelParam._m0[19u].y, _2862 * cbModelParam._m0[19u].x))), _2020);
            frontier_phi_22_47_ladder = _2986.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2986.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2986.x * cbModelParam._m0[1u].z;
        }
        _2110 = frontier_phi_22_47_ladder_2;
        _2112 = frontier_phi_22_47_ladder_1;
        _2114 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1121, _1122, _1123), _2020);
        _2110 = _2094.x * cbModelParam._m0[1u].z;
        _2112 = _2094.y * cbModelParam._m0[1u].z;
        _2114 = _2094.z * cbModelParam._m0[1u].z;
    }
    float _2127 = (((_1148 * _1097) + _1149) * _1113) * ((cbModelParam._m0[1u].w * (_2110 - _2011)) + _2011);
    float _2129 = (((_1148 * _1099) + _1149) * _1113) * ((cbModelParam._m0[1u].w * (_2112 - _2013)) + _2013);
    float _2131 = (((_1148 * _1100) + _1149) * _1113) * ((cbModelParam._m0[1u].w * (_2114 - _2015)) + _2015);
    float _2134 = fma(_2131, cbSceneParam._m0[89u].z, fma(_2129, cbSceneParam._m0[89u].y, _2127 * cbSceneParam._m0[89u].x));
    float _2137 = fma(_2131, cbSceneParam._m0[90u].z, fma(_2129, cbSceneParam._m0[90u].y, _2127 * cbSceneParam._m0[90u].x));
    float _2140 = fma(_2131, cbSceneParam._m0[91u].z, fma(_2129, cbSceneParam._m0[91u].y, _2127 * cbSceneParam._m0[91u].x));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2186 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2187 = _2174 / _2186;
    float _2188 = _2178 / _2186;
    float _2189 = _2182 / _2186;
    float _2336;
    float _2337;
    float _2338;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2216 = ((uint(_2189 > cbSceneParam._m0[59u].y) + uint(_2189 > cbSceneParam._m0[59u].x)) + uint(_2189 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2217 = _2216 + 43u;
        uint _2225 = _2216 + 44u;
        uint _2233 = _2216 + 45u;
        uint _2241 = _2216 + 46u;
        float _2252 = fma(_2186, cbSceneParam._m0[_2217].w, fma(_2182, cbSceneParam._m0[_2217].z, fma(_2178, cbSceneParam._m0[_2217].y, _2174 * cbSceneParam._m0[_2217].x)));
        float _2256 = fma(_2186, cbSceneParam._m0[_2225].w, fma(_2182, cbSceneParam._m0[_2225].z, fma(_2178, cbSceneParam._m0[_2225].y, _2174 * cbSceneParam._m0[_2225].x)));
        float _2264 = fma(_2186, cbSceneParam._m0[_2241].w, fma(_2182, cbSceneParam._m0[_2241].z, fma(_2178, cbSceneParam._m0[_2241].y, _2174 * cbSceneParam._m0[_2241].x)));
        float _2269 = cbSceneParam._m0[33u].z * _2264;
        float _2271 = cbSceneParam._m0[33u].w * _2264;
        float _2274 = fma(_2186, cbSceneParam._m0[_2233].w, fma(_2182, cbSceneParam._m0[_2233].z, fma(_2178, cbSceneParam._m0[_2233].y, _2174 * cbSceneParam._m0[_2233].x))) / _2264;
        float _2322 = (cbSceneParam._m0[33u].x - sqrt(((_2188 * _2188) + (_2187 * _2187)) + (_2189 * _2189))) * cbSceneParam._m0[33u].y;
        float _4629 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2329 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2269 + _2252) / _2264, (_2271 + _2256) / _2264), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2271 + _2252) / _2264, (_2256 - _2269) / _2264), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2252 - _2269) / _2264, (_2256 - _2271) / _2264), _2274), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2252 - _2271) / _2264, (_2269 + _2256) / _2264), _2274), 0.0)).x), vec4(0.25)));
        _2336 = 1.0 - (_2329 * cbSceneParam._m0[34u].x);
        _2337 = 1.0 - (_2329 * cbSceneParam._m0[34u].y);
        _2338 = 1.0 - (_2329 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2336 = 1.0;
        _2337 = 1.0;
        _2338 = 1.0;
    }
    float _2402;
    float _2404;
    float _2406;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2390 = fma(_2186, cbSceneParam._m0[63u].w, fma(_2182, cbSceneParam._m0[63u].z, fma(_2178, cbSceneParam._m0[63u].y, _2174 * cbSceneParam._m0[63u].x)));
        float _2391 = fma(_2186, cbSceneParam._m0[60u].w, fma(_2182, cbSceneParam._m0[60u].z, fma(_2178, cbSceneParam._m0[60u].y, _2174 * cbSceneParam._m0[60u].x))) / _2390;
        float _2392 = fma(_2186, cbSceneParam._m0[61u].w, fma(_2182, cbSceneParam._m0[61u].z, fma(_2178, cbSceneParam._m0[61u].y, _2174 * cbSceneParam._m0[61u].x))) / _2390;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2391 >= cbSceneParam._m0[64u].x) && (_2392 >= cbSceneParam._m0[64u].y)) && (_2391 <= cbSceneParam._m0[64u].z)) && (_2392 <= cbSceneParam._m0[64u].w))
        {
            float _2530 = fma(_2186, cbSceneParam._m0[62u].w, fma(_2182, cbSceneParam._m0[62u].z, fma(_2178, cbSceneParam._m0[62u].y, _2174 * cbSceneParam._m0[62u].x))) / _2390;
            float _2534 = isnan(cbSceneParam._m0[41u].w) ? _2530 : (isnan(_2530) ? cbSceneParam._m0[41u].w : max(_2530, cbSceneParam._m0[41u].w));
            float _2577 = (cbSceneParam._m0[33u].x - sqrt(((_2188 * _2188) + (_2187 * _2187)) + (_2189 * _2189))) * cbSceneParam._m0[33u].y;
            float _4645 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
            float _2584 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2391, cbSceneParam._m0[33u].w + _2392), _2534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2391, _2392 - cbSceneParam._m0[33u].z), _2534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2391 - cbSceneParam._m0[33u].z, _2392 - cbSceneParam._m0[33u].w), _2534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2391 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2392), _2534), 0.0)).x), vec4(0.25)));
            float _2588 = 1.0 - (_2584 * cbSceneParam._m0[34u].x);
            float _2589 = 1.0 - (_2584 * cbSceneParam._m0[34u].y);
            float _2590 = 1.0 - (_2584 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2590) ? _2338 : (isnan(_2338) ? _2590 : min(_2338, _2590));
            frontier_phi_34_33_ladder_1 = isnan(_2589) ? _2337 : (isnan(_2337) ? _2589 : min(_2337, _2589));
            frontier_phi_34_33_ladder_2 = isnan(_2588) ? _2336 : (isnan(_2336) ? _2588 : min(_2336, _2588));
        }
        else
        {
            frontier_phi_34_33_ladder = _2338;
            frontier_phi_34_33_ladder_1 = _2337;
            frontier_phi_34_33_ladder_2 = _2336;
        }
        _2402 = frontier_phi_34_33_ladder_2;
        _2404 = frontier_phi_34_33_ladder_1;
        _2406 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2402 = _2336;
        _2404 = _2337;
        _2406 = _2338;
    }
    uvec4 _2411 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2413 = _2411.x * 14u;
    uint _2414 = _2413 + 13u;
    float _2421 = _1113 + (-1.0);
    float _2426 = (cbLight._m0[_2414].x * _2421) + 1.0;
    float _2427 = (cbLight._m0[_2414].y * _2421) + 1.0;
    float _2428 = (cbLight._m0[_2414].z * _2421) + 1.0;
    float _2429 = (cbLight._m0[_2414].w * _2421) + 1.0;
    uint _2430 = _2413 + 5u;
    float _2436 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2440 = _2413 + 4u;
    float _2449 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
    uint _2453 = _2413 | 1u;
    float _2464 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_948, _949, _950));
    float _2467 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_948, _949, _950));
    float _4681 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _4692 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2472 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * 0.3183098733425140380859375;
    float _2474 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * 0.3183098733425140380859375;
    float _2481 = ((cbLight._m0[_2430].x * _2436) * _2474) + (((cbLight._m0[_2440].x * _2402) * _2449) * _2472);
    float _2482 = ((_2436 * cbLight._m0[_2430].y) * _2474) + (((cbLight._m0[_2440].y * _2404) * _2449) * _2472);
    float _2483 = ((_2436 * cbLight._m0[_2430].z) * _2474) + (((cbLight._m0[_2440].z * _2406) * _2449) * _2472);
    uvec4 _2487 = floatBitsToUint(cbLight._m0[_2413 + 12u]);
    bool _2489 = _2487.x == 0u;
    float _2591;
    float _2593;
    float _2595;
    if (_2489)
    {
        _2591 = _2481;
        _2593 = _2482;
        _2595 = _2483;
    }
    else
    {
        uint _2599 = _2413 + 6u;
        float _2615 = (dot(vec3(cbLight._m0[_2413 + 2u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2616 = _2615 * _2615;
        float _4703 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2617 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2618 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2591 = (((cbLight._m0[_2599].x * 0.3183098733425140380859375) * _2617) * _2618) + _2481;
        _2593 = (((cbLight._m0[_2599].y * 0.3183098733425140380859375) * _2617) * _2618) + _2482;
        _2595 = (((cbLight._m0[_2599].z * 0.3183098733425140380859375) * _2617) * _2618) + _2483;
    }
    bool _2598 = _2487.y == 0u;
    float _2653;
    float _2655;
    float _2657;
    if (_2598)
    {
        _2653 = _2591;
        _2655 = _2593;
        _2657 = _2595;
    }
    else
    {
        uint _2826 = _2413 + 7u;
        float _2842 = (dot(vec3(cbLight._m0[_2413 + 3u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2843 = _2842 * _2842;
        float _4719 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2844 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2845 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2653 = (((cbLight._m0[_2826].x * 0.3183098733425140380859375) * _2844) * _2845) + _2591;
        _2655 = (((cbLight._m0[_2826].y * 0.3183098733425140380859375) * _2844) * _2845) + _2593;
        _2657 = (((cbLight._m0[_2826].z * 0.3183098733425140380859375) * _2844) * _2845) + _2595;
    }
    uint _2660 = _2413 + 8u;
    float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _951) * 0.949999988079071044921875);
    float _2674 = _2673 * _2673;
    float _2675 = cbLight._m0[_2413].x + _1027;
    float _2676 = cbLight._m0[_2413].y + _1028;
    float _2677 = cbLight._m0[_2413].z + _1029;
    float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
    float _2682 = _2681 * _2675;
    float _2683 = _2681 * _2676;
    float _2684 = _2681 * _2677;
    float _2685 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2413].xyz));
    float _4735 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _4746 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _2689 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2690 = dot(vec3(_948, _949, _950), vec3(_2682, _2683, _2684));
    float _4757 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2694 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2682, _2683, _2684));
    float _4768 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2698 = _2674 * _2674;
    float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
    float _2710 = exp2(log2(1.0 - (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0)))) * 5.0);
    float _2711 = 0.959999978542327880859375 - _1094;
    float _2713 = 0.959999978542327880859375 - _1095;
    float _2714 = 0.959999978542327880859375 - _1096;
    float _2721 = 1.0 - _2674;
    float _2732 = (0.5 / (((_2689 * ((_2688 * _2721) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2721) + _2674) * _2688))) * _2688;
    float _4779 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2734 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
    uint _2748 = _2413 + 9u;
    float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _951) * 0.949999988079071044921875);
    float _2760 = _2759 * _2759;
    float _2761 = cbLight._m0[_2453].x + _1027;
    float _2762 = cbLight._m0[_2453].y + _1028;
    float _2763 = cbLight._m0[_2453].z + _1029;
    float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
    float _2768 = _2767 * _2761;
    float _2769 = _2767 * _2762;
    float _2770 = _2767 * _2763;
    float _2771 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2453].xyz));
    float _4790 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2774 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
    float _2775 = dot(vec3(_948, _949, _950), vec3(_2768, _2769, _2770));
    float _4801 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2778 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
    float _2779 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2768, _2769, _2770));
    float _4812 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2783 = _2760 * _2760;
    float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
    float _2794 = exp2(log2(1.0 - (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) * 5.0);
    float _2801 = 1.0 - _2760;
    float _2811 = (0.5 / (((_2689 * ((_2774 * _2801) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2801) + _2760) * _2774))) * _2774;
    float _4823 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2813 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
    float _2823 = (((((_2794 * _2711) + _1097) * cbLight._m0[_2748].x) * _2813) * _2436) + ((((cbLight._m0[_2660].x * _2402) * ((_2710 * _2711) + _1097)) * _2734) * _2449);
    float _2824 = (((((_2794 * _2713) + _1099) * cbLight._m0[_2748].y) * _2813) * _2436) + ((((cbLight._m0[_2660].y * _2404) * ((_2710 * _2713) + _1099)) * _2734) * _2449);
    float _2825 = (((((_2794 * _2714) + _1100) * cbLight._m0[_2748].z) * _2813) * _2436) + ((((cbLight._m0[_2660].z * _2406) * ((_2710 * _2714) + _1100)) * _2734) * _2449);
    float _2881;
    float _2883;
    float _2885;
    if (_2489)
    {
        _2881 = _2823;
        _2883 = _2824;
        _2885 = _2825;
    }
    else
    {
        uint _2887 = _2413 + 2u;
        uint _2891 = _2413 + 10u;
        float _2905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2887].w)) * _951) * 0.949999988079071044921875);
        float _2906 = _2905 * _2905;
        float _2907 = cbLight._m0[_2887].x + _1027;
        float _2908 = cbLight._m0[_2887].y + _1028;
        float _2909 = cbLight._m0[_2887].z + _1029;
        float _2913 = inversesqrt(dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909)));
        float _2914 = _2913 * _2907;
        float _2915 = _2913 * _2908;
        float _2916 = _2913 * _2909;
        float _2917 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2887].xyz));
        float _4834 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2921 = dot(vec3(_948, _949, _950), vec3(_2914, _2915, _2916));
        float _4845 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2924 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2925 = dot(vec3(cbLight._m0[_2887].xyz), vec3(_2914, _2915, _2916));
        float _4856 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2929 = _2906 * _2906;
        float _2933 = ((_2924 * _2924) * (_2929 + (-1.0))) + 1.0;
        float _2940 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
        float _2947 = 1.0 - _2906;
        float _2957 = (0.5 / (((_2689 * ((_2920 * _2947) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _2947) + _2906) * _2920))) * _2920;
        float _4867 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        float _2959 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2929 / ((_2933 * _2933) * 3.141590118408203125));
        float _2960 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
        _2881 = (((((_2940 * _2711) + _1097) * cbLight._m0[_2891].x) * _2959) * _2960) + _2823;
        _2883 = (((((_2940 * _2713) + _1099) * cbLight._m0[_2891].y) * _2959) * _2960) + _2824;
        _2885 = (((((_2940 * _2714) + _1100) * cbLight._m0[_2891].z) * _2959) * _2960) + _2825;
    }
    float _2991;
    float _2993;
    float _2995;
    if (_2598)
    {
        _2991 = _2881;
        _2993 = _2883;
        _2995 = _2885;
    }
    else
    {
        uint _3002 = _2413 + 3u;
        uint _3006 = _2413 + 11u;
        float _3020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3002].w)) * _951) * 0.949999988079071044921875);
        float _3021 = _3020 * _3020;
        float _3022 = cbLight._m0[_3002].x + _1027;
        float _3023 = cbLight._m0[_3002].y + _1028;
        float _3024 = cbLight._m0[_3002].z + _1029;
        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
        float _3029 = _3028 * _3022;
        float _3030 = _3028 * _3023;
        float _3031 = _3028 * _3024;
        float _3032 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_3002].xyz));
        float _4883 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3035 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
        float _3036 = dot(vec3(_948, _949, _950), vec3(_3029, _3030, _3031));
        float _4894 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3039 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _3040 = dot(vec3(cbLight._m0[_3002].xyz), vec3(_3029, _3030, _3031));
        float _4905 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3044 = _3021 * _3021;
        float _3048 = ((_3039 * _3039) * (_3044 + (-1.0))) + 1.0;
        float _3055 = exp2(log2(1.0 - (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) * 5.0);
        float _3062 = 1.0 - _3021;
        float _3072 = (0.5 / (((_2689 * ((_3035 * _3062) + _3021)) + 9.9999999392252902907785028219223e-09) + (((_2689 * _3062) + _3021) * _3035))) * _3035;
        float _4916 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
        float _3074 = (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_3044 / ((_3048 * _3048) * 3.141590118408203125));
        float _3075 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2991 = (((((_3055 * _2711) + _1097) * cbLight._m0[_3006].x) * _3074) * _3075) + _2881;
        _2993 = (((((_3055 * _2713) + _1099) * cbLight._m0[_3006].y) * _3074) * _3075) + _2883;
        _2995 = (((((_3055 * _2714) + _1100) * cbLight._m0[_3006].z) * _3074) * _3075) + _2885;
    }
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    float _3151;
    if (_2411.y == 0u)
    {
        uvec4 _3096 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3097 = _3096.x;
        uint _3108 = uint((float(_3096.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1036) / _3097))) + floor(float(uint(cbSceneParam._m0[85u].x * _1035) / _3097)));
        float _3118 = (log2(_2189 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3119 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
        uint _3122 = uint(isnan(14.0) ? _3119 : (isnan(_3119) ? 14.0 : min(_3119, 14.0)));
        uvec4 _3127 = texelFetch(g_lightClusterGridBuffer, int(((_3122 << 2u) + (_3108 << 6u)) >> 2u));
        uint _3128 = _3127.x;
        uint _3129 = _3096.z;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        if (((((1u << ((_3129 >> 4u) & 15u)) + 4294967295u) & _3128) == 0u) || ((_3129 & 240u) == 0u))
        {
            _3208 = 0.0;
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
            _3216 = 0.0;
            _3218 = 0.0;
        }
        else
        {
            float _3209;
            float _3211;
            float _3213;
            float _3215;
            float _3217;
            float _3219;
            float _3353 = 0.0;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            uint _3359 = 0u;
            uint _3368;
            bool _3369;
            for (;;)
            {
                _3368 = texelFetch(g_lightClassification, int((((_3122 << 5u) + (_3108 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                _3369 = _3368 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3369)
                {
                    frontier_phi_66_pred = _3358;
                    frontier_phi_66_pred_1 = _3357;
                    frontier_phi_66_pred_2 = _3356;
                    frontier_phi_66_pred_3 = _3355;
                    frontier_phi_66_pred_4 = _3354;
                    frontier_phi_66_pred_5 = _3353;
                }
                else
                {
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    uint _3483;
                    _3477 = _3353;
                    _3478 = _3354;
                    _3479 = _3355;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3368;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    for (;;)
                    {
                        uint _3487 = uint(findLSB(_3483)) + (_3359 << 5u);
                        uint _3484 = (_3483 + 4294967295u) & _3483;
                        uint _3489 = _3487 * 48u;
                        vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3489)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 3u)).x));
                        uint _3509 = (_3487 * 48u) + 4u;
                        vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 3u)).x));
                        uint _3528 = (_3487 * 48u) + 8u;
                        vec3 _3539 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3528)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 2u)).x));
                        float _3543 = _3503.x - _2187;
                        float _3544 = _3503.y - _2188;
                        float _3545 = _3503.z - _2189;
                        float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                        float _3549 = inversesqrt(_3546);
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3553 = dot(vec3(_1054, _1057, _1060), vec3(_3550, _3551, _3552));
                        float _3558 = 1.0 - (_3546 * _3503.w);
                        float _4942 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                        float _3560 = sqrt(_3546) * _3522.w;
                        float _3563 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                        float _3564 = _3563 * _3563;
                        float _3567 = ((1.0 - _3564) * _3553) + _3564;
                        float _3570 = _3560 * _3560;
                        float _3574 = ((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3559) / ((_3570 * 0.699999988079071044921875) + 1.0);
                        float _3578 = (-0.0) - _2187;
                        float _3579 = (-0.0) - _2188;
                        float _3580 = (-0.0) - _2189;
                        float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                        float _3585 = _3584 * _3578;
                        float _3586 = _3584 * _3579;
                        float _3587 = _3584 * _3580;
                        float _3594 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                        float _3595 = 1.0 - _1129;
                        float _3602 = sqrt(1.0 - ((1.0 - (_3595 * _3595)) * (1.0 - (_3594 * _3594))));
                        float _3603 = _3602 * _3602;
                        float _3604 = _3603 * _3603;
                        float _3605 = _3585 + _3550;
                        float _3606 = _3586 + _3551;
                        float _3607 = _3587 + _3552;
                        float _3611 = inversesqrt(dot(vec3(_3605, _3606, _3607), vec3(_3605, _3606, _3607)));
                        float _3615 = dot(vec3(_1054, _1057, _1060), vec3(_3585, _3586, _3587));
                        float _4958 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3618 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3619 = dot(vec3(_1054, _1057, _1060), vec3(_3611 * _3605, _3611 * _3606, _3611 * _3607));
                        float _4969 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3622 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                        float _3626 = ((_3622 * _3622) * (_3604 + (-1.0))) + 1.0;
                        float _3627 = _3563 * _3603;
                        float _3628 = _3627 * _3627;
                        float _3631 = ((1.0 - _3628) * _3553) + _3628;
                        float _4980 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3632 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                        float _3633 = 1.0 - _3603;
                        float _3643 = (0.5 / (((_3632 * ((_3618 * _3633) + _3603)) + 9.9999999392252902907785028219223e-09) + (((_3632 * _3633) + _3603) * _3618))) * _3632;
                        float _4991 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3654 = (((_3604 * 3.1415927410125732421875) * (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) / ((_3626 * _3626) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125))) * _3559;
                        _3412 = (_3574 * _3522.x) + _3480;
                        _3413 = (_3574 * _3522.y) + _3481;
                        _3414 = (_3574 * _3522.z) + _3482;
                        _3409 = (_3654 * _3539.x) + _3477;
                        _3410 = (_3654 * _3539.y) + _3478;
                        _3411 = (_3654 * _3539.z) + _3479;
                        if (_3484 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3477 = _3409;
                            _3478 = _3410;
                            _3479 = _3411;
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3484;
                        }
                    }
                    frontier_phi_66_pred = _3414;
                    frontier_phi_66_pred_1 = _3413;
                    frontier_phi_66_pred_2 = _3412;
                    frontier_phi_66_pred_3 = _3411;
                    frontier_phi_66_pred_4 = _3410;
                    frontier_phi_66_pred_5 = _3409;
                }
                _3219 = frontier_phi_66_pred;
                _3217 = frontier_phi_66_pred_1;
                _3215 = frontier_phi_66_pred_2;
                _3213 = frontier_phi_66_pred_3;
                _3211 = frontier_phi_66_pred_4;
                _3209 = frontier_phi_66_pred_5;
                uint _3360 = _3359 + 1u;
                if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3353 = _3209;
                    _3354 = _3211;
                    _3355 = _3213;
                    _3356 = _3215;
                    _3357 = _3217;
                    _3358 = _3219;
                    _3359 = _3360;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3208 = _3209;
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
            _3216 = _3217;
            _3218 = _3219;
        }
        uvec4 _3222 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3223 = _3222.z;
        uint _3225 = (_3223 >> 8u) & 15u;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        if (((4294967295u << _3225) & _3128) == 0u)
        {
            _3321 = _3208;
            _3323 = _3210;
            _3325 = _3212;
            _3327 = _3214;
            _3329 = _3216;
            _3331 = _3218;
        }
        else
        {
            float _3346 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
            float _3347 = _3346 * _2187;
            float _3348 = _3346 * _2188;
            float _3349 = _3346 * _2189;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3225 < ((_3223 >> 12u) & 15u))
            {
                float _3322;
                float _3324;
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3460 = _3208;
                float _3461 = _3210;
                float _3462 = _3212;
                float _3463 = _3214;
                float _3464 = _3216;
                float _3465 = _3218;
                uint _3466 = _3225;
                uint _3475;
                bool _3476;
                for (;;)
                {
                    _3475 = texelFetch(g_lightClassification, int((((_3122 << 5u) + (_3108 << 9u)) + (_3466 << 2u)) >> 2u)).x;
                    _3476 = _3475 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3476)
                    {
                        frontier_phi_72_pred = _3465;
                        frontier_phi_72_pred_1 = _3464;
                        frontier_phi_72_pred_2 = _3463;
                        frontier_phi_72_pred_3 = _3462;
                        frontier_phi_72_pred_4 = _3461;
                        frontier_phi_72_pred_5 = _3460;
                    }
                    else
                    {
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3952;
                        float _3953;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3672 = _3460;
                        float _3673 = _3461;
                        float _3674 = _3462;
                        float _3675 = _3463;
                        float _3676 = _3464;
                        float _3677 = _3465;
                        uint _3678 = _3475;
                        uint _3679;
                        vec4 _3704;
                        float _3705;
                        vec4 _3720;
                        vec3 _3732;
                        vec4 _3747;
                        vec4 _3762;
                        float _3808;
                        bool _3809;
                        for (;;)
                        {
                            uint _3689 = ((_3466 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3678));
                            _3679 = (_3678 + 4294967295u) & _3678;
                            uint _3691 = _3689 * 40u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3705 = _3704.w;
                            uint _3707 = (_3689 * 40u) + 4u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3722 = (_3689 * 40u) + 8u;
                            _3732 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x));
                            uint _3734 = (_3689 * 40u) + 16u;
                            _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            uint _3749 = (_3689 * 40u) + 20u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            uint _3764 = (_3689 * 40u) + 24u;
                            vec4 _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3783 = (_3689 * 40u) + 28u;
                            vec4 _3796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3783 + 3u)).x));
                            _3808 = fma(_2189, _3796.z, fma(_2188, _3796.y, _3796.x * _2187)) + _3796.w;
                            _3809 = !((fma(_2189, _3777.z, fma(_2188, _3777.y, _3777.x * _2187)) + _3777.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3809)
                            {
                                float _3836 = _3704.x - _2187;
                                float _3837 = _3704.y - _2188;
                                float _3838 = _3704.z - _2189;
                                float _3839 = dot(vec3(_3836, _3837, _3838), vec3(_3836, _3837, _3838));
                                float _3842 = inversesqrt(_3839);
                                float _3843 = _3842 * _3836;
                                float _3844 = _3842 * _3837;
                                float _3845 = _3842 * _3838;
                                float _3849 = 1.0 - (_3839 / (_3705 * _3705));
                                float _5002 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3854 = sqrt(_3839) * _3720.w;
                                float _3856 = 1.39999997615814208984375 / (_3854 + 1.39999997615814208984375);
                                float _3857 = _3856 * _3856;
                                float _3860 = ((1.0 - _3857) * dot(vec3(_3843, _3844, _3845), vec3(_1054, _1057, _1060))) + _3857;
                                float _3863 = _3854 * _3854;
                                float _3867 = (fma(_2189, _3747.z, fma(_2188, _3747.y, _3747.x * _2187)) + _3747.w) / _3808;
                                float _3868 = (fma(_2189, _3762.z, fma(_2188, _3762.y, _3762.x * _2187)) + _3762.w) / _3808;
                                float _3872 = 1.0 - dot(vec2(_3867, _3868), vec2(_3867, _3868));
                                float _5018 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3873 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3874 = _3873 * (((isnan(0.0) ? _3860 : (isnan(_3860) ? 0.0 : max(_3860, 0.0))) * _3850) / ((_3863 * 0.699999988079071044921875) + 1.0));
                                float _3886 = exp2(log2(1.0 / ((_3863 * 3.5) + 5.0)) * 0.25);
                                float _3887 = 1.0 - _1129;
                                float _3894 = sqrt(1.0 - ((1.0 - (_3887 * _3887)) * (1.0 - (_3886 * _3886))));
                                float _3895 = _3894 * _3894;
                                float _3896 = _3895 * _3895;
                                float _3897 = _3843 - _3347;
                                float _3898 = _3844 - _3348;
                                float _3899 = _3845 - _3349;
                                float _3903 = inversesqrt(dot(vec3(_3897, _3898, _3899), vec3(_3897, _3898, _3899)));
                                float _3907 = dot(vec3(_1054, _1057, _1060), vec3((-0.0) - _3347, (-0.0) - _3348, (-0.0) - _3349));
                                float _5029 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3910 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3911 = dot(vec3(_1054, _1057, _1060), vec3(_3903 * _3897, _3903 * _3898, _3903 * _3899));
                                float _5040 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3914 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
                                float _3918 = ((_3914 * _3914) * (_3896 + (-1.0))) + 1.0;
                                float _3919 = _3856 * _3895;
                                float _3920 = _3919 * _3919;
                                float _3926 = ((1.0 - _3920) * dot(vec3(_1054, _1057, _1060), vec3(_3843, _3844, _3845))) + _3920;
                                float _5051 = isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0));
                                float _3927 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                                float _3928 = 1.0 - _3895;
                                float _3938 = (0.5 / (((_3927 * ((_3910 * _3928) + _3895)) + 9.9999999392252902907785028219223e-09) + (((_3927 * _3928) + _3895) * _3910))) * _3927;
                                float _5062 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3948 = (_3873 * _3850) * (((_3896 * 3.1415927410125732421875) * (isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0)))) / ((_3918 * _3918) * ((_3863 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3874 * _3720.y;
                                frontier_phi_78_pred_1 = _3874 * _3720.x;
                                frontier_phi_78_pred_2 = _3948 * _3732.z;
                                frontier_phi_78_pred_3 = _3948 * _3732.y;
                                frontier_phi_78_pred_4 = _3948 * _3732.x;
                                frontier_phi_78_pred_5 = _3874 * _3720.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3956 = frontier_phi_78_pred;
                            _3955 = frontier_phi_78_pred_1;
                            _3954 = frontier_phi_78_pred_2;
                            _3953 = frontier_phi_78_pred_3;
                            _3952 = frontier_phi_78_pred_4;
                            _3957 = frontier_phi_78_pred_5;
                            _3662 = _3955 + _3675;
                            _3663 = _3956 + _3676;
                            _3664 = _3957 + _3677;
                            _3659 = _3952 + _3672;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            if (_3679 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3672 = _3659;
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3679;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3664;
                        frontier_phi_72_pred_1 = _3663;
                        frontier_phi_72_pred_2 = _3662;
                        frontier_phi_72_pred_3 = _3661;
                        frontier_phi_72_pred_4 = _3660;
                        frontier_phi_72_pred_5 = _3659;
                    }
                    _3332 = frontier_phi_72_pred;
                    _3330 = frontier_phi_72_pred_1;
                    _3328 = frontier_phi_72_pred_2;
                    _3326 = frontier_phi_72_pred_3;
                    _3324 = frontier_phi_72_pred_4;
                    _3322 = frontier_phi_72_pred_5;
                    uint _3467 = _3466 + 1u;
                    if (_3467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3460 = _3322;
                        _3461 = _3324;
                        _3462 = _3326;
                        _3463 = _3328;
                        _3464 = _3330;
                        _3465 = _3332;
                        _3466 = _3467;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3332;
                frontier_phi_60_61_ladder_1 = _3330;
                frontier_phi_60_61_ladder_2 = _3326;
                frontier_phi_60_61_ladder_3 = _3324;
                frontier_phi_60_61_ladder_4 = _3322;
                frontier_phi_60_61_ladder_5 = _3328;
            }
            else
            {
                frontier_phi_60_61_ladder = _3218;
                frontier_phi_60_61_ladder_1 = _3216;
                frontier_phi_60_61_ladder_2 = _3212;
                frontier_phi_60_61_ladder_3 = _3210;
                frontier_phi_60_61_ladder_4 = _3208;
                frontier_phi_60_61_ladder_5 = _3214;
            }
            _3321 = frontier_phi_60_61_ladder_4;
            _3323 = frontier_phi_60_61_ladder_3;
            _3325 = frontier_phi_60_61_ladder_2;
            _3327 = frontier_phi_60_61_ladder_5;
            _3329 = frontier_phi_60_61_ladder_1;
            _3331 = frontier_phi_60_61_ladder;
        }
        float _3336 = isnan(1.0) ? _1113 : (isnan(_1113) ? 1.0 : min(_1113, 1.0));
        _3141 = (_3336 * _3327) + _2653;
        _3143 = (_3336 * _3329) + _2655;
        _3145 = (_3336 * _3331) + _2657;
        _3147 = ((_3321 * _1097) * _3336) + _2991;
        _3149 = ((_3323 * _1099) * _3336) + _2993;
        _3151 = ((_3325 * _1100) * _3336) + _2995;
    }
    else
    {
        _3141 = _2653;
        _3143 = _2655;
        _3145 = _2657;
        _3147 = _2991;
        _3149 = _2993;
        _3151 = _2995;
    }
    float _5078 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _5089 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _5100 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    uint _3171 = _267 + 6u;
    float _3179 = _1035 / cbSceneParam._m0[86u].x;
    float _3180 = _1036 / cbSceneParam._m0[86u].y;
    vec4 _3194 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, (log2((isnan(cbSceneParam._m0[77u].w) ? _970 : (isnan(_970) ? cbSceneParam._m0[77u].w : min(_970, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3196 = _3194.x;
    float _3197 = _3194.y;
    float _3198 = _3194.z;
    float _3199 = _3194.w;
    float _3271;
    float _3273;
    float _3275;
    float _3277;
    if (_970 > cbSceneParam._m0[78u].w)
    {
        float _3233 = isnan(_970) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _970 : min(cbSceneParam._m0[80u].w, _970));
        float _3234 = _3233 / _970;
        float _3245 = _3234 * _1020;
        float _3246 = _1021 * _3234;
        float _3247 = (-0.0) - _3246;
        float _3249 = _3234 * _1022;
        float _3251 = (cbSceneParam._m0[77u].w * _3247) / _3233;
        float _3252 = _3251 + cbSceneParam._m0[79u].w;
        float _3253 = cbSceneParam._m0[79u].w - _3246;
        float _3259 = sqrt(((_3245 * _3245) + (_3246 * _3246)) + (_3249 * _3249));
        float _3262 = (1.0 - (cbSceneParam._m0[77u].w / _3233)) * _3259;
        float _3267 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3269 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3422;
        if (abs((_3247 - _3251) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3422 = ((((_3252 > 0.0) ? exp2(_3267 * _3252) : (2.0 - exp2(_3269 * _3252))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3262;
        }
        else
        {
            float _3382 = 1.0 / cbSceneParam._m0[80u].x;
            float _3383 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : max(_3252, _3253));
            float _3384 = isnan(_3253) ? _3252 : (isnan(_3252) ? _3253 : min(_3252, _3253));
            float _3393 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : min(_3383, 0.0));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            _3422 = ((abs(_3259 / _3247) * cbSceneParam._m0[80u].y) * ((((_3393 - _3394) * 2.0) - ((exp2(_3267 * (isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0)))) - exp2(_3267 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))))) * _3382)) - ((exp2(_3269 * _3393) - exp2(_3269 * _3394)) * _3382))) + (_3262 * cbSceneParam._m0[80u].z);
        }
        vec4 _3424 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3179, _3180, 1.0), 0.0);
        float _3433 = exp2((_3422 * (-1.44269502162933349609375)) * (1.0 - _3424.w));
        float _3434 = log2(_3433);
        float _3450 = log2(_3199);
        _3271 = (exp2(_3450 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].x)) * _3424.x) / cbSceneParam._m0[78u].x)) + _3196;
        _3273 = (exp2(_3450 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].y)) * _3424.y) / cbSceneParam._m0[78u].y)) + _3197;
        _3275 = (exp2(_3450 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].z)) * _3424.z) / cbSceneParam._m0[78u].z)) + _3198;
        _3277 = _3433 * _3199;
    }
    else
    {
        _3271 = _3196;
        _3273 = _3197;
        _3275 = _3198;
        _3277 = _3199;
    }
    float _3289 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3290 = _3289 == 3.0;
    float _3291 = log2(_3277);
    float _3298 = exp2(_3291 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3141 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1113))) + ((_3147 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3299 = exp2(_3291 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0))) * (_3143 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1113))) + ((_3149 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3300 = exp2(_3291 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0))) * (_3145 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1113))) + ((_3151 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3309 = (_3289 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3309 * (_3290 ? _3298 : (_3298 + (cbSceneParam._m0[72u].w * _3271)));
    SV_Target.y = _3309 * (_3290 ? _3299 : (_3299 + (cbSceneParam._m0[72u].w * _3273)));
    SV_Target.z = _3309 * (_3290 ? _3300 : (_3300 + (cbSceneParam._m0[72u].w * _3275)));
    SV_Target.w = cbInstanceData._m0[_3171].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3171].w;
}


