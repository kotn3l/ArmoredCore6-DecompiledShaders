#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1571;
float _3975;
float _3976;
float _3977;
float _3978;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3987 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3998 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4009 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _357 = _352.x * cbMtdParam._m0[11u].x;
    float _358 = _352.y * cbMtdParam._m0[11u].y;
    float _359 = _352.z * cbMtdParam._m0[11u].z;
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _397.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4020 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _468 = (_461 * ((_378.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _469 = (_461 * ((_378.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _470 = (_461 * ((_378.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _397.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4031 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    float _547 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _541;
    float _550 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _542;
    float _553 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _543;
    float _560 = ((_541 - _547) * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) + _547;
    float _561 = ((_542 - _550) * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) + _550;
    float _562 = ((_543 - _553) * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) + _553;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = _619.x;
    float _622 = _619.y;
    float _623 = _619.z;
    float _630 = ((_602.x - _621) * _461) + _621;
    float _631 = ((_602.y - _622) * _461) + _622;
    float _632 = ((_602.z - _623) * _461) + _623;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _657 = ((_644.z - _632) * _534) + _632;
    float _660 = ((((_644.x - _630) * _534) + _630) * 2.0) + (-1.0);
    float _661 = ((((_644.y - _631) * _534) + _631) * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _4042 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _667 = sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _708 = _706.x;
    float _709 = 1.0 - _708;
    float _718 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _721 = ((isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : min(_718, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _730 = (_721 - ((((((_708 - _709) * cbMtdParam._m0[24u].z) + _709) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _721))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4063 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _738 = (_731 * (cbMtdParam._m0[17u].x - _560)) + _560;
    float _739 = (_731 * (cbMtdParam._m0[17u].y - _561)) + _561;
    float _740 = (_731 * (cbMtdParam._m0[17u].z - _562)) + _562;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _754 = _752.x;
    float _755 = 1.0 - _754;
    float _780 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_754 - _755) * cbMtdParam._m0[24u].w) + _755) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4074 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _789 = ((((cbMtdParam._m0[10u].x - _738) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _781) + _738;
    float _790 = ((((cbMtdParam._m0[10u].y - _739) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _781) + _739;
    float _791 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _740)) * _781) + _740;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _819 = _817.x;
    float _837 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _819) * _461) + _819;
    float _854 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _837) * _534) + _837;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _854) * cbMtdParam._m0[19u].z) + _854;
    float _860 = _858 - (_858 * _731);
    float _862 = _860 - (_860 * _781);
    float _867 = (((_579.z - _657) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _657;
    float _871 = ((_681.z - _867) * cbMtdParam._m0[19u].w) + _867;
    vec4 _885 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _892 = (_885.x * 2.0) + (-1.0);
    float _893 = (_885.y * 2.0) + (-1.0);
    float _894 = dot(vec2(_892, _893), vec2(_892, _893));
    float _4085 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _902 = (_731 * (_885.z - _871)) + _871;
    float _905 = ((cbMtdParam._m0[23u].x - _902) * _781) + _902;
    vec4 _926 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _932 = (_926.x * 2.0) + (-1.0);
    float _933 = (_926.y * 2.0) + (-1.0);
    float _934 = dot(vec2(_932, _933), vec2(_932, _933));
    float _4096 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _948 = (_660 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_579.x * 2.0) + (-1.0)))) + (((_681.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _949 = (_661 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_579.y * 2.0) + (-1.0)))) + (((_681.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _961 = (((_892 - _948) + (cbMtdParam._m0[21u].x * _948)) * _731) + _948;
    float _962 = (((_893 - _949) + (cbMtdParam._m0[21u].x * _949)) * _731) + _949;
    float _963 = (_731 * (sqrt(1.0 - (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) - _667)) + _667;
    float _974 = (((_932 - _961) + (_961 * cbMtdParam._m0[22u].z)) * _781) + _961;
    float _975 = (((_933 - _962) + (_962 * cbMtdParam._m0[22u].z)) * _781) + _962;
    float _976 = ((sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) - _963) * _781) + _963;
    float _978 = cbMtdParam._m0[22u].x + _681.w;
    float _981 = fma(_976, _263 * NORMAL.x, fma(_975, _270 * TANGENT.x, (_256 * _248) * _974));
    float _984 = fma(_976, _263 * NORMAL.y, fma(_975, _270 * TANGENT.y, (_256 * _249) * _974));
    float _987 = fma(_976, _263 * NORMAL.z, fma(_975, _270 * TANGENT.z, (_256 * _250) * _974));
    float _991 = inversesqrt(dot(vec3(_981, _984, _987), vec3(_981, _984, _987)));
    float _992 = _991 * _981;
    float _993 = _991 * _984;
    float _994 = _991 * _987;
    float _4107 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _995 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4129 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4140 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4151 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4162 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _1000 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _1014 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1064 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1054);
    float _1065 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1054);
    float _1066 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1054);
    float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
    float _1071 = _1064 * _1070;
    float _1072 = _1065 * _1070;
    float _1073 = _1066 * _1070;
    vec4 _1078 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1080 = _1078.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1252 = sqrt(((_1064 * _1064) + (_1065 * _1065)) + (_1066 * _1066));
        float _1258 = (cbMatDynParam._m0[5u].x * _1252) + cbMatDynParam._m0[5u].y;
        float _4173 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1263 = (cbMatDynParam._m0[5u].z * _1252) + cbMatDynParam._m0[5u].w;
        float _4184 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) - _1259)) + _1259) < ((_1080 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1091 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1092 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1110 = fma(_994, cbSceneParam._m0[5u].z, fma(_993, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _992));
    float _1113 = fma(_994, cbSceneParam._m0[6u].z, fma(_993, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _992));
    float _1116 = fma(_994, cbSceneParam._m0[7u].z, fma(_993, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _992));
    uint _1129 = _295 + 9u;
    uint _1130 = _1129 + uint(cbMatDynParam._m0[0u].w);
    float _1136 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_1130].x;
    float _1137 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_1130].y;
    float _1138 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * cbInstanceData._m0[_1130].z;
    float _4195 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
    float _1139 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
    float _1140 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _4217 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
    float _1142 = 1.0 - _1000;
    float _1143 = _1139 * _1142;
    float _1144 = _1140 * _1142;
    float _1145 = _1141 * _1142;
    float _1150 = (_1139 + (-0.039999999105930328369140625)) * _1000;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _1000;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1000;
    float _1153 = _1150 + 0.039999999105930328369140625;
    float _1155 = _1151 + 0.039999999105930328369140625;
    float _1156 = _1152 + 0.039999999105930328369140625;
    vec4 _1165 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1091, cbSceneParam._m0[86u].y * _1092));
    float _1169 = ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * TEXCOORD_5.w) * _1165.x;
    float _1170 = dot(vec3(_992, _993, _994), vec3(_1071, _1072, _1073));
    float _1173 = _1170 * 2.0;
    float _1177 = (_1173 * _992) - _1071;
    float _1178 = (_1173 * _993) - _1072;
    float _1179 = (_1173 * _994) - _1073;
    float _1183 = abs(dot(vec3(_1071, _1072, _1073), vec3(_992, _993, _994)));
    float _4228 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1185 = sqrt(_995);
    float _1198 = exp2((_1185 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1185 * 3.0));
    float _1204 = (1.0 - _1198) * ((_1185 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1205 = _1198 * _1185;
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1241 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1570;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1295 = fma(_1241, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233));
        float _1299 = fma(_1241, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233));
        float _1303 = fma(_1241, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233));
        float _1328 = _1233 + _992;
        float _1329 = _1237 + _993;
        float _1330 = _1241 + _994;
        float _1340 = fma(_1330, cbModelParam._m0[26u].z, fma(_1329, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1328)) - _1295;
        float _1341 = fma(_1330, cbModelParam._m0[27u].z, fma(_1329, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1328)) - _1299;
        float _1342 = fma(_1330, cbModelParam._m0[28u].z, fma(_1329, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1328)) - _1303;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1295 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1299 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[34u].z) + ((((((_1303 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1398 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1364.x + (-0.5));
        float _1400 = _1398 * (_1364.y + (-0.5));
        float _1401 = _1398 * (_1364.z + (-0.5));
        float _1408 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1371.x + (-0.5));
        float _1410 = _1408 * (_1371.y + (-0.5));
        float _1411 = _1408 * (_1371.z + (-0.5));
        float _1418 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1378.x + (-0.5));
        float _1420 = _1418 * (_1378.y + (-0.5));
        float _1421 = _1418 * (_1378.z + (-0.5));
        float _1428 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1385.x + (-0.5));
        float _1430 = _1428 * (_1385.y + (-0.5));
        float _1431 = _1428 * (_1385.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1452 = (dot(vec3(_992, _993, _994), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1462 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4276 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1464 + 1.0))) + _1469) * _1432;
        float _1479 = _1400 * 0.5;
        float _1480 = _1410 * 0.5;
        float _1481 = _1420 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_992, _993, _994), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4309 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1506 + 1.0))) + _1511) * _1433;
        float _1521 = _1401 * 0.5;
        float _1522 = _1411 * 0.5;
        float _1523 = _1421 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_992, _993, _994), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4342 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1548 + 1.0))) + _1553) * _1434;
        _1570 = _1401;
        _1572 = _1400;
        _1573 = _1399;
        _1574 = _1411;
        _1575 = _1410;
        _1576 = _1409;
        _1577 = _1421;
        _1578 = _1420;
        _1579 = _1419;
        _1580 = _1434;
        _1581 = _1433;
        _1582 = _1432;
        _1583 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1584 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1585 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1571;
        _1572 = _1571;
        _1573 = _1571;
        _1574 = _1571;
        _1575 = _1571;
        _1576 = _1571;
        _1577 = _1571;
        _1578 = _1571;
        _1579 = _1571;
        _1580 = _1571;
        _1581 = _1571;
        _1582 = _1571;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1612 = fma(_1241, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233));
        float _1616 = fma(_1241, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233));
        float _1620 = fma(_1241, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233));
        float _1643 = _1233 + _992;
        float _1644 = _1237 + _993;
        float _1645 = _1241 + _994;
        float _1655 = fma(_1645, cbModelParam._m0[30u].z, fma(_1644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1643)) - _1612;
        float _1656 = fma(_1645, cbModelParam._m0[31u].z, fma(_1644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1643)) - _1616;
        float _1657 = fma(_1645, cbModelParam._m0[32u].z, fma(_1644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1643)) - _1620;
        float _1661 = inversesqrt(dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657)));
        float _1674 = ((_1661 * _1655) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1612 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1675 = ((_1661 * _1656) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1616 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1676 = ((_1661 * _1657) / cbModelParam._m0[35u].z) + ((((((_1620 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1692 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        vec4 _1699 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1674, _1675, _1676), 0.0);
        float _1711 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1678.x + (-0.5));
        float _1713 = _1711 * (_1678.y + (-0.5));
        float _1714 = _1711 * (_1678.z + (-0.5));
        float _1721 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1685.x + (-0.5));
        float _1723 = _1721 * (_1685.y + (-0.5));
        float _1724 = _1721 * (_1685.z + (-0.5));
        float _1731 = exp2((_1692.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1692.x + (-0.5));
        float _1733 = _1731 * (_1692.y + (-0.5));
        float _1734 = _1731 * (_1692.z + (-0.5));
        float _1741 = exp2((_1699.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1699.x + (-0.5));
        float _1743 = _1741 * (_1699.y + (-0.5));
        float _1744 = _1741 * (_1699.z + (-0.5));
        float _1745 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = _1712 * 0.5;
        float _1749 = _1722 * 0.5;
        float _1750 = _1732 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_992, _993, _994), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1745 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4405 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1775 + 1.0))) + _1780) * _1745;
        float _1790 = _1713 * 0.5;
        float _1791 = _1723 * 0.5;
        float _1792 = _1733 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_992, _993, _994), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4438 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1817 + 1.0))) + _1822) * _1746;
        float _1832 = _1714 * 0.5;
        float _1833 = _1724 * 0.5;
        float _1834 = _1734 * 0.5;
        float _1835 = dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834));
        float _1840 = (_1835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1835);
        float _1848 = (dot(vec3(_992, _993, _994), vec3(_1840 * _1832, _1840 * _1833, _1840 * _1834)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1859 = _1858 * 2.0;
        float _1863 = (1.0 - _1858) / (_1858 + 1.0);
        float _4471 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1873 = ((((1.0 - _1864) * (_1859 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1859 + 1.0))) + _1864) * _1747;
        _1881 = _1714;
        _1882 = _1713;
        _1883 = _1712;
        _1884 = _1724;
        _1885 = _1723;
        _1886 = _1722;
        _1887 = _1734;
        _1888 = _1733;
        _1889 = _1732;
        _1890 = _1747;
        _1891 = _1746;
        _1892 = _1745;
        _1893 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1894 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)));
    }
    else
    {
        _1881 = _1571;
        _1882 = _1571;
        _1883 = _1571;
        _1884 = _1571;
        _1885 = _1571;
        _1886 = _1571;
        _1887 = _1571;
        _1888 = _1571;
        _1889 = _1571;
        _1890 = _1571;
        _1891 = _1571;
        _1892 = _1571;
        _1893 = 0.0;
        _1894 = 0.0;
        _1895 = 0.0;
    }
    float _1905 = (cbModelParam._m0[1u].x * (_1893 - _1583)) + _1583;
    float _1906 = (cbModelParam._m0[1u].x * (_1894 - _1584)) + _1584;
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1585)) + _1585;
    float _1928 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1905));
    float _1949 = _1177 * 0.5;
    float _1950 = _1178 * 0.5;
    float _1951 = _1179 * 0.5;
    float _1952 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1955 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1882, _1885, _1888, _1891));
    float _1958 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1881, _1884, _1887, _1890));
    float _1992;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1965 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1570, _1574, _1577, _1580));
        float _1969 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1572, _1575, _1578, _1581));
        float _1973 = dot(vec4(_1949, _1950, _1951, 1.0), vec4(_1573, _1576, _1579, _1582));
        float _1980 = dot(vec4(cbModelParam._m0[39u]), vec4(_1949, _1950, _1951, 1.0));
        _1992 = dot(vec3(isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)), isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1992 = 1.0;
    }
    float _2003;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1994 = dot(vec4(cbModelParam._m0[40u]), vec4(_1949, _1950, _1951, 1.0));
        _2003 = dot(vec3(isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1994) ? 0.0 : (isnan(0.0) ? _1994 : max(0.0, _1994))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2003 = 1.0;
    }
    float _2007 = (_2003 * cbModelParam._m0[1u].x) + (_1992 * (1.0 - cbModelParam._m0[1u].x));
    float _2017 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _995);
    float _2018 = isnan(_2017) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2017 : min(cbModelParam._m0[25u].z, _2017));
    float _2099;
    float _2101;
    float _2103;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2066 = fma(_1241, cbModelParam._m0[13u].z, fma(_1237, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1233)) + cbModelParam._m0[13u].w;
        float _2070 = fma(_1241, cbModelParam._m0[14u].z, fma(_1237, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1233)) + cbModelParam._m0[14u].w;
        float _2074 = fma(_1241, cbModelParam._m0[15u].z, fma(_1237, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1233)) + cbModelParam._m0[15u].w;
        float _2077 = fma(_1179, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177));
        float _2080 = fma(_1179, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177));
        float _2083 = fma(_1179, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177));
        float _2111;
        if (_2077 > 0.0)
        {
            _2111 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2111 = frontier_phi_17_15_ladder;
        }
        float _2335;
        if (_2080 > 0.0)
        {
            _2335 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2335 = frontier_phi_26_22_ladder;
        }
        float _2592;
        if (_2083 > 0.0)
        {
            _2592 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2592 = frontier_phi_38_33_ladder;
        }
        float _2594 = isnan(_2335) ? _2111 : (isnan(_2111) ? _2335 : min(_2111, _2335));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _2077) + _2066;
        float _2600 = (_2595 * _2080) + _2070;
        float _2601 = (_2595 * _2083) + _2074;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2602;
        float _2606 = _2602 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 > _2606) || ((_2600 < _2604) || ((_2599 < _2604) || (_2599 > _2606))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2601, cbModelParam._m0[9u].z, fma(_2600, cbModelParam._m0[9u].y, _2599 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2601, cbModelParam._m0[10u].z, fma(_2600, cbModelParam._m0[10u].y, _2599 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2601, cbModelParam._m0[11u].z, fma(_2600, cbModelParam._m0[11u].y, _2599 * cbModelParam._m0[11u].x))), _2018);
            frontier_phi_16_38_ladder = _2729.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2729.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2729.x * cbModelParam._m0[1u].y;
        }
        _2099 = frontier_phi_16_38_ladder_2;
        _2101 = frontier_phi_16_38_ladder_1;
        _2103 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1177, _1178, _1179), _2018);
        _2099 = _2087.x * cbModelParam._m0[1u].y;
        _2101 = _2087.y * cbModelParam._m0[1u].y;
        _2103 = _2087.z * cbModelParam._m0[1u].y;
    }
    float _2107 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _995);
    float _2108 = isnan(_2107) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2107 : min(cbModelParam._m0[25u].w, _2107));
    float _2198;
    float _2200;
    float _2202;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2162 = fma(_1241, cbModelParam._m0[21u].z, fma(_1237, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1233)) + cbModelParam._m0[21u].w;
        float _2166 = fma(_1241, cbModelParam._m0[22u].z, fma(_1237, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1233)) + cbModelParam._m0[22u].w;
        float _2170 = fma(_1241, cbModelParam._m0[23u].z, fma(_1237, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1233)) + cbModelParam._m0[23u].w;
        float _2173 = fma(_1179, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177));
        float _2176 = fma(_1179, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177));
        float _2179 = fma(_1179, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177));
        float _2340;
        if (_2173 > 0.0)
        {
            _2340 = abs((1.0 - _2162) / _2173);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2173 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2162 + 1.0) / _2173);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2340 = frontier_phi_28_24_ladder;
        }
        float _2619;
        if (_2176 > 0.0)
        {
            _2619 = abs((1.0 - _2166) / _2176);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2166 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2619 = frontier_phi_40_35_ladder;
        }
        float _2832;
        if (_2179 > 0.0)
        {
            _2832 = abs((1.0 - _2170) / _2179);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2170 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2832 = frontier_phi_49_46_ladder;
        }
        float _2834 = isnan(_2619) ? _2340 : (isnan(_2340) ? _2619 : min(_2340, _2619));
        float _2835 = isnan(_2832) ? _2834 : (isnan(_2834) ? _2832 : min(_2834, _2832));
        float _2839 = (_2835 * _2173) + _2162;
        float _2840 = (_2835 * _2176) + _2166;
        float _2841 = (_2835 * _2179) + _2170;
        float _2842 = _2835 * 9.9999997473787516355514526367188e-05;
        float _2843 = (-1.0) - _2842;
        float _2845 = _2842 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2841 > _2845) || ((_2841 < _2843) || ((_2840 > _2845) || ((_2840 < _2843) || ((_2839 < _2843) || (_2839 > _2845))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2841, cbModelParam._m0[17u].z, fma(_2840, cbModelParam._m0[17u].y, _2839 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2841, cbModelParam._m0[18u].z, fma(_2840, cbModelParam._m0[18u].y, _2839 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2841, cbModelParam._m0[19u].z, fma(_2840, cbModelParam._m0[19u].y, _2839 * cbModelParam._m0[19u].x))), _2108);
            frontier_phi_25_49_ladder = _3040.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3040.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3040.x * cbModelParam._m0[1u].z;
        }
        _2198 = frontier_phi_25_49_ladder_2;
        _2200 = frontier_phi_25_49_ladder_1;
        _2202 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2182 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1177, _1178, _1179), _2108);
        _2198 = _2182.x * cbModelParam._m0[1u].z;
        _2200 = _2182.y * cbModelParam._m0[1u].z;
        _2202 = _2182.z * cbModelParam._m0[1u].z;
    }
    float _2215 = (((_1204 * _1153) + _1205) * _1169) * ((cbModelParam._m0[1u].w * (_2198 - _2099)) + _2099);
    float _2217 = (((_1204 * _1155) + _1205) * _1169) * ((cbModelParam._m0[1u].w * (_2200 - _2101)) + _2101);
    float _2219 = (((_1204 * _1156) + _1205) * _1169) * ((cbModelParam._m0[1u].w * (_2202 - _2103)) + _2103);
    float _2222 = fma(_2219, cbSceneParam._m0[89u].z, fma(_2217, cbSceneParam._m0[89u].y, _2215 * cbSceneParam._m0[89u].x));
    float _2225 = fma(_2219, cbSceneParam._m0[90u].z, fma(_2217, cbSceneParam._m0[90u].y, _2215 * cbSceneParam._m0[90u].x));
    float _2228 = fma(_2219, cbSceneParam._m0[91u].z, fma(_2217, cbSceneParam._m0[91u].y, _2215 * cbSceneParam._m0[91u].x));
    vec4 _2236 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1091, _1092));
    float _2238 = _2236.w;
    float _2250 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2238);
    float _2251 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2238);
    float _2252 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2238);
    uvec4 _2256 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2258 = _2256.x * 14u;
    uint _2259 = _2258 + 13u;
    float _2266 = _1169 + (-1.0);
    float _2271 = (cbLight._m0[_2259].x * _2266) + 1.0;
    float _2272 = (cbLight._m0[_2259].y * _2266) + 1.0;
    float _2273 = (cbLight._m0[_2259].z * _2266) + 1.0;
    float _2274 = (cbLight._m0[_2259].w * _2266) + 1.0;
    uint _2275 = _2258 + 5u;
    float _2281 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2285 = _2258 + 4u;
    float _2294 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2298 = _2258 | 1u;
    float _2309 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_992, _993, _994));
    float _2312 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_992, _993, _994));
    float _4607 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _4618 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2317 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2319 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * 0.3183098733425140380859375;
    float _2326 = ((cbLight._m0[_2275].x * _2281) * _2319) + (((cbLight._m0[_2285].x * _2250) * _2294) * _2317);
    float _2327 = ((_2281 * cbLight._m0[_2275].y) * _2319) + (((cbLight._m0[_2285].y * _2251) * _2294) * _2317);
    float _2328 = ((_2281 * cbLight._m0[_2275].z) * _2319) + (((cbLight._m0[_2285].z * _2252) * _2294) * _2317);
    uvec4 _2332 = floatBitsToUint(cbLight._m0[_2258 + 12u]);
    bool _2334 = _2332.x == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2334)
    {
        _2345 = _2326;
        _2347 = _2327;
        _2349 = _2328;
    }
    else
    {
        uint _2353 = _2258 + 6u;
        float _2369 = (dot(vec3(cbLight._m0[_2258 + 2u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4629 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2372 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2345 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2326;
        _2347 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2327;
        _2349 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2328;
    }
    bool _2352 = _2332.y == 0u;
    float _2390;
    float _2392;
    float _2394;
    if (_2352)
    {
        _2390 = _2345;
        _2392 = _2347;
        _2394 = _2349;
    }
    else
    {
        uint _2563 = _2258 + 7u;
        float _2579 = (dot(vec3(cbLight._m0[_2258 + 3u].xyz), vec3(_992, _993, _994)) * 0.5) + 0.5;
        float _2580 = _2579 * _2579;
        float _4645 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2581 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2582 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2390 = (((cbLight._m0[_2563].x * 0.3183098733425140380859375) * _2581) * _2582) + _2345;
        _2392 = (((cbLight._m0[_2563].y * 0.3183098733425140380859375) * _2581) * _2582) + _2347;
        _2394 = (((cbLight._m0[_2563].z * 0.3183098733425140380859375) * _2581) * _2582) + _2349;
    }
    uint _2397 = _2258 + 8u;
    float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _995) * 0.949999988079071044921875);
    float _2411 = _2410 * _2410;
    float _2412 = cbLight._m0[_2258].x + _1071;
    float _2413 = cbLight._m0[_2258].y + _1072;
    float _2414 = cbLight._m0[_2258].z + _1073;
    float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
    float _2419 = _2418 * _2412;
    float _2420 = _2418 * _2413;
    float _2421 = _2418 * _2414;
    float _2422 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2258].xyz));
    float _4661 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _4672 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _2426 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2427 = dot(vec3(_992, _993, _994), vec3(_2419, _2420, _2421));
    float _4683 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _2431 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2419, _2420, _2421));
    float _4694 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2435 = _2411 * _2411;
    float _2439 = ((_2430 * _2430) * (_2435 + (-1.0))) + 1.0;
    float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
    float _2448 = 0.959999978542327880859375 - _1150;
    float _2450 = 0.959999978542327880859375 - _1151;
    float _2451 = 0.959999978542327880859375 - _1152;
    float _2458 = 1.0 - _2411;
    float _2469 = (0.5 / (((_2426 * ((_2425 * _2458) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2458) + _2411) * _2425))) * _2425;
    float _4705 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2471 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2435 / ((_2439 * _2439) * 3.141590118408203125));
    uint _2485 = _2258 + 9u;
    float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2298].w)) * _995) * 0.949999988079071044921875);
    float _2497 = _2496 * _2496;
    float _2498 = cbLight._m0[_2298].x + _1071;
    float _2499 = cbLight._m0[_2298].y + _1072;
    float _2500 = cbLight._m0[_2298].z + _1073;
    float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
    float _2505 = _2504 * _2498;
    float _2506 = _2504 * _2499;
    float _2507 = _2504 * _2500;
    float _2508 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2298].xyz));
    float _4716 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2512 = dot(vec3(_992, _993, _994), vec3(_2505, _2506, _2507));
    float _4727 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2298].xyz), vec3(_2505, _2506, _2507));
    float _4738 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2497 * _2497;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2531 = exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0);
    float _2538 = 1.0 - _2497;
    float _2548 = (0.5 / (((_2426 * ((_2511 * _2538) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2538) + _2497) * _2511))) * _2511;
    float _4749 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2550 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    float _2560 = (((((_2531 * _2448) + _1153) * cbLight._m0[_2485].x) * _2550) * _2281) + ((((cbLight._m0[_2397].x * _2250) * ((_2447 * _2448) + _1153)) * _2471) * _2294);
    float _2561 = (((((_2531 * _2450) + _1155) * cbLight._m0[_2485].y) * _2550) * _2281) + ((((cbLight._m0[_2397].y * _2251) * ((_2447 * _2450) + _1155)) * _2471) * _2294);
    float _2562 = (((((_2531 * _2451) + _1156) * cbLight._m0[_2485].z) * _2550) * _2281) + ((((cbLight._m0[_2397].z * _2252) * ((_2447 * _2451) + _1156)) * _2471) * _2294);
    float _2624;
    float _2626;
    float _2628;
    if (_2334)
    {
        _2624 = _2560;
        _2626 = _2561;
        _2628 = _2562;
    }
    else
    {
        uint _2630 = _2258 + 2u;
        uint _2634 = _2258 + 10u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _995) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _1071;
        float _2651 = cbLight._m0[_2630].y + _1072;
        float _2652 = cbLight._m0[_2630].z + _1073;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2630].xyz));
        float _4760 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2664 = dot(vec3(_992, _993, _994), vec3(_2657, _2658, _2659));
        float _4771 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4782 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0);
        float _2690 = 1.0 - _2649;
        float _2700 = (0.5 / (((_2426 * ((_2663 * _2690) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2690) + _2649) * _2663))) * _2663;
        float _4793 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2624 = (((((_2683 * _2448) + _1153) * cbLight._m0[_2634].x) * _2702) * _2703) + _2560;
        _2626 = (((((_2683 * _2450) + _1155) * cbLight._m0[_2634].y) * _2702) * _2703) + _2561;
        _2628 = (((((_2683 * _2451) + _1156) * cbLight._m0[_2634].z) * _2702) * _2703) + _2562;
    }
    float _2738;
    float _2740;
    float _2742;
    if (_2352)
    {
        _2738 = _2624;
        _2740 = _2626;
        _2742 = _2628;
    }
    else
    {
        uint _2749 = _2258 + 3u;
        uint _2753 = _2258 + 11u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _995) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _1071;
        float _2770 = cbLight._m0[_2749].y + _1072;
        float _2771 = cbLight._m0[_2749].z + _1073;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_992, _993, _994), vec3(cbLight._m0[_2749].xyz));
        float _4809 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2783 = dot(vec3(_992, _993, _994), vec3(_2776, _2777, _2778));
        float _4820 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4831 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2802 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2809 = 1.0 - _2768;
        float _2819 = (0.5 / (((_2426 * ((_2782 * _2809) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2426 * _2809) + _2768) * _2782))) * _2782;
        float _4842 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2821 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2822 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2738 = (((((_2802 * _2448) + _1153) * cbLight._m0[_2753].x) * _2821) * _2822) + _2624;
        _2740 = (((((_2802 * _2450) + _1155) * cbLight._m0[_2753].y) * _2821) * _2822) + _2626;
        _2742 = (((((_2802 * _2451) + _1156) * cbLight._m0[_2753].z) * _2821) * _2822) + _2628;
    }
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    if (_2256.y == 0u)
    {
        float _2897 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2898 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2897;
        float _2899 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2897;
        float _2900 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2897;
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.x;
        uint _2924 = uint((float(_2912.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1092) / _2913))) + floor(float(uint(cbSceneParam._m0[85u].x * _1091) / _2913)));
        float _2934 = (log2(_2900 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2935 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        uint _2938 = uint(isnan(14.0) ? _2935 : (isnan(_2935) ? 14.0 : min(_2935, 14.0)));
        uvec4 _2943 = texelFetch(g_lightClusterGridBuffer, int(((_2938 << 2u) + (_2924 << 6u)) >> 2u));
        uint _2944 = _2943.x;
        uint _2945 = _2912.z;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        if (((((1u << ((_2945 >> 4u) & 15u)) + 4294967295u) & _2944) == 0u) || ((_2945 & 240u) == 0u))
        {
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
        }
        else
        {
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            uint _3204 = 0u;
            uint _3213;
            bool _3214;
            for (;;)
            {
                _3213 = texelFetch(g_lightClassification, int((((_2938 << 5u) + (_2924 << 9u)) + (_3204 << 2u)) >> 2u)).x;
                _3214 = _3213 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3214)
                {
                    frontier_phi_66_pred = _3198;
                    frontier_phi_66_pred_1 = _3203;
                    frontier_phi_66_pred_2 = _3202;
                    frontier_phi_66_pred_3 = _3201;
                    frontier_phi_66_pred_4 = _3200;
                    frontier_phi_66_pred_5 = _3199;
                }
                else
                {
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    uint _3349;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3213;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    for (;;)
                    {
                        uint _3353 = uint(findLSB(_3349)) + (_3204 << 5u);
                        uint _3350 = (_3349 + 4294967295u) & _3349;
                        uint _3355 = _3353 * 48u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3375 = (_3353 * 48u) + 4u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 3u)).x));
                        uint _3394 = (_3353 * 48u) + 8u;
                        vec3 _3405 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x));
                        float _3409 = _3369.x - _2898;
                        float _3410 = _3369.y - _2899;
                        float _3411 = _3369.z - _2900;
                        float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                        float _3415 = inversesqrt(_3412);
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3419 = dot(vec3(_1110, _1113, _1116), vec3(_3416, _3417, _3418));
                        float _3424 = 1.0 - (_3412 * _3369.w);
                        float _4868 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3425 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3426 = sqrt(_3412) * _3388.w;
                        float _3429 = 1.39999997615814208984375 / (_3426 + 1.39999997615814208984375);
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3419) + _3430;
                        float _3436 = _3426 * _3426;
                        float _3440 = ((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3425) / ((_3436 * 0.699999988079071044921875) + 1.0);
                        float _3444 = (-0.0) - _2898;
                        float _3445 = (-0.0) - _2899;
                        float _3446 = (-0.0) - _2900;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3451 = _3450 * _3444;
                        float _3452 = _3450 * _3445;
                        float _3453 = _3450 * _3446;
                        float _3461 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                        float _3462 = 1.0 - _1185;
                        float _3469 = sqrt(1.0 - ((1.0 - (_3462 * _3462)) * (1.0 - (_3461 * _3461))));
                        float _3470 = _3469 * _3469;
                        float _3471 = _3470 * _3470;
                        float _3472 = _3451 + _3416;
                        float _3473 = _3452 + _3417;
                        float _3474 = _3453 + _3418;
                        float _3478 = inversesqrt(dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474)));
                        float _3482 = dot(vec3(_1110, _1113, _1116), vec3(_3451, _3452, _3453));
                        float _4884 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3486 = dot(vec3(_1110, _1113, _1116), vec3(_3478 * _3472, _3478 * _3473, _3478 * _3474));
                        float _4895 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3489 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3493 = ((_3489 * _3489) * (_3471 + (-1.0))) + 1.0;
                        float _3494 = _3429 * _3470;
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3419) + _3495;
                        float _4906 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3499 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3500 = 1.0 - _3470;
                        float _3510 = (0.5 / (((_3499 * ((_3485 * _3500) + _3470)) + 9.9999999392252902907785028219223e-09) + (((_3499 * _3500) + _3470) * _3485))) * _3499;
                        float _4917 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3521 = (((_3471 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3493 * _3493) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125))) * _3425;
                        _3273 = (_3440 * _3388.x) + _3346;
                        _3274 = (_3440 * _3388.y) + _3347;
                        _3275 = (_3440 * _3388.z) + _3348;
                        _3270 = (_3521 * _3405.x) + _3343;
                        _3271 = (_3521 * _3405.y) + _3344;
                        _3272 = (_3521 * _3405.z) + _3345;
                        if (_3350 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3350;
                        }
                    }
                    frontier_phi_66_pred = _3270;
                    frontier_phi_66_pred_1 = _3275;
                    frontier_phi_66_pred_2 = _3274;
                    frontier_phi_66_pred_3 = _3273;
                    frontier_phi_66_pred_4 = _3272;
                    frontier_phi_66_pred_5 = _3271;
                }
                _3046 = frontier_phi_66_pred;
                _3056 = frontier_phi_66_pred_1;
                _3054 = frontier_phi_66_pred_2;
                _3052 = frontier_phi_66_pred_3;
                _3050 = frontier_phi_66_pred_4;
                _3048 = frontier_phi_66_pred_5;
                uint _3205 = _3204 + 1u;
                if (_3205 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3198 = _3046;
                    _3199 = _3048;
                    _3200 = _3050;
                    _3201 = _3052;
                    _3202 = _3054;
                    _3203 = _3056;
                    _3204 = _3205;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
        }
        uvec4 _3059 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3060 = _3059.z;
        uint _3062 = (_3060 >> 8u) & 15u;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((4294967295u << _3062) & _2944) == 0u)
        {
            _3166 = _3045;
            _3168 = _3047;
            _3170 = _3049;
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
        }
        else
        {
            float _3191 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
            float _3192 = _3191 * _2898;
            float _3193 = _3191 * _2899;
            float _3194 = _3191 * _2900;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3062 < ((_3060 >> 12u) & 15u))
            {
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3326 = _3045;
                float _3327 = _3047;
                float _3328 = _3049;
                float _3329 = _3051;
                float _3330 = _3053;
                float _3331 = _3055;
                uint _3332 = _3062;
                uint _3341;
                bool _3342;
                for (;;)
                {
                    _3341 = texelFetch(g_lightClassification, int((((_2938 << 5u) + (_2924 << 9u)) + (_3332 << 2u)) >> 2u)).x;
                    _3342 = _3341 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3342)
                    {
                        frontier_phi_77_pred = _3331;
                        frontier_phi_77_pred_1 = _3330;
                        frontier_phi_77_pred_2 = _3329;
                        frontier_phi_77_pred_3 = _3328;
                        frontier_phi_77_pred_4 = _3327;
                        frontier_phi_77_pred_5 = _3326;
                    }
                    else
                    {
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3548 = _3326;
                        float _3549 = _3327;
                        float _3550 = _3328;
                        float _3551 = _3329;
                        float _3552 = _3330;
                        float _3553 = _3331;
                        uint _3554 = _3341;
                        uint _3555;
                        vec4 _3580;
                        float _3581;
                        vec4 _3596;
                        vec3 _3608;
                        vec4 _3623;
                        vec4 _3638;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3565 = ((_3332 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3554));
                            _3555 = (_3554 + 4294967295u) & _3554;
                            uint _3567 = _3565 * 40u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3581 = _3580.w;
                            uint _3583 = (_3565 * 40u) + 4u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3565 * 40u) + 8u;
                            _3608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x));
                            uint _3610 = (_3565 * 40u) + 16u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3565 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3565 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3565 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2900, _3672.z, fma(_2899, _3672.y, _3672.x * _2898)) + _3672.w;
                            _3685 = !((fma(_2900, _3653.z, fma(_2899, _3653.y, _3653.x * _2898)) + _3653.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3580.x - _2898;
                                float _3713 = _3580.y - _2899;
                                float _3714 = _3580.z - _2900;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3581 * _3581));
                                float _4928 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3730 = sqrt(_3715) * _3596.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_1110, _1113, _1116))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2900, _3623.z, fma(_2899, _3623.y, _3623.x * _2898)) + _3623.w) / _3684;
                                float _3744 = (fma(_2900, _3638.z, fma(_2899, _3638.y, _3638.x * _2898)) + _3638.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4944 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _1185;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3192;
                                float _3774 = _3720 - _3193;
                                float _3775 = _3721 - _3194;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_1110, _1113, _1116), vec3((-0.0) - _3192, (-0.0) - _3193, (-0.0) - _3194));
                                float _4955 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3787 = dot(vec3(_1110, _1113, _1116), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4966 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_1110, _1113, _1116), vec3(_3719, _3720, _3721))) + _3796;
                                float _4977 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4988 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3750 * _3596.y;
                                frontier_phi_83_pred_1 = _3750 * _3596.x;
                                frontier_phi_83_pred_2 = _3824 * _3608.z;
                                frontier_phi_83_pred_3 = _3824 * _3608.y;
                                frontier_phi_83_pred_4 = _3824 * _3608.x;
                                frontier_phi_83_pred_5 = _3750 * _3596.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3832 = frontier_phi_83_pred;
                            _3831 = frontier_phi_83_pred_1;
                            _3830 = frontier_phi_83_pred_2;
                            _3829 = frontier_phi_83_pred_3;
                            _3828 = frontier_phi_83_pred_4;
                            _3833 = frontier_phi_83_pred_5;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            if (_3555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3555;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3540;
                        frontier_phi_77_pred_1 = _3539;
                        frontier_phi_77_pred_2 = _3538;
                        frontier_phi_77_pred_3 = _3537;
                        frontier_phi_77_pred_4 = _3536;
                        frontier_phi_77_pred_5 = _3535;
                    }
                    _3177 = frontier_phi_77_pred;
                    _3175 = frontier_phi_77_pred_1;
                    _3173 = frontier_phi_77_pred_2;
                    _3171 = frontier_phi_77_pred_3;
                    _3169 = frontier_phi_77_pred_4;
                    _3167 = frontier_phi_77_pred_5;
                    uint _3333 = _3332 + 1u;
                    if (_3333 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3326 = _3167;
                        _3327 = _3169;
                        _3328 = _3171;
                        _3329 = _3173;
                        _3330 = _3175;
                        _3331 = _3177;
                        _3332 = _3333;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3171;
                frontier_phi_58_59_ladder_1 = _3177;
                frontier_phi_58_59_ladder_2 = _3175;
                frontier_phi_58_59_ladder_3 = _3173;
                frontier_phi_58_59_ladder_4 = _3169;
                frontier_phi_58_59_ladder_5 = _3167;
            }
            else
            {
                frontier_phi_58_59_ladder = _3049;
                frontier_phi_58_59_ladder_1 = _3055;
                frontier_phi_58_59_ladder_2 = _3053;
                frontier_phi_58_59_ladder_3 = _3051;
                frontier_phi_58_59_ladder_4 = _3047;
                frontier_phi_58_59_ladder_5 = _3045;
            }
            _3166 = frontier_phi_58_59_ladder_5;
            _3168 = frontier_phi_58_59_ladder_4;
            _3170 = frontier_phi_58_59_ladder;
            _3172 = frontier_phi_58_59_ladder_3;
            _3174 = frontier_phi_58_59_ladder_2;
            _3176 = frontier_phi_58_59_ladder_1;
        }
        float _3181 = isnan(1.0) ? _1169 : (isnan(_1169) ? 1.0 : min(_1169, 1.0));
        _2957 = (_3181 * _3172) + _2390;
        _2959 = (_3181 * _3174) + _2392;
        _2961 = (_3181 * _3176) + _2394;
        _2963 = ((_3166 * _1153) * _3181) + _2738;
        _2965 = ((_3168 * _1155) * _3181) + _2740;
        _2967 = ((_3170 * _1156) * _3181) + _2742;
    }
    else
    {
        _2957 = _2390;
        _2959 = _2392;
        _2961 = _2394;
        _2963 = _2738;
        _2965 = _2740;
        _2967 = _2742;
    }
    float _5004 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _5015 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _5026 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _2984 = ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2957 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1169))) + ((_2963 + ((isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) * _2007)) * cbPerFrame._m0[3u].x);
    float _2985 = ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2959 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1169))) + ((_2965 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2007)) * cbPerFrame._m0[3u].x);
    float _2986 = ((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_2961 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1169))) + ((_2967 + ((isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))) * _2007)) * cbPerFrame._m0[3u].x);
    uint _2987 = _295 + 6u;
    float _2995 = _1091 / cbSceneParam._m0[86u].x;
    float _2996 = _1092 / cbSceneParam._m0[86u].y;
    vec4 _3010 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2995, _2996, (log2((isnan(cbSceneParam._m0[77u].w) ? _1014 : (isnan(_1014) ? cbSceneParam._m0[77u].w : min(_1014, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3012 = _3010.x;
    float _3013 = _3010.y;
    float _3014 = _3010.z;
    float _3015 = _3010.w;
    float _3108;
    float _3110;
    float _3112;
    float _3114;
    if (_1014 > cbSceneParam._m0[78u].w)
    {
        float _3070 = isnan(_1014) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1014 : min(cbSceneParam._m0[80u].w, _1014));
        float _3071 = _3070 / _1014;
        float _3082 = _3071 * _1064;
        float _3083 = _1065 * _3071;
        float _3084 = (-0.0) - _3083;
        float _3086 = _3071 * _1066;
        float _3088 = (cbSceneParam._m0[77u].w * _3084) / _3070;
        float _3089 = _3088 + cbSceneParam._m0[79u].w;
        float _3090 = cbSceneParam._m0[79u].w - _3083;
        float _3096 = sqrt(((_3082 * _3082) + (_3083 * _3083)) + (_3086 * _3086));
        float _3099 = (1.0 - (cbSceneParam._m0[77u].w / _3070)) * _3096;
        float _3104 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3106 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3283;
        if (abs((_3084 - _3088) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3283 = ((((_3089 > 0.0) ? exp2(_3104 * _3089) : (2.0 - exp2(_3106 * _3089))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3099;
        }
        else
        {
            float _3227 = 1.0 / cbSceneParam._m0[80u].x;
            float _3228 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : max(_3089, _3090));
            float _3229 = isnan(_3090) ? _3089 : (isnan(_3089) ? _3090 : min(_3089, _3090));
            float _3238 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : min(_3228, 0.0));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            _3283 = ((abs(_3096 / _3084) * cbSceneParam._m0[80u].y) * ((((_3238 - _3239) * 2.0) - ((exp2(_3104 * (isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0)))) - exp2(_3104 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0))))) * _3227)) - ((exp2(_3106 * _3238) - exp2(_3106 * _3239)) * _3227))) + (_3099 * cbSceneParam._m0[80u].z);
        }
        vec4 _3285 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2995, _2996, 1.0), 0.0);
        float _3294 = exp2((_3283 * (-1.44269502162933349609375)) * (1.0 - _3285.w));
        float _3295 = log2(_3294);
        float _3311 = log2(_3015);
        _3108 = (exp2(_3311 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].x)) * _3285.x) / cbSceneParam._m0[78u].x)) + _3012;
        _3110 = (exp2(_3311 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].y)) * _3285.y) / cbSceneParam._m0[78u].y)) + _3013;
        _3112 = (exp2(_3311 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3295 * cbSceneParam._m0[78u].z)) * _3285.z) / cbSceneParam._m0[78u].z)) + _3014;
        _3114 = _3294 * _3015;
    }
    else
    {
        _3108 = _3012;
        _3110 = _3013;
        _3112 = _3014;
        _3114 = _3015;
    }
    bool _3321;
    vec4 _3124;
    vec4 _3146;
    float _3148;
    float _3152;
    float _3153;
    float _3154;
    float _3155;
    bool _3165;
    for (;;)
    {
        _3124 = cbMatDynParam._m0[0u];
        float _3126 = roundEven(_3124.y);
        bool _3127 = _3126 == 3.0;
        float _3128 = log2(_3114);
        float _3135 = exp2(_3128 * cbSceneParam._m0[78u].x) * _2984;
        float _3136 = exp2(_3128 * cbSceneParam._m0[78u].y) * _2985;
        float _3137 = exp2(_3128 * cbSceneParam._m0[78u].z) * _2986;
        float _3144 = _1080 + (-0.5);
        _3146 = cbMtdParam._m0[1u];
        _3148 = _3146.y * _3144;
        float _3151 = (_3126 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3152 = _3151 * (_3127 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3108)));
        _3153 = _3151 * (_3127 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3110)));
        _3154 = _3151 * (_3127 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3112)));
        _3155 = _3144 * 0.999000012874603271484375;
        _3165 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3165)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3155) < 0.5)
            {
                _3321 = true;
                break;
            }
        }
        uint _3262 = _1129 + uint(_3124.w);
        if ((cbInstanceData._m0[_3262].w < 1.0) && ((cbInstanceData._m0[_3262].w + _3155) < 0.5))
        {
            _3321 = true;
            break;
        }
        if ((_3148 + 1.0) < _3146.x)
        {
            _3321 = true;
            break;
        }
        _3321 = false;
        break;
    }
    float _3526;
    if (_3321)
    {
        discard_state = true;
        _3526 = 0.0;
    }
    else
    {
        _3526 = cbInstanceData._m0[_2987].w;
    }
    SV_Target.x = _3152;
    SV_Target.y = _3153;
    SV_Target.z = _3154;
    SV_Target.w = _3526;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2987].w;
    discard_exit();
}


