#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1743;
float _4403;
float _4404;
float _4405;
float _4406;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _256 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _257 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _258 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _264 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _265 = _264 * _256;
    float _266 = _264 * _257;
    float _267 = _264 * _258;
    float _271 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = _271 * NORMAL.x;
    float _273 = _271 * NORMAL.y;
    float _274 = _271 * NORMAL.z;
    float _278 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _279 = _278 * TANGENT.x;
    float _280 = _278 * TANGENT.y;
    float _281 = _278 * TANGENT.z;
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _292 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _293 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4415 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4426 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _4437 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    uint _303 = uint(roundEven(NORMAL.w)) * 13u;
    uint _308 = _303 + 1u;
    uint _312 = _303 + 2u;
    float _321 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _322 = _321 * TEXCOORD.z;
    float _323 = _321 * TEXCOORD.w;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _322) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _323) + cbTextureTilingScale._m0[13u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _322) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _323) + cbTextureTilingScale._m0[5u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _454 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _471 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _405.x) * 2.0) - ((((_442 - _454) * cbMtdParam._m0[23u].w) + _454) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4448 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _479 = (_472 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365;
    float _480 = (_472 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366;
    float _481 = (_472 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367;
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _322) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _323) + cbTextureTilingScale._m0[3u].w));
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _520 = _518.x;
    float _530 = dot(vec4(_520, _518.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _544 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _405.y) * 2.0) - ((((_520 - _530) * cbMtdParam._m0[23u].w) + _530) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4459 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _545 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _552 = (_545 * ((_498.x * cbMtdParam._m0[13u].x) - _479)) + _479;
    float _553 = (_545 * ((_498.y * cbMtdParam._m0[13u].y) - _480)) + _480;
    float _554 = (_545 * ((_498.z * cbMtdParam._m0[13u].z) - _481)) + _481;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _322) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _323) + cbTextureTilingScale._m0[24u].w));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _592 = _590.x;
    float _602 = dot(vec4(_592, _590.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _614 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _405.z) * 2.0) - ((((_592 - _602) * cbMtdParam._m0[23u].w) + _602) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4470 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _615 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _622 = (_615 * ((_573.x * cbMtdParam._m0[14u].x) - _552)) + _552;
    float _623 = (_615 * ((_573.y * cbMtdParam._m0[14u].y) - _553)) + _553;
    float _624 = (_615 * ((_573.z * cbMtdParam._m0[14u].z) - _554)) + _554;
    float _628 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _336.x) * _622;
    float _631 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _336.y) * _623;
    float _634 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _336.z) * _624;
    float _641 = ((_622 - _628) * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) + _628;
    float _642 = ((_623 - _631) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) + _631;
    float _643 = ((_624 - _634) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) + _634;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _322) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _323) + cbTextureTilingScale._m0[20u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _322) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _323) + cbTextureTilingScale._m0[4u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _704 = _702.x;
    float _705 = _702.y;
    float _706 = _702.z;
    float _713 = ((_685.x - _704) * _472) + _704;
    float _714 = ((_685.y - _705) * _472) + _705;
    float _715 = ((_685.z - _706) * _472) + _706;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _322) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _323) + cbTextureTilingScale._m0[2u].w));
    float _738 = ((_727.x - _713) * _545) + _713;
    float _739 = ((_727.y - _714) * _545) + _714;
    float _740 = ((_727.z - _715) * _545) + _715;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _322) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _323) + cbTextureTilingScale._m0[23u].w));
    float _765 = ((_752.z - _740) * _615) + _740;
    float _768 = ((((_752.x - _738) * _615) + _738) * 2.0) + (-1.0);
    float _769 = ((((_752.y - _739) * _615) + _739) * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _4481 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _775 = sqrt(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))));
    vec4 _793 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _805 = (_768 + ((((_660.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_793.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _806 = (_769 + ((((_660.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_793.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _809 = fma(_775, _272, fma(_806, _279, _805 * _265));
    float _812 = fma(_775, _273, fma(_806, _280, _805 * _266));
    float _815 = fma(_775, _274, fma(_806, _281, _805 * _267));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    vec4 _846 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _322) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _323) + cbTextureTilingScale._m0[11u].w));
    float _848 = _846.x;
    float _849 = 1.0 - _848;
    float _857 = (cbMtdParam._m0[19u].x + dot(vec4(_819 * _809, _819 * _812, _819 * _815, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_848 - _849) * cbMtdParam._m0[24u].z) + _849) * cbMtdParam._m0[21u].z);
    float _4492 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _858 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
    float _860 = (-0.0) - cbMtdParam._m0[24u].x;
    float _862 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
    float _870 = _858 - ((_858 * TEXCOORD_8.x) * _863);
    float _871 = _858 - ((_858 * TEXCOORD_8.y) * _863);
    float _872 = _858 - ((_858 * TEXCOORD_8.z) * _863);
    float _879 = (_870 * (cbMtdParam._m0[17u].x - _641)) + _641;
    float _880 = (_871 * (cbMtdParam._m0[17u].y - _642)) + _642;
    float _881 = (_872 * (cbMtdParam._m0[17u].z - _643)) + _643;
    float _896 = sqrt(((cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x)) + (cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x));
    float _897 = _896 * TEXCOORD.z;
    float _898 = _896 * TEXCOORD.w;
    vec4 _910 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _897) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _898) + cbTextureTilingScale._m0[19u].w));
    float _912 = _910.x;
    float _913 = 1.0 - _912;
    float _939 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_912 - _913) * cbMtdParam._m0[24u].w) + _913) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4513 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _940 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _948 = ((((cbMtdParam._m0[10u].x - _879) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _940) + _879;
    float _949 = ((((cbMtdParam._m0[10u].y - _880) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _940) + _880;
    float _950 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _881)) * _940) + _881;
    vec4 _976 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _978 = _976.x;
    float _996 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _322) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _323) + cbTextureTilingScale._m0[9u].w)).x - _978) * _472) + _978;
    float _1013 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _322) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _323) + cbTextureTilingScale._m0[21u].w)).x - _996) * _545) + _996;
    float _1030 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _322) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _323) + cbTextureTilingScale._m0[10u].w)).x - _1013) * _615) + _1013;
    float _1036 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1030) * cbMtdParam._m0[19u].z) + _1030;
    float _1038 = _1036 - (_1036 * _870);
    float _1040 = _1038 - (_1038 * _940);
    float _1045 = (((_660.z - _765) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _765;
    float _1049 = ((_793.z - _1045) * cbMtdParam._m0[19u].w) + _1045;
    vec4 _1065 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _322) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _323) + cbTextureTilingScale._m0[15u].w));
    float _1072 = (_1065.x * 2.0) + (-1.0);
    float _1073 = (_1065.y * 2.0) + (-1.0);
    float _1074 = dot(vec2(_1072, _1073), vec2(_1072, _1073));
    float _4524 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1082 = ((_1065.z - _1049) * _870) + _1049;
    float _1085 = ((cbMtdParam._m0[23u].x - _1082) * _940) + _1082;
    vec4 _1108 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _897) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _898) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1114 = (_1108.x * 2.0) + (-1.0);
    float _1115 = (_1108.y * 2.0) + (-1.0);
    float _1116 = dot(vec2(_1114, _1115), vec2(_1114, _1115));
    float _4535 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1131 = ((sqrt(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) - _775) * _872) + _775;
    float _1134 = (((_1072 - _805) * _870) + _805) + (cbMtdParam._m0[21u].x * _805);
    float _1135 = (((_1073 - _806) * _871) + _806) + (cbMtdParam._m0[21u].x * _806);
    float _1146 = (((_1114 - _1134) + (_1134 * cbMtdParam._m0[22u].z)) * _940) + _1134;
    float _1147 = (((_1115 - _1135) + (_1135 * cbMtdParam._m0[22u].z)) * _940) + _1135;
    float _1148 = (_940 * (sqrt(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) - _1131)) + _1131;
    float _1150 = cbMtdParam._m0[22u].x + _793.w;
    float _1153 = fma(_1148, _272, fma(_1147, _279, _1146 * _265));
    float _1156 = fma(_1148, _273, fma(_1147, _280, _1146 * _266));
    float _1159 = fma(_1148, _274, fma(_1147, _281, _1146 * _267));
    float _1163 = inversesqrt(dot(vec3(_1153, _1156, _1159), vec3(_1153, _1156, _1159)));
    float _1164 = _1163 * _1153;
    float _1165 = _1163 * _1156;
    float _1166 = _1163 * _1159;
    float _4546 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1167 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _4557 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _4568 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4579 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4590 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4601 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1172 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _1186 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1226 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1236 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1226);
    float _1237 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1226);
    float _1238 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1226);
    float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
    float _1243 = _1236 * _1242;
    float _1244 = _1237 * _1242;
    float _1245 = _1238 * _1242;
    vec4 _1250 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1252 = _1250.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1424 = sqrt(((_1236 * _1236) + (_1237 * _1237)) + (_1238 * _1238));
        float _1430 = (cbMatDynParam._m0[5u].x * _1424) + cbMatDynParam._m0[5u].y;
        float _4612 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1435 = (cbMatDynParam._m0[5u].z * _1424) + cbMatDynParam._m0[5u].w;
        float _4623 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) - _1431)) + _1431) < ((_1252 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1263 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1264 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1282 = fma(_1166, cbSceneParam._m0[5u].z, fma(_1165, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1164));
    float _1285 = fma(_1166, cbSceneParam._m0[6u].z, fma(_1165, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1164));
    float _1288 = fma(_1166, cbSceneParam._m0[7u].z, fma(_1165, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1164));
    uint _1301 = _303 + 9u;
    uint _1302 = _1301 + uint(cbMatDynParam._m0[0u].w);
    float _1308 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * cbInstanceData._m0[_1302].x;
    float _1309 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * cbInstanceData._m0[_1302].y;
    float _1310 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * cbInstanceData._m0[_1302].z;
    float _4634 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
    float _1311 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _4645 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
    float _1312 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
    float _4656 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
    float _1313 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _1314 = 1.0 - _1172;
    float _1315 = _1311 * _1314;
    float _1316 = _1312 * _1314;
    float _1317 = _1313 * _1314;
    float _1322 = (_1311 + (-0.039999999105930328369140625)) * _1172;
    float _1323 = (_1312 + (-0.039999999105930328369140625)) * _1172;
    float _1324 = (_1313 + (-0.039999999105930328369140625)) * _1172;
    float _1325 = _1322 + 0.039999999105930328369140625;
    float _1327 = _1323 + 0.039999999105930328369140625;
    float _1328 = _1324 + 0.039999999105930328369140625;
    vec4 _1337 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1263, cbSceneParam._m0[86u].y * _1264));
    float _1341 = ((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * TEXCOORD_5.w) * _1337.x;
    float _1342 = dot(vec3(_1164, _1165, _1166), vec3(_1243, _1244, _1245));
    float _1345 = _1342 * 2.0;
    float _1349 = (_1345 * _1164) - _1243;
    float _1350 = (_1345 * _1165) - _1244;
    float _1351 = (_1345 * _1166) - _1245;
    float _1355 = abs(dot(vec3(_1243, _1244, _1245), vec3(_1164, _1165, _1166)));
    float _4667 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
    float _1357 = sqrt(_1167);
    float _1370 = exp2((_1357 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1357 * 3.0));
    float _1376 = (1.0 - _1370) * ((_1357 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1377 = _1370 * _1357;
    float _1405 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1409 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1413 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1742;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1467 = fma(_1413, cbModelParam._m0[26u].z, fma(_1409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1405));
        float _1471 = fma(_1413, cbModelParam._m0[27u].z, fma(_1409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1405));
        float _1475 = fma(_1413, cbModelParam._m0[28u].z, fma(_1409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1405));
        float _1500 = _1405 + _1164;
        float _1501 = _1409 + _1165;
        float _1502 = _1413 + _1166;
        float _1512 = fma(_1502, cbModelParam._m0[26u].z, fma(_1501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1500)) - _1467;
        float _1513 = fma(_1502, cbModelParam._m0[27u].z, fma(_1501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1500)) - _1471;
        float _1514 = fma(_1502, cbModelParam._m0[28u].z, fma(_1501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1500)) - _1475;
        float _1518 = inversesqrt(dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514)));
        float _1531 = ((_1518 * _1512) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1467 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1532 = ((_1518 * _1513) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1471 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1518 * _1514) / cbModelParam._m0[34u].z) + ((((((_1475 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1531, _1532, _1533), 0.0);
        float _1570 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1536.x + (-0.5));
        float _1572 = _1570 * (_1536.y + (-0.5));
        float _1573 = _1570 * (_1536.z + (-0.5));
        float _1580 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1543.x + (-0.5));
        float _1582 = _1580 * (_1543.y + (-0.5));
        float _1583 = _1580 * (_1543.z + (-0.5));
        float _1590 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1550.x + (-0.5));
        float _1592 = _1590 * (_1550.y + (-0.5));
        float _1593 = _1590 * (_1550.z + (-0.5));
        float _1600 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1557.x + (-0.5));
        float _1602 = _1600 * (_1557.y + (-0.5));
        float _1603 = _1600 * (_1557.z + (-0.5));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = _1571 * 0.5;
        float _1608 = _1581 * 0.5;
        float _1609 = _1591 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1624 = (dot(vec3(_1164, _1165, _1166), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4693 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1634 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4704 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4715 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_1636 + 1.0))) + _1641) * _1604;
        float _1651 = _1572 * 0.5;
        float _1652 = _1582 * 0.5;
        float _1653 = _1592 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_1164, _1165, _1166), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4726 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4737 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4748 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_1678 + 1.0))) + _1683) * _1605;
        float _1693 = _1573 * 0.5;
        float _1694 = _1583 * 0.5;
        float _1695 = _1593 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_1164, _1165, _1166), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4759 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4770 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4781 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_1720 + 1.0))) + _1725) * _1606;
        _1742 = _1573;
        _1744 = _1572;
        _1745 = _1571;
        _1746 = _1583;
        _1747 = _1582;
        _1748 = _1581;
        _1749 = _1593;
        _1750 = _1592;
        _1751 = _1591;
        _1752 = _1606;
        _1753 = _1605;
        _1754 = _1604;
        _1755 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1756 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1757 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
    }
    else
    {
        _1742 = _1743;
        _1744 = _1743;
        _1745 = _1743;
        _1746 = _1743;
        _1747 = _1743;
        _1748 = _1743;
        _1749 = _1743;
        _1750 = _1743;
        _1751 = _1743;
        _1752 = _1743;
        _1753 = _1743;
        _1754 = _1743;
        _1755 = 0.0;
        _1756 = 0.0;
        _1757 = 0.0;
    }
    float _2052;
    float _2053;
    float _2054;
    float _2055;
    float _2056;
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1783 = fma(_1413, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405));
        float _1787 = fma(_1413, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405));
        float _1791 = fma(_1413, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405));
        float _1814 = _1405 + _1164;
        float _1815 = _1409 + _1165;
        float _1816 = _1413 + _1166;
        float _1826 = fma(_1816, cbModelParam._m0[30u].z, fma(_1815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1814)) - _1783;
        float _1827 = fma(_1816, cbModelParam._m0[31u].z, fma(_1815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1814)) - _1787;
        float _1828 = fma(_1816, cbModelParam._m0[32u].z, fma(_1815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1814)) - _1791;
        float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
        float _1845 = ((_1832 * _1826) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1783 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1846 = ((_1832 * _1827) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1787 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1847 = ((_1832 * _1828) / cbModelParam._m0[35u].z) + ((((((_1791 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1849 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1845, _1846, _1847), 0.0);
        vec4 _1856 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1845, _1846, _1847), 0.0);
        vec4 _1863 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1845, _1846, _1847), 0.0);
        vec4 _1870 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1845, _1846, _1847), 0.0);
        float _1882 = exp2((_1849.w + (-0.5)) * 20.0) * 2.0;
        float _1883 = _1882 * (_1849.x + (-0.5));
        float _1884 = _1882 * (_1849.y + (-0.5));
        float _1885 = _1882 * (_1849.z + (-0.5));
        float _1892 = exp2((_1856.w + (-0.5)) * 20.0) * 2.0;
        float _1893 = _1892 * (_1856.x + (-0.5));
        float _1894 = _1892 * (_1856.y + (-0.5));
        float _1895 = _1892 * (_1856.z + (-0.5));
        float _1902 = exp2((_1863.w + (-0.5)) * 20.0) * 2.0;
        float _1903 = _1902 * (_1863.x + (-0.5));
        float _1904 = _1902 * (_1863.y + (-0.5));
        float _1905 = _1902 * (_1863.z + (-0.5));
        float _1912 = exp2((_1870.w + (-0.5)) * 20.0) * 2.0;
        float _1913 = _1912 * (_1870.x + (-0.5));
        float _1914 = _1912 * (_1870.y + (-0.5));
        float _1915 = _1912 * (_1870.z + (-0.5));
        float _1916 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1917 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1918 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1919 = _1883 * 0.5;
        float _1920 = _1893 * 0.5;
        float _1921 = _1903 * 0.5;
        float _1922 = dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921));
        float _1927 = (_1922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1922);
        float _1935 = (dot(vec3(_1164, _1165, _1166), vec3(_1927 * _1919, _1927 * _1920, _1927 * _1921)) + 1.0) * 0.5;
        float _4822 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1944 = sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921)) / (_1916 + 9.9999997473787516355514526367188e-06);
        float _4833 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _1946 = _1945 * 2.0;
        float _1950 = (1.0 - _1945) / (_1945 + 1.0);
        float _4844 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _1960 = ((((1.0 - _1951) * (_1946 + 2.0)) * exp2(log2(isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_1946 + 1.0))) + _1951) * _1916;
        float _1961 = _1884 * 0.5;
        float _1962 = _1894 * 0.5;
        float _1963 = _1904 * 0.5;
        float _1964 = dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963));
        float _1969 = (_1964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1964);
        float _1977 = (dot(vec3(_1164, _1165, _1166), vec3(_1969 * _1961, _1969 * _1962, _1969 * _1963)) + 1.0) * 0.5;
        float _4855 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1986 = sqrt(((_1962 * _1962) + (_1961 * _1961)) + (_1963 * _1963)) / (_1917 + 9.9999997473787516355514526367188e-06);
        float _4866 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _1988 = _1987 * 2.0;
        float _1992 = (1.0 - _1987) / (_1987 + 1.0);
        float _4877 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2002 = ((((1.0 - _1993) * (_1988 + 2.0)) * exp2(log2(isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_1988 + 1.0))) + _1993) * _1917;
        float _2003 = _1885 * 0.5;
        float _2004 = _1895 * 0.5;
        float _2005 = _1905 * 0.5;
        float _2006 = dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005));
        float _2011 = (_2006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2006);
        float _2019 = (dot(vec3(_1164, _1165, _1166), vec3(_2011 * _2003, _2011 * _2004, _2011 * _2005)) + 1.0) * 0.5;
        float _4888 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2028 = sqrt(((_2004 * _2004) + (_2003 * _2003)) + (_2005 * _2005)) / (_1918 + 9.9999997473787516355514526367188e-06);
        float _4899 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2030 = _2029 * 2.0;
        float _2034 = (1.0 - _2029) / (_2029 + 1.0);
        float _4910 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
        float _2044 = ((((1.0 - _2035) * (_2030 + 2.0)) * exp2(log2(isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2030 + 1.0))) + _2035) * _1918;
        _2052 = _1885;
        _2053 = _1884;
        _2054 = _1883;
        _2055 = _1895;
        _2056 = _1894;
        _2057 = _1893;
        _2058 = _1905;
        _2059 = _1904;
        _2060 = _1903;
        _2061 = _1918;
        _2062 = _1917;
        _2063 = _1916;
        _2064 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)));
        _2065 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)));
        _2066 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)));
    }
    else
    {
        _2052 = _1743;
        _2053 = _1743;
        _2054 = _1743;
        _2055 = _1743;
        _2056 = _1743;
        _2057 = _1743;
        _2058 = _1743;
        _2059 = _1743;
        _2060 = _1743;
        _2061 = _1743;
        _2062 = _1743;
        _2063 = _1743;
        _2064 = 0.0;
        _2065 = 0.0;
        _2066 = 0.0;
    }
    float _2076 = (cbModelParam._m0[1u].x * (_2064 - _1755)) + _1755;
    float _2077 = (cbModelParam._m0[1u].x * (_2065 - _1756)) + _1756;
    float _2078 = (cbModelParam._m0[1u].x * (_2066 - _1757)) + _1757;
    float _2099 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2077, cbSceneParam._m0[89u].y, _2076 * cbSceneParam._m0[89u].x));
    float _2102 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2077, cbSceneParam._m0[90u].y, _2076 * cbSceneParam._m0[90u].x));
    float _2105 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2077, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2076));
    float _2120 = _1349 * 0.5;
    float _2121 = _1350 * 0.5;
    float _2122 = _1351 * 0.5;
    float _2123 = dot(vec4(_2120, _2121, _2122, 1.0), vec4(_2054, _2057, _2060, _2063));
    float _2126 = dot(vec4(_2120, _2121, _2122, 1.0), vec4(_2053, _2056, _2059, _2062));
    float _2129 = dot(vec4(_2120, _2121, _2122, 1.0), vec4(_2052, _2055, _2058, _2061));
    float _2163;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2136 = dot(vec4(_2120, _2121, _2122, 1.0), vec4(_1742, _1746, _1749, _1752));
        float _2140 = dot(vec4(_2120, _2121, _2122, 1.0), vec4(_1744, _1747, _1750, _1753));
        float _2144 = dot(vec4(_2120, _2121, _2122, 1.0), vec4(_1745, _1748, _1751, _1754));
        float _2151 = dot(vec4(cbModelParam._m0[39u]), vec4(_2120, _2121, _2122, 1.0));
        _2163 = dot(vec3(isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0)), isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0)), isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2151) ? 0.0 : (isnan(0.0) ? _2151 : max(0.0, _2151))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2163 = 1.0;
    }
    float _2174;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2165 = dot(vec4(cbModelParam._m0[40u]), vec4(_2120, _2121, _2122, 1.0));
        _2174 = dot(vec3(isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0)), isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0)), isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2165) ? 0.0 : (isnan(0.0) ? _2165 : max(0.0, _2165))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2174 = 1.0;
    }
    float _2178 = (_2174 * cbModelParam._m0[1u].x) + (_2163 * (1.0 - cbModelParam._m0[1u].x));
    float _2188 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1167);
    float _2189 = isnan(_2188) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2188 : min(cbModelParam._m0[25u].z, _2188));
    float _2269;
    float _2271;
    float _2273;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2236 = fma(_1413, cbModelParam._m0[13u].z, fma(_1409, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1405)) + cbModelParam._m0[13u].w;
        float _2240 = fma(_1413, cbModelParam._m0[14u].z, fma(_1409, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1405)) + cbModelParam._m0[14u].w;
        float _2244 = fma(_1413, cbModelParam._m0[15u].z, fma(_1409, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1405)) + cbModelParam._m0[15u].w;
        float _2247 = fma(_1351, cbModelParam._m0[13u].z, fma(_1350, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1349));
        float _2250 = fma(_1351, cbModelParam._m0[14u].z, fma(_1350, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1349));
        float _2253 = fma(_1351, cbModelParam._m0[15u].z, fma(_1350, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1349));
        float _2281;
        if (_2247 > 0.0)
        {
            _2281 = abs((1.0 - _2236) / _2247);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2247 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2236 + 1.0) / _2247);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2281 = frontier_phi_17_15_ladder;
        }
        float _2453;
        if (_2250 > 0.0)
        {
            _2453 = abs((1.0 - _2240) / _2250);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2240 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2453 = frontier_phi_26_22_ladder;
        }
        float _2748;
        if (_2253 > 0.0)
        {
            _2748 = abs((1.0 - _2244) / _2253);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2244 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2748 = frontier_phi_38_33_ladder;
        }
        float _2750 = isnan(_2453) ? _2281 : (isnan(_2281) ? _2453 : min(_2281, _2453));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _2247) + _2236;
        float _2756 = (_2751 * _2250) + _2240;
        float _2757 = (_2751 * _2253) + _2244;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2758;
        float _2762 = _2758 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 > _2762) || ((_2756 < _2760) || ((_2755 < _2760) || (_2755 > _2762))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2757, cbModelParam._m0[9u].z, fma(_2756, cbModelParam._m0[9u].y, _2755 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2757, cbModelParam._m0[10u].z, fma(_2756, cbModelParam._m0[10u].y, _2755 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2757, cbModelParam._m0[11u].z, fma(_2756, cbModelParam._m0[11u].y, _2755 * cbModelParam._m0[11u].x))), _2189);
            frontier_phi_16_38_ladder = _2902.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2902.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2902.x * cbModelParam._m0[1u].y;
        }
        _2269 = frontier_phi_16_38_ladder_2;
        _2271 = frontier_phi_16_38_ladder_1;
        _2273 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1349, _1350, _1351), _2189);
        _2269 = _2257.x * cbModelParam._m0[1u].y;
        _2271 = _2257.y * cbModelParam._m0[1u].y;
        _2273 = _2257.z * cbModelParam._m0[1u].y;
    }
    float _2277 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1167);
    float _2278 = isnan(_2277) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2277 : min(cbModelParam._m0[25u].w, _2277));
    float _2368;
    float _2370;
    float _2372;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2332 = fma(_1413, cbModelParam._m0[21u].z, fma(_1409, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1405)) + cbModelParam._m0[21u].w;
        float _2336 = fma(_1413, cbModelParam._m0[22u].z, fma(_1409, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1405)) + cbModelParam._m0[22u].w;
        float _2340 = fma(_1413, cbModelParam._m0[23u].z, fma(_1409, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1405)) + cbModelParam._m0[23u].w;
        float _2343 = fma(_1351, cbModelParam._m0[21u].z, fma(_1350, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1349));
        float _2346 = fma(_1351, cbModelParam._m0[22u].z, fma(_1350, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1349));
        float _2349 = fma(_1351, cbModelParam._m0[23u].z, fma(_1350, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1349));
        float _2458;
        if (_2343 > 0.0)
        {
            _2458 = abs((1.0 - _2332) / _2343);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2343 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2332 + 1.0) / _2343);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2458 = frontier_phi_28_24_ladder;
        }
        float _2775;
        if (_2346 > 0.0)
        {
            _2775 = abs((1.0 - _2336) / _2346);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2346 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2336 + 1.0) / _2346);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2775 = frontier_phi_40_35_ladder;
        }
        float _3113;
        if (_2349 > 0.0)
        {
            _3113 = abs((1.0 - _2340) / _2349);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2349 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2340 + 1.0) / _2349);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3113 = frontier_phi_50_47_ladder;
        }
        float _3115 = isnan(_2775) ? _2458 : (isnan(_2458) ? _2775 : min(_2458, _2775));
        float _3116 = isnan(_3113) ? _3115 : (isnan(_3115) ? _3113 : min(_3115, _3113));
        float _3120 = (_3116 * _2343) + _2332;
        float _3121 = (_3116 * _2346) + _2336;
        float _3122 = (_3116 * _2349) + _2340;
        float _3123 = _3116 * 9.9999997473787516355514526367188e-05;
        float _3124 = (-1.0) - _3123;
        float _3126 = _3123 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3122 > _3126) || ((_3122 < _3124) || ((_3121 > _3126) || ((_3121 < _3124) || ((_3120 < _3124) || (_3120 > _3126))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3244 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3122, cbModelParam._m0[17u].z, fma(_3121, cbModelParam._m0[17u].y, _3120 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3122, cbModelParam._m0[18u].z, fma(_3121, cbModelParam._m0[18u].y, _3120 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3122, cbModelParam._m0[19u].z, fma(_3121, cbModelParam._m0[19u].y, _3120 * cbModelParam._m0[19u].x))), _2278);
            frontier_phi_25_50_ladder = _3244.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3244.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3244.x * cbModelParam._m0[1u].z;
        }
        _2368 = frontier_phi_25_50_ladder_2;
        _2370 = frontier_phi_25_50_ladder_1;
        _2372 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1349, _1350, _1351), _2278);
        _2368 = _2352.x * cbModelParam._m0[1u].z;
        _2370 = _2352.y * cbModelParam._m0[1u].z;
        _2372 = _2352.z * cbModelParam._m0[1u].z;
    }
    float _2385 = (((_1376 * _1325) + _1377) * _1341) * ((cbModelParam._m0[1u].w * (_2368 - _2269)) + _2269);
    float _2387 = (((_1376 * _1327) + _1377) * _1341) * ((cbModelParam._m0[1u].w * (_2370 - _2271)) + _2271);
    float _2389 = (((_1376 * _1328) + _1377) * _1341) * ((cbModelParam._m0[1u].w * (_2372 - _2273)) + _2273);
    float _2392 = fma(_2389, cbSceneParam._m0[89u].z, fma(_2387, cbSceneParam._m0[89u].y, _2385 * cbSceneParam._m0[89u].x));
    float _2395 = fma(_2389, cbSceneParam._m0[90u].z, fma(_2387, cbSceneParam._m0[90u].y, _2385 * cbSceneParam._m0[90u].x));
    float _2398 = fma(_2389, cbSceneParam._m0[91u].z, fma(_2387, cbSceneParam._m0[91u].y, _2385 * cbSceneParam._m0[91u].x));
    float _2432 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2436 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2440 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2445 = _2432 / _2444;
    float _2446 = _2436 / _2444;
    float _2447 = _2440 / _2444;
    float _2594;
    float _2595;
    float _2596;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2474 = ((uint(_2447 > cbSceneParam._m0[59u].y) + uint(_2447 > cbSceneParam._m0[59u].x)) + uint(_2447 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2475 = _2474 + 43u;
        uint _2483 = _2474 + 44u;
        uint _2491 = _2474 + 45u;
        uint _2499 = _2474 + 46u;
        float _2510 = fma(_2444, cbSceneParam._m0[_2475].w, fma(_2440, cbSceneParam._m0[_2475].z, fma(_2436, cbSceneParam._m0[_2475].y, _2432 * cbSceneParam._m0[_2475].x)));
        float _2514 = fma(_2444, cbSceneParam._m0[_2483].w, fma(_2440, cbSceneParam._m0[_2483].z, fma(_2436, cbSceneParam._m0[_2483].y, _2432 * cbSceneParam._m0[_2483].x)));
        float _2522 = fma(_2444, cbSceneParam._m0[_2499].w, fma(_2440, cbSceneParam._m0[_2499].z, fma(_2436, cbSceneParam._m0[_2499].y, _2432 * cbSceneParam._m0[_2499].x)));
        float _2527 = cbSceneParam._m0[33u].z * _2522;
        float _2529 = cbSceneParam._m0[33u].w * _2522;
        float _2532 = fma(_2444, cbSceneParam._m0[_2491].w, fma(_2440, cbSceneParam._m0[_2491].z, fma(_2436, cbSceneParam._m0[_2491].y, _2432 * cbSceneParam._m0[_2491].x))) / _2522;
        float _2580 = (cbSceneParam._m0[33u].x - sqrt(((_2446 * _2446) + (_2445 * _2445)) + (_2447 * _2447))) * cbSceneParam._m0[33u].y;
        float _5036 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2587 = (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2527 + _2510) / _2522, (_2529 + _2514) / _2522), _2532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2529 + _2510) / _2522, (_2514 - _2527) / _2522), _2532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2510 - _2527) / _2522, (_2514 - _2529) / _2522), _2532), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2510 - _2529) / _2522, (_2527 + _2514) / _2522), _2532), 0.0)).x), vec4(0.25)));
        _2594 = 1.0 - (_2587 * cbSceneParam._m0[34u].x);
        _2595 = 1.0 - (_2587 * cbSceneParam._m0[34u].y);
        _2596 = 1.0 - (_2587 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2594 = 1.0;
        _2595 = 1.0;
        _2596 = 1.0;
    }
    float _2660;
    float _2662;
    float _2664;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2648 = fma(_2444, cbSceneParam._m0[63u].w, fma(_2440, cbSceneParam._m0[63u].z, fma(_2436, cbSceneParam._m0[63u].y, _2432 * cbSceneParam._m0[63u].x)));
        float _2649 = fma(_2444, cbSceneParam._m0[60u].w, fma(_2440, cbSceneParam._m0[60u].z, fma(_2436, cbSceneParam._m0[60u].y, _2432 * cbSceneParam._m0[60u].x))) / _2648;
        float _2650 = fma(_2444, cbSceneParam._m0[61u].w, fma(_2440, cbSceneParam._m0[61u].z, fma(_2436, cbSceneParam._m0[61u].y, _2432 * cbSceneParam._m0[61u].x))) / _2648;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2649 >= cbSceneParam._m0[64u].x) && (_2650 >= cbSceneParam._m0[64u].y)) && (_2649 <= cbSceneParam._m0[64u].z)) && (_2650 <= cbSceneParam._m0[64u].w))
        {
            float _2788 = fma(_2444, cbSceneParam._m0[62u].w, fma(_2440, cbSceneParam._m0[62u].z, fma(_2436, cbSceneParam._m0[62u].y, _2432 * cbSceneParam._m0[62u].x))) / _2648;
            float _2792 = isnan(cbSceneParam._m0[41u].w) ? _2788 : (isnan(_2788) ? cbSceneParam._m0[41u].w : max(_2788, cbSceneParam._m0[41u].w));
            float _2835 = (cbSceneParam._m0[33u].x - sqrt(((_2446 * _2446) + (_2445 * _2445)) + (_2447 * _2447))) * cbSceneParam._m0[33u].y;
            float _5052 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
            float _2842 = (isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2649, cbSceneParam._m0[33u].w + _2650), _2792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2649, _2650 - cbSceneParam._m0[33u].z), _2792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2649 - cbSceneParam._m0[33u].z, _2650 - cbSceneParam._m0[33u].w), _2792), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2649 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2650), _2792), 0.0)).x), vec4(0.25)));
            float _2846 = 1.0 - (_2842 * cbSceneParam._m0[34u].x);
            float _2847 = 1.0 - (_2842 * cbSceneParam._m0[34u].y);
            float _2848 = 1.0 - (_2842 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2848) ? _2596 : (isnan(_2596) ? _2848 : min(_2596, _2848));
            frontier_phi_37_36_ladder_1 = isnan(_2847) ? _2595 : (isnan(_2595) ? _2847 : min(_2595, _2847));
            frontier_phi_37_36_ladder_2 = isnan(_2846) ? _2594 : (isnan(_2594) ? _2846 : min(_2594, _2846));
        }
        else
        {
            frontier_phi_37_36_ladder = _2596;
            frontier_phi_37_36_ladder_1 = _2595;
            frontier_phi_37_36_ladder_2 = _2594;
        }
        _2660 = frontier_phi_37_36_ladder_2;
        _2662 = frontier_phi_37_36_ladder_1;
        _2664 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2660 = _2594;
        _2662 = _2595;
        _2664 = _2596;
    }
    uvec4 _2669 = floatBitsToUint(cbInstanceData._m0[_303 + 5u]);
    uint _2671 = _2669.x * 14u;
    uint _2672 = _2671 + 13u;
    float _2679 = _1341 + (-1.0);
    float _2684 = (cbLight._m0[_2672].x * _2679) + 1.0;
    float _2685 = (cbLight._m0[_2672].y * _2679) + 1.0;
    float _2686 = (cbLight._m0[_2672].z * _2679) + 1.0;
    float _2687 = (cbLight._m0[_2672].w * _2679) + 1.0;
    uint _2688 = _2671 + 5u;
    float _2694 = isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0));
    uint _2698 = _2671 + 4u;
    float _2707 = isnan(1.0) ? _2684 : (isnan(_2684) ? 1.0 : min(_2684, 1.0));
    uint _2711 = _2671 | 1u;
    float _2722 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_1164, _1165, _1166));
    float _2725 = dot(vec3(cbLight._m0[_2711].xyz), vec3(_1164, _1165, _1166));
    float _5088 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _5099 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2730 = (isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0))) * 0.3183098733425140380859375;
    float _2732 = (isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0))) * 0.3183098733425140380859375;
    float _2739 = ((cbLight._m0[_2688].x * _2694) * _2732) + (((cbLight._m0[_2698].x * _2660) * _2707) * _2730);
    float _2740 = ((_2694 * cbLight._m0[_2688].y) * _2732) + (((cbLight._m0[_2698].y * _2662) * _2707) * _2730);
    float _2741 = ((_2694 * cbLight._m0[_2688].z) * _2732) + (((cbLight._m0[_2698].z * _2664) * _2707) * _2730);
    uvec4 _2745 = floatBitsToUint(cbLight._m0[_2671 + 12u]);
    bool _2747 = _2745.x == 0u;
    float _2849;
    float _2851;
    float _2853;
    if (_2747)
    {
        _2849 = _2739;
        _2851 = _2740;
        _2853 = _2741;
    }
    else
    {
        uint _2857 = _2671 + 6u;
        float _2873 = (dot(vec3(cbLight._m0[_2671 + 2u].xyz), vec3(_1164, _1165, _1166)) * 0.5) + 0.5;
        float _2874 = _2873 * _2873;
        float _5110 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2875 = isnan(1.0) ? _5110 : (isnan(_5110) ? 1.0 : min(_5110, 1.0));
        float _2876 = isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0));
        _2849 = (((cbLight._m0[_2857].x * 0.3183098733425140380859375) * _2875) * _2876) + _2739;
        _2851 = (((cbLight._m0[_2857].y * 0.3183098733425140380859375) * _2875) * _2876) + _2740;
        _2853 = (((cbLight._m0[_2857].z * 0.3183098733425140380859375) * _2875) * _2876) + _2741;
    }
    bool _2856 = _2745.y == 0u;
    float _2911;
    float _2913;
    float _2915;
    if (_2856)
    {
        _2911 = _2849;
        _2913 = _2851;
        _2915 = _2853;
    }
    else
    {
        uint _3084 = _2671 + 7u;
        float _3100 = (dot(vec3(cbLight._m0[_2671 + 3u].xyz), vec3(_1164, _1165, _1166)) * 0.5) + 0.5;
        float _3101 = _3100 * _3100;
        float _5126 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3102 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
        float _3103 = isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0));
        _2911 = (((cbLight._m0[_3084].x * 0.3183098733425140380859375) * _3102) * _3103) + _2849;
        _2913 = (((cbLight._m0[_3084].y * 0.3183098733425140380859375) * _3102) * _3103) + _2851;
        _2915 = (((cbLight._m0[_3084].z * 0.3183098733425140380859375) * _3102) * _3103) + _2853;
    }
    uint _2918 = _2671 + 8u;
    float _2931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _1167) * 0.949999988079071044921875);
    float _2932 = _2931 * _2931;
    float _2933 = cbLight._m0[_2671].x + _1243;
    float _2934 = cbLight._m0[_2671].y + _1244;
    float _2935 = cbLight._m0[_2671].z + _1245;
    float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
    float _2940 = _2939 * _2933;
    float _2941 = _2939 * _2934;
    float _2942 = _2939 * _2935;
    float _2943 = dot(vec3(_1164, _1165, _1166), vec3(cbLight._m0[_2671].xyz));
    float _5142 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
    float _2946 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
    float _5153 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
    float _2947 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
    float _2948 = dot(vec3(_1164, _1165, _1166), vec3(_2940, _2941, _2942));
    float _5164 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
    float _2951 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
    float _2952 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2940, _2941, _2942));
    float _5175 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
    float _2956 = _2932 * _2932;
    float _2960 = ((_2951 * _2951) * (_2956 + (-1.0))) + 1.0;
    float _2968 = exp2(log2(1.0 - (isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0)))) * 5.0);
    float _2969 = 0.959999978542327880859375 - _1322;
    float _2971 = 0.959999978542327880859375 - _1323;
    float _2972 = 0.959999978542327880859375 - _1324;
    float _2979 = 1.0 - _2932;
    float _2990 = (0.5 / (((_2947 * ((_2946 * _2979) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _2979) + _2932) * _2946))) * _2946;
    float _5186 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
    float _2992 = (isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0))) * (_2956 / ((_2960 * _2960) * 3.141590118408203125));
    uint _3006 = _2671 + 9u;
    float _3017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2711].w)) * _1167) * 0.949999988079071044921875);
    float _3018 = _3017 * _3017;
    float _3019 = cbLight._m0[_2711].x + _1243;
    float _3020 = cbLight._m0[_2711].y + _1244;
    float _3021 = cbLight._m0[_2711].z + _1245;
    float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
    float _3026 = _3025 * _3019;
    float _3027 = _3025 * _3020;
    float _3028 = _3025 * _3021;
    float _3029 = dot(vec3(_1164, _1165, _1166), vec3(cbLight._m0[_2711].xyz));
    float _5197 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
    float _3032 = isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0));
    float _3033 = dot(vec3(_1164, _1165, _1166), vec3(_3026, _3027, _3028));
    float _5208 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
    float _3036 = isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0));
    float _3037 = dot(vec3(cbLight._m0[_2711].xyz), vec3(_3026, _3027, _3028));
    float _5219 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
    float _3041 = _3018 * _3018;
    float _3045 = ((_3036 * _3036) * (_3041 + (-1.0))) + 1.0;
    float _3052 = exp2(log2(1.0 - (isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0)))) * 5.0);
    float _3059 = 1.0 - _3018;
    float _3069 = (0.5 / (((_2947 * ((_3032 * _3059) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _3059) + _3018) * _3032))) * _3032;
    float _5230 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
    float _3071 = (isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0))) * (_3041 / ((_3045 * _3045) * 3.141590118408203125));
    float _3081 = (((((_3052 * _2969) + _1325) * cbLight._m0[_3006].x) * _3071) * _2694) + ((((cbLight._m0[_2918].x * _2660) * ((_2968 * _2969) + _1325)) * _2992) * _2707);
    float _3082 = (((((_3052 * _2971) + _1327) * cbLight._m0[_3006].y) * _3071) * _2694) + ((((cbLight._m0[_2918].y * _2662) * ((_2968 * _2971) + _1327)) * _2992) * _2707);
    float _3083 = (((((_3052 * _2972) + _1328) * cbLight._m0[_3006].z) * _3071) * _2694) + ((((cbLight._m0[_2918].z * _2664) * ((_2968 * _2972) + _1328)) * _2992) * _2707);
    float _3139;
    float _3141;
    float _3143;
    if (_2747)
    {
        _3139 = _3081;
        _3141 = _3082;
        _3143 = _3083;
    }
    else
    {
        uint _3145 = _2671 + 2u;
        uint _3149 = _2671 + 10u;
        float _3163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3145].w)) * _1167) * 0.949999988079071044921875);
        float _3164 = _3163 * _3163;
        float _3165 = cbLight._m0[_3145].x + _1243;
        float _3166 = cbLight._m0[_3145].y + _1244;
        float _3167 = cbLight._m0[_3145].z + _1245;
        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
        float _3172 = _3171 * _3165;
        float _3173 = _3171 * _3166;
        float _3174 = _3171 * _3167;
        float _3175 = dot(vec3(_1164, _1165, _1166), vec3(cbLight._m0[_3145].xyz));
        float _5241 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
        float _3178 = isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0));
        float _3179 = dot(vec3(_1164, _1165, _1166), vec3(_3172, _3173, _3174));
        float _5252 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
        float _3182 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
        float _3183 = dot(vec3(cbLight._m0[_3145].xyz), vec3(_3172, _3173, _3174));
        float _5263 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
        float _3187 = _3164 * _3164;
        float _3191 = ((_3182 * _3182) * (_3187 + (-1.0))) + 1.0;
        float _3198 = exp2(log2(1.0 - (isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0)))) * 5.0);
        float _3205 = 1.0 - _3164;
        float _3215 = (0.5 / (((_2947 * ((_3178 * _3205) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _3205) + _3164) * _3178))) * _3178;
        float _5274 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
        float _3217 = (isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0))) * (_3187 / ((_3191 * _3191) * 3.141590118408203125));
        float _3218 = isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0));
        _3139 = (((((_3198 * _2969) + _1325) * cbLight._m0[_3149].x) * _3217) * _3218) + _3081;
        _3141 = (((((_3198 * _2971) + _1327) * cbLight._m0[_3149].y) * _3217) * _3218) + _3082;
        _3143 = (((((_3198 * _2972) + _1328) * cbLight._m0[_3149].z) * _3217) * _3218) + _3083;
    }
    float _3249;
    float _3251;
    float _3253;
    if (_2856)
    {
        _3249 = _3139;
        _3251 = _3141;
        _3253 = _3143;
    }
    else
    {
        uint _3260 = _2671 + 3u;
        uint _3264 = _2671 + 11u;
        float _3278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3260].w)) * _1167) * 0.949999988079071044921875);
        float _3279 = _3278 * _3278;
        float _3280 = cbLight._m0[_3260].x + _1243;
        float _3281 = cbLight._m0[_3260].y + _1244;
        float _3282 = cbLight._m0[_3260].z + _1245;
        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
        float _3287 = _3286 * _3280;
        float _3288 = _3286 * _3281;
        float _3289 = _3286 * _3282;
        float _3290 = dot(vec3(_1164, _1165, _1166), vec3(cbLight._m0[_3260].xyz));
        float _5290 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
        float _3293 = isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0));
        float _3294 = dot(vec3(_1164, _1165, _1166), vec3(_3287, _3288, _3289));
        float _5301 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
        float _3297 = isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0));
        float _3298 = dot(vec3(cbLight._m0[_3260].xyz), vec3(_3287, _3288, _3289));
        float _5312 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
        float _3302 = _3279 * _3279;
        float _3306 = ((_3297 * _3297) * (_3302 + (-1.0))) + 1.0;
        float _3313 = exp2(log2(1.0 - (isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0)))) * 5.0);
        float _3320 = 1.0 - _3279;
        float _3330 = (0.5 / (((_2947 * ((_3293 * _3320) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _3320) + _3279) * _3293))) * _3293;
        float _5323 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
        float _3332 = (isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0))) * (_3302 / ((_3306 * _3306) * 3.141590118408203125));
        float _3333 = isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0));
        _3249 = (((((_3313 * _2969) + _1325) * cbLight._m0[_3264].x) * _3332) * _3333) + _3139;
        _3251 = (((((_3313 * _2971) + _1327) * cbLight._m0[_3264].y) * _3332) * _3333) + _3141;
        _3253 = (((((_3313 * _2972) + _1328) * cbLight._m0[_3264].z) * _3332) * _3333) + _3143;
    }
    float _3399;
    float _3401;
    float _3403;
    float _3405;
    float _3407;
    float _3409;
    if (_2669.y == 0u)
    {
        uvec4 _3354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3355 = _3354.x;
        uint _3366 = uint((float(_3354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1264) / _3355))) + floor(float(uint(cbSceneParam._m0[85u].x * _1263) / _3355)));
        float _3376 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3377 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
        uint _3380 = uint(isnan(14.0) ? _3377 : (isnan(_3377) ? 14.0 : min(_3377, 14.0)));
        uvec4 _3385 = texelFetch(g_lightClusterGridBuffer, int(((_3380 << 2u) + (_3366 << 6u)) >> 2u));
        uint _3386 = _3385.x;
        uint _3387 = _3354.z;
        float _3466;
        float _3468;
        float _3470;
        float _3472;
        float _3474;
        float _3476;
        if (((((1u << ((_3387 >> 4u) & 15u)) + 4294967295u) & _3386) == 0u) || ((_3387 & 240u) == 0u))
        {
            _3466 = 0.0;
            _3468 = 0.0;
            _3470 = 0.0;
            _3472 = 0.0;
            _3474 = 0.0;
            _3476 = 0.0;
        }
        else
        {
            float _3467;
            float _3469;
            float _3471;
            float _3473;
            float _3475;
            float _3477;
            float _3618 = 0.0;
            float _3619 = 0.0;
            float _3620 = 0.0;
            float _3621 = 0.0;
            float _3622 = 0.0;
            float _3623 = 0.0;
            uint _3624 = 0u;
            uint _3633;
            bool _3634;
            for (;;)
            {
                _3633 = texelFetch(g_lightClassification, int((((_3380 << 5u) + (_3366 << 9u)) + (_3624 << 2u)) >> 2u)).x;
                _3634 = _3633 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3634)
                {
                    frontier_phi_71_pred = _3623;
                    frontier_phi_71_pred_1 = _3622;
                    frontier_phi_71_pred_2 = _3621;
                    frontier_phi_71_pred_3 = _3620;
                    frontier_phi_71_pred_4 = _3619;
                    frontier_phi_71_pred_5 = _3618;
                }
                else
                {
                    float _3763;
                    float _3764;
                    float _3765;
                    float _3766;
                    float _3767;
                    float _3768;
                    uint _3769;
                    _3763 = _3618;
                    _3764 = _3619;
                    _3765 = _3620;
                    _3766 = _3621;
                    _3767 = _3622;
                    _3768 = _3623;
                    _3769 = _3633;
                    float _3690;
                    float _3691;
                    float _3692;
                    float _3693;
                    float _3694;
                    float _3695;
                    for (;;)
                    {
                        uint _3773 = uint(findLSB(_3769)) + (_3624 << 5u);
                        uint _3770 = (_3769 + 4294967295u) & _3769;
                        uint _3775 = _3773 * 48u;
                        vec4 _3789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3775)).x, texelFetch(g_PointLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3775 + 3u)).x));
                        uint _3795 = (_3773 * 48u) + 4u;
                        vec4 _3808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3795)).x, texelFetch(g_PointLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3795 + 3u)).x));
                        uint _3814 = (_3773 * 48u) + 8u;
                        vec3 _3825 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3814)).x, texelFetch(g_PointLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3814 + 2u)).x));
                        float _3829 = _3789.x - _2445;
                        float _3830 = _3789.y - _2446;
                        float _3831 = _3789.z - _2447;
                        float _3832 = dot(vec3(_3829, _3830, _3831), vec3(_3829, _3830, _3831));
                        float _3835 = inversesqrt(_3832);
                        float _3836 = _3835 * _3829;
                        float _3837 = _3835 * _3830;
                        float _3838 = _3835 * _3831;
                        float _3839 = dot(vec3(_1282, _1285, _1288), vec3(_3836, _3837, _3838));
                        float _3844 = 1.0 - (_3832 * _3789.w);
                        float _5349 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                        float _3845 = isnan(1.0) ? _5349 : (isnan(_5349) ? 1.0 : min(_5349, 1.0));
                        float _3846 = sqrt(_3832) * _3808.w;
                        float _3849 = 1.39999997615814208984375 / (_3846 + 1.39999997615814208984375);
                        float _3850 = _3849 * _3849;
                        float _3853 = ((1.0 - _3850) * _3839) + _3850;
                        float _3856 = _3846 * _3846;
                        float _3860 = ((isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0))) * _3845) / ((_3856 * 0.699999988079071044921875) + 1.0);
                        float _3864 = (-0.0) - _2445;
                        float _3865 = (-0.0) - _2446;
                        float _3866 = (-0.0) - _2447;
                        float _3870 = inversesqrt(dot(vec3(_3864, _3865, _3866), vec3(_3864, _3865, _3866)));
                        float _3871 = _3870 * _3864;
                        float _3872 = _3870 * _3865;
                        float _3873 = _3870 * _3866;
                        float _3880 = exp2(log2(1.0 / ((_3856 * 3.5) + 5.0)) * 0.25);
                        float _3881 = 1.0 - _1357;
                        float _3888 = sqrt(1.0 - ((1.0 - (_3881 * _3881)) * (1.0 - (_3880 * _3880))));
                        float _3889 = _3888 * _3888;
                        float _3890 = _3889 * _3889;
                        float _3891 = _3871 + _3836;
                        float _3892 = _3872 + _3837;
                        float _3893 = _3873 + _3838;
                        float _3897 = inversesqrt(dot(vec3(_3891, _3892, _3893), vec3(_3891, _3892, _3893)));
                        float _3901 = dot(vec3(_1282, _1285, _1288), vec3(_3871, _3872, _3873));
                        float _5365 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                        float _3904 = isnan(1.0) ? _5365 : (isnan(_5365) ? 1.0 : min(_5365, 1.0));
                        float _3905 = dot(vec3(_1282, _1285, _1288), vec3(_3897 * _3891, _3897 * _3892, _3897 * _3893));
                        float _5376 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                        float _3908 = isnan(1.0) ? _5376 : (isnan(_5376) ? 1.0 : min(_5376, 1.0));
                        float _3912 = ((_3908 * _3908) * (_3890 + (-1.0))) + 1.0;
                        float _3913 = _3849 * _3889;
                        float _3914 = _3913 * _3913;
                        float _3917 = ((1.0 - _3914) * _3839) + _3914;
                        float _5387 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                        float _3918 = isnan(1.0) ? _5387 : (isnan(_5387) ? 1.0 : min(_5387, 1.0));
                        float _3919 = 1.0 - _3889;
                        float _3929 = (0.5 / (((_3918 * ((_3904 * _3919) + _3889)) + 9.9999999392252902907785028219223e-09) + (((_3918 * _3919) + _3889) * _3904))) * _3918;
                        float _5398 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                        float _3940 = (((_3890 * 3.1415927410125732421875) * (isnan(1.0) ? _5398 : (isnan(_5398) ? 1.0 : min(_5398, 1.0)))) / ((_3912 * _3912) * ((_3856 * 2.1991131305694580078125) + 3.141590118408203125))) * _3845;
                        _3693 = (_3860 * _3808.x) + _3766;
                        _3694 = (_3860 * _3808.y) + _3767;
                        _3695 = (_3860 * _3808.z) + _3768;
                        _3690 = (_3940 * _3825.x) + _3763;
                        _3691 = (_3940 * _3825.y) + _3764;
                        _3692 = (_3940 * _3825.z) + _3765;
                        if (_3770 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3763 = _3690;
                            _3764 = _3691;
                            _3765 = _3692;
                            _3766 = _3693;
                            _3767 = _3694;
                            _3768 = _3695;
                            _3769 = _3770;
                        }
                    }
                    frontier_phi_71_pred = _3695;
                    frontier_phi_71_pred_1 = _3694;
                    frontier_phi_71_pred_2 = _3693;
                    frontier_phi_71_pred_3 = _3692;
                    frontier_phi_71_pred_4 = _3691;
                    frontier_phi_71_pred_5 = _3690;
                }
                _3477 = frontier_phi_71_pred;
                _3475 = frontier_phi_71_pred_1;
                _3473 = frontier_phi_71_pred_2;
                _3471 = frontier_phi_71_pred_3;
                _3469 = frontier_phi_71_pred_4;
                _3467 = frontier_phi_71_pred_5;
                uint _3625 = _3624 + 1u;
                if (_3625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3618 = _3467;
                    _3619 = _3469;
                    _3620 = _3471;
                    _3621 = _3473;
                    _3622 = _3475;
                    _3623 = _3477;
                    _3624 = _3625;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3466 = _3467;
            _3468 = _3469;
            _3470 = _3471;
            _3472 = _3473;
            _3474 = _3475;
            _3476 = _3477;
        }
        uvec4 _3480 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3481 = _3480.z;
        uint _3483 = (_3481 >> 8u) & 15u;
        float _3586;
        float _3588;
        float _3590;
        float _3592;
        float _3594;
        float _3596;
        if (((4294967295u << _3483) & _3386) == 0u)
        {
            _3586 = _3466;
            _3588 = _3468;
            _3590 = _3470;
            _3592 = _3472;
            _3594 = _3474;
            _3596 = _3476;
        }
        else
        {
            float _3611 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _3612 = _3611 * _2445;
            float _3613 = _3611 * _2446;
            float _3614 = _3611 * _2447;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3483 < ((_3481 >> 12u) & 15u))
            {
                float _3587;
                float _3589;
                float _3591;
                float _3593;
                float _3595;
                float _3597;
                float _3746 = _3466;
                float _3747 = _3468;
                float _3748 = _3470;
                float _3749 = _3472;
                float _3750 = _3474;
                float _3751 = _3476;
                uint _3752 = _3483;
                uint _3761;
                bool _3762;
                for (;;)
                {
                    _3761 = texelFetch(g_lightClassification, int((((_3380 << 5u) + (_3366 << 9u)) + (_3752 << 2u)) >> 2u)).x;
                    _3762 = _3761 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3762)
                    {
                        frontier_phi_82_pred = _3751;
                        frontier_phi_82_pred_1 = _3750;
                        frontier_phi_82_pred_2 = _3749;
                        frontier_phi_82_pred_3 = _3748;
                        frontier_phi_82_pred_4 = _3747;
                        frontier_phi_82_pred_5 = _3746;
                    }
                    else
                    {
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3959;
                        float _4247;
                        float _4248;
                        float _4249;
                        float _4250;
                        float _4251;
                        float _4252;
                        float _3967 = _3746;
                        float _3968 = _3747;
                        float _3969 = _3748;
                        float _3970 = _3749;
                        float _3971 = _3750;
                        float _3972 = _3751;
                        uint _3973 = _3761;
                        uint _3974;
                        vec4 _3999;
                        float _4000;
                        vec4 _4015;
                        vec3 _4027;
                        vec4 _4042;
                        vec4 _4057;
                        float _4103;
                        bool _4104;
                        for (;;)
                        {
                            uint _3984 = ((_3752 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3973));
                            _3974 = (_3973 + 4294967295u) & _3973;
                            uint _3986 = _3984 * 40u;
                            _3999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3986 + 3u)).x));
                            _4000 = _3999.w;
                            uint _4002 = (_3984 * 40u) + 4u;
                            _4015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4002 + 3u)).x));
                            uint _4017 = (_3984 * 40u) + 8u;
                            _4027 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4017 + 2u)).x));
                            uint _4029 = (_3984 * 40u) + 16u;
                            _4042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4029 + 3u)).x));
                            uint _4044 = (_3984 * 40u) + 20u;
                            _4057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4044 + 3u)).x));
                            uint _4059 = (_3984 * 40u) + 24u;
                            vec4 _4072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4059 + 3u)).x));
                            uint _4078 = (_3984 * 40u) + 28u;
                            vec4 _4091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4078 + 3u)).x));
                            _4103 = fma(_2447, _4091.z, fma(_2446, _4091.y, _4091.x * _2445)) + _4091.w;
                            _4104 = !((fma(_2447, _4072.z, fma(_2446, _4072.y, _4072.x * _2445)) + _4072.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4104)
                            {
                                float _4131 = _3999.x - _2445;
                                float _4132 = _3999.y - _2446;
                                float _4133 = _3999.z - _2447;
                                float _4134 = dot(vec3(_4131, _4132, _4133), vec3(_4131, _4132, _4133));
                                float _4137 = inversesqrt(_4134);
                                float _4138 = _4137 * _4131;
                                float _4139 = _4137 * _4132;
                                float _4140 = _4137 * _4133;
                                float _4144 = 1.0 - (_4134 / (_4000 * _4000));
                                float _5409 = isnan(0.0) ? _4144 : (isnan(_4144) ? 0.0 : max(_4144, 0.0));
                                float _4145 = isnan(1.0) ? _5409 : (isnan(_5409) ? 1.0 : min(_5409, 1.0));
                                float _4149 = sqrt(_4134) * _4015.w;
                                float _4151 = 1.39999997615814208984375 / (_4149 + 1.39999997615814208984375);
                                float _4152 = _4151 * _4151;
                                float _4155 = ((1.0 - _4152) * dot(vec3(_4138, _4139, _4140), vec3(_1282, _1285, _1288))) + _4152;
                                float _4158 = _4149 * _4149;
                                float _4162 = (fma(_2447, _4042.z, fma(_2446, _4042.y, _4042.x * _2445)) + _4042.w) / _4103;
                                float _4163 = (fma(_2447, _4057.z, fma(_2446, _4057.y, _4057.x * _2445)) + _4057.w) / _4103;
                                float _4167 = 1.0 - dot(vec2(_4162, _4163), vec2(_4162, _4163));
                                float _5425 = isnan(0.0) ? _4167 : (isnan(_4167) ? 0.0 : max(_4167, 0.0));
                                float _4168 = isnan(1.0) ? _5425 : (isnan(_5425) ? 1.0 : min(_5425, 1.0));
                                float _4169 = _4168 * (((isnan(0.0) ? _4155 : (isnan(_4155) ? 0.0 : max(_4155, 0.0))) * _4145) / ((_4158 * 0.699999988079071044921875) + 1.0));
                                float _4181 = exp2(log2(1.0 / ((_4158 * 3.5) + 5.0)) * 0.25);
                                float _4182 = 1.0 - _1357;
                                float _4189 = sqrt(1.0 - ((1.0 - (_4182 * _4182)) * (1.0 - (_4181 * _4181))));
                                float _4190 = _4189 * _4189;
                                float _4191 = _4190 * _4190;
                                float _4192 = _4138 - _3612;
                                float _4193 = _4139 - _3613;
                                float _4194 = _4140 - _3614;
                                float _4198 = inversesqrt(dot(vec3(_4192, _4193, _4194), vec3(_4192, _4193, _4194)));
                                float _4202 = dot(vec3(_1282, _1285, _1288), vec3((-0.0) - _3612, (-0.0) - _3613, (-0.0) - _3614));
                                float _5436 = isnan(0.0) ? _4202 : (isnan(_4202) ? 0.0 : max(_4202, 0.0));
                                float _4205 = isnan(1.0) ? _5436 : (isnan(_5436) ? 1.0 : min(_5436, 1.0));
                                float _4206 = dot(vec3(_1282, _1285, _1288), vec3(_4198 * _4192, _4198 * _4193, _4198 * _4194));
                                float _5447 = isnan(0.0) ? _4206 : (isnan(_4206) ? 0.0 : max(_4206, 0.0));
                                float _4209 = isnan(1.0) ? _5447 : (isnan(_5447) ? 1.0 : min(_5447, 1.0));
                                float _4213 = ((_4209 * _4209) * (_4191 + (-1.0))) + 1.0;
                                float _4214 = _4151 * _4190;
                                float _4215 = _4214 * _4214;
                                float _4221 = ((1.0 - _4215) * dot(vec3(_1282, _1285, _1288), vec3(_4138, _4139, _4140))) + _4215;
                                float _5458 = isnan(0.0) ? _4221 : (isnan(_4221) ? 0.0 : max(_4221, 0.0));
                                float _4222 = isnan(1.0) ? _5458 : (isnan(_5458) ? 1.0 : min(_5458, 1.0));
                                float _4223 = 1.0 - _4190;
                                float _4233 = (0.5 / (((_4222 * ((_4205 * _4223) + _4190)) + 9.9999999392252902907785028219223e-09) + (((_4222 * _4223) + _4190) * _4205))) * _4222;
                                float _5469 = isnan(0.0) ? _4233 : (isnan(_4233) ? 0.0 : max(_4233, 0.0));
                                float _4243 = (_4168 * _4145) * (((_4191 * 3.1415927410125732421875) * (isnan(1.0) ? _5469 : (isnan(_5469) ? 1.0 : min(_5469, 1.0)))) / ((_4213 * _4213) * ((_4158 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4169 * _4015.z;
                                frontier_phi_88_pred_1 = _4169 * _4015.y;
                                frontier_phi_88_pred_2 = _4169 * _4015.x;
                                frontier_phi_88_pred_3 = _4243 * _4027.z;
                                frontier_phi_88_pred_4 = _4243 * _4027.y;
                                frontier_phi_88_pred_5 = _4243 * _4027.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4252 = frontier_phi_88_pred;
                            _4251 = frontier_phi_88_pred_1;
                            _4250 = frontier_phi_88_pred_2;
                            _4249 = frontier_phi_88_pred_3;
                            _4248 = frontier_phi_88_pred_4;
                            _4247 = frontier_phi_88_pred_5;
                            _3957 = _4250 + _3970;
                            _3958 = _4251 + _3971;
                            _3959 = _4252 + _3972;
                            _3954 = _4247 + _3967;
                            _3955 = _4248 + _3968;
                            _3956 = _4249 + _3969;
                            if (_3974 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3967 = _3954;
                                _3968 = _3955;
                                _3969 = _3956;
                                _3970 = _3957;
                                _3971 = _3958;
                                _3972 = _3959;
                                _3973 = _3974;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3959;
                        frontier_phi_82_pred_1 = _3958;
                        frontier_phi_82_pred_2 = _3957;
                        frontier_phi_82_pred_3 = _3956;
                        frontier_phi_82_pred_4 = _3955;
                        frontier_phi_82_pred_5 = _3954;
                    }
                    _3597 = frontier_phi_82_pred;
                    _3595 = frontier_phi_82_pred_1;
                    _3593 = frontier_phi_82_pred_2;
                    _3591 = frontier_phi_82_pred_3;
                    _3589 = frontier_phi_82_pred_4;
                    _3587 = frontier_phi_82_pred_5;
                    uint _3753 = _3752 + 1u;
                    if (_3753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3746 = _3587;
                        _3747 = _3589;
                        _3748 = _3591;
                        _3749 = _3593;
                        _3750 = _3595;
                        _3751 = _3597;
                        _3752 = _3753;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3593;
                frontier_phi_63_64_ladder_1 = _3597;
                frontier_phi_63_64_ladder_2 = _3595;
                frontier_phi_63_64_ladder_3 = _3591;
                frontier_phi_63_64_ladder_4 = _3589;
                frontier_phi_63_64_ladder_5 = _3587;
            }
            else
            {
                frontier_phi_63_64_ladder = _3472;
                frontier_phi_63_64_ladder_1 = _3476;
                frontier_phi_63_64_ladder_2 = _3474;
                frontier_phi_63_64_ladder_3 = _3470;
                frontier_phi_63_64_ladder_4 = _3468;
                frontier_phi_63_64_ladder_5 = _3466;
            }
            _3586 = frontier_phi_63_64_ladder_5;
            _3588 = frontier_phi_63_64_ladder_4;
            _3590 = frontier_phi_63_64_ladder_3;
            _3592 = frontier_phi_63_64_ladder;
            _3594 = frontier_phi_63_64_ladder_2;
            _3596 = frontier_phi_63_64_ladder_1;
        }
        float _3601 = isnan(1.0) ? _1341 : (isnan(_1341) ? 1.0 : min(_1341, 1.0));
        _3399 = (_3601 * _3592) + _2911;
        _3401 = (_3601 * _3594) + _2913;
        _3403 = (_3601 * _3596) + _2915;
        _3405 = ((_3586 * _1325) * _3601) + _3249;
        _3407 = ((_3588 * _1327) * _3601) + _3251;
        _3409 = ((_3590 * _1328) * _3601) + _3253;
    }
    else
    {
        _3399 = _2911;
        _3401 = _2913;
        _3403 = _2915;
        _3405 = _3249;
        _3407 = _3251;
        _3409 = _3253;
    }
    float _5485 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _5496 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _5507 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _3426 = ((isnan(1.0) ? _5485 : (isnan(_5485) ? 1.0 : min(_5485, 1.0))) * (_3399 + ((isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))) * _1341))) + ((_3405 + ((isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0))) * _2178)) * cbPerFrame._m0[3u].x);
    float _3427 = ((isnan(1.0) ? _5496 : (isnan(_5496) ? 1.0 : min(_5496, 1.0))) * (_3401 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1341))) + ((_3407 + ((isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0))) * _2178)) * cbPerFrame._m0[3u].x);
    float _3428 = ((isnan(1.0) ? _5507 : (isnan(_5507) ? 1.0 : min(_5507, 1.0))) * (_3403 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1341))) + ((_3409 + ((isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0))) * _2178)) * cbPerFrame._m0[3u].x);
    uint _3429 = _303 + 6u;
    float _3437 = _1263 / cbSceneParam._m0[86u].x;
    float _3438 = _1264 / cbSceneParam._m0[86u].y;
    vec4 _3452 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3437, _3438, (log2((isnan(cbSceneParam._m0[77u].w) ? _1186 : (isnan(_1186) ? cbSceneParam._m0[77u].w : min(_1186, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3454 = _3452.x;
    float _3455 = _3452.y;
    float _3456 = _3452.z;
    float _3457 = _3452.w;
    float _3528;
    float _3530;
    float _3532;
    float _3534;
    if (_1186 > cbSceneParam._m0[78u].w)
    {
        float _3491 = isnan(_1186) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1186 : min(cbSceneParam._m0[80u].w, _1186));
        float _3492 = _3491 / _1186;
        float _3503 = _3492 * _1236;
        float _3504 = _1237 * _3492;
        float _3505 = (-0.0) - _3504;
        float _3506 = _3492 * _1238;
        float _3508 = (cbSceneParam._m0[77u].w * _3505) / _3491;
        float _3509 = _3508 + cbSceneParam._m0[79u].w;
        float _3510 = cbSceneParam._m0[79u].w - _3504;
        float _3516 = sqrt(((_3503 * _3503) + (_3504 * _3504)) + (_3506 * _3506));
        float _3519 = (1.0 - (cbSceneParam._m0[77u].w / _3491)) * _3516;
        float _3524 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3526 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3703;
        if (abs((_3505 - _3508) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3703 = ((((_3509 > 0.0) ? exp2(_3524 * _3509) : (2.0 - exp2(_3526 * _3509))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3519;
        }
        else
        {
            float _3647 = 1.0 / cbSceneParam._m0[80u].x;
            float _3648 = isnan(_3510) ? _3509 : (isnan(_3509) ? _3510 : max(_3509, _3510));
            float _3649 = isnan(_3510) ? _3509 : (isnan(_3509) ? _3510 : min(_3509, _3510));
            float _3658 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : min(_3648, 0.0));
            float _3659 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : min(_3649, 0.0));
            _3703 = ((abs(_3516 / _3505) * cbSceneParam._m0[80u].y) * ((((_3658 - _3659) * 2.0) - ((exp2(_3524 * (isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0)))) - exp2(_3524 * (isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))))) * _3647)) - ((exp2(_3526 * _3658) - exp2(_3526 * _3659)) * _3647))) + (_3519 * cbSceneParam._m0[80u].z);
        }
        vec4 _3705 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3437, _3438, 1.0), 0.0);
        float _3714 = exp2((_3703 * (-1.44269502162933349609375)) * (1.0 - _3705.w));
        float _3715 = log2(_3714);
        float _3731 = log2(_3457);
        _3528 = (exp2(_3731 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3715 * cbSceneParam._m0[78u].x)) * _3705.x) / cbSceneParam._m0[78u].x)) + _3454;
        _3530 = (exp2(_3731 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3715 * cbSceneParam._m0[78u].y)) * _3705.y) / cbSceneParam._m0[78u].y)) + _3455;
        _3532 = (exp2(_3731 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3715 * cbSceneParam._m0[78u].z)) * _3705.z) / cbSceneParam._m0[78u].z)) + _3456;
        _3534 = _3714 * _3457;
    }
    else
    {
        _3528 = _3454;
        _3530 = _3455;
        _3532 = _3456;
        _3534 = _3457;
    }
    bool _3741;
    vec4 _3544;
    vec4 _3566;
    float _3568;
    float _3572;
    float _3573;
    float _3574;
    float _3575;
    bool _3585;
    for (;;)
    {
        _3544 = cbMatDynParam._m0[0u];
        float _3546 = roundEven(_3544.y);
        bool _3547 = _3546 == 3.0;
        float _3548 = log2(_3534);
        float _3555 = exp2(_3548 * cbSceneParam._m0[78u].x) * _3426;
        float _3556 = exp2(_3548 * cbSceneParam._m0[78u].y) * _3427;
        float _3557 = exp2(_3548 * cbSceneParam._m0[78u].z) * _3428;
        float _3564 = _1252 + (-0.5);
        _3566 = cbMtdParam._m0[1u];
        _3568 = _3566.y * _3564;
        float _3571 = (_3546 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3572 = _3571 * (_3547 ? _3555 : (_3555 + (cbSceneParam._m0[72u].w * _3528)));
        _3573 = _3571 * (_3547 ? _3556 : (_3556 + (cbSceneParam._m0[72u].w * _3530)));
        _3574 = _3571 * (_3547 ? _3557 : (_3557 + (cbSceneParam._m0[72u].w * _3532)));
        _3575 = _3564 * 0.999000012874603271484375;
        _3585 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3585)
        {
            if ((cbInstanceData._m0[_303 + 7u].x + _3575) < 0.5)
            {
                _3741 = true;
                break;
            }
        }
        uint _3682 = _1301 + uint(_3544.w);
        if ((cbInstanceData._m0[_3682].w < 1.0) && ((cbInstanceData._m0[_3682].w + _3575) < 0.5))
        {
            _3741 = true;
            break;
        }
        if ((_3568 + 1.0) < _3566.x)
        {
            _3741 = true;
            break;
        }
        _3741 = false;
        break;
    }
    float _3945;
    if (_3741)
    {
        discard_state = true;
        _3945 = 0.0;
    }
    else
    {
        _3945 = cbInstanceData._m0[_3429].w;
    }
    SV_Target.x = _3572;
    SV_Target.y = _3573;
    SV_Target.z = _3574;
    SV_Target.w = _3945;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3429].w;
    discard_exit();
}


