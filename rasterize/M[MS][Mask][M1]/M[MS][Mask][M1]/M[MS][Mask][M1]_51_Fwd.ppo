#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1210;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _376 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _326.x) * 2.0) - ((((_364 - _376) * cbMtdParam._m0[23u].w) + _376) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3538 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _401 = (_394 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _402 = (_394 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _403 = (_394 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _440 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _442 = _440.x;
    float _452 = dot(vec4(_442, _440.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _466 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _326.y) * 2.0) - ((((_442 - _452) * cbMtdParam._m0[23u].w) + _452) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3549 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _474 = (_467 * ((_420.x * cbMtdParam._m0[13u].x) - _401)) + _401;
    float _475 = (_467 * ((_420.y * cbMtdParam._m0[13u].y) - _402)) + _402;
    float _476 = (_467 * ((_420.z * cbMtdParam._m0[13u].z) - _403)) + _403;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = _506.x;
    float _509 = _506.y;
    float _510 = _506.z;
    float _517 = ((_489.x - _508) * _394) + _508;
    float _518 = ((_489.y - _509) * _394) + _509;
    float _519 = ((_489.z - _510) * _394) + _510;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _544 = ((_531.z - _519) * _467) + _519;
    float _547 = ((((_531.x - _517) * _467) + _517) * 2.0) + (-1.0);
    float _549 = ((((_531.y - _518) * _467) + _518) * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _3560 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))));
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _581 = (((_569.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _547;
    float _582 = (((_569.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _549;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _610 = _608.x;
    float _628 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _610) * _394) + _610;
    float _646 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _258) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _259) + cbTextureTilingScale._m0[21u].w)).x - _628) * _467) + _628;
    float _650 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _646) * cbMtdParam._m0[19u].z) + _646;
    float _654 = (cbMtdParam._m0[19u].w * (_569.z - _544)) + _544;
    float _656 = cbMtdParam._m0[22u].x + _569.w;
    float _659 = fma(_555, _225 * NORMAL.x, fma(_582, _232 * TANGENT.x, (_218 * _210) * _581));
    float _662 = fma(_555, _225 * NORMAL.y, fma(_582, _232 * TANGENT.y, (_218 * _211) * _581));
    float _665 = fma(_555, _225 * NORMAL.z, fma(_582, _232 * TANGENT.z, (_218 * _212) * _581));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3571 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _673 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3593 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3604 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3615 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3626 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _678 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _777 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _780 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _783 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _797 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _803 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_797].x;
    float _804 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_797].y;
    float _805 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_797].z;
    float _3637 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _3648 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _809 = 1.0 - _678;
    float _810 = _806 * _809;
    float _811 = _807 * _809;
    float _812 = _808 * _809;
    float _817 = (_806 + (-0.039999999105930328369140625)) * _678;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _678;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _678;
    float _820 = _817 + 0.039999999105930328369140625;
    float _822 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _836 = ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * TEXCOORD_5.w) * _832.x;
    float _837 = dot(vec3(_670, _671, _672), vec3(_750, _751, _752));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _670) - _750;
    float _845 = (_840 * _671) - _751;
    float _846 = (_840 * _672) - _752;
    float _850 = abs(dot(vec3(_750, _751, _752), vec3(_670, _671, _672)));
    float _3670 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_673);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _871 = (1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _872 = _865 * _852;
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1209;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _934 = fma(_908, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900));
        float _938 = fma(_908, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900));
        float _942 = fma(_908, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900));
        float _967 = _900 + _670;
        float _968 = _904 + _671;
        float _969 = _908 + _672;
        float _979 = fma(_969, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967)) - _934;
        float _980 = fma(_969, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967)) - _938;
        float _981 = fma(_969, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967)) - _942;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_934 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_938 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[34u].z) + ((((((_942 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1037 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1003.x + (-0.5));
        float _1039 = _1037 * (_1003.y + (-0.5));
        float _1040 = _1037 * (_1003.z + (-0.5));
        float _1047 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1010.x + (-0.5));
        float _1049 = _1047 * (_1010.y + (-0.5));
        float _1050 = _1047 * (_1010.z + (-0.5));
        float _1057 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1017.x + (-0.5));
        float _1059 = _1057 * (_1017.y + (-0.5));
        float _1060 = _1057 * (_1017.z + (-0.5));
        float _1067 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1024.x + (-0.5));
        float _1069 = _1067 * (_1024.y + (-0.5));
        float _1070 = _1067 * (_1024.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1091 = (dot(vec3(_670, _671, _672), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1101 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3718 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1103 + 1.0))) + _1108) * _1071;
        float _1118 = _1039 * 0.5;
        float _1119 = _1049 * 0.5;
        float _1120 = _1059 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_670, _671, _672), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3751 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1145 + 1.0))) + _1150) * _1072;
        float _1160 = _1040 * 0.5;
        float _1161 = _1050 * 0.5;
        float _1162 = _1060 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_670, _671, _672), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3784 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1187 + 1.0))) + _1192) * _1073;
        _1209 = _1040;
        _1211 = _1039;
        _1212 = _1038;
        _1213 = _1050;
        _1214 = _1049;
        _1215 = _1048;
        _1216 = _1060;
        _1217 = _1059;
        _1218 = _1058;
        _1219 = _1073;
        _1220 = _1072;
        _1221 = _1071;
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _1210;
        _1211 = _1210;
        _1212 = _1210;
        _1213 = _1210;
        _1214 = _1210;
        _1215 = _1210;
        _1216 = _1210;
        _1217 = _1210;
        _1218 = _1210;
        _1219 = _1210;
        _1220 = _1210;
        _1221 = _1210;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1248 = fma(_908, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _900));
        float _1252 = fma(_908, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _900));
        float _1256 = fma(_908, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _900));
        float _1279 = _900 + _670;
        float _1280 = _904 + _671;
        float _1281 = _908 + _672;
        float _1291 = fma(_1281, cbModelParam._m0[30u].z, fma(_1280, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1279)) - _1248;
        float _1292 = fma(_1281, cbModelParam._m0[31u].z, fma(_1280, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1279)) - _1252;
        float _1293 = fma(_1281, cbModelParam._m0[32u].z, fma(_1280, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1279)) - _1256;
        float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
        float _1310 = ((_1297 * _1291) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1248 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1297 * _1292) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1252 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1297 * _1293) / cbModelParam._m0[35u].z) + ((((((_1256 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1347 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1314.x + (-0.5));
        float _1349 = _1347 * (_1314.y + (-0.5));
        float _1350 = _1347 * (_1314.z + (-0.5));
        float _1357 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1321.x + (-0.5));
        float _1359 = _1357 * (_1321.y + (-0.5));
        float _1360 = _1357 * (_1321.z + (-0.5));
        float _1367 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1328.x + (-0.5));
        float _1369 = _1367 * (_1328.y + (-0.5));
        float _1370 = _1367 * (_1328.z + (-0.5));
        float _1377 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1335.x + (-0.5));
        float _1379 = _1377 * (_1335.y + (-0.5));
        float _1380 = _1377 * (_1335.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_670, _671, _672), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3847 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1411 + 1.0))) + _1416) * _1381;
        float _1426 = _1349 * 0.5;
        float _1427 = _1359 * 0.5;
        float _1428 = _1369 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_670, _671, _672), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3880 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1453 + 1.0))) + _1458) * _1382;
        float _1468 = _1350 * 0.5;
        float _1469 = _1360 * 0.5;
        float _1470 = _1370 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_670, _671, _672), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _3913 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1495 + 1.0))) + _1500) * _1383;
        _1517 = _1350;
        _1518 = _1349;
        _1519 = _1348;
        _1520 = _1360;
        _1521 = _1359;
        _1522 = _1358;
        _1523 = _1370;
        _1524 = _1369;
        _1525 = _1368;
        _1526 = _1383;
        _1527 = _1382;
        _1528 = _1381;
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1210;
        _1518 = _1210;
        _1519 = _1210;
        _1520 = _1210;
        _1521 = _1210;
        _1522 = _1210;
        _1523 = _1210;
        _1524 = _1210;
        _1525 = _1210;
        _1526 = _1210;
        _1527 = _1210;
        _1528 = _1210;
        _1529 = 0.0;
        _1530 = 0.0;
        _1531 = 0.0;
    }
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1222)) + _1222;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1223)) + _1223;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1224)) + _1224;
    float _1564 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1541 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1541 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1541));
    float _1585 = _844 * 0.5;
    float _1586 = _845 * 0.5;
    float _1587 = _846 * 0.5;
    float _1588 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1591 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1594 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1628;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1601 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1209, _1213, _1216, _1219));
        float _1605 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1609 = dot(vec4(_1585, _1586, _1587, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1616 = dot(vec4(cbModelParam._m0[39u]), vec4(_1585, _1586, _1587, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1616) ? 0.0 : (isnan(0.0) ? _1616 : max(0.0, _1616))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1639;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1630 = dot(vec4(cbModelParam._m0[40u]), vec4(_1585, _1586, _1587, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1643 = (_1639 * cbModelParam._m0[1u].x) + (_1628 * (1.0 - cbModelParam._m0[1u].x));
    float _1653 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1654 = isnan(_1653) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1653 : min(cbModelParam._m0[25u].z, _1653));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1703 = fma(_908, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900)) + cbModelParam._m0[13u].w;
        float _1707 = fma(_908, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900)) + cbModelParam._m0[14u].w;
        float _1711 = fma(_908, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900)) + cbModelParam._m0[15u].w;
        float _1714 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1717 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1720 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1748;
        if (_1714 > 0.0)
        {
            _1748 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1748 = frontier_phi_14_12_ladder;
        }
        float _1951;
        if (_1717 > 0.0)
        {
            _1951 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1951 = frontier_phi_23_19_ladder;
        }
        float _2205;
        if (_1720 > 0.0)
        {
            _2205 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2205 = frontier_phi_35_30_ladder;
        }
        float _2207 = isnan(_1951) ? _1748 : (isnan(_1748) ? _1951 : min(_1748, _1951));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1714) + _1703;
        float _2213 = (_2208 * _1717) + _1707;
        float _2214 = (_2208 * _1720) + _1711;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2342 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1654);
            frontier_phi_13_35_ladder = _2342.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2342.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2342.x * cbModelParam._m0[1u].y;
        }
        _1736 = frontier_phi_13_35_ladder_2;
        _1738 = frontier_phi_13_35_ladder_1;
        _1740 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1654);
        _1736 = _1724.x * cbModelParam._m0[1u].y;
        _1738 = _1724.y * cbModelParam._m0[1u].y;
        _1740 = _1724.z * cbModelParam._m0[1u].y;
    }
    float _1744 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1744 : min(cbModelParam._m0[25u].w, _1744));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1799 = fma(_908, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900)) + cbModelParam._m0[21u].w;
        float _1803 = fma(_908, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900)) + cbModelParam._m0[22u].w;
        float _1807 = fma(_908, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900)) + cbModelParam._m0[23u].w;
        float _1810 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1813 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1816 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1956;
        if (_1810 > 0.0)
        {
            _1956 = abs((1.0 - _1799) / _1810);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1799 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1956 = frontier_phi_25_21_ladder;
        }
        float _2232;
        if (_1813 > 0.0)
        {
            _2232 = abs((1.0 - _1803) / _1813);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1803 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2232 = frontier_phi_37_32_ladder;
        }
        float _2445;
        if (_1816 > 0.0)
        {
            _2445 = abs((1.0 - _1807) / _1816);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1807 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2445 = frontier_phi_46_43_ladder;
        }
        float _2447 = isnan(_2232) ? _1956 : (isnan(_1956) ? _2232 : min(_1956, _2232));
        float _2448 = isnan(_2445) ? _2447 : (isnan(_2447) ? _2445 : min(_2447, _2445));
        float _2452 = (_2448 * _1810) + _1799;
        float _2453 = (_2448 * _1813) + _1803;
        float _2454 = (_2448 * _1816) + _1807;
        float _2455 = _2448 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2455;
        float _2458 = _2455 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2454 > _2458) || ((_2454 < _2456) || ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 < _2456) || (_2452 > _2458))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2454, cbModelParam._m0[17u].z, fma(_2453, cbModelParam._m0[17u].y, _2452 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2454, cbModelParam._m0[18u].z, fma(_2453, cbModelParam._m0[18u].y, _2452 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2454, cbModelParam._m0[19u].z, fma(_2453, cbModelParam._m0[19u].y, _2452 * cbModelParam._m0[19u].x))), _1745);
            frontier_phi_22_46_ladder = _2653.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2653.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2653.x * cbModelParam._m0[1u].z;
        }
        _1835 = frontier_phi_22_46_ladder_2;
        _1837 = frontier_phi_22_46_ladder_1;
        _1839 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1745);
        _1835 = _1819.x * cbModelParam._m0[1u].z;
        _1837 = _1819.y * cbModelParam._m0[1u].z;
        _1839 = _1819.z * cbModelParam._m0[1u].z;
    }
    float _1852 = (((_871 * _820) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1835 - _1736)) + _1736);
    float _1854 = (((_871 * _822) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1837 - _1738)) + _1738);
    float _1856 = (((_871 * _823) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1839 - _1740)) + _1740);
    float _1859 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1854, cbSceneParam._m0[89u].y, _1852 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1854, cbSceneParam._m0[90u].y, _1852 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1854, cbSceneParam._m0[91u].y, _1852 * cbSceneParam._m0[91u].x));
    uvec4 _1875 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1877 = _1875.x * 14u;
    uint _1878 = _1877 + 13u;
    float _1885 = _836 + (-1.0);
    float _1890 = (cbLight._m0[_1878].x * _1885) + 1.0;
    float _1891 = (cbLight._m0[_1878].y * _1885) + 1.0;
    float _1892 = (cbLight._m0[_1878].z * _1885) + 1.0;
    float _1893 = (cbLight._m0[_1878].w * _1885) + 1.0;
    uint _1894 = _1877 + 5u;
    float _1900 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
    uint _1904 = _1877 + 4u;
    float _1910 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1914 = _1877 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_670, _671, _672));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_670, _671, _672));
    float _4049 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _4060 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1894].x * _1900) * _1935) + ((cbLight._m0[_1904].x * _1910) * _1933);
    float _1943 = ((_1900 * cbLight._m0[_1894].y) * _1935) + ((_1910 * cbLight._m0[_1904].y) * _1933);
    float _1944 = ((_1900 * cbLight._m0[_1894].z) * _1935) + ((_1910 * cbLight._m0[_1904].z) * _1933);
    uvec4 _1948 = floatBitsToUint(cbLight._m0[_1877 + 12u]);
    bool _1950 = _1948.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1950)
    {
        _1961 = _1942;
        _1963 = _1943;
        _1965 = _1944;
    }
    else
    {
        uint _1969 = _1877 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1877 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4071 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1988 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1942;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1943;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1944;
    }
    bool _1968 = _1948.y == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1968)
    {
        _2006 = _1961;
        _2008 = _1963;
        _2010 = _1965;
    }
    else
    {
        uint _2176 = _1877 + 7u;
        float _2192 = (dot(vec3(cbLight._m0[_1877 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4087 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2195 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2006 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _1961;
        _2008 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _1963;
        _2010 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _1965;
    }
    uint _2013 = _1877 + 8u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _673) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1877].x + _750;
    float _2029 = cbLight._m0[_1877].y + _751;
    float _2030 = cbLight._m0[_1877].z + _752;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1877].xyz));
    float _4103 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2042 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _2043 = dot(vec3(_670, _671, _672), vec3(_2035, _2036, _2037));
    float _4125 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2035, _2036, _2037));
    float _4136 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2027 * _2027;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2063 = exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0);
    float _2064 = 0.959999978542327880859375 - _817;
    float _2066 = 0.959999978542327880859375 - _818;
    float _2067 = 0.959999978542327880859375 - _819;
    float _2074 = 1.0 - _2027;
    float _2085 = (0.5 / (((_2042 * ((_2041 * _2074) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2074) + _2027) * _2041))) * _2041;
    float _4147 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    uint _2098 = _1877 + 9u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _673) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1914].x + _750;
    float _2112 = cbLight._m0[_1914].y + _751;
    float _2113 = cbLight._m0[_1914].z + _752;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1914].xyz));
    float _4158 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2125 = dot(vec3(_670, _671, _672), vec3(_2118, _2119, _2120));
    float _4169 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2118, _2119, _2120));
    float _4180 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2110 * _2110;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _2151 = 1.0 - _2110;
    float _2161 = (0.5 / (((_2042 * ((_2124 * _2151) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2151) + _2110) * _2124))) * _2124;
    float _4191 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2163 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    float _2173 = (((((_2144 * _2064) + _820) * cbLight._m0[_2098].x) * _2163) * _1900) + (((((_2063 * _2064) + _820) * cbLight._m0[_2013].x) * _2087) * _1910);
    float _2174 = (((((_2144 * _2066) + _822) * cbLight._m0[_2098].y) * _2163) * _1900) + (((((_2063 * _2066) + _822) * cbLight._m0[_2013].y) * _2087) * _1910);
    float _2175 = (((((_2144 * _2067) + _823) * cbLight._m0[_2098].z) * _2163) * _1900) + (((((_2063 * _2067) + _823) * cbLight._m0[_2013].z) * _2087) * _1910);
    float _2237;
    float _2239;
    float _2241;
    if (_1950)
    {
        _2237 = _2173;
        _2239 = _2174;
        _2241 = _2175;
    }
    else
    {
        uint _2243 = _1877 + 2u;
        uint _2247 = _1877 + 10u;
        float _2261 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2243].w)) * _673) * 0.949999988079071044921875);
        float _2262 = _2261 * _2261;
        float _2263 = cbLight._m0[_2243].x + _750;
        float _2264 = cbLight._m0[_2243].y + _751;
        float _2265 = cbLight._m0[_2243].z + _752;
        float _2269 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
        float _2270 = _2269 * _2263;
        float _2271 = _2269 * _2264;
        float _2272 = _2269 * _2265;
        float _2273 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2243].xyz));
        float _4202 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2277 = dot(vec3(_670, _671, _672), vec3(_2270, _2271, _2272));
        float _4213 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2281 = dot(vec3(cbLight._m0[_2243].xyz), vec3(_2270, _2271, _2272));
        float _4224 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2285 = _2262 * _2262;
        float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
        float _2296 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2303 = 1.0 - _2262;
        float _2313 = (0.5 / (((_2042 * ((_2276 * _2303) + _2262)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2303) + _2262) * _2276))) * _2276;
        float _4235 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2315 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
        float _2316 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2237 = (((((_2296 * _2064) + _820) * cbLight._m0[_2247].x) * _2315) * _2316) + _2173;
        _2239 = (((((_2296 * _2066) + _822) * cbLight._m0[_2247].y) * _2315) * _2316) + _2174;
        _2241 = (((((_2296 * _2067) + _823) * cbLight._m0[_2247].z) * _2315) * _2316) + _2175;
    }
    float _2351;
    float _2353;
    float _2355;
    if (_1968)
    {
        _2351 = _2237;
        _2353 = _2239;
        _2355 = _2241;
    }
    else
    {
        uint _2362 = _1877 + 3u;
        uint _2366 = _1877 + 11u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _673) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _750;
        float _2383 = cbLight._m0[_2362].y + _751;
        float _2384 = cbLight._m0[_2362].z + _752;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2362].xyz));
        float _4251 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2396 = dot(vec3(_670, _671, _672), vec3(_2389, _2390, _2391));
        float _4262 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4273 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2415 = exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0);
        float _2422 = 1.0 - _2381;
        float _2432 = (0.5 / (((_2042 * ((_2395 * _2422) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2422) + _2381) * _2395))) * _2395;
        float _4284 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2351 = (((((_2415 * _2064) + _820) * cbLight._m0[_2366].x) * _2434) * _2435) + _2237;
        _2353 = (((((_2415 * _2066) + _822) * cbLight._m0[_2366].y) * _2434) * _2435) + _2239;
        _2355 = (((((_2415 * _2067) + _823) * cbLight._m0[_2366].z) * _2434) * _2435) + _2241;
    }
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    if (_1875.y == 0u)
    {
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2510;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2510;
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2510;
        uvec4 _2525 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2526 = _2525.x;
        uint _2537 = uint((float(_2525.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2526))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2526)));
        float _2547 = (log2(_2513 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2548 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        uint _2551 = uint(isnan(14.0) ? _2548 : (isnan(_2548) ? 14.0 : min(_2548, 14.0)));
        uvec4 _2556 = texelFetch(g_lightClusterGridBuffer, int(((_2551 << 2u) + (_2537 << 6u)) >> 2u));
        uint _2557 = _2556.x;
        uint _2558 = _2525.z;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        if (((((1u << ((_2558 >> 4u) & 15u)) + 4294967295u) & _2557) == 0u) || ((_2558 & 240u) == 0u))
        {
            _2658 = 0.0;
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
        }
        else
        {
            float _2659;
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2803 = 0.0;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            uint _2809 = 0u;
            uint _2818;
            bool _2819;
            for (;;)
            {
                _2818 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2809 << 2u)) >> 2u)).x;
                _2819 = _2818 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2819)
                {
                    frontier_phi_61_pred = _2803;
                    frontier_phi_61_pred_1 = _2808;
                    frontier_phi_61_pred_2 = _2807;
                    frontier_phi_61_pred_3 = _2806;
                    frontier_phi_61_pred_4 = _2805;
                    frontier_phi_61_pred_5 = _2804;
                }
                else
                {
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    uint _2933;
                    _2927 = _2803;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2818;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    for (;;)
                    {
                        uint _2937 = uint(findLSB(_2933)) + (_2809 << 5u);
                        uint _2934 = (_2933 + 4294967295u) & _2933;
                        uint _2939 = _2937 * 48u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2959 = (_2937 * 48u) + 4u;
                        vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 3u)).x));
                        uint _2978 = (_2937 * 48u) + 8u;
                        vec3 _2989 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x));
                        float _2993 = _2953.x - _2511;
                        float _2994 = _2953.y - _2512;
                        float _2995 = _2953.z - _2513;
                        float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                        float _2999 = inversesqrt(_2996);
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3003 = dot(vec3(_777, _780, _783), vec3(_3000, _3001, _3002));
                        float _3008 = 1.0 - (_2996 * _2953.w);
                        float _4310 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3010 = sqrt(_2996) * _2972.w;
                        float _3013 = 1.39999997615814208984375 / (_3010 + 1.39999997615814208984375);
                        float _3014 = _3013 * _3013;
                        float _3017 = ((1.0 - _3014) * _3003) + _3014;
                        float _3020 = _3010 * _3010;
                        float _3024 = ((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3009) / ((_3020 * 0.699999988079071044921875) + 1.0);
                        float _3028 = (-0.0) - _2511;
                        float _3029 = (-0.0) - _2512;
                        float _3030 = (-0.0) - _2513;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3035 = _3034 * _3028;
                        float _3036 = _3034 * _3029;
                        float _3037 = _3034 * _3030;
                        float _3045 = exp2(log2(1.0 / ((_3020 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _852;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3058 = _3037 + _3002;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_777, _780, _783), vec3(_3035, _3036, _3037));
                        float _4326 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3070 = dot(vec3(_777, _780, _783), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4337 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3013 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3003) + _3079;
                        float _4348 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4359 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) / ((_3077 * _3077) * ((_3020 * 2.1991131305694580078125) + 3.141590118408203125))) * _3009;
                        _2862 = (_3024 * _2972.x) + _2930;
                        _2863 = (_3024 * _2972.y) + _2931;
                        _2864 = (_3024 * _2972.z) + _2932;
                        _2859 = (_3105 * _2989.x) + _2927;
                        _2860 = (_3105 * _2989.y) + _2928;
                        _2861 = (_3105 * _2989.z) + _2929;
                        if (_2934 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2927 = _2859;
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2934;
                        }
                    }
                    frontier_phi_61_pred = _2859;
                    frontier_phi_61_pred_1 = _2864;
                    frontier_phi_61_pred_2 = _2863;
                    frontier_phi_61_pred_3 = _2862;
                    frontier_phi_61_pred_4 = _2861;
                    frontier_phi_61_pred_5 = _2860;
                }
                _2659 = frontier_phi_61_pred;
                _2669 = frontier_phi_61_pred_1;
                _2667 = frontier_phi_61_pred_2;
                _2665 = frontier_phi_61_pred_3;
                _2663 = frontier_phi_61_pred_4;
                _2661 = frontier_phi_61_pred_5;
                uint _2810 = _2809 + 1u;
                if (_2810 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2803 = _2659;
                    _2804 = _2661;
                    _2805 = _2663;
                    _2806 = _2665;
                    _2807 = _2667;
                    _2808 = _2669;
                    _2809 = _2810;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2658 = _2659;
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
        }
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.z;
        uint _2675 = (_2673 >> 8u) & 15u;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((4294967295u << _2675) & _2557) == 0u)
        {
            _2771 = _2658;
            _2773 = _2660;
            _2775 = _2662;
            _2777 = _2664;
            _2779 = _2666;
            _2781 = _2668;
        }
        else
        {
            float _2796 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
            float _2797 = _2796 * _2511;
            float _2798 = _2796 * _2512;
            float _2799 = _2796 * _2513;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2675 < ((_2673 >> 12u) & 15u))
            {
                float _2772;
                float _2774;
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2910 = _2658;
                float _2911 = _2660;
                float _2912 = _2662;
                float _2913 = _2664;
                float _2914 = _2666;
                float _2915 = _2668;
                uint _2916 = _2675;
                uint _2925;
                bool _2926;
                for (;;)
                {
                    _2925 = texelFetch(g_lightClassification, int((((_2551 << 5u) + (_2537 << 9u)) + (_2916 << 2u)) >> 2u)).x;
                    _2926 = _2925 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2926)
                    {
                        frontier_phi_67_pred = _2913;
                        frontier_phi_67_pred_1 = _2914;
                        frontier_phi_67_pred_2 = _2915;
                        frontier_phi_67_pred_3 = _2912;
                        frontier_phi_67_pred_4 = _2911;
                        frontier_phi_67_pred_5 = _2910;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3404;
                        float _3405;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3123 = _2910;
                        float _3124 = _2911;
                        float _3125 = _2912;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        uint _3129 = _2925;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3198;
                        vec4 _3213;
                        float _3260;
                        bool _3261;
                        for (;;)
                        {
                            uint _3140 = ((_2916 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3185 = (_3140 * 40u) + 16u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3140 * 40u) + 20u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            uint _3216 = (_3140 * 40u) + 24u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3235 = (_3140 * 40u) + 28u;
                            vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3260 = fma(_2513, _3248.z, fma(_2512, _3248.y, _3248.x * _2511)) + _3248.w;
                            _3261 = !((fma(_2513, _3229.z, fma(_2512, _3229.y, _3229.x * _2511)) + _3229.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3261)
                            {
                                float _3288 = _3155.x - _2511;
                                float _3289 = _3155.y - _2512;
                                float _3290 = _3155.z - _2513;
                                float _3291 = dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290));
                                float _3294 = inversesqrt(_3291);
                                float _3295 = _3294 * _3288;
                                float _3296 = _3294 * _3289;
                                float _3297 = _3294 * _3290;
                                float _3301 = 1.0 - (_3291 / (_3156 * _3156));
                                float _4370 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3306 = sqrt(_3291) * _3171.w;
                                float _3308 = 1.39999997615814208984375 / (_3306 + 1.39999997615814208984375);
                                float _3309 = _3308 * _3308;
                                float _3312 = ((1.0 - _3309) * dot(vec3(_3295, _3296, _3297), vec3(_777, _780, _783))) + _3309;
                                float _3315 = _3306 * _3306;
                                float _3319 = (fma(_2513, _3198.z, fma(_2512, _3198.y, _3198.x * _2511)) + _3198.w) / _3260;
                                float _3320 = (fma(_2513, _3213.z, fma(_2512, _3213.y, _3213.x * _2511)) + _3213.w) / _3260;
                                float _3324 = 1.0 - dot(vec2(_3319, _3320), vec2(_3319, _3320));
                                float _4386 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3326 = _3325 * (((isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))) * _3302) / ((_3315 * 0.699999988079071044921875) + 1.0));
                                float _3338 = exp2(log2(1.0 / ((_3315 * 3.5) + 5.0)) * 0.25);
                                float _3339 = 1.0 - _852;
                                float _3346 = sqrt(1.0 - ((1.0 - (_3339 * _3339)) * (1.0 - (_3338 * _3338))));
                                float _3347 = _3346 * _3346;
                                float _3348 = _3347 * _3347;
                                float _3349 = _3295 - _2797;
                                float _3350 = _3296 - _2798;
                                float _3351 = _3297 - _2799;
                                float _3355 = inversesqrt(dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351)));
                                float _3359 = dot(vec3(_777, _780, _783), vec3((-0.0) - _2797, (-0.0) - _2798, (-0.0) - _2799));
                                float _4397 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3362 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3363 = dot(vec3(_777, _780, _783), vec3(_3355 * _3349, _3355 * _3350, _3355 * _3351));
                                float _4408 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3370 = ((_3366 * _3366) * (_3348 + (-1.0))) + 1.0;
                                float _3371 = _3308 * _3347;
                                float _3372 = _3371 * _3371;
                                float _3378 = ((1.0 - _3372) * dot(vec3(_777, _780, _783), vec3(_3295, _3296, _3297))) + _3372;
                                float _4419 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3379 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3380 = 1.0 - _3347;
                                float _3390 = (0.5 / (((_3379 * ((_3362 * _3380) + _3347)) + 9.9999999392252902907785028219223e-09) + (((_3379 * _3380) + _3347) * _3362))) * _3379;
                                float _4430 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3400 = (_3325 * _3302) * (((_3348 * 3.1415927410125732421875) * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) / ((_3370 * _3370) * ((_3315 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3400 * _3183.x;
                                frontier_phi_73_pred_1 = _3400 * _3183.y;
                                frontier_phi_73_pred_2 = _3326 * _3171.z;
                                frontier_phi_73_pred_3 = _3326 * _3171.y;
                                frontier_phi_73_pred_4 = _3326 * _3171.x;
                                frontier_phi_73_pred_5 = _3400 * _3183.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3404 = frontier_phi_73_pred;
                            _3405 = frontier_phi_73_pred_1;
                            _3409 = frontier_phi_73_pred_2;
                            _3408 = frontier_phi_73_pred_3;
                            _3407 = frontier_phi_73_pred_4;
                            _3406 = frontier_phi_73_pred_5;
                            _3113 = _3407 + _3126;
                            _3114 = _3408 + _3127;
                            _3115 = _3409 + _3128;
                            _3110 = _3404 + _3123;
                            _3111 = _3405 + _3124;
                            _3112 = _3406 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3113;
                        frontier_phi_67_pred_1 = _3114;
                        frontier_phi_67_pred_2 = _3115;
                        frontier_phi_67_pred_3 = _3112;
                        frontier_phi_67_pred_4 = _3111;
                        frontier_phi_67_pred_5 = _3110;
                    }
                    _2778 = frontier_phi_67_pred;
                    _2780 = frontier_phi_67_pred_1;
                    _2782 = frontier_phi_67_pred_2;
                    _2776 = frontier_phi_67_pred_3;
                    _2774 = frontier_phi_67_pred_4;
                    _2772 = frontier_phi_67_pred_5;
                    uint _2917 = _2916 + 1u;
                    if (_2917 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2910 = _2772;
                        _2911 = _2774;
                        _2912 = _2776;
                        _2913 = _2778;
                        _2914 = _2780;
                        _2915 = _2782;
                        _2916 = _2917;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2780;
                frontier_phi_55_56_ladder_1 = _2782;
                frontier_phi_55_56_ladder_2 = _2778;
                frontier_phi_55_56_ladder_3 = _2776;
                frontier_phi_55_56_ladder_4 = _2774;
                frontier_phi_55_56_ladder_5 = _2772;
            }
            else
            {
                frontier_phi_55_56_ladder = _2666;
                frontier_phi_55_56_ladder_1 = _2668;
                frontier_phi_55_56_ladder_2 = _2664;
                frontier_phi_55_56_ladder_3 = _2662;
                frontier_phi_55_56_ladder_4 = _2660;
                frontier_phi_55_56_ladder_5 = _2658;
            }
            _2771 = frontier_phi_55_56_ladder_5;
            _2773 = frontier_phi_55_56_ladder_4;
            _2775 = frontier_phi_55_56_ladder_3;
            _2777 = frontier_phi_55_56_ladder_2;
            _2779 = frontier_phi_55_56_ladder;
            _2781 = frontier_phi_55_56_ladder_1;
        }
        float _2786 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2570 = (_2786 * _2777) + _2006;
        _2572 = (_2786 * _2779) + _2008;
        _2574 = (_2786 * _2781) + _2010;
        _2576 = ((_2771 * _820) * _2786) + _2351;
        _2578 = ((_2773 * _822) * _2786) + _2353;
        _2580 = ((_2775 * _823) * _2786) + _2355;
    }
    else
    {
        _2570 = _2006;
        _2572 = _2008;
        _2574 = _2010;
        _2576 = _2351;
        _2578 = _2353;
        _2580 = _2355;
    }
    float _4446 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4457 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4468 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    uint _2600 = _238 + 6u;
    float _2608 = _758 / cbSceneParam._m0[86u].x;
    float _2609 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2623 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2625 = _2623.x;
    float _2626 = _2623.y;
    float _2627 = _2623.z;
    float _2628 = _2623.w;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _2683 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _2684 = _2683 / _692;
        float _2695 = _2684 * _743;
        float _2696 = _744 * _2684;
        float _2697 = (-0.0) - _2696;
        float _2699 = _2684 * _745;
        float _2701 = (cbSceneParam._m0[77u].w * _2697) / _2683;
        float _2702 = _2701 + cbSceneParam._m0[79u].w;
        float _2703 = cbSceneParam._m0[79u].w - _2696;
        float _2709 = sqrt(((_2695 * _2695) + (_2696 * _2696)) + (_2699 * _2699));
        float _2712 = (1.0 - (cbSceneParam._m0[77u].w / _2683)) * _2709;
        float _2717 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2719 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2872;
        if (abs((_2697 - _2701) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2872 = ((((_2702 > 0.0) ? exp2(_2717 * _2702) : (2.0 - exp2(_2719 * _2702))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2712;
        }
        else
        {
            float _2832 = 1.0 / cbSceneParam._m0[80u].x;
            float _2833 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : max(_2702, _2703));
            float _2834 = isnan(_2703) ? _2702 : (isnan(_2702) ? _2703 : min(_2702, _2703));
            float _2843 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : min(_2833, 0.0));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            _2872 = ((abs(_2709 / _2697) * cbSceneParam._m0[80u].y) * ((((_2843 - _2844) * 2.0) - ((exp2(_2717 * (isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0)))) - exp2(_2717 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0))))) * _2832)) - ((exp2(_2719 * _2843) - exp2(_2719 * _2844)) * _2832))) + (_2712 * cbSceneParam._m0[80u].z);
        }
        vec4 _2874 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2608, _2609, 1.0), 0.0);
        float _2883 = exp2((_2872 * (-1.44269502162933349609375)) * (1.0 - _2874.w));
        float _2884 = log2(_2883);
        float _2900 = log2(_2628);
        _2721 = (exp2(_2900 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].x)) * _2874.x) / cbSceneParam._m0[78u].x)) + _2625;
        _2723 = (exp2(_2900 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].y)) * _2874.y) / cbSceneParam._m0[78u].y)) + _2626;
        _2725 = (exp2(_2900 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2884 * cbSceneParam._m0[78u].z)) * _2874.z) / cbSceneParam._m0[78u].z)) + _2627;
        _2727 = _2883 * _2628;
    }
    else
    {
        _2721 = _2625;
        _2723 = _2626;
        _2725 = _2627;
        _2727 = _2628;
    }
    float _2739 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2740 = _2739 == 3.0;
    float _2741 = log2(_2727);
    float _2748 = exp2(_2741 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2570 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _836))) + ((_2576 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _2749 = exp2(_2741 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2572 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _836))) + ((_2578 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _2750 = exp2(_2741 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2574 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _836))) + ((_2580 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1643)) * cbPerFrame._m0[3u].x));
    float _2759 = (_2739 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2759 * (_2740 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2721)));
    SV_Target.y = _2759 * (_2740 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2723)));
    SV_Target.z = _2759 * (_2740 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2725)));
    SV_Target.w = cbInstanceData._m0[_2600].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2600].w;
}


