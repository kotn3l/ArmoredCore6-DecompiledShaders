#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1258;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3584 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _426 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_413 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307);
    float _429 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_413 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308);
    float _432 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_413 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309);
    vec4 _451 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _413) + _492;
    float _504 = ((((_471.x - _490) * _413) + _490) * 2.0) + (-1.0);
    float _506 = ((((_471.y - _491) * _413) + _491) * 2.0) + (-1.0);
    float _507 = dot(vec2(_504, _506), vec2(_504, _506));
    float _3595 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _540 = (((_528.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _504;
    float _541 = (((_528.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _506;
    float _544 = fma(_512, _226, fma(_541, _233, _540 * _219));
    float _547 = fma(_512, _227, fma(_541, _234, _540 * _220));
    float _550 = fma(_512, _228, fma(_541, _235, _540 * _221));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _583 = _581.x;
    float _584 = 1.0 - _583;
    float _593 = (cbMtdParam._m0[19u].x + dot(vec4(_554 * _544, _554 * _547, _554 * _550, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_583 - _584) * cbMtdParam._m0[24u].z) + _584) * cbMtdParam._m0[21u].z);
    float _3606 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _601 = (_594 * ((_451.x * cbMtdParam._m0[18u].x) - _426)) + _426;
    float _602 = (_594 * ((_451.y * cbMtdParam._m0[18u].y) - _429)) + _429;
    float _603 = (_594 * ((_451.z * cbMtdParam._m0[18u].z) - _432)) + _432;
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _631 = _629.x;
    float _648 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _631) * _413) + _631;
    float _652 = ((_615.x - _648) * cbMtdParam._m0[19u].z) + _648;
    float _654 = _652 - (_652 * _594);
    float _658 = (cbMtdParam._m0[19u].w * (_528.z - _501)) + _501;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _678 = (_671.x * 2.0) + (-1.0);
    float _679 = (_671.y * 2.0) + (-1.0);
    float _680 = dot(vec2(_678, _679), vec2(_678, _679));
    float _3617 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _688 = ((_671.z - _658) * _594) + _658;
    float _698 = ((sqrt(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) - _512) * _594) + _512;
    float _701 = (((_678 - _540) * _594) + _540) + (cbMtdParam._m0[21u].x * _540);
    float _702 = (((_679 - _541) * _594) + _541) + (cbMtdParam._m0[21u].x * _541);
    float _704 = cbMtdParam._m0[22u].x + _528.w;
    float _707 = fma(_698, _226, fma(_702, _233, _701 * _219));
    float _710 = fma(_698, _227, fma(_702, _234, _701 * _220));
    float _713 = fma(_698, _228, fma(_702, _235, _701 * _221));
    float _717 = inversesqrt(dot(vec3(_707, _710, _713), vec3(_707, _710, _713)));
    float _718 = _717 * _707;
    float _719 = _717 * _710;
    float _720 = _717 * _713;
    float _3628 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _721 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3650 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3661 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3672 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3683 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _726 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _740 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    float _806 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _807 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _825 = fma(_720, cbSceneParam._m0[5u].z, fma(_719, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _718));
    float _828 = fma(_720, cbSceneParam._m0[6u].z, fma(_719, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _718));
    float _831 = fma(_720, cbSceneParam._m0[7u].z, fma(_719, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _718));
    uint _845 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3694 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _857 = 1.0 - _726;
    float _858 = _854 * _857;
    float _859 = _855 * _857;
    float _860 = _856 * _857;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _726;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _726;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _726;
    float _868 = _865 + 0.039999999105930328369140625;
    float _870 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _806, cbSceneParam._m0[86u].y * _807));
    float _884 = ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * TEXCOORD_5.w) * _880.x;
    float _885 = dot(vec3(_718, _719, _720), vec3(_798, _799, _800));
    float _888 = _885 * 2.0;
    float _892 = (_888 * _718) - _798;
    float _893 = (_888 * _719) - _799;
    float _894 = (_888 * _720) - _800;
    float _898 = abs(dot(vec3(_798, _799, _800), vec3(_718, _719, _720)));
    float _3727 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _900 = sqrt(_721);
    float _913 = exp2((_900 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _919 = (1.0 - _913) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _920 = _913 * _900;
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_956, cbModelParam._m0[26u].z, fma(_952, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948));
        float _986 = fma(_956, cbModelParam._m0[27u].z, fma(_952, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948));
        float _990 = fma(_956, cbModelParam._m0[28u].z, fma(_952, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948));
        float _1015 = _948 + _718;
        float _1016 = _952 + _719;
        float _1017 = _956 + _720;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_718, _719, _720), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3775 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_718, _719, _720), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3808 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_718, _719, _720), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3841 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_956, cbModelParam._m0[30u].z, fma(_952, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _948));
        float _1301 = fma(_956, cbModelParam._m0[31u].z, fma(_952, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _948));
        float _1305 = fma(_956, cbModelParam._m0[32u].z, fma(_952, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _948));
        float _1328 = _948 + _718;
        float _1329 = _952 + _719;
        float _1330 = _956 + _720;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_718, _719, _720), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3904 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_718, _719, _720), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3937 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_718, _719, _720), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _3970 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1258;
        _1567 = _1258;
        _1568 = _1258;
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1270)) + _1270;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1271)) + _1271;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _892 * 0.5;
    float _1635 = _893 * 0.5;
    float _1636 = _894 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _721);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_956, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_956, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_956, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_894, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _892));
        float _1764 = fma(_894, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _892));
        float _1767 = fma(_894, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _892));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1795 = frontier_phi_14_12_ladder;
        }
        float _1997;
        if (_1764 > 0.0)
        {
            _1997 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1997 = frontier_phi_23_19_ladder;
        }
        float _2251;
        if (_1767 > 0.0)
        {
            _2251 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2251 = frontier_phi_35_30_ladder;
        }
        float _2253 = isnan(_1997) ? _1795 : (isnan(_1795) ? _1997 : min(_1795, _1997));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1761) + _1750;
        float _2259 = (_2254 * _1764) + _1754;
        float _2260 = (_2254 * _1767) + _1758;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2263 = (-1.0) - _2261;
        float _2265 = _2261 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2260 > _2265) || ((_2260 < _2263) || ((_2259 > _2265) || ((_2259 < _2263) || ((_2258 < _2263) || (_2258 > _2265))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2388 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_13_35_ladder = _2388.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2388.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2388.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_13_35_ladder_2;
        _1785 = frontier_phi_13_35_ladder_1;
        _1787 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_892, _893, _894), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _721);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1845 = fma(_956, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948)) + cbModelParam._m0[21u].w;
        float _1849 = fma(_956, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948)) + cbModelParam._m0[22u].w;
        float _1853 = fma(_956, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948)) + cbModelParam._m0[23u].w;
        float _1856 = fma(_894, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _892));
        float _1859 = fma(_894, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _892));
        float _1862 = fma(_894, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _892));
        float _2002;
        if (_1856 > 0.0)
        {
            _2002 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2002 = frontier_phi_25_21_ladder;
        }
        float _2278;
        if (_1859 > 0.0)
        {
            _2278 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2278 = frontier_phi_37_32_ladder;
        }
        float _2491;
        if (_1862 > 0.0)
        {
            _2491 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2491 = frontier_phi_46_43_ladder;
        }
        float _2493 = isnan(_2278) ? _2002 : (isnan(_2002) ? _2278 : min(_2002, _2278));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1856) + _1845;
        float _2499 = (_2494 * _1859) + _1849;
        float _2500 = (_2494 * _1862) + _1853;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_22_46_ladder = _2699.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2699.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2699.x * cbModelParam._m0[1u].z;
        }
        _1881 = frontier_phi_22_46_ladder_2;
        _1883 = frontier_phi_22_46_ladder_1;
        _1885 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_892, _893, _894), _1792);
        _1881 = _1865.x * cbModelParam._m0[1u].z;
        _1883 = _1865.y * cbModelParam._m0[1u].z;
        _1885 = _1865.z * cbModelParam._m0[1u].z;
    }
    float _1898 = (((_919 * _868) + _920) * _884) * ((cbModelParam._m0[1u].w * (_1881 - _1783)) + _1783);
    float _1900 = (((_919 * _870) + _920) * _884) * ((cbModelParam._m0[1u].w * (_1883 - _1785)) + _1785);
    float _1902 = (((_919 * _871) + _920) * _884) * ((cbModelParam._m0[1u].w * (_1885 - _1787)) + _1787);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1898 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1898 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1898 * cbSceneParam._m0[91u].x));
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1931 = _884 + (-1.0);
    float _1936 = (cbLight._m0[_1924].x * _1931) + 1.0;
    float _1937 = (cbLight._m0[_1924].y * _1931) + 1.0;
    float _1938 = (cbLight._m0[_1924].z * _1931) + 1.0;
    float _1939 = (cbLight._m0[_1924].w * _1931) + 1.0;
    uint _1940 = _1923 + 5u;
    float _1946 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1950 = _1923 + 4u;
    float _1956 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1960 = _1923 | 1u;
    float _1971 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_718, _719, _720));
    float _1974 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_718, _719, _720));
    float _4106 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _4117 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1979 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.3183098733425140380859375;
    float _1981 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _1988 = ((cbLight._m0[_1940].x * _1946) * _1981) + ((cbLight._m0[_1950].x * _1956) * _1979);
    float _1989 = ((_1946 * cbLight._m0[_1940].y) * _1981) + ((_1956 * cbLight._m0[_1950].y) * _1979);
    float _1990 = ((_1946 * cbLight._m0[_1940].z) * _1981) + ((_1956 * cbLight._m0[_1950].z) * _1979);
    uvec4 _1994 = floatBitsToUint(cbLight._m0[_1923 + 12u]);
    bool _1996 = _1994.x == 0u;
    float _2007;
    float _2009;
    float _2011;
    if (_1996)
    {
        _2007 = _1988;
        _2009 = _1989;
        _2011 = _1990;
    }
    else
    {
        uint _2015 = _1923 + 6u;
        float _2031 = (dot(vec3(cbLight._m0[_1923 + 2u].xyz), vec3(_718, _719, _720)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _4128 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2034 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2007 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1988;
        _2009 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1989;
        _2011 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1990;
    }
    bool _2014 = _1994.y == 0u;
    float _2052;
    float _2054;
    float _2056;
    if (_2014)
    {
        _2052 = _2007;
        _2054 = _2009;
        _2056 = _2011;
    }
    else
    {
        uint _2222 = _1923 + 7u;
        float _2238 = (dot(vec3(cbLight._m0[_1923 + 3u].xyz), vec3(_718, _719, _720)) * 0.5) + 0.5;
        float _2239 = _2238 * _2238;
        float _4144 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2240 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2241 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2052 = (((cbLight._m0[_2222].x * 0.3183098733425140380859375) * _2240) * _2241) + _2007;
        _2054 = (((cbLight._m0[_2222].y * 0.3183098733425140380859375) * _2240) * _2241) + _2009;
        _2056 = (((cbLight._m0[_2222].z * 0.3183098733425140380859375) * _2240) * _2241) + _2011;
    }
    uint _2059 = _1923 + 8u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _721) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1923].x + _798;
    float _2075 = cbLight._m0[_1923].y + _799;
    float _2076 = cbLight._m0[_1923].z + _800;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1923].xyz));
    float _4160 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2088 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2089 = dot(vec3(_718, _719, _720), vec3(_2081, _2082, _2083));
    float _4182 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2081, _2082, _2083));
    float _4193 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2073 * _2073;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2109 = exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0);
    float _2110 = 0.959999978542327880859375 - _865;
    float _2112 = 0.959999978542327880859375 - _866;
    float _2113 = 0.959999978542327880859375 - _867;
    float _2120 = 1.0 - _2073;
    float _2131 = (0.5 / (((_2088 * ((_2087 * _2120) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2120) + _2073) * _2087))) * _2087;
    float _4204 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    uint _2144 = _1923 + 9u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1960].w)) * _721) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_1960].x + _798;
    float _2158 = cbLight._m0[_1960].y + _799;
    float _2159 = cbLight._m0[_1960].z + _800;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1960].xyz));
    float _4215 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2171 = dot(vec3(_718, _719, _720), vec3(_2164, _2165, _2166));
    float _4226 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_1960].xyz), vec3(_2164, _2165, _2166));
    float _4237 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2156 * _2156;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2190 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
    float _2197 = 1.0 - _2156;
    float _2207 = (0.5 / (((_2088 * ((_2170 * _2197) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2197) + _2156) * _2170))) * _2170;
    float _4248 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    float _2219 = (((((_2190 * _2110) + _868) * cbLight._m0[_2144].x) * _2209) * _1946) + (((((_2109 * _2110) + _868) * cbLight._m0[_2059].x) * _2133) * _1956);
    float _2220 = (((((_2190 * _2112) + _870) * cbLight._m0[_2144].y) * _2209) * _1946) + (((((_2109 * _2112) + _870) * cbLight._m0[_2059].y) * _2133) * _1956);
    float _2221 = (((((_2190 * _2113) + _871) * cbLight._m0[_2144].z) * _2209) * _1946) + (((((_2109 * _2113) + _871) * cbLight._m0[_2059].z) * _2133) * _1956);
    float _2283;
    float _2285;
    float _2287;
    if (_1996)
    {
        _2283 = _2219;
        _2285 = _2220;
        _2287 = _2221;
    }
    else
    {
        uint _2289 = _1923 + 2u;
        uint _2293 = _1923 + 10u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _721) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _798;
        float _2310 = cbLight._m0[_2289].y + _799;
        float _2311 = cbLight._m0[_2289].z + _800;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_2289].xyz));
        float _4259 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2323 = dot(vec3(_718, _719, _720), vec3(_2316, _2317, _2318));
        float _4270 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4281 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2342 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
        float _2349 = 1.0 - _2308;
        float _2359 = (0.5 / (((_2088 * ((_2322 * _2349) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2349) + _2308) * _2322))) * _2322;
        float _4292 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2361 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2362 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2283 = (((((_2342 * _2110) + _868) * cbLight._m0[_2293].x) * _2361) * _2362) + _2219;
        _2285 = (((((_2342 * _2112) + _870) * cbLight._m0[_2293].y) * _2361) * _2362) + _2220;
        _2287 = (((((_2342 * _2113) + _871) * cbLight._m0[_2293].z) * _2361) * _2362) + _2221;
    }
    float _2397;
    float _2399;
    float _2401;
    if (_2014)
    {
        _2397 = _2283;
        _2399 = _2285;
        _2401 = _2287;
    }
    else
    {
        uint _2408 = _1923 + 3u;
        uint _2412 = _1923 + 11u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _721) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _798;
        float _2429 = cbLight._m0[_2408].y + _799;
        float _2430 = cbLight._m0[_2408].z + _800;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_2408].xyz));
        float _4308 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2442 = dot(vec3(_718, _719, _720), vec3(_2435, _2436, _2437));
        float _4319 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4330 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2088 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2088 * _2468) + _2427) * _2441))) * _2441;
        float _4341 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2397 = (((((_2461 * _2110) + _868) * cbLight._m0[_2412].x) * _2480) * _2481) + _2283;
        _2399 = (((((_2461 * _2112) + _870) * cbLight._m0[_2412].y) * _2480) * _2481) + _2285;
        _2401 = (((((_2461 * _2113) + _871) * cbLight._m0[_2412].z) * _2480) * _2481) + _2287;
    }
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_1921.y == 0u)
    {
        float _2556 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2557 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2556;
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2556;
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2556;
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.x;
        uint _2583 = uint((float(_2571.y) * floor(float(uint(cbSceneParam._m0[85u].y * _807) / _2572))) + floor(float(uint(cbSceneParam._m0[85u].x * _806) / _2572)));
        float _2593 = (log2(_2559 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2594 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        uint _2597 = uint(isnan(14.0) ? _2594 : (isnan(_2594) ? 14.0 : min(_2594, 14.0)));
        uvec4 _2602 = texelFetch(g_lightClusterGridBuffer, int(((_2597 << 2u) + (_2583 << 6u)) >> 2u));
        uint _2603 = _2602.x;
        uint _2604 = _2571.z;
        float _2704;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        if (((((1u << ((_2604 >> 4u) & 15u)) + 4294967295u) & _2603) == 0u) || ((_2604 & 240u) == 0u))
        {
            _2704 = 0.0;
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
        }
        else
        {
            float _2705;
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            uint _2855 = 0u;
            uint _2864;
            bool _2865;
            for (;;)
            {
                _2864 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                _2865 = _2864 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2865)
                {
                    frontier_phi_61_pred = _2849;
                    frontier_phi_61_pred_1 = _2854;
                    frontier_phi_61_pred_2 = _2853;
                    frontier_phi_61_pred_3 = _2852;
                    frontier_phi_61_pred_4 = _2851;
                    frontier_phi_61_pred_5 = _2850;
                }
                else
                {
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    uint _2979;
                    _2973 = _2849;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2864;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    for (;;)
                    {
                        uint _2983 = uint(findLSB(_2979)) + (_2855 << 5u);
                        uint _2980 = (_2979 + 4294967295u) & _2979;
                        uint _2985 = _2983 * 48u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2985)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2985 + 3u)).x));
                        uint _3005 = (_2983 * 48u) + 4u;
                        vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3024 = (_2983 * 48u) + 8u;
                        vec3 _3035 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3024)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3024 + 2u)).x));
                        float _3039 = _2999.x - _2557;
                        float _3040 = _2999.y - _2558;
                        float _3041 = _2999.z - _2559;
                        float _3042 = dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041));
                        float _3045 = inversesqrt(_3042);
                        float _3046 = _3045 * _3039;
                        float _3047 = _3045 * _3040;
                        float _3048 = _3045 * _3041;
                        float _3049 = dot(vec3(_825, _828, _831), vec3(_3046, _3047, _3048));
                        float _3054 = 1.0 - (_3042 * _2999.w);
                        float _4367 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3056 = sqrt(_3042) * _3018.w;
                        float _3059 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _3049) + _3060;
                        float _3066 = _3056 * _3056;
                        float _3070 = ((isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))) * _3055) / ((_3066 * 0.699999988079071044921875) + 1.0);
                        float _3074 = (-0.0) - _2557;
                        float _3075 = (-0.0) - _2558;
                        float _3076 = (-0.0) - _2559;
                        float _3080 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
                        float _3081 = _3080 * _3074;
                        float _3082 = _3080 * _3075;
                        float _3083 = _3080 * _3076;
                        float _3091 = exp2(log2(1.0 / ((_3066 * 3.5) + 5.0)) * 0.25);
                        float _3092 = 1.0 - _900;
                        float _3099 = sqrt(1.0 - ((1.0 - (_3092 * _3092)) * (1.0 - (_3091 * _3091))));
                        float _3100 = _3099 * _3099;
                        float _3101 = _3100 * _3100;
                        float _3102 = _3081 + _3046;
                        float _3103 = _3082 + _3047;
                        float _3104 = _3083 + _3048;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3112 = dot(vec3(_825, _828, _831), vec3(_3081, _3082, _3083));
                        float _4383 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3115 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3116 = dot(vec3(_825, _828, _831), vec3(_3108 * _3102, _3108 * _3103, _3108 * _3104));
                        float _4394 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3119 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3123 = ((_3119 * _3119) * (_3101 + (-1.0))) + 1.0;
                        float _3124 = _3059 * _3100;
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * _3049) + _3125;
                        float _4405 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3129 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3130 = 1.0 - _3100;
                        float _3140 = (0.5 / (((_3129 * ((_3115 * _3130) + _3100)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3100) * _3115))) * _3129;
                        float _4416 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3151 = (((_3101 * 3.1415927410125732421875) * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) / ((_3123 * _3123) * ((_3066 * 2.1991131305694580078125) + 3.141590118408203125))) * _3055;
                        _2908 = (_3070 * _3018.x) + _2976;
                        _2909 = (_3070 * _3018.y) + _2977;
                        _2910 = (_3070 * _3018.z) + _2978;
                        _2905 = (_3151 * _3035.x) + _2973;
                        _2906 = (_3151 * _3035.y) + _2974;
                        _2907 = (_3151 * _3035.z) + _2975;
                        if (_2980 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2973 = _2905;
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2980;
                        }
                    }
                    frontier_phi_61_pred = _2905;
                    frontier_phi_61_pred_1 = _2910;
                    frontier_phi_61_pred_2 = _2909;
                    frontier_phi_61_pred_3 = _2908;
                    frontier_phi_61_pred_4 = _2907;
                    frontier_phi_61_pred_5 = _2906;
                }
                _2705 = frontier_phi_61_pred;
                _2715 = frontier_phi_61_pred_1;
                _2713 = frontier_phi_61_pred_2;
                _2711 = frontier_phi_61_pred_3;
                _2709 = frontier_phi_61_pred_4;
                _2707 = frontier_phi_61_pred_5;
                uint _2856 = _2855 + 1u;
                if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2849 = _2705;
                    _2850 = _2707;
                    _2851 = _2709;
                    _2852 = _2711;
                    _2853 = _2713;
                    _2854 = _2715;
                    _2855 = _2856;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2704 = _2705;
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
        }
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.z;
        uint _2721 = (_2719 >> 8u) & 15u;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((4294967295u << _2721) & _2603) == 0u)
        {
            _2817 = _2704;
            _2819 = _2706;
            _2821 = _2708;
            _2823 = _2710;
            _2825 = _2712;
            _2827 = _2714;
        }
        else
        {
            float _2842 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
            float _2843 = _2842 * _2557;
            float _2844 = _2842 * _2558;
            float _2845 = _2842 * _2559;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2721 < ((_2719 >> 12u) & 15u))
            {
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2956 = _2704;
                float _2957 = _2706;
                float _2958 = _2708;
                float _2959 = _2710;
                float _2960 = _2712;
                float _2961 = _2714;
                uint _2962 = _2721;
                uint _2971;
                bool _2972;
                for (;;)
                {
                    _2971 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2962 << 2u)) >> 2u)).x;
                    _2972 = _2971 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2972)
                    {
                        frontier_phi_67_pred = _2959;
                        frontier_phi_67_pred_1 = _2960;
                        frontier_phi_67_pred_2 = _2961;
                        frontier_phi_67_pred_3 = _2958;
                        frontier_phi_67_pred_4 = _2957;
                        frontier_phi_67_pred_5 = _2956;
                    }
                    else
                    {
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3169 = _2956;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        float _3174 = _2961;
                        uint _3175 = _2971;
                        uint _3176;
                        vec4 _3201;
                        float _3202;
                        vec4 _3217;
                        vec3 _3229;
                        vec4 _3244;
                        vec4 _3260;
                        float _3306;
                        bool _3307;
                        for (;;)
                        {
                            uint _3186 = ((_2962 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3175));
                            _3176 = (_3175 + 4294967295u) & _3175;
                            uint _3188 = _3186 * 40u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3202 = _3201.w;
                            uint _3204 = (_3186 * 40u) + 4u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3186 * 40u) + 8u;
                            _3229 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x));
                            uint _3231 = (_3186 * 40u) + 16u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3247 = (_3186 * 40u) + 20u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3262 = (_3186 * 40u) + 24u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3281 = (_3186 * 40u) + 28u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            _3306 = fma(_2559, _3294.z, fma(_2558, _3294.y, _3294.x * _2557)) + _3294.w;
                            _3307 = !((fma(_2559, _3275.z, fma(_2558, _3275.y, _3275.x * _2557)) + _3275.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3307)
                            {
                                float _3334 = _3201.x - _2557;
                                float _3335 = _3201.y - _2558;
                                float _3336 = _3201.z - _2559;
                                float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                                float _3340 = inversesqrt(_3337);
                                float _3341 = _3340 * _3334;
                                float _3342 = _3340 * _3335;
                                float _3343 = _3340 * _3336;
                                float _3347 = 1.0 - (_3337 / (_3202 * _3202));
                                float _4427 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3352 = sqrt(_3337) * _3217.w;
                                float _3354 = 1.39999997615814208984375 / (_3352 + 1.39999997615814208984375);
                                float _3355 = _3354 * _3354;
                                float _3358 = ((1.0 - _3355) * dot(vec3(_3341, _3342, _3343), vec3(_825, _828, _831))) + _3355;
                                float _3361 = _3352 * _3352;
                                float _3365 = (fma(_2559, _3244.z, fma(_2558, _3244.y, _3244.x * _2557)) + _3244.w) / _3306;
                                float _3366 = (fma(_2559, _3260.z, fma(_2558, _3260.y, _3260.x * _2557)) + _3260.w) / _3306;
                                float _3370 = 1.0 - dot(vec2(_3365, _3366), vec2(_3365, _3366));
                                float _4443 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3372 = _3371 * (((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3348) / ((_3361 * 0.699999988079071044921875) + 1.0));
                                float _3384 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                                float _3385 = 1.0 - _900;
                                float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                                float _3393 = _3392 * _3392;
                                float _3394 = _3393 * _3393;
                                float _3395 = _3341 - _2843;
                                float _3396 = _3342 - _2844;
                                float _3397 = _3343 - _2845;
                                float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                                float _3405 = dot(vec3(_825, _828, _831), vec3((-0.0) - _2843, (-0.0) - _2844, (-0.0) - _2845));
                                float _4454 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3408 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3409 = dot(vec3(_825, _828, _831), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                                float _4465 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                                float _3417 = _3354 * _3393;
                                float _3418 = _3417 * _3417;
                                float _3424 = ((1.0 - _3418) * dot(vec3(_825, _828, _831), vec3(_3341, _3342, _3343))) + _3418;
                                float _4476 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3426 = 1.0 - _3393;
                                float _3436 = (0.5 / (((_3425 * ((_3408 * _3426) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3425 * _3426) + _3393) * _3408))) * _3425;
                                float _4487 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3446 = (_3371 * _3348) * (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) / ((_3416 * _3416) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3446 * _3229.x;
                                frontier_phi_73_pred_1 = _3446 * _3229.y;
                                frontier_phi_73_pred_2 = _3372 * _3217.z;
                                frontier_phi_73_pred_3 = _3372 * _3217.y;
                                frontier_phi_73_pred_4 = _3372 * _3217.x;
                                frontier_phi_73_pred_5 = _3446 * _3229.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3450 = frontier_phi_73_pred;
                            _3451 = frontier_phi_73_pred_1;
                            _3455 = frontier_phi_73_pred_2;
                            _3454 = frontier_phi_73_pred_3;
                            _3453 = frontier_phi_73_pred_4;
                            _3452 = frontier_phi_73_pred_5;
                            _3159 = _3453 + _3172;
                            _3160 = _3454 + _3173;
                            _3161 = _3455 + _3174;
                            _3156 = _3450 + _3169;
                            _3157 = _3451 + _3170;
                            _3158 = _3452 + _3171;
                            if (_3176 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3176;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3159;
                        frontier_phi_67_pred_1 = _3160;
                        frontier_phi_67_pred_2 = _3161;
                        frontier_phi_67_pred_3 = _3158;
                        frontier_phi_67_pred_4 = _3157;
                        frontier_phi_67_pred_5 = _3156;
                    }
                    _2824 = frontier_phi_67_pred;
                    _2826 = frontier_phi_67_pred_1;
                    _2828 = frontier_phi_67_pred_2;
                    _2822 = frontier_phi_67_pred_3;
                    _2820 = frontier_phi_67_pred_4;
                    _2818 = frontier_phi_67_pred_5;
                    uint _2963 = _2962 + 1u;
                    if (_2963 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2956 = _2818;
                        _2957 = _2820;
                        _2958 = _2822;
                        _2959 = _2824;
                        _2960 = _2826;
                        _2961 = _2828;
                        _2962 = _2963;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2826;
                frontier_phi_55_56_ladder_1 = _2828;
                frontier_phi_55_56_ladder_2 = _2824;
                frontier_phi_55_56_ladder_3 = _2822;
                frontier_phi_55_56_ladder_4 = _2820;
                frontier_phi_55_56_ladder_5 = _2818;
            }
            else
            {
                frontier_phi_55_56_ladder = _2712;
                frontier_phi_55_56_ladder_1 = _2714;
                frontier_phi_55_56_ladder_2 = _2710;
                frontier_phi_55_56_ladder_3 = _2708;
                frontier_phi_55_56_ladder_4 = _2706;
                frontier_phi_55_56_ladder_5 = _2704;
            }
            _2817 = frontier_phi_55_56_ladder_5;
            _2819 = frontier_phi_55_56_ladder_4;
            _2821 = frontier_phi_55_56_ladder_3;
            _2823 = frontier_phi_55_56_ladder_2;
            _2825 = frontier_phi_55_56_ladder;
            _2827 = frontier_phi_55_56_ladder_1;
        }
        float _2832 = isnan(1.0) ? _884 : (isnan(_884) ? 1.0 : min(_884, 1.0));
        _2616 = (_2832 * _2823) + _2052;
        _2618 = (_2832 * _2825) + _2054;
        _2620 = (_2832 * _2827) + _2056;
        _2622 = ((_2817 * _868) * _2832) + _2397;
        _2624 = ((_2819 * _870) * _2832) + _2399;
        _2626 = ((_2821 * _871) * _2832) + _2401;
    }
    else
    {
        _2616 = _2052;
        _2618 = _2054;
        _2620 = _2056;
        _2622 = _2397;
        _2624 = _2399;
        _2626 = _2401;
    }
    float _4503 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4514 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4525 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    uint _2646 = _238 + 6u;
    float _2654 = _806 / cbSceneParam._m0[86u].x;
    float _2655 = _807 / cbSceneParam._m0[86u].y;
    vec4 _2669 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, (log2((isnan(cbSceneParam._m0[77u].w) ? _740 : (isnan(_740) ? cbSceneParam._m0[77u].w : min(_740, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2671 = _2669.x;
    float _2672 = _2669.y;
    float _2673 = _2669.z;
    float _2674 = _2669.w;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_740 > cbSceneParam._m0[78u].w)
    {
        float _2729 = isnan(_740) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _740 : min(cbSceneParam._m0[80u].w, _740));
        float _2730 = _2729 / _740;
        float _2741 = _2730 * _791;
        float _2742 = _792 * _2730;
        float _2743 = (-0.0) - _2742;
        float _2745 = _2730 * _793;
        float _2747 = (cbSceneParam._m0[77u].w * _2743) / _2729;
        float _2748 = _2747 + cbSceneParam._m0[79u].w;
        float _2749 = cbSceneParam._m0[79u].w - _2742;
        float _2755 = sqrt(((_2741 * _2741) + (_2742 * _2742)) + (_2745 * _2745));
        float _2758 = (1.0 - (cbSceneParam._m0[77u].w / _2729)) * _2755;
        float _2763 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2765 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2918;
        if (abs((_2743 - _2747) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2918 = ((((_2748 > 0.0) ? exp2(_2763 * _2748) : (2.0 - exp2(_2765 * _2748))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2758;
        }
        else
        {
            float _2878 = 1.0 / cbSceneParam._m0[80u].x;
            float _2879 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : max(_2748, _2749));
            float _2880 = isnan(_2749) ? _2748 : (isnan(_2748) ? _2749 : min(_2748, _2749));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            _2918 = ((abs(_2755 / _2743) * cbSceneParam._m0[80u].y) * ((((_2889 - _2890) * 2.0) - ((exp2(_2763 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0)))) - exp2(_2763 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))))) * _2878)) - ((exp2(_2765 * _2889) - exp2(_2765 * _2890)) * _2878))) + (_2758 * cbSceneParam._m0[80u].z);
        }
        vec4 _2920 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2654, _2655, 1.0), 0.0);
        float _2929 = exp2((_2918 * (-1.44269502162933349609375)) * (1.0 - _2920.w));
        float _2930 = log2(_2929);
        float _2946 = log2(_2674);
        _2767 = (exp2(_2946 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].x)) * _2920.x) / cbSceneParam._m0[78u].x)) + _2671;
        _2769 = (exp2(_2946 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].y)) * _2920.y) / cbSceneParam._m0[78u].y)) + _2672;
        _2771 = (exp2(_2946 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].z)) * _2920.z) / cbSceneParam._m0[78u].z)) + _2673;
        _2773 = _2929 * _2674;
    }
    else
    {
        _2767 = _2671;
        _2769 = _2672;
        _2771 = _2673;
        _2773 = _2674;
    }
    float _2785 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2786 = _2785 == 3.0;
    float _2787 = log2(_2773);
    float _2794 = exp2(_2787 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2616 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _884))) + ((_2622 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _2795 = exp2(_2787 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2618 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _884))) + ((_2624 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _2796 = exp2(_2787 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2620 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _884))) + ((_2626 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1692)) * cbPerFrame._m0[3u].x));
    float _2805 = (_2785 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2805 * (_2786 ? _2794 : (_2794 + (cbSceneParam._m0[72u].w * _2767)));
    SV_Target.y = _2805 * (_2786 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2769)));
    SV_Target.z = _2805 * (_2786 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2771)));
    SV_Target.w = cbInstanceData._m0[_2646].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2646].w;
}


