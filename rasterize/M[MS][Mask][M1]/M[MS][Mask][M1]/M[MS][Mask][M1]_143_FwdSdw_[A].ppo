#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1614;
float _4274;
float _4275;
float _4276;
float _4277;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4286 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4297 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4308 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _354 = _349.x * cbMtdParam._m0[11u].x;
    float _355 = _349.y * cbMtdParam._m0[11u].y;
    float _356 = _349.z * cbMtdParam._m0[11u].z;
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _443 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _460 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _394.x) * 2.0) - ((((_431 - _443) * cbMtdParam._m0[23u].w) + _443) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4319 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _468 = (_461 * ((_375.x * cbMtdParam._m0[12u].x) - _354)) + _354;
    float _469 = (_461 * ((_375.y * cbMtdParam._m0[12u].y) - _355)) + _355;
    float _470 = (_461 * ((_375.z * cbMtdParam._m0[12u].z) - _356)) + _356;
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _509 = _507.x;
    float _519 = dot(vec4(_509, _507.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _533 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _394.y) * 2.0) - ((((_509 - _519) * cbMtdParam._m0[23u].w) + _519) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4330 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _534 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _541 = (_534 * ((_487.x * cbMtdParam._m0[13u].x) - _468)) + _468;
    float _542 = (_534 * ((_487.y * cbMtdParam._m0[13u].y) - _469)) + _469;
    float _543 = (_534 * ((_487.z * cbMtdParam._m0[13u].z) - _470)) + _470;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _581 = _579.x;
    float _591 = dot(vec4(_581, _579.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _603 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _394.z) * 2.0) - ((((_581 - _591) * cbMtdParam._m0[23u].w) + _591) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4341 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _611 = (_604 * ((_562.x * cbMtdParam._m0[14u].x) - _541)) + _541;
    float _612 = (_604 * ((_562.y * cbMtdParam._m0[14u].y) - _542)) + _542;
    float _613 = (_604 * ((_562.z * cbMtdParam._m0[14u].z) - _543)) + _543;
    float _617 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _611;
    float _620 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _612;
    float _623 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _613;
    float _630 = ((_611 - _617) * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) + _617;
    float _631 = ((_612 - _620) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) + _620;
    float _632 = ((_613 - _623) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) + _623;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _311) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _312) + cbTextureTilingScale._m0[14u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _713 = _711.x;
    float _714 = _711.y;
    float _715 = _711.z;
    float _722 = ((_694.x - _713) * _461) + _713;
    float _723 = ((_694.y - _714) * _461) + _714;
    float _724 = ((_694.z - _715) * _461) + _715;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _747 = ((_736.x - _722) * _534) + _722;
    float _748 = ((_736.y - _723) * _534) + _723;
    float _749 = ((_736.z - _724) * _534) + _724;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _774 = ((_761.z - _749) * _604) + _749;
    float _777 = ((((_761.x - _747) * _604) + _747) * 2.0) + (-1.0);
    float _778 = ((((_761.y - _748) * _604) + _748) * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _4352 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _784 = sqrt(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))));
    vec4 _802 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _814 = (_777 + ((((_669.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_802.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _815 = (_778 + ((((_669.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_802.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _818 = fma(_784, _259, fma(_815, _266, _814 * _252));
    float _821 = fma(_784, _260, fma(_815, _267, _814 * _253));
    float _824 = fma(_784, _261, fma(_815, _268, _814 * _254));
    float _828 = inversesqrt(dot(vec3(_818, _821, _824), vec3(_818, _821, _824)));
    vec4 _855 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _857 = _855.x;
    float _858 = 1.0 - _857;
    float _866 = (cbMtdParam._m0[19u].x + dot(vec4(_828 * _818, _828 * _821, _828 * _824, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_857 - _858) * cbMtdParam._m0[24u].z) + _858) * cbMtdParam._m0[21u].z);
    float _4363 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _867 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _874 = (_867 * ((_650.x * cbMtdParam._m0[18u].x) - _630)) + _630;
    float _875 = (_867 * ((_650.y * cbMtdParam._m0[18u].y) - _631)) + _631;
    float _876 = (_867 * ((_650.z * cbMtdParam._m0[18u].z) - _632)) + _632;
    vec4 _902 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _904 = _902.x;
    float _922 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _904) * _461) + _904;
    float _939 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _922) * _534) + _922;
    float _957 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _939) * _604) + _939;
    float _961 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _957) * cbMtdParam._m0[19u].z) + _957;
    float _963 = _961 - (_961 * _867);
    float _968 = (((_669.z - _774) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _774;
    float _972 = ((_802.z - _968) * cbMtdParam._m0[19u].w) + _968;
    vec4 _985 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _992 = (_985.x * 2.0) + (-1.0);
    float _993 = (_985.y * 2.0) + (-1.0);
    float _994 = dot(vec2(_992, _993), vec2(_992, _993));
    float _4374 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _1002 = ((_985.z - _972) * _867) + _972;
    float _1012 = ((sqrt(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) - _784) * _867) + _784;
    float _1015 = (((_992 - _814) * _867) + _814) + (cbMtdParam._m0[21u].x * _814);
    float _1016 = (((_993 - _815) * _867) + _815) + (cbMtdParam._m0[21u].x * _815);
    float _1020 = cbMtdParam._m0[22u].x + _802.w;
    float _1023 = fma(_1012, _259, fma(_1016, _266, _1015 * _252));
    float _1026 = fma(_1012, _260, fma(_1016, _267, _1015 * _253));
    float _1029 = fma(_1012, _261, fma(_1016, _268, _1015 * _254));
    float _1033 = inversesqrt(dot(vec3(_1023, _1026, _1029), vec3(_1023, _1026, _1029)));
    float _1034 = _1033 * _1023;
    float _1035 = _1033 * _1026;
    float _1036 = _1033 * _1029;
    float _4385 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1037 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4407 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4418 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4429 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4440 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _1042 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _1056 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1106 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1096);
    float _1107 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1096);
    float _1108 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1096);
    float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
    float _1113 = _1106 * _1112;
    float _1114 = _1107 * _1112;
    float _1115 = _1108 * _1112;
    vec4 _1120 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1122 = _1120.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1294 = sqrt(((_1106 * _1106) + (_1107 * _1107)) + (_1108 * _1108));
        float _1300 = (cbMatDynParam._m0[5u].x * _1294) + cbMatDynParam._m0[5u].y;
        float _4451 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1305 = (cbMatDynParam._m0[5u].z * _1294) + cbMatDynParam._m0[5u].w;
        float _4462 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) - _1301)) + _1301) < ((_1122 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1133 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1134 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1152 = fma(_1036, cbSceneParam._m0[5u].z, fma(_1035, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1034));
    float _1155 = fma(_1036, cbSceneParam._m0[6u].z, fma(_1035, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1034));
    float _1158 = fma(_1036, cbSceneParam._m0[7u].z, fma(_1035, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1034));
    uint _1171 = _292 + 9u;
    uint _1172 = _1171 + uint(cbMatDynParam._m0[0u].w);
    float _1178 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * cbInstanceData._m0[_1172].x;
    float _1179 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * cbInstanceData._m0[_1172].y;
    float _1180 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * cbInstanceData._m0[_1172].z;
    float _4473 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1181 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _4484 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _4495 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1183 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _1184 = 1.0 - _1042;
    float _1185 = _1181 * _1184;
    float _1186 = _1182 * _1184;
    float _1187 = _1183 * _1184;
    float _1192 = (_1181 + (-0.039999999105930328369140625)) * _1042;
    float _1193 = (_1182 + (-0.039999999105930328369140625)) * _1042;
    float _1194 = (_1183 + (-0.039999999105930328369140625)) * _1042;
    float _1195 = _1192 + 0.039999999105930328369140625;
    float _1197 = _1193 + 0.039999999105930328369140625;
    float _1198 = _1194 + 0.039999999105930328369140625;
    vec4 _1207 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1133, cbSceneParam._m0[86u].y * _1134));
    float _1211 = ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * TEXCOORD_5.w) * _1207.x;
    float _1212 = dot(vec3(_1034, _1035, _1036), vec3(_1113, _1114, _1115));
    float _1215 = _1212 * 2.0;
    float _1219 = (_1215 * _1034) - _1113;
    float _1220 = (_1215 * _1035) - _1114;
    float _1221 = (_1215 * _1036) - _1115;
    float _1225 = abs(dot(vec3(_1113, _1114, _1115), vec3(_1034, _1035, _1036)));
    float _4506 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _1227 = sqrt(_1037);
    float _1240 = exp2((_1227 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1227 * 3.0));
    float _1246 = (1.0 - _1240) * ((_1227 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1247 = _1240 * _1227;
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1613;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1338 = fma(_1283, cbModelParam._m0[26u].z, fma(_1279, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1275));
        float _1342 = fma(_1283, cbModelParam._m0[27u].z, fma(_1279, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1275));
        float _1346 = fma(_1283, cbModelParam._m0[28u].z, fma(_1279, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1275));
        float _1371 = _1275 + _1034;
        float _1372 = _1279 + _1035;
        float _1373 = _1283 + _1036;
        float _1383 = fma(_1373, cbModelParam._m0[26u].z, fma(_1372, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1371)) - _1338;
        float _1384 = fma(_1373, cbModelParam._m0[27u].z, fma(_1372, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1371)) - _1342;
        float _1385 = fma(_1373, cbModelParam._m0[28u].z, fma(_1372, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1371)) - _1346;
        float _1389 = inversesqrt(dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385)));
        float _1402 = ((_1389 * _1383) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1338 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1389 * _1384) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1342 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1389 * _1385) / cbModelParam._m0[34u].z) + ((((((_1346 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        float _1441 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1407.x + (-0.5));
        float _1443 = _1441 * (_1407.y + (-0.5));
        float _1444 = _1441 * (_1407.z + (-0.5));
        float _1451 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1414.x + (-0.5));
        float _1453 = _1451 * (_1414.y + (-0.5));
        float _1454 = _1451 * (_1414.z + (-0.5));
        float _1461 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1421.x + (-0.5));
        float _1463 = _1461 * (_1421.y + (-0.5));
        float _1464 = _1461 * (_1421.z + (-0.5));
        float _1471 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1428.x + (-0.5));
        float _1473 = _1471 * (_1428.y + (-0.5));
        float _1474 = _1471 * (_1428.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1495 = (dot(vec3(_1034, _1035, _1036), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4532 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1505 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4543 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4554 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_1507 + 1.0))) + _1512) * _1475;
        float _1522 = _1443 * 0.5;
        float _1523 = _1453 * 0.5;
        float _1524 = _1463 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_1034, _1035, _1036), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4565 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4576 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4587 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_1549 + 1.0))) + _1554) * _1476;
        float _1564 = _1444 * 0.5;
        float _1565 = _1454 * 0.5;
        float _1566 = _1464 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_1034, _1035, _1036), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4598 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4609 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4620 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_1591 + 1.0))) + _1596) * _1477;
        _1613 = _1444;
        _1615 = _1443;
        _1616 = _1442;
        _1617 = _1454;
        _1618 = _1453;
        _1619 = _1452;
        _1620 = _1464;
        _1621 = _1463;
        _1622 = _1462;
        _1623 = _1477;
        _1624 = _1476;
        _1625 = _1475;
        _1626 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1627 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1628 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1614;
        _1615 = _1614;
        _1616 = _1614;
        _1617 = _1614;
        _1618 = _1614;
        _1619 = _1614;
        _1620 = _1614;
        _1621 = _1614;
        _1622 = _1614;
        _1623 = _1614;
        _1624 = _1614;
        _1625 = _1614;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1654 = fma(_1283, cbModelParam._m0[30u].z, fma(_1279, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1275));
        float _1658 = fma(_1283, cbModelParam._m0[31u].z, fma(_1279, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1275));
        float _1662 = fma(_1283, cbModelParam._m0[32u].z, fma(_1279, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1275));
        float _1685 = _1275 + _1034;
        float _1686 = _1279 + _1035;
        float _1687 = _1283 + _1036;
        float _1697 = fma(_1687, cbModelParam._m0[30u].z, fma(_1686, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1685)) - _1654;
        float _1698 = fma(_1687, cbModelParam._m0[31u].z, fma(_1686, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1685)) - _1658;
        float _1699 = fma(_1687, cbModelParam._m0[32u].z, fma(_1686, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1685)) - _1662;
        float _1703 = inversesqrt(dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699)));
        float _1716 = ((_1703 * _1697) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1654 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1717 = ((_1703 * _1698) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1658 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1718 = ((_1703 * _1699) / cbModelParam._m0[35u].z) + ((((((_1662 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        vec4 _1741 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1716, _1717, _1718), 0.0);
        float _1753 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1720.x + (-0.5));
        float _1755 = _1753 * (_1720.y + (-0.5));
        float _1756 = _1753 * (_1720.z + (-0.5));
        float _1763 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1727.x + (-0.5));
        float _1765 = _1763 * (_1727.y + (-0.5));
        float _1766 = _1763 * (_1727.z + (-0.5));
        float _1773 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1734.x + (-0.5));
        float _1775 = _1773 * (_1734.y + (-0.5));
        float _1776 = _1773 * (_1734.z + (-0.5));
        float _1783 = exp2((_1741.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1741.x + (-0.5));
        float _1785 = _1783 * (_1741.y + (-0.5));
        float _1786 = _1783 * (_1741.z + (-0.5));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1790 = _1754 * 0.5;
        float _1791 = _1764 * 0.5;
        float _1792 = _1774 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_1034, _1035, _1036), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4661 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4672 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4683 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_1817 + 1.0))) + _1822) * _1787;
        float _1832 = _1755 * 0.5;
        float _1833 = _1765 * 0.5;
        float _1834 = _1775 * 0.5;
        float _1835 = dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834));
        float _1840 = (_1835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1835);
        float _1848 = (dot(vec3(_1034, _1035, _1036), vec3(_1840 * _1832, _1840 * _1833, _1840 * _1834)) + 1.0) * 0.5;
        float _4694 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1857 = sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4705 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _1859 = _1858 * 2.0;
        float _1863 = (1.0 - _1858) / (_1858 + 1.0);
        float _4716 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _1873 = ((((1.0 - _1864) * (_1859 + 2.0)) * exp2(log2(isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_1859 + 1.0))) + _1864) * _1788;
        float _1874 = _1756 * 0.5;
        float _1875 = _1766 * 0.5;
        float _1876 = _1776 * 0.5;
        float _1877 = dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876));
        float _1882 = (_1877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1877);
        float _1890 = (dot(vec3(_1034, _1035, _1036), vec3(_1882 * _1874, _1882 * _1875, _1882 * _1876)) + 1.0) * 0.5;
        float _4727 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1899 = sqrt(((_1875 * _1875) + (_1874 * _1874)) + (_1876 * _1876)) / (_1789 + 9.9999997473787516355514526367188e-06);
        float _4738 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _1901 = _1900 * 2.0;
        float _1905 = (1.0 - _1900) / (_1900 + 1.0);
        float _4749 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _1915 = ((((1.0 - _1906) * (_1901 + 2.0)) * exp2(log2(isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_1901 + 1.0))) + _1906) * _1789;
        _1923 = _1756;
        _1924 = _1755;
        _1925 = _1754;
        _1926 = _1766;
        _1927 = _1765;
        _1928 = _1764;
        _1929 = _1776;
        _1930 = _1775;
        _1931 = _1774;
        _1932 = _1789;
        _1933 = _1788;
        _1934 = _1787;
        _1935 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
        _1936 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)));
        _1937 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)));
    }
    else
    {
        _1923 = _1614;
        _1924 = _1614;
        _1925 = _1614;
        _1926 = _1614;
        _1927 = _1614;
        _1928 = _1614;
        _1929 = _1614;
        _1930 = _1614;
        _1931 = _1614;
        _1932 = _1614;
        _1933 = _1614;
        _1934 = _1614;
        _1935 = 0.0;
        _1936 = 0.0;
        _1937 = 0.0;
    }
    float _1947 = (cbModelParam._m0[1u].x * (_1935 - _1626)) + _1626;
    float _1948 = (cbModelParam._m0[1u].x * (_1936 - _1627)) + _1627;
    float _1949 = (cbModelParam._m0[1u].x * (_1937 - _1628)) + _1628;
    float _1970 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1948, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1973 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1948, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1976 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1948, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1947));
    float _1991 = _1219 * 0.5;
    float _1992 = _1220 * 0.5;
    float _1993 = _1221 * 0.5;
    float _1994 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1925, _1928, _1931, _1934));
    float _1997 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1924, _1927, _1930, _1933));
    float _2000 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1923, _1926, _1929, _1932));
    float _2034;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2007 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1613, _1617, _1620, _1623));
        float _2011 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1615, _1618, _1621, _1624));
        float _2015 = dot(vec4(_1991, _1992, _1993, 1.0), vec4(_1616, _1619, _1622, _1625));
        float _2022 = dot(vec4(cbModelParam._m0[39u]), vec4(_1991, _1992, _1993, 1.0));
        _2034 = dot(vec3(isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0)), isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2022) ? 0.0 : (isnan(0.0) ? _2022 : max(0.0, _2022))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2034 = 1.0;
    }
    float _2045;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2036 = dot(vec4(cbModelParam._m0[40u]), vec4(_1991, _1992, _1993, 1.0));
        _2045 = dot(vec3(isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)), isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2036) ? 0.0 : (isnan(0.0) ? _2036 : max(0.0, _2036))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2045 = 1.0;
    }
    float _2049 = (_2045 * cbModelParam._m0[1u].x) + (_2034 * (1.0 - cbModelParam._m0[1u].x));
    float _2059 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1037);
    float _2060 = isnan(_2059) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2059 : min(cbModelParam._m0[25u].z, _2059));
    float _2140;
    float _2142;
    float _2144;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2107 = fma(_1283, cbModelParam._m0[13u].z, fma(_1279, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1275)) + cbModelParam._m0[13u].w;
        float _2111 = fma(_1283, cbModelParam._m0[14u].z, fma(_1279, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1275)) + cbModelParam._m0[14u].w;
        float _2115 = fma(_1283, cbModelParam._m0[15u].z, fma(_1279, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1275)) + cbModelParam._m0[15u].w;
        float _2118 = fma(_1221, cbModelParam._m0[13u].z, fma(_1220, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1219));
        float _2121 = fma(_1221, cbModelParam._m0[14u].z, fma(_1220, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1219));
        float _2124 = fma(_1221, cbModelParam._m0[15u].z, fma(_1220, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1219));
        float _2152;
        if (_2118 > 0.0)
        {
            _2152 = abs((1.0 - _2107) / _2118);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2107 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2152 = frontier_phi_17_15_ladder;
        }
        float _2323;
        if (_2121 > 0.0)
        {
            _2323 = abs((1.0 - _2111) / _2121);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2111 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2323 = frontier_phi_26_22_ladder;
        }
        float _2618;
        if (_2124 > 0.0)
        {
            _2618 = abs((1.0 - _2115) / _2124);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2115 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2618 = frontier_phi_38_33_ladder;
        }
        float _2620 = isnan(_2323) ? _2152 : (isnan(_2152) ? _2323 : min(_2152, _2323));
        float _2621 = isnan(_2618) ? _2620 : (isnan(_2620) ? _2618 : min(_2620, _2618));
        float _2625 = (_2621 * _2118) + _2107;
        float _2626 = (_2621 * _2121) + _2111;
        float _2627 = (_2621 * _2124) + _2115;
        float _2628 = _2621 * 9.9999997473787516355514526367188e-05;
        float _2630 = (-1.0) - _2628;
        float _2632 = _2628 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2627 > _2632) || ((_2627 < _2630) || ((_2626 > _2632) || ((_2626 < _2630) || ((_2625 < _2630) || (_2625 > _2632))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2772 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2627, cbModelParam._m0[9u].z, fma(_2626, cbModelParam._m0[9u].y, _2625 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2627, cbModelParam._m0[10u].z, fma(_2626, cbModelParam._m0[10u].y, _2625 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2627, cbModelParam._m0[11u].z, fma(_2626, cbModelParam._m0[11u].y, _2625 * cbModelParam._m0[11u].x))), _2060);
            frontier_phi_16_38_ladder = _2772.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2772.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2772.x * cbModelParam._m0[1u].y;
        }
        _2140 = frontier_phi_16_38_ladder_2;
        _2142 = frontier_phi_16_38_ladder_1;
        _2144 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2128 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1219, _1220, _1221), _2060);
        _2140 = _2128.x * cbModelParam._m0[1u].y;
        _2142 = _2128.y * cbModelParam._m0[1u].y;
        _2144 = _2128.z * cbModelParam._m0[1u].y;
    }
    float _2148 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1037);
    float _2149 = isnan(_2148) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2148 : min(cbModelParam._m0[25u].w, _2148));
    float _2238;
    float _2240;
    float _2242;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2202 = fma(_1283, cbModelParam._m0[21u].z, fma(_1279, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1275)) + cbModelParam._m0[21u].w;
        float _2206 = fma(_1283, cbModelParam._m0[22u].z, fma(_1279, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1275)) + cbModelParam._m0[22u].w;
        float _2210 = fma(_1283, cbModelParam._m0[23u].z, fma(_1279, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1275)) + cbModelParam._m0[23u].w;
        float _2213 = fma(_1221, cbModelParam._m0[21u].z, fma(_1220, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1219));
        float _2216 = fma(_1221, cbModelParam._m0[22u].z, fma(_1220, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1219));
        float _2219 = fma(_1221, cbModelParam._m0[23u].z, fma(_1220, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1219));
        float _2328;
        if (_2213 > 0.0)
        {
            _2328 = abs((1.0 - _2202) / _2213);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2202 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2328 = frontier_phi_28_24_ladder;
        }
        float _2645;
        if (_2216 > 0.0)
        {
            _2645 = abs((1.0 - _2206) / _2216);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2216 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2206 + 1.0) / _2216);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2645 = frontier_phi_40_35_ladder;
        }
        float _2983;
        if (_2219 > 0.0)
        {
            _2983 = abs((1.0 - _2210) / _2219);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2219 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2210 + 1.0) / _2219);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2983 = frontier_phi_50_47_ladder;
        }
        float _2985 = isnan(_2645) ? _2328 : (isnan(_2328) ? _2645 : min(_2328, _2645));
        float _2986 = isnan(_2983) ? _2985 : (isnan(_2985) ? _2983 : min(_2985, _2983));
        float _2990 = (_2986 * _2213) + _2202;
        float _2991 = (_2986 * _2216) + _2206;
        float _2992 = (_2986 * _2219) + _2210;
        float _2993 = _2986 * 9.9999997473787516355514526367188e-05;
        float _2994 = (-1.0) - _2993;
        float _2996 = _2993 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2992 > _2996) || ((_2992 < _2994) || ((_2991 > _2996) || ((_2991 < _2994) || ((_2990 < _2994) || (_2990 > _2996))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3114 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2992, cbModelParam._m0[17u].z, fma(_2991, cbModelParam._m0[17u].y, _2990 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2992, cbModelParam._m0[18u].z, fma(_2991, cbModelParam._m0[18u].y, _2990 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2992, cbModelParam._m0[19u].z, fma(_2991, cbModelParam._m0[19u].y, _2990 * cbModelParam._m0[19u].x))), _2149);
            frontier_phi_25_50_ladder = _3114.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3114.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3114.x * cbModelParam._m0[1u].z;
        }
        _2238 = frontier_phi_25_50_ladder_2;
        _2240 = frontier_phi_25_50_ladder_1;
        _2242 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2222 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1219, _1220, _1221), _2149);
        _2238 = _2222.x * cbModelParam._m0[1u].z;
        _2240 = _2222.y * cbModelParam._m0[1u].z;
        _2242 = _2222.z * cbModelParam._m0[1u].z;
    }
    float _2255 = (((_1246 * _1195) + _1247) * _1211) * ((cbModelParam._m0[1u].w * (_2238 - _2140)) + _2140);
    float _2257 = (((_1246 * _1197) + _1247) * _1211) * ((cbModelParam._m0[1u].w * (_2240 - _2142)) + _2142);
    float _2259 = (((_1246 * _1198) + _1247) * _1211) * ((cbModelParam._m0[1u].w * (_2242 - _2144)) + _2144);
    float _2262 = fma(_2259, cbSceneParam._m0[89u].z, fma(_2257, cbSceneParam._m0[89u].y, _2255 * cbSceneParam._m0[89u].x));
    float _2265 = fma(_2259, cbSceneParam._m0[90u].z, fma(_2257, cbSceneParam._m0[90u].y, _2255 * cbSceneParam._m0[90u].x));
    float _2268 = fma(_2259, cbSceneParam._m0[91u].z, fma(_2257, cbSceneParam._m0[91u].y, _2255 * cbSceneParam._m0[91u].x));
    float _2302 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2306 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2310 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2314 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2315 = _2302 / _2314;
    float _2316 = _2306 / _2314;
    float _2317 = _2310 / _2314;
    float _2464;
    float _2465;
    float _2466;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2344 = ((uint(_2317 > cbSceneParam._m0[59u].y) + uint(_2317 > cbSceneParam._m0[59u].x)) + uint(_2317 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2345 = _2344 + 43u;
        uint _2353 = _2344 + 44u;
        uint _2361 = _2344 + 45u;
        uint _2369 = _2344 + 46u;
        float _2380 = fma(_2314, cbSceneParam._m0[_2345].w, fma(_2310, cbSceneParam._m0[_2345].z, fma(_2306, cbSceneParam._m0[_2345].y, _2302 * cbSceneParam._m0[_2345].x)));
        float _2384 = fma(_2314, cbSceneParam._m0[_2353].w, fma(_2310, cbSceneParam._m0[_2353].z, fma(_2306, cbSceneParam._m0[_2353].y, _2302 * cbSceneParam._m0[_2353].x)));
        float _2392 = fma(_2314, cbSceneParam._m0[_2369].w, fma(_2310, cbSceneParam._m0[_2369].z, fma(_2306, cbSceneParam._m0[_2369].y, _2302 * cbSceneParam._m0[_2369].x)));
        float _2397 = cbSceneParam._m0[33u].z * _2392;
        float _2399 = cbSceneParam._m0[33u].w * _2392;
        float _2402 = fma(_2314, cbSceneParam._m0[_2361].w, fma(_2310, cbSceneParam._m0[_2361].z, fma(_2306, cbSceneParam._m0[_2361].y, _2302 * cbSceneParam._m0[_2361].x))) / _2392;
        float _2450 = (cbSceneParam._m0[33u].x - sqrt(((_2316 * _2316) + (_2315 * _2315)) + (_2317 * _2317))) * cbSceneParam._m0[33u].y;
        float _4875 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2457 = (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2397 + _2380) / _2392, (_2399 + _2384) / _2392), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2399 + _2380) / _2392, (_2384 - _2397) / _2392), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2380 - _2397) / _2392, (_2384 - _2399) / _2392), _2402), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2380 - _2399) / _2392, (_2397 + _2384) / _2392), _2402), 0.0)).x), vec4(0.25)));
        _2464 = 1.0 - (_2457 * cbSceneParam._m0[34u].x);
        _2465 = 1.0 - (_2457 * cbSceneParam._m0[34u].y);
        _2466 = 1.0 - (_2457 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2464 = 1.0;
        _2465 = 1.0;
        _2466 = 1.0;
    }
    float _2530;
    float _2532;
    float _2534;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2518 = fma(_2314, cbSceneParam._m0[63u].w, fma(_2310, cbSceneParam._m0[63u].z, fma(_2306, cbSceneParam._m0[63u].y, _2302 * cbSceneParam._m0[63u].x)));
        float _2519 = fma(_2314, cbSceneParam._m0[60u].w, fma(_2310, cbSceneParam._m0[60u].z, fma(_2306, cbSceneParam._m0[60u].y, _2302 * cbSceneParam._m0[60u].x))) / _2518;
        float _2520 = fma(_2314, cbSceneParam._m0[61u].w, fma(_2310, cbSceneParam._m0[61u].z, fma(_2306, cbSceneParam._m0[61u].y, _2302 * cbSceneParam._m0[61u].x))) / _2518;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2519 >= cbSceneParam._m0[64u].x) && (_2520 >= cbSceneParam._m0[64u].y)) && (_2519 <= cbSceneParam._m0[64u].z)) && (_2520 <= cbSceneParam._m0[64u].w))
        {
            float _2658 = fma(_2314, cbSceneParam._m0[62u].w, fma(_2310, cbSceneParam._m0[62u].z, fma(_2306, cbSceneParam._m0[62u].y, _2302 * cbSceneParam._m0[62u].x))) / _2518;
            float _2662 = isnan(cbSceneParam._m0[41u].w) ? _2658 : (isnan(_2658) ? cbSceneParam._m0[41u].w : max(_2658, cbSceneParam._m0[41u].w));
            float _2705 = (cbSceneParam._m0[33u].x - sqrt(((_2316 * _2316) + (_2315 * _2315)) + (_2317 * _2317))) * cbSceneParam._m0[33u].y;
            float _4891 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
            float _2712 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2519, cbSceneParam._m0[33u].w + _2520), _2662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2519, _2520 - cbSceneParam._m0[33u].z), _2662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2519 - cbSceneParam._m0[33u].z, _2520 - cbSceneParam._m0[33u].w), _2662), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2519 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2520), _2662), 0.0)).x), vec4(0.25)));
            float _2716 = 1.0 - (_2712 * cbSceneParam._m0[34u].x);
            float _2717 = 1.0 - (_2712 * cbSceneParam._m0[34u].y);
            float _2718 = 1.0 - (_2712 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2718) ? _2466 : (isnan(_2466) ? _2718 : min(_2466, _2718));
            frontier_phi_37_36_ladder_1 = isnan(_2717) ? _2465 : (isnan(_2465) ? _2717 : min(_2465, _2717));
            frontier_phi_37_36_ladder_2 = isnan(_2716) ? _2464 : (isnan(_2464) ? _2716 : min(_2464, _2716));
        }
        else
        {
            frontier_phi_37_36_ladder = _2466;
            frontier_phi_37_36_ladder_1 = _2465;
            frontier_phi_37_36_ladder_2 = _2464;
        }
        _2530 = frontier_phi_37_36_ladder_2;
        _2532 = frontier_phi_37_36_ladder_1;
        _2534 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2530 = _2464;
        _2532 = _2465;
        _2534 = _2466;
    }
    uvec4 _2539 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2541 = _2539.x * 14u;
    uint _2542 = _2541 + 13u;
    float _2549 = _1211 + (-1.0);
    float _2554 = (cbLight._m0[_2542].x * _2549) + 1.0;
    float _2555 = (cbLight._m0[_2542].y * _2549) + 1.0;
    float _2556 = (cbLight._m0[_2542].z * _2549) + 1.0;
    float _2557 = (cbLight._m0[_2542].w * _2549) + 1.0;
    uint _2558 = _2541 + 5u;
    float _2564 = isnan(1.0) ? _2555 : (isnan(_2555) ? 1.0 : min(_2555, 1.0));
    uint _2568 = _2541 + 4u;
    float _2577 = isnan(1.0) ? _2554 : (isnan(_2554) ? 1.0 : min(_2554, 1.0));
    uint _2581 = _2541 | 1u;
    float _2592 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_1034, _1035, _1036));
    float _2595 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_1034, _1035, _1036));
    float _4927 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _4938 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2600 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * 0.3183098733425140380859375;
    float _2602 = (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * 0.3183098733425140380859375;
    float _2609 = ((cbLight._m0[_2558].x * _2564) * _2602) + (((cbLight._m0[_2568].x * _2530) * _2577) * _2600);
    float _2610 = ((_2564 * cbLight._m0[_2558].y) * _2602) + (((cbLight._m0[_2568].y * _2532) * _2577) * _2600);
    float _2611 = ((_2564 * cbLight._m0[_2558].z) * _2602) + (((cbLight._m0[_2568].z * _2534) * _2577) * _2600);
    uvec4 _2615 = floatBitsToUint(cbLight._m0[_2541 + 12u]);
    bool _2617 = _2615.x == 0u;
    float _2719;
    float _2721;
    float _2723;
    if (_2617)
    {
        _2719 = _2609;
        _2721 = _2610;
        _2723 = _2611;
    }
    else
    {
        uint _2727 = _2541 + 6u;
        float _2743 = (dot(vec3(cbLight._m0[_2541 + 2u].xyz), vec3(_1034, _1035, _1036)) * 0.5) + 0.5;
        float _2744 = _2743 * _2743;
        float _4949 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2745 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _2746 = isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0));
        _2719 = (((cbLight._m0[_2727].x * 0.3183098733425140380859375) * _2745) * _2746) + _2609;
        _2721 = (((cbLight._m0[_2727].y * 0.3183098733425140380859375) * _2745) * _2746) + _2610;
        _2723 = (((cbLight._m0[_2727].z * 0.3183098733425140380859375) * _2745) * _2746) + _2611;
    }
    bool _2726 = _2615.y == 0u;
    float _2781;
    float _2783;
    float _2785;
    if (_2726)
    {
        _2781 = _2719;
        _2783 = _2721;
        _2785 = _2723;
    }
    else
    {
        uint _2954 = _2541 + 7u;
        float _2970 = (dot(vec3(cbLight._m0[_2541 + 3u].xyz), vec3(_1034, _1035, _1036)) * 0.5) + 0.5;
        float _2971 = _2970 * _2970;
        float _4965 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2972 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2973 = isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0));
        _2781 = (((cbLight._m0[_2954].x * 0.3183098733425140380859375) * _2972) * _2973) + _2719;
        _2783 = (((cbLight._m0[_2954].y * 0.3183098733425140380859375) * _2972) * _2973) + _2721;
        _2785 = (((cbLight._m0[_2954].z * 0.3183098733425140380859375) * _2972) * _2973) + _2723;
    }
    uint _2788 = _2541 + 8u;
    float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _1037) * 0.949999988079071044921875);
    float _2802 = _2801 * _2801;
    float _2803 = cbLight._m0[_2541].x + _1113;
    float _2804 = cbLight._m0[_2541].y + _1114;
    float _2805 = cbLight._m0[_2541].z + _1115;
    float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
    float _2810 = _2809 * _2803;
    float _2811 = _2809 * _2804;
    float _2812 = _2809 * _2805;
    float _2813 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2541].xyz));
    float _4981 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2816 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
    float _4992 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _2817 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
    float _2818 = dot(vec3(_1034, _1035, _1036), vec3(_2810, _2811, _2812));
    float _5003 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2821 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
    float _2822 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2810, _2811, _2812));
    float _5014 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2826 = _2802 * _2802;
    float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
    float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) * 5.0);
    float _2839 = 0.959999978542327880859375 - _1192;
    float _2841 = 0.959999978542327880859375 - _1193;
    float _2842 = 0.959999978542327880859375 - _1194;
    float _2849 = 1.0 - _2802;
    float _2860 = (0.5 / (((_2817 * ((_2816 * _2849) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2849) + _2802) * _2816))) * _2816;
    float _5025 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
    float _2862 = (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
    uint _2876 = _2541 + 9u;
    float _2887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2581].w)) * _1037) * 0.949999988079071044921875);
    float _2888 = _2887 * _2887;
    float _2889 = cbLight._m0[_2581].x + _1113;
    float _2890 = cbLight._m0[_2581].y + _1114;
    float _2891 = cbLight._m0[_2581].z + _1115;
    float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
    float _2896 = _2895 * _2889;
    float _2897 = _2895 * _2890;
    float _2898 = _2895 * _2891;
    float _2899 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_2581].xyz));
    float _5036 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
    float _2902 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
    float _2903 = dot(vec3(_1034, _1035, _1036), vec3(_2896, _2897, _2898));
    float _5047 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
    float _2906 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
    float _2907 = dot(vec3(cbLight._m0[_2581].xyz), vec3(_2896, _2897, _2898));
    float _5058 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2911 = _2888 * _2888;
    float _2915 = ((_2906 * _2906) * (_2911 + (-1.0))) + 1.0;
    float _2922 = exp2(log2(1.0 - (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) * 5.0);
    float _2929 = 1.0 - _2888;
    float _2939 = (0.5 / (((_2817 * ((_2902 * _2929) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2929) + _2888) * _2902))) * _2902;
    float _5069 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
    float _2941 = (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_2911 / ((_2915 * _2915) * 3.141590118408203125));
    float _2951 = (((((_2922 * _2839) + _1195) * cbLight._m0[_2876].x) * _2941) * _2564) + ((((cbLight._m0[_2788].x * _2530) * ((_2838 * _2839) + _1195)) * _2862) * _2577);
    float _2952 = (((((_2922 * _2841) + _1197) * cbLight._m0[_2876].y) * _2941) * _2564) + ((((cbLight._m0[_2788].y * _2532) * ((_2838 * _2841) + _1197)) * _2862) * _2577);
    float _2953 = (((((_2922 * _2842) + _1198) * cbLight._m0[_2876].z) * _2941) * _2564) + ((((cbLight._m0[_2788].z * _2534) * ((_2838 * _2842) + _1198)) * _2862) * _2577);
    float _3009;
    float _3011;
    float _3013;
    if (_2617)
    {
        _3009 = _2951;
        _3011 = _2952;
        _3013 = _2953;
    }
    else
    {
        uint _3015 = _2541 + 2u;
        uint _3019 = _2541 + 10u;
        float _3033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3015].w)) * _1037) * 0.949999988079071044921875);
        float _3034 = _3033 * _3033;
        float _3035 = cbLight._m0[_3015].x + _1113;
        float _3036 = cbLight._m0[_3015].y + _1114;
        float _3037 = cbLight._m0[_3015].z + _1115;
        float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
        float _3042 = _3041 * _3035;
        float _3043 = _3041 * _3036;
        float _3044 = _3041 * _3037;
        float _3045 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_3015].xyz));
        float _5080 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
        float _3048 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
        float _3049 = dot(vec3(_1034, _1035, _1036), vec3(_3042, _3043, _3044));
        float _5091 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3052 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
        float _3053 = dot(vec3(cbLight._m0[_3015].xyz), vec3(_3042, _3043, _3044));
        float _5102 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3057 = _3034 * _3034;
        float _3061 = ((_3052 * _3052) * (_3057 + (-1.0))) + 1.0;
        float _3068 = exp2(log2(1.0 - (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0)))) * 5.0);
        float _3075 = 1.0 - _3034;
        float _3085 = (0.5 / (((_2817 * ((_3048 * _3075) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _3075) + _3034) * _3048))) * _3048;
        float _5113 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
        float _3087 = (isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0))) * (_3057 / ((_3061 * _3061) * 3.141590118408203125));
        float _3088 = isnan(1.0) ? _2556 : (isnan(_2556) ? 1.0 : min(_2556, 1.0));
        _3009 = (((((_3068 * _2839) + _1195) * cbLight._m0[_3019].x) * _3087) * _3088) + _2951;
        _3011 = (((((_3068 * _2841) + _1197) * cbLight._m0[_3019].y) * _3087) * _3088) + _2952;
        _3013 = (((((_3068 * _2842) + _1198) * cbLight._m0[_3019].z) * _3087) * _3088) + _2953;
    }
    float _3119;
    float _3121;
    float _3123;
    if (_2726)
    {
        _3119 = _3009;
        _3121 = _3011;
        _3123 = _3013;
    }
    else
    {
        uint _3130 = _2541 + 3u;
        uint _3134 = _2541 + 11u;
        float _3148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3130].w)) * _1037) * 0.949999988079071044921875);
        float _3149 = _3148 * _3148;
        float _3150 = cbLight._m0[_3130].x + _1113;
        float _3151 = cbLight._m0[_3130].y + _1114;
        float _3152 = cbLight._m0[_3130].z + _1115;
        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
        float _3157 = _3156 * _3150;
        float _3158 = _3156 * _3151;
        float _3159 = _3156 * _3152;
        float _3160 = dot(vec3(_1034, _1035, _1036), vec3(cbLight._m0[_3130].xyz));
        float _5129 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
        float _3163 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
        float _3164 = dot(vec3(_1034, _1035, _1036), vec3(_3157, _3158, _3159));
        float _5140 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
        float _3167 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
        float _3168 = dot(vec3(cbLight._m0[_3130].xyz), vec3(_3157, _3158, _3159));
        float _5151 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        float _3172 = _3149 * _3149;
        float _3176 = ((_3167 * _3167) * (_3172 + (-1.0))) + 1.0;
        float _3183 = exp2(log2(1.0 - (isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0)))) * 5.0);
        float _3190 = 1.0 - _3149;
        float _3200 = (0.5 / (((_2817 * ((_3163 * _3190) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _3190) + _3149) * _3163))) * _3163;
        float _5162 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
        float _3202 = (isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0))) * (_3172 / ((_3176 * _3176) * 3.141590118408203125));
        float _3203 = isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0));
        _3119 = (((((_3183 * _2839) + _1195) * cbLight._m0[_3134].x) * _3202) * _3203) + _3009;
        _3121 = (((((_3183 * _2841) + _1197) * cbLight._m0[_3134].y) * _3202) * _3203) + _3011;
        _3123 = (((((_3183 * _2842) + _1198) * cbLight._m0[_3134].z) * _3202) * _3203) + _3013;
    }
    float _3269;
    float _3271;
    float _3273;
    float _3275;
    float _3277;
    float _3279;
    if (_2539.y == 0u)
    {
        uvec4 _3224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3225 = _3224.x;
        uint _3236 = uint((float(_3224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1134) / _3225))) + floor(float(uint(cbSceneParam._m0[85u].x * _1133) / _3225)));
        float _3246 = (log2(_2317 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3247 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
        uint _3250 = uint(isnan(14.0) ? _3247 : (isnan(_3247) ? 14.0 : min(_3247, 14.0)));
        uvec4 _3255 = texelFetch(g_lightClusterGridBuffer, int(((_3250 << 2u) + (_3236 << 6u)) >> 2u));
        uint _3256 = _3255.x;
        uint _3257 = _3224.z;
        float _3336;
        float _3338;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        if (((((1u << ((_3257 >> 4u) & 15u)) + 4294967295u) & _3256) == 0u) || ((_3257 & 240u) == 0u))
        {
            _3336 = 0.0;
            _3338 = 0.0;
            _3340 = 0.0;
            _3342 = 0.0;
            _3344 = 0.0;
            _3346 = 0.0;
        }
        else
        {
            float _3337;
            float _3339;
            float _3341;
            float _3343;
            float _3345;
            float _3347;
            float _3489 = 0.0;
            float _3490 = 0.0;
            float _3491 = 0.0;
            float _3492 = 0.0;
            float _3493 = 0.0;
            float _3494 = 0.0;
            uint _3495 = 0u;
            uint _3504;
            bool _3505;
            for (;;)
            {
                _3504 = texelFetch(g_lightClassification, int((((_3250 << 5u) + (_3236 << 9u)) + (_3495 << 2u)) >> 2u)).x;
                _3505 = _3504 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3505)
                {
                    frontier_phi_71_pred = _3494;
                    frontier_phi_71_pred_1 = _3493;
                    frontier_phi_71_pred_2 = _3492;
                    frontier_phi_71_pred_3 = _3491;
                    frontier_phi_71_pred_4 = _3490;
                    frontier_phi_71_pred_5 = _3489;
                }
                else
                {
                    float _3634;
                    float _3635;
                    float _3636;
                    float _3637;
                    float _3638;
                    float _3639;
                    uint _3640;
                    _3634 = _3489;
                    _3635 = _3490;
                    _3636 = _3491;
                    _3637 = _3492;
                    _3638 = _3493;
                    _3639 = _3494;
                    _3640 = _3504;
                    float _3561;
                    float _3562;
                    float _3563;
                    float _3564;
                    float _3565;
                    float _3566;
                    for (;;)
                    {
                        uint _3644 = uint(findLSB(_3640)) + (_3495 << 5u);
                        uint _3641 = (_3640 + 4294967295u) & _3640;
                        uint _3646 = _3644 * 48u;
                        vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3646)).x, texelFetch(g_PointLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3646 + 3u)).x));
                        uint _3666 = (_3644 * 48u) + 4u;
                        vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3666)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3666 + 3u)).x));
                        uint _3685 = (_3644 * 48u) + 8u;
                        vec3 _3696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3685)).x, texelFetch(g_PointLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3685 + 2u)).x));
                        float _3700 = _3660.x - _2315;
                        float _3701 = _3660.y - _2316;
                        float _3702 = _3660.z - _2317;
                        float _3703 = dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702));
                        float _3706 = inversesqrt(_3703);
                        float _3707 = _3706 * _3700;
                        float _3708 = _3706 * _3701;
                        float _3709 = _3706 * _3702;
                        float _3710 = dot(vec3(_1152, _1155, _1158), vec3(_3707, _3708, _3709));
                        float _3715 = 1.0 - (_3703 * _3660.w);
                        float _5188 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                        float _3716 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
                        float _3717 = sqrt(_3703) * _3679.w;
                        float _3720 = 1.39999997615814208984375 / (_3717 + 1.39999997615814208984375);
                        float _3721 = _3720 * _3720;
                        float _3724 = ((1.0 - _3721) * _3710) + _3721;
                        float _3727 = _3717 * _3717;
                        float _3731 = ((isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0))) * _3716) / ((_3727 * 0.699999988079071044921875) + 1.0);
                        float _3735 = (-0.0) - _2315;
                        float _3736 = (-0.0) - _2316;
                        float _3737 = (-0.0) - _2317;
                        float _3741 = inversesqrt(dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737)));
                        float _3742 = _3741 * _3735;
                        float _3743 = _3741 * _3736;
                        float _3744 = _3741 * _3737;
                        float _3751 = exp2(log2(1.0 / ((_3727 * 3.5) + 5.0)) * 0.25);
                        float _3752 = 1.0 - _1227;
                        float _3759 = sqrt(1.0 - ((1.0 - (_3752 * _3752)) * (1.0 - (_3751 * _3751))));
                        float _3760 = _3759 * _3759;
                        float _3761 = _3760 * _3760;
                        float _3762 = _3742 + _3707;
                        float _3763 = _3743 + _3708;
                        float _3764 = _3744 + _3709;
                        float _3768 = inversesqrt(dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764)));
                        float _3772 = dot(vec3(_1152, _1155, _1158), vec3(_3742, _3743, _3744));
                        float _5204 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                        float _3775 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                        float _3776 = dot(vec3(_1152, _1155, _1158), vec3(_3768 * _3762, _3768 * _3763, _3768 * _3764));
                        float _5215 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                        float _3779 = isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0));
                        float _3783 = ((_3779 * _3779) * (_3761 + (-1.0))) + 1.0;
                        float _3784 = _3720 * _3760;
                        float _3785 = _3784 * _3784;
                        float _3788 = ((1.0 - _3785) * _3710) + _3785;
                        float _5226 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                        float _3789 = isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0));
                        float _3790 = 1.0 - _3760;
                        float _3800 = (0.5 / (((_3789 * ((_3775 * _3790) + _3760)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3760) * _3775))) * _3789;
                        float _5237 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                        float _3811 = (((_3761 * 3.1415927410125732421875) * (isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0)))) / ((_3783 * _3783) * ((_3727 * 2.1991131305694580078125) + 3.141590118408203125))) * _3716;
                        _3564 = (_3731 * _3679.x) + _3637;
                        _3565 = (_3731 * _3679.y) + _3638;
                        _3566 = (_3731 * _3679.z) + _3639;
                        _3561 = (_3811 * _3696.x) + _3634;
                        _3562 = (_3811 * _3696.y) + _3635;
                        _3563 = (_3811 * _3696.z) + _3636;
                        if (_3641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3634 = _3561;
                            _3635 = _3562;
                            _3636 = _3563;
                            _3637 = _3564;
                            _3638 = _3565;
                            _3639 = _3566;
                            _3640 = _3641;
                        }
                    }
                    frontier_phi_71_pred = _3566;
                    frontier_phi_71_pred_1 = _3565;
                    frontier_phi_71_pred_2 = _3564;
                    frontier_phi_71_pred_3 = _3563;
                    frontier_phi_71_pred_4 = _3562;
                    frontier_phi_71_pred_5 = _3561;
                }
                _3347 = frontier_phi_71_pred;
                _3345 = frontier_phi_71_pred_1;
                _3343 = frontier_phi_71_pred_2;
                _3341 = frontier_phi_71_pred_3;
                _3339 = frontier_phi_71_pred_4;
                _3337 = frontier_phi_71_pred_5;
                uint _3496 = _3495 + 1u;
                if (_3496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3489 = _3337;
                    _3490 = _3339;
                    _3491 = _3341;
                    _3492 = _3343;
                    _3493 = _3345;
                    _3494 = _3347;
                    _3495 = _3496;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3336 = _3337;
            _3338 = _3339;
            _3340 = _3341;
            _3342 = _3343;
            _3344 = _3345;
            _3346 = _3347;
        }
        uvec4 _3350 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3351 = _3350.z;
        uint _3353 = (_3351 >> 8u) & 15u;
        float _3457;
        float _3459;
        float _3461;
        float _3463;
        float _3465;
        float _3467;
        if (((4294967295u << _3353) & _3256) == 0u)
        {
            _3457 = _3336;
            _3459 = _3338;
            _3461 = _3340;
            _3463 = _3342;
            _3465 = _3344;
            _3467 = _3346;
        }
        else
        {
            float _3482 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
            float _3483 = _3482 * _2315;
            float _3484 = _3482 * _2316;
            float _3485 = _3482 * _2317;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3353 < ((_3351 >> 12u) & 15u))
            {
                float _3458;
                float _3460;
                float _3462;
                float _3464;
                float _3466;
                float _3468;
                float _3617 = _3336;
                float _3618 = _3338;
                float _3619 = _3340;
                float _3620 = _3342;
                float _3621 = _3344;
                float _3622 = _3346;
                uint _3623 = _3353;
                uint _3632;
                bool _3633;
                for (;;)
                {
                    _3632 = texelFetch(g_lightClassification, int((((_3250 << 5u) + (_3236 << 9u)) + (_3623 << 2u)) >> 2u)).x;
                    _3633 = _3632 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3633)
                    {
                        frontier_phi_82_pred = _3622;
                        frontier_phi_82_pred_1 = _3621;
                        frontier_phi_82_pred_2 = _3620;
                        frontier_phi_82_pred_3 = _3619;
                        frontier_phi_82_pred_4 = _3618;
                        frontier_phi_82_pred_5 = _3617;
                    }
                    else
                    {
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _4118;
                        float _4119;
                        float _4120;
                        float _4121;
                        float _4122;
                        float _4123;
                        float _3838 = _3617;
                        float _3839 = _3618;
                        float _3840 = _3619;
                        float _3841 = _3620;
                        float _3842 = _3621;
                        float _3843 = _3622;
                        uint _3844 = _3632;
                        uint _3845;
                        vec4 _3870;
                        float _3871;
                        vec4 _3886;
                        vec3 _3898;
                        vec4 _3913;
                        vec4 _3928;
                        float _3974;
                        bool _3975;
                        for (;;)
                        {
                            uint _3855 = ((_3623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3844));
                            _3845 = (_3844 + 4294967295u) & _3844;
                            uint _3857 = _3855 * 40u;
                            _3870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 3u)).x));
                            _3871 = _3870.w;
                            uint _3873 = (_3855 * 40u) + 4u;
                            _3886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 3u)).x));
                            uint _3888 = (_3855 * 40u) + 8u;
                            _3898 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3888 + 2u)).x));
                            uint _3900 = (_3855 * 40u) + 16u;
                            _3913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3900 + 3u)).x));
                            uint _3915 = (_3855 * 40u) + 20u;
                            _3928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3915 + 3u)).x));
                            uint _3930 = (_3855 * 40u) + 24u;
                            vec4 _3943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3930 + 3u)).x));
                            uint _3949 = (_3855 * 40u) + 28u;
                            vec4 _3962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3949 + 3u)).x));
                            _3974 = fma(_2317, _3962.z, fma(_2316, _3962.y, _3962.x * _2315)) + _3962.w;
                            _3975 = !((fma(_2317, _3943.z, fma(_2316, _3943.y, _3943.x * _2315)) + _3943.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3975)
                            {
                                float _4002 = _3870.x - _2315;
                                float _4003 = _3870.y - _2316;
                                float _4004 = _3870.z - _2317;
                                float _4005 = dot(vec3(_4002, _4003, _4004), vec3(_4002, _4003, _4004));
                                float _4008 = inversesqrt(_4005);
                                float _4009 = _4008 * _4002;
                                float _4010 = _4008 * _4003;
                                float _4011 = _4008 * _4004;
                                float _4015 = 1.0 - (_4005 / (_3871 * _3871));
                                float _5248 = isnan(0.0) ? _4015 : (isnan(_4015) ? 0.0 : max(_4015, 0.0));
                                float _4016 = isnan(1.0) ? _5248 : (isnan(_5248) ? 1.0 : min(_5248, 1.0));
                                float _4020 = sqrt(_4005) * _3886.w;
                                float _4022 = 1.39999997615814208984375 / (_4020 + 1.39999997615814208984375);
                                float _4023 = _4022 * _4022;
                                float _4026 = ((1.0 - _4023) * dot(vec3(_4009, _4010, _4011), vec3(_1152, _1155, _1158))) + _4023;
                                float _4029 = _4020 * _4020;
                                float _4033 = (fma(_2317, _3913.z, fma(_2316, _3913.y, _3913.x * _2315)) + _3913.w) / _3974;
                                float _4034 = (fma(_2317, _3928.z, fma(_2316, _3928.y, _3928.x * _2315)) + _3928.w) / _3974;
                                float _4038 = 1.0 - dot(vec2(_4033, _4034), vec2(_4033, _4034));
                                float _5264 = isnan(0.0) ? _4038 : (isnan(_4038) ? 0.0 : max(_4038, 0.0));
                                float _4039 = isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0));
                                float _4040 = _4039 * (((isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0))) * _4016) / ((_4029 * 0.699999988079071044921875) + 1.0));
                                float _4052 = exp2(log2(1.0 / ((_4029 * 3.5) + 5.0)) * 0.25);
                                float _4053 = 1.0 - _1227;
                                float _4060 = sqrt(1.0 - ((1.0 - (_4053 * _4053)) * (1.0 - (_4052 * _4052))));
                                float _4061 = _4060 * _4060;
                                float _4062 = _4061 * _4061;
                                float _4063 = _4009 - _3483;
                                float _4064 = _4010 - _3484;
                                float _4065 = _4011 - _3485;
                                float _4069 = inversesqrt(dot(vec3(_4063, _4064, _4065), vec3(_4063, _4064, _4065)));
                                float _4073 = dot(vec3(_1152, _1155, _1158), vec3((-0.0) - _3483, (-0.0) - _3484, (-0.0) - _3485));
                                float _5275 = isnan(0.0) ? _4073 : (isnan(_4073) ? 0.0 : max(_4073, 0.0));
                                float _4076 = isnan(1.0) ? _5275 : (isnan(_5275) ? 1.0 : min(_5275, 1.0));
                                float _4077 = dot(vec3(_1152, _1155, _1158), vec3(_4069 * _4063, _4069 * _4064, _4069 * _4065));
                                float _5286 = isnan(0.0) ? _4077 : (isnan(_4077) ? 0.0 : max(_4077, 0.0));
                                float _4080 = isnan(1.0) ? _5286 : (isnan(_5286) ? 1.0 : min(_5286, 1.0));
                                float _4084 = ((_4080 * _4080) * (_4062 + (-1.0))) + 1.0;
                                float _4085 = _4022 * _4061;
                                float _4086 = _4085 * _4085;
                                float _4092 = ((1.0 - _4086) * dot(vec3(_1152, _1155, _1158), vec3(_4009, _4010, _4011))) + _4086;
                                float _5297 = isnan(0.0) ? _4092 : (isnan(_4092) ? 0.0 : max(_4092, 0.0));
                                float _4093 = isnan(1.0) ? _5297 : (isnan(_5297) ? 1.0 : min(_5297, 1.0));
                                float _4094 = 1.0 - _4061;
                                float _4104 = (0.5 / (((_4093 * ((_4076 * _4094) + _4061)) + 9.9999999392252902907785028219223e-09) + (((_4093 * _4094) + _4061) * _4076))) * _4093;
                                float _5308 = isnan(0.0) ? _4104 : (isnan(_4104) ? 0.0 : max(_4104, 0.0));
                                float _4114 = (_4039 * _4016) * (((_4062 * 3.1415927410125732421875) * (isnan(1.0) ? _5308 : (isnan(_5308) ? 1.0 : min(_5308, 1.0)))) / ((_4084 * _4084) * ((_4029 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4040 * _3886.z;
                                frontier_phi_88_pred_1 = _4040 * _3886.y;
                                frontier_phi_88_pred_2 = _4040 * _3886.x;
                                frontier_phi_88_pred_3 = _4114 * _3898.z;
                                frontier_phi_88_pred_4 = _4114 * _3898.y;
                                frontier_phi_88_pred_5 = _4114 * _3898.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4123 = frontier_phi_88_pred;
                            _4122 = frontier_phi_88_pred_1;
                            _4121 = frontier_phi_88_pred_2;
                            _4120 = frontier_phi_88_pred_3;
                            _4119 = frontier_phi_88_pred_4;
                            _4118 = frontier_phi_88_pred_5;
                            _3828 = _4121 + _3841;
                            _3829 = _4122 + _3842;
                            _3830 = _4123 + _3843;
                            _3825 = _4118 + _3838;
                            _3826 = _4119 + _3839;
                            _3827 = _4120 + _3840;
                            if (_3845 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3838 = _3825;
                                _3839 = _3826;
                                _3840 = _3827;
                                _3841 = _3828;
                                _3842 = _3829;
                                _3843 = _3830;
                                _3844 = _3845;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3830;
                        frontier_phi_82_pred_1 = _3829;
                        frontier_phi_82_pred_2 = _3828;
                        frontier_phi_82_pred_3 = _3827;
                        frontier_phi_82_pred_4 = _3826;
                        frontier_phi_82_pred_5 = _3825;
                    }
                    _3468 = frontier_phi_82_pred;
                    _3466 = frontier_phi_82_pred_1;
                    _3464 = frontier_phi_82_pred_2;
                    _3462 = frontier_phi_82_pred_3;
                    _3460 = frontier_phi_82_pred_4;
                    _3458 = frontier_phi_82_pred_5;
                    uint _3624 = _3623 + 1u;
                    if (_3624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3617 = _3458;
                        _3618 = _3460;
                        _3619 = _3462;
                        _3620 = _3464;
                        _3621 = _3466;
                        _3622 = _3468;
                        _3623 = _3624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3464;
                frontier_phi_63_64_ladder_1 = _3468;
                frontier_phi_63_64_ladder_2 = _3466;
                frontier_phi_63_64_ladder_3 = _3462;
                frontier_phi_63_64_ladder_4 = _3460;
                frontier_phi_63_64_ladder_5 = _3458;
            }
            else
            {
                frontier_phi_63_64_ladder = _3342;
                frontier_phi_63_64_ladder_1 = _3346;
                frontier_phi_63_64_ladder_2 = _3344;
                frontier_phi_63_64_ladder_3 = _3340;
                frontier_phi_63_64_ladder_4 = _3338;
                frontier_phi_63_64_ladder_5 = _3336;
            }
            _3457 = frontier_phi_63_64_ladder_5;
            _3459 = frontier_phi_63_64_ladder_4;
            _3461 = frontier_phi_63_64_ladder_3;
            _3463 = frontier_phi_63_64_ladder;
            _3465 = frontier_phi_63_64_ladder_2;
            _3467 = frontier_phi_63_64_ladder_1;
        }
        float _3472 = isnan(1.0) ? _1211 : (isnan(_1211) ? 1.0 : min(_1211, 1.0));
        _3269 = (_3472 * _3463) + _2781;
        _3271 = (_3472 * _3465) + _2783;
        _3273 = (_3472 * _3467) + _2785;
        _3275 = ((_3457 * _1195) * _3472) + _3119;
        _3277 = ((_3459 * _1197) * _3472) + _3121;
        _3279 = ((_3461 * _1198) * _3472) + _3123;
    }
    else
    {
        _3269 = _2781;
        _3271 = _2783;
        _3273 = _2785;
        _3275 = _3119;
        _3277 = _3121;
        _3279 = _3123;
    }
    float _5324 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _5335 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _5346 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _3296 = ((isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0))) * (_3269 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1211))) + ((_3275 + ((isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))) * _2049)) * cbPerFrame._m0[3u].x);
    float _3297 = ((isnan(1.0) ? _5335 : (isnan(_5335) ? 1.0 : min(_5335, 1.0))) * (_3271 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1211))) + ((_3277 + ((isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))) * _2049)) * cbPerFrame._m0[3u].x);
    float _3298 = ((isnan(1.0) ? _5346 : (isnan(_5346) ? 1.0 : min(_5346, 1.0))) * (_3273 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1211))) + ((_3279 + ((isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0))) * _2049)) * cbPerFrame._m0[3u].x);
    uint _3299 = _292 + 6u;
    float _3307 = _1133 / cbSceneParam._m0[86u].x;
    float _3308 = _1134 / cbSceneParam._m0[86u].y;
    vec4 _3322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3307, _3308, (log2((isnan(cbSceneParam._m0[77u].w) ? _1056 : (isnan(_1056) ? cbSceneParam._m0[77u].w : min(_1056, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3324 = _3322.x;
    float _3325 = _3322.y;
    float _3326 = _3322.z;
    float _3327 = _3322.w;
    float _3399;
    float _3401;
    float _3403;
    float _3405;
    if (_1056 > cbSceneParam._m0[78u].w)
    {
        float _3361 = isnan(_1056) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1056 : min(cbSceneParam._m0[80u].w, _1056));
        float _3362 = _3361 / _1056;
        float _3373 = _3362 * _1106;
        float _3374 = _1107 * _3362;
        float _3375 = (-0.0) - _3374;
        float _3377 = _3362 * _1108;
        float _3379 = (cbSceneParam._m0[77u].w * _3375) / _3361;
        float _3380 = _3379 + cbSceneParam._m0[79u].w;
        float _3381 = cbSceneParam._m0[79u].w - _3374;
        float _3387 = sqrt(((_3373 * _3373) + (_3374 * _3374)) + (_3377 * _3377));
        float _3390 = (1.0 - (cbSceneParam._m0[77u].w / _3361)) * _3387;
        float _3395 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3397 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3574;
        if (abs((_3375 - _3379) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3574 = ((((_3380 > 0.0) ? exp2(_3395 * _3380) : (2.0 - exp2(_3397 * _3380))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3390;
        }
        else
        {
            float _3518 = 1.0 / cbSceneParam._m0[80u].x;
            float _3519 = isnan(_3381) ? _3380 : (isnan(_3380) ? _3381 : max(_3380, _3381));
            float _3520 = isnan(_3381) ? _3380 : (isnan(_3380) ? _3381 : min(_3380, _3381));
            float _3529 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : min(_3519, 0.0));
            float _3530 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : min(_3520, 0.0));
            _3574 = ((abs(_3387 / _3375) * cbSceneParam._m0[80u].y) * ((((_3529 - _3530) * 2.0) - ((exp2(_3395 * (isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0)))) - exp2(_3395 * (isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0))))) * _3518)) - ((exp2(_3397 * _3529) - exp2(_3397 * _3530)) * _3518))) + (_3390 * cbSceneParam._m0[80u].z);
        }
        vec4 _3576 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3307, _3308, 1.0), 0.0);
        float _3585 = exp2((_3574 * (-1.44269502162933349609375)) * (1.0 - _3576.w));
        float _3586 = log2(_3585);
        float _3602 = log2(_3327);
        _3399 = (exp2(_3602 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3586 * cbSceneParam._m0[78u].x)) * _3576.x) / cbSceneParam._m0[78u].x)) + _3324;
        _3401 = (exp2(_3602 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3586 * cbSceneParam._m0[78u].y)) * _3576.y) / cbSceneParam._m0[78u].y)) + _3325;
        _3403 = (exp2(_3602 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3586 * cbSceneParam._m0[78u].z)) * _3576.z) / cbSceneParam._m0[78u].z)) + _3326;
        _3405 = _3585 * _3327;
    }
    else
    {
        _3399 = _3324;
        _3401 = _3325;
        _3403 = _3326;
        _3405 = _3327;
    }
    bool _3612;
    vec4 _3415;
    vec4 _3437;
    float _3439;
    float _3443;
    float _3444;
    float _3445;
    float _3446;
    bool _3456;
    for (;;)
    {
        _3415 = cbMatDynParam._m0[0u];
        float _3417 = roundEven(_3415.y);
        bool _3418 = _3417 == 3.0;
        float _3419 = log2(_3405);
        float _3426 = exp2(_3419 * cbSceneParam._m0[78u].x) * _3296;
        float _3427 = exp2(_3419 * cbSceneParam._m0[78u].y) * _3297;
        float _3428 = exp2(_3419 * cbSceneParam._m0[78u].z) * _3298;
        float _3435 = _1122 + (-0.5);
        _3437 = cbMtdParam._m0[1u];
        _3439 = _3437.y * _3435;
        float _3442 = (_3417 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3443 = _3442 * (_3418 ? _3426 : (_3426 + (cbSceneParam._m0[72u].w * _3399)));
        _3444 = _3442 * (_3418 ? _3427 : (_3427 + (cbSceneParam._m0[72u].w * _3401)));
        _3445 = _3442 * (_3418 ? _3428 : (_3428 + (cbSceneParam._m0[72u].w * _3403)));
        _3446 = _3435 * 0.999000012874603271484375;
        _3456 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3456)
        {
            if ((cbInstanceData._m0[_292 + 7u].x + _3446) < 0.5)
            {
                _3612 = true;
                break;
            }
        }
        uint _3553 = _1171 + uint(_3415.w);
        if ((cbInstanceData._m0[_3553].w < 1.0) && ((cbInstanceData._m0[_3553].w + _3446) < 0.5))
        {
            _3612 = true;
            break;
        }
        if ((_3439 + 1.0) < _3437.x)
        {
            _3612 = true;
            break;
        }
        _3612 = false;
        break;
    }
    float _3816;
    if (_3612)
    {
        discard_state = true;
        _3816 = 0.0;
    }
    else
    {
        _3816 = cbInstanceData._m0[_3299].w;
    }
    SV_Target.x = _3443;
    SV_Target.y = _3444;
    SV_Target.z = _3445;
    SV_Target.w = _3816;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3299].w;
    discard_exit();
}


