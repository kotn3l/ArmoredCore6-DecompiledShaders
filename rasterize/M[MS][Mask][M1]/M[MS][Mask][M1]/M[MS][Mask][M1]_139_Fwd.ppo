#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1724;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4047 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4058 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4069 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _388 = _383.x * cbMtdParam._m0[11u].x;
    float _389 = _383.y * cbMtdParam._m0[11u].y;
    float _390 = _383.z * cbMtdParam._m0[11u].z;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _477 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _494 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _428.x) * 2.0) - ((((_465 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4080 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _502 = (_495 * ((_409.x * cbMtdParam._m0[12u].x) - _388)) + _388;
    float _503 = (_495 * ((_409.y * cbMtdParam._m0[12u].y) - _389)) + _389;
    float _504 = (_495 * ((_409.z * cbMtdParam._m0[12u].z) - _390)) + _390;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _543 = _541.x;
    float _553 = dot(vec4(_543, _541.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _567 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _428.y) * 2.0) - ((((_543 - _553) * cbMtdParam._m0[23u].w) + _553) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4091 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _575 = (_568 * ((_521.x * cbMtdParam._m0[13u].x) - _502)) + _502;
    float _576 = (_568 * ((_521.y * cbMtdParam._m0[13u].y) - _503)) + _503;
    float _577 = (_568 * ((_521.z * cbMtdParam._m0[13u].z) - _504)) + _504;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _615 = _613.x;
    float _625 = dot(vec4(_615, _613.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _637 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _428.z) * 2.0) - ((((_615 - _625) * cbMtdParam._m0[23u].w) + _625) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4102 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _648 = (_357.x * cbMtdParam._m0[9u].x) * ((_638 * ((_596.x * cbMtdParam._m0[14u].x) - _575)) + _575);
    float _649 = (_357.y * cbMtdParam._m0[9u].y) * ((_638 * ((_596.y * cbMtdParam._m0[14u].y) - _576)) + _576);
    float _650 = (_357.z * cbMtdParam._m0[9u].z) * ((_638 * ((_596.z * cbMtdParam._m0[14u].z) - _577)) + _577);
    float _654 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _648;
    float _657 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _649;
    float _660 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _650;
    float _668 = (((_648 - _654) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) + _654) * 4.55000019073486328125;
    float _670 = (((_649 - _657) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) + _657) * 4.55000019073486328125;
    float _672 = (((_650 - _660) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) + _660) * 4.55000019073486328125;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _320) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _321) + cbTextureTilingScale._m0[14u].w));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _751 = _749.x;
    float _752 = _749.y;
    float _753 = _749.z;
    float _760 = ((_732.x - _751) * _495) + _751;
    float _761 = ((_732.y - _752) * _495) + _752;
    float _762 = ((_732.z - _753) * _495) + _753;
    vec4 _774 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _785 = ((_774.x - _760) * _568) + _760;
    float _786 = ((_774.y - _761) * _568) + _761;
    float _787 = ((_774.z - _762) * _568) + _762;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _812 = ((_799.z - _787) * _638) + _787;
    float _815 = ((((_799.x - _785) * _638) + _785) * 2.0) + (-1.0);
    float _816 = ((((_799.y - _786) * _638) + _786) * 2.0) + (-1.0);
    float _817 = dot(vec2(_815, _816), vec2(_815, _816));
    float _4113 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _822 = sqrt(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))));
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _861 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _863 = _861.x;
    float _864 = 1.0 - _863;
    float _872 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _875 = ((isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : min(_872, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _884 = (_875 - ((((((_863 - _864) * cbMtdParam._m0[24u].z) + _864) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _875))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4134 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _885 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _892 = (_885 * ((_690.x * cbMtdParam._m0[18u].x) - _668)) + _668;
    float _893 = (_885 * ((_690.y * cbMtdParam._m0[18u].y) - _670)) + _670;
    float _894 = (_885 * ((_690.z * cbMtdParam._m0[18u].z) - _672)) + _672;
    float _909 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _910 = _909 * TEXCOORD.z;
    float _911 = _909 * TEXCOORD.w;
    vec4 _923 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _910) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _911) + cbTextureTilingScale._m0[19u].w));
    float _925 = _923.x;
    float _926 = 1.0 - _925;
    float _951 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_925 - _926) * cbMtdParam._m0[24u].w) + _926) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4145 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _952 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _960 = ((((cbMtdParam._m0[10u].x - _892) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _952) + _892;
    float _961 = ((((cbMtdParam._m0[10u].y - _893) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _952) + _893;
    float _962 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _894)) * _952) + _894;
    vec4 _988 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _990 = _988.x;
    float _1007 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _990) * _495) + _990;
    float _1024 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _1007) * _568) + _1007;
    float _1041 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _1024) * _638) + _1024;
    float _1047 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1041) * cbMtdParam._m0[19u].z) + _1041;
    float _1049 = _1047 - (_1047 * _885);
    float _1051 = _1049 - (_1049 * _952);
    float _1056 = (((_709.z - _812) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _812;
    float _1060 = ((_836.z - _1056) * cbMtdParam._m0[19u].w) + _1056;
    vec4 _1076 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1083 = (_1076.x * 2.0) + (-1.0);
    float _1084 = (_1076.y * 2.0) + (-1.0);
    float _1085 = dot(vec2(_1083, _1084), vec2(_1083, _1084));
    float _4156 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1093 = (_885 * (_1076.z - _1060)) + _1060;
    float _1096 = ((cbMtdParam._m0[23u].x - _1093) * _952) + _1093;
    vec4 _1119 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _910) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _911) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1125 = (_1119.x * 2.0) + (-1.0);
    float _1126 = (_1119.y * 2.0) + (-1.0);
    float _1127 = dot(vec2(_1125, _1126), vec2(_1125, _1126));
    float _4167 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1141 = (_815 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_709.x * 2.0) + (-1.0)))) + (((_836.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1142 = (_816 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_709.y * 2.0) + (-1.0)))) + (((_836.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1154 = (((_1083 - _1141) + (cbMtdParam._m0[21u].x * _1141)) * _885) + _1141;
    float _1155 = (((_1084 - _1142) + (cbMtdParam._m0[21u].x * _1142)) * _885) + _1142;
    float _1156 = (_885 * (sqrt(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) - _822)) + _822;
    float _1167 = (((_1125 - _1154) + (_1154 * cbMtdParam._m0[22u].z)) * _952) + _1154;
    float _1168 = (((_1126 - _1155) + (_1155 * cbMtdParam._m0[22u].z)) * _952) + _1155;
    float _1169 = ((sqrt(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) - _1156) * _952) + _1156;
    float _1171 = cbMtdParam._m0[22u].x + _836.w;
    float _1174 = fma(_1169, _269 * NORMAL.x, fma(_1168, _276 * TANGENT.x, (_262 * _254) * _1167));
    float _1177 = fma(_1169, _269 * NORMAL.y, fma(_1168, _276 * TANGENT.y, (_262 * _255) * _1167));
    float _1180 = fma(_1169, _269 * NORMAL.z, fma(_1168, _276 * TANGENT.z, (_262 * _256) * _1167));
    float _1184 = inversesqrt(dot(vec3(_1174, _1177, _1180), vec3(_1174, _1177, _1180)));
    float _1185 = _1184 * _1174;
    float _1186 = _1184 * _1177;
    float _1187 = _1184 * _1180;
    float _4178 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1188 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _4200 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4211 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4222 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4233 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1193 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _1207 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1247);
    float _1258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1247);
    float _1259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1247);
    float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
    float _1264 = _1257 * _1263;
    float _1265 = _1258 * _1263;
    float _1266 = _1259 * _1263;
    float _1272 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1273 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1291 = fma(_1187, cbSceneParam._m0[5u].z, fma(_1186, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1185));
    float _1294 = fma(_1187, cbSceneParam._m0[6u].z, fma(_1186, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1185));
    float _1297 = fma(_1187, cbSceneParam._m0[7u].z, fma(_1186, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1185));
    uint _1311 = (_301 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1317 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_1311].x;
    float _1318 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_1311].y;
    float _1319 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * cbInstanceData._m0[_1311].z;
    float _4244 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1320 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1321 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _1322 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _1323 = 1.0 - _1193;
    float _1324 = _1320 * _1323;
    float _1325 = _1321 * _1323;
    float _1326 = _1322 * _1323;
    float _1331 = (_1320 + (-0.039999999105930328369140625)) * _1193;
    float _1332 = (_1321 + (-0.039999999105930328369140625)) * _1193;
    float _1333 = (_1322 + (-0.039999999105930328369140625)) * _1193;
    float _1334 = _1331 + 0.039999999105930328369140625;
    float _1336 = _1332 + 0.039999999105930328369140625;
    float _1337 = _1333 + 0.039999999105930328369140625;
    vec4 _1346 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1272, cbSceneParam._m0[86u].y * _1273));
    float _1350 = ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * TEXCOORD_5.w) * _1346.x;
    float _1351 = dot(vec3(_1185, _1186, _1187), vec3(_1264, _1265, _1266));
    float _1354 = _1351 * 2.0;
    float _1358 = (_1354 * _1185) - _1264;
    float _1359 = (_1354 * _1186) - _1265;
    float _1360 = (_1354 * _1187) - _1266;
    float _1364 = abs(dot(vec3(_1264, _1265, _1266), vec3(_1185, _1186, _1187)));
    float _4277 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _1366 = sqrt(_1188);
    float _1379 = exp2((_1366 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1366 * 3.0));
    float _1385 = (1.0 - _1379) * ((_1366 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1386 = _1379 * _1366;
    float _1414 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1418 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1422 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1723;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1448 = fma(_1422, cbModelParam._m0[26u].z, fma(_1418, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1414));
        float _1452 = fma(_1422, cbModelParam._m0[27u].z, fma(_1418, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1414));
        float _1456 = fma(_1422, cbModelParam._m0[28u].z, fma(_1418, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1414));
        float _1481 = _1414 + _1185;
        float _1482 = _1418 + _1186;
        float _1483 = _1422 + _1187;
        float _1493 = fma(_1483, cbModelParam._m0[26u].z, fma(_1482, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1481)) - _1448;
        float _1494 = fma(_1483, cbModelParam._m0[27u].z, fma(_1482, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1481)) - _1452;
        float _1495 = fma(_1483, cbModelParam._m0[28u].z, fma(_1482, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1481)) - _1456;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1448 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1452 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[34u].z) + ((((((_1456 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1551 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1517.x + (-0.5));
        float _1553 = _1551 * (_1517.y + (-0.5));
        float _1554 = _1551 * (_1517.z + (-0.5));
        float _1561 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1524.x + (-0.5));
        float _1563 = _1561 * (_1524.y + (-0.5));
        float _1564 = _1561 * (_1524.z + (-0.5));
        float _1571 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1531.x + (-0.5));
        float _1573 = _1571 * (_1531.y + (-0.5));
        float _1574 = _1571 * (_1531.z + (-0.5));
        float _1581 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1538.x + (-0.5));
        float _1583 = _1581 * (_1538.y + (-0.5));
        float _1584 = _1581 * (_1538.z + (-0.5));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1587 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1588 = _1552 * 0.5;
        float _1589 = _1562 * 0.5;
        float _1590 = _1572 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1605 = (dot(vec3(_1185, _1186, _1187), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1615 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4325 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1617 + 1.0))) + _1622) * _1585;
        float _1632 = _1553 * 0.5;
        float _1633 = _1563 * 0.5;
        float _1634 = _1573 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_1185, _1186, _1187), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1586 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4358 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1659 + 1.0))) + _1664) * _1586;
        float _1674 = _1554 * 0.5;
        float _1675 = _1564 * 0.5;
        float _1676 = _1574 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_1185, _1186, _1187), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1587 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4391 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1701 + 1.0))) + _1706) * _1587;
        _1723 = _1554;
        _1725 = _1553;
        _1726 = _1552;
        _1727 = _1564;
        _1728 = _1563;
        _1729 = _1562;
        _1730 = _1574;
        _1731 = _1573;
        _1732 = _1572;
        _1733 = _1587;
        _1734 = _1586;
        _1735 = _1585;
        _1736 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
        _1737 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1738 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
    }
    else
    {
        _1723 = _1724;
        _1725 = _1724;
        _1726 = _1724;
        _1727 = _1724;
        _1728 = _1724;
        _1729 = _1724;
        _1730 = _1724;
        _1731 = _1724;
        _1732 = _1724;
        _1733 = _1724;
        _1734 = _1724;
        _1735 = _1724;
        _1736 = 0.0;
        _1737 = 0.0;
        _1738 = 0.0;
    }
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1761 = fma(_1422, cbModelParam._m0[30u].z, fma(_1418, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1414));
        float _1765 = fma(_1422, cbModelParam._m0[31u].z, fma(_1418, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1414));
        float _1769 = fma(_1422, cbModelParam._m0[32u].z, fma(_1418, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1414));
        float _1792 = _1414 + _1185;
        float _1793 = _1418 + _1186;
        float _1794 = _1422 + _1187;
        float _1804 = fma(_1794, cbModelParam._m0[30u].z, fma(_1793, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1792)) - _1761;
        float _1805 = fma(_1794, cbModelParam._m0[31u].z, fma(_1793, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1792)) - _1765;
        float _1806 = fma(_1794, cbModelParam._m0[32u].z, fma(_1793, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1792)) - _1769;
        float _1810 = inversesqrt(dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806)));
        float _1823 = ((_1810 * _1804) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1761 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1824 = ((_1810 * _1805) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1765 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1825 = ((_1810 * _1806) / cbModelParam._m0[35u].z) + ((((((_1769 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1827 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        vec4 _1834 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        vec4 _1841 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        vec4 _1848 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1823, _1824, _1825), 0.0);
        float _1860 = exp2((_1827.w + (-0.5)) * 20.0) * 2.0;
        float _1861 = _1860 * (_1827.x + (-0.5));
        float _1862 = _1860 * (_1827.y + (-0.5));
        float _1863 = _1860 * (_1827.z + (-0.5));
        float _1870 = exp2((_1834.w + (-0.5)) * 20.0) * 2.0;
        float _1871 = _1870 * (_1834.x + (-0.5));
        float _1872 = _1870 * (_1834.y + (-0.5));
        float _1873 = _1870 * (_1834.z + (-0.5));
        float _1880 = exp2((_1841.w + (-0.5)) * 20.0) * 2.0;
        float _1881 = _1880 * (_1841.x + (-0.5));
        float _1882 = _1880 * (_1841.y + (-0.5));
        float _1883 = _1880 * (_1841.z + (-0.5));
        float _1890 = exp2((_1848.w + (-0.5)) * 20.0) * 2.0;
        float _1891 = _1890 * (_1848.x + (-0.5));
        float _1892 = _1890 * (_1848.y + (-0.5));
        float _1893 = _1890 * (_1848.z + (-0.5));
        float _1894 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1895 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1896 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1897 = _1861 * 0.5;
        float _1898 = _1871 * 0.5;
        float _1899 = _1881 * 0.5;
        float _1900 = dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899));
        float _1905 = (_1900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1900);
        float _1913 = (dot(vec3(_1185, _1186, _1187), vec3(_1905 * _1897, _1905 * _1898, _1905 * _1899)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1922 = sqrt(((_1898 * _1898) + (_1897 * _1897)) + (_1899 * _1899)) / (_1894 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1924 = _1923 * 2.0;
        float _1928 = (1.0 - _1923) / (_1923 + 1.0);
        float _4454 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1938 = ((((1.0 - _1929) * (_1924 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1924 + 1.0))) + _1929) * _1894;
        float _1939 = _1862 * 0.5;
        float _1940 = _1872 * 0.5;
        float _1941 = _1882 * 0.5;
        float _1942 = dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941));
        float _1947 = (_1942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1942);
        float _1955 = (dot(vec3(_1185, _1186, _1187), vec3(_1947 * _1939, _1947 * _1940, _1947 * _1941)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1964 = sqrt(((_1940 * _1940) + (_1939 * _1939)) + (_1941 * _1941)) / (_1895 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1966 = _1965 * 2.0;
        float _1970 = (1.0 - _1965) / (_1965 + 1.0);
        float _4487 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1980 = ((((1.0 - _1971) * (_1966 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1966 + 1.0))) + _1971) * _1895;
        float _1981 = _1863 * 0.5;
        float _1982 = _1873 * 0.5;
        float _1983 = _1883 * 0.5;
        float _1984 = dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983));
        float _1989 = (_1984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1984);
        float _1997 = (dot(vec3(_1185, _1186, _1187), vec3(_1989 * _1981, _1989 * _1982, _1989 * _1983)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2006 = sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983)) / (_1896 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2008 = _2007 * 2.0;
        float _2012 = (1.0 - _2007) / (_2007 + 1.0);
        float _4520 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2022 = ((((1.0 - _2013) * (_2008 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2008 + 1.0))) + _2013) * _1896;
        _2030 = _1863;
        _2031 = _1862;
        _2032 = _1861;
        _2033 = _1873;
        _2034 = _1872;
        _2035 = _1871;
        _2036 = _1883;
        _2037 = _1882;
        _2038 = _1881;
        _2039 = _1896;
        _2040 = _1895;
        _2041 = _1894;
        _2042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)));
        _2043 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)));
        _2044 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)));
    }
    else
    {
        _2030 = _1724;
        _2031 = _1724;
        _2032 = _1724;
        _2033 = _1724;
        _2034 = _1724;
        _2035 = _1724;
        _2036 = _1724;
        _2037 = _1724;
        _2038 = _1724;
        _2039 = _1724;
        _2040 = _1724;
        _2041 = _1724;
        _2042 = 0.0;
        _2043 = 0.0;
        _2044 = 0.0;
    }
    float _2054 = (cbModelParam._m0[1u].x * (_2042 - _1736)) + _1736;
    float _2055 = (cbModelParam._m0[1u].x * (_2043 - _1737)) + _1737;
    float _2056 = (cbModelParam._m0[1u].x * (_2044 - _1738)) + _1738;
    float _2077 = fma(_2056, cbSceneParam._m0[89u].z, fma(_2055, cbSceneParam._m0[89u].y, _2054 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2056, cbSceneParam._m0[90u].z, fma(_2055, cbSceneParam._m0[90u].y, _2054 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2056, cbSceneParam._m0[91u].z, fma(_2055, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2054));
    float _2098 = _1358 * 0.5;
    float _2099 = _1359 * 0.5;
    float _2100 = _1360 * 0.5;
    float _2101 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_2032, _2035, _2038, _2041));
    float _2104 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_2031, _2034, _2037, _2040));
    float _2107 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_2030, _2033, _2036, _2039));
    float _2141;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2114 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_1723, _1727, _1730, _1733));
        float _2118 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_1725, _1728, _1731, _1734));
        float _2122 = dot(vec4(_2098, _2099, _2100, 1.0), vec4(_1726, _1729, _1732, _1735));
        float _2129 = dot(vec4(cbModelParam._m0[39u]), vec4(_2098, _2099, _2100, 1.0));
        _2141 = dot(vec3(isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0)), isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)), isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2129) ? 0.0 : (isnan(0.0) ? _2129 : max(0.0, _2129))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2141 = 1.0;
    }
    float _2152;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2143 = dot(vec4(cbModelParam._m0[40u]), vec4(_2098, _2099, _2100, 1.0));
        _2152 = dot(vec3(isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0)), isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)), isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2143) ? 0.0 : (isnan(0.0) ? _2143 : max(0.0, _2143))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2152 = 1.0;
    }
    float _2156 = (_2152 * cbModelParam._m0[1u].x) + (_2141 * (1.0 - cbModelParam._m0[1u].x));
    float _2166 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1188);
    float _2167 = isnan(_2166) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2166 : min(cbModelParam._m0[25u].z, _2166));
    float _2247;
    float _2249;
    float _2251;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2214 = fma(_1422, cbModelParam._m0[13u].z, fma(_1418, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1414)) + cbModelParam._m0[13u].w;
        float _2218 = fma(_1422, cbModelParam._m0[14u].z, fma(_1418, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1414)) + cbModelParam._m0[14u].w;
        float _2222 = fma(_1422, cbModelParam._m0[15u].z, fma(_1418, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1414)) + cbModelParam._m0[15u].w;
        float _2225 = fma(_1360, cbModelParam._m0[13u].z, fma(_1359, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1358));
        float _2228 = fma(_1360, cbModelParam._m0[14u].z, fma(_1359, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1358));
        float _2231 = fma(_1360, cbModelParam._m0[15u].z, fma(_1359, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1358));
        float _2259;
        if (_2225 > 0.0)
        {
            _2259 = abs((1.0 - _2214) / _2225);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2214 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2259 = frontier_phi_14_12_ladder;
        }
        float _2461;
        if (_2228 > 0.0)
        {
            _2461 = abs((1.0 - _2218) / _2228);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2218 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2461 = frontier_phi_23_19_ladder;
        }
        float _2715;
        if (_2231 > 0.0)
        {
            _2715 = abs((1.0 - _2222) / _2231);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2222 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2715 = frontier_phi_35_30_ladder;
        }
        float _2717 = isnan(_2461) ? _2259 : (isnan(_2259) ? _2461 : min(_2259, _2461));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _2225) + _2214;
        float _2723 = (_2718 * _2228) + _2218;
        float _2724 = (_2718 * _2231) + _2222;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2727 = (-1.0) - _2725;
        float _2729 = _2725 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2724 > _2729) || ((_2724 < _2727) || ((_2723 > _2729) || ((_2723 < _2727) || ((_2722 < _2727) || (_2722 > _2729))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2724, cbModelParam._m0[9u].z, fma(_2723, cbModelParam._m0[9u].y, _2722 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2724, cbModelParam._m0[10u].z, fma(_2723, cbModelParam._m0[10u].y, _2722 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2724, cbModelParam._m0[11u].z, fma(_2723, cbModelParam._m0[11u].y, _2722 * cbModelParam._m0[11u].x))), _2167);
            frontier_phi_13_35_ladder = _2852.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2852.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2852.x * cbModelParam._m0[1u].y;
        }
        _2247 = frontier_phi_13_35_ladder_2;
        _2249 = frontier_phi_13_35_ladder_1;
        _2251 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1358, _1359, _1360), _2167);
        _2247 = _2235.x * cbModelParam._m0[1u].y;
        _2249 = _2235.y * cbModelParam._m0[1u].y;
        _2251 = _2235.z * cbModelParam._m0[1u].y;
    }
    float _2255 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1188);
    float _2256 = isnan(_2255) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2255 : min(cbModelParam._m0[25u].w, _2255));
    float _2345;
    float _2347;
    float _2349;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2309 = fma(_1422, cbModelParam._m0[21u].z, fma(_1418, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1414)) + cbModelParam._m0[21u].w;
        float _2313 = fma(_1422, cbModelParam._m0[22u].z, fma(_1418, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1414)) + cbModelParam._m0[22u].w;
        float _2317 = fma(_1422, cbModelParam._m0[23u].z, fma(_1418, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1414)) + cbModelParam._m0[23u].w;
        float _2320 = fma(_1360, cbModelParam._m0[21u].z, fma(_1359, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1358));
        float _2323 = fma(_1360, cbModelParam._m0[22u].z, fma(_1359, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1358));
        float _2326 = fma(_1360, cbModelParam._m0[23u].z, fma(_1359, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1358));
        float _2466;
        if (_2320 > 0.0)
        {
            _2466 = abs((1.0 - _2309) / _2320);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2320 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2309 + 1.0) / _2320);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2466 = frontier_phi_25_21_ladder;
        }
        float _2742;
        if (_2323 > 0.0)
        {
            _2742 = abs((1.0 - _2313) / _2323);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2323 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2313 + 1.0) / _2323);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2742 = frontier_phi_37_32_ladder;
        }
        float _2955;
        if (_2326 > 0.0)
        {
            _2955 = abs((1.0 - _2317) / _2326);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2326 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2317 + 1.0) / _2326);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2955 = frontier_phi_46_43_ladder;
        }
        float _2957 = isnan(_2742) ? _2466 : (isnan(_2466) ? _2742 : min(_2466, _2742));
        float _2958 = isnan(_2955) ? _2957 : (isnan(_2957) ? _2955 : min(_2957, _2955));
        float _2962 = (_2958 * _2320) + _2309;
        float _2963 = (_2958 * _2323) + _2313;
        float _2964 = (_2958 * _2326) + _2317;
        float _2965 = _2958 * 9.9999997473787516355514526367188e-05;
        float _2966 = (-1.0) - _2965;
        float _2968 = _2965 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2964 > _2968) || ((_2964 < _2966) || ((_2963 > _2968) || ((_2963 < _2966) || ((_2962 < _2966) || (_2962 > _2968))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3163 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2964, cbModelParam._m0[17u].z, fma(_2963, cbModelParam._m0[17u].y, _2962 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2964, cbModelParam._m0[18u].z, fma(_2963, cbModelParam._m0[18u].y, _2962 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2964, cbModelParam._m0[19u].z, fma(_2963, cbModelParam._m0[19u].y, _2962 * cbModelParam._m0[19u].x))), _2256);
            frontier_phi_22_46_ladder = _3163.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3163.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3163.x * cbModelParam._m0[1u].z;
        }
        _2345 = frontier_phi_22_46_ladder_2;
        _2347 = frontier_phi_22_46_ladder_1;
        _2349 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2329 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1358, _1359, _1360), _2256);
        _2345 = _2329.x * cbModelParam._m0[1u].z;
        _2347 = _2329.y * cbModelParam._m0[1u].z;
        _2349 = _2329.z * cbModelParam._m0[1u].z;
    }
    float _2362 = (((_1385 * _1334) + _1386) * _1350) * ((cbModelParam._m0[1u].w * (_2345 - _2247)) + _2247);
    float _2364 = (((_1385 * _1336) + _1386) * _1350) * ((cbModelParam._m0[1u].w * (_2347 - _2249)) + _2249);
    float _2366 = (((_1385 * _1337) + _1386) * _1350) * ((cbModelParam._m0[1u].w * (_2349 - _2251)) + _2251);
    float _2369 = fma(_2366, cbSceneParam._m0[89u].z, fma(_2364, cbSceneParam._m0[89u].y, _2362 * cbSceneParam._m0[89u].x));
    float _2372 = fma(_2366, cbSceneParam._m0[90u].z, fma(_2364, cbSceneParam._m0[90u].y, _2362 * cbSceneParam._m0[90u].x));
    float _2375 = fma(_2366, cbSceneParam._m0[91u].z, fma(_2364, cbSceneParam._m0[91u].y, _2362 * cbSceneParam._m0[91u].x));
    uvec4 _2385 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2387 = _2385.x * 14u;
    uint _2388 = _2387 + 13u;
    float _2395 = _1350 + (-1.0);
    float _2400 = (cbLight._m0[_2388].x * _2395) + 1.0;
    float _2401 = (cbLight._m0[_2388].y * _2395) + 1.0;
    float _2402 = (cbLight._m0[_2388].z * _2395) + 1.0;
    float _2403 = (cbLight._m0[_2388].w * _2395) + 1.0;
    uint _2404 = _2387 + 5u;
    float _2410 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
    uint _2414 = _2387 + 4u;
    float _2420 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
    uint _2424 = _2387 | 1u;
    float _2435 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_1185, _1186, _1187));
    float _2438 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_1185, _1186, _1187));
    float _4656 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _4667 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2443 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2445 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2452 = ((cbLight._m0[_2404].x * _2410) * _2445) + ((cbLight._m0[_2414].x * _2420) * _2443);
    float _2453 = ((_2410 * cbLight._m0[_2404].y) * _2445) + ((_2420 * cbLight._m0[_2414].y) * _2443);
    float _2454 = ((_2410 * cbLight._m0[_2404].z) * _2445) + ((_2420 * cbLight._m0[_2414].z) * _2443);
    uvec4 _2458 = floatBitsToUint(cbLight._m0[_2387 + 12u]);
    bool _2460 = _2458.x == 0u;
    float _2471;
    float _2473;
    float _2475;
    if (_2460)
    {
        _2471 = _2452;
        _2473 = _2453;
        _2475 = _2454;
    }
    else
    {
        uint _2479 = _2387 + 6u;
        float _2495 = (dot(vec3(cbLight._m0[_2387 + 2u].xyz), vec3(_1185, _1186, _1187)) * 0.5) + 0.5;
        float _2496 = _2495 * _2495;
        float _4678 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2497 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2498 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2471 = (((cbLight._m0[_2479].x * 0.3183098733425140380859375) * _2497) * _2498) + _2452;
        _2473 = (((cbLight._m0[_2479].y * 0.3183098733425140380859375) * _2497) * _2498) + _2453;
        _2475 = (((cbLight._m0[_2479].z * 0.3183098733425140380859375) * _2497) * _2498) + _2454;
    }
    bool _2478 = _2458.y == 0u;
    float _2516;
    float _2518;
    float _2520;
    if (_2478)
    {
        _2516 = _2471;
        _2518 = _2473;
        _2520 = _2475;
    }
    else
    {
        uint _2686 = _2387 + 7u;
        float _2702 = (dot(vec3(cbLight._m0[_2387 + 3u].xyz), vec3(_1185, _1186, _1187)) * 0.5) + 0.5;
        float _2703 = _2702 * _2702;
        float _4694 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2704 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2705 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2516 = (((cbLight._m0[_2686].x * 0.3183098733425140380859375) * _2704) * _2705) + _2471;
        _2518 = (((cbLight._m0[_2686].y * 0.3183098733425140380859375) * _2704) * _2705) + _2473;
        _2520 = (((cbLight._m0[_2686].z * 0.3183098733425140380859375) * _2704) * _2705) + _2475;
    }
    uint _2523 = _2387 + 8u;
    float _2536 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _1188) * 0.949999988079071044921875);
    float _2537 = _2536 * _2536;
    float _2538 = cbLight._m0[_2387].x + _1264;
    float _2539 = cbLight._m0[_2387].y + _1265;
    float _2540 = cbLight._m0[_2387].z + _1266;
    float _2544 = inversesqrt(dot(vec3(_2538, _2539, _2540), vec3(_2538, _2539, _2540)));
    float _2545 = _2544 * _2538;
    float _2546 = _2544 * _2539;
    float _2547 = _2544 * _2540;
    float _2548 = dot(vec3(_1185, _1186, _1187), vec3(cbLight._m0[_2387].xyz));
    float _4710 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _4721 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    float _2552 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2553 = dot(vec3(_1185, _1186, _1187), vec3(_2545, _2546, _2547));
    float _4732 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2557 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2545, _2546, _2547));
    float _4743 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2561 = _2537 * _2537;
    float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
    float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2574 = 0.959999978542327880859375 - _1331;
    float _2576 = 0.959999978542327880859375 - _1332;
    float _2577 = 0.959999978542327880859375 - _1333;
    float _2584 = 1.0 - _2537;
    float _2595 = (0.5 / (((_2552 * ((_2551 * _2584) + _2537)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2584) + _2537) * _2551))) * _2551;
    float _4754 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2597 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
    uint _2608 = _2387 + 9u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _1188) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2424].x + _1264;
    float _2622 = cbLight._m0[_2424].y + _1265;
    float _2623 = cbLight._m0[_2424].z + _1266;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_1185, _1186, _1187), vec3(cbLight._m0[_2424].xyz));
    float _4765 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2635 = dot(vec3(_1185, _1186, _1187), vec3(_2628, _2629, _2630));
    float _4776 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2639 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2628, _2629, _2630));
    float _4787 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2643 = _2620 * _2620;
    float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
    float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2661 = 1.0 - _2620;
    float _2671 = (0.5 / (((_2552 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2661) + _2620) * _2634))) * _2634;
    float _4798 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
    float _2683 = (((((_2654 * _2574) + _1334) * cbLight._m0[_2608].x) * _2673) * _2410) + (((((_2573 * _2574) + _1334) * cbLight._m0[_2523].x) * _2597) * _2420);
    float _2684 = (((((_2654 * _2576) + _1336) * cbLight._m0[_2608].y) * _2673) * _2410) + (((((_2573 * _2576) + _1336) * cbLight._m0[_2523].y) * _2597) * _2420);
    float _2685 = (((((_2654 * _2577) + _1337) * cbLight._m0[_2608].z) * _2673) * _2410) + (((((_2573 * _2577) + _1337) * cbLight._m0[_2523].z) * _2597) * _2420);
    float _2747;
    float _2749;
    float _2751;
    if (_2460)
    {
        _2747 = _2683;
        _2749 = _2684;
        _2751 = _2685;
    }
    else
    {
        uint _2753 = _2387 + 2u;
        uint _2757 = _2387 + 10u;
        float _2771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2753].w)) * _1188) * 0.949999988079071044921875);
        float _2772 = _2771 * _2771;
        float _2773 = cbLight._m0[_2753].x + _1264;
        float _2774 = cbLight._m0[_2753].y + _1265;
        float _2775 = cbLight._m0[_2753].z + _1266;
        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
        float _2780 = _2779 * _2773;
        float _2781 = _2779 * _2774;
        float _2782 = _2779 * _2775;
        float _2783 = dot(vec3(_1185, _1186, _1187), vec3(cbLight._m0[_2753].xyz));
        float _4809 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2787 = dot(vec3(_1185, _1186, _1187), vec3(_2780, _2781, _2782));
        float _4820 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2791 = dot(vec3(cbLight._m0[_2753].xyz), vec3(_2780, _2781, _2782));
        float _4831 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2795 = _2772 * _2772;
        float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
        float _2806 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2813 = 1.0 - _2772;
        float _2823 = (0.5 / (((_2552 * ((_2786 * _2813) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2813) + _2772) * _2786))) * _2786;
        float _4842 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2747 = (((((_2806 * _2574) + _1334) * cbLight._m0[_2757].x) * _2825) * _2826) + _2683;
        _2749 = (((((_2806 * _2576) + _1336) * cbLight._m0[_2757].y) * _2825) * _2826) + _2684;
        _2751 = (((((_2806 * _2577) + _1337) * cbLight._m0[_2757].z) * _2825) * _2826) + _2685;
    }
    float _2861;
    float _2863;
    float _2865;
    if (_2478)
    {
        _2861 = _2747;
        _2863 = _2749;
        _2865 = _2751;
    }
    else
    {
        uint _2872 = _2387 + 3u;
        uint _2876 = _2387 + 11u;
        float _2890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2872].w)) * _1188) * 0.949999988079071044921875);
        float _2891 = _2890 * _2890;
        float _2892 = cbLight._m0[_2872].x + _1264;
        float _2893 = cbLight._m0[_2872].y + _1265;
        float _2894 = cbLight._m0[_2872].z + _1266;
        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
        float _2899 = _2898 * _2892;
        float _2900 = _2898 * _2893;
        float _2901 = _2898 * _2894;
        float _2902 = dot(vec3(_1185, _1186, _1187), vec3(cbLight._m0[_2872].xyz));
        float _4858 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
        float _2905 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2906 = dot(vec3(_1185, _1186, _1187), vec3(_2899, _2900, _2901));
        float _4869 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2910 = dot(vec3(cbLight._m0[_2872].xyz), vec3(_2899, _2900, _2901));
        float _4880 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2914 = _2891 * _2891;
        float _2918 = ((_2909 * _2909) * (_2914 + (-1.0))) + 1.0;
        float _2925 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
        float _2932 = 1.0 - _2891;
        float _2942 = (0.5 / (((_2552 * ((_2905 * _2932) + _2891)) + 9.9999999392252902907785028219223e-09) + (((_2552 * _2932) + _2891) * _2905))) * _2905;
        float _4891 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2914 / ((_2918 * _2918) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2861 = (((((_2925 * _2574) + _1334) * cbLight._m0[_2876].x) * _2944) * _2945) + _2747;
        _2863 = (((((_2925 * _2576) + _1336) * cbLight._m0[_2876].y) * _2944) * _2945) + _2749;
        _2865 = (((((_2925 * _2577) + _1337) * cbLight._m0[_2876].z) * _2944) * _2945) + _2751;
    }
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_2385.y == 0u)
    {
        float _3020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3021 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3020;
        float _3022 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3020;
        float _3023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3020;
        uvec4 _3035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3036 = _3035.x;
        uint _3047 = uint((float(_3035.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1273) / _3036))) + floor(float(uint(cbSceneParam._m0[85u].x * _1272) / _3036)));
        float _3057 = (log2(_3023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3058 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        uint _3061 = uint(isnan(14.0) ? _3058 : (isnan(_3058) ? 14.0 : min(_3058, 14.0)));
        uvec4 _3066 = texelFetch(g_lightClusterGridBuffer, int(((_3061 << 2u) + (_3047 << 6u)) >> 2u));
        uint _3067 = _3066.x;
        uint _3068 = _3035.z;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((((1u << ((_3068 >> 4u) & 15u)) + 4294967295u) & _3067) == 0u) || ((_3068 & 240u) == 0u))
        {
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
        }
        else
        {
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            uint _3319 = 0u;
            uint _3328;
            bool _3329;
            for (;;)
            {
                _3328 = texelFetch(g_lightClassification, int((((_3061 << 5u) + (_3047 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                _3329 = _3328 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3329)
                {
                    frontier_phi_61_pred = _3313;
                    frontier_phi_61_pred_1 = _3318;
                    frontier_phi_61_pred_2 = _3317;
                    frontier_phi_61_pred_3 = _3316;
                    frontier_phi_61_pred_4 = _3315;
                    frontier_phi_61_pred_5 = _3314;
                }
                else
                {
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    uint _3443;
                    _3437 = _3313;
                    _3438 = _3314;
                    _3439 = _3315;
                    _3440 = _3316;
                    _3441 = _3317;
                    _3442 = _3318;
                    _3443 = _3328;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    for (;;)
                    {
                        uint _3447 = uint(findLSB(_3443)) + (_3319 << 5u);
                        uint _3444 = (_3443 + 4294967295u) & _3443;
                        uint _3449 = _3447 * 48u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 3u)).x));
                        uint _3469 = (_3447 * 48u) + 4u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3488 = (_3447 * 48u) + 8u;
                        vec3 _3499 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x));
                        float _3503 = _3463.x - _3021;
                        float _3504 = _3463.y - _3022;
                        float _3505 = _3463.z - _3023;
                        float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                        float _3509 = inversesqrt(_3506);
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3513 = dot(vec3(_1291, _1294, _1297), vec3(_3510, _3511, _3512));
                        float _3518 = 1.0 - (_3506 * _3463.w);
                        float _4917 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3520 = sqrt(_3506) * _3482.w;
                        float _3523 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3513) + _3524;
                        float _3530 = _3520 * _3520;
                        float _3534 = ((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3519) / ((_3530 * 0.699999988079071044921875) + 1.0);
                        float _3538 = (-0.0) - _3021;
                        float _3539 = (-0.0) - _3022;
                        float _3540 = (-0.0) - _3023;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3545 = _3544 * _3538;
                        float _3546 = _3544 * _3539;
                        float _3547 = _3544 * _3540;
                        float _3555 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                        float _3556 = 1.0 - _1366;
                        float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                        float _3564 = _3563 * _3563;
                        float _3565 = _3564 * _3564;
                        float _3566 = _3545 + _3510;
                        float _3567 = _3546 + _3511;
                        float _3568 = _3547 + _3512;
                        float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                        float _3576 = dot(vec3(_1291, _1294, _1297), vec3(_3545, _3546, _3547));
                        float _4933 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3579 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3580 = dot(vec3(_1291, _1294, _1297), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                        float _4944 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3583 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                        float _3588 = _3523 * _3564;
                        float _3589 = _3588 * _3588;
                        float _3592 = ((1.0 - _3589) * _3513) + _3589;
                        float _4955 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                        float _3593 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3594 = 1.0 - _3564;
                        float _3604 = (0.5 / (((_3593 * ((_3579 * _3594) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3564) * _3579))) * _3593;
                        float _4966 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3615 = (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3587 * _3587) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125))) * _3519;
                        _3372 = (_3534 * _3482.x) + _3440;
                        _3373 = (_3534 * _3482.y) + _3441;
                        _3374 = (_3534 * _3482.z) + _3442;
                        _3369 = (_3615 * _3499.x) + _3437;
                        _3370 = (_3615 * _3499.y) + _3438;
                        _3371 = (_3615 * _3499.z) + _3439;
                        if (_3444 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3437 = _3369;
                            _3438 = _3370;
                            _3439 = _3371;
                            _3440 = _3372;
                            _3441 = _3373;
                            _3442 = _3374;
                            _3443 = _3444;
                        }
                    }
                    frontier_phi_61_pred = _3369;
                    frontier_phi_61_pred_1 = _3374;
                    frontier_phi_61_pred_2 = _3373;
                    frontier_phi_61_pred_3 = _3372;
                    frontier_phi_61_pred_4 = _3371;
                    frontier_phi_61_pred_5 = _3370;
                }
                _3169 = frontier_phi_61_pred;
                _3179 = frontier_phi_61_pred_1;
                _3177 = frontier_phi_61_pred_2;
                _3175 = frontier_phi_61_pred_3;
                _3173 = frontier_phi_61_pred_4;
                _3171 = frontier_phi_61_pred_5;
                uint _3320 = _3319 + 1u;
                if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3313 = _3169;
                    _3314 = _3171;
                    _3315 = _3173;
                    _3316 = _3175;
                    _3317 = _3177;
                    _3318 = _3179;
                    _3319 = _3320;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
        }
        uvec4 _3182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3183 = _3182.z;
        uint _3185 = (_3183 >> 8u) & 15u;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        if (((4294967295u << _3185) & _3067) == 0u)
        {
            _3281 = _3168;
            _3283 = _3170;
            _3285 = _3172;
            _3287 = _3174;
            _3289 = _3176;
            _3291 = _3178;
        }
        else
        {
            float _3306 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
            float _3307 = _3306 * _3021;
            float _3308 = _3306 * _3022;
            float _3309 = _3306 * _3023;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3185 < ((_3183 >> 12u) & 15u))
            {
                float _3282;
                float _3284;
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3420 = _3168;
                float _3421 = _3170;
                float _3422 = _3172;
                float _3423 = _3174;
                float _3424 = _3176;
                float _3425 = _3178;
                uint _3426 = _3185;
                uint _3435;
                bool _3436;
                for (;;)
                {
                    _3435 = texelFetch(g_lightClassification, int((((_3061 << 5u) + (_3047 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                    _3436 = _3435 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3436)
                    {
                        frontier_phi_67_pred = _3423;
                        frontier_phi_67_pred_1 = _3424;
                        frontier_phi_67_pred_2 = _3425;
                        frontier_phi_67_pred_3 = _3422;
                        frontier_phi_67_pred_4 = _3421;
                        frontier_phi_67_pred_5 = _3420;
                    }
                    else
                    {
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3633 = _3420;
                        float _3634 = _3421;
                        float _3635 = _3422;
                        float _3636 = _3423;
                        float _3637 = _3424;
                        float _3638 = _3425;
                        uint _3639 = _3435;
                        uint _3640;
                        vec4 _3665;
                        float _3666;
                        vec4 _3681;
                        vec3 _3693;
                        vec4 _3708;
                        vec4 _3723;
                        float _3769;
                        bool _3770;
                        for (;;)
                        {
                            uint _3650 = ((_3426 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3639));
                            _3640 = (_3639 + 4294967295u) & _3639;
                            uint _3652 = _3650 * 40u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3666 = _3665.w;
                            uint _3668 = (_3650 * 40u) + 4u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3650 * 40u) + 8u;
                            _3693 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x));
                            uint _3695 = (_3650 * 40u) + 16u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3710 = (_3650 * 40u) + 20u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3725 = (_3650 * 40u) + 24u;
                            vec4 _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3744 = (_3650 * 40u) + 28u;
                            vec4 _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            _3769 = fma(_3023, _3757.z, fma(_3022, _3757.y, _3757.x * _3021)) + _3757.w;
                            _3770 = !((fma(_3023, _3738.z, fma(_3022, _3738.y, _3738.x * _3021)) + _3738.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3770)
                            {
                                float _3797 = _3665.x - _3021;
                                float _3798 = _3665.y - _3022;
                                float _3799 = _3665.z - _3023;
                                float _3800 = dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799));
                                float _3803 = inversesqrt(_3800);
                                float _3804 = _3803 * _3797;
                                float _3805 = _3803 * _3798;
                                float _3806 = _3803 * _3799;
                                float _3810 = 1.0 - (_3800 / (_3666 * _3666));
                                float _4977 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3815 = sqrt(_3800) * _3681.w;
                                float _3817 = 1.39999997615814208984375 / (_3815 + 1.39999997615814208984375);
                                float _3818 = _3817 * _3817;
                                float _3821 = ((1.0 - _3818) * dot(vec3(_3804, _3805, _3806), vec3(_1291, _1294, _1297))) + _3818;
                                float _3824 = _3815 * _3815;
                                float _3828 = (fma(_3023, _3708.z, fma(_3022, _3708.y, _3708.x * _3021)) + _3708.w) / _3769;
                                float _3829 = (fma(_3023, _3723.z, fma(_3022, _3723.y, _3723.x * _3021)) + _3723.w) / _3769;
                                float _3833 = 1.0 - dot(vec2(_3828, _3829), vec2(_3828, _3829));
                                float _4993 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3835 = _3834 * (((isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0))) * _3811) / ((_3824 * 0.699999988079071044921875) + 1.0));
                                float _3847 = exp2(log2(1.0 / ((_3824 * 3.5) + 5.0)) * 0.25);
                                float _3848 = 1.0 - _1366;
                                float _3855 = sqrt(1.0 - ((1.0 - (_3848 * _3848)) * (1.0 - (_3847 * _3847))));
                                float _3856 = _3855 * _3855;
                                float _3857 = _3856 * _3856;
                                float _3858 = _3804 - _3307;
                                float _3859 = _3805 - _3308;
                                float _3860 = _3806 - _3309;
                                float _3864 = inversesqrt(dot(vec3(_3858, _3859, _3860), vec3(_3858, _3859, _3860)));
                                float _3868 = dot(vec3(_1291, _1294, _1297), vec3((-0.0) - _3307, (-0.0) - _3308, (-0.0) - _3309));
                                float _5004 = isnan(0.0) ? _3868 : (isnan(_3868) ? 0.0 : max(_3868, 0.0));
                                float _3871 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3872 = dot(vec3(_1291, _1294, _1297), vec3(_3864 * _3858, _3864 * _3859, _3864 * _3860));
                                float _5015 = isnan(0.0) ? _3872 : (isnan(_3872) ? 0.0 : max(_3872, 0.0));
                                float _3875 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3879 = ((_3875 * _3875) * (_3857 + (-1.0))) + 1.0;
                                float _3880 = _3817 * _3856;
                                float _3881 = _3880 * _3880;
                                float _3887 = ((1.0 - _3881) * dot(vec3(_1291, _1294, _1297), vec3(_3804, _3805, _3806))) + _3881;
                                float _5026 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3888 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3889 = 1.0 - _3856;
                                float _3899 = (0.5 / (((_3888 * ((_3871 * _3889) + _3856)) + 9.9999999392252902907785028219223e-09) + (((_3888 * _3889) + _3856) * _3871))) * _3888;
                                float _5037 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3909 = (_3834 * _3811) * (((_3857 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3879 * _3879) * ((_3824 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3909 * _3693.x;
                                frontier_phi_73_pred_1 = _3909 * _3693.y;
                                frontier_phi_73_pred_2 = _3835 * _3681.z;
                                frontier_phi_73_pred_3 = _3835 * _3681.y;
                                frontier_phi_73_pred_4 = _3835 * _3681.x;
                                frontier_phi_73_pred_5 = _3909 * _3693.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3913 = frontier_phi_73_pred;
                            _3914 = frontier_phi_73_pred_1;
                            _3918 = frontier_phi_73_pred_2;
                            _3917 = frontier_phi_73_pred_3;
                            _3916 = frontier_phi_73_pred_4;
                            _3915 = frontier_phi_73_pred_5;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            _3620 = _3913 + _3633;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            if (_3640 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3640;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3623;
                        frontier_phi_67_pred_1 = _3624;
                        frontier_phi_67_pred_2 = _3625;
                        frontier_phi_67_pred_3 = _3622;
                        frontier_phi_67_pred_4 = _3621;
                        frontier_phi_67_pred_5 = _3620;
                    }
                    _3288 = frontier_phi_67_pred;
                    _3290 = frontier_phi_67_pred_1;
                    _3292 = frontier_phi_67_pred_2;
                    _3286 = frontier_phi_67_pred_3;
                    _3284 = frontier_phi_67_pred_4;
                    _3282 = frontier_phi_67_pred_5;
                    uint _3427 = _3426 + 1u;
                    if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3420 = _3282;
                        _3421 = _3284;
                        _3422 = _3286;
                        _3423 = _3288;
                        _3424 = _3290;
                        _3425 = _3292;
                        _3426 = _3427;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3290;
                frontier_phi_55_56_ladder_1 = _3292;
                frontier_phi_55_56_ladder_2 = _3288;
                frontier_phi_55_56_ladder_3 = _3286;
                frontier_phi_55_56_ladder_4 = _3284;
                frontier_phi_55_56_ladder_5 = _3282;
            }
            else
            {
                frontier_phi_55_56_ladder = _3176;
                frontier_phi_55_56_ladder_1 = _3178;
                frontier_phi_55_56_ladder_2 = _3174;
                frontier_phi_55_56_ladder_3 = _3172;
                frontier_phi_55_56_ladder_4 = _3170;
                frontier_phi_55_56_ladder_5 = _3168;
            }
            _3281 = frontier_phi_55_56_ladder_5;
            _3283 = frontier_phi_55_56_ladder_4;
            _3285 = frontier_phi_55_56_ladder_3;
            _3287 = frontier_phi_55_56_ladder_2;
            _3289 = frontier_phi_55_56_ladder;
            _3291 = frontier_phi_55_56_ladder_1;
        }
        float _3296 = isnan(1.0) ? _1350 : (isnan(_1350) ? 1.0 : min(_1350, 1.0));
        _3080 = (_3296 * _3287) + _2516;
        _3082 = (_3296 * _3289) + _2518;
        _3084 = (_3296 * _3291) + _2520;
        _3086 = ((_3281 * _1334) * _3296) + _2861;
        _3088 = ((_3283 * _1336) * _3296) + _2863;
        _3090 = ((_3285 * _1337) * _3296) + _2865;
    }
    else
    {
        _3080 = _2516;
        _3082 = _2518;
        _3084 = _2520;
        _3086 = _2861;
        _3088 = _2863;
        _3090 = _2865;
    }
    float _5053 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _5064 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _5075 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    uint _3110 = _301 + 6u;
    float _3118 = _1272 / cbSceneParam._m0[86u].x;
    float _3119 = _1273 / cbSceneParam._m0[86u].y;
    vec4 _3133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, (log2((isnan(cbSceneParam._m0[77u].w) ? _1207 : (isnan(_1207) ? cbSceneParam._m0[77u].w : min(_1207, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3135 = _3133.x;
    float _3136 = _3133.y;
    float _3137 = _3133.z;
    float _3138 = _3133.w;
    float _3231;
    float _3233;
    float _3235;
    float _3237;
    if (_1207 > cbSceneParam._m0[78u].w)
    {
        float _3193 = isnan(_1207) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1207 : min(cbSceneParam._m0[80u].w, _1207));
        float _3194 = _3193 / _1207;
        float _3205 = _3194 * _1257;
        float _3206 = _1258 * _3194;
        float _3207 = (-0.0) - _3206;
        float _3209 = _3194 * _1259;
        float _3211 = (cbSceneParam._m0[77u].w * _3207) / _3193;
        float _3212 = _3211 + cbSceneParam._m0[79u].w;
        float _3213 = cbSceneParam._m0[79u].w - _3206;
        float _3219 = sqrt(((_3205 * _3205) + (_3206 * _3206)) + (_3209 * _3209));
        float _3222 = (1.0 - (cbSceneParam._m0[77u].w / _3193)) * _3219;
        float _3227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3382;
        if (abs((_3207 - _3211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3382 = ((((_3212 > 0.0) ? exp2(_3227 * _3212) : (2.0 - exp2(_3229 * _3212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3222;
        }
        else
        {
            float _3342 = 1.0 / cbSceneParam._m0[80u].x;
            float _3343 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : max(_3212, _3213));
            float _3344 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : min(_3212, _3213));
            float _3353 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : min(_3343, 0.0));
            float _3354 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : min(_3344, 0.0));
            _3382 = ((abs(_3219 / _3207) * cbSceneParam._m0[80u].y) * ((((_3353 - _3354) * 2.0) - ((exp2(_3227 * (isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0)))) - exp2(_3227 * (isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))))) * _3342)) - ((exp2(_3229 * _3353) - exp2(_3229 * _3354)) * _3342))) + (_3222 * cbSceneParam._m0[80u].z);
        }
        vec4 _3384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, 1.0), 0.0);
        float _3393 = exp2((_3382 * (-1.44269502162933349609375)) * (1.0 - _3384.w));
        float _3394 = log2(_3393);
        float _3410 = log2(_3138);
        _3231 = (exp2(_3410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].x)) * _3384.x) / cbSceneParam._m0[78u].x)) + _3135;
        _3233 = (exp2(_3410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].y)) * _3384.y) / cbSceneParam._m0[78u].y)) + _3136;
        _3235 = (exp2(_3410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].z)) * _3384.z) / cbSceneParam._m0[78u].z)) + _3137;
        _3237 = _3393 * _3138;
    }
    else
    {
        _3231 = _3135;
        _3233 = _3136;
        _3235 = _3137;
        _3237 = _3138;
    }
    float _3249 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3250 = _3249 == 3.0;
    float _3251 = log2(_3237);
    float _3258 = exp2(_3251 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3080 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1350))) + ((_3086 + ((isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0))) * _2156)) * cbPerFrame._m0[3u].x));
    float _3259 = exp2(_3251 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3082 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1350))) + ((_3088 + ((isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0))) * _2156)) * cbPerFrame._m0[3u].x));
    float _3260 = exp2(_3251 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3084 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1350))) + ((_3090 + ((isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0))) * _2156)) * cbPerFrame._m0[3u].x));
    float _3269 = (_3249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3269 * (_3250 ? _3258 : (_3258 + (cbSceneParam._m0[72u].w * _3231)));
    SV_Target.y = _3269 * (_3250 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3233)));
    SV_Target.z = _3269 * (_3250 ? _3260 : (_3260 + (cbSceneParam._m0[72u].w * _3235)));
    SV_Target.w = cbInstanceData._m0[_3110].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3110].w;
}


