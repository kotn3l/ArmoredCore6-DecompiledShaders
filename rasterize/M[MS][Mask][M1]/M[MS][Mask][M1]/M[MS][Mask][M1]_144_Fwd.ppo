#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1597;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3920 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3931 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3942 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = _368.x * cbMtdParam._m0[11u].x;
    float _374 = _368.y * cbMtdParam._m0[11u].y;
    float _375 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _462 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _479 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _413.x) * 2.0) - ((((_450 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3953 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _487 = (_480 * ((_394.x * cbMtdParam._m0[12u].x) - _373)) + _373;
    float _488 = (_480 * ((_394.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _489 = (_480 * ((_394.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _528 = _526.x;
    float _538 = dot(vec4(_528, _526.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _552 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _413.y) * 2.0) - ((((_528 - _538) * cbMtdParam._m0[23u].w) + _538) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3964 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _560 = (_553 * ((_506.x * cbMtdParam._m0[13u].x) - _487)) + _487;
    float _561 = (_553 * ((_506.y * cbMtdParam._m0[13u].y) - _488)) + _488;
    float _562 = (_553 * ((_506.z * cbMtdParam._m0[13u].z) - _489)) + _489;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _600 = _598.x;
    float _610 = dot(vec4(_600, _598.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _622 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _413.z) * 2.0) - ((((_600 - _610) * cbMtdParam._m0[23u].w) + _610) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3975 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _633 = (_342.x * cbMtdParam._m0[9u].x) * ((_623 * ((_581.x * cbMtdParam._m0[14u].x) - _560)) + _560);
    float _634 = (_342.y * cbMtdParam._m0[9u].y) * ((_623 * ((_581.y * cbMtdParam._m0[14u].y) - _561)) + _561);
    float _635 = (_342.z * cbMtdParam._m0[9u].z) * ((_623 * ((_581.z * cbMtdParam._m0[14u].z) - _562)) + _562);
    float _639 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _633;
    float _642 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _634;
    float _645 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _635;
    float _653 = (((_633 - _639) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) + _639) * 4.55000019073486328125;
    float _655 = (((_634 - _642) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _642) * 4.55000019073486328125;
    float _657 = (((_635 - _645) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _645) * 4.55000019073486328125;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _305) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _306) + cbTextureTilingScale._m0[14u].w));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _738 = _736.x;
    float _739 = _736.y;
    float _740 = _736.z;
    float _747 = ((_719.x - _738) * _480) + _738;
    float _748 = ((_719.y - _739) * _480) + _739;
    float _749 = ((_719.z - _740) * _480) + _740;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _772 = ((_761.x - _747) * _553) + _747;
    float _773 = ((_761.y - _748) * _553) + _748;
    float _774 = ((_761.z - _749) * _553) + _749;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _799 = ((_786.z - _774) * _623) + _774;
    float _802 = ((((_786.x - _772) * _623) + _772) * 2.0) + (-1.0);
    float _803 = ((((_786.y - _773) * _623) + _773) * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _3986 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _809 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _839 = (_802 + ((((_694.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_827.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _840 = (_803 + ((((_694.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_827.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _843 = fma(_809, _253, fma(_840, _260, _839 * _246));
    float _846 = fma(_809, _254, fma(_840, _261, _839 * _247));
    float _849 = fma(_809, _255, fma(_840, _262, _839 * _248));
    float _853 = inversesqrt(dot(vec3(_843, _846, _849), vec3(_843, _846, _849)));
    vec4 _880 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _882 = _880.x;
    float _883 = 1.0 - _882;
    float _891 = (cbMtdParam._m0[19u].x + dot(vec4(_853 * _843, _853 * _846, _853 * _849, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_882 - _883) * cbMtdParam._m0[24u].z) + _883) * cbMtdParam._m0[21u].z);
    float _3997 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _892 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _899 = (_892 * ((_675.x * cbMtdParam._m0[18u].x) - _653)) + _653;
    float _900 = (_892 * ((_675.y * cbMtdParam._m0[18u].y) - _655)) + _655;
    float _901 = (_892 * ((_675.z * cbMtdParam._m0[18u].z) - _657)) + _657;
    vec4 _927 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _929 = _927.x;
    float _946 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _929) * _480) + _929;
    float _963 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _946) * _553) + _946;
    float _981 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _963) * _623) + _963;
    float _985 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _981) * cbMtdParam._m0[19u].z) + _981;
    float _987 = _985 - (_985 * _892);
    float _992 = (((_694.z - _799) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _799;
    float _996 = ((_827.z - _992) * cbMtdParam._m0[19u].w) + _992;
    vec4 _1009 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _1016 = (_1009.x * 2.0) + (-1.0);
    float _1017 = (_1009.y * 2.0) + (-1.0);
    float _1018 = dot(vec2(_1016, _1017), vec2(_1016, _1017));
    float _4008 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1026 = ((_1009.z - _996) * _892) + _996;
    float _1036 = ((sqrt(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) - _809) * _892) + _809;
    float _1039 = (((_1016 - _839) * _892) + _839) + (cbMtdParam._m0[21u].x * _839);
    float _1040 = (((_1017 - _840) * _892) + _840) + (cbMtdParam._m0[21u].x * _840);
    float _1044 = cbMtdParam._m0[22u].x + _827.w;
    float _1047 = fma(_1036, _253, fma(_1040, _260, _1039 * _246));
    float _1050 = fma(_1036, _254, fma(_1040, _261, _1039 * _247));
    float _1053 = fma(_1036, _255, fma(_1040, _262, _1039 * _248));
    float _1057 = inversesqrt(dot(vec3(_1047, _1050, _1053), vec3(_1047, _1050, _1053)));
    float _1058 = _1057 * _1047;
    float _1059 = _1057 * _1050;
    float _1060 = _1057 * _1053;
    float _4019 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1061 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4041 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4052 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4063 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4074 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _1066 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _1080 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1130 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1120);
    float _1131 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1120);
    float _1132 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1120);
    float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
    float _1137 = _1130 * _1136;
    float _1138 = _1131 * _1136;
    float _1139 = _1132 * _1136;
    float _1145 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1146 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1164 = fma(_1060, cbSceneParam._m0[5u].z, fma(_1059, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1058));
    float _1167 = fma(_1060, cbSceneParam._m0[6u].z, fma(_1059, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1058));
    float _1170 = fma(_1060, cbSceneParam._m0[7u].z, fma(_1059, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1058));
    uint _1184 = (_286 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1190 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_1184].x;
    float _1191 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1184].y;
    float _1192 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1184].z;
    float _4085 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1196 = 1.0 - _1066;
    float _1197 = _1193 * _1196;
    float _1198 = _1194 * _1196;
    float _1199 = _1195 * _1196;
    float _1204 = (_1193 + (-0.039999999105930328369140625)) * _1066;
    float _1205 = (_1194 + (-0.039999999105930328369140625)) * _1066;
    float _1206 = (_1195 + (-0.039999999105930328369140625)) * _1066;
    float _1207 = _1204 + 0.039999999105930328369140625;
    float _1209 = _1205 + 0.039999999105930328369140625;
    float _1210 = _1206 + 0.039999999105930328369140625;
    vec4 _1219 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1145, cbSceneParam._m0[86u].y * _1146));
    float _1223 = ((isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * TEXCOORD_5.w) * _1219.x;
    float _1224 = dot(vec3(_1058, _1059, _1060), vec3(_1137, _1138, _1139));
    float _1227 = _1224 * 2.0;
    float _1231 = (_1227 * _1058) - _1137;
    float _1232 = (_1227 * _1059) - _1138;
    float _1233 = (_1227 * _1060) - _1139;
    float _1237 = abs(dot(vec3(_1137, _1138, _1139), vec3(_1058, _1059, _1060)));
    float _4118 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _1239 = sqrt(_1061);
    float _1252 = exp2((_1239 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1239 * 3.0));
    float _1258 = (1.0 - _1252) * ((_1239 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1259 = _1252 * _1239;
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1295 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1596;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1321 = fma(_1295, cbModelParam._m0[26u].z, fma(_1291, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1287));
        float _1325 = fma(_1295, cbModelParam._m0[27u].z, fma(_1291, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1287));
        float _1329 = fma(_1295, cbModelParam._m0[28u].z, fma(_1291, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1287));
        float _1354 = _1287 + _1058;
        float _1355 = _1291 + _1059;
        float _1356 = _1295 + _1060;
        float _1366 = fma(_1356, cbModelParam._m0[26u].z, fma(_1355, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1354)) - _1321;
        float _1367 = fma(_1356, cbModelParam._m0[27u].z, fma(_1355, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1354)) - _1325;
        float _1368 = fma(_1356, cbModelParam._m0[28u].z, fma(_1355, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1354)) - _1329;
        float _1372 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
        float _1385 = ((_1372 * _1366) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1321 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1372 * _1367) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1325 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1372 * _1368) / cbModelParam._m0[34u].z) + ((((((_1329 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1385, _1386, _1387), 0.0);
        float _1424 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1390.x + (-0.5));
        float _1426 = _1424 * (_1390.y + (-0.5));
        float _1427 = _1424 * (_1390.z + (-0.5));
        float _1434 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1397.x + (-0.5));
        float _1436 = _1434 * (_1397.y + (-0.5));
        float _1437 = _1434 * (_1397.z + (-0.5));
        float _1444 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1404.x + (-0.5));
        float _1446 = _1444 * (_1404.y + (-0.5));
        float _1447 = _1444 * (_1404.z + (-0.5));
        float _1454 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1411.x + (-0.5));
        float _1456 = _1454 * (_1411.y + (-0.5));
        float _1457 = _1454 * (_1411.z + (-0.5));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = _1425 * 0.5;
        float _1462 = _1435 * 0.5;
        float _1463 = _1445 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1478 = (dot(vec3(_1058, _1059, _1060), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1488 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4166 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1490 + 1.0))) + _1495) * _1458;
        float _1505 = _1426 * 0.5;
        float _1506 = _1436 * 0.5;
        float _1507 = _1446 * 0.5;
        float _1508 = dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507));
        float _1513 = (_1508 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1508);
        float _1521 = (dot(vec3(_1058, _1059, _1060), vec3(_1513 * _1505, _1513 * _1506, _1513 * _1507)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1530 = sqrt(((_1506 * _1506) + (_1505 * _1505)) + (_1507 * _1507)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1532 = _1531 * 2.0;
        float _1536 = (1.0 - _1531) / (_1531 + 1.0);
        float _4199 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1546 = ((((1.0 - _1537) * (_1532 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1532 + 1.0))) + _1537) * _1459;
        float _1547 = _1427 * 0.5;
        float _1548 = _1437 * 0.5;
        float _1549 = _1447 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_1058, _1059, _1060), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4232 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1574 + 1.0))) + _1579) * _1460;
        _1596 = _1427;
        _1598 = _1426;
        _1599 = _1425;
        _1600 = _1437;
        _1601 = _1436;
        _1602 = _1435;
        _1603 = _1447;
        _1604 = _1446;
        _1605 = _1445;
        _1606 = _1460;
        _1607 = _1459;
        _1608 = _1458;
        _1609 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
        _1610 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)));
        _1611 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
    }
    else
    {
        _1596 = _1597;
        _1598 = _1597;
        _1599 = _1597;
        _1600 = _1597;
        _1601 = _1597;
        _1602 = _1597;
        _1603 = _1597;
        _1604 = _1597;
        _1605 = _1597;
        _1606 = _1597;
        _1607 = _1597;
        _1608 = _1597;
        _1609 = 0.0;
        _1610 = 0.0;
        _1611 = 0.0;
    }
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1634 = fma(_1295, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287));
        float _1638 = fma(_1295, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287));
        float _1642 = fma(_1295, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287));
        float _1665 = _1287 + _1058;
        float _1666 = _1291 + _1059;
        float _1667 = _1295 + _1060;
        float _1677 = fma(_1667, cbModelParam._m0[30u].z, fma(_1666, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1665)) - _1634;
        float _1678 = fma(_1667, cbModelParam._m0[31u].z, fma(_1666, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1665)) - _1638;
        float _1679 = fma(_1667, cbModelParam._m0[32u].z, fma(_1666, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1665)) - _1642;
        float _1683 = inversesqrt(dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679)));
        float _1696 = ((_1683 * _1677) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1634 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1697 = ((_1683 * _1678) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1638 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1698 = ((_1683 * _1679) / cbModelParam._m0[35u].z) + ((((((_1642 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1700 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        vec4 _1707 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        vec4 _1714 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        vec4 _1721 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1696, _1697, _1698), 0.0);
        float _1733 = exp2((_1700.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1700.x + (-0.5));
        float _1735 = _1733 * (_1700.y + (-0.5));
        float _1736 = _1733 * (_1700.z + (-0.5));
        float _1743 = exp2((_1707.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1707.x + (-0.5));
        float _1745 = _1743 * (_1707.y + (-0.5));
        float _1746 = _1743 * (_1707.z + (-0.5));
        float _1753 = exp2((_1714.w + (-0.5)) * 20.0) * 2.0;
        float _1754 = _1753 * (_1714.x + (-0.5));
        float _1755 = _1753 * (_1714.y + (-0.5));
        float _1756 = _1753 * (_1714.z + (-0.5));
        float _1763 = exp2((_1721.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1721.x + (-0.5));
        float _1765 = _1763 * (_1721.y + (-0.5));
        float _1766 = _1763 * (_1721.z + (-0.5));
        float _1767 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1770 = _1734 * 0.5;
        float _1771 = _1744 * 0.5;
        float _1772 = _1754 * 0.5;
        float _1773 = dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772));
        float _1778 = (_1773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1773);
        float _1786 = (dot(vec3(_1058, _1059, _1060), vec3(_1778 * _1770, _1778 * _1771, _1778 * _1772)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1795 = sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772)) / (_1767 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1797 = _1796 * 2.0;
        float _1801 = (1.0 - _1796) / (_1796 + 1.0);
        float _4295 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1811 = ((((1.0 - _1802) * (_1797 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1797 + 1.0))) + _1802) * _1767;
        float _1812 = _1735 * 0.5;
        float _1813 = _1745 * 0.5;
        float _1814 = _1755 * 0.5;
        float _1815 = dot(vec3(_1812, _1813, _1814), vec3(_1812, _1813, _1814));
        float _1820 = (_1815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1815);
        float _1828 = (dot(vec3(_1058, _1059, _1060), vec3(_1820 * _1812, _1820 * _1813, _1820 * _1814)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1837 = sqrt(((_1813 * _1813) + (_1812 * _1812)) + (_1814 * _1814)) / (_1768 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1839 = _1838 * 2.0;
        float _1843 = (1.0 - _1838) / (_1838 + 1.0);
        float _4328 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1853 = ((((1.0 - _1844) * (_1839 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1839 + 1.0))) + _1844) * _1768;
        float _1854 = _1736 * 0.5;
        float _1855 = _1746 * 0.5;
        float _1856 = _1756 * 0.5;
        float _1857 = dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856));
        float _1862 = (_1857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1857);
        float _1870 = (dot(vec3(_1058, _1059, _1060), vec3(_1862 * _1854, _1862 * _1855, _1862 * _1856)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _1879 = sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856)) / (_1769 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1881 = _1880 * 2.0;
        float _1885 = (1.0 - _1880) / (_1880 + 1.0);
        float _4361 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1895 = ((((1.0 - _1886) * (_1881 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1881 + 1.0))) + _1886) * _1769;
        _1903 = _1736;
        _1904 = _1735;
        _1905 = _1734;
        _1906 = _1746;
        _1907 = _1745;
        _1908 = _1744;
        _1909 = _1756;
        _1910 = _1755;
        _1911 = _1754;
        _1912 = _1769;
        _1913 = _1768;
        _1914 = _1767;
        _1915 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)));
        _1916 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
        _1917 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)));
    }
    else
    {
        _1903 = _1597;
        _1904 = _1597;
        _1905 = _1597;
        _1906 = _1597;
        _1907 = _1597;
        _1908 = _1597;
        _1909 = _1597;
        _1910 = _1597;
        _1911 = _1597;
        _1912 = _1597;
        _1913 = _1597;
        _1914 = _1597;
        _1915 = 0.0;
        _1916 = 0.0;
        _1917 = 0.0;
    }
    float _1927 = (cbModelParam._m0[1u].x * (_1915 - _1609)) + _1609;
    float _1928 = (cbModelParam._m0[1u].x * (_1916 - _1610)) + _1610;
    float _1929 = (cbModelParam._m0[1u].x * (_1917 - _1611)) + _1611;
    float _1950 = fma(_1929, cbSceneParam._m0[89u].z, fma(_1928, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1929, cbSceneParam._m0[90u].z, fma(_1928, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1929, cbSceneParam._m0[91u].z, fma(_1928, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1927));
    float _1971 = _1231 * 0.5;
    float _1972 = _1232 * 0.5;
    float _1973 = _1233 * 0.5;
    float _1974 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1905, _1908, _1911, _1914));
    float _1977 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1904, _1907, _1910, _1913));
    float _1980 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1903, _1906, _1909, _1912));
    float _2014;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1987 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1596, _1600, _1603, _1606));
        float _1991 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1598, _1601, _1604, _1607));
        float _1995 = dot(vec4(_1971, _1972, _1973, 1.0), vec4(_1599, _1602, _1605, _1608));
        float _2002 = dot(vec4(cbModelParam._m0[39u]), vec4(_1971, _1972, _1973, 1.0));
        _2014 = dot(vec3(isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2002) ? 0.0 : (isnan(0.0) ? _2002 : max(0.0, _2002))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2014 = 1.0;
    }
    float _2025;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2016 = dot(vec4(cbModelParam._m0[40u]), vec4(_1971, _1972, _1973, 1.0));
        _2025 = dot(vec3(isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0)), isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2016) ? 0.0 : (isnan(0.0) ? _2016 : max(0.0, _2016))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2025 = 1.0;
    }
    float _2029 = (_2025 * cbModelParam._m0[1u].x) + (_2014 * (1.0 - cbModelParam._m0[1u].x));
    float _2039 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1061);
    float _2040 = isnan(_2039) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2039 : min(cbModelParam._m0[25u].z, _2039));
    float _2120;
    float _2122;
    float _2124;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2087 = fma(_1295, cbModelParam._m0[13u].z, fma(_1291, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1287)) + cbModelParam._m0[13u].w;
        float _2091 = fma(_1295, cbModelParam._m0[14u].z, fma(_1291, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1287)) + cbModelParam._m0[14u].w;
        float _2095 = fma(_1295, cbModelParam._m0[15u].z, fma(_1291, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1287)) + cbModelParam._m0[15u].w;
        float _2098 = fma(_1233, cbModelParam._m0[13u].z, fma(_1232, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1231));
        float _2101 = fma(_1233, cbModelParam._m0[14u].z, fma(_1232, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1231));
        float _2104 = fma(_1233, cbModelParam._m0[15u].z, fma(_1232, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1231));
        float _2132;
        if (_2098 > 0.0)
        {
            _2132 = abs((1.0 - _2087) / _2098);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2087 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2132 = frontier_phi_14_12_ladder;
        }
        float _2334;
        if (_2101 > 0.0)
        {
            _2334 = abs((1.0 - _2091) / _2101);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2091 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2334 = frontier_phi_23_19_ladder;
        }
        float _2588;
        if (_2104 > 0.0)
        {
            _2588 = abs((1.0 - _2095) / _2104);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2095 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2588 = frontier_phi_35_30_ladder;
        }
        float _2590 = isnan(_2334) ? _2132 : (isnan(_2132) ? _2334 : min(_2132, _2334));
        float _2591 = isnan(_2588) ? _2590 : (isnan(_2590) ? _2588 : min(_2590, _2588));
        float _2595 = (_2591 * _2098) + _2087;
        float _2596 = (_2591 * _2101) + _2091;
        float _2597 = (_2591 * _2104) + _2095;
        float _2598 = _2591 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2598;
        float _2602 = _2598 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 > _2602) || ((_2596 < _2600) || ((_2595 < _2600) || (_2595 > _2602))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2597, cbModelParam._m0[9u].z, fma(_2596, cbModelParam._m0[9u].y, _2595 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2597, cbModelParam._m0[10u].z, fma(_2596, cbModelParam._m0[10u].y, _2595 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2597, cbModelParam._m0[11u].z, fma(_2596, cbModelParam._m0[11u].y, _2595 * cbModelParam._m0[11u].x))), _2040);
            frontier_phi_13_35_ladder = _2725.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2725.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2725.x * cbModelParam._m0[1u].y;
        }
        _2120 = frontier_phi_13_35_ladder_2;
        _2122 = frontier_phi_13_35_ladder_1;
        _2124 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2108 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1231, _1232, _1233), _2040);
        _2120 = _2108.x * cbModelParam._m0[1u].y;
        _2122 = _2108.y * cbModelParam._m0[1u].y;
        _2124 = _2108.z * cbModelParam._m0[1u].y;
    }
    float _2128 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1061);
    float _2129 = isnan(_2128) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2128 : min(cbModelParam._m0[25u].w, _2128));
    float _2218;
    float _2220;
    float _2222;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2182 = fma(_1295, cbModelParam._m0[21u].z, fma(_1291, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1287)) + cbModelParam._m0[21u].w;
        float _2186 = fma(_1295, cbModelParam._m0[22u].z, fma(_1291, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1287)) + cbModelParam._m0[22u].w;
        float _2190 = fma(_1295, cbModelParam._m0[23u].z, fma(_1291, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1287)) + cbModelParam._m0[23u].w;
        float _2193 = fma(_1233, cbModelParam._m0[21u].z, fma(_1232, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1231));
        float _2196 = fma(_1233, cbModelParam._m0[22u].z, fma(_1232, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1231));
        float _2199 = fma(_1233, cbModelParam._m0[23u].z, fma(_1232, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1231));
        float _2339;
        if (_2193 > 0.0)
        {
            _2339 = abs((1.0 - _2182) / _2193);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2193 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2182 + 1.0) / _2193);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2339 = frontier_phi_25_21_ladder;
        }
        float _2615;
        if (_2196 > 0.0)
        {
            _2615 = abs((1.0 - _2186) / _2196);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2186 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2615 = frontier_phi_37_32_ladder;
        }
        float _2828;
        if (_2199 > 0.0)
        {
            _2828 = abs((1.0 - _2190) / _2199);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2199 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2190 + 1.0) / _2199);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2828 = frontier_phi_46_43_ladder;
        }
        float _2830 = isnan(_2615) ? _2339 : (isnan(_2339) ? _2615 : min(_2339, _2615));
        float _2831 = isnan(_2828) ? _2830 : (isnan(_2830) ? _2828 : min(_2830, _2828));
        float _2835 = (_2831 * _2193) + _2182;
        float _2836 = (_2831 * _2196) + _2186;
        float _2837 = (_2831 * _2199) + _2190;
        float _2838 = _2831 * 9.9999997473787516355514526367188e-05;
        float _2839 = (-1.0) - _2838;
        float _2841 = _2838 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2837 > _2841) || ((_2837 < _2839) || ((_2836 > _2841) || ((_2836 < _2839) || ((_2835 < _2839) || (_2835 > _2841))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2837, cbModelParam._m0[17u].z, fma(_2836, cbModelParam._m0[17u].y, _2835 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2837, cbModelParam._m0[18u].z, fma(_2836, cbModelParam._m0[18u].y, _2835 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2837, cbModelParam._m0[19u].z, fma(_2836, cbModelParam._m0[19u].y, _2835 * cbModelParam._m0[19u].x))), _2129);
            frontier_phi_22_46_ladder = _3036.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3036.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3036.x * cbModelParam._m0[1u].z;
        }
        _2218 = frontier_phi_22_46_ladder_2;
        _2220 = frontier_phi_22_46_ladder_1;
        _2222 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2202 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1231, _1232, _1233), _2129);
        _2218 = _2202.x * cbModelParam._m0[1u].z;
        _2220 = _2202.y * cbModelParam._m0[1u].z;
        _2222 = _2202.z * cbModelParam._m0[1u].z;
    }
    float _2235 = (((_1258 * _1207) + _1259) * _1223) * ((cbModelParam._m0[1u].w * (_2218 - _2120)) + _2120);
    float _2237 = (((_1258 * _1209) + _1259) * _1223) * ((cbModelParam._m0[1u].w * (_2220 - _2122)) + _2122);
    float _2239 = (((_1258 * _1210) + _1259) * _1223) * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2242 = fma(_2239, cbSceneParam._m0[89u].z, fma(_2237, cbSceneParam._m0[89u].y, _2235 * cbSceneParam._m0[89u].x));
    float _2245 = fma(_2239, cbSceneParam._m0[90u].z, fma(_2237, cbSceneParam._m0[90u].y, _2235 * cbSceneParam._m0[90u].x));
    float _2248 = fma(_2239, cbSceneParam._m0[91u].z, fma(_2237, cbSceneParam._m0[91u].y, _2235 * cbSceneParam._m0[91u].x));
    uvec4 _2258 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2260 = _2258.x * 14u;
    uint _2261 = _2260 + 13u;
    float _2268 = _1223 + (-1.0);
    float _2273 = (cbLight._m0[_2261].x * _2268) + 1.0;
    float _2274 = (cbLight._m0[_2261].y * _2268) + 1.0;
    float _2275 = (cbLight._m0[_2261].z * _2268) + 1.0;
    float _2276 = (cbLight._m0[_2261].w * _2268) + 1.0;
    uint _2277 = _2260 + 5u;
    float _2283 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2287 = _2260 + 4u;
    float _2293 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2297 = _2260 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_1058, _1059, _1060));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_1058, _1059, _1060));
    float _4497 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4508 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2277].x * _2283) * _2318) + ((cbLight._m0[_2287].x * _2293) * _2316);
    float _2326 = ((_2283 * cbLight._m0[_2277].y) * _2318) + ((_2293 * cbLight._m0[_2287].y) * _2316);
    float _2327 = ((_2283 * cbLight._m0[_2277].z) * _2318) + ((_2293 * cbLight._m0[_2287].z) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2260 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2333)
    {
        _2344 = _2325;
        _2346 = _2326;
        _2348 = _2327;
    }
    else
    {
        uint _2352 = _2260 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2260 + 2u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4519 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2371 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2325;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2326;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2327;
    }
    bool _2351 = _2331.y == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2351)
    {
        _2389 = _2344;
        _2391 = _2346;
        _2393 = _2348;
    }
    else
    {
        uint _2559 = _2260 + 7u;
        float _2575 = (dot(vec3(cbLight._m0[_2260 + 3u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4535 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2578 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2389 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2344;
        _2391 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2346;
        _2393 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2348;
    }
    uint _2396 = _2260 + 8u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _1061) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2260].x + _1137;
    float _2412 = cbLight._m0[_2260].y + _1138;
    float _2413 = cbLight._m0[_2260].z + _1139;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2260].xyz));
    float _4551 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _4562 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _2425 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2426 = dot(vec3(_1058, _1059, _1060), vec3(_2418, _2419, _2420));
    float _4573 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2418, _2419, _2420));
    float _4584 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2410 * _2410;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
    float _2447 = 0.959999978542327880859375 - _1204;
    float _2449 = 0.959999978542327880859375 - _1205;
    float _2450 = 0.959999978542327880859375 - _1206;
    float _2457 = 1.0 - _2410;
    float _2468 = (0.5 / (((_2425 * ((_2424 * _2457) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2457) + _2410) * _2424))) * _2424;
    float _4595 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2470 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    uint _2481 = _2260 + 9u;
    float _2492 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _1061) * 0.949999988079071044921875);
    float _2493 = _2492 * _2492;
    float _2494 = cbLight._m0[_2297].x + _1137;
    float _2495 = cbLight._m0[_2297].y + _1138;
    float _2496 = cbLight._m0[_2297].z + _1139;
    float _2500 = inversesqrt(dot(vec3(_2494, _2495, _2496), vec3(_2494, _2495, _2496)));
    float _2501 = _2500 * _2494;
    float _2502 = _2500 * _2495;
    float _2503 = _2500 * _2496;
    float _2504 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2297].xyz));
    float _4606 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2508 = dot(vec3(_1058, _1059, _1060), vec3(_2501, _2502, _2503));
    float _4617 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2512 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2501, _2502, _2503));
    float _4628 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2516 = _2493 * _2493;
    float _2520 = ((_2511 * _2511) * (_2516 + (-1.0))) + 1.0;
    float _2527 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
    float _2534 = 1.0 - _2493;
    float _2544 = (0.5 / (((_2425 * ((_2507 * _2534) + _2493)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2534) + _2493) * _2507))) * _2507;
    float _4639 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2546 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2516 / ((_2520 * _2520) * 3.141590118408203125));
    float _2556 = (((((_2527 * _2447) + _1207) * cbLight._m0[_2481].x) * _2546) * _2283) + (((((_2446 * _2447) + _1207) * cbLight._m0[_2396].x) * _2470) * _2293);
    float _2557 = (((((_2527 * _2449) + _1209) * cbLight._m0[_2481].y) * _2546) * _2283) + (((((_2446 * _2449) + _1209) * cbLight._m0[_2396].y) * _2470) * _2293);
    float _2558 = (((((_2527 * _2450) + _1210) * cbLight._m0[_2481].z) * _2546) * _2283) + (((((_2446 * _2450) + _1210) * cbLight._m0[_2396].z) * _2470) * _2293);
    float _2620;
    float _2622;
    float _2624;
    if (_2333)
    {
        _2620 = _2556;
        _2622 = _2557;
        _2624 = _2558;
    }
    else
    {
        uint _2626 = _2260 + 2u;
        uint _2630 = _2260 + 10u;
        float _2644 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2626].w)) * _1061) * 0.949999988079071044921875);
        float _2645 = _2644 * _2644;
        float _2646 = cbLight._m0[_2626].x + _1137;
        float _2647 = cbLight._m0[_2626].y + _1138;
        float _2648 = cbLight._m0[_2626].z + _1139;
        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
        float _2653 = _2652 * _2646;
        float _2654 = _2652 * _2647;
        float _2655 = _2652 * _2648;
        float _2656 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2626].xyz));
        float _4650 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2659 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2660 = dot(vec3(_1058, _1059, _1060), vec3(_2653, _2654, _2655));
        float _4661 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2664 = dot(vec3(cbLight._m0[_2626].xyz), vec3(_2653, _2654, _2655));
        float _4672 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2668 = _2645 * _2645;
        float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
        float _2679 = exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0);
        float _2686 = 1.0 - _2645;
        float _2696 = (0.5 / (((_2425 * ((_2659 * _2686) + _2645)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2686) + _2645) * _2659))) * _2659;
        float _4683 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2620 = (((((_2679 * _2447) + _1207) * cbLight._m0[_2630].x) * _2698) * _2699) + _2556;
        _2622 = (((((_2679 * _2449) + _1209) * cbLight._m0[_2630].y) * _2698) * _2699) + _2557;
        _2624 = (((((_2679 * _2450) + _1210) * cbLight._m0[_2630].z) * _2698) * _2699) + _2558;
    }
    float _2734;
    float _2736;
    float _2738;
    if (_2351)
    {
        _2734 = _2620;
        _2736 = _2622;
        _2738 = _2624;
    }
    else
    {
        uint _2745 = _2260 + 3u;
        uint _2749 = _2260 + 11u;
        float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2745].w)) * _1061) * 0.949999988079071044921875);
        float _2764 = _2763 * _2763;
        float _2765 = cbLight._m0[_2745].x + _1137;
        float _2766 = cbLight._m0[_2745].y + _1138;
        float _2767 = cbLight._m0[_2745].z + _1139;
        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
        float _2772 = _2771 * _2765;
        float _2773 = _2771 * _2766;
        float _2774 = _2771 * _2767;
        float _2775 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2745].xyz));
        float _4699 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2779 = dot(vec3(_1058, _1059, _1060), vec3(_2772, _2773, _2774));
        float _4710 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2783 = dot(vec3(cbLight._m0[_2745].xyz), vec3(_2772, _2773, _2774));
        float _4721 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2787 = _2764 * _2764;
        float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
        float _2798 = exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0);
        float _2805 = 1.0 - _2764;
        float _2815 = (0.5 / (((_2425 * ((_2778 * _2805) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2805) + _2764) * _2778))) * _2778;
        float _4732 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2817 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
        float _2818 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2734 = (((((_2798 * _2447) + _1207) * cbLight._m0[_2749].x) * _2817) * _2818) + _2620;
        _2736 = (((((_2798 * _2449) + _1209) * cbLight._m0[_2749].y) * _2817) * _2818) + _2622;
        _2738 = (((((_2798 * _2450) + _1210) * cbLight._m0[_2749].z) * _2817) * _2818) + _2624;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2258.y == 0u)
    {
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2894 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2893;
        float _2895 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2893;
        float _2896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2893;
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1146) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _1145) / _2909)));
        float _2930 = (log2(_2896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
        }
        else
        {
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            uint _3192 = 0u;
            uint _3201;
            bool _3202;
            for (;;)
            {
                _3201 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                _3202 = _3201 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3202)
                {
                    frontier_phi_61_pred = _3186;
                    frontier_phi_61_pred_1 = _3191;
                    frontier_phi_61_pred_2 = _3190;
                    frontier_phi_61_pred_3 = _3189;
                    frontier_phi_61_pred_4 = _3188;
                    frontier_phi_61_pred_5 = _3187;
                }
                else
                {
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    uint _3316;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3201;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    for (;;)
                    {
                        uint _3320 = uint(findLSB(_3316)) + (_3192 << 5u);
                        uint _3317 = (_3316 + 4294967295u) & _3316;
                        uint _3322 = _3320 * 48u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 3u)).x));
                        uint _3342 = (_3320 * 48u) + 4u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3361 = (_3320 * 48u) + 8u;
                        vec3 _3372 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x));
                        float _3376 = _3336.x - _2894;
                        float _3377 = _3336.y - _2895;
                        float _3378 = _3336.z - _2896;
                        float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                        float _3382 = inversesqrt(_3379);
                        float _3383 = _3382 * _3376;
                        float _3384 = _3382 * _3377;
                        float _3385 = _3382 * _3378;
                        float _3386 = dot(vec3(_1164, _1167, _1170), vec3(_3383, _3384, _3385));
                        float _3391 = 1.0 - (_3379 * _3336.w);
                        float _4758 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3393 = sqrt(_3379) * _3355.w;
                        float _3396 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3386) + _3397;
                        float _3403 = _3393 * _3393;
                        float _3407 = ((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3392) / ((_3403 * 0.699999988079071044921875) + 1.0);
                        float _3411 = (-0.0) - _2894;
                        float _3412 = (-0.0) - _2895;
                        float _3413 = (-0.0) - _2896;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3418 = _3417 * _3411;
                        float _3419 = _3417 * _3412;
                        float _3420 = _3417 * _3413;
                        float _3428 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                        float _3429 = 1.0 - _1239;
                        float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                        float _3437 = _3436 * _3436;
                        float _3438 = _3437 * _3437;
                        float _3439 = _3418 + _3383;
                        float _3440 = _3419 + _3384;
                        float _3441 = _3420 + _3385;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3449 = dot(vec3(_1164, _1167, _1170), vec3(_3418, _3419, _3420));
                        float _4774 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3453 = dot(vec3(_1164, _1167, _1170), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                        float _4785 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                        float _3461 = _3396 * _3437;
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3386) + _3462;
                        float _4796 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3467 = 1.0 - _3437;
                        float _3477 = (0.5 / (((_3466 * ((_3452 * _3467) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3437) * _3452))) * _3466;
                        float _4807 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3488 = (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) / ((_3460 * _3460) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125))) * _3392;
                        _3245 = (_3407 * _3355.x) + _3313;
                        _3246 = (_3407 * _3355.y) + _3314;
                        _3247 = (_3407 * _3355.z) + _3315;
                        _3242 = (_3488 * _3372.x) + _3310;
                        _3243 = (_3488 * _3372.y) + _3311;
                        _3244 = (_3488 * _3372.z) + _3312;
                        if (_3317 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3317;
                        }
                    }
                    frontier_phi_61_pred = _3242;
                    frontier_phi_61_pred_1 = _3247;
                    frontier_phi_61_pred_2 = _3246;
                    frontier_phi_61_pred_3 = _3245;
                    frontier_phi_61_pred_4 = _3244;
                    frontier_phi_61_pred_5 = _3243;
                }
                _3042 = frontier_phi_61_pred;
                _3052 = frontier_phi_61_pred_1;
                _3050 = frontier_phi_61_pred_2;
                _3048 = frontier_phi_61_pred_3;
                _3046 = frontier_phi_61_pred_4;
                _3044 = frontier_phi_61_pred_5;
                uint _3193 = _3192 + 1u;
                if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3186 = _3042;
                    _3187 = _3044;
                    _3188 = _3046;
                    _3189 = _3048;
                    _3190 = _3050;
                    _3191 = _3052;
                    _3192 = _3193;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
        }
        uvec4 _3055 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3056 = _3055.z;
        uint _3058 = (_3056 >> 8u) & 15u;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((4294967295u << _3058) & _2940) == 0u)
        {
            _3154 = _3041;
            _3156 = _3043;
            _3158 = _3045;
            _3160 = _3047;
            _3162 = _3049;
            _3164 = _3051;
        }
        else
        {
            float _3179 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
            float _3180 = _3179 * _2894;
            float _3181 = _3179 * _2895;
            float _3182 = _3179 * _2896;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3058 < ((_3056 >> 12u) & 15u))
            {
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3293 = _3041;
                float _3294 = _3043;
                float _3295 = _3045;
                float _3296 = _3047;
                float _3297 = _3049;
                float _3298 = _3051;
                uint _3299 = _3058;
                uint _3308;
                bool _3309;
                for (;;)
                {
                    _3308 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3299 << 2u)) >> 2u)).x;
                    _3309 = _3308 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3309)
                    {
                        frontier_phi_67_pred = _3296;
                        frontier_phi_67_pred_1 = _3297;
                        frontier_phi_67_pred_2 = _3298;
                        frontier_phi_67_pred_3 = _3295;
                        frontier_phi_67_pred_4 = _3294;
                        frontier_phi_67_pred_5 = _3293;
                    }
                    else
                    {
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3506 = _3293;
                        float _3507 = _3294;
                        float _3508 = _3295;
                        float _3509 = _3296;
                        float _3510 = _3297;
                        float _3511 = _3298;
                        uint _3512 = _3308;
                        uint _3513;
                        vec4 _3538;
                        float _3539;
                        vec4 _3554;
                        vec3 _3566;
                        vec4 _3581;
                        vec4 _3596;
                        float _3642;
                        bool _3643;
                        for (;;)
                        {
                            uint _3523 = ((_3299 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3512));
                            _3513 = (_3512 + 4294967295u) & _3512;
                            uint _3525 = _3523 * 40u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3539 = _3538.w;
                            uint _3541 = (_3523 * 40u) + 4u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3523 * 40u) + 8u;
                            _3566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x));
                            uint _3568 = (_3523 * 40u) + 16u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3523 * 40u) + 20u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3523 * 40u) + 24u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3617 = (_3523 * 40u) + 28u;
                            vec4 _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            _3642 = fma(_2896, _3630.z, fma(_2895, _3630.y, _3630.x * _2894)) + _3630.w;
                            _3643 = !((fma(_2896, _3611.z, fma(_2895, _3611.y, _3611.x * _2894)) + _3611.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3643)
                            {
                                float _3670 = _3538.x - _2894;
                                float _3671 = _3538.y - _2895;
                                float _3672 = _3538.z - _2896;
                                float _3673 = dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672));
                                float _3676 = inversesqrt(_3673);
                                float _3677 = _3676 * _3670;
                                float _3678 = _3676 * _3671;
                                float _3679 = _3676 * _3672;
                                float _3683 = 1.0 - (_3673 / (_3539 * _3539));
                                float _4818 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3688 = sqrt(_3673) * _3554.w;
                                float _3690 = 1.39999997615814208984375 / (_3688 + 1.39999997615814208984375);
                                float _3691 = _3690 * _3690;
                                float _3694 = ((1.0 - _3691) * dot(vec3(_3677, _3678, _3679), vec3(_1164, _1167, _1170))) + _3691;
                                float _3697 = _3688 * _3688;
                                float _3701 = (fma(_2896, _3581.z, fma(_2895, _3581.y, _3581.x * _2894)) + _3581.w) / _3642;
                                float _3702 = (fma(_2896, _3596.z, fma(_2895, _3596.y, _3596.x * _2894)) + _3596.w) / _3642;
                                float _3706 = 1.0 - dot(vec2(_3701, _3702), vec2(_3701, _3702));
                                float _4834 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                                float _3707 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3708 = _3707 * (((isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0))) * _3684) / ((_3697 * 0.699999988079071044921875) + 1.0));
                                float _3720 = exp2(log2(1.0 / ((_3697 * 3.5) + 5.0)) * 0.25);
                                float _3721 = 1.0 - _1239;
                                float _3728 = sqrt(1.0 - ((1.0 - (_3721 * _3721)) * (1.0 - (_3720 * _3720))));
                                float _3729 = _3728 * _3728;
                                float _3730 = _3729 * _3729;
                                float _3731 = _3677 - _3180;
                                float _3732 = _3678 - _3181;
                                float _3733 = _3679 - _3182;
                                float _3737 = inversesqrt(dot(vec3(_3731, _3732, _3733), vec3(_3731, _3732, _3733)));
                                float _3741 = dot(vec3(_1164, _1167, _1170), vec3((-0.0) - _3180, (-0.0) - _3181, (-0.0) - _3182));
                                float _4845 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3745 = dot(vec3(_1164, _1167, _1170), vec3(_3737 * _3731, _3737 * _3732, _3737 * _3733));
                                float _4856 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3748 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3752 = ((_3748 * _3748) * (_3730 + (-1.0))) + 1.0;
                                float _3753 = _3690 * _3729;
                                float _3754 = _3753 * _3753;
                                float _3760 = ((1.0 - _3754) * dot(vec3(_1164, _1167, _1170), vec3(_3677, _3678, _3679))) + _3754;
                                float _4867 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3762 = 1.0 - _3729;
                                float _3772 = (0.5 / (((_3761 * ((_3744 * _3762) + _3729)) + 9.9999999392252902907785028219223e-09) + (((_3761 * _3762) + _3729) * _3744))) * _3761;
                                float _4878 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3782 = (_3707 * _3684) * (((_3730 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3752 * _3752) * ((_3697 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3782 * _3566.x;
                                frontier_phi_73_pred_1 = _3782 * _3566.y;
                                frontier_phi_73_pred_2 = _3708 * _3554.z;
                                frontier_phi_73_pred_3 = _3708 * _3554.y;
                                frontier_phi_73_pred_4 = _3708 * _3554.x;
                                frontier_phi_73_pred_5 = _3782 * _3566.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3786 = frontier_phi_73_pred;
                            _3787 = frontier_phi_73_pred_1;
                            _3791 = frontier_phi_73_pred_2;
                            _3790 = frontier_phi_73_pred_3;
                            _3789 = frontier_phi_73_pred_4;
                            _3788 = frontier_phi_73_pred_5;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            if (_3513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3513;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3496;
                        frontier_phi_67_pred_1 = _3497;
                        frontier_phi_67_pred_2 = _3498;
                        frontier_phi_67_pred_3 = _3495;
                        frontier_phi_67_pred_4 = _3494;
                        frontier_phi_67_pred_5 = _3493;
                    }
                    _3161 = frontier_phi_67_pred;
                    _3163 = frontier_phi_67_pred_1;
                    _3165 = frontier_phi_67_pred_2;
                    _3159 = frontier_phi_67_pred_3;
                    _3157 = frontier_phi_67_pred_4;
                    _3155 = frontier_phi_67_pred_5;
                    uint _3300 = _3299 + 1u;
                    if (_3300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3293 = _3155;
                        _3294 = _3157;
                        _3295 = _3159;
                        _3296 = _3161;
                        _3297 = _3163;
                        _3298 = _3165;
                        _3299 = _3300;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3163;
                frontier_phi_55_56_ladder_1 = _3165;
                frontier_phi_55_56_ladder_2 = _3161;
                frontier_phi_55_56_ladder_3 = _3159;
                frontier_phi_55_56_ladder_4 = _3157;
                frontier_phi_55_56_ladder_5 = _3155;
            }
            else
            {
                frontier_phi_55_56_ladder = _3049;
                frontier_phi_55_56_ladder_1 = _3051;
                frontier_phi_55_56_ladder_2 = _3047;
                frontier_phi_55_56_ladder_3 = _3045;
                frontier_phi_55_56_ladder_4 = _3043;
                frontier_phi_55_56_ladder_5 = _3041;
            }
            _3154 = frontier_phi_55_56_ladder_5;
            _3156 = frontier_phi_55_56_ladder_4;
            _3158 = frontier_phi_55_56_ladder_3;
            _3160 = frontier_phi_55_56_ladder_2;
            _3162 = frontier_phi_55_56_ladder;
            _3164 = frontier_phi_55_56_ladder_1;
        }
        float _3169 = isnan(1.0) ? _1223 : (isnan(_1223) ? 1.0 : min(_1223, 1.0));
        _2953 = (_3169 * _3160) + _2389;
        _2955 = (_3169 * _3162) + _2391;
        _2957 = (_3169 * _3164) + _2393;
        _2959 = ((_3154 * _1207) * _3169) + _2734;
        _2961 = ((_3156 * _1209) * _3169) + _2736;
        _2963 = ((_3158 * _1210) * _3169) + _2738;
    }
    else
    {
        _2953 = _2389;
        _2955 = _2391;
        _2957 = _2393;
        _2959 = _2734;
        _2961 = _2736;
        _2963 = _2738;
    }
    float _4894 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _4905 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _4916 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    uint _2983 = _286 + 6u;
    float _2991 = _1145 / cbSceneParam._m0[86u].x;
    float _2992 = _1146 / cbSceneParam._m0[86u].y;
    vec4 _3006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, (log2((isnan(cbSceneParam._m0[77u].w) ? _1080 : (isnan(_1080) ? cbSceneParam._m0[77u].w : min(_1080, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3008 = _3006.x;
    float _3009 = _3006.y;
    float _3010 = _3006.z;
    float _3011 = _3006.w;
    float _3104;
    float _3106;
    float _3108;
    float _3110;
    if (_1080 > cbSceneParam._m0[78u].w)
    {
        float _3066 = isnan(_1080) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1080 : min(cbSceneParam._m0[80u].w, _1080));
        float _3067 = _3066 / _1080;
        float _3078 = _3067 * _1130;
        float _3079 = _1131 * _3067;
        float _3080 = (-0.0) - _3079;
        float _3082 = _3067 * _1132;
        float _3084 = (cbSceneParam._m0[77u].w * _3080) / _3066;
        float _3085 = _3084 + cbSceneParam._m0[79u].w;
        float _3086 = cbSceneParam._m0[79u].w - _3079;
        float _3092 = sqrt(((_3078 * _3078) + (_3079 * _3079)) + (_3082 * _3082));
        float _3095 = (1.0 - (cbSceneParam._m0[77u].w / _3066)) * _3092;
        float _3100 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3102 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3255;
        if (abs((_3080 - _3084) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3255 = ((((_3085 > 0.0) ? exp2(_3100 * _3085) : (2.0 - exp2(_3102 * _3085))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3095;
        }
        else
        {
            float _3215 = 1.0 / cbSceneParam._m0[80u].x;
            float _3216 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : max(_3085, _3086));
            float _3217 = isnan(_3086) ? _3085 : (isnan(_3085) ? _3086 : min(_3085, _3086));
            float _3226 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : min(_3216, 0.0));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            _3255 = ((abs(_3092 / _3080) * cbSceneParam._m0[80u].y) * ((((_3226 - _3227) * 2.0) - ((exp2(_3100 * (isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0)))) - exp2(_3100 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0))))) * _3215)) - ((exp2(_3102 * _3226) - exp2(_3102 * _3227)) * _3215))) + (_3095 * cbSceneParam._m0[80u].z);
        }
        vec4 _3257 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, 1.0), 0.0);
        float _3266 = exp2((_3255 * (-1.44269502162933349609375)) * (1.0 - _3257.w));
        float _3267 = log2(_3266);
        float _3283 = log2(_3011);
        _3104 = (exp2(_3283 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].x)) * _3257.x) / cbSceneParam._m0[78u].x)) + _3008;
        _3106 = (exp2(_3283 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].y)) * _3257.y) / cbSceneParam._m0[78u].y)) + _3009;
        _3108 = (exp2(_3283 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3267 * cbSceneParam._m0[78u].z)) * _3257.z) / cbSceneParam._m0[78u].z)) + _3010;
        _3110 = _3266 * _3011;
    }
    else
    {
        _3104 = _3008;
        _3106 = _3009;
        _3108 = _3010;
        _3110 = _3011;
    }
    float _3122 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3123 = _3122 == 3.0;
    float _3124 = log2(_3110);
    float _3131 = exp2(_3124 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2953 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1223))) + ((_2959 + ((isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0))) * _2029)) * cbPerFrame._m0[3u].x));
    float _3132 = exp2(_3124 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2955 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1223))) + ((_2961 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2029)) * cbPerFrame._m0[3u].x));
    float _3133 = exp2(_3124 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2957 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1223))) + ((_2963 + ((isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))) * _2029)) * cbPerFrame._m0[3u].x));
    float _3142 = (_3122 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3142 * (_3123 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3104)));
    SV_Target.y = _3142 * (_3123 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3106)));
    SV_Target.z = _3142 * (_3123 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3108)));
    SV_Target.w = cbInstanceData._m0[_2983].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2983].w;
}


