#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1514;
float _4175;
float _4176;
float _4177;
float _4178;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _262 + 1u;
    uint _272 = _262 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _372.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4187 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _372.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4198 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _563 = _561.x;
    float _573 = dot(vec4(_563, _561.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _585 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _372.z) * 2.0) - ((((_563 - _573) * cbMtdParam._m0[23u].w) + _573) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4209 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _599 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_586 * ((_544.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _602 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_586 * ((_544.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _605 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_586 * ((_544.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    float _651 = ((_623.x - _642) * _443) + _642;
    float _652 = ((_623.y - _643) * _443) + _643;
    float _653 = ((_623.z - _644) * _443) + _644;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _676 = ((_665.x - _651) * _516) + _651;
    float _677 = ((_665.y - _652) * _516) + _652;
    float _678 = ((_665.z - _653) * _516) + _653;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _703 = ((_690.z - _678) * _586) + _678;
    float _706 = ((((_690.x - _676) * _586) + _676) * 2.0) + (-1.0);
    float _708 = ((((_690.y - _677) * _586) + _677) * 2.0) + (-1.0);
    float _709 = dot(vec2(_706, _708), vec2(_706, _708));
    float _4220 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _714 = sqrt(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _755 = _753.x;
    float _756 = 1.0 - _755;
    float _771 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_755 - _756) * cbMtdParam._m0[24u].z) + _756) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4231 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _779 = (_772 * (cbMtdParam._m0[17u].x - _599)) + _599;
    float _780 = (_772 * (cbMtdParam._m0[17u].y - _602)) + _602;
    float _781 = (_772 * (cbMtdParam._m0[17u].z - _605)) + _605;
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _809 = _807.x;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _809) * _443) + _809;
    float _843 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _826) * _516) + _826;
    float _861 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _282) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _283) + cbTextureTilingScale._m0[10u].w)).x - _843) * _586) + _843;
    float _865 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _861) * cbMtdParam._m0[19u].z) + _861;
    float _867 = _865 - (_865 * _772);
    float _871 = (cbMtdParam._m0[19u].w * (_728.z - _703)) + _703;
    vec4 _884 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _891 = (_884.x * 2.0) + (-1.0);
    float _892 = (_884.y * 2.0) + (-1.0);
    float _893 = dot(vec2(_891, _892), vec2(_891, _892));
    float _4242 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _901 = (_772 * (_884.z - _871)) + _871;
    float _904 = (((_728.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _706;
    float _905 = (((_728.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _708;
    float _917 = (((_891 - _904) + (cbMtdParam._m0[21u].x * _904)) * _772) + _904;
    float _918 = (((_892 - _905) + (cbMtdParam._m0[21u].x * _905)) * _772) + _905;
    float _919 = (_772 * (sqrt(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) - _714)) + _714;
    float _921 = cbMtdParam._m0[22u].x + _728.w;
    float _924 = fma(_919, _249 * NORMAL.x, fma(_918, _256 * TANGENT.x, (_242 * _234) * _917));
    float _927 = fma(_919, _249 * NORMAL.y, fma(_918, _256 * TANGENT.y, (_242 * _235) * _917));
    float _930 = fma(_919, _249 * NORMAL.z, fma(_918, _256 * TANGENT.z, (_242 * _236) * _917));
    float _934 = inversesqrt(dot(vec3(_924, _927, _930), vec3(_924, _927, _930)));
    float _935 = _934 * _924;
    float _936 = _934 * _927;
    float _937 = _934 * _930;
    float _4253 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _938 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _4264 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4275 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4286 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4297 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4308 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _943 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _957 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1007 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _997);
    float _1008 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _997);
    float _1009 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _997);
    float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
    float _1014 = _1007 * _1013;
    float _1015 = _1008 * _1013;
    float _1016 = _1009 * _1013;
    vec4 _1021 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1023 = _1021.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1195 = sqrt(((_1007 * _1007) + (_1008 * _1008)) + (_1009 * _1009));
        float _1201 = (cbMatDynParam._m0[5u].x * _1195) + cbMatDynParam._m0[5u].y;
        float _4319 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1206 = (cbMatDynParam._m0[5u].z * _1195) + cbMatDynParam._m0[5u].w;
        float _4330 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) - _1202)) + _1202) < ((_1023 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1034 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1035 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1053 = fma(_937, cbSceneParam._m0[5u].z, fma(_936, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _935));
    float _1056 = fma(_937, cbSceneParam._m0[6u].z, fma(_936, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _935));
    float _1059 = fma(_937, cbSceneParam._m0[7u].z, fma(_936, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _935));
    uint _1072 = _262 + 9u;
    uint _1073 = _1072 + uint(cbMatDynParam._m0[0u].w);
    float _1079 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * cbInstanceData._m0[_1073].x;
    float _1080 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * cbInstanceData._m0[_1073].y;
    float _1081 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * cbInstanceData._m0[_1073].z;
    float _4341 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _4352 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _4363 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _1085 = 1.0 - _943;
    float _1086 = _1082 * _1085;
    float _1087 = _1083 * _1085;
    float _1088 = _1084 * _1085;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _943;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _943;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _943;
    float _1096 = _1093 + 0.039999999105930328369140625;
    float _1098 = _1094 + 0.039999999105930328369140625;
    float _1099 = _1095 + 0.039999999105930328369140625;
    vec4 _1108 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1034, cbSceneParam._m0[86u].y * _1035));
    float _1112 = ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * TEXCOORD_5.w) * _1108.x;
    float _1113 = dot(vec3(_935, _936, _937), vec3(_1014, _1015, _1016));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _935) - _1014;
    float _1121 = (_1116 * _936) - _1015;
    float _1122 = (_1116 * _937) - _1016;
    float _1126 = abs(dot(vec3(_1014, _1015, _1016), vec3(_935, _936, _937)));
    float _4374 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_938);
    float _1141 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1147 = (1.0 - _1141) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1148 = _1141 * _1128;
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1513;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1238 = fma(_1184, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176));
        float _1242 = fma(_1184, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176));
        float _1246 = fma(_1184, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176));
        float _1271 = _1176 + _935;
        float _1272 = _1180 + _936;
        float _1273 = _1184 + _937;
        float _1283 = fma(_1273, cbModelParam._m0[26u].z, fma(_1272, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1271)) - _1238;
        float _1284 = fma(_1273, cbModelParam._m0[27u].z, fma(_1272, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1271)) - _1242;
        float _1285 = fma(_1273, cbModelParam._m0[28u].z, fma(_1272, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1271)) - _1246;
        float _1289 = inversesqrt(dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285)));
        float _1302 = ((_1289 * _1283) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1238 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1303 = ((_1289 * _1284) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1242 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1289 * _1285) / cbModelParam._m0[34u].z) + ((((((_1246 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1302, _1303, _1304), 0.0);
        float _1341 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1307.x + (-0.5));
        float _1343 = _1341 * (_1307.y + (-0.5));
        float _1344 = _1341 * (_1307.z + (-0.5));
        float _1351 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1314.x + (-0.5));
        float _1353 = _1351 * (_1314.y + (-0.5));
        float _1354 = _1351 * (_1314.z + (-0.5));
        float _1361 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1321.x + (-0.5));
        float _1363 = _1361 * (_1321.y + (-0.5));
        float _1364 = _1361 * (_1321.z + (-0.5));
        float _1371 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1328.x + (-0.5));
        float _1373 = _1371 * (_1328.y + (-0.5));
        float _1374 = _1371 * (_1328.z + (-0.5));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = _1342 * 0.5;
        float _1379 = _1352 * 0.5;
        float _1380 = _1362 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1395 = (dot(vec3(_935, _936, _937), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1405 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4422 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1407 + 1.0))) + _1412) * _1375;
        float _1422 = _1343 * 0.5;
        float _1423 = _1353 * 0.5;
        float _1424 = _1363 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_935, _936, _937), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _4455 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1449 + 1.0))) + _1454) * _1376;
        float _1464 = _1344 * 0.5;
        float _1465 = _1354 * 0.5;
        float _1466 = _1364 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_935, _936, _937), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4488 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1491 + 1.0))) + _1496) * _1377;
        _1513 = _1344;
        _1515 = _1343;
        _1516 = _1342;
        _1517 = _1354;
        _1518 = _1353;
        _1519 = _1352;
        _1520 = _1364;
        _1521 = _1363;
        _1522 = _1362;
        _1523 = _1377;
        _1524 = _1376;
        _1525 = _1375;
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
        _1527 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1528 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
    }
    else
    {
        _1513 = _1514;
        _1515 = _1514;
        _1516 = _1514;
        _1517 = _1514;
        _1518 = _1514;
        _1519 = _1514;
        _1520 = _1514;
        _1521 = _1514;
        _1522 = _1514;
        _1523 = _1514;
        _1524 = _1514;
        _1525 = _1514;
        _1526 = 0.0;
        _1527 = 0.0;
        _1528 = 0.0;
    }
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1554 = fma(_1184, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176));
        float _1558 = fma(_1184, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176));
        float _1562 = fma(_1184, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176));
        float _1585 = _1176 + _935;
        float _1586 = _1180 + _936;
        float _1587 = _1184 + _937;
        float _1597 = fma(_1587, cbModelParam._m0[30u].z, fma(_1586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1585)) - _1554;
        float _1598 = fma(_1587, cbModelParam._m0[31u].z, fma(_1586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1585)) - _1558;
        float _1599 = fma(_1587, cbModelParam._m0[32u].z, fma(_1586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1585)) - _1562;
        float _1603 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
        float _1616 = ((_1603 * _1597) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1554 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1617 = ((_1603 * _1598) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1558 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1618 = ((_1603 * _1599) / cbModelParam._m0[35u].z) + ((((((_1562 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1620 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1616, _1617, _1618), 0.0);
        float _1653 = exp2((_1620.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1620.x + (-0.5));
        float _1655 = _1653 * (_1620.y + (-0.5));
        float _1656 = _1653 * (_1620.z + (-0.5));
        float _1663 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1664 = _1663 * (_1627.x + (-0.5));
        float _1665 = _1663 * (_1627.y + (-0.5));
        float _1666 = _1663 * (_1627.z + (-0.5));
        float _1673 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1634.x + (-0.5));
        float _1675 = _1673 * (_1634.y + (-0.5));
        float _1676 = _1673 * (_1634.z + (-0.5));
        float _1683 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1641.x + (-0.5));
        float _1685 = _1683 * (_1641.y + (-0.5));
        float _1686 = _1683 * (_1641.z + (-0.5));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = _1654 * 0.5;
        float _1691 = _1664 * 0.5;
        float _1692 = _1674 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_935, _936, _937), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4551 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1717 + 1.0))) + _1722) * _1687;
        float _1732 = _1655 * 0.5;
        float _1733 = _1665 * 0.5;
        float _1734 = _1675 * 0.5;
        float _1735 = dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734));
        float _1740 = (_1735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1735);
        float _1748 = (dot(vec3(_935, _936, _937), vec3(_1740 * _1732, _1740 * _1733, _1740 * _1734)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1757 = sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1759 = _1758 * 2.0;
        float _1763 = (1.0 - _1758) / (_1758 + 1.0);
        float _4584 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1773 = ((((1.0 - _1764) * (_1759 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1759 + 1.0))) + _1764) * _1688;
        float _1774 = _1656 * 0.5;
        float _1775 = _1666 * 0.5;
        float _1776 = _1676 * 0.5;
        float _1777 = dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776));
        float _1782 = (_1777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1777);
        float _1790 = (dot(vec3(_935, _936, _937), vec3(_1782 * _1774, _1782 * _1775, _1782 * _1776)) + 1.0) * 0.5;
        float _4595 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1799 = sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4606 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1801 = _1800 * 2.0;
        float _1805 = (1.0 - _1800) / (_1800 + 1.0);
        float _4617 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _1815 = ((((1.0 - _1806) * (_1801 + 2.0)) * exp2(log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_1801 + 1.0))) + _1806) * _1689;
        _1823 = _1656;
        _1824 = _1655;
        _1825 = _1654;
        _1826 = _1666;
        _1827 = _1665;
        _1828 = _1664;
        _1829 = _1676;
        _1830 = _1675;
        _1831 = _1674;
        _1832 = _1689;
        _1833 = _1688;
        _1834 = _1687;
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)));
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)));
    }
    else
    {
        _1823 = _1514;
        _1824 = _1514;
        _1825 = _1514;
        _1826 = _1514;
        _1827 = _1514;
        _1828 = _1514;
        _1829 = _1514;
        _1830 = _1514;
        _1831 = _1514;
        _1832 = _1514;
        _1833 = _1514;
        _1834 = _1514;
        _1835 = 0.0;
        _1836 = 0.0;
        _1837 = 0.0;
    }
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1526)) + _1526;
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1527)) + _1527;
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1528)) + _1528;
    float _1870 = fma(_1849, cbSceneParam._m0[89u].z, fma(_1848, cbSceneParam._m0[89u].y, _1847 * cbSceneParam._m0[89u].x));
    float _1873 = fma(_1849, cbSceneParam._m0[90u].z, fma(_1848, cbSceneParam._m0[90u].y, _1847 * cbSceneParam._m0[90u].x));
    float _1876 = fma(_1849, cbSceneParam._m0[91u].z, fma(_1848, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1847));
    float _1891 = _1120 * 0.5;
    float _1892 = _1121 * 0.5;
    float _1893 = _1122 * 0.5;
    float _1894 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1897 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1900 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1934;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1907 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1513, _1517, _1520, _1523));
        float _1911 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1515, _1518, _1521, _1524));
        float _1915 = dot(vec4(_1891, _1892, _1893, 1.0), vec4(_1516, _1519, _1522, _1525));
        float _1922 = dot(vec4(cbModelParam._m0[39u]), vec4(_1891, _1892, _1893, 1.0));
        _1934 = dot(vec3(isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1922) ? 0.0 : (isnan(0.0) ? _1922 : max(0.0, _1922))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1934 = 1.0;
    }
    float _1945;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1936 = dot(vec4(cbModelParam._m0[40u]), vec4(_1891, _1892, _1893, 1.0));
        _1945 = dot(vec3(isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1936) ? 0.0 : (isnan(0.0) ? _1936 : max(0.0, _1936))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1945 = 1.0;
    }
    float _1949 = (_1945 * cbModelParam._m0[1u].x) + (_1934 * (1.0 - cbModelParam._m0[1u].x));
    float _1959 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _938);
    float _1960 = isnan(_1959) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1959 : min(cbModelParam._m0[25u].z, _1959));
    float _2040;
    float _2042;
    float _2044;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2007 = fma(_1184, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1176)) + cbModelParam._m0[13u].w;
        float _2011 = fma(_1184, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1176)) + cbModelParam._m0[14u].w;
        float _2015 = fma(_1184, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1176)) + cbModelParam._m0[15u].w;
        float _2018 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _2021 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _2024 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2052;
        if (_2018 > 0.0)
        {
            _2052 = abs((1.0 - _2007) / _2018);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2018 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2007 + 1.0) / _2018);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2052 = frontier_phi_17_15_ladder;
        }
        float _2224;
        if (_2021 > 0.0)
        {
            _2224 = abs((1.0 - _2011) / _2021);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2011 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2224 = frontier_phi_26_22_ladder;
        }
        float _2519;
        if (_2024 > 0.0)
        {
            _2519 = abs((1.0 - _2015) / _2024);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2015 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2519 = frontier_phi_38_33_ladder;
        }
        float _2521 = isnan(_2224) ? _2052 : (isnan(_2052) ? _2224 : min(_2052, _2224));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _2018) + _2007;
        float _2527 = (_2522 * _2021) + _2011;
        float _2528 = (_2522 * _2024) + _2015;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2529;
        float _2533 = _2529 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 > _2533) || ((_2527 < _2531) || ((_2526 < _2531) || (_2526 > _2533))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2528, cbModelParam._m0[9u].z, fma(_2527, cbModelParam._m0[9u].y, _2526 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2528, cbModelParam._m0[10u].z, fma(_2527, cbModelParam._m0[10u].y, _2526 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2528, cbModelParam._m0[11u].z, fma(_2527, cbModelParam._m0[11u].y, _2526 * cbModelParam._m0[11u].x))), _1960);
            frontier_phi_16_38_ladder = _2673.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2673.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2673.x * cbModelParam._m0[1u].y;
        }
        _2040 = frontier_phi_16_38_ladder_2;
        _2042 = frontier_phi_16_38_ladder_1;
        _2044 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2028 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1960);
        _2040 = _2028.x * cbModelParam._m0[1u].y;
        _2042 = _2028.y * cbModelParam._m0[1u].y;
        _2044 = _2028.z * cbModelParam._m0[1u].y;
    }
    float _2048 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _938);
    float _2049 = isnan(_2048) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2048 : min(cbModelParam._m0[25u].w, _2048));
    float _2139;
    float _2141;
    float _2143;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2103 = fma(_1184, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1176)) + cbModelParam._m0[21u].w;
        float _2107 = fma(_1184, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1176)) + cbModelParam._m0[22u].w;
        float _2111 = fma(_1184, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1176)) + cbModelParam._m0[23u].w;
        float _2114 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2117 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2120 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2229;
        if (_2114 > 0.0)
        {
            _2229 = abs((1.0 - _2103) / _2114);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2103 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2229 = frontier_phi_28_24_ladder;
        }
        float _2546;
        if (_2117 > 0.0)
        {
            _2546 = abs((1.0 - _2107) / _2117);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2107 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2546 = frontier_phi_40_35_ladder;
        }
        float _2884;
        if (_2120 > 0.0)
        {
            _2884 = abs((1.0 - _2111) / _2120);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2111 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2884 = frontier_phi_50_47_ladder;
        }
        float _2886 = isnan(_2546) ? _2229 : (isnan(_2229) ? _2546 : min(_2229, _2546));
        float _2887 = isnan(_2884) ? _2886 : (isnan(_2886) ? _2884 : min(_2886, _2884));
        float _2891 = (_2887 * _2114) + _2103;
        float _2892 = (_2887 * _2117) + _2107;
        float _2893 = (_2887 * _2120) + _2111;
        float _2894 = _2887 * 9.9999997473787516355514526367188e-05;
        float _2895 = (-1.0) - _2894;
        float _2897 = _2894 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2893 > _2897) || ((_2893 < _2895) || ((_2892 > _2897) || ((_2892 < _2895) || ((_2891 < _2895) || (_2891 > _2897))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2893, cbModelParam._m0[17u].z, fma(_2892, cbModelParam._m0[17u].y, _2891 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2893, cbModelParam._m0[18u].z, fma(_2892, cbModelParam._m0[18u].y, _2891 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2893, cbModelParam._m0[19u].z, fma(_2892, cbModelParam._m0[19u].y, _2891 * cbModelParam._m0[19u].x))), _2049);
            frontier_phi_25_50_ladder = _3015.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3015.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3015.x * cbModelParam._m0[1u].z;
        }
        _2139 = frontier_phi_25_50_ladder_2;
        _2141 = frontier_phi_25_50_ladder_1;
        _2143 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2123 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2049);
        _2139 = _2123.x * cbModelParam._m0[1u].z;
        _2141 = _2123.y * cbModelParam._m0[1u].z;
        _2143 = _2123.z * cbModelParam._m0[1u].z;
    }
    float _2156 = (((_1147 * _1096) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2139 - _2040)) + _2040);
    float _2158 = (((_1147 * _1098) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2141 - _2042)) + _2042);
    float _2160 = (((_1147 * _1099) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2143 - _2044)) + _2044);
    float _2163 = fma(_2160, cbSceneParam._m0[89u].z, fma(_2158, cbSceneParam._m0[89u].y, _2156 * cbSceneParam._m0[89u].x));
    float _2166 = fma(_2160, cbSceneParam._m0[90u].z, fma(_2158, cbSceneParam._m0[90u].y, _2156 * cbSceneParam._m0[90u].x));
    float _2169 = fma(_2160, cbSceneParam._m0[91u].z, fma(_2158, cbSceneParam._m0[91u].y, _2156 * cbSceneParam._m0[91u].x));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2216 = _2203 / _2215;
    float _2217 = _2207 / _2215;
    float _2218 = _2211 / _2215;
    float _2365;
    float _2366;
    float _2367;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2245 = ((uint(_2218 > cbSceneParam._m0[59u].y) + uint(_2218 > cbSceneParam._m0[59u].x)) + uint(_2218 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2246 = _2245 + 43u;
        uint _2254 = _2245 + 44u;
        uint _2262 = _2245 + 45u;
        uint _2270 = _2245 + 46u;
        float _2281 = fma(_2215, cbSceneParam._m0[_2246].w, fma(_2211, cbSceneParam._m0[_2246].z, fma(_2207, cbSceneParam._m0[_2246].y, _2203 * cbSceneParam._m0[_2246].x)));
        float _2285 = fma(_2215, cbSceneParam._m0[_2254].w, fma(_2211, cbSceneParam._m0[_2254].z, fma(_2207, cbSceneParam._m0[_2254].y, _2203 * cbSceneParam._m0[_2254].x)));
        float _2293 = fma(_2215, cbSceneParam._m0[_2270].w, fma(_2211, cbSceneParam._m0[_2270].z, fma(_2207, cbSceneParam._m0[_2270].y, _2203 * cbSceneParam._m0[_2270].x)));
        float _2298 = cbSceneParam._m0[33u].z * _2293;
        float _2300 = cbSceneParam._m0[33u].w * _2293;
        float _2303 = fma(_2215, cbSceneParam._m0[_2262].w, fma(_2211, cbSceneParam._m0[_2262].z, fma(_2207, cbSceneParam._m0[_2262].y, _2203 * cbSceneParam._m0[_2262].x))) / _2293;
        float _2351 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
        float _4743 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2358 = (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2298 + _2281) / _2293, (_2300 + _2285) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 + _2281) / _2293, (_2285 - _2298) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2298) / _2293, (_2285 - _2300) / _2293), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2281 - _2300) / _2293, (_2298 + _2285) / _2293), _2303), 0.0)).x), vec4(0.25)));
        _2365 = 1.0 - (_2358 * cbSceneParam._m0[34u].x);
        _2366 = 1.0 - (_2358 * cbSceneParam._m0[34u].y);
        _2367 = 1.0 - (_2358 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2365 = 1.0;
        _2366 = 1.0;
        _2367 = 1.0;
    }
    float _2431;
    float _2433;
    float _2435;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2419 = fma(_2215, cbSceneParam._m0[63u].w, fma(_2211, cbSceneParam._m0[63u].z, fma(_2207, cbSceneParam._m0[63u].y, _2203 * cbSceneParam._m0[63u].x)));
        float _2420 = fma(_2215, cbSceneParam._m0[60u].w, fma(_2211, cbSceneParam._m0[60u].z, fma(_2207, cbSceneParam._m0[60u].y, _2203 * cbSceneParam._m0[60u].x))) / _2419;
        float _2421 = fma(_2215, cbSceneParam._m0[61u].w, fma(_2211, cbSceneParam._m0[61u].z, fma(_2207, cbSceneParam._m0[61u].y, _2203 * cbSceneParam._m0[61u].x))) / _2419;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2420 >= cbSceneParam._m0[64u].x) && (_2421 >= cbSceneParam._m0[64u].y)) && (_2420 <= cbSceneParam._m0[64u].z)) && (_2421 <= cbSceneParam._m0[64u].w))
        {
            float _2559 = fma(_2215, cbSceneParam._m0[62u].w, fma(_2211, cbSceneParam._m0[62u].z, fma(_2207, cbSceneParam._m0[62u].y, _2203 * cbSceneParam._m0[62u].x))) / _2419;
            float _2563 = isnan(cbSceneParam._m0[41u].w) ? _2559 : (isnan(_2559) ? cbSceneParam._m0[41u].w : max(_2559, cbSceneParam._m0[41u].w));
            float _2606 = (cbSceneParam._m0[33u].x - sqrt(((_2217 * _2217) + (_2216 * _2216)) + (_2218 * _2218))) * cbSceneParam._m0[33u].y;
            float _4759 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
            float _2613 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2420, cbSceneParam._m0[33u].w + _2421), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2420, _2421 - cbSceneParam._m0[33u].z), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].z, _2421 - cbSceneParam._m0[33u].w), _2563), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2420 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2421), _2563), 0.0)).x), vec4(0.25)));
            float _2617 = 1.0 - (_2613 * cbSceneParam._m0[34u].x);
            float _2618 = 1.0 - (_2613 * cbSceneParam._m0[34u].y);
            float _2619 = 1.0 - (_2613 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2619) ? _2367 : (isnan(_2367) ? _2619 : min(_2367, _2619));
            frontier_phi_37_36_ladder_1 = isnan(_2618) ? _2366 : (isnan(_2366) ? _2618 : min(_2366, _2618));
            frontier_phi_37_36_ladder_2 = isnan(_2617) ? _2365 : (isnan(_2365) ? _2617 : min(_2365, _2617));
        }
        else
        {
            frontier_phi_37_36_ladder = _2367;
            frontier_phi_37_36_ladder_1 = _2366;
            frontier_phi_37_36_ladder_2 = _2365;
        }
        _2431 = frontier_phi_37_36_ladder_2;
        _2433 = frontier_phi_37_36_ladder_1;
        _2435 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2431 = _2365;
        _2433 = _2366;
        _2435 = _2367;
    }
    uvec4 _2440 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2442 = _2440.x * 14u;
    uint _2443 = _2442 + 13u;
    float _2450 = _1112 + (-1.0);
    float _2455 = (cbLight._m0[_2443].x * _2450) + 1.0;
    float _2456 = (cbLight._m0[_2443].y * _2450) + 1.0;
    float _2457 = (cbLight._m0[_2443].z * _2450) + 1.0;
    float _2458 = (cbLight._m0[_2443].w * _2450) + 1.0;
    uint _2459 = _2442 + 5u;
    float _2465 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
    uint _2469 = _2442 + 4u;
    float _2478 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
    uint _2482 = _2442 | 1u;
    float _2493 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_935, _936, _937));
    float _2496 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_935, _936, _937));
    float _4795 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _4806 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2501 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * 0.3183098733425140380859375;
    float _2503 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * 0.3183098733425140380859375;
    float _2510 = ((cbLight._m0[_2459].x * _2465) * _2503) + (((cbLight._m0[_2469].x * _2431) * _2478) * _2501);
    float _2511 = ((_2465 * cbLight._m0[_2459].y) * _2503) + (((cbLight._m0[_2469].y * _2433) * _2478) * _2501);
    float _2512 = ((_2465 * cbLight._m0[_2459].z) * _2503) + (((cbLight._m0[_2469].z * _2435) * _2478) * _2501);
    uvec4 _2516 = floatBitsToUint(cbLight._m0[_2442 + 12u]);
    bool _2518 = _2516.x == 0u;
    float _2620;
    float _2622;
    float _2624;
    if (_2518)
    {
        _2620 = _2510;
        _2622 = _2511;
        _2624 = _2512;
    }
    else
    {
        uint _2628 = _2442 + 6u;
        float _2644 = (dot(vec3(cbLight._m0[_2442 + 2u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2645 = _2644 * _2644;
        float _4817 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2646 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2647 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2620 = (((cbLight._m0[_2628].x * 0.3183098733425140380859375) * _2646) * _2647) + _2510;
        _2622 = (((cbLight._m0[_2628].y * 0.3183098733425140380859375) * _2646) * _2647) + _2511;
        _2624 = (((cbLight._m0[_2628].z * 0.3183098733425140380859375) * _2646) * _2647) + _2512;
    }
    bool _2627 = _2516.y == 0u;
    float _2682;
    float _2684;
    float _2686;
    if (_2627)
    {
        _2682 = _2620;
        _2684 = _2622;
        _2686 = _2624;
    }
    else
    {
        uint _2855 = _2442 + 7u;
        float _2871 = (dot(vec3(cbLight._m0[_2442 + 3u].xyz), vec3(_935, _936, _937)) * 0.5) + 0.5;
        float _2872 = _2871 * _2871;
        float _4833 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2873 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2874 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _2682 = (((cbLight._m0[_2855].x * 0.3183098733425140380859375) * _2873) * _2874) + _2620;
        _2684 = (((cbLight._m0[_2855].y * 0.3183098733425140380859375) * _2873) * _2874) + _2622;
        _2686 = (((cbLight._m0[_2855].z * 0.3183098733425140380859375) * _2873) * _2874) + _2624;
    }
    uint _2689 = _2442 + 8u;
    float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _938) * 0.949999988079071044921875);
    float _2703 = _2702 * _2702;
    float _2704 = cbLight._m0[_2442].x + _1014;
    float _2705 = cbLight._m0[_2442].y + _1015;
    float _2706 = cbLight._m0[_2442].z + _1016;
    float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
    float _2711 = _2710 * _2704;
    float _2712 = _2710 * _2705;
    float _2713 = _2710 * _2706;
    float _2714 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2442].xyz));
    float _4849 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
    float _4860 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2718 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
    float _2719 = dot(vec3(_935, _936, _937), vec3(_2711, _2712, _2713));
    float _4871 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2722 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
    float _2723 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2711, _2712, _2713));
    float _4882 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2727 = _2703 * _2703;
    float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
    float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) * 5.0);
    float _2740 = 0.959999978542327880859375 - _1093;
    float _2742 = 0.959999978542327880859375 - _1094;
    float _2743 = 0.959999978542327880859375 - _1095;
    float _2750 = 1.0 - _2703;
    float _2761 = (0.5 / (((_2718 * ((_2717 * _2750) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2750) + _2703) * _2717))) * _2717;
    float _4893 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2763 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
    uint _2777 = _2442 + 9u;
    float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _938) * 0.949999988079071044921875);
    float _2789 = _2788 * _2788;
    float _2790 = cbLight._m0[_2482].x + _1014;
    float _2791 = cbLight._m0[_2482].y + _1015;
    float _2792 = cbLight._m0[_2482].z + _1016;
    float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
    float _2797 = _2796 * _2790;
    float _2798 = _2796 * _2791;
    float _2799 = _2796 * _2792;
    float _2800 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2482].xyz));
    float _4904 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2803 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
    float _2804 = dot(vec3(_935, _936, _937), vec3(_2797, _2798, _2799));
    float _4915 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2807 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
    float _2808 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2797, _2798, _2799));
    float _4926 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2812 = _2789 * _2789;
    float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
    float _2823 = exp2(log2(1.0 - (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) * 5.0);
    float _2830 = 1.0 - _2789;
    float _2840 = (0.5 / (((_2718 * ((_2803 * _2830) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2830) + _2789) * _2803))) * _2803;
    float _4937 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
    float _2842 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
    float _2852 = (((((_2823 * _2740) + _1096) * cbLight._m0[_2777].x) * _2842) * _2465) + ((((cbLight._m0[_2689].x * _2431) * ((_2739 * _2740) + _1096)) * _2763) * _2478);
    float _2853 = (((((_2823 * _2742) + _1098) * cbLight._m0[_2777].y) * _2842) * _2465) + ((((cbLight._m0[_2689].y * _2433) * ((_2739 * _2742) + _1098)) * _2763) * _2478);
    float _2854 = (((((_2823 * _2743) + _1099) * cbLight._m0[_2777].z) * _2842) * _2465) + ((((cbLight._m0[_2689].z * _2435) * ((_2739 * _2743) + _1099)) * _2763) * _2478);
    float _2910;
    float _2912;
    float _2914;
    if (_2518)
    {
        _2910 = _2852;
        _2912 = _2853;
        _2914 = _2854;
    }
    else
    {
        uint _2916 = _2442 + 2u;
        uint _2920 = _2442 + 10u;
        float _2934 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2916].w)) * _938) * 0.949999988079071044921875);
        float _2935 = _2934 * _2934;
        float _2936 = cbLight._m0[_2916].x + _1014;
        float _2937 = cbLight._m0[_2916].y + _1015;
        float _2938 = cbLight._m0[_2916].z + _1016;
        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
        float _2943 = _2942 * _2936;
        float _2944 = _2942 * _2937;
        float _2945 = _2942 * _2938;
        float _2946 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_2916].xyz));
        float _4948 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
        float _2950 = dot(vec3(_935, _936, _937), vec3(_2943, _2944, _2945));
        float _4959 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2953 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
        float _2954 = dot(vec3(cbLight._m0[_2916].xyz), vec3(_2943, _2944, _2945));
        float _4970 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2958 = _2935 * _2935;
        float _2962 = ((_2953 * _2953) * (_2958 + (-1.0))) + 1.0;
        float _2969 = exp2(log2(1.0 - (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) * 5.0);
        float _2976 = 1.0 - _2935;
        float _2986 = (0.5 / (((_2718 * ((_2949 * _2976) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _2976) + _2935) * _2949))) * _2949;
        float _4981 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2988 = (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2958 / ((_2962 * _2962) * 3.141590118408203125));
        float _2989 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2910 = (((((_2969 * _2740) + _1096) * cbLight._m0[_2920].x) * _2988) * _2989) + _2852;
        _2912 = (((((_2969 * _2742) + _1098) * cbLight._m0[_2920].y) * _2988) * _2989) + _2853;
        _2914 = (((((_2969 * _2743) + _1099) * cbLight._m0[_2920].z) * _2988) * _2989) + _2854;
    }
    float _3020;
    float _3022;
    float _3024;
    if (_2627)
    {
        _3020 = _2910;
        _3022 = _2912;
        _3024 = _2914;
    }
    else
    {
        uint _3031 = _2442 + 3u;
        uint _3035 = _2442 + 11u;
        float _3049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3031].w)) * _938) * 0.949999988079071044921875);
        float _3050 = _3049 * _3049;
        float _3051 = cbLight._m0[_3031].x + _1014;
        float _3052 = cbLight._m0[_3031].y + _1015;
        float _3053 = cbLight._m0[_3031].z + _1016;
        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
        float _3058 = _3057 * _3051;
        float _3059 = _3057 * _3052;
        float _3060 = _3057 * _3053;
        float _3061 = dot(vec3(_935, _936, _937), vec3(cbLight._m0[_3031].xyz));
        float _4997 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3064 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _3065 = dot(vec3(_935, _936, _937), vec3(_3058, _3059, _3060));
        float _5008 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3068 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _3069 = dot(vec3(cbLight._m0[_3031].xyz), vec3(_3058, _3059, _3060));
        float _5019 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3073 = _3050 * _3050;
        float _3077 = ((_3068 * _3068) * (_3073 + (-1.0))) + 1.0;
        float _3084 = exp2(log2(1.0 - (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0)))) * 5.0);
        float _3091 = 1.0 - _3050;
        float _3101 = (0.5 / (((_2718 * ((_3064 * _3091) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_2718 * _3091) + _3050) * _3064))) * _3064;
        float _5030 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3103 = (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3073 / ((_3077 * _3077) * 3.141590118408203125));
        float _3104 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
        _3020 = (((((_3084 * _2740) + _1096) * cbLight._m0[_3035].x) * _3103) * _3104) + _2910;
        _3022 = (((((_3084 * _2742) + _1098) * cbLight._m0[_3035].y) * _3103) * _3104) + _2912;
        _3024 = (((((_3084 * _2743) + _1099) * cbLight._m0[_3035].z) * _3103) * _3104) + _2914;
    }
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    if (_2440.y == 0u)
    {
        uvec4 _3125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3126 = _3125.x;
        uint _3137 = uint((float(_3125.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1035) / _3126))) + floor(float(uint(cbSceneParam._m0[85u].x * _1034) / _3126)));
        float _3147 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3148 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        uint _3151 = uint(isnan(14.0) ? _3148 : (isnan(_3148) ? 14.0 : min(_3148, 14.0)));
        uvec4 _3156 = texelFetch(g_lightClusterGridBuffer, int(((_3151 << 2u) + (_3137 << 6u)) >> 2u));
        uint _3157 = _3156.x;
        uint _3158 = _3125.z;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        float _3247;
        if (((((1u << ((_3158 >> 4u) & 15u)) + 4294967295u) & _3157) == 0u) || ((_3158 & 240u) == 0u))
        {
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
            _3243 = 0.0;
            _3245 = 0.0;
            _3247 = 0.0;
        }
        else
        {
            float _3238;
            float _3240;
            float _3242;
            float _3244;
            float _3246;
            float _3248;
            float _3390 = 0.0;
            float _3391 = 0.0;
            float _3392 = 0.0;
            float _3393 = 0.0;
            float _3394 = 0.0;
            float _3395 = 0.0;
            uint _3396 = 0u;
            uint _3405;
            bool _3406;
            for (;;)
            {
                _3405 = texelFetch(g_lightClassification, int((((_3151 << 5u) + (_3137 << 9u)) + (_3396 << 2u)) >> 2u)).x;
                _3406 = _3405 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3406)
                {
                    frontier_phi_71_pred = _3395;
                    frontier_phi_71_pred_1 = _3394;
                    frontier_phi_71_pred_2 = _3393;
                    frontier_phi_71_pred_3 = _3392;
                    frontier_phi_71_pred_4 = _3391;
                    frontier_phi_71_pred_5 = _3390;
                }
                else
                {
                    float _3535;
                    float _3536;
                    float _3537;
                    float _3538;
                    float _3539;
                    float _3540;
                    uint _3541;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3392;
                    _3538 = _3393;
                    _3539 = _3394;
                    _3540 = _3395;
                    _3541 = _3405;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    for (;;)
                    {
                        uint _3545 = uint(findLSB(_3541)) + (_3396 << 5u);
                        uint _3542 = (_3541 + 4294967295u) & _3541;
                        uint _3547 = _3545 * 48u;
                        vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3547)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3547 + 3u)).x));
                        uint _3567 = (_3545 * 48u) + 4u;
                        vec4 _3580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3567)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 3u)).x));
                        uint _3586 = (_3545 * 48u) + 8u;
                        vec3 _3597 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3586)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3586 + 2u)).x));
                        float _3601 = _3561.x - _2216;
                        float _3602 = _3561.y - _2217;
                        float _3603 = _3561.z - _2218;
                        float _3604 = dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603));
                        float _3607 = inversesqrt(_3604);
                        float _3608 = _3607 * _3601;
                        float _3609 = _3607 * _3602;
                        float _3610 = _3607 * _3603;
                        float _3611 = dot(vec3(_1053, _1056, _1059), vec3(_3608, _3609, _3610));
                        float _3616 = 1.0 - (_3604 * _3561.w);
                        float _5056 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3617 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                        float _3618 = sqrt(_3604) * _3580.w;
                        float _3621 = 1.39999997615814208984375 / (_3618 + 1.39999997615814208984375);
                        float _3622 = _3621 * _3621;
                        float _3625 = ((1.0 - _3622) * _3611) + _3622;
                        float _3628 = _3618 * _3618;
                        float _3632 = ((isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0))) * _3617) / ((_3628 * 0.699999988079071044921875) + 1.0);
                        float _3636 = (-0.0) - _2216;
                        float _3637 = (-0.0) - _2217;
                        float _3638 = (-0.0) - _2218;
                        float _3642 = inversesqrt(dot(vec3(_3636, _3637, _3638), vec3(_3636, _3637, _3638)));
                        float _3643 = _3642 * _3636;
                        float _3644 = _3642 * _3637;
                        float _3645 = _3642 * _3638;
                        float _3652 = exp2(log2(1.0 / ((_3628 * 3.5) + 5.0)) * 0.25);
                        float _3653 = 1.0 - _1128;
                        float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                        float _3661 = _3660 * _3660;
                        float _3662 = _3661 * _3661;
                        float _3663 = _3643 + _3608;
                        float _3664 = _3644 + _3609;
                        float _3665 = _3645 + _3610;
                        float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                        float _3673 = dot(vec3(_1053, _1056, _1059), vec3(_3643, _3644, _3645));
                        float _5072 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                        float _3676 = isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0));
                        float _3677 = dot(vec3(_1053, _1056, _1059), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                        float _5083 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                        float _3680 = isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0));
                        float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                        float _3685 = _3621 * _3661;
                        float _3686 = _3685 * _3685;
                        float _3689 = ((1.0 - _3686) * _3611) + _3686;
                        float _5094 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                        float _3690 = isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0));
                        float _3691 = 1.0 - _3661;
                        float _3701 = (0.5 / (((_3690 * ((_3676 * _3691) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3690 * _3691) + _3661) * _3676))) * _3690;
                        float _5105 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                        float _3712 = (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0)))) / ((_3684 * _3684) * ((_3628 * 2.1991131305694580078125) + 3.141590118408203125))) * _3617;
                        _3465 = (_3632 * _3580.x) + _3538;
                        _3466 = (_3632 * _3580.y) + _3539;
                        _3467 = (_3632 * _3580.z) + _3540;
                        _3462 = (_3712 * _3597.x) + _3535;
                        _3463 = (_3712 * _3597.y) + _3536;
                        _3464 = (_3712 * _3597.z) + _3537;
                        if (_3542 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3464;
                            _3538 = _3465;
                            _3539 = _3466;
                            _3540 = _3467;
                            _3541 = _3542;
                        }
                    }
                    frontier_phi_71_pred = _3467;
                    frontier_phi_71_pred_1 = _3466;
                    frontier_phi_71_pred_2 = _3465;
                    frontier_phi_71_pred_3 = _3464;
                    frontier_phi_71_pred_4 = _3463;
                    frontier_phi_71_pred_5 = _3462;
                }
                _3248 = frontier_phi_71_pred;
                _3246 = frontier_phi_71_pred_1;
                _3244 = frontier_phi_71_pred_2;
                _3242 = frontier_phi_71_pred_3;
                _3240 = frontier_phi_71_pred_4;
                _3238 = frontier_phi_71_pred_5;
                uint _3397 = _3396 + 1u;
                if (_3397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3390 = _3238;
                    _3391 = _3240;
                    _3392 = _3242;
                    _3393 = _3244;
                    _3394 = _3246;
                    _3395 = _3248;
                    _3396 = _3397;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
            _3243 = _3244;
            _3245 = _3246;
            _3247 = _3248;
        }
        uvec4 _3251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3252 = _3251.z;
        uint _3254 = (_3252 >> 8u) & 15u;
        float _3358;
        float _3360;
        float _3362;
        float _3364;
        float _3366;
        float _3368;
        if (((4294967295u << _3254) & _3157) == 0u)
        {
            _3358 = _3237;
            _3360 = _3239;
            _3362 = _3241;
            _3364 = _3243;
            _3366 = _3245;
            _3368 = _3247;
        }
        else
        {
            float _3383 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _3384 = _3383 * _2216;
            float _3385 = _3383 * _2217;
            float _3386 = _3383 * _2218;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3254 < ((_3252 >> 12u) & 15u))
            {
                float _3359;
                float _3361;
                float _3363;
                float _3365;
                float _3367;
                float _3369;
                float _3518 = _3237;
                float _3519 = _3239;
                float _3520 = _3241;
                float _3521 = _3243;
                float _3522 = _3245;
                float _3523 = _3247;
                uint _3524 = _3254;
                uint _3533;
                bool _3534;
                for (;;)
                {
                    _3533 = texelFetch(g_lightClassification, int((((_3151 << 5u) + (_3137 << 9u)) + (_3524 << 2u)) >> 2u)).x;
                    _3534 = _3533 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3534)
                    {
                        frontier_phi_82_pred = _3523;
                        frontier_phi_82_pred_1 = _3522;
                        frontier_phi_82_pred_2 = _3521;
                        frontier_phi_82_pred_3 = _3520;
                        frontier_phi_82_pred_4 = _3519;
                        frontier_phi_82_pred_5 = _3518;
                    }
                    else
                    {
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _4023;
                        float _4024;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        float _3741 = _3520;
                        float _3742 = _3521;
                        float _3743 = _3522;
                        float _3744 = _3523;
                        uint _3745 = _3533;
                        uint _3746;
                        vec4 _3771;
                        float _3772;
                        vec4 _3787;
                        vec3 _3799;
                        vec4 _3814;
                        vec4 _3829;
                        float _3875;
                        bool _3876;
                        for (;;)
                        {
                            uint _3756 = ((_3524 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3745));
                            _3746 = (_3745 + 4294967295u) & _3745;
                            uint _3758 = _3756 * 40u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            _3772 = _3771.w;
                            uint _3774 = (_3756 * 40u) + 4u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3756 * 40u) + 8u;
                            _3799 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x));
                            uint _3801 = (_3756 * 40u) + 16u;
                            _3814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3801 + 3u)).x));
                            uint _3816 = (_3756 * 40u) + 20u;
                            _3829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 3u)).x));
                            uint _3831 = (_3756 * 40u) + 24u;
                            vec4 _3844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3831 + 3u)).x));
                            uint _3850 = (_3756 * 40u) + 28u;
                            vec4 _3863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3850 + 3u)).x));
                            _3875 = fma(_2218, _3863.z, fma(_2217, _3863.y, _3863.x * _2216)) + _3863.w;
                            _3876 = !((fma(_2218, _3844.z, fma(_2217, _3844.y, _3844.x * _2216)) + _3844.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3876)
                            {
                                float _3903 = _3771.x - _2216;
                                float _3904 = _3771.y - _2217;
                                float _3905 = _3771.z - _2218;
                                float _3906 = dot(vec3(_3903, _3904, _3905), vec3(_3903, _3904, _3905));
                                float _3909 = inversesqrt(_3906);
                                float _3910 = _3909 * _3903;
                                float _3911 = _3909 * _3904;
                                float _3912 = _3909 * _3905;
                                float _3916 = 1.0 - (_3906 / (_3772 * _3772));
                                float _5116 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3917 = isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0));
                                float _3921 = sqrt(_3906) * _3787.w;
                                float _3923 = 1.39999997615814208984375 / (_3921 + 1.39999997615814208984375);
                                float _3924 = _3923 * _3923;
                                float _3927 = ((1.0 - _3924) * dot(vec3(_3910, _3911, _3912), vec3(_1053, _1056, _1059))) + _3924;
                                float _3930 = _3921 * _3921;
                                float _3934 = (fma(_2218, _3814.z, fma(_2217, _3814.y, _3814.x * _2216)) + _3814.w) / _3875;
                                float _3935 = (fma(_2218, _3829.z, fma(_2217, _3829.y, _3829.x * _2216)) + _3829.w) / _3875;
                                float _3939 = 1.0 - dot(vec2(_3934, _3935), vec2(_3934, _3935));
                                float _5132 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3940 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                                float _3941 = _3940 * (((isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0))) * _3917) / ((_3930 * 0.699999988079071044921875) + 1.0));
                                float _3953 = exp2(log2(1.0 / ((_3930 * 3.5) + 5.0)) * 0.25);
                                float _3954 = 1.0 - _1128;
                                float _3961 = sqrt(1.0 - ((1.0 - (_3954 * _3954)) * (1.0 - (_3953 * _3953))));
                                float _3962 = _3961 * _3961;
                                float _3963 = _3962 * _3962;
                                float _3964 = _3910 - _3384;
                                float _3965 = _3911 - _3385;
                                float _3966 = _3912 - _3386;
                                float _3970 = inversesqrt(dot(vec3(_3964, _3965, _3966), vec3(_3964, _3965, _3966)));
                                float _3974 = dot(vec3(_1053, _1056, _1059), vec3((-0.0) - _3384, (-0.0) - _3385, (-0.0) - _3386));
                                float _5143 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3977 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                                float _3978 = dot(vec3(_1053, _1056, _1059), vec3(_3970 * _3964, _3970 * _3965, _3970 * _3966));
                                float _5154 = isnan(0.0) ? _3978 : (isnan(_3978) ? 0.0 : max(_3978, 0.0));
                                float _3981 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
                                float _3985 = ((_3981 * _3981) * (_3963 + (-1.0))) + 1.0;
                                float _3986 = _3923 * _3962;
                                float _3987 = _3986 * _3986;
                                float _3993 = ((1.0 - _3987) * dot(vec3(_1053, _1056, _1059), vec3(_3910, _3911, _3912))) + _3987;
                                float _5165 = isnan(0.0) ? _3993 : (isnan(_3993) ? 0.0 : max(_3993, 0.0));
                                float _3994 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                                float _3995 = 1.0 - _3962;
                                float _4005 = (0.5 / (((_3994 * ((_3977 * _3995) + _3962)) + 9.9999999392252902907785028219223e-09) + (((_3994 * _3995) + _3962) * _3977))) * _3994;
                                float _5176 = isnan(0.0) ? _4005 : (isnan(_4005) ? 0.0 : max(_4005, 0.0));
                                float _4015 = (_3940 * _3917) * (((_3963 * 3.1415927410125732421875) * (isnan(1.0) ? _5176 : (isnan(_5176) ? 1.0 : min(_5176, 1.0)))) / ((_3985 * _3985) * ((_3930 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3941 * _3787.z;
                                frontier_phi_88_pred_1 = _3941 * _3787.y;
                                frontier_phi_88_pred_2 = _3941 * _3787.x;
                                frontier_phi_88_pred_3 = _4015 * _3799.z;
                                frontier_phi_88_pred_4 = _4015 * _3799.y;
                                frontier_phi_88_pred_5 = _4015 * _3799.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4024 = frontier_phi_88_pred;
                            _4023 = frontier_phi_88_pred_1;
                            _4022 = frontier_phi_88_pred_2;
                            _4021 = frontier_phi_88_pred_3;
                            _4020 = frontier_phi_88_pred_4;
                            _4019 = frontier_phi_88_pred_5;
                            _3729 = _4022 + _3742;
                            _3730 = _4023 + _3743;
                            _3731 = _4024 + _3744;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            _3728 = _4021 + _3741;
                            if (_3746 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3731;
                                _3745 = _3746;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3731;
                        frontier_phi_82_pred_1 = _3730;
                        frontier_phi_82_pred_2 = _3729;
                        frontier_phi_82_pred_3 = _3728;
                        frontier_phi_82_pred_4 = _3727;
                        frontier_phi_82_pred_5 = _3726;
                    }
                    _3369 = frontier_phi_82_pred;
                    _3367 = frontier_phi_82_pred_1;
                    _3365 = frontier_phi_82_pred_2;
                    _3363 = frontier_phi_82_pred_3;
                    _3361 = frontier_phi_82_pred_4;
                    _3359 = frontier_phi_82_pred_5;
                    uint _3525 = _3524 + 1u;
                    if (_3525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3518 = _3359;
                        _3519 = _3361;
                        _3520 = _3363;
                        _3521 = _3365;
                        _3522 = _3367;
                        _3523 = _3369;
                        _3524 = _3525;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3365;
                frontier_phi_63_64_ladder_1 = _3369;
                frontier_phi_63_64_ladder_2 = _3367;
                frontier_phi_63_64_ladder_3 = _3363;
                frontier_phi_63_64_ladder_4 = _3361;
                frontier_phi_63_64_ladder_5 = _3359;
            }
            else
            {
                frontier_phi_63_64_ladder = _3243;
                frontier_phi_63_64_ladder_1 = _3247;
                frontier_phi_63_64_ladder_2 = _3245;
                frontier_phi_63_64_ladder_3 = _3241;
                frontier_phi_63_64_ladder_4 = _3239;
                frontier_phi_63_64_ladder_5 = _3237;
            }
            _3358 = frontier_phi_63_64_ladder_5;
            _3360 = frontier_phi_63_64_ladder_4;
            _3362 = frontier_phi_63_64_ladder_3;
            _3364 = frontier_phi_63_64_ladder;
            _3366 = frontier_phi_63_64_ladder_2;
            _3368 = frontier_phi_63_64_ladder_1;
        }
        float _3373 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _3170 = (_3373 * _3364) + _2682;
        _3172 = (_3373 * _3366) + _2684;
        _3174 = (_3373 * _3368) + _2686;
        _3176 = ((_3358 * _1096) * _3373) + _3020;
        _3178 = ((_3360 * _1098) * _3373) + _3022;
        _3180 = ((_3362 * _1099) * _3373) + _3024;
    }
    else
    {
        _3170 = _2682;
        _3172 = _2684;
        _3174 = _2686;
        _3176 = _3020;
        _3178 = _3022;
        _3180 = _3024;
    }
    float _5192 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _5203 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _5214 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _3197 = ((isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0))) * (_3170 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1112))) + ((_3176 + ((isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0))) * _1949)) * cbPerFrame._m0[3u].x);
    float _3198 = ((isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0))) * (_3172 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1112))) + ((_3178 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1949)) * cbPerFrame._m0[3u].x);
    float _3199 = ((isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0))) * (_3174 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1112))) + ((_3180 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1949)) * cbPerFrame._m0[3u].x);
    uint _3200 = _262 + 6u;
    float _3208 = _1034 / cbSceneParam._m0[86u].x;
    float _3209 = _1035 / cbSceneParam._m0[86u].y;
    vec4 _3223 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3208, _3209, (log2((isnan(cbSceneParam._m0[77u].w) ? _957 : (isnan(_957) ? cbSceneParam._m0[77u].w : min(_957, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3225 = _3223.x;
    float _3226 = _3223.y;
    float _3227 = _3223.z;
    float _3228 = _3223.w;
    float _3300;
    float _3302;
    float _3304;
    float _3306;
    if (_957 > cbSceneParam._m0[78u].w)
    {
        float _3262 = isnan(_957) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _957 : min(cbSceneParam._m0[80u].w, _957));
        float _3263 = _3262 / _957;
        float _3274 = _3263 * _1007;
        float _3275 = _1008 * _3263;
        float _3276 = (-0.0) - _3275;
        float _3278 = _3263 * _1009;
        float _3280 = (cbSceneParam._m0[77u].w * _3276) / _3262;
        float _3281 = _3280 + cbSceneParam._m0[79u].w;
        float _3282 = cbSceneParam._m0[79u].w - _3275;
        float _3288 = sqrt(((_3274 * _3274) + (_3275 * _3275)) + (_3278 * _3278));
        float _3291 = (1.0 - (cbSceneParam._m0[77u].w / _3262)) * _3288;
        float _3296 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3298 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3475;
        if (abs((_3276 - _3280) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3475 = ((((_3281 > 0.0) ? exp2(_3296 * _3281) : (2.0 - exp2(_3298 * _3281))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3291;
        }
        else
        {
            float _3419 = 1.0 / cbSceneParam._m0[80u].x;
            float _3420 = isnan(_3282) ? _3281 : (isnan(_3281) ? _3282 : max(_3281, _3282));
            float _3421 = isnan(_3282) ? _3281 : (isnan(_3281) ? _3282 : min(_3281, _3282));
            float _3430 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : min(_3420, 0.0));
            float _3431 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : min(_3421, 0.0));
            _3475 = ((abs(_3288 / _3276) * cbSceneParam._m0[80u].y) * ((((_3430 - _3431) * 2.0) - ((exp2(_3296 * (isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0)))) - exp2(_3296 * (isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0))))) * _3419)) - ((exp2(_3298 * _3430) - exp2(_3298 * _3431)) * _3419))) + (_3291 * cbSceneParam._m0[80u].z);
        }
        vec4 _3477 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3208, _3209, 1.0), 0.0);
        float _3486 = exp2((_3475 * (-1.44269502162933349609375)) * (1.0 - _3477.w));
        float _3487 = log2(_3486);
        float _3503 = log2(_3228);
        _3300 = (exp2(_3503 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3487 * cbSceneParam._m0[78u].x)) * _3477.x) / cbSceneParam._m0[78u].x)) + _3225;
        _3302 = (exp2(_3503 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3487 * cbSceneParam._m0[78u].y)) * _3477.y) / cbSceneParam._m0[78u].y)) + _3226;
        _3304 = (exp2(_3503 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3487 * cbSceneParam._m0[78u].z)) * _3477.z) / cbSceneParam._m0[78u].z)) + _3227;
        _3306 = _3486 * _3228;
    }
    else
    {
        _3300 = _3225;
        _3302 = _3226;
        _3304 = _3227;
        _3306 = _3228;
    }
    bool _3513;
    vec4 _3316;
    vec4 _3338;
    float _3340;
    float _3344;
    float _3345;
    float _3346;
    float _3347;
    bool _3357;
    for (;;)
    {
        _3316 = cbMatDynParam._m0[0u];
        float _3318 = roundEven(_3316.y);
        bool _3319 = _3318 == 3.0;
        float _3320 = log2(_3306);
        float _3327 = exp2(_3320 * cbSceneParam._m0[78u].x) * _3197;
        float _3328 = exp2(_3320 * cbSceneParam._m0[78u].y) * _3198;
        float _3329 = exp2(_3320 * cbSceneParam._m0[78u].z) * _3199;
        float _3336 = _1023 + (-0.5);
        _3338 = cbMtdParam._m0[1u];
        _3340 = _3338.y * _3336;
        float _3343 = (_3318 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3344 = _3343 * (_3319 ? _3327 : (_3327 + (cbSceneParam._m0[72u].w * _3300)));
        _3345 = _3343 * (_3319 ? _3328 : (_3328 + (cbSceneParam._m0[72u].w * _3302)));
        _3346 = _3343 * (_3319 ? _3329 : (_3329 + (cbSceneParam._m0[72u].w * _3304)));
        _3347 = _3336 * 0.999000012874603271484375;
        _3357 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3357)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _3347) < 0.5)
            {
                _3513 = true;
                break;
            }
        }
        uint _3454 = _1072 + uint(_3316.w);
        if ((cbInstanceData._m0[_3454].w < 1.0) && ((cbInstanceData._m0[_3454].w + _3347) < 0.5))
        {
            _3513 = true;
            break;
        }
        if ((_3340 + 1.0) < _3338.x)
        {
            _3513 = true;
            break;
        }
        _3513 = false;
        break;
    }
    float _3717;
    if (_3513)
    {
        discard_state = true;
        _3717 = 0.0;
    }
    else
    {
        _3717 = cbInstanceData._m0[_3200].w;
    }
    SV_Target.x = _3344;
    SV_Target.y = _3345;
    SV_Target.z = _3346;
    SV_Target.w = _3717;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3200].w;
    discard_exit();
}


