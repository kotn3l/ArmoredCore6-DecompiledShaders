#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1484;
float _3888;
float _3889;
float _3890;
float _3891;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3900 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3911 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3922 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = _366.x * cbMtdParam._m0[11u].x;
    float _372 = _366.y * cbMtdParam._m0[11u].y;
    float _373 = _366.z * cbMtdParam._m0[11u].z;
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _411.x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[23u].w) + _457) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3933 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _482 = (_475 * ((_392.x * cbMtdParam._m0[12u].x) - _371)) + _371;
    float _483 = (_475 * ((_392.y * cbMtdParam._m0[12u].y) - _372)) + _372;
    float _484 = (_475 * ((_392.z * cbMtdParam._m0[12u].z) - _373)) + _373;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _523 = _521.x;
    float _533 = dot(vec4(_523, _521.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _547 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _411.y) * 2.0) - ((((_523 - _533) * cbMtdParam._m0[23u].w) + _533) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3944 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _558 = (_340.x * cbMtdParam._m0[9u].x) * ((_548 * ((_501.x * cbMtdParam._m0[13u].x) - _482)) + _482);
    float _559 = (_340.y * cbMtdParam._m0[9u].y) * ((_548 * ((_501.y * cbMtdParam._m0[13u].y) - _483)) + _483);
    float _560 = (_340.z * cbMtdParam._m0[9u].z) * ((_548 * ((_501.z * cbMtdParam._m0[13u].z) - _484)) + _484);
    float _564 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _558;
    float _567 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _559;
    float _570 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _560;
    float _578 = (((_558 - _564) * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) + _564) * 4.55000019073486328125;
    float _580 = (((_559 - _567) * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) + _567) * 4.55000019073486328125;
    float _582 = (((_560 - _570) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) + _570) * 4.55000019073486328125;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _475) + _641;
    float _651 = ((_622.y - _642) * _475) + _642;
    float _652 = ((_622.z - _643) * _475) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_664.z - _652) * _548) + _652;
    float _680 = ((((_664.x - _650) * _548) + _650) * 2.0) + (-1.0);
    float _681 = ((((_664.y - _651) * _548) + _651) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _3955 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _303) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _304) + cbTextureTilingScale._m0[11u].w));
    float _728 = _726.x;
    float _729 = 1.0 - _728;
    float _745 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_728 - _729) * cbMtdParam._m0[24u].z) + _729) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3966 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _746 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _753 = (_746 * (cbMtdParam._m0[17u].x - _578)) + _578;
    float _754 = (_746 * (cbMtdParam._m0[17u].y - _580)) + _580;
    float _755 = (_746 * (cbMtdParam._m0[17u].z - _582)) + _582;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _783 = _781.x;
    float _800 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _783) * _475) + _783;
    float _817 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _800) * _548) + _800;
    float _821 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _817) * cbMtdParam._m0[19u].z) + _817;
    float _823 = _821 - (_821 * _746);
    float _828 = (((_599.z - _677) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _677;
    float _832 = ((_701.z - _828) * cbMtdParam._m0[19u].w) + _828;
    vec4 _845 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _303) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _304) + cbTextureTilingScale._m0[15u].w));
    float _852 = (_845.x * 2.0) + (-1.0);
    float _853 = (_845.y * 2.0) + (-1.0);
    float _854 = dot(vec2(_852, _853), vec2(_852, _853));
    float _3977 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _862 = (_746 * (_845.z - _832)) + _832;
    float _871 = (_680 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_599.x * 2.0) + (-1.0)))) + (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _872 = (_681 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_599.y * 2.0) + (-1.0)))) + (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _884 = (((_852 - _871) + (cbMtdParam._m0[21u].x * _871)) * _746) + _871;
    float _885 = (((_853 - _872) + (cbMtdParam._m0[21u].x * _872)) * _746) + _872;
    float _886 = (_746 * (sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) - _687)) + _687;
    float _890 = cbMtdParam._m0[22u].x + _701.w;
    float _893 = fma(_886, _250 * NORMAL.x, fma(_885, _257 * TANGENT.x, (_243 * _235) * _884));
    float _896 = fma(_886, _250 * NORMAL.y, fma(_885, _257 * TANGENT.y, (_243 * _236) * _884));
    float _899 = fma(_886, _250 * NORMAL.z, fma(_885, _257 * TANGENT.z, (_243 * _237) * _884));
    float _903 = inversesqrt(dot(vec3(_893, _896, _899), vec3(_893, _896, _899)));
    float _904 = _903 * _893;
    float _905 = _903 * _896;
    float _906 = _903 * _899;
    float _3988 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _907 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4010 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4021 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4032 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4043 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _912 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _926 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _977 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _967);
    float _978 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _967);
    float _979 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _967);
    float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
    float _984 = _977 * _983;
    float _985 = _978 * _983;
    float _986 = _979 * _983;
    vec4 _991 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _993 = _991.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1165 = sqrt(((_977 * _977) + (_978 * _978)) + (_979 * _979));
        float _1171 = (cbMatDynParam._m0[5u].x * _1165) + cbMatDynParam._m0[5u].y;
        float _4054 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1176 = (cbMatDynParam._m0[5u].z * _1165) + cbMatDynParam._m0[5u].w;
        float _4065 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) - _1172)) + _1172) < ((_993 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1004 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1005 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1023 = fma(_906, cbSceneParam._m0[5u].z, fma(_905, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _904));
    float _1026 = fma(_906, cbSceneParam._m0[6u].z, fma(_905, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _904));
    float _1029 = fma(_906, cbSceneParam._m0[7u].z, fma(_905, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _904));
    uint _1042 = _284 + 9u;
    uint _1043 = _1042 + uint(cbMatDynParam._m0[0u].w);
    float _1049 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_1043].x;
    float _1050 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1043].y;
    float _1051 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_1043].z;
    float _4076 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _1055 = 1.0 - _912;
    float _1056 = _1052 * _1055;
    float _1057 = _1053 * _1055;
    float _1058 = _1054 * _1055;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _912;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _912;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _912;
    float _1066 = _1063 + 0.039999999105930328369140625;
    float _1068 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    vec4 _1078 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1004, cbSceneParam._m0[86u].y * _1005));
    float _1082 = ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * TEXCOORD_5.w) * _1078.x;
    float _1083 = dot(vec3(_904, _905, _906), vec3(_984, _985, _986));
    float _1086 = _1083 * 2.0;
    float _1090 = (_1086 * _904) - _984;
    float _1091 = (_1086 * _905) - _985;
    float _1092 = (_1086 * _906) - _986;
    float _1096 = abs(dot(vec3(_984, _985, _986), vec3(_904, _905, _906)));
    float _4109 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1098 = sqrt(_907);
    float _1111 = exp2((_1098 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1098 * 3.0));
    float _1117 = (1.0 - _1111) * ((_1098 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1118 = _1111 * _1098;
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1150 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1154 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1483;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1208 = fma(_1154, cbModelParam._m0[26u].z, fma(_1150, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1146));
        float _1212 = fma(_1154, cbModelParam._m0[27u].z, fma(_1150, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1146));
        float _1216 = fma(_1154, cbModelParam._m0[28u].z, fma(_1150, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1146));
        float _1241 = _1146 + _904;
        float _1242 = _1150 + _905;
        float _1243 = _1154 + _906;
        float _1253 = fma(_1243, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1241)) - _1208;
        float _1254 = fma(_1243, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1241)) - _1212;
        float _1255 = fma(_1243, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1241)) - _1216;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1208 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1212 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[34u].z) + ((((((_1216 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1311 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1277.x + (-0.5));
        float _1313 = _1311 * (_1277.y + (-0.5));
        float _1314 = _1311 * (_1277.z + (-0.5));
        float _1321 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1284.x + (-0.5));
        float _1323 = _1321 * (_1284.y + (-0.5));
        float _1324 = _1321 * (_1284.z + (-0.5));
        float _1331 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1291.x + (-0.5));
        float _1333 = _1331 * (_1291.y + (-0.5));
        float _1334 = _1331 * (_1291.z + (-0.5));
        float _1341 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1298.x + (-0.5));
        float _1343 = _1341 * (_1298.y + (-0.5));
        float _1344 = _1341 * (_1298.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1365 = (dot(vec3(_904, _905, _906), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1375 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4157 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1377 + 1.0))) + _1382) * _1345;
        float _1392 = _1313 * 0.5;
        float _1393 = _1323 * 0.5;
        float _1394 = _1333 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_904, _905, _906), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4190 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1419 + 1.0))) + _1424) * _1346;
        float _1434 = _1314 * 0.5;
        float _1435 = _1324 * 0.5;
        float _1436 = _1334 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_904, _905, _906), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4223 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1461 + 1.0))) + _1466) * _1347;
        _1483 = _1314;
        _1485 = _1313;
        _1486 = _1312;
        _1487 = _1324;
        _1488 = _1323;
        _1489 = _1322;
        _1490 = _1334;
        _1491 = _1333;
        _1492 = _1332;
        _1493 = _1347;
        _1494 = _1346;
        _1495 = _1345;
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1484;
        _1485 = _1484;
        _1486 = _1484;
        _1487 = _1484;
        _1488 = _1484;
        _1489 = _1484;
        _1490 = _1484;
        _1491 = _1484;
        _1492 = _1484;
        _1493 = _1484;
        _1494 = _1484;
        _1495 = _1484;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1525 = fma(_1154, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146));
        float _1529 = fma(_1154, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146));
        float _1533 = fma(_1154, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146));
        float _1556 = _1146 + _904;
        float _1557 = _1150 + _905;
        float _1558 = _1154 + _906;
        float _1568 = fma(_1558, cbModelParam._m0[30u].z, fma(_1557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1556)) - _1525;
        float _1569 = fma(_1558, cbModelParam._m0[31u].z, fma(_1557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1556)) - _1529;
        float _1570 = fma(_1558, cbModelParam._m0[32u].z, fma(_1557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1556)) - _1533;
        float _1574 = inversesqrt(dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570)));
        float _1587 = ((_1574 * _1568) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1525 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1574 * _1569) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1529 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1574 * _1570) / cbModelParam._m0[35u].z) + ((((((_1533 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        vec4 _1612 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1587, _1588, _1589), 0.0);
        float _1624 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1591.x + (-0.5));
        float _1626 = _1624 * (_1591.y + (-0.5));
        float _1627 = _1624 * (_1591.z + (-0.5));
        float _1634 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1598.x + (-0.5));
        float _1636 = _1634 * (_1598.y + (-0.5));
        float _1637 = _1634 * (_1598.z + (-0.5));
        float _1644 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1605.x + (-0.5));
        float _1646 = _1644 * (_1605.y + (-0.5));
        float _1647 = _1644 * (_1605.z + (-0.5));
        float _1654 = exp2((_1612.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1612.x + (-0.5));
        float _1656 = _1654 * (_1612.y + (-0.5));
        float _1657 = _1654 * (_1612.z + (-0.5));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = _1625 * 0.5;
        float _1662 = _1635 * 0.5;
        float _1663 = _1645 * 0.5;
        float _1664 = dot(vec3(_1661, _1662, _1663), vec3(_1661, _1662, _1663));
        float _1669 = (_1664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1664);
        float _1677 = (dot(vec3(_904, _905, _906), vec3(_1669 * _1661, _1669 * _1662, _1669 * _1663)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1686 = sqrt(((_1662 * _1662) + (_1661 * _1661)) + (_1663 * _1663)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1688 = _1687 * 2.0;
        float _1692 = (1.0 - _1687) / (_1687 + 1.0);
        float _4286 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1702 = ((((1.0 - _1693) * (_1688 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1688 + 1.0))) + _1693) * _1658;
        float _1703 = _1626 * 0.5;
        float _1704 = _1636 * 0.5;
        float _1705 = _1646 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_904, _905, _906), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4319 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1730 + 1.0))) + _1735) * _1659;
        float _1745 = _1627 * 0.5;
        float _1746 = _1637 * 0.5;
        float _1747 = _1647 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_904, _905, _906), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4352 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1772 + 1.0))) + _1777) * _1660;
        _1794 = _1627;
        _1795 = _1626;
        _1796 = _1625;
        _1797 = _1637;
        _1798 = _1636;
        _1799 = _1635;
        _1800 = _1647;
        _1801 = _1646;
        _1802 = _1645;
        _1803 = _1660;
        _1804 = _1659;
        _1805 = _1658;
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
    }
    else
    {
        _1794 = _1484;
        _1795 = _1484;
        _1796 = _1484;
        _1797 = _1484;
        _1798 = _1484;
        _1799 = _1484;
        _1800 = _1484;
        _1801 = _1484;
        _1802 = _1484;
        _1803 = _1484;
        _1804 = _1484;
        _1805 = _1484;
        _1806 = 0.0;
        _1807 = 0.0;
        _1808 = 0.0;
    }
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1496)) + _1496;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1497)) + _1497;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1498)) + _1498;
    float _1841 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1818));
    float _1862 = _1090 * 0.5;
    float _1863 = _1091 * 0.5;
    float _1864 = _1092 * 0.5;
    float _1865 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1868 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1871 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1905;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1878 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1483, _1487, _1490, _1493));
        float _1882 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1886 = dot(vec4(_1862, _1863, _1864, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1893 = dot(vec4(cbModelParam._m0[39u]), vec4(_1862, _1863, _1864, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0)), isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1916;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1907 = dot(vec4(cbModelParam._m0[40u]), vec4(_1862, _1863, _1864, 1.0));
        _1916 = dot(vec3(isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1907) ? 0.0 : (isnan(0.0) ? _1907 : max(0.0, _1907))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1916 = 1.0;
    }
    float _1920 = (_1916 * cbModelParam._m0[1u].x) + (_1905 * (1.0 - cbModelParam._m0[1u].x));
    float _1930 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _907);
    float _1931 = isnan(_1930) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1930 : min(cbModelParam._m0[25u].z, _1930));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1154, cbModelParam._m0[13u].z, fma(_1150, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1146)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1154, cbModelParam._m0[14u].z, fma(_1150, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1146)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1154, cbModelParam._m0[15u].z, fma(_1150, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1146)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1092, cbModelParam._m0[13u].z, fma(_1091, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1090));
        float _1993 = fma(_1092, cbModelParam._m0[14u].z, fma(_1091, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1090));
        float _1996 = fma(_1092, cbModelParam._m0[15u].z, fma(_1091, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1090));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2024 = frontier_phi_17_15_ladder;
        }
        float _2248;
        if (_1993 > 0.0)
        {
            _2248 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2248 = frontier_phi_26_22_ladder;
        }
        float _2505;
        if (_1996 > 0.0)
        {
            _2505 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2505 = frontier_phi_38_33_ladder;
        }
        float _2507 = isnan(_2248) ? _2024 : (isnan(_2024) ? _2248 : min(_2024, _2248));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1990) + _1979;
        float _2513 = (_2508 * _1993) + _1983;
        float _2514 = (_2508 * _1996) + _1987;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2515;
        float _2519 = _2515 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 > _2519) || ((_2513 < _2517) || ((_2512 < _2517) || (_2512 > _2519))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2514, cbModelParam._m0[9u].z, fma(_2513, cbModelParam._m0[9u].y, _2512 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2514, cbModelParam._m0[10u].z, fma(_2513, cbModelParam._m0[10u].y, _2512 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2514, cbModelParam._m0[11u].z, fma(_2513, cbModelParam._m0[11u].y, _2512 * cbModelParam._m0[11u].x))), _1931);
            frontier_phi_16_38_ladder = _2642.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2642.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2642.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_16_38_ladder_2;
        _2014 = frontier_phi_16_38_ladder_1;
        _2016 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1090, _1091, _1092), _1931);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _907);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2111;
    float _2113;
    float _2115;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2075 = fma(_1154, cbModelParam._m0[21u].z, fma(_1150, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1146)) + cbModelParam._m0[21u].w;
        float _2079 = fma(_1154, cbModelParam._m0[22u].z, fma(_1150, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1146)) + cbModelParam._m0[22u].w;
        float _2083 = fma(_1154, cbModelParam._m0[23u].z, fma(_1150, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1146)) + cbModelParam._m0[23u].w;
        float _2086 = fma(_1092, cbModelParam._m0[21u].z, fma(_1091, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1090));
        float _2089 = fma(_1092, cbModelParam._m0[22u].z, fma(_1091, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1090));
        float _2092 = fma(_1092, cbModelParam._m0[23u].z, fma(_1091, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1090));
        float _2253;
        if (_2086 > 0.0)
        {
            _2253 = abs((1.0 - _2075) / _2086);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2075 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2253 = frontier_phi_28_24_ladder;
        }
        float _2532;
        if (_2089 > 0.0)
        {
            _2532 = abs((1.0 - _2079) / _2089);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2079 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2532 = frontier_phi_40_35_ladder;
        }
        float _2745;
        if (_2092 > 0.0)
        {
            _2745 = abs((1.0 - _2083) / _2092);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2083 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2745 = frontier_phi_49_46_ladder;
        }
        float _2747 = isnan(_2532) ? _2253 : (isnan(_2253) ? _2532 : min(_2253, _2532));
        float _2748 = isnan(_2745) ? _2747 : (isnan(_2747) ? _2745 : min(_2747, _2745));
        float _2752 = (_2748 * _2086) + _2075;
        float _2753 = (_2748 * _2089) + _2079;
        float _2754 = (_2748 * _2092) + _2083;
        float _2755 = _2748 * 9.9999997473787516355514526367188e-05;
        float _2756 = (-1.0) - _2755;
        float _2758 = _2755 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2754 > _2758) || ((_2754 < _2756) || ((_2753 > _2758) || ((_2753 < _2756) || ((_2752 < _2756) || (_2752 > _2758))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2754, cbModelParam._m0[17u].z, fma(_2753, cbModelParam._m0[17u].y, _2752 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2754, cbModelParam._m0[18u].z, fma(_2753, cbModelParam._m0[18u].y, _2752 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2754, cbModelParam._m0[19u].z, fma(_2753, cbModelParam._m0[19u].y, _2752 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_25_49_ladder = _2953.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2953.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2953.x * cbModelParam._m0[1u].z;
        }
        _2111 = frontier_phi_25_49_ladder_2;
        _2113 = frontier_phi_25_49_ladder_1;
        _2115 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1090, _1091, _1092), _2021);
        _2111 = _2095.x * cbModelParam._m0[1u].z;
        _2113 = _2095.y * cbModelParam._m0[1u].z;
        _2115 = _2095.z * cbModelParam._m0[1u].z;
    }
    float _2128 = (((_1117 * _1066) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2111 - _2012)) + _2012);
    float _2130 = (((_1117 * _1068) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2113 - _2014)) + _2014);
    float _2132 = (((_1117 * _1069) + _1118) * _1082) * ((cbModelParam._m0[1u].w * (_2115 - _2016)) + _2016);
    float _2135 = fma(_2132, cbSceneParam._m0[89u].z, fma(_2130, cbSceneParam._m0[89u].y, _2128 * cbSceneParam._m0[89u].x));
    float _2138 = fma(_2132, cbSceneParam._m0[90u].z, fma(_2130, cbSceneParam._m0[90u].y, _2128 * cbSceneParam._m0[90u].x));
    float _2141 = fma(_2132, cbSceneParam._m0[91u].z, fma(_2130, cbSceneParam._m0[91u].y, _2128 * cbSceneParam._m0[91u].x));
    vec4 _2149 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1004, _1005));
    float _2151 = _2149.w;
    float _2163 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2151);
    float _2164 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2151);
    float _2165 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2151);
    uvec4 _2169 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2171 = _2169.x * 14u;
    uint _2172 = _2171 + 13u;
    float _2179 = _1082 + (-1.0);
    float _2184 = (cbLight._m0[_2172].x * _2179) + 1.0;
    float _2185 = (cbLight._m0[_2172].y * _2179) + 1.0;
    float _2186 = (cbLight._m0[_2172].z * _2179) + 1.0;
    float _2187 = (cbLight._m0[_2172].w * _2179) + 1.0;
    uint _2188 = _2171 + 5u;
    float _2194 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
    uint _2198 = _2171 + 4u;
    float _2207 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2211 = _2171 | 1u;
    float _2222 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_904, _905, _906));
    float _2225 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_904, _905, _906));
    float _4488 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _4499 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2230 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2232 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2239 = ((cbLight._m0[_2188].x * _2194) * _2232) + (((cbLight._m0[_2198].x * _2163) * _2207) * _2230);
    float _2240 = ((_2194 * cbLight._m0[_2188].y) * _2232) + (((cbLight._m0[_2198].y * _2164) * _2207) * _2230);
    float _2241 = ((_2194 * cbLight._m0[_2188].z) * _2232) + (((cbLight._m0[_2198].z * _2165) * _2207) * _2230);
    uvec4 _2245 = floatBitsToUint(cbLight._m0[_2171 + 12u]);
    bool _2247 = _2245.x == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2247)
    {
        _2258 = _2239;
        _2260 = _2240;
        _2262 = _2241;
    }
    else
    {
        uint _2266 = _2171 + 6u;
        float _2282 = (dot(vec3(cbLight._m0[_2171 + 2u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4510 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2285 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2258 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2239;
        _2260 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2240;
        _2262 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2241;
    }
    bool _2265 = _2245.y == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2265)
    {
        _2303 = _2258;
        _2305 = _2260;
        _2307 = _2262;
    }
    else
    {
        uint _2476 = _2171 + 7u;
        float _2492 = (dot(vec3(cbLight._m0[_2171 + 3u].xyz), vec3(_904, _905, _906)) * 0.5) + 0.5;
        float _2493 = _2492 * _2492;
        float _4526 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2494 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2495 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2303 = (((cbLight._m0[_2476].x * 0.3183098733425140380859375) * _2494) * _2495) + _2258;
        _2305 = (((cbLight._m0[_2476].y * 0.3183098733425140380859375) * _2494) * _2495) + _2260;
        _2307 = (((cbLight._m0[_2476].z * 0.3183098733425140380859375) * _2494) * _2495) + _2262;
    }
    uint _2310 = _2171 + 8u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _907) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2171].x + _984;
    float _2326 = cbLight._m0[_2171].y + _985;
    float _2327 = cbLight._m0[_2171].z + _986;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2171].xyz));
    float _4542 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _4553 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _2339 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2340 = dot(vec3(_904, _905, _906), vec3(_2332, _2333, _2334));
    float _4564 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2332, _2333, _2334));
    float _4575 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2324 * _2324;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2360 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
    float _2361 = 0.959999978542327880859375 - _1063;
    float _2363 = 0.959999978542327880859375 - _1064;
    float _2364 = 0.959999978542327880859375 - _1065;
    float _2371 = 1.0 - _2324;
    float _2382 = (0.5 / (((_2339 * ((_2338 * _2371) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2371) + _2324) * _2338))) * _2338;
    float _4586 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2384 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    uint _2398 = _2171 + 9u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _907) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2211].x + _984;
    float _2412 = cbLight._m0[_2211].y + _985;
    float _2413 = cbLight._m0[_2211].z + _986;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2211].xyz));
    float _4597 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2425 = dot(vec3(_904, _905, _906), vec3(_2418, _2419, _2420));
    float _4608 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2429 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2418, _2419, _2420));
    float _4619 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = _2410 * _2410;
    float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
    float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
    float _2451 = 1.0 - _2410;
    float _2461 = (0.5 / (((_2339 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2451) + _2410) * _2424))) * _2424;
    float _4630 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2463 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
    float _2473 = (((((_2444 * _2361) + _1066) * cbLight._m0[_2398].x) * _2463) * _2194) + ((((cbLight._m0[_2310].x * _2163) * ((_2360 * _2361) + _1066)) * _2384) * _2207);
    float _2474 = (((((_2444 * _2363) + _1068) * cbLight._m0[_2398].y) * _2463) * _2194) + ((((cbLight._m0[_2310].y * _2164) * ((_2360 * _2363) + _1068)) * _2384) * _2207);
    float _2475 = (((((_2444 * _2364) + _1069) * cbLight._m0[_2398].z) * _2463) * _2194) + ((((cbLight._m0[_2310].z * _2165) * ((_2360 * _2364) + _1069)) * _2384) * _2207);
    float _2537;
    float _2539;
    float _2541;
    if (_2247)
    {
        _2537 = _2473;
        _2539 = _2474;
        _2541 = _2475;
    }
    else
    {
        uint _2543 = _2171 + 2u;
        uint _2547 = _2171 + 10u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _907) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _984;
        float _2564 = cbLight._m0[_2543].y + _985;
        float _2565 = cbLight._m0[_2543].z + _986;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2543].xyz));
        float _4641 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2577 = dot(vec3(_904, _905, _906), vec3(_2570, _2571, _2572));
        float _4652 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4663 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2603 = 1.0 - _2562;
        float _2613 = (0.5 / (((_2339 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2603) + _2562) * _2576))) * _2576;
        float _4674 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2537 = (((((_2596 * _2361) + _1066) * cbLight._m0[_2547].x) * _2615) * _2616) + _2473;
        _2539 = (((((_2596 * _2363) + _1068) * cbLight._m0[_2547].y) * _2615) * _2616) + _2474;
        _2541 = (((((_2596 * _2364) + _1069) * cbLight._m0[_2547].z) * _2615) * _2616) + _2475;
    }
    float _2651;
    float _2653;
    float _2655;
    if (_2265)
    {
        _2651 = _2537;
        _2653 = _2539;
        _2655 = _2541;
    }
    else
    {
        uint _2662 = _2171 + 3u;
        uint _2666 = _2171 + 11u;
        float _2680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2662].w)) * _907) * 0.949999988079071044921875);
        float _2681 = _2680 * _2680;
        float _2682 = cbLight._m0[_2662].x + _984;
        float _2683 = cbLight._m0[_2662].y + _985;
        float _2684 = cbLight._m0[_2662].z + _986;
        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
        float _2689 = _2688 * _2682;
        float _2690 = _2688 * _2683;
        float _2691 = _2688 * _2684;
        float _2692 = dot(vec3(_904, _905, _906), vec3(cbLight._m0[_2662].xyz));
        float _4690 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2696 = dot(vec3(_904, _905, _906), vec3(_2689, _2690, _2691));
        float _4701 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2699 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2700 = dot(vec3(cbLight._m0[_2662].xyz), vec3(_2689, _2690, _2691));
        float _4712 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2704 = _2681 * _2681;
        float _2708 = ((_2699 * _2699) * (_2704 + (-1.0))) + 1.0;
        float _2715 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
        float _2722 = 1.0 - _2681;
        float _2732 = (0.5 / (((_2339 * ((_2695 * _2722) + _2681)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2722) + _2681) * _2695))) * _2695;
        float _4723 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2734 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2704 / ((_2708 * _2708) * 3.141590118408203125));
        float _2735 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
        _2651 = (((((_2715 * _2361) + _1066) * cbLight._m0[_2666].x) * _2734) * _2735) + _2537;
        _2653 = (((((_2715 * _2363) + _1068) * cbLight._m0[_2666].y) * _2734) * _2735) + _2539;
        _2655 = (((((_2715 * _2364) + _1069) * cbLight._m0[_2666].z) * _2734) * _2735) + _2541;
    }
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_2169.y == 0u)
    {
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2810;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2810;
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2810;
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.x;
        uint _2837 = uint((float(_2825.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1005) / _2826))) + floor(float(uint(cbSceneParam._m0[85u].x * _1004) / _2826)));
        float _2847 = (log2(_2813 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2848 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        uint _2851 = uint(isnan(14.0) ? _2848 : (isnan(_2848) ? 14.0 : min(_2848, 14.0)));
        uvec4 _2856 = texelFetch(g_lightClusterGridBuffer, int(((_2851 << 2u) + (_2837 << 6u)) >> 2u));
        uint _2857 = _2856.x;
        uint _2858 = _2825.z;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        if (((((1u << ((_2858 >> 4u) & 15u)) + 4294967295u) & _2857) == 0u) || ((_2858 & 240u) == 0u))
        {
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
        }
        else
        {
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            uint _3117 = 0u;
            uint _3126;
            bool _3127;
            for (;;)
            {
                _3126 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                _3127 = _3126 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3127)
                {
                    frontier_phi_66_pred = _3111;
                    frontier_phi_66_pred_1 = _3116;
                    frontier_phi_66_pred_2 = _3115;
                    frontier_phi_66_pred_3 = _3114;
                    frontier_phi_66_pred_4 = _3113;
                    frontier_phi_66_pred_5 = _3112;
                }
                else
                {
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    uint _3262;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3126;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    for (;;)
                    {
                        uint _3266 = uint(findLSB(_3262)) + (_3117 << 5u);
                        uint _3263 = (_3262 + 4294967295u) & _3262;
                        uint _3268 = _3266 * 48u;
                        vec4 _3282 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3268)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3268 + 3u)).x));
                        uint _3288 = (_3266 * 48u) + 4u;
                        vec4 _3301 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3288)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3288 + 3u)).x));
                        uint _3307 = (_3266 * 48u) + 8u;
                        vec3 _3318 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3307)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3307 + 2u)).x));
                        float _3322 = _3282.x - _2811;
                        float _3323 = _3282.y - _2812;
                        float _3324 = _3282.z - _2813;
                        float _3325 = dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324));
                        float _3328 = inversesqrt(_3325);
                        float _3329 = _3328 * _3322;
                        float _3330 = _3328 * _3323;
                        float _3331 = _3328 * _3324;
                        float _3332 = dot(vec3(_1023, _1026, _1029), vec3(_3329, _3330, _3331));
                        float _3337 = 1.0 - (_3325 * _3282.w);
                        float _4749 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3338 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3339 = sqrt(_3325) * _3301.w;
                        float _3342 = 1.39999997615814208984375 / (_3339 + 1.39999997615814208984375);
                        float _3343 = _3342 * _3342;
                        float _3346 = ((1.0 - _3343) * _3332) + _3343;
                        float _3349 = _3339 * _3339;
                        float _3353 = ((isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0))) * _3338) / ((_3349 * 0.699999988079071044921875) + 1.0);
                        float _3357 = (-0.0) - _2811;
                        float _3358 = (-0.0) - _2812;
                        float _3359 = (-0.0) - _2813;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3374 = exp2(log2(1.0 / ((_3349 * 3.5) + 5.0)) * 0.25);
                        float _3375 = 1.0 - _1098;
                        float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                        float _3383 = _3382 * _3382;
                        float _3384 = _3383 * _3383;
                        float _3385 = _3364 + _3329;
                        float _3386 = _3365 + _3330;
                        float _3387 = _3366 + _3331;
                        float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                        float _3395 = dot(vec3(_1023, _1026, _1029), vec3(_3364, _3365, _3366));
                        float _4765 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3399 = dot(vec3(_1023, _1026, _1029), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                        float _4776 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3402 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                        float _3407 = _3342 * _3383;
                        float _3408 = _3407 * _3407;
                        float _3411 = ((1.0 - _3408) * _3332) + _3408;
                        float _4787 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3412 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3413 = 1.0 - _3383;
                        float _3423 = (0.5 / (((_3412 * ((_3398 * _3413) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3412 * _3413) + _3383) * _3398))) * _3412;
                        float _4798 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3434 = (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) / ((_3406 * _3406) * ((_3349 * 2.1991131305694580078125) + 3.141590118408203125))) * _3338;
                        _3186 = (_3353 * _3301.x) + _3259;
                        _3187 = (_3353 * _3301.y) + _3260;
                        _3188 = (_3353 * _3301.z) + _3261;
                        _3183 = (_3434 * _3318.x) + _3256;
                        _3184 = (_3434 * _3318.y) + _3257;
                        _3185 = (_3434 * _3318.z) + _3258;
                        if (_3263 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3263;
                        }
                    }
                    frontier_phi_66_pred = _3183;
                    frontier_phi_66_pred_1 = _3188;
                    frontier_phi_66_pred_2 = _3187;
                    frontier_phi_66_pred_3 = _3186;
                    frontier_phi_66_pred_4 = _3185;
                    frontier_phi_66_pred_5 = _3184;
                }
                _2959 = frontier_phi_66_pred;
                _2969 = frontier_phi_66_pred_1;
                _2967 = frontier_phi_66_pred_2;
                _2965 = frontier_phi_66_pred_3;
                _2963 = frontier_phi_66_pred_4;
                _2961 = frontier_phi_66_pred_5;
                uint _3118 = _3117 + 1u;
                if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3111 = _2959;
                    _3112 = _2961;
                    _3113 = _2963;
                    _3114 = _2965;
                    _3115 = _2967;
                    _3116 = _2969;
                    _3117 = _3118;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
        }
        uvec4 _2972 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2973 = _2972.z;
        uint _2975 = (_2973 >> 8u) & 15u;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        if (((4294967295u << _2975) & _2857) == 0u)
        {
            _3079 = _2958;
            _3081 = _2960;
            _3083 = _2962;
            _3085 = _2964;
            _3087 = _2966;
            _3089 = _2968;
        }
        else
        {
            float _3104 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
            float _3105 = _3104 * _2811;
            float _3106 = _3104 * _2812;
            float _3107 = _3104 * _2813;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2975 < ((_2973 >> 12u) & 15u))
            {
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3239 = _2958;
                float _3240 = _2960;
                float _3241 = _2962;
                float _3242 = _2964;
                float _3243 = _2966;
                float _3244 = _2968;
                uint _3245 = _2975;
                uint _3254;
                bool _3255;
                for (;;)
                {
                    _3254 = texelFetch(g_lightClassification, int((((_2851 << 5u) + (_2837 << 9u)) + (_3245 << 2u)) >> 2u)).x;
                    _3255 = _3254 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3255)
                    {
                        frontier_phi_77_pred = _3244;
                        frontier_phi_77_pred_1 = _3243;
                        frontier_phi_77_pred_2 = _3242;
                        frontier_phi_77_pred_3 = _3241;
                        frontier_phi_77_pred_4 = _3240;
                        frontier_phi_77_pred_5 = _3239;
                    }
                    else
                    {
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        float _3464 = _3242;
                        float _3465 = _3243;
                        float _3466 = _3244;
                        uint _3467 = _3254;
                        uint _3468;
                        vec4 _3493;
                        float _3494;
                        vec4 _3509;
                        vec3 _3521;
                        vec4 _3536;
                        vec4 _3551;
                        float _3597;
                        bool _3598;
                        for (;;)
                        {
                            uint _3478 = ((_3245 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3467));
                            _3468 = (_3467 + 4294967295u) & _3467;
                            uint _3480 = _3478 * 40u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            _3494 = _3493.w;
                            uint _3496 = (_3478 * 40u) + 4u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            uint _3511 = (_3478 * 40u) + 8u;
                            _3521 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x));
                            uint _3523 = (_3478 * 40u) + 16u;
                            _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            uint _3538 = (_3478 * 40u) + 20u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            uint _3553 = (_3478 * 40u) + 24u;
                            vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3572 = (_3478 * 40u) + 28u;
                            vec4 _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3597 = fma(_2813, _3585.z, fma(_2812, _3585.y, _3585.x * _2811)) + _3585.w;
                            _3598 = !((fma(_2813, _3566.z, fma(_2812, _3566.y, _3566.x * _2811)) + _3566.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3598)
                            {
                                float _3625 = _3493.x - _2811;
                                float _3626 = _3493.y - _2812;
                                float _3627 = _3493.z - _2813;
                                float _3628 = dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627));
                                float _3631 = inversesqrt(_3628);
                                float _3632 = _3631 * _3625;
                                float _3633 = _3631 * _3626;
                                float _3634 = _3631 * _3627;
                                float _3638 = 1.0 - (_3628 / (_3494 * _3494));
                                float _4809 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3643 = sqrt(_3628) * _3509.w;
                                float _3645 = 1.39999997615814208984375 / (_3643 + 1.39999997615814208984375);
                                float _3646 = _3645 * _3645;
                                float _3649 = ((1.0 - _3646) * dot(vec3(_3632, _3633, _3634), vec3(_1023, _1026, _1029))) + _3646;
                                float _3652 = _3643 * _3643;
                                float _3656 = (fma(_2813, _3536.z, fma(_2812, _3536.y, _3536.x * _2811)) + _3536.w) / _3597;
                                float _3657 = (fma(_2813, _3551.z, fma(_2812, _3551.y, _3551.x * _2811)) + _3551.w) / _3597;
                                float _3661 = 1.0 - dot(vec2(_3656, _3657), vec2(_3656, _3657));
                                float _4825 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3663 = _3662 * (((isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0))) * _3639) / ((_3652 * 0.699999988079071044921875) + 1.0));
                                float _3675 = exp2(log2(1.0 / ((_3652 * 3.5) + 5.0)) * 0.25);
                                float _3676 = 1.0 - _1098;
                                float _3683 = sqrt(1.0 - ((1.0 - (_3676 * _3676)) * (1.0 - (_3675 * _3675))));
                                float _3684 = _3683 * _3683;
                                float _3685 = _3684 * _3684;
                                float _3686 = _3632 - _3105;
                                float _3687 = _3633 - _3106;
                                float _3688 = _3634 - _3107;
                                float _3692 = inversesqrt(dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688)));
                                float _3696 = dot(vec3(_1023, _1026, _1029), vec3((-0.0) - _3105, (-0.0) - _3106, (-0.0) - _3107));
                                float _4836 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3700 = dot(vec3(_1023, _1026, _1029), vec3(_3692 * _3686, _3692 * _3687, _3692 * _3688));
                                float _4847 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3707 = ((_3703 * _3703) * (_3685 + (-1.0))) + 1.0;
                                float _3708 = _3645 * _3684;
                                float _3709 = _3708 * _3708;
                                float _3715 = ((1.0 - _3709) * dot(vec3(_1023, _1026, _1029), vec3(_3632, _3633, _3634))) + _3709;
                                float _4858 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3717 = 1.0 - _3684;
                                float _3727 = (0.5 / (((_3716 * ((_3699 * _3717) + _3684)) + 9.9999999392252902907785028219223e-09) + (((_3716 * _3717) + _3684) * _3699))) * _3716;
                                float _4869 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3737 = (_3662 * _3639) * (((_3685 * 3.1415927410125732421875) * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) / ((_3707 * _3707) * ((_3652 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3663 * _3509.y;
                                frontier_phi_83_pred_1 = _3663 * _3509.x;
                                frontier_phi_83_pred_2 = _3737 * _3521.z;
                                frontier_phi_83_pred_3 = _3737 * _3521.y;
                                frontier_phi_83_pred_4 = _3737 * _3521.x;
                                frontier_phi_83_pred_5 = _3663 * _3509.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3745 = frontier_phi_83_pred;
                            _3744 = frontier_phi_83_pred_1;
                            _3743 = frontier_phi_83_pred_2;
                            _3742 = frontier_phi_83_pred_3;
                            _3741 = frontier_phi_83_pred_4;
                            _3746 = frontier_phi_83_pred_5;
                            _3451 = _3744 + _3464;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            if (_3468 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3468;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3453;
                        frontier_phi_77_pred_1 = _3452;
                        frontier_phi_77_pred_2 = _3451;
                        frontier_phi_77_pred_3 = _3450;
                        frontier_phi_77_pred_4 = _3449;
                        frontier_phi_77_pred_5 = _3448;
                    }
                    _3090 = frontier_phi_77_pred;
                    _3088 = frontier_phi_77_pred_1;
                    _3086 = frontier_phi_77_pred_2;
                    _3084 = frontier_phi_77_pred_3;
                    _3082 = frontier_phi_77_pred_4;
                    _3080 = frontier_phi_77_pred_5;
                    uint _3246 = _3245 + 1u;
                    if (_3246 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3239 = _3080;
                        _3240 = _3082;
                        _3241 = _3084;
                        _3242 = _3086;
                        _3243 = _3088;
                        _3244 = _3090;
                        _3245 = _3246;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3084;
                frontier_phi_58_59_ladder_1 = _3090;
                frontier_phi_58_59_ladder_2 = _3088;
                frontier_phi_58_59_ladder_3 = _3086;
                frontier_phi_58_59_ladder_4 = _3082;
                frontier_phi_58_59_ladder_5 = _3080;
            }
            else
            {
                frontier_phi_58_59_ladder = _2962;
                frontier_phi_58_59_ladder_1 = _2968;
                frontier_phi_58_59_ladder_2 = _2966;
                frontier_phi_58_59_ladder_3 = _2964;
                frontier_phi_58_59_ladder_4 = _2960;
                frontier_phi_58_59_ladder_5 = _2958;
            }
            _3079 = frontier_phi_58_59_ladder_5;
            _3081 = frontier_phi_58_59_ladder_4;
            _3083 = frontier_phi_58_59_ladder;
            _3085 = frontier_phi_58_59_ladder_3;
            _3087 = frontier_phi_58_59_ladder_2;
            _3089 = frontier_phi_58_59_ladder_1;
        }
        float _3094 = isnan(1.0) ? _1082 : (isnan(_1082) ? 1.0 : min(_1082, 1.0));
        _2870 = (_3094 * _3085) + _2303;
        _2872 = (_3094 * _3087) + _2305;
        _2874 = (_3094 * _3089) + _2307;
        _2876 = ((_3079 * _1066) * _3094) + _2651;
        _2878 = ((_3081 * _1068) * _3094) + _2653;
        _2880 = ((_3083 * _1069) * _3094) + _2655;
    }
    else
    {
        _2870 = _2303;
        _2872 = _2305;
        _2874 = _2307;
        _2876 = _2651;
        _2878 = _2653;
        _2880 = _2655;
    }
    float _4885 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _4896 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _4907 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2897 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2870 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1082))) + ((_2876 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    float _2898 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2872 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1082))) + ((_2878 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    float _2899 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2874 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1082))) + ((_2880 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1920)) * cbPerFrame._m0[3u].x);
    uint _2900 = _284 + 6u;
    float _2908 = _1004 / cbSceneParam._m0[86u].x;
    float _2909 = _1005 / cbSceneParam._m0[86u].y;
    vec4 _2923 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, (log2((isnan(cbSceneParam._m0[77u].w) ? _926 : (isnan(_926) ? cbSceneParam._m0[77u].w : min(_926, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2925 = _2923.x;
    float _2926 = _2923.y;
    float _2927 = _2923.z;
    float _2928 = _2923.w;
    float _3021;
    float _3023;
    float _3025;
    float _3027;
    if (_926 > cbSceneParam._m0[78u].w)
    {
        float _2983 = isnan(_926) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _926 : min(cbSceneParam._m0[80u].w, _926));
        float _2984 = _2983 / _926;
        float _2995 = _2984 * _977;
        float _2996 = _978 * _2984;
        float _2997 = (-0.0) - _2996;
        float _2999 = _2984 * _979;
        float _3001 = (cbSceneParam._m0[77u].w * _2997) / _2983;
        float _3002 = _3001 + cbSceneParam._m0[79u].w;
        float _3003 = cbSceneParam._m0[79u].w - _2996;
        float _3009 = sqrt(((_2995 * _2995) + (_2996 * _2996)) + (_2999 * _2999));
        float _3012 = (1.0 - (cbSceneParam._m0[77u].w / _2983)) * _3009;
        float _3017 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3019 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3196;
        if (abs((_2997 - _3001) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3196 = ((((_3002 > 0.0) ? exp2(_3017 * _3002) : (2.0 - exp2(_3019 * _3002))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3012;
        }
        else
        {
            float _3140 = 1.0 / cbSceneParam._m0[80u].x;
            float _3141 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : max(_3002, _3003));
            float _3142 = isnan(_3003) ? _3002 : (isnan(_3002) ? _3003 : min(_3002, _3003));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            float _3152 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : min(_3142, 0.0));
            _3196 = ((abs(_3009 / _2997) * cbSceneParam._m0[80u].y) * ((((_3151 - _3152) * 2.0) - ((exp2(_3017 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0)))) - exp2(_3017 * (isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))))) * _3140)) - ((exp2(_3019 * _3151) - exp2(_3019 * _3152)) * _3140))) + (_3012 * cbSceneParam._m0[80u].z);
        }
        vec4 _3198 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2908, _2909, 1.0), 0.0);
        float _3207 = exp2((_3196 * (-1.44269502162933349609375)) * (1.0 - _3198.w));
        float _3208 = log2(_3207);
        float _3224 = log2(_2928);
        _3021 = (exp2(_3224 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].x)) * _3198.x) / cbSceneParam._m0[78u].x)) + _2925;
        _3023 = (exp2(_3224 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].y)) * _3198.y) / cbSceneParam._m0[78u].y)) + _2926;
        _3025 = (exp2(_3224 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3208 * cbSceneParam._m0[78u].z)) * _3198.z) / cbSceneParam._m0[78u].z)) + _2927;
        _3027 = _3207 * _2928;
    }
    else
    {
        _3021 = _2925;
        _3023 = _2926;
        _3025 = _2927;
        _3027 = _2928;
    }
    bool _3234;
    vec4 _3037;
    vec4 _3059;
    float _3061;
    float _3065;
    float _3066;
    float _3067;
    float _3068;
    bool _3078;
    for (;;)
    {
        _3037 = cbMatDynParam._m0[0u];
        float _3039 = roundEven(_3037.y);
        bool _3040 = _3039 == 3.0;
        float _3041 = log2(_3027);
        float _3048 = exp2(_3041 * cbSceneParam._m0[78u].x) * _2897;
        float _3049 = exp2(_3041 * cbSceneParam._m0[78u].y) * _2898;
        float _3050 = exp2(_3041 * cbSceneParam._m0[78u].z) * _2899;
        float _3057 = _993 + (-0.5);
        _3059 = cbMtdParam._m0[1u];
        _3061 = _3059.y * _3057;
        float _3064 = (_3039 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3065 = _3064 * (_3040 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3021)));
        _3066 = _3064 * (_3040 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3023)));
        _3067 = _3064 * (_3040 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3025)));
        _3068 = _3057 * 0.999000012874603271484375;
        _3078 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3078)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3068) < 0.5)
            {
                _3234 = true;
                break;
            }
        }
        uint _3175 = _1042 + uint(_3037.w);
        if ((cbInstanceData._m0[_3175].w < 1.0) && ((cbInstanceData._m0[_3175].w + _3068) < 0.5))
        {
            _3234 = true;
            break;
        }
        if ((_3061 + 1.0) < _3059.x)
        {
            _3234 = true;
            break;
        }
        _3234 = false;
        break;
    }
    float _3439;
    if (_3234)
    {
        discard_state = true;
        _3439 = 0.0;
    }
    else
    {
        _3439 = cbInstanceData._m0[_2900].w;
    }
    SV_Target.x = _3065;
    SV_Target.y = _3066;
    SV_Target.z = _3067;
    SV_Target.w = _3439;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2900].w;
    discard_exit();
}


