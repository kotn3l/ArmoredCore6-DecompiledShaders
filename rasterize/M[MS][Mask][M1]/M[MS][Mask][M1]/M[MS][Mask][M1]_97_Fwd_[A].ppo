#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1557;
float _3934;
float _3935;
float _3936;
float _3937;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3946 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _448 = (_441 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _449 = (_441 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _450 = (_441 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3957 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _527 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448);
    float _530 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449);
    float _533 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450);
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    float _600 = ((_572.x - _591) * _441) + _591;
    float _601 = ((_572.y - _592) * _441) + _592;
    float _602 = ((_572.z - _593) * _441) + _593;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _627 = ((_614.z - _602) * _514) + _602;
    float _630 = ((((_614.x - _600) * _514) + _600) * 2.0) + (-1.0);
    float _632 = ((((_614.y - _601) * _514) + _601) * 2.0) + (-1.0);
    float _633 = dot(vec2(_630, _632), vec2(_630, _632));
    float _3968 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _664 = (((_652.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _630;
    float _665 = (((_652.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _632;
    float _668 = fma(_638, _253, fma(_665, _260, _664 * _246));
    float _671 = fma(_638, _254, fma(_665, _261, _664 * _247));
    float _674 = fma(_638, _255, fma(_665, _262, _664 * _248));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _707 = _705.x;
    float _708 = 1.0 - _707;
    float _717 = (cbMtdParam._m0[19u].x + dot(vec4(_678 * _668, _678 * _671, _678 * _674, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_707 - _708) * cbMtdParam._m0[24u].z) + _708) * cbMtdParam._m0[21u].z);
    float _3979 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _718 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _720 = (-0.0) - cbMtdParam._m0[24u].x;
    float _722 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _722 : (isnan(_722) ? 1.0 : min(_722, 1.0));
    float _730 = _718 - ((_718 * TEXCOORD_8.x) * _723);
    float _731 = _718 - ((_718 * TEXCOORD_8.y) * _723);
    float _732 = _718 - ((_718 * TEXCOORD_8.z) * _723);
    float _739 = (_730 * ((_552.x * cbMtdParam._m0[18u].x) - _527)) + _527;
    float _740 = (_731 * ((_552.y * cbMtdParam._m0[18u].y) - _530)) + _530;
    float _741 = (_732 * ((_552.z * cbMtdParam._m0[18u].z) - _533)) + _533;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _755 = _753.x;
    float _756 = 1.0 - _755;
    float _782 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_755 - _756) * cbMtdParam._m0[24u].w) + _756) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4000 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _791 = ((((cbMtdParam._m0[10u].x - _739) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _783) + _739;
    float _792 = ((((cbMtdParam._m0[10u].y - _740) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _783) + _740;
    float _793 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _741)) * _783) + _741;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _821 = _819.x;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _821) * _441) + _821;
    float _855 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _838) * _514) + _838;
    float _859 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _855) * cbMtdParam._m0[19u].z) + _855;
    float _861 = _859 - (_859 * _730);
    float _863 = _861 - (_861 * _783);
    float _867 = (cbMtdParam._m0[19u].w * (_652.z - _627)) + _627;
    vec4 _881 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _888 = (_881.x * 2.0) + (-1.0);
    float _889 = (_881.y * 2.0) + (-1.0);
    float _890 = dot(vec2(_888, _889), vec2(_888, _889));
    float _4011 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _898 = ((_881.z - _867) * _730) + _867;
    float _901 = ((cbMtdParam._m0[23u].x - _898) * _783) + _898;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _926 = (_920.x * 2.0) + (-1.0);
    float _927 = (_920.y * 2.0) + (-1.0);
    float _928 = dot(vec2(_926, _927), vec2(_926, _927));
    float _4022 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _943 = ((sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) - _638) * _732) + _638;
    float _946 = (((_888 - _664) * _730) + _664) + (cbMtdParam._m0[21u].x * _664);
    float _947 = (((_889 - _665) * _731) + _665) + (cbMtdParam._m0[21u].x * _665);
    float _958 = (((_926 - _946) + (_946 * cbMtdParam._m0[22u].z)) * _783) + _946;
    float _959 = (((_927 - _947) + (_947 * cbMtdParam._m0[22u].z)) * _783) + _947;
    float _960 = (_783 * (sqrt(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) - _943)) + _943;
    float _964 = cbMtdParam._m0[22u].x + _652.w;
    float _967 = fma(_960, _253, fma(_959, _260, _958 * _246));
    float _970 = fma(_960, _254, fma(_959, _261, _958 * _247));
    float _973 = fma(_960, _255, fma(_959, _262, _958 * _248));
    float _977 = inversesqrt(dot(vec3(_967, _970, _973), vec3(_967, _970, _973)));
    float _978 = _977 * _967;
    float _979 = _977 * _970;
    float _980 = _977 * _973;
    float _4033 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _981 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4055 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4066 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4077 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4088 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _986 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _1000 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1050 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1040);
    float _1051 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1040);
    float _1052 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1040);
    float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
    float _1057 = _1050 * _1056;
    float _1058 = _1051 * _1056;
    float _1059 = _1052 * _1056;
    vec4 _1064 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1066 = _1064.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1238 = sqrt(((_1050 * _1050) + (_1051 * _1051)) + (_1052 * _1052));
        float _1244 = (cbMatDynParam._m0[5u].x * _1238) + cbMatDynParam._m0[5u].y;
        float _4099 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1249 = (cbMatDynParam._m0[5u].z * _1238) + cbMatDynParam._m0[5u].w;
        float _4110 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) - _1245)) + _1245) < ((_1066 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1077 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1078 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1096 = fma(_980, cbSceneParam._m0[5u].z, fma(_979, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _978));
    float _1099 = fma(_980, cbSceneParam._m0[6u].z, fma(_979, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _978));
    float _1102 = fma(_980, cbSceneParam._m0[7u].z, fma(_979, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _978));
    uint _1115 = _265 + 9u;
    uint _1116 = _1115 + uint(cbMatDynParam._m0[0u].w);
    float _1122 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_1116].x;
    float _1123 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_1116].y;
    float _1124 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_1116].z;
    float _4121 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1128 = 1.0 - _986;
    float _1129 = _1125 * _1128;
    float _1130 = _1126 * _1128;
    float _1131 = _1127 * _1128;
    float _1136 = (_1125 + (-0.039999999105930328369140625)) * _986;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _986;
    float _1138 = (_1127 + (-0.039999999105930328369140625)) * _986;
    float _1139 = _1136 + 0.039999999105930328369140625;
    float _1141 = _1137 + 0.039999999105930328369140625;
    float _1142 = _1138 + 0.039999999105930328369140625;
    vec4 _1151 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1077, cbSceneParam._m0[86u].y * _1078));
    float _1155 = ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * TEXCOORD_5.w) * _1151.x;
    float _1156 = dot(vec3(_978, _979, _980), vec3(_1057, _1058, _1059));
    float _1159 = _1156 * 2.0;
    float _1163 = (_1159 * _978) - _1057;
    float _1164 = (_1159 * _979) - _1058;
    float _1165 = (_1159 * _980) - _1059;
    float _1169 = abs(dot(vec3(_1057, _1058, _1059), vec3(_978, _979, _980)));
    float _4154 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1171 = sqrt(_981);
    float _1184 = exp2((_1171 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1171 * 3.0));
    float _1190 = (1.0 - _1184) * ((_1171 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1191 = _1184 * _1171;
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1556;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1281 = fma(_1227, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219));
        float _1285 = fma(_1227, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219));
        float _1289 = fma(_1227, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219));
        float _1314 = _1219 + _978;
        float _1315 = _1223 + _979;
        float _1316 = _1227 + _980;
        float _1326 = fma(_1316, cbModelParam._m0[26u].z, fma(_1315, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1314)) - _1281;
        float _1327 = fma(_1316, cbModelParam._m0[27u].z, fma(_1315, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1314)) - _1285;
        float _1328 = fma(_1316, cbModelParam._m0[28u].z, fma(_1315, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1314)) - _1289;
        float _1332 = inversesqrt(dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328)));
        float _1345 = ((_1332 * _1326) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1281 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1332 * _1327) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1285 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1332 * _1328) / cbModelParam._m0[34u].z) + ((((((_1289 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1345, _1346, _1347), 0.0);
        float _1384 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1350.x + (-0.5));
        float _1386 = _1384 * (_1350.y + (-0.5));
        float _1387 = _1384 * (_1350.z + (-0.5));
        float _1394 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1357.x + (-0.5));
        float _1396 = _1394 * (_1357.y + (-0.5));
        float _1397 = _1394 * (_1357.z + (-0.5));
        float _1404 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1364.x + (-0.5));
        float _1406 = _1404 * (_1364.y + (-0.5));
        float _1407 = _1404 * (_1364.z + (-0.5));
        float _1414 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1371.x + (-0.5));
        float _1416 = _1414 * (_1371.y + (-0.5));
        float _1417 = _1414 * (_1371.z + (-0.5));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = _1385 * 0.5;
        float _1422 = _1395 * 0.5;
        float _1423 = _1405 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1438 = (dot(vec3(_978, _979, _980), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1448 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4202 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1450 + 1.0))) + _1455) * _1418;
        float _1465 = _1386 * 0.5;
        float _1466 = _1396 * 0.5;
        float _1467 = _1406 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_978, _979, _980), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4235 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1492 + 1.0))) + _1497) * _1419;
        float _1507 = _1387 * 0.5;
        float _1508 = _1397 * 0.5;
        float _1509 = _1407 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_978, _979, _980), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4268 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1534 + 1.0))) + _1539) * _1420;
        _1556 = _1387;
        _1558 = _1386;
        _1559 = _1385;
        _1560 = _1397;
        _1561 = _1396;
        _1562 = _1395;
        _1563 = _1407;
        _1564 = _1406;
        _1565 = _1405;
        _1566 = _1420;
        _1567 = _1419;
        _1568 = _1418;
        _1569 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1570 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1571 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
    }
    else
    {
        _1556 = _1557;
        _1558 = _1557;
        _1559 = _1557;
        _1560 = _1557;
        _1561 = _1557;
        _1562 = _1557;
        _1563 = _1557;
        _1564 = _1557;
        _1565 = _1557;
        _1566 = _1557;
        _1567 = _1557;
        _1568 = _1557;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1598 = fma(_1227, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219));
        float _1602 = fma(_1227, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219));
        float _1606 = fma(_1227, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219));
        float _1629 = _1219 + _978;
        float _1630 = _1223 + _979;
        float _1631 = _1227 + _980;
        float _1641 = fma(_1631, cbModelParam._m0[30u].z, fma(_1630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1629)) - _1598;
        float _1642 = fma(_1631, cbModelParam._m0[31u].z, fma(_1630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1629)) - _1602;
        float _1643 = fma(_1631, cbModelParam._m0[32u].z, fma(_1630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1629)) - _1606;
        float _1647 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
        float _1660 = ((_1647 * _1641) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1598 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1661 = ((_1647 * _1642) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1602 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1662 = ((_1647 * _1643) / cbModelParam._m0[35u].z) + ((((((_1606 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1678 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        vec4 _1685 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1660, _1661, _1662), 0.0);
        float _1697 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1698 = _1697 * (_1664.x + (-0.5));
        float _1699 = _1697 * (_1664.y + (-0.5));
        float _1700 = _1697 * (_1664.z + (-0.5));
        float _1707 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1671.x + (-0.5));
        float _1709 = _1707 * (_1671.y + (-0.5));
        float _1710 = _1707 * (_1671.z + (-0.5));
        float _1717 = exp2((_1678.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1678.x + (-0.5));
        float _1719 = _1717 * (_1678.y + (-0.5));
        float _1720 = _1717 * (_1678.z + (-0.5));
        float _1727 = exp2((_1685.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1685.x + (-0.5));
        float _1729 = _1727 * (_1685.y + (-0.5));
        float _1730 = _1727 * (_1685.z + (-0.5));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = _1698 * 0.5;
        float _1735 = _1708 * 0.5;
        float _1736 = _1718 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_978, _979, _980), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4331 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1761 + 1.0))) + _1766) * _1731;
        float _1776 = _1699 * 0.5;
        float _1777 = _1709 * 0.5;
        float _1778 = _1719 * 0.5;
        float _1779 = dot(vec3(_1776, _1777, _1778), vec3(_1776, _1777, _1778));
        float _1784 = (_1779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1779);
        float _1792 = (dot(vec3(_978, _979, _980), vec3(_1784 * _1776, _1784 * _1777, _1784 * _1778)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1801 = sqrt(((_1777 * _1777) + (_1776 * _1776)) + (_1778 * _1778)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1803 = _1802 * 2.0;
        float _1807 = (1.0 - _1802) / (_1802 + 1.0);
        float _4364 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1817 = ((((1.0 - _1808) * (_1803 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1803 + 1.0))) + _1808) * _1732;
        float _1818 = _1700 * 0.5;
        float _1819 = _1710 * 0.5;
        float _1820 = _1720 * 0.5;
        float _1821 = dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820));
        float _1826 = (_1821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1821);
        float _1834 = (dot(vec3(_978, _979, _980), vec3(_1826 * _1818, _1826 * _1819, _1826 * _1820)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1845 = _1844 * 2.0;
        float _1849 = (1.0 - _1844) / (_1844 + 1.0);
        float _4397 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1859 = ((((1.0 - _1850) * (_1845 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1845 + 1.0))) + _1850) * _1733;
        _1867 = _1700;
        _1868 = _1699;
        _1869 = _1698;
        _1870 = _1710;
        _1871 = _1709;
        _1872 = _1708;
        _1873 = _1720;
        _1874 = _1719;
        _1875 = _1718;
        _1876 = _1733;
        _1877 = _1732;
        _1878 = _1731;
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0)));
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)));
    }
    else
    {
        _1867 = _1557;
        _1868 = _1557;
        _1869 = _1557;
        _1870 = _1557;
        _1871 = _1557;
        _1872 = _1557;
        _1873 = _1557;
        _1874 = _1557;
        _1875 = _1557;
        _1876 = _1557;
        _1877 = _1557;
        _1878 = _1557;
        _1879 = 0.0;
        _1880 = 0.0;
        _1881 = 0.0;
    }
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1569)) + _1569;
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1570)) + _1570;
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1571)) + _1571;
    float _1914 = fma(_1893, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1891 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1893, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1891 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1893, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1891));
    float _1935 = _1163 * 0.5;
    float _1936 = _1164 * 0.5;
    float _1937 = _1165 * 0.5;
    float _1938 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1941 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1944 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1978;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1951 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1556, _1560, _1563, _1566));
        float _1955 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1558, _1561, _1564, _1567));
        float _1959 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1559, _1562, _1565, _1568));
        float _1966 = dot(vec4(cbModelParam._m0[39u]), vec4(_1935, _1936, _1937, 1.0));
        _1978 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1966) ? 0.0 : (isnan(0.0) ? _1966 : max(0.0, _1966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1978 = 1.0;
    }
    float _1989;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1980 = dot(vec4(cbModelParam._m0[40u]), vec4(_1935, _1936, _1937, 1.0));
        _1989 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1989 = 1.0;
    }
    float _1993 = (_1989 * cbModelParam._m0[1u].x) + (_1978 * (1.0 - cbModelParam._m0[1u].x));
    float _2003 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _981);
    float _2004 = isnan(_2003) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2003 : min(cbModelParam._m0[25u].z, _2003));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2051 = fma(_1227, cbModelParam._m0[13u].z, fma(_1223, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1219)) + cbModelParam._m0[13u].w;
        float _2055 = fma(_1227, cbModelParam._m0[14u].z, fma(_1223, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1219)) + cbModelParam._m0[14u].w;
        float _2059 = fma(_1227, cbModelParam._m0[15u].z, fma(_1223, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1219)) + cbModelParam._m0[15u].w;
        float _2062 = fma(_1165, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163));
        float _2065 = fma(_1165, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163));
        float _2068 = fma(_1165, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163));
        float _2096;
        if (_2062 > 0.0)
        {
            _2096 = abs((1.0 - _2051) / _2062);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2051 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2096 = frontier_phi_17_15_ladder;
        }
        float _2298;
        if (_2065 > 0.0)
        {
            _2298 = abs((1.0 - _2055) / _2065);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2055 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2298 = frontier_phi_26_22_ladder;
        }
        float _2552;
        if (_2068 > 0.0)
        {
            _2552 = abs((1.0 - _2059) / _2068);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2059 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2552 = frontier_phi_38_33_ladder;
        }
        float _2554 = isnan(_2298) ? _2096 : (isnan(_2096) ? _2298 : min(_2096, _2298));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _2062) + _2051;
        float _2560 = (_2555 * _2065) + _2055;
        float _2561 = (_2555 * _2068) + _2059;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2562;
        float _2566 = _2562 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 > _2566) || ((_2560 < _2564) || ((_2559 < _2564) || (_2559 > _2566))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _2004);
            frontier_phi_16_38_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2084 = frontier_phi_16_38_ladder_2;
        _2086 = frontier_phi_16_38_ladder_1;
        _2088 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2072 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1163, _1164, _1165), _2004);
        _2084 = _2072.x * cbModelParam._m0[1u].y;
        _2086 = _2072.y * cbModelParam._m0[1u].y;
        _2088 = _2072.z * cbModelParam._m0[1u].y;
    }
    float _2092 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _981);
    float _2093 = isnan(_2092) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2092 : min(cbModelParam._m0[25u].w, _2092));
    float _2182;
    float _2184;
    float _2186;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2146 = fma(_1227, cbModelParam._m0[21u].z, fma(_1223, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1219)) + cbModelParam._m0[21u].w;
        float _2150 = fma(_1227, cbModelParam._m0[22u].z, fma(_1223, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1219)) + cbModelParam._m0[22u].w;
        float _2154 = fma(_1227, cbModelParam._m0[23u].z, fma(_1223, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1219)) + cbModelParam._m0[23u].w;
        float _2157 = fma(_1165, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163));
        float _2160 = fma(_1165, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163));
        float _2163 = fma(_1165, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163));
        float _2303;
        if (_2157 > 0.0)
        {
            _2303 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2303 = frontier_phi_28_24_ladder;
        }
        float _2579;
        if (_2160 > 0.0)
        {
            _2579 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2579 = frontier_phi_40_35_ladder;
        }
        float _2792;
        if (_2163 > 0.0)
        {
            _2792 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2792 = frontier_phi_49_46_ladder;
        }
        float _2794 = isnan(_2579) ? _2303 : (isnan(_2303) ? _2579 : min(_2303, _2579));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2157) + _2146;
        float _2800 = (_2795 * _2160) + _2150;
        float _2801 = (_2795 * _2163) + _2154;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _2093);
            frontier_phi_25_49_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2182 = frontier_phi_25_49_ladder_2;
        _2184 = frontier_phi_25_49_ladder_1;
        _2186 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2166 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1163, _1164, _1165), _2093);
        _2182 = _2166.x * cbModelParam._m0[1u].z;
        _2184 = _2166.y * cbModelParam._m0[1u].z;
        _2186 = _2166.z * cbModelParam._m0[1u].z;
    }
    float _2199 = (((_1190 * _1139) + _1191) * _1155) * ((cbModelParam._m0[1u].w * (_2182 - _2084)) + _2084);
    float _2201 = (((_1190 * _1141) + _1191) * _1155) * ((cbModelParam._m0[1u].w * (_2184 - _2086)) + _2086);
    float _2203 = (((_1190 * _1142) + _1191) * _1155) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2206 = fma(_2203, cbSceneParam._m0[89u].z, fma(_2201, cbSceneParam._m0[89u].y, _2199 * cbSceneParam._m0[89u].x));
    float _2209 = fma(_2203, cbSceneParam._m0[90u].z, fma(_2201, cbSceneParam._m0[90u].y, _2199 * cbSceneParam._m0[90u].x));
    float _2212 = fma(_2203, cbSceneParam._m0[91u].z, fma(_2201, cbSceneParam._m0[91u].y, _2199 * cbSceneParam._m0[91u].x));
    uvec4 _2222 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2224 = _2222.x * 14u;
    uint _2225 = _2224 + 13u;
    float _2232 = _1155 + (-1.0);
    float _2237 = (cbLight._m0[_2225].x * _2232) + 1.0;
    float _2238 = (cbLight._m0[_2225].y * _2232) + 1.0;
    float _2239 = (cbLight._m0[_2225].z * _2232) + 1.0;
    float _2240 = (cbLight._m0[_2225].w * _2232) + 1.0;
    uint _2241 = _2224 + 5u;
    float _2247 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
    uint _2251 = _2224 + 4u;
    float _2257 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
    uint _2261 = _2224 | 1u;
    float _2272 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_978, _979, _980));
    float _2275 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_978, _979, _980));
    float _4533 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _4544 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2280 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2282 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2289 = ((cbLight._m0[_2241].x * _2247) * _2282) + ((cbLight._m0[_2251].x * _2257) * _2280);
    float _2290 = ((_2247 * cbLight._m0[_2241].y) * _2282) + ((_2257 * cbLight._m0[_2251].y) * _2280);
    float _2291 = ((_2247 * cbLight._m0[_2241].z) * _2282) + ((_2257 * cbLight._m0[_2251].z) * _2280);
    uvec4 _2295 = floatBitsToUint(cbLight._m0[_2224 + 12u]);
    bool _2297 = _2295.x == 0u;
    float _2308;
    float _2310;
    float _2312;
    if (_2297)
    {
        _2308 = _2289;
        _2310 = _2290;
        _2312 = _2291;
    }
    else
    {
        uint _2316 = _2224 + 6u;
        float _2332 = (dot(vec3(cbLight._m0[_2224 + 2u].xyz), vec3(_978, _979, _980)) * 0.5) + 0.5;
        float _2333 = _2332 * _2332;
        float _4555 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2334 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2335 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2308 = (((cbLight._m0[_2316].x * 0.3183098733425140380859375) * _2334) * _2335) + _2289;
        _2310 = (((cbLight._m0[_2316].y * 0.3183098733425140380859375) * _2334) * _2335) + _2290;
        _2312 = (((cbLight._m0[_2316].z * 0.3183098733425140380859375) * _2334) * _2335) + _2291;
    }
    bool _2315 = _2295.y == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2315)
    {
        _2353 = _2308;
        _2355 = _2310;
        _2357 = _2312;
    }
    else
    {
        uint _2523 = _2224 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2224 + 3u].xyz), vec3(_978, _979, _980)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4571 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2542 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2353 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2308;
        _2355 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2310;
        _2357 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2312;
    }
    uint _2360 = _2224 + 8u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _981) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2224].x + _1057;
    float _2376 = cbLight._m0[_2224].y + _1058;
    float _2377 = cbLight._m0[_2224].z + _1059;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2224].xyz));
    float _4587 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _4598 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _2389 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2390 = dot(vec3(_978, _979, _980), vec3(_2382, _2383, _2384));
    float _4609 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2382, _2383, _2384));
    float _4620 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2374 * _2374;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
    float _2411 = 0.959999978542327880859375 - _1136;
    float _2413 = 0.959999978542327880859375 - _1137;
    float _2414 = 0.959999978542327880859375 - _1138;
    float _2421 = 1.0 - _2374;
    float _2432 = (0.5 / (((_2389 * ((_2388 * _2421) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2421) + _2374) * _2388))) * _2388;
    float _4631 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2434 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    uint _2445 = _2224 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _981) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2261].x + _1057;
    float _2459 = cbLight._m0[_2261].y + _1058;
    float _2460 = cbLight._m0[_2261].z + _1059;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2261].xyz));
    float _4642 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2472 = dot(vec3(_978, _979, _980), vec3(_2465, _2466, _2467));
    float _4653 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2465, _2466, _2467));
    float _4664 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
    float _2498 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2389 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2498) + _2457) * _2471))) * _2471;
    float _4675 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2520 = (((((_2491 * _2411) + _1139) * cbLight._m0[_2445].x) * _2510) * _2247) + (((((_2410 * _2411) + _1139) * cbLight._m0[_2360].x) * _2434) * _2257);
    float _2521 = (((((_2491 * _2413) + _1141) * cbLight._m0[_2445].y) * _2510) * _2247) + (((((_2410 * _2413) + _1141) * cbLight._m0[_2360].y) * _2434) * _2257);
    float _2522 = (((((_2491 * _2414) + _1142) * cbLight._m0[_2445].z) * _2510) * _2247) + (((((_2410 * _2414) + _1142) * cbLight._m0[_2360].z) * _2434) * _2257);
    float _2584;
    float _2586;
    float _2588;
    if (_2297)
    {
        _2584 = _2520;
        _2586 = _2521;
        _2588 = _2522;
    }
    else
    {
        uint _2590 = _2224 + 2u;
        uint _2594 = _2224 + 10u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _981) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _1057;
        float _2611 = cbLight._m0[_2590].y + _1058;
        float _2612 = cbLight._m0[_2590].z + _1059;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2590].xyz));
        float _4686 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2624 = dot(vec3(_978, _979, _980), vec3(_2617, _2618, _2619));
        float _4697 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4708 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2389 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2650) + _2609) * _2623))) * _2623;
        float _4719 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
        _2584 = (((((_2643 * _2411) + _1139) * cbLight._m0[_2594].x) * _2662) * _2663) + _2520;
        _2586 = (((((_2643 * _2413) + _1141) * cbLight._m0[_2594].y) * _2662) * _2663) + _2521;
        _2588 = (((((_2643 * _2414) + _1142) * cbLight._m0[_2594].z) * _2662) * _2663) + _2522;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2315)
    {
        _2698 = _2584;
        _2700 = _2586;
        _2702 = _2588;
    }
    else
    {
        uint _2709 = _2224 + 3u;
        uint _2713 = _2224 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _981) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _1057;
        float _2730 = cbLight._m0[_2709].y + _1058;
        float _2731 = cbLight._m0[_2709].z + _1059;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_978, _979, _980), vec3(cbLight._m0[_2709].xyz));
        float _4735 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2743 = dot(vec3(_978, _979, _980), vec3(_2736, _2737, _2738));
        float _4746 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2389 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2769) + _2728) * _2742))) * _2742;
        float _4768 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
        _2698 = (((((_2762 * _2411) + _1139) * cbLight._m0[_2713].x) * _2781) * _2782) + _2584;
        _2700 = (((((_2762 * _2413) + _1141) * cbLight._m0[_2713].y) * _2781) * _2782) + _2586;
        _2702 = (((((_2762 * _2414) + _1142) * cbLight._m0[_2713].z) * _2781) * _2782) + _2588;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2222.y == 0u)
    {
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2857;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2857;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2857;
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1078) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _1077) / _2873)));
        float _2894 = (log2(_2860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            uint _3163 = 0u;
            uint _3172;
            bool _3173;
            for (;;)
            {
                _3172 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                _3173 = _3172 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3173)
                {
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                else
                {
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    uint _3308;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3172;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    for (;;)
                    {
                        uint _3312 = uint(findLSB(_3308)) + (_3163 << 5u);
                        uint _3309 = (_3308 + 4294967295u) & _3308;
                        uint _3314 = _3312 * 48u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3334 = (_3312 * 48u) + 4u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3353 = (_3312 * 48u) + 8u;
                        vec3 _3364 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x));
                        float _3368 = _3328.x - _2858;
                        float _3369 = _3328.y - _2859;
                        float _3370 = _3328.z - _2860;
                        float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                        float _3374 = inversesqrt(_3371);
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3378 = dot(vec3(_1096, _1099, _1102), vec3(_3375, _3376, _3377));
                        float _3383 = 1.0 - (_3371 * _3328.w);
                        float _4794 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3385 = sqrt(_3371) * _3347.w;
                        float _3388 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                        float _3389 = _3388 * _3388;
                        float _3392 = ((1.0 - _3389) * _3378) + _3389;
                        float _3395 = _3385 * _3385;
                        float _3399 = ((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3384) / ((_3395 * 0.699999988079071044921875) + 1.0);
                        float _3403 = (-0.0) - _2858;
                        float _3404 = (-0.0) - _2859;
                        float _3405 = (-0.0) - _2860;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3410 = _3409 * _3403;
                        float _3411 = _3409 * _3404;
                        float _3412 = _3409 * _3405;
                        float _3420 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                        float _3421 = 1.0 - _1171;
                        float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                        float _3429 = _3428 * _3428;
                        float _3430 = _3429 * _3429;
                        float _3431 = _3410 + _3375;
                        float _3432 = _3411 + _3376;
                        float _3433 = _3412 + _3377;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3441 = dot(vec3(_1096, _1099, _1102), vec3(_3410, _3411, _3412));
                        float _4810 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3445 = dot(vec3(_1096, _1099, _1102), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                        float _4821 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                        float _3453 = _3388 * _3429;
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3378) + _3454;
                        float _4832 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3459 = 1.0 - _3429;
                        float _3469 = (0.5 / (((_3458 * ((_3444 * _3459) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3429) * _3444))) * _3458;
                        float _4843 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3480 = (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3452 * _3452) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125))) * _3384;
                        _3232 = (_3399 * _3347.x) + _3305;
                        _3233 = (_3399 * _3347.y) + _3306;
                        _3234 = (_3399 * _3347.z) + _3307;
                        _3229 = (_3480 * _3364.x) + _3302;
                        _3230 = (_3480 * _3364.y) + _3303;
                        _3231 = (_3480 * _3364.z) + _3304;
                        if (_3309 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3309;
                        }
                    }
                    frontier_phi_66_pred = _3229;
                    frontier_phi_66_pred_1 = _3234;
                    frontier_phi_66_pred_2 = _3233;
                    frontier_phi_66_pred_3 = _3232;
                    frontier_phi_66_pred_4 = _3231;
                    frontier_phi_66_pred_5 = _3230;
                }
                _3006 = frontier_phi_66_pred;
                _3016 = frontier_phi_66_pred_1;
                _3014 = frontier_phi_66_pred_2;
                _3012 = frontier_phi_66_pred_3;
                _3010 = frontier_phi_66_pred_4;
                _3008 = frontier_phi_66_pred_5;
                uint _3164 = _3163 + 1u;
                if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3157 = _3006;
                    _3158 = _3008;
                    _3159 = _3010;
                    _3160 = _3012;
                    _3161 = _3014;
                    _3162 = _3016;
                    _3163 = _3164;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((4294967295u << _3022) & _2904) == 0u)
        {
            _3125 = _3005;
            _3127 = _3007;
            _3129 = _3009;
            _3131 = _3011;
            _3133 = _3013;
            _3135 = _3015;
        }
        else
        {
            float _3150 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
            float _3151 = _3150 * _2858;
            float _3152 = _3150 * _2859;
            float _3153 = _3150 * _2860;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3285 = _3005;
                float _3286 = _3007;
                float _3287 = _3009;
                float _3288 = _3011;
                float _3289 = _3013;
                float _3290 = _3015;
                uint _3291 = _3022;
                uint _3300;
                bool _3301;
                for (;;)
                {
                    _3300 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                    _3301 = _3300 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3301)
                    {
                        frontier_phi_77_pred = _3290;
                        frontier_phi_77_pred_1 = _3289;
                        frontier_phi_77_pred_2 = _3288;
                        frontier_phi_77_pred_3 = _3287;
                        frontier_phi_77_pred_4 = _3286;
                        frontier_phi_77_pred_5 = _3285;
                    }
                    else
                    {
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        uint _3513 = _3300;
                        uint _3514;
                        vec4 _3539;
                        float _3540;
                        vec4 _3555;
                        vec3 _3567;
                        vec4 _3582;
                        vec4 _3597;
                        float _3643;
                        bool _3644;
                        for (;;)
                        {
                            uint _3524 = ((_3291 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3513));
                            _3514 = (_3513 + 4294967295u) & _3513;
                            uint _3526 = _3524 * 40u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3540 = _3539.w;
                            uint _3542 = (_3524 * 40u) + 4u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3524 * 40u) + 8u;
                            _3567 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x));
                            uint _3569 = (_3524 * 40u) + 16u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3524 * 40u) + 20u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3524 * 40u) + 24u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3618 = (_3524 * 40u) + 28u;
                            vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3643 = fma(_2860, _3631.z, fma(_2859, _3631.y, _3631.x * _2858)) + _3631.w;
                            _3644 = !((fma(_2860, _3612.z, fma(_2859, _3612.y, _3612.x * _2858)) + _3612.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3644)
                            {
                                float _3671 = _3539.x - _2858;
                                float _3672 = _3539.y - _2859;
                                float _3673 = _3539.z - _2860;
                                float _3674 = dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673));
                                float _3677 = inversesqrt(_3674);
                                float _3678 = _3677 * _3671;
                                float _3679 = _3677 * _3672;
                                float _3680 = _3677 * _3673;
                                float _3684 = 1.0 - (_3674 / (_3540 * _3540));
                                float _4854 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3689 = sqrt(_3674) * _3555.w;
                                float _3691 = 1.39999997615814208984375 / (_3689 + 1.39999997615814208984375);
                                float _3692 = _3691 * _3691;
                                float _3695 = ((1.0 - _3692) * dot(vec3(_3678, _3679, _3680), vec3(_1096, _1099, _1102))) + _3692;
                                float _3698 = _3689 * _3689;
                                float _3702 = (fma(_2860, _3582.z, fma(_2859, _3582.y, _3582.x * _2858)) + _3582.w) / _3643;
                                float _3703 = (fma(_2860, _3597.z, fma(_2859, _3597.y, _3597.x * _2858)) + _3597.w) / _3643;
                                float _3707 = 1.0 - dot(vec2(_3702, _3703), vec2(_3702, _3703));
                                float _4870 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3709 = _3708 * (((isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0))) * _3685) / ((_3698 * 0.699999988079071044921875) + 1.0));
                                float _3721 = exp2(log2(1.0 / ((_3698 * 3.5) + 5.0)) * 0.25);
                                float _3722 = 1.0 - _1171;
                                float _3729 = sqrt(1.0 - ((1.0 - (_3722 * _3722)) * (1.0 - (_3721 * _3721))));
                                float _3730 = _3729 * _3729;
                                float _3731 = _3730 * _3730;
                                float _3732 = _3678 - _3151;
                                float _3733 = _3679 - _3152;
                                float _3734 = _3680 - _3153;
                                float _3738 = inversesqrt(dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734)));
                                float _3742 = dot(vec3(_1096, _1099, _1102), vec3((-0.0) - _3151, (-0.0) - _3152, (-0.0) - _3153));
                                float _4881 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3746 = dot(vec3(_1096, _1099, _1102), vec3(_3738 * _3732, _3738 * _3733, _3738 * _3734));
                                float _4892 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3749 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3753 = ((_3749 * _3749) * (_3731 + (-1.0))) + 1.0;
                                float _3754 = _3691 * _3730;
                                float _3755 = _3754 * _3754;
                                float _3761 = ((1.0 - _3755) * dot(vec3(_1096, _1099, _1102), vec3(_3678, _3679, _3680))) + _3755;
                                float _4903 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3763 = 1.0 - _3730;
                                float _3773 = (0.5 / (((_3762 * ((_3745 * _3763) + _3730)) + 9.9999999392252902907785028219223e-09) + (((_3762 * _3763) + _3730) * _3745))) * _3762;
                                float _4914 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3783 = (_3708 * _3685) * (((_3731 * 3.1415927410125732421875) * (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) / ((_3753 * _3753) * ((_3698 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3709 * _3555.y;
                                frontier_phi_83_pred_1 = _3709 * _3555.x;
                                frontier_phi_83_pred_2 = _3783 * _3567.z;
                                frontier_phi_83_pred_3 = _3783 * _3567.y;
                                frontier_phi_83_pred_4 = _3783 * _3567.x;
                                frontier_phi_83_pred_5 = _3709 * _3555.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3791 = frontier_phi_83_pred;
                            _3790 = frontier_phi_83_pred_1;
                            _3789 = frontier_phi_83_pred_2;
                            _3788 = frontier_phi_83_pred_3;
                            _3787 = frontier_phi_83_pred_4;
                            _3792 = frontier_phi_83_pred_5;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            if (_3514 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3514;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3499;
                        frontier_phi_77_pred_1 = _3498;
                        frontier_phi_77_pred_2 = _3497;
                        frontier_phi_77_pred_3 = _3496;
                        frontier_phi_77_pred_4 = _3495;
                        frontier_phi_77_pred_5 = _3494;
                    }
                    _3136 = frontier_phi_77_pred;
                    _3134 = frontier_phi_77_pred_1;
                    _3132 = frontier_phi_77_pred_2;
                    _3130 = frontier_phi_77_pred_3;
                    _3128 = frontier_phi_77_pred_4;
                    _3126 = frontier_phi_77_pred_5;
                    uint _3292 = _3291 + 1u;
                    if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3285 = _3126;
                        _3286 = _3128;
                        _3287 = _3130;
                        _3288 = _3132;
                        _3289 = _3134;
                        _3290 = _3136;
                        _3291 = _3292;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3130;
                frontier_phi_58_59_ladder_1 = _3136;
                frontier_phi_58_59_ladder_2 = _3134;
                frontier_phi_58_59_ladder_3 = _3132;
                frontier_phi_58_59_ladder_4 = _3128;
                frontier_phi_58_59_ladder_5 = _3126;
            }
            else
            {
                frontier_phi_58_59_ladder = _3009;
                frontier_phi_58_59_ladder_1 = _3015;
                frontier_phi_58_59_ladder_2 = _3013;
                frontier_phi_58_59_ladder_3 = _3011;
                frontier_phi_58_59_ladder_4 = _3007;
                frontier_phi_58_59_ladder_5 = _3005;
            }
            _3125 = frontier_phi_58_59_ladder_5;
            _3127 = frontier_phi_58_59_ladder_4;
            _3129 = frontier_phi_58_59_ladder;
            _3131 = frontier_phi_58_59_ladder_3;
            _3133 = frontier_phi_58_59_ladder_2;
            _3135 = frontier_phi_58_59_ladder_1;
        }
        float _3140 = isnan(1.0) ? _1155 : (isnan(_1155) ? 1.0 : min(_1155, 1.0));
        _2917 = (_3140 * _3131) + _2353;
        _2919 = (_3140 * _3133) + _2355;
        _2921 = (_3140 * _3135) + _2357;
        _2923 = ((_3125 * _1139) * _3140) + _2698;
        _2925 = ((_3127 * _1141) * _3140) + _2700;
        _2927 = ((_3129 * _1142) * _3140) + _2702;
    }
    else
    {
        _2917 = _2353;
        _2919 = _2355;
        _2921 = _2357;
        _2923 = _2698;
        _2925 = _2700;
        _2927 = _2702;
    }
    float _4930 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _4941 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _4952 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2944 = ((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2917 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1155))) + ((_2923 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1993)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2919 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1155))) + ((_2925 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1993)) * cbPerFrame._m0[3u].x);
    float _2946 = ((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2921 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1155))) + ((_2927 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1993)) * cbPerFrame._m0[3u].x);
    uint _2947 = _265 + 6u;
    float _2955 = _1077 / cbSceneParam._m0[86u].x;
    float _2956 = _1078 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _1000 : (isnan(_1000) ? cbSceneParam._m0[77u].w : min(_1000, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_1000 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_1000) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1000 : min(cbSceneParam._m0[80u].w, _1000));
        float _3031 = _3030 / _1000;
        float _3042 = _3031 * _1050;
        float _3043 = _1051 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3045 = _3031 * _1052;
        float _3047 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3048 = _3047 + cbSceneParam._m0[79u].w;
        float _3049 = cbSceneParam._m0[79u].w - _3043;
        float _3055 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3045 * _3045));
        float _3058 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3055;
        float _3063 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3065 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3242;
        if (abs((_3044 - _3047) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3242 = ((((_3048 > 0.0) ? exp2(_3063 * _3048) : (2.0 - exp2(_3065 * _3048))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3058;
        }
        else
        {
            float _3186 = 1.0 / cbSceneParam._m0[80u].x;
            float _3187 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : max(_3048, _3049));
            float _3188 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : min(_3048, _3049));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            _3242 = ((abs(_3055 / _3044) * cbSceneParam._m0[80u].y) * ((((_3197 - _3198) * 2.0) - ((exp2(_3063 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0)))) - exp2(_3063 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))))) * _3186)) - ((exp2(_3065 * _3197) - exp2(_3065 * _3198)) * _3186))) + (_3058 * cbSceneParam._m0[80u].z);
        }
        vec4 _3244 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3253 = exp2((_3242 * (-1.44269502162933349609375)) * (1.0 - _3244.w));
        float _3254 = log2(_3253);
        float _3270 = log2(_2975);
        _3067 = (exp2(_3270 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].x)) * _3244.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3069 = (exp2(_3270 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].y)) * _3244.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3071 = (exp2(_3270 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].z)) * _3244.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3073 = _3253 * _2975;
    }
    else
    {
        _3067 = _2972;
        _3069 = _2973;
        _3071 = _2974;
        _3073 = _2975;
    }
    bool _3280;
    vec4 _3083;
    vec4 _3105;
    float _3107;
    float _3111;
    float _3112;
    float _3113;
    float _3114;
    bool _3124;
    for (;;)
    {
        _3083 = cbMatDynParam._m0[0u];
        float _3085 = roundEven(_3083.y);
        bool _3086 = _3085 == 3.0;
        float _3087 = log2(_3073);
        float _3094 = exp2(_3087 * cbSceneParam._m0[78u].x) * _2944;
        float _3095 = exp2(_3087 * cbSceneParam._m0[78u].y) * _2945;
        float _3096 = exp2(_3087 * cbSceneParam._m0[78u].z) * _2946;
        float _3103 = _1066 + (-0.5);
        _3105 = cbMtdParam._m0[1u];
        _3107 = _3105.y * _3103;
        float _3110 = (_3085 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3111 = _3110 * (_3086 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3067)));
        _3112 = _3110 * (_3086 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3069)));
        _3113 = _3110 * (_3086 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3071)));
        _3114 = _3103 * 0.999000012874603271484375;
        _3124 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3124)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3114) < 0.5)
            {
                _3280 = true;
                break;
            }
        }
        uint _3221 = _1115 + uint(_3083.w);
        if ((cbInstanceData._m0[_3221].w < 1.0) && ((cbInstanceData._m0[_3221].w + _3114) < 0.5))
        {
            _3280 = true;
            break;
        }
        if ((_3107 + 1.0) < _3105.x)
        {
            _3280 = true;
            break;
        }
        _3280 = false;
        break;
    }
    float _3485;
    if (_3280)
    {
        discard_state = true;
        _3485 = 0.0;
    }
    else
    {
        _3485 = cbInstanceData._m0[_2947].w;
    }
    SV_Target.x = _3111;
    SV_Target.y = _3112;
    SV_Target.z = _3113;
    SV_Target.w = _3485;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
    discard_exit();
}


