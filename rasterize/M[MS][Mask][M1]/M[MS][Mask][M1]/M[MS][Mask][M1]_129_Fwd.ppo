#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1727;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _259 = _258 * _250;
    float _260 = _258 * _251;
    float _261 = _258 * _252;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4050 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4061 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4072 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _384 = _379.x * cbMtdParam._m0[11u].x;
    float _385 = _379.y * cbMtdParam._m0[11u].y;
    float _386 = _379.z * cbMtdParam._m0[11u].z;
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _473 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _490 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _424.x) * 2.0) - ((((_461 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4083 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _498 = (_491 * ((_405.x * cbMtdParam._m0[12u].x) - _384)) + _384;
    float _499 = (_491 * ((_405.y * cbMtdParam._m0[12u].y) - _385)) + _385;
    float _500 = (_491 * ((_405.z * cbMtdParam._m0[12u].z) - _386)) + _386;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _539 = _537.x;
    float _549 = dot(vec4(_539, _537.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _563 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _424.y) * 2.0) - ((((_539 - _549) * cbMtdParam._m0[23u].w) + _549) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4094 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _571 = (_564 * ((_517.x * cbMtdParam._m0[13u].x) - _498)) + _498;
    float _572 = (_564 * ((_517.y * cbMtdParam._m0[13u].y) - _499)) + _499;
    float _573 = (_564 * ((_517.z * cbMtdParam._m0[13u].z) - _500)) + _500;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _609 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _611 = _609.x;
    float _621 = dot(vec4(_611, _609.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _633 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _424.z) * 2.0) - ((((_611 - _621) * cbMtdParam._m0[23u].w) + _621) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4105 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _644 = (_353.x * cbMtdParam._m0[9u].x) * ((_634 * ((_592.x * cbMtdParam._m0[14u].x) - _571)) + _571);
    float _645 = (_353.y * cbMtdParam._m0[9u].y) * ((_634 * ((_592.y * cbMtdParam._m0[14u].y) - _572)) + _572);
    float _646 = (_353.z * cbMtdParam._m0[9u].z) * ((_634 * ((_592.z * cbMtdParam._m0[14u].z) - _573)) + _573);
    float _650 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _644;
    float _653 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _645;
    float _656 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _646;
    float _664 = (((_644 - _650) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) + _650) * 4.55000019073486328125;
    float _666 = (((_645 - _653) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) + _653) * 4.55000019073486328125;
    float _668 = (((_646 - _656) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) + _656) * 4.55000019073486328125;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _731 = _727.z;
    float _738 = ((_710.x - _729) * _491) + _729;
    float _739 = ((_710.y - _730) * _491) + _730;
    float _740 = ((_710.z - _731) * _491) + _731;
    vec4 _752 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _763 = ((_752.x - _738) * _564) + _738;
    float _764 = ((_752.y - _739) * _564) + _739;
    float _765 = ((_752.z - _740) * _564) + _740;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _790 = ((_777.z - _765) * _634) + _765;
    float _793 = ((((_777.x - _763) * _634) + _763) * 2.0) + (-1.0);
    float _794 = ((((_777.y - _764) * _634) + _764) * 2.0) + (-1.0);
    float _795 = dot(vec2(_793, _794), vec2(_793, _794));
    float _4116 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _800 = sqrt(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))));
    vec4 _818 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _830 = (_793 + ((((_685.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_818.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _831 = (_794 + ((((_685.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_818.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _834 = fma(_800, _266, fma(_831, _273, _830 * _259));
    float _837 = fma(_800, _267, fma(_831, _274, _830 * _260));
    float _840 = fma(_800, _268, fma(_831, _275, _830 * _261));
    float _844 = inversesqrt(dot(vec3(_834, _837, _840), vec3(_834, _837, _840)));
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _873 = _871.x;
    float _874 = 1.0 - _873;
    float _882 = (cbMtdParam._m0[19u].x + dot(vec4(_844 * _834, _844 * _837, _844 * _840, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_873 - _874) * cbMtdParam._m0[24u].z) + _874) * cbMtdParam._m0[21u].z);
    float _4127 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _883 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _885 = (-0.0) - cbMtdParam._m0[24u].x;
    float _887 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _887 : (isnan(_887) ? 1.0 : min(_887, 1.0));
    float _895 = _883 - ((_883 * TEXCOORD_8.x) * _888);
    float _896 = _883 - ((_883 * TEXCOORD_8.y) * _888);
    float _897 = _883 - ((_883 * TEXCOORD_8.z) * _888);
    float _904 = (_895 * (cbMtdParam._m0[17u].x - _664)) + _664;
    float _905 = (_896 * (cbMtdParam._m0[17u].y - _666)) + _666;
    float _906 = (_897 * (cbMtdParam._m0[17u].z - _668)) + _668;
    float _921 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _922 = _921 * TEXCOORD.z;
    float _923 = _921 * TEXCOORD.w;
    vec4 _935 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _922) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _923) + cbTextureTilingScale._m0[19u].w));
    float _937 = _935.x;
    float _938 = 1.0 - _937;
    float _964 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_937 - _938) * cbMtdParam._m0[24u].w) + _938) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4148 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _965 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _973 = ((((cbMtdParam._m0[10u].x - _904) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _965) + _904;
    float _974 = ((((cbMtdParam._m0[10u].y - _905) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _965) + _905;
    float _975 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _906)) * _965) + _906;
    vec4 _1001 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _1003 = _1001.x;
    float _1020 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _1003) * _491) + _1003;
    float _1037 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _1020) * _564) + _1020;
    float _1054 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _316) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _317) + cbTextureTilingScale._m0[10u].w)).x - _1037) * _634) + _1037;
    float _1060 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1054) * cbMtdParam._m0[19u].z) + _1054;
    float _1062 = _1060 - (_1060 * _895);
    float _1064 = _1062 - (_1062 * _965);
    float _1069 = (((_685.z - _790) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _790;
    float _1073 = ((_818.z - _1069) * cbMtdParam._m0[19u].w) + _1069;
    vec4 _1089 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _1096 = (_1089.x * 2.0) + (-1.0);
    float _1097 = (_1089.y * 2.0) + (-1.0);
    float _1098 = dot(vec2(_1096, _1097), vec2(_1096, _1097));
    float _4159 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1106 = ((_1089.z - _1073) * _895) + _1073;
    float _1109 = ((cbMtdParam._m0[23u].x - _1106) * _965) + _1106;
    vec4 _1132 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _922) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _923) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1138 = (_1132.x * 2.0) + (-1.0);
    float _1139 = (_1132.y * 2.0) + (-1.0);
    float _1140 = dot(vec2(_1138, _1139), vec2(_1138, _1139));
    float _4170 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1155 = ((sqrt(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) - _800) * _897) + _800;
    float _1158 = (((_1096 - _830) * _895) + _830) + (cbMtdParam._m0[21u].x * _830);
    float _1159 = (((_1097 - _831) * _896) + _831) + (cbMtdParam._m0[21u].x * _831);
    float _1170 = (((_1138 - _1158) + (_1158 * cbMtdParam._m0[22u].z)) * _965) + _1158;
    float _1171 = (((_1139 - _1159) + (_1159 * cbMtdParam._m0[22u].z)) * _965) + _1159;
    float _1172 = (_965 * (sqrt(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) - _1155)) + _1155;
    float _1174 = cbMtdParam._m0[22u].x + _818.w;
    float _1177 = fma(_1172, _266, fma(_1171, _273, _1170 * _259));
    float _1180 = fma(_1172, _267, fma(_1171, _274, _1170 * _260));
    float _1183 = fma(_1172, _268, fma(_1171, _275, _1170 * _261));
    float _1187 = inversesqrt(dot(vec3(_1177, _1180, _1183), vec3(_1177, _1180, _1183)));
    float _1188 = _1187 * _1177;
    float _1189 = _1187 * _1180;
    float _1190 = _1187 * _1183;
    float _4181 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1191 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _4203 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _4214 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _4225 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4236 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1196 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _1210 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1260 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1250);
    float _1261 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1250);
    float _1262 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1250);
    float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
    float _1267 = _1260 * _1266;
    float _1268 = _1261 * _1266;
    float _1269 = _1262 * _1266;
    float _1275 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1276 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1294 = fma(_1190, cbSceneParam._m0[5u].z, fma(_1189, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1188));
    float _1297 = fma(_1190, cbSceneParam._m0[6u].z, fma(_1189, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1188));
    float _1300 = fma(_1190, cbSceneParam._m0[7u].z, fma(_1189, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1188));
    uint _1314 = (_297 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1320 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_1314].x;
    float _1321 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_1314].y;
    float _1322 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_1314].z;
    float _4247 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _1323 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1324 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _1325 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _1326 = 1.0 - _1196;
    float _1327 = _1323 * _1326;
    float _1328 = _1324 * _1326;
    float _1329 = _1325 * _1326;
    float _1334 = (_1323 + (-0.039999999105930328369140625)) * _1196;
    float _1335 = (_1324 + (-0.039999999105930328369140625)) * _1196;
    float _1336 = (_1325 + (-0.039999999105930328369140625)) * _1196;
    float _1337 = _1334 + 0.039999999105930328369140625;
    float _1339 = _1335 + 0.039999999105930328369140625;
    float _1340 = _1336 + 0.039999999105930328369140625;
    vec4 _1349 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1275, cbSceneParam._m0[86u].y * _1276));
    float _1353 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * TEXCOORD_5.w) * _1349.x;
    float _1354 = dot(vec3(_1188, _1189, _1190), vec3(_1267, _1268, _1269));
    float _1357 = _1354 * 2.0;
    float _1361 = (_1357 * _1188) - _1267;
    float _1362 = (_1357 * _1189) - _1268;
    float _1363 = (_1357 * _1190) - _1269;
    float _1367 = abs(dot(vec3(_1267, _1268, _1269), vec3(_1188, _1189, _1190)));
    float _4280 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
    float _1369 = sqrt(_1191);
    float _1382 = exp2((_1369 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1369 * 3.0));
    float _1388 = (1.0 - _1382) * ((_1369 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1389 = _1382 * _1369;
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1726;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1451 = fma(_1425, cbModelParam._m0[26u].z, fma(_1421, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1417));
        float _1455 = fma(_1425, cbModelParam._m0[27u].z, fma(_1421, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1417));
        float _1459 = fma(_1425, cbModelParam._m0[28u].z, fma(_1421, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1417));
        float _1484 = _1417 + _1188;
        float _1485 = _1421 + _1189;
        float _1486 = _1425 + _1190;
        float _1496 = fma(_1486, cbModelParam._m0[26u].z, fma(_1485, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1484)) - _1451;
        float _1497 = fma(_1486, cbModelParam._m0[27u].z, fma(_1485, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1484)) - _1455;
        float _1498 = fma(_1486, cbModelParam._m0[28u].z, fma(_1485, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1484)) - _1459;
        float _1502 = inversesqrt(dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498)));
        float _1515 = ((_1502 * _1496) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1451 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1516 = ((_1502 * _1497) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1455 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1517 = ((_1502 * _1498) / cbModelParam._m0[34u].z) + ((((((_1459 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1515, _1516, _1517), 0.0);
        float _1554 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1520.x + (-0.5));
        float _1556 = _1554 * (_1520.y + (-0.5));
        float _1557 = _1554 * (_1520.z + (-0.5));
        float _1564 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1527.x + (-0.5));
        float _1566 = _1564 * (_1527.y + (-0.5));
        float _1567 = _1564 * (_1527.z + (-0.5));
        float _1574 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1534.x + (-0.5));
        float _1576 = _1574 * (_1534.y + (-0.5));
        float _1577 = _1574 * (_1534.z + (-0.5));
        float _1584 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1541.x + (-0.5));
        float _1586 = _1584 * (_1541.y + (-0.5));
        float _1587 = _1584 * (_1541.z + (-0.5));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = _1555 * 0.5;
        float _1592 = _1565 * 0.5;
        float _1593 = _1575 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1608 = (dot(vec3(_1188, _1189, _1190), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1618 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4328 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1620 + 1.0))) + _1625) * _1588;
        float _1635 = _1556 * 0.5;
        float _1636 = _1566 * 0.5;
        float _1637 = _1576 * 0.5;
        float _1638 = dot(vec3(_1635, _1636, _1637), vec3(_1635, _1636, _1637));
        float _1643 = (_1638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1638);
        float _1651 = (dot(vec3(_1188, _1189, _1190), vec3(_1643 * _1635, _1643 * _1636, _1643 * _1637)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1660 = sqrt(((_1636 * _1636) + (_1635 * _1635)) + (_1637 * _1637)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1662 = _1661 * 2.0;
        float _1666 = (1.0 - _1661) / (_1661 + 1.0);
        float _4361 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1676 = ((((1.0 - _1667) * (_1662 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1662 + 1.0))) + _1667) * _1589;
        float _1677 = _1557 * 0.5;
        float _1678 = _1567 * 0.5;
        float _1679 = _1577 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_1188, _1189, _1190), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4394 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1704 + 1.0))) + _1709) * _1590;
        _1726 = _1557;
        _1728 = _1556;
        _1729 = _1555;
        _1730 = _1567;
        _1731 = _1566;
        _1732 = _1565;
        _1733 = _1577;
        _1734 = _1576;
        _1735 = _1575;
        _1736 = _1590;
        _1737 = _1589;
        _1738 = _1588;
        _1739 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
        _1740 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
        _1741 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
    }
    else
    {
        _1726 = _1727;
        _1728 = _1727;
        _1729 = _1727;
        _1730 = _1727;
        _1731 = _1727;
        _1732 = _1727;
        _1733 = _1727;
        _1734 = _1727;
        _1735 = _1727;
        _1736 = _1727;
        _1737 = _1727;
        _1738 = _1727;
        _1739 = 0.0;
        _1740 = 0.0;
        _1741 = 0.0;
    }
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    float _2042;
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    float _2047;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1764 = fma(_1425, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417));
        float _1768 = fma(_1425, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417));
        float _1772 = fma(_1425, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417));
        float _1795 = _1417 + _1188;
        float _1796 = _1421 + _1189;
        float _1797 = _1425 + _1190;
        float _1807 = fma(_1797, cbModelParam._m0[30u].z, fma(_1796, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1795)) - _1764;
        float _1808 = fma(_1797, cbModelParam._m0[31u].z, fma(_1796, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1795)) - _1768;
        float _1809 = fma(_1797, cbModelParam._m0[32u].z, fma(_1796, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1795)) - _1772;
        float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
        float _1826 = ((_1813 * _1807) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1764 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1827 = ((_1813 * _1808) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1768 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1828 = ((_1813 * _1809) / cbModelParam._m0[35u].z) + ((((((_1772 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1830 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1826, _1827, _1828), 0.0);
        vec4 _1837 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1826, _1827, _1828), 0.0);
        vec4 _1844 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1826, _1827, _1828), 0.0);
        vec4 _1851 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1826, _1827, _1828), 0.0);
        float _1863 = exp2((_1830.w + (-0.5)) * 20.0) * 2.0;
        float _1864 = _1863 * (_1830.x + (-0.5));
        float _1865 = _1863 * (_1830.y + (-0.5));
        float _1866 = _1863 * (_1830.z + (-0.5));
        float _1873 = exp2((_1837.w + (-0.5)) * 20.0) * 2.0;
        float _1874 = _1873 * (_1837.x + (-0.5));
        float _1875 = _1873 * (_1837.y + (-0.5));
        float _1876 = _1873 * (_1837.z + (-0.5));
        float _1883 = exp2((_1844.w + (-0.5)) * 20.0) * 2.0;
        float _1884 = _1883 * (_1844.x + (-0.5));
        float _1885 = _1883 * (_1844.y + (-0.5));
        float _1886 = _1883 * (_1844.z + (-0.5));
        float _1893 = exp2((_1851.w + (-0.5)) * 20.0) * 2.0;
        float _1894 = _1893 * (_1851.x + (-0.5));
        float _1895 = _1893 * (_1851.y + (-0.5));
        float _1896 = _1893 * (_1851.z + (-0.5));
        float _1897 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1898 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1899 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1900 = _1864 * 0.5;
        float _1901 = _1874 * 0.5;
        float _1902 = _1884 * 0.5;
        float _1903 = dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902));
        float _1908 = (_1903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1903);
        float _1916 = (dot(vec3(_1188, _1189, _1190), vec3(_1908 * _1900, _1908 * _1901, _1908 * _1902)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1925 = sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902)) / (_1897 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1927 = _1926 * 2.0;
        float _1931 = (1.0 - _1926) / (_1926 + 1.0);
        float _4457 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1941 = ((((1.0 - _1932) * (_1927 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1927 + 1.0))) + _1932) * _1897;
        float _1942 = _1865 * 0.5;
        float _1943 = _1875 * 0.5;
        float _1944 = _1885 * 0.5;
        float _1945 = dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944));
        float _1950 = (_1945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1945);
        float _1958 = (dot(vec3(_1188, _1189, _1190), vec3(_1950 * _1942, _1950 * _1943, _1950 * _1944)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1967 = sqrt(((_1943 * _1943) + (_1942 * _1942)) + (_1944 * _1944)) / (_1898 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1969 = _1968 * 2.0;
        float _1973 = (1.0 - _1968) / (_1968 + 1.0);
        float _4490 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1974 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1983 = ((((1.0 - _1974) * (_1969 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1969 + 1.0))) + _1974) * _1898;
        float _1984 = _1866 * 0.5;
        float _1985 = _1876 * 0.5;
        float _1986 = _1886 * 0.5;
        float _1987 = dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986));
        float _1992 = (_1987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1987);
        float _2000 = (dot(vec3(_1188, _1189, _1190), vec3(_1992 * _1984, _1992 * _1985, _1992 * _1986)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        float _2009 = sqrt(((_1985 * _1985) + (_1984 * _1984)) + (_1986 * _1986)) / (_1899 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2011 = _2010 * 2.0;
        float _2015 = (1.0 - _2010) / (_2010 + 1.0);
        float _4523 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2025 = ((((1.0 - _2016) * (_2011 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2011 + 1.0))) + _2016) * _1899;
        _2033 = _1866;
        _2034 = _1865;
        _2035 = _1864;
        _2036 = _1876;
        _2037 = _1875;
        _2038 = _1874;
        _2039 = _1886;
        _2040 = _1885;
        _2041 = _1884;
        _2042 = _1899;
        _2043 = _1898;
        _2044 = _1897;
        _2045 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)));
        _2046 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0)));
        _2047 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)));
    }
    else
    {
        _2033 = _1727;
        _2034 = _1727;
        _2035 = _1727;
        _2036 = _1727;
        _2037 = _1727;
        _2038 = _1727;
        _2039 = _1727;
        _2040 = _1727;
        _2041 = _1727;
        _2042 = _1727;
        _2043 = _1727;
        _2044 = _1727;
        _2045 = 0.0;
        _2046 = 0.0;
        _2047 = 0.0;
    }
    float _2057 = (cbModelParam._m0[1u].x * (_2045 - _1739)) + _1739;
    float _2058 = (cbModelParam._m0[1u].x * (_2046 - _1740)) + _1740;
    float _2059 = (cbModelParam._m0[1u].x * (_2047 - _1741)) + _1741;
    float _2080 = fma(_2059, cbSceneParam._m0[89u].z, fma(_2058, cbSceneParam._m0[89u].y, _2057 * cbSceneParam._m0[89u].x));
    float _2083 = fma(_2059, cbSceneParam._m0[90u].z, fma(_2058, cbSceneParam._m0[90u].y, _2057 * cbSceneParam._m0[90u].x));
    float _2086 = fma(_2059, cbSceneParam._m0[91u].z, fma(_2058, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2057));
    float _2101 = _1361 * 0.5;
    float _2102 = _1362 * 0.5;
    float _2103 = _1363 * 0.5;
    float _2104 = dot(vec4(_2101, _2102, _2103, 1.0), vec4(_2035, _2038, _2041, _2044));
    float _2107 = dot(vec4(_2101, _2102, _2103, 1.0), vec4(_2034, _2037, _2040, _2043));
    float _2110 = dot(vec4(_2101, _2102, _2103, 1.0), vec4(_2033, _2036, _2039, _2042));
    float _2144;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2117 = dot(vec4(_2101, _2102, _2103, 1.0), vec4(_1726, _1730, _1733, _1736));
        float _2121 = dot(vec4(_2101, _2102, _2103, 1.0), vec4(_1728, _1731, _1734, _1737));
        float _2125 = dot(vec4(_2101, _2102, _2103, 1.0), vec4(_1729, _1732, _1735, _1738));
        float _2132 = dot(vec4(cbModelParam._m0[39u]), vec4(_2101, _2102, _2103, 1.0));
        _2144 = dot(vec3(isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0)), isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0)), isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2132) ? 0.0 : (isnan(0.0) ? _2132 : max(0.0, _2132))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2144 = 1.0;
    }
    float _2155;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2146 = dot(vec4(cbModelParam._m0[40u]), vec4(_2101, _2102, _2103, 1.0));
        _2155 = dot(vec3(isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)), isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0)), isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2146) ? 0.0 : (isnan(0.0) ? _2146 : max(0.0, _2146))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2155 = 1.0;
    }
    float _2159 = (_2155 * cbModelParam._m0[1u].x) + (_2144 * (1.0 - cbModelParam._m0[1u].x));
    float _2169 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1191);
    float _2170 = isnan(_2169) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2169 : min(cbModelParam._m0[25u].z, _2169));
    float _2250;
    float _2252;
    float _2254;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2217 = fma(_1425, cbModelParam._m0[13u].z, fma(_1421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1417)) + cbModelParam._m0[13u].w;
        float _2221 = fma(_1425, cbModelParam._m0[14u].z, fma(_1421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1417)) + cbModelParam._m0[14u].w;
        float _2225 = fma(_1425, cbModelParam._m0[15u].z, fma(_1421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1417)) + cbModelParam._m0[15u].w;
        float _2228 = fma(_1363, cbModelParam._m0[13u].z, fma(_1362, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1361));
        float _2231 = fma(_1363, cbModelParam._m0[14u].z, fma(_1362, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1361));
        float _2234 = fma(_1363, cbModelParam._m0[15u].z, fma(_1362, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1361));
        float _2262;
        if (_2228 > 0.0)
        {
            _2262 = abs((1.0 - _2217) / _2228);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2217 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2262 = frontier_phi_14_12_ladder;
        }
        float _2465;
        if (_2231 > 0.0)
        {
            _2465 = abs((1.0 - _2221) / _2231);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2231 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2221 + 1.0) / _2231);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2465 = frontier_phi_23_19_ladder;
        }
        float _2719;
        if (_2234 > 0.0)
        {
            _2719 = abs((1.0 - _2225) / _2234);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2234 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2225 + 1.0) / _2234);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2719 = frontier_phi_35_30_ladder;
        }
        float _2721 = isnan(_2465) ? _2262 : (isnan(_2262) ? _2465 : min(_2262, _2465));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2228) + _2217;
        float _2727 = (_2722 * _2231) + _2221;
        float _2728 = (_2722 * _2234) + _2225;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2729;
        float _2733 = _2729 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 > _2733) || ((_2727 < _2731) || ((_2726 < _2731) || (_2726 > _2733))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2728, cbModelParam._m0[9u].z, fma(_2727, cbModelParam._m0[9u].y, _2726 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2728, cbModelParam._m0[10u].z, fma(_2727, cbModelParam._m0[10u].y, _2726 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2728, cbModelParam._m0[11u].z, fma(_2727, cbModelParam._m0[11u].y, _2726 * cbModelParam._m0[11u].x))), _2170);
            frontier_phi_13_35_ladder = _2856.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2856.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2856.x * cbModelParam._m0[1u].y;
        }
        _2250 = frontier_phi_13_35_ladder_2;
        _2252 = frontier_phi_13_35_ladder_1;
        _2254 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1361, _1362, _1363), _2170);
        _2250 = _2238.x * cbModelParam._m0[1u].y;
        _2252 = _2238.y * cbModelParam._m0[1u].y;
        _2254 = _2238.z * cbModelParam._m0[1u].y;
    }
    float _2258 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1191);
    float _2259 = isnan(_2258) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2258 : min(cbModelParam._m0[25u].w, _2258));
    float _2349;
    float _2351;
    float _2353;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2313 = fma(_1425, cbModelParam._m0[21u].z, fma(_1421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1417)) + cbModelParam._m0[21u].w;
        float _2317 = fma(_1425, cbModelParam._m0[22u].z, fma(_1421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1417)) + cbModelParam._m0[22u].w;
        float _2321 = fma(_1425, cbModelParam._m0[23u].z, fma(_1421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1417)) + cbModelParam._m0[23u].w;
        float _2324 = fma(_1363, cbModelParam._m0[21u].z, fma(_1362, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1361));
        float _2327 = fma(_1363, cbModelParam._m0[22u].z, fma(_1362, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1361));
        float _2330 = fma(_1363, cbModelParam._m0[23u].z, fma(_1362, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1361));
        float _2470;
        if (_2324 > 0.0)
        {
            _2470 = abs((1.0 - _2313) / _2324);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2324 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2313 + 1.0) / _2324);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2470 = frontier_phi_25_21_ladder;
        }
        float _2746;
        if (_2327 > 0.0)
        {
            _2746 = abs((1.0 - _2317) / _2327);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2327 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2317 + 1.0) / _2327);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2746 = frontier_phi_37_32_ladder;
        }
        float _2959;
        if (_2330 > 0.0)
        {
            _2959 = abs((1.0 - _2321) / _2330);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2330 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2321 + 1.0) / _2330);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2959 = frontier_phi_46_43_ladder;
        }
        float _2961 = isnan(_2746) ? _2470 : (isnan(_2470) ? _2746 : min(_2470, _2746));
        float _2962 = isnan(_2959) ? _2961 : (isnan(_2961) ? _2959 : min(_2961, _2959));
        float _2966 = (_2962 * _2324) + _2313;
        float _2967 = (_2962 * _2327) + _2317;
        float _2968 = (_2962 * _2330) + _2321;
        float _2969 = _2962 * 9.9999997473787516355514526367188e-05;
        float _2970 = (-1.0) - _2969;
        float _2972 = _2969 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2968 > _2972) || ((_2968 < _2970) || ((_2967 > _2972) || ((_2967 < _2970) || ((_2966 < _2970) || (_2966 > _2972))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3167 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2968, cbModelParam._m0[17u].z, fma(_2967, cbModelParam._m0[17u].y, _2966 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2968, cbModelParam._m0[18u].z, fma(_2967, cbModelParam._m0[18u].y, _2966 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2968, cbModelParam._m0[19u].z, fma(_2967, cbModelParam._m0[19u].y, _2966 * cbModelParam._m0[19u].x))), _2259);
            frontier_phi_22_46_ladder = _3167.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3167.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3167.x * cbModelParam._m0[1u].z;
        }
        _2349 = frontier_phi_22_46_ladder_2;
        _2351 = frontier_phi_22_46_ladder_1;
        _2353 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2333 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1361, _1362, _1363), _2259);
        _2349 = _2333.x * cbModelParam._m0[1u].z;
        _2351 = _2333.y * cbModelParam._m0[1u].z;
        _2353 = _2333.z * cbModelParam._m0[1u].z;
    }
    float _2366 = (((_1388 * _1337) + _1389) * _1353) * ((cbModelParam._m0[1u].w * (_2349 - _2250)) + _2250);
    float _2368 = (((_1388 * _1339) + _1389) * _1353) * ((cbModelParam._m0[1u].w * (_2351 - _2252)) + _2252);
    float _2370 = (((_1388 * _1340) + _1389) * _1353) * ((cbModelParam._m0[1u].w * (_2353 - _2254)) + _2254);
    float _2373 = fma(_2370, cbSceneParam._m0[89u].z, fma(_2368, cbSceneParam._m0[89u].y, _2366 * cbSceneParam._m0[89u].x));
    float _2376 = fma(_2370, cbSceneParam._m0[90u].z, fma(_2368, cbSceneParam._m0[90u].y, _2366 * cbSceneParam._m0[90u].x));
    float _2379 = fma(_2370, cbSceneParam._m0[91u].z, fma(_2368, cbSceneParam._m0[91u].y, _2366 * cbSceneParam._m0[91u].x));
    uvec4 _2389 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2391 = _2389.x * 14u;
    uint _2392 = _2391 + 13u;
    float _2399 = _1353 + (-1.0);
    float _2404 = (cbLight._m0[_2392].x * _2399) + 1.0;
    float _2405 = (cbLight._m0[_2392].y * _2399) + 1.0;
    float _2406 = (cbLight._m0[_2392].z * _2399) + 1.0;
    float _2407 = (cbLight._m0[_2392].w * _2399) + 1.0;
    uint _2408 = _2391 + 5u;
    float _2414 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
    uint _2418 = _2391 + 4u;
    float _2424 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
    uint _2428 = _2391 | 1u;
    float _2439 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_1188, _1189, _1190));
    float _2442 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_1188, _1189, _1190));
    float _4659 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _4670 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2447 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * 0.3183098733425140380859375;
    float _2449 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * 0.3183098733425140380859375;
    float _2456 = ((cbLight._m0[_2408].x * _2414) * _2449) + ((cbLight._m0[_2418].x * _2424) * _2447);
    float _2457 = ((_2414 * cbLight._m0[_2408].y) * _2449) + ((_2424 * cbLight._m0[_2418].y) * _2447);
    float _2458 = ((_2414 * cbLight._m0[_2408].z) * _2449) + ((_2424 * cbLight._m0[_2418].z) * _2447);
    uvec4 _2462 = floatBitsToUint(cbLight._m0[_2391 + 12u]);
    bool _2464 = _2462.x == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2464)
    {
        _2475 = _2456;
        _2477 = _2457;
        _2479 = _2458;
    }
    else
    {
        uint _2483 = _2391 + 6u;
        float _2499 = (dot(vec3(cbLight._m0[_2391 + 2u].xyz), vec3(_1188, _1189, _1190)) * 0.5) + 0.5;
        float _2500 = _2499 * _2499;
        float _4681 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2501 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2502 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
        _2475 = (((cbLight._m0[_2483].x * 0.3183098733425140380859375) * _2501) * _2502) + _2456;
        _2477 = (((cbLight._m0[_2483].y * 0.3183098733425140380859375) * _2501) * _2502) + _2457;
        _2479 = (((cbLight._m0[_2483].z * 0.3183098733425140380859375) * _2501) * _2502) + _2458;
    }
    bool _2482 = _2462.y == 0u;
    float _2520;
    float _2522;
    float _2524;
    if (_2482)
    {
        _2520 = _2475;
        _2522 = _2477;
        _2524 = _2479;
    }
    else
    {
        uint _2690 = _2391 + 7u;
        float _2706 = (dot(vec3(cbLight._m0[_2391 + 3u].xyz), vec3(_1188, _1189, _1190)) * 0.5) + 0.5;
        float _2707 = _2706 * _2706;
        float _4697 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2708 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2709 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2520 = (((cbLight._m0[_2690].x * 0.3183098733425140380859375) * _2708) * _2709) + _2475;
        _2522 = (((cbLight._m0[_2690].y * 0.3183098733425140380859375) * _2708) * _2709) + _2477;
        _2524 = (((cbLight._m0[_2690].z * 0.3183098733425140380859375) * _2708) * _2709) + _2479;
    }
    uint _2527 = _2391 + 8u;
    float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _1191) * 0.949999988079071044921875);
    float _2541 = _2540 * _2540;
    float _2542 = cbLight._m0[_2391].x + _1267;
    float _2543 = cbLight._m0[_2391].y + _1268;
    float _2544 = cbLight._m0[_2391].z + _1269;
    float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
    float _2549 = _2548 * _2542;
    float _2550 = _2548 * _2543;
    float _2551 = _2548 * _2544;
    float _2552 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_2391].xyz));
    float _4713 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _4724 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _2556 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2557 = dot(vec3(_1188, _1189, _1190), vec3(_2549, _2550, _2551));
    float _4735 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2549, _2550, _2551));
    float _4746 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2541 * _2541;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
    float _2578 = 0.959999978542327880859375 - _1334;
    float _2580 = 0.959999978542327880859375 - _1335;
    float _2581 = 0.959999978542327880859375 - _1336;
    float _2588 = 1.0 - _2541;
    float _2599 = (0.5 / (((_2556 * ((_2555 * _2588) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2588) + _2541) * _2555))) * _2555;
    float _4757 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2601 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    uint _2612 = _2391 + 9u;
    float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2428].w)) * _1191) * 0.949999988079071044921875);
    float _2624 = _2623 * _2623;
    float _2625 = cbLight._m0[_2428].x + _1267;
    float _2626 = cbLight._m0[_2428].y + _1268;
    float _2627 = cbLight._m0[_2428].z + _1269;
    float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
    float _2632 = _2631 * _2625;
    float _2633 = _2631 * _2626;
    float _2634 = _2631 * _2627;
    float _2635 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_2428].xyz));
    float _4768 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2639 = dot(vec3(_1188, _1189, _1190), vec3(_2632, _2633, _2634));
    float _4779 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2428].xyz), vec3(_2632, _2633, _2634));
    float _4790 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2624 * _2624;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0)))) * 5.0);
    float _2665 = 1.0 - _2624;
    float _2675 = (0.5 / (((_2556 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2665) + _2624) * _2638))) * _2638;
    float _4801 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2677 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    float _2687 = (((((_2658 * _2578) + _1337) * cbLight._m0[_2612].x) * _2677) * _2414) + (((((_2577 * _2578) + _1337) * cbLight._m0[_2527].x) * _2601) * _2424);
    float _2688 = (((((_2658 * _2580) + _1339) * cbLight._m0[_2612].y) * _2677) * _2414) + (((((_2577 * _2580) + _1339) * cbLight._m0[_2527].y) * _2601) * _2424);
    float _2689 = (((((_2658 * _2581) + _1340) * cbLight._m0[_2612].z) * _2677) * _2414) + (((((_2577 * _2581) + _1340) * cbLight._m0[_2527].z) * _2601) * _2424);
    float _2751;
    float _2753;
    float _2755;
    if (_2464)
    {
        _2751 = _2687;
        _2753 = _2688;
        _2755 = _2689;
    }
    else
    {
        uint _2757 = _2391 + 2u;
        uint _2761 = _2391 + 10u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _1191) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _1267;
        float _2778 = cbLight._m0[_2757].y + _1268;
        float _2779 = cbLight._m0[_2757].z + _1269;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_2757].xyz));
        float _4812 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2791 = dot(vec3(_1188, _1189, _1190), vec3(_2784, _2785, _2786));
        float _4823 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4834 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
        float _2817 = 1.0 - _2776;
        float _2827 = (0.5 / (((_2556 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2817) + _2776) * _2790))) * _2790;
        float _4845 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2406 : (isnan(_2406) ? 1.0 : min(_2406, 1.0));
        _2751 = (((((_2810 * _2578) + _1337) * cbLight._m0[_2761].x) * _2829) * _2830) + _2687;
        _2753 = (((((_2810 * _2580) + _1339) * cbLight._m0[_2761].y) * _2829) * _2830) + _2688;
        _2755 = (((((_2810 * _2581) + _1340) * cbLight._m0[_2761].z) * _2829) * _2830) + _2689;
    }
    float _2865;
    float _2867;
    float _2869;
    if (_2482)
    {
        _2865 = _2751;
        _2867 = _2753;
        _2869 = _2755;
    }
    else
    {
        uint _2876 = _2391 + 3u;
        uint _2880 = _2391 + 11u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _1191) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _1267;
        float _2897 = cbLight._m0[_2876].y + _1268;
        float _2898 = cbLight._m0[_2876].z + _1269;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_1188, _1189, _1190), vec3(cbLight._m0[_2876].xyz));
        float _4861 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2910 = dot(vec3(_1188, _1189, _1190), vec3(_2903, _2904, _2905));
        float _4872 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4883 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2929 = exp2(log2(1.0 - (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) * 5.0);
        float _2936 = 1.0 - _2895;
        float _2946 = (0.5 / (((_2556 * ((_2909 * _2936) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2556 * _2936) + _2895) * _2909))) * _2909;
        float _4894 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2407 : (isnan(_2407) ? 1.0 : min(_2407, 1.0));
        _2865 = (((((_2929 * _2578) + _1337) * cbLight._m0[_2880].x) * _2948) * _2949) + _2751;
        _2867 = (((((_2929 * _2580) + _1339) * cbLight._m0[_2880].y) * _2948) * _2949) + _2753;
        _2869 = (((((_2929 * _2581) + _1340) * cbLight._m0[_2880].z) * _2948) * _2949) + _2755;
    }
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    if (_2389.y == 0u)
    {
        float _3024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3025 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3024;
        float _3026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3024;
        float _3027 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3024;
        uvec4 _3039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3040 = _3039.x;
        uint _3051 = uint((float(_3039.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1276) / _3040))) + floor(float(uint(cbSceneParam._m0[85u].x * _1275) / _3040)));
        float _3061 = (log2(_3027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3062 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        uint _3065 = uint(isnan(14.0) ? _3062 : (isnan(_3062) ? 14.0 : min(_3062, 14.0)));
        uvec4 _3070 = texelFetch(g_lightClusterGridBuffer, int(((_3065 << 2u) + (_3051 << 6u)) >> 2u));
        uint _3071 = _3070.x;
        uint _3072 = _3039.z;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((((1u << ((_3072 >> 4u) & 15u)) + 4294967295u) & _3071) == 0u) || ((_3072 & 240u) == 0u))
        {
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
            _3180 = 0.0;
            _3182 = 0.0;
        }
        else
        {
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3181;
            float _3183;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            uint _3322 = 0u;
            uint _3331;
            bool _3332;
            for (;;)
            {
                _3331 = texelFetch(g_lightClassification, int((((_3065 << 5u) + (_3051 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                _3332 = _3331 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3332)
                {
                    frontier_phi_61_pred = _3316;
                    frontier_phi_61_pred_1 = _3321;
                    frontier_phi_61_pred_2 = _3320;
                    frontier_phi_61_pred_3 = _3319;
                    frontier_phi_61_pred_4 = _3318;
                    frontier_phi_61_pred_5 = _3317;
                }
                else
                {
                    float _3440;
                    float _3441;
                    float _3442;
                    float _3443;
                    float _3444;
                    float _3445;
                    uint _3446;
                    _3440 = _3316;
                    _3441 = _3317;
                    _3442 = _3318;
                    _3443 = _3319;
                    _3444 = _3320;
                    _3445 = _3321;
                    _3446 = _3331;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    for (;;)
                    {
                        uint _3450 = uint(findLSB(_3446)) + (_3322 << 5u);
                        uint _3447 = (_3446 + 4294967295u) & _3446;
                        uint _3452 = _3450 * 48u;
                        vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3452)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3452 + 3u)).x));
                        uint _3472 = (_3450 * 48u) + 4u;
                        vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3472)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3472 + 3u)).x));
                        uint _3491 = (_3450 * 48u) + 8u;
                        vec3 _3502 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x));
                        float _3506 = _3466.x - _3025;
                        float _3507 = _3466.y - _3026;
                        float _3508 = _3466.z - _3027;
                        float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                        float _3512 = inversesqrt(_3509);
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3516 = dot(vec3(_1294, _1297, _1300), vec3(_3513, _3514, _3515));
                        float _3521 = 1.0 - (_3509 * _3466.w);
                        float _4920 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3523 = sqrt(_3509) * _3485.w;
                        float _3526 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                        float _3527 = _3526 * _3526;
                        float _3530 = ((1.0 - _3527) * _3516) + _3527;
                        float _3533 = _3523 * _3523;
                        float _3537 = ((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3522) / ((_3533 * 0.699999988079071044921875) + 1.0);
                        float _3541 = (-0.0) - _3025;
                        float _3542 = (-0.0) - _3026;
                        float _3543 = (-0.0) - _3027;
                        float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                        float _3548 = _3547 * _3541;
                        float _3549 = _3547 * _3542;
                        float _3550 = _3547 * _3543;
                        float _3558 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                        float _3559 = 1.0 - _1369;
                        float _3566 = sqrt(1.0 - ((1.0 - (_3559 * _3559)) * (1.0 - (_3558 * _3558))));
                        float _3567 = _3566 * _3566;
                        float _3568 = _3567 * _3567;
                        float _3569 = _3548 + _3513;
                        float _3570 = _3549 + _3514;
                        float _3571 = _3550 + _3515;
                        float _3575 = inversesqrt(dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571)));
                        float _3579 = dot(vec3(_1294, _1297, _1300), vec3(_3548, _3549, _3550));
                        float _4936 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3582 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3583 = dot(vec3(_1294, _1297, _1300), vec3(_3575 * _3569, _3575 * _3570, _3575 * _3571));
                        float _4947 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3586 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3590 = ((_3586 * _3586) * (_3568 + (-1.0))) + 1.0;
                        float _3591 = _3526 * _3567;
                        float _3592 = _3591 * _3591;
                        float _3595 = ((1.0 - _3592) * _3516) + _3592;
                        float _4958 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3596 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3597 = 1.0 - _3567;
                        float _3607 = (0.5 / (((_3596 * ((_3582 * _3597) + _3567)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3567) * _3582))) * _3596;
                        float _4969 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3618 = (((_3568 * 3.1415927410125732421875) * (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) / ((_3590 * _3590) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125))) * _3522;
                        _3375 = (_3537 * _3485.x) + _3443;
                        _3376 = (_3537 * _3485.y) + _3444;
                        _3377 = (_3537 * _3485.z) + _3445;
                        _3372 = (_3618 * _3502.x) + _3440;
                        _3373 = (_3618 * _3502.y) + _3441;
                        _3374 = (_3618 * _3502.z) + _3442;
                        if (_3447 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3440 = _3372;
                            _3441 = _3373;
                            _3442 = _3374;
                            _3443 = _3375;
                            _3444 = _3376;
                            _3445 = _3377;
                            _3446 = _3447;
                        }
                    }
                    frontier_phi_61_pred = _3372;
                    frontier_phi_61_pred_1 = _3377;
                    frontier_phi_61_pred_2 = _3376;
                    frontier_phi_61_pred_3 = _3375;
                    frontier_phi_61_pred_4 = _3374;
                    frontier_phi_61_pred_5 = _3373;
                }
                _3173 = frontier_phi_61_pred;
                _3183 = frontier_phi_61_pred_1;
                _3181 = frontier_phi_61_pred_2;
                _3179 = frontier_phi_61_pred_3;
                _3177 = frontier_phi_61_pred_4;
                _3175 = frontier_phi_61_pred_5;
                uint _3323 = _3322 + 1u;
                if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3316 = _3173;
                    _3317 = _3175;
                    _3318 = _3177;
                    _3319 = _3179;
                    _3320 = _3181;
                    _3321 = _3183;
                    _3322 = _3323;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
            _3180 = _3181;
            _3182 = _3183;
        }
        uvec4 _3186 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3187 = _3186.z;
        uint _3189 = (_3187 >> 8u) & 15u;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        if (((4294967295u << _3189) & _3071) == 0u)
        {
            _3284 = _3172;
            _3286 = _3174;
            _3288 = _3176;
            _3290 = _3178;
            _3292 = _3180;
            _3294 = _3182;
        }
        else
        {
            float _3309 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
            float _3310 = _3309 * _3025;
            float _3311 = _3309 * _3026;
            float _3312 = _3309 * _3027;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3189 < ((_3187 >> 12u) & 15u))
            {
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3295;
                float _3423 = _3172;
                float _3424 = _3174;
                float _3425 = _3176;
                float _3426 = _3178;
                float _3427 = _3180;
                float _3428 = _3182;
                uint _3429 = _3189;
                uint _3438;
                bool _3439;
                for (;;)
                {
                    _3438 = texelFetch(g_lightClassification, int((((_3065 << 5u) + (_3051 << 9u)) + (_3429 << 2u)) >> 2u)).x;
                    _3439 = _3438 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3439)
                    {
                        frontier_phi_67_pred = _3426;
                        frontier_phi_67_pred_1 = _3427;
                        frontier_phi_67_pred_2 = _3428;
                        frontier_phi_67_pred_3 = _3425;
                        frontier_phi_67_pred_4 = _3424;
                        frontier_phi_67_pred_5 = _3423;
                    }
                    else
                    {
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3636 = _3423;
                        float _3637 = _3424;
                        float _3638 = _3425;
                        float _3639 = _3426;
                        float _3640 = _3427;
                        float _3641 = _3428;
                        uint _3642 = _3438;
                        uint _3643;
                        vec4 _3668;
                        float _3669;
                        vec4 _3684;
                        vec3 _3696;
                        vec4 _3711;
                        vec4 _3726;
                        float _3772;
                        bool _3773;
                        for (;;)
                        {
                            uint _3653 = ((_3429 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3642));
                            _3643 = (_3642 + 4294967295u) & _3642;
                            uint _3655 = _3653 * 40u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3669 = _3668.w;
                            uint _3671 = (_3653 * 40u) + 4u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3653 * 40u) + 8u;
                            _3696 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x));
                            uint _3698 = (_3653 * 40u) + 16u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3713 = (_3653 * 40u) + 20u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3653 * 40u) + 24u;
                            vec4 _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3747 = (_3653 * 40u) + 28u;
                            vec4 _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            _3772 = fma(_3027, _3760.z, fma(_3026, _3760.y, _3760.x * _3025)) + _3760.w;
                            _3773 = !((fma(_3027, _3741.z, fma(_3026, _3741.y, _3741.x * _3025)) + _3741.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3773)
                            {
                                float _3800 = _3668.x - _3025;
                                float _3801 = _3668.y - _3026;
                                float _3802 = _3668.z - _3027;
                                float _3803 = dot(vec3(_3800, _3801, _3802), vec3(_3800, _3801, _3802));
                                float _3806 = inversesqrt(_3803);
                                float _3807 = _3806 * _3800;
                                float _3808 = _3806 * _3801;
                                float _3809 = _3806 * _3802;
                                float _3813 = 1.0 - (_3803 / (_3669 * _3669));
                                float _4980 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3818 = sqrt(_3803) * _3684.w;
                                float _3820 = 1.39999997615814208984375 / (_3818 + 1.39999997615814208984375);
                                float _3821 = _3820 * _3820;
                                float _3824 = ((1.0 - _3821) * dot(vec3(_3807, _3808, _3809), vec3(_1294, _1297, _1300))) + _3821;
                                float _3827 = _3818 * _3818;
                                float _3831 = (fma(_3027, _3711.z, fma(_3026, _3711.y, _3711.x * _3025)) + _3711.w) / _3772;
                                float _3832 = (fma(_3027, _3726.z, fma(_3026, _3726.y, _3726.x * _3025)) + _3726.w) / _3772;
                                float _3836 = 1.0 - dot(vec2(_3831, _3832), vec2(_3831, _3832));
                                float _4996 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3838 = _3837 * (((isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0))) * _3814) / ((_3827 * 0.699999988079071044921875) + 1.0));
                                float _3850 = exp2(log2(1.0 / ((_3827 * 3.5) + 5.0)) * 0.25);
                                float _3851 = 1.0 - _1369;
                                float _3858 = sqrt(1.0 - ((1.0 - (_3851 * _3851)) * (1.0 - (_3850 * _3850))));
                                float _3859 = _3858 * _3858;
                                float _3860 = _3859 * _3859;
                                float _3861 = _3807 - _3310;
                                float _3862 = _3808 - _3311;
                                float _3863 = _3809 - _3312;
                                float _3867 = inversesqrt(dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863)));
                                float _3871 = dot(vec3(_1294, _1297, _1300), vec3((-0.0) - _3310, (-0.0) - _3311, (-0.0) - _3312));
                                float _5007 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3874 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3875 = dot(vec3(_1294, _1297, _1300), vec3(_3867 * _3861, _3867 * _3862, _3867 * _3863));
                                float _5018 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3882 = ((_3878 * _3878) * (_3860 + (-1.0))) + 1.0;
                                float _3883 = _3820 * _3859;
                                float _3884 = _3883 * _3883;
                                float _3890 = ((1.0 - _3884) * dot(vec3(_1294, _1297, _1300), vec3(_3807, _3808, _3809))) + _3884;
                                float _5029 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
                                float _3892 = 1.0 - _3859;
                                float _3902 = (0.5 / (((_3891 * ((_3874 * _3892) + _3859)) + 9.9999999392252902907785028219223e-09) + (((_3891 * _3892) + _3859) * _3874))) * _3891;
                                float _5040 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3912 = (_3837 * _3814) * (((_3860 * 3.1415927410125732421875) * (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0)))) / ((_3882 * _3882) * ((_3827 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3912 * _3696.x;
                                frontier_phi_73_pred_1 = _3912 * _3696.y;
                                frontier_phi_73_pred_2 = _3838 * _3684.z;
                                frontier_phi_73_pred_3 = _3838 * _3684.y;
                                frontier_phi_73_pred_4 = _3838 * _3684.x;
                                frontier_phi_73_pred_5 = _3912 * _3696.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3916 = frontier_phi_73_pred;
                            _3917 = frontier_phi_73_pred_1;
                            _3921 = frontier_phi_73_pred_2;
                            _3920 = frontier_phi_73_pred_3;
                            _3919 = frontier_phi_73_pred_4;
                            _3918 = frontier_phi_73_pred_5;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            if (_3643 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3643;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3626;
                        frontier_phi_67_pred_1 = _3627;
                        frontier_phi_67_pred_2 = _3628;
                        frontier_phi_67_pred_3 = _3625;
                        frontier_phi_67_pred_4 = _3624;
                        frontier_phi_67_pred_5 = _3623;
                    }
                    _3291 = frontier_phi_67_pred;
                    _3293 = frontier_phi_67_pred_1;
                    _3295 = frontier_phi_67_pred_2;
                    _3289 = frontier_phi_67_pred_3;
                    _3287 = frontier_phi_67_pred_4;
                    _3285 = frontier_phi_67_pred_5;
                    uint _3430 = _3429 + 1u;
                    if (_3430 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3423 = _3285;
                        _3424 = _3287;
                        _3425 = _3289;
                        _3426 = _3291;
                        _3427 = _3293;
                        _3428 = _3295;
                        _3429 = _3430;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3293;
                frontier_phi_55_56_ladder_1 = _3295;
                frontier_phi_55_56_ladder_2 = _3291;
                frontier_phi_55_56_ladder_3 = _3289;
                frontier_phi_55_56_ladder_4 = _3287;
                frontier_phi_55_56_ladder_5 = _3285;
            }
            else
            {
                frontier_phi_55_56_ladder = _3180;
                frontier_phi_55_56_ladder_1 = _3182;
                frontier_phi_55_56_ladder_2 = _3178;
                frontier_phi_55_56_ladder_3 = _3176;
                frontier_phi_55_56_ladder_4 = _3174;
                frontier_phi_55_56_ladder_5 = _3172;
            }
            _3284 = frontier_phi_55_56_ladder_5;
            _3286 = frontier_phi_55_56_ladder_4;
            _3288 = frontier_phi_55_56_ladder_3;
            _3290 = frontier_phi_55_56_ladder_2;
            _3292 = frontier_phi_55_56_ladder;
            _3294 = frontier_phi_55_56_ladder_1;
        }
        float _3299 = isnan(1.0) ? _1353 : (isnan(_1353) ? 1.0 : min(_1353, 1.0));
        _3084 = (_3299 * _3290) + _2520;
        _3086 = (_3299 * _3292) + _2522;
        _3088 = (_3299 * _3294) + _2524;
        _3090 = ((_3284 * _1337) * _3299) + _2865;
        _3092 = ((_3286 * _1339) * _3299) + _2867;
        _3094 = ((_3288 * _1340) * _3299) + _2869;
    }
    else
    {
        _3084 = _2520;
        _3086 = _2522;
        _3088 = _2524;
        _3090 = _2865;
        _3092 = _2867;
        _3094 = _2869;
    }
    float _5056 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    float _5067 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _5078 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    uint _3114 = _297 + 6u;
    float _3122 = _1275 / cbSceneParam._m0[86u].x;
    float _3123 = _1276 / cbSceneParam._m0[86u].y;
    vec4 _3137 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3122, _3123, (log2((isnan(cbSceneParam._m0[77u].w) ? _1210 : (isnan(_1210) ? cbSceneParam._m0[77u].w : min(_1210, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3139 = _3137.x;
    float _3140 = _3137.y;
    float _3141 = _3137.z;
    float _3142 = _3137.w;
    float _3234;
    float _3236;
    float _3238;
    float _3240;
    if (_1210 > cbSceneParam._m0[78u].w)
    {
        float _3197 = isnan(_1210) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1210 : min(cbSceneParam._m0[80u].w, _1210));
        float _3198 = _3197 / _1210;
        float _3209 = _3198 * _1260;
        float _3210 = _1261 * _3198;
        float _3211 = (-0.0) - _3210;
        float _3212 = _3198 * _1262;
        float _3214 = (cbSceneParam._m0[77u].w * _3211) / _3197;
        float _3215 = _3214 + cbSceneParam._m0[79u].w;
        float _3216 = cbSceneParam._m0[79u].w - _3210;
        float _3222 = sqrt(((_3209 * _3209) + (_3210 * _3210)) + (_3212 * _3212));
        float _3225 = (1.0 - (cbSceneParam._m0[77u].w / _3197)) * _3222;
        float _3230 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3232 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3385;
        if (abs((_3211 - _3214) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3385 = ((((_3215 > 0.0) ? exp2(_3230 * _3215) : (2.0 - exp2(_3232 * _3215))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3225;
        }
        else
        {
            float _3345 = 1.0 / cbSceneParam._m0[80u].x;
            float _3346 = isnan(_3216) ? _3215 : (isnan(_3215) ? _3216 : max(_3215, _3216));
            float _3347 = isnan(_3216) ? _3215 : (isnan(_3215) ? _3216 : min(_3215, _3216));
            float _3356 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : min(_3346, 0.0));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            _3385 = ((abs(_3222 / _3211) * cbSceneParam._m0[80u].y) * ((((_3356 - _3357) * 2.0) - ((exp2(_3230 * (isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0)))) - exp2(_3230 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0))))) * _3345)) - ((exp2(_3232 * _3356) - exp2(_3232 * _3357)) * _3345))) + (_3225 * cbSceneParam._m0[80u].z);
        }
        vec4 _3387 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3122, _3123, 1.0), 0.0);
        float _3396 = exp2((_3385 * (-1.44269502162933349609375)) * (1.0 - _3387.w));
        float _3397 = log2(_3396);
        float _3413 = log2(_3142);
        _3234 = (exp2(_3413 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3397 * cbSceneParam._m0[78u].x)) * _3387.x) / cbSceneParam._m0[78u].x)) + _3139;
        _3236 = (exp2(_3413 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3397 * cbSceneParam._m0[78u].y)) * _3387.y) / cbSceneParam._m0[78u].y)) + _3140;
        _3238 = (exp2(_3413 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3397 * cbSceneParam._m0[78u].z)) * _3387.z) / cbSceneParam._m0[78u].z)) + _3141;
        _3240 = _3396 * _3142;
    }
    else
    {
        _3234 = _3139;
        _3236 = _3140;
        _3238 = _3141;
        _3240 = _3142;
    }
    float _3252 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3253 = _3252 == 3.0;
    float _3254 = log2(_3240);
    float _3261 = exp2(_3254 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3084 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1353))) + ((_3090 + ((isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0))) * _2159)) * cbPerFrame._m0[3u].x));
    float _3262 = exp2(_3254 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_3086 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1353))) + ((_3092 + ((isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0))) * _2159)) * cbPerFrame._m0[3u].x));
    float _3263 = exp2(_3254 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0))) * (_3088 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1353))) + ((_3094 + ((isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0))) * _2159)) * cbPerFrame._m0[3u].x));
    float _3272 = (_3252 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3272 * (_3253 ? _3261 : (_3261 + (cbSceneParam._m0[72u].w * _3234)));
    SV_Target.y = _3272 * (_3253 ? _3262 : (_3262 + (cbSceneParam._m0[72u].w * _3236)));
    SV_Target.z = _3272 * (_3253 ? _3263 : (_3263 + (cbSceneParam._m0[72u].w * _3238)));
    SV_Target.w = cbInstanceData._m0[_3114].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3114].w;
}


