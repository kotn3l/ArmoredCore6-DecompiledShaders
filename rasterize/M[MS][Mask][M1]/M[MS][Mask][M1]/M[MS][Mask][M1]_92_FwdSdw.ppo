#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1386;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _360.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3993 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _435 = (_428 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _436 = (_428 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _437 = (_428 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _360.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4004 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _514 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435);
    float _517 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436);
    float _520 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437);
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _580 = _576.z;
    float _587 = ((_559.x - _578) * _428) + _578;
    float _588 = ((_559.y - _579) * _428) + _579;
    float _589 = ((_559.z - _580) * _428) + _580;
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _614 = ((_601.z - _589) * _501) + _589;
    float _617 = ((((_601.x - _587) * _501) + _587) * 2.0) + (-1.0);
    float _619 = ((((_601.y - _588) * _501) + _588) * 2.0) + (-1.0);
    float _620 = dot(vec2(_617, _619), vec2(_617, _619));
    float _4015 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _625 = sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _651 = (((_639.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _617;
    float _652 = (((_639.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _619;
    float _655 = fma(_625, _238, fma(_652, _245, _651 * _231));
    float _658 = fma(_625, _239, fma(_652, _246, _651 * _232));
    float _661 = fma(_625, _240, fma(_652, _247, _651 * _233));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _704 = (cbMtdParam._m0[19u].x + dot(vec4(_665 * _655, _665 * _658, _665 * _661, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_694 - _695) * cbMtdParam._m0[24u].z) + _695) * cbMtdParam._m0[21u].z);
    float _4026 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _712 = (_705 * ((_539.x * cbMtdParam._m0[18u].x) - _514)) + _514;
    float _713 = (_705 * ((_539.y * cbMtdParam._m0[18u].y) - _517)) + _517;
    float _714 = (_705 * ((_539.z * cbMtdParam._m0[18u].z) - _520)) + _520;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _742 = _740.x;
    float _759 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _742) * _428) + _742;
    float _776 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _759) * _501) + _759;
    float _780 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _776) * cbMtdParam._m0[19u].z) + _776;
    float _782 = _780 - (_780 * _705);
    float _786 = (cbMtdParam._m0[19u].w * (_639.z - _614)) + _614;
    vec4 _799 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _806 = (_799.x * 2.0) + (-1.0);
    float _807 = (_799.y * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _4037 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _816 = ((_799.z - _786) * _705) + _786;
    float _826 = ((sqrt(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) - _625) * _705) + _625;
    float _829 = (((_806 - _651) * _705) + _651) + (cbMtdParam._m0[21u].x * _651);
    float _830 = (((_807 - _652) * _705) + _652) + (cbMtdParam._m0[21u].x * _652);
    float _832 = cbMtdParam._m0[22u].x + _639.w;
    float _835 = fma(_826, _238, fma(_830, _245, _829 * _231));
    float _838 = fma(_826, _239, fma(_830, _246, _829 * _232));
    float _841 = fma(_826, _240, fma(_830, _247, _829 * _233));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _4048 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _849 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4070 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4081 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _4092 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _4103 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _854 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _868 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _919 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _909);
    float _920 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _909);
    float _921 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _909);
    float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
    float _926 = _919 * _925;
    float _927 = _920 * _925;
    float _928 = _921 * _925;
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _956 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _959 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _973 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _979 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_973].x;
    float _980 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_973].y;
    float _981 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * cbInstanceData._m0[_973].z;
    float _4114 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _985 = 1.0 - _854;
    float _986 = _982 * _985;
    float _987 = _983 * _985;
    float _988 = _984 * _985;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _854;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _854;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _854;
    float _996 = _993 + 0.039999999105930328369140625;
    float _998 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    vec4 _1008 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _1012 = ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * TEXCOORD_5.w) * _1008.x;
    float _1013 = dot(vec3(_846, _847, _848), vec3(_926, _927, _928));
    float _1016 = _1013 * 2.0;
    float _1020 = (_1016 * _846) - _926;
    float _1021 = (_1016 * _847) - _927;
    float _1022 = (_1016 * _848) - _928;
    float _1026 = abs(dot(vec3(_926, _927, _928), vec3(_846, _847, _848)));
    float _4147 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_849);
    float _1041 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1047 = (1.0 - _1041) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1048 = _1041 * _1028;
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1385;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1110 = fma(_1084, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076));
        float _1114 = fma(_1084, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076));
        float _1118 = fma(_1084, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076));
        float _1143 = _1076 + _846;
        float _1144 = _1080 + _847;
        float _1145 = _1084 + _848;
        float _1155 = fma(_1145, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143)) - _1110;
        float _1156 = fma(_1145, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143)) - _1114;
        float _1157 = fma(_1145, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143)) - _1118;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1110 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1114 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[34u].z) + ((((((_1118 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1213 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1179.x + (-0.5));
        float _1215 = _1213 * (_1179.y + (-0.5));
        float _1216 = _1213 * (_1179.z + (-0.5));
        float _1223 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1186.x + (-0.5));
        float _1225 = _1223 * (_1186.y + (-0.5));
        float _1226 = _1223 * (_1186.z + (-0.5));
        float _1233 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1193.x + (-0.5));
        float _1235 = _1233 * (_1193.y + (-0.5));
        float _1236 = _1233 * (_1193.z + (-0.5));
        float _1243 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1200.x + (-0.5));
        float _1245 = _1243 * (_1200.y + (-0.5));
        float _1246 = _1243 * (_1200.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1267 = (dot(vec3(_846, _847, _848), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1277 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4195 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1279 + 1.0))) + _1284) * _1247;
        float _1294 = _1215 * 0.5;
        float _1295 = _1225 * 0.5;
        float _1296 = _1235 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_846, _847, _848), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4228 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1321 + 1.0))) + _1326) * _1248;
        float _1336 = _1216 * 0.5;
        float _1337 = _1226 * 0.5;
        float _1338 = _1236 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_846, _847, _848), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4261 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1363 + 1.0))) + _1368) * _1249;
        _1385 = _1216;
        _1387 = _1215;
        _1388 = _1214;
        _1389 = _1226;
        _1390 = _1225;
        _1391 = _1224;
        _1392 = _1236;
        _1393 = _1235;
        _1394 = _1234;
        _1395 = _1249;
        _1396 = _1248;
        _1397 = _1247;
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _1386;
        _1387 = _1386;
        _1388 = _1386;
        _1389 = _1386;
        _1390 = _1386;
        _1391 = _1386;
        _1392 = _1386;
        _1393 = _1386;
        _1394 = _1386;
        _1395 = _1386;
        _1396 = _1386;
        _1397 = _1386;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1424 = fma(_1084, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076));
        float _1428 = fma(_1084, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076));
        float _1432 = fma(_1084, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076));
        float _1455 = _1076 + _846;
        float _1456 = _1080 + _847;
        float _1457 = _1084 + _848;
        float _1467 = fma(_1457, cbModelParam._m0[30u].z, fma(_1456, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1455)) - _1424;
        float _1468 = fma(_1457, cbModelParam._m0[31u].z, fma(_1456, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1455)) - _1428;
        float _1469 = fma(_1457, cbModelParam._m0[32u].z, fma(_1456, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1455)) - _1432;
        float _1473 = inversesqrt(dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469)));
        float _1486 = ((_1473 * _1467) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1424 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1473 * _1468) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1428 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1473 * _1469) / cbModelParam._m0[35u].z) + ((((((_1432 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1486, _1487, _1488), 0.0);
        float _1523 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1490.x + (-0.5));
        float _1525 = _1523 * (_1490.y + (-0.5));
        float _1526 = _1523 * (_1490.z + (-0.5));
        float _1533 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1497.x + (-0.5));
        float _1535 = _1533 * (_1497.y + (-0.5));
        float _1536 = _1533 * (_1497.z + (-0.5));
        float _1543 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1504.x + (-0.5));
        float _1545 = _1543 * (_1504.y + (-0.5));
        float _1546 = _1543 * (_1504.z + (-0.5));
        float _1553 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1511.x + (-0.5));
        float _1555 = _1553 * (_1511.y + (-0.5));
        float _1556 = _1553 * (_1511.z + (-0.5));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = _1524 * 0.5;
        float _1561 = _1534 * 0.5;
        float _1562 = _1544 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_846, _847, _848), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4324 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1587 + 1.0))) + _1592) * _1557;
        float _1602 = _1525 * 0.5;
        float _1603 = _1535 * 0.5;
        float _1604 = _1545 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_846, _847, _848), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4357 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1629 + 1.0))) + _1634) * _1558;
        float _1644 = _1526 * 0.5;
        float _1645 = _1536 * 0.5;
        float _1646 = _1546 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_846, _847, _848), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4390 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1671 + 1.0))) + _1676) * _1559;
        _1693 = _1526;
        _1694 = _1525;
        _1695 = _1524;
        _1696 = _1536;
        _1697 = _1535;
        _1698 = _1534;
        _1699 = _1546;
        _1700 = _1545;
        _1701 = _1544;
        _1702 = _1559;
        _1703 = _1558;
        _1704 = _1557;
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
    }
    else
    {
        _1693 = _1386;
        _1694 = _1386;
        _1695 = _1386;
        _1696 = _1386;
        _1697 = _1386;
        _1698 = _1386;
        _1699 = _1386;
        _1700 = _1386;
        _1701 = _1386;
        _1702 = _1386;
        _1703 = _1386;
        _1704 = _1386;
        _1705 = 0.0;
        _1706 = 0.0;
        _1707 = 0.0;
    }
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1398)) + _1398;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1399)) + _1399;
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1400)) + _1400;
    float _1740 = fma(_1719, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1717 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1719, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1717 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1719, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1717));
    float _1761 = _1020 * 0.5;
    float _1762 = _1021 * 0.5;
    float _1763 = _1022 * 0.5;
    float _1764 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1767 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1770 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1804;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1777 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1385, _1389, _1392, _1395));
        float _1781 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1785 = dot(vec4(_1761, _1762, _1763, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1792 = dot(vec4(cbModelParam._m0[39u]), vec4(_1761, _1762, _1763, 1.0));
        _1804 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)), isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1804 = 1.0;
    }
    float _1815;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1806 = dot(vec4(cbModelParam._m0[40u]), vec4(_1761, _1762, _1763, 1.0));
        _1815 = dot(vec3(isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1806) ? 0.0 : (isnan(0.0) ? _1806 : max(0.0, _1806))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1815 = 1.0;
    }
    float _1819 = (_1815 * cbModelParam._m0[1u].x) + (_1804 * (1.0 - cbModelParam._m0[1u].x));
    float _1829 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1829 : min(cbModelParam._m0[25u].z, _1829));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1877 = fma(_1084, cbModelParam._m0[13u].z, fma(_1080, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1076)) + cbModelParam._m0[13u].w;
        float _1881 = fma(_1084, cbModelParam._m0[14u].z, fma(_1080, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1076)) + cbModelParam._m0[14u].w;
        float _1885 = fma(_1084, cbModelParam._m0[15u].z, fma(_1080, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1076)) + cbModelParam._m0[15u].w;
        float _1888 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1891 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1894 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1922;
        if (_1888 > 0.0)
        {
            _1922 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1922 = frontier_phi_14_12_ladder;
        }
        float _2093;
        if (_1891 > 0.0)
        {
            _2093 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2093 = frontier_phi_23_19_ladder;
        }
        float _2388;
        if (_1894 > 0.0)
        {
            _2388 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2388 = frontier_phi_35_30_ladder;
        }
        float _2390 = isnan(_2093) ? _1922 : (isnan(_1922) ? _2093 : min(_1922, _2093));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1888) + _1877;
        float _2396 = (_2391 * _1891) + _1881;
        float _2397 = (_2391 * _1894) + _1885;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1830);
            frontier_phi_13_35_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1910 = frontier_phi_13_35_ladder_2;
        _1912 = frontier_phi_13_35_ladder_1;
        _1914 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1830);
        _1910 = _1898.x * cbModelParam._m0[1u].y;
        _1912 = _1898.y * cbModelParam._m0[1u].y;
        _1914 = _1898.z * cbModelParam._m0[1u].y;
    }
    float _1918 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1919 = isnan(_1918) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1918 : min(cbModelParam._m0[25u].w, _1918));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1084, cbModelParam._m0[21u].z, fma(_1080, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1076)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1084, cbModelParam._m0[22u].z, fma(_1080, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1076)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1084, cbModelParam._m0[23u].z, fma(_1080, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1076)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _1986 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _1989 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2098;
        if (_1983 > 0.0)
        {
            _2098 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2098 = frontier_phi_25_21_ladder;
        }
        float _2415;
        if (_1986 > 0.0)
        {
            _2415 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2415 = frontier_phi_37_32_ladder;
        }
        float _2753;
        if (_1989 > 0.0)
        {
            _2753 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2753 = frontier_phi_47_44_ladder;
        }
        float _2755 = isnan(_2415) ? _2098 : (isnan(_2098) ? _2415 : min(_2098, _2415));
        float _2756 = isnan(_2753) ? _2755 : (isnan(_2755) ? _2753 : min(_2755, _2753));
        float _2760 = (_2756 * _1983) + _1972;
        float _2761 = (_2756 * _1986) + _1976;
        float _2762 = (_2756 * _1989) + _1980;
        float _2763 = _2756 * 9.9999997473787516355514526367188e-05;
        float _2764 = (-1.0) - _2763;
        float _2766 = _2763 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2762 > _2766) || ((_2762 < _2764) || ((_2761 > _2766) || ((_2761 < _2764) || ((_2760 < _2764) || (_2760 > _2766))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2762, cbModelParam._m0[17u].z, fma(_2761, cbModelParam._m0[17u].y, _2760 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2762, cbModelParam._m0[18u].z, fma(_2761, cbModelParam._m0[18u].y, _2760 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2762, cbModelParam._m0[19u].z, fma(_2761, cbModelParam._m0[19u].y, _2760 * cbModelParam._m0[19u].x))), _1919);
            frontier_phi_22_47_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_22_47_ladder_2;
        _2010 = frontier_phi_22_47_ladder_1;
        _2012 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1919);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2025 = (((_1047 * _996) + _1048) * _1012) * ((cbModelParam._m0[1u].w * (_2008 - _1910)) + _1910);
    float _2027 = (((_1047 * _998) + _1048) * _1012) * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2029 = (((_1047 * _999) + _1048) * _1012) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2032 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2027, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2027, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2027, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2085 = _2072 / _2084;
    float _2086 = _2076 / _2084;
    float _2087 = _2080 / _2084;
    float _2234;
    float _2235;
    float _2236;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2114 = ((uint(_2087 > cbSceneParam._m0[59u].y) + uint(_2087 > cbSceneParam._m0[59u].x)) + uint(_2087 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2115 = _2114 + 43u;
        uint _2123 = _2114 + 44u;
        uint _2131 = _2114 + 45u;
        uint _2139 = _2114 + 46u;
        float _2150 = fma(_2084, cbSceneParam._m0[_2115].w, fma(_2080, cbSceneParam._m0[_2115].z, fma(_2076, cbSceneParam._m0[_2115].y, _2072 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2084, cbSceneParam._m0[_2123].w, fma(_2080, cbSceneParam._m0[_2123].z, fma(_2076, cbSceneParam._m0[_2123].y, _2072 * cbSceneParam._m0[_2123].x)));
        float _2162 = fma(_2084, cbSceneParam._m0[_2139].w, fma(_2080, cbSceneParam._m0[_2139].z, fma(_2076, cbSceneParam._m0[_2139].y, _2072 * cbSceneParam._m0[_2139].x)));
        float _2167 = cbSceneParam._m0[33u].z * _2162;
        float _2169 = cbSceneParam._m0[33u].w * _2162;
        float _2172 = fma(_2084, cbSceneParam._m0[_2131].w, fma(_2080, cbSceneParam._m0[_2131].z, fma(_2076, cbSceneParam._m0[_2131].y, _2072 * cbSceneParam._m0[_2131].x))) / _2162;
        float _2220 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
        float _4516 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2227 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2150) / _2162, (_2169 + _2154) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2150) / _2162, (_2154 - _2167) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2167) / _2162, (_2154 - _2169) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2169) / _2162, (_2167 + _2154) / _2162), _2172), 0.0)).x), vec4(0.25)));
        _2234 = 1.0 - (_2227 * cbSceneParam._m0[34u].x);
        _2235 = 1.0 - (_2227 * cbSceneParam._m0[34u].y);
        _2236 = 1.0 - (_2227 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2234 = 1.0;
        _2235 = 1.0;
        _2236 = 1.0;
    }
    float _2300;
    float _2302;
    float _2304;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2288 = fma(_2084, cbSceneParam._m0[63u].w, fma(_2080, cbSceneParam._m0[63u].z, fma(_2076, cbSceneParam._m0[63u].y, _2072 * cbSceneParam._m0[63u].x)));
        float _2289 = fma(_2084, cbSceneParam._m0[60u].w, fma(_2080, cbSceneParam._m0[60u].z, fma(_2076, cbSceneParam._m0[60u].y, _2072 * cbSceneParam._m0[60u].x))) / _2288;
        float _2290 = fma(_2084, cbSceneParam._m0[61u].w, fma(_2080, cbSceneParam._m0[61u].z, fma(_2076, cbSceneParam._m0[61u].y, _2072 * cbSceneParam._m0[61u].x))) / _2288;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2289 >= cbSceneParam._m0[64u].x) && (_2290 >= cbSceneParam._m0[64u].y)) && (_2289 <= cbSceneParam._m0[64u].z)) && (_2290 <= cbSceneParam._m0[64u].w))
        {
            float _2428 = fma(_2084, cbSceneParam._m0[62u].w, fma(_2080, cbSceneParam._m0[62u].z, fma(_2076, cbSceneParam._m0[62u].y, _2072 * cbSceneParam._m0[62u].x))) / _2288;
            float _2432 = isnan(cbSceneParam._m0[41u].w) ? _2428 : (isnan(_2428) ? cbSceneParam._m0[41u].w : max(_2428, cbSceneParam._m0[41u].w));
            float _2475 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
            float _4532 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
            float _2482 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2289, cbSceneParam._m0[33u].w + _2290), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2289, _2290 - cbSceneParam._m0[33u].z), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].z, _2290 - cbSceneParam._m0[33u].w), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2290), _2432), 0.0)).x), vec4(0.25)));
            float _2486 = 1.0 - (_2482 * cbSceneParam._m0[34u].x);
            float _2487 = 1.0 - (_2482 * cbSceneParam._m0[34u].y);
            float _2488 = 1.0 - (_2482 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_34_33_ladder_1 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_34_33_ladder_2 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
        }
        else
        {
            frontier_phi_34_33_ladder = _2236;
            frontier_phi_34_33_ladder_1 = _2235;
            frontier_phi_34_33_ladder_2 = _2234;
        }
        _2300 = frontier_phi_34_33_ladder_2;
        _2302 = frontier_phi_34_33_ladder_1;
        _2304 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2300 = _2234;
        _2302 = _2235;
        _2304 = _2236;
    }
    uvec4 _2309 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2311 = _2309.x * 14u;
    uint _2312 = _2311 + 13u;
    float _2319 = _1012 + (-1.0);
    float _2324 = (cbLight._m0[_2312].x * _2319) + 1.0;
    float _2325 = (cbLight._m0[_2312].y * _2319) + 1.0;
    float _2326 = (cbLight._m0[_2312].z * _2319) + 1.0;
    float _2327 = (cbLight._m0[_2312].w * _2319) + 1.0;
    uint _2328 = _2311 + 5u;
    float _2334 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2338 = _2311 + 4u;
    float _2347 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2351 = _2311 | 1u;
    float _2362 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_846, _847, _848));
    float _2365 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_846, _847, _848));
    float _4568 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _4579 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2370 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * 0.3183098733425140380859375;
    float _2372 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * 0.3183098733425140380859375;
    float _2379 = ((cbLight._m0[_2328].x * _2334) * _2372) + (((cbLight._m0[_2338].x * _2300) * _2347) * _2370);
    float _2380 = ((_2334 * cbLight._m0[_2328].y) * _2372) + (((cbLight._m0[_2338].y * _2302) * _2347) * _2370);
    float _2381 = ((_2334 * cbLight._m0[_2328].z) * _2372) + (((cbLight._m0[_2338].z * _2304) * _2347) * _2370);
    uvec4 _2385 = floatBitsToUint(cbLight._m0[_2311 + 12u]);
    bool _2387 = _2385.x == 0u;
    float _2489;
    float _2491;
    float _2493;
    if (_2387)
    {
        _2489 = _2379;
        _2491 = _2380;
        _2493 = _2381;
    }
    else
    {
        uint _2497 = _2311 + 6u;
        float _2513 = (dot(vec3(cbLight._m0[_2311 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4590 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2516 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2489 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2379;
        _2491 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2380;
        _2493 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2381;
    }
    bool _2496 = _2385.y == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2496)
    {
        _2551 = _2489;
        _2553 = _2491;
        _2555 = _2493;
    }
    else
    {
        uint _2724 = _2311 + 7u;
        float _2740 = (dot(vec3(cbLight._m0[_2311 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2741 = _2740 * _2740;
        float _4606 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2742 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2743 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2551 = (((cbLight._m0[_2724].x * 0.3183098733425140380859375) * _2742) * _2743) + _2489;
        _2553 = (((cbLight._m0[_2724].y * 0.3183098733425140380859375) * _2742) * _2743) + _2491;
        _2555 = (((cbLight._m0[_2724].z * 0.3183098733425140380859375) * _2742) * _2743) + _2493;
    }
    uint _2558 = _2311 + 8u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _849) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2311].x + _926;
    float _2574 = cbLight._m0[_2311].y + _927;
    float _2575 = cbLight._m0[_2311].z + _928;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2311].xyz));
    float _4622 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _4633 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2587 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2588 = dot(vec3(_846, _847, _848), vec3(_2580, _2581, _2582));
    float _4644 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2592 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2580, _2581, _2582));
    float _4655 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2596 = _2572 * _2572;
    float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
    float _2609 = 0.959999978542327880859375 - _993;
    float _2611 = 0.959999978542327880859375 - _994;
    float _2612 = 0.959999978542327880859375 - _995;
    float _2619 = 1.0 - _2572;
    float _2630 = (0.5 / (((_2587 * ((_2586 * _2619) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2619) + _2572) * _2586))) * _2586;
    float _4666 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2632 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
    uint _2646 = _2311 + 9u;
    float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _849) * 0.949999988079071044921875);
    float _2658 = _2657 * _2657;
    float _2659 = cbLight._m0[_2351].x + _926;
    float _2660 = cbLight._m0[_2351].y + _927;
    float _2661 = cbLight._m0[_2351].z + _928;
    float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
    float _2666 = _2665 * _2659;
    float _2667 = _2665 * _2660;
    float _2668 = _2665 * _2661;
    float _2669 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2351].xyz));
    float _4677 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2673 = dot(vec3(_846, _847, _848), vec3(_2666, _2667, _2668));
    float _4688 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2677 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2666, _2667, _2668));
    float _4699 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2681 = _2658 * _2658;
    float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
    float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
    float _2699 = 1.0 - _2658;
    float _2709 = (0.5 / (((_2587 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2699) + _2658) * _2672))) * _2672;
    float _4710 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2711 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
    float _2721 = (((((_2692 * _2609) + _996) * cbLight._m0[_2646].x) * _2711) * _2334) + ((((cbLight._m0[_2558].x * _2300) * ((_2608 * _2609) + _996)) * _2632) * _2347);
    float _2722 = (((((_2692 * _2611) + _998) * cbLight._m0[_2646].y) * _2711) * _2334) + ((((cbLight._m0[_2558].y * _2302) * ((_2608 * _2611) + _998)) * _2632) * _2347);
    float _2723 = (((((_2692 * _2612) + _999) * cbLight._m0[_2646].z) * _2711) * _2334) + ((((cbLight._m0[_2558].z * _2304) * ((_2608 * _2612) + _999)) * _2632) * _2347);
    float _2779;
    float _2781;
    float _2783;
    if (_2387)
    {
        _2779 = _2721;
        _2781 = _2722;
        _2783 = _2723;
    }
    else
    {
        uint _2785 = _2311 + 2u;
        uint _2789 = _2311 + 10u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _849) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _926;
        float _2806 = cbLight._m0[_2785].y + _927;
        float _2807 = cbLight._m0[_2785].z + _928;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2785].xyz));
        float _4721 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2819 = dot(vec3(_846, _847, _848), vec3(_2812, _2813, _2814));
        float _4732 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4743 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
        float _2845 = 1.0 - _2804;
        float _2855 = (0.5 / (((_2587 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2845) + _2804) * _2818))) * _2818;
        float _4754 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2779 = (((((_2838 * _2609) + _996) * cbLight._m0[_2789].x) * _2857) * _2858) + _2721;
        _2781 = (((((_2838 * _2611) + _998) * cbLight._m0[_2789].y) * _2857) * _2858) + _2722;
        _2783 = (((((_2838 * _2612) + _999) * cbLight._m0[_2789].z) * _2857) * _2858) + _2723;
    }
    float _2889;
    float _2891;
    float _2893;
    if (_2496)
    {
        _2889 = _2779;
        _2891 = _2781;
        _2893 = _2783;
    }
    else
    {
        uint _2900 = _2311 + 3u;
        uint _2904 = _2311 + 11u;
        float _2918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2900].w)) * _849) * 0.949999988079071044921875);
        float _2919 = _2918 * _2918;
        float _2920 = cbLight._m0[_2900].x + _926;
        float _2921 = cbLight._m0[_2900].y + _927;
        float _2922 = cbLight._m0[_2900].z + _928;
        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
        float _2927 = _2926 * _2920;
        float _2928 = _2926 * _2921;
        float _2929 = _2926 * _2922;
        float _2930 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2900].xyz));
        float _4770 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2934 = dot(vec3(_846, _847, _848), vec3(_2927, _2928, _2929));
        float _4781 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2938 = dot(vec3(cbLight._m0[_2900].xyz), vec3(_2927, _2928, _2929));
        float _4792 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2942 = _2919 * _2919;
        float _2946 = ((_2937 * _2937) * (_2942 + (-1.0))) + 1.0;
        float _2953 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
        float _2960 = 1.0 - _2919;
        float _2970 = (0.5 / (((_2587 * ((_2933 * _2960) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2960) + _2919) * _2933))) * _2933;
        float _4803 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2972 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2942 / ((_2946 * _2946) * 3.141590118408203125));
        float _2973 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2889 = (((((_2953 * _2609) + _996) * cbLight._m0[_2904].x) * _2972) * _2973) + _2779;
        _2891 = (((((_2953 * _2611) + _998) * cbLight._m0[_2904].y) * _2972) * _2973) + _2781;
        _2893 = (((((_2953 * _2612) + _999) * cbLight._m0[_2904].z) * _2972) * _2973) + _2783;
    }
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_2309.y == 0u)
    {
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.x;
        uint _3006 = uint((float(_2994.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _2995))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _2995)));
        float _3016 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3017 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        uint _3020 = uint(isnan(14.0) ? _3017 : (isnan(_3017) ? 14.0 : min(_3017, 14.0)));
        uvec4 _3025 = texelFetch(g_lightClusterGridBuffer, int(((_3020 << 2u) + (_3006 << 6u)) >> 2u));
        uint _3026 = _3025.x;
        uint _3027 = _2994.z;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((((1u << ((_3027 >> 4u) & 15u)) + 4294967295u) & _3026) == 0u) || ((_3027 & 240u) == 0u))
        {
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
        }
        else
        {
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            uint _3257 = 0u;
            uint _3266;
            bool _3267;
            for (;;)
            {
                _3266 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                _3267 = _3266 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3267)
                {
                    frontier_phi_66_pred = _3256;
                    frontier_phi_66_pred_1 = _3255;
                    frontier_phi_66_pred_2 = _3254;
                    frontier_phi_66_pred_3 = _3253;
                    frontier_phi_66_pred_4 = _3252;
                    frontier_phi_66_pred_5 = _3251;
                }
                else
                {
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    float _3380;
                    uint _3381;
                    _3375 = _3251;
                    _3376 = _3252;
                    _3377 = _3253;
                    _3378 = _3254;
                    _3379 = _3255;
                    _3380 = _3256;
                    _3381 = _3266;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    for (;;)
                    {
                        uint _3385 = uint(findLSB(_3381)) + (_3257 << 5u);
                        uint _3382 = (_3381 + 4294967295u) & _3381;
                        uint _3387 = _3385 * 48u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3407 = (_3385 * 48u) + 4u;
                        vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 3u)).x));
                        uint _3426 = (_3385 * 48u) + 8u;
                        vec3 _3437 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3426)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3426 + 2u)).x));
                        float _3441 = _3401.x - _2085;
                        float _3442 = _3401.y - _2086;
                        float _3443 = _3401.z - _2087;
                        float _3444 = dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443));
                        float _3447 = inversesqrt(_3444);
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3451 = dot(vec3(_953, _956, _959), vec3(_3448, _3449, _3450));
                        float _3456 = 1.0 - (_3444 * _3401.w);
                        float _4829 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3457 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3458 = sqrt(_3444) * _3420.w;
                        float _3461 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3451) + _3462;
                        float _3468 = _3458 * _3458;
                        float _3472 = ((isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0))) * _3457) / ((_3468 * 0.699999988079071044921875) + 1.0);
                        float _3476 = (-0.0) - _2085;
                        float _3477 = (-0.0) - _2086;
                        float _3478 = (-0.0) - _2087;
                        float _3482 = inversesqrt(dot(vec3(_3476, _3477, _3478), vec3(_3476, _3477, _3478)));
                        float _3483 = _3482 * _3476;
                        float _3484 = _3482 * _3477;
                        float _3485 = _3482 * _3478;
                        float _3492 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                        float _3493 = 1.0 - _1028;
                        float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                        float _3501 = _3500 * _3500;
                        float _3502 = _3501 * _3501;
                        float _3503 = _3483 + _3448;
                        float _3504 = _3484 + _3449;
                        float _3505 = _3485 + _3450;
                        float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                        float _3513 = dot(vec3(_953, _956, _959), vec3(_3483, _3484, _3485));
                        float _4845 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3517 = dot(vec3(_953, _956, _959), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                        float _4856 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3520 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                        float _3525 = _3461 * _3501;
                        float _3526 = _3525 * _3525;
                        float _3529 = ((1.0 - _3526) * _3451) + _3526;
                        float _4867 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3530 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3531 = 1.0 - _3501;
                        float _3541 = (0.5 / (((_3530 * ((_3516 * _3531) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3501) * _3516))) * _3530;
                        float _4878 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3552 = (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3524 * _3524) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125))) * _3457;
                        _3310 = (_3472 * _3420.x) + _3378;
                        _3311 = (_3472 * _3420.y) + _3379;
                        _3312 = (_3472 * _3420.z) + _3380;
                        _3307 = (_3552 * _3437.x) + _3375;
                        _3308 = (_3552 * _3437.y) + _3376;
                        _3309 = (_3552 * _3437.z) + _3377;
                        if (_3382 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3375 = _3307;
                            _3376 = _3308;
                            _3377 = _3309;
                            _3378 = _3310;
                            _3379 = _3311;
                            _3380 = _3312;
                            _3381 = _3382;
                        }
                    }
                    frontier_phi_66_pred = _3312;
                    frontier_phi_66_pred_1 = _3311;
                    frontier_phi_66_pred_2 = _3310;
                    frontier_phi_66_pred_3 = _3309;
                    frontier_phi_66_pred_4 = _3308;
                    frontier_phi_66_pred_5 = _3307;
                }
                _3117 = frontier_phi_66_pred;
                _3115 = frontier_phi_66_pred_1;
                _3113 = frontier_phi_66_pred_2;
                _3111 = frontier_phi_66_pred_3;
                _3109 = frontier_phi_66_pred_4;
                _3107 = frontier_phi_66_pred_5;
                uint _3258 = _3257 + 1u;
                if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3251 = _3107;
                    _3252 = _3109;
                    _3253 = _3111;
                    _3254 = _3113;
                    _3255 = _3115;
                    _3256 = _3117;
                    _3257 = _3258;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
        }
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.z;
        uint _3123 = (_3121 >> 8u) & 15u;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((4294967295u << _3123) & _3026) == 0u)
        {
            _3219 = _3106;
            _3221 = _3108;
            _3223 = _3110;
            _3225 = _3112;
            _3227 = _3114;
            _3229 = _3116;
        }
        else
        {
            float _3244 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _3245 = _3244 * _2085;
            float _3246 = _3244 * _2086;
            float _3247 = _3244 * _2087;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3123 < ((_3121 >> 12u) & 15u))
            {
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3358 = _3106;
                float _3359 = _3108;
                float _3360 = _3110;
                float _3361 = _3112;
                float _3362 = _3114;
                float _3363 = _3116;
                uint _3364 = _3123;
                uint _3373;
                bool _3374;
                for (;;)
                {
                    _3373 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3364 << 2u)) >> 2u)).x;
                    _3374 = _3373 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3374)
                    {
                        frontier_phi_72_pred = _3363;
                        frontier_phi_72_pred_1 = _3362;
                        frontier_phi_72_pred_2 = _3361;
                        frontier_phi_72_pred_3 = _3360;
                        frontier_phi_72_pred_4 = _3359;
                        frontier_phi_72_pred_5 = _3358;
                    }
                    else
                    {
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3570 = _3358;
                        float _3571 = _3359;
                        float _3572 = _3360;
                        float _3573 = _3361;
                        float _3574 = _3362;
                        float _3575 = _3363;
                        uint _3576 = _3373;
                        uint _3577;
                        vec4 _3602;
                        float _3603;
                        vec4 _3618;
                        vec3 _3630;
                        vec4 _3645;
                        vec4 _3660;
                        float _3706;
                        bool _3707;
                        for (;;)
                        {
                            uint _3587 = ((_3364 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3576));
                            _3577 = (_3576 + 4294967295u) & _3576;
                            uint _3589 = _3587 * 40u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            _3603 = _3602.w;
                            uint _3605 = (_3587 * 40u) + 4u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3587 * 40u) + 8u;
                            _3630 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x));
                            uint _3632 = (_3587 * 40u) + 16u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3587 * 40u) + 20u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3587 * 40u) + 24u;
                            vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3681 = (_3587 * 40u) + 28u;
                            vec4 _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            _3706 = fma(_2087, _3694.z, fma(_2086, _3694.y, _3694.x * _2085)) + _3694.w;
                            _3707 = !((fma(_2087, _3675.z, fma(_2086, _3675.y, _3675.x * _2085)) + _3675.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3707)
                            {
                                float _3734 = _3602.x - _2085;
                                float _3735 = _3602.y - _2086;
                                float _3736 = _3602.z - _2087;
                                float _3737 = dot(vec3(_3734, _3735, _3736), vec3(_3734, _3735, _3736));
                                float _3740 = inversesqrt(_3737);
                                float _3741 = _3740 * _3734;
                                float _3742 = _3740 * _3735;
                                float _3743 = _3740 * _3736;
                                float _3747 = 1.0 - (_3737 / (_3603 * _3603));
                                float _4889 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3752 = sqrt(_3737) * _3618.w;
                                float _3754 = 1.39999997615814208984375 / (_3752 + 1.39999997615814208984375);
                                float _3755 = _3754 * _3754;
                                float _3758 = ((1.0 - _3755) * dot(vec3(_3741, _3742, _3743), vec3(_953, _956, _959))) + _3755;
                                float _3761 = _3752 * _3752;
                                float _3765 = (fma(_2087, _3645.z, fma(_2086, _3645.y, _3645.x * _2085)) + _3645.w) / _3706;
                                float _3766 = (fma(_2087, _3660.z, fma(_2086, _3660.y, _3660.x * _2085)) + _3660.w) / _3706;
                                float _3770 = 1.0 - dot(vec2(_3765, _3766), vec2(_3765, _3766));
                                float _4905 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3772 = _3771 * (((isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0))) * _3748) / ((_3761 * 0.699999988079071044921875) + 1.0));
                                float _3784 = exp2(log2(1.0 / ((_3761 * 3.5) + 5.0)) * 0.25);
                                float _3785 = 1.0 - _1028;
                                float _3792 = sqrt(1.0 - ((1.0 - (_3785 * _3785)) * (1.0 - (_3784 * _3784))));
                                float _3793 = _3792 * _3792;
                                float _3794 = _3793 * _3793;
                                float _3795 = _3741 - _3245;
                                float _3796 = _3742 - _3246;
                                float _3797 = _3743 - _3247;
                                float _3801 = inversesqrt(dot(vec3(_3795, _3796, _3797), vec3(_3795, _3796, _3797)));
                                float _3805 = dot(vec3(_953, _956, _959), vec3((-0.0) - _3245, (-0.0) - _3246, (-0.0) - _3247));
                                float _4916 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3808 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3809 = dot(vec3(_953, _956, _959), vec3(_3801 * _3795, _3801 * _3796, _3801 * _3797));
                                float _4927 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3812 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3816 = ((_3812 * _3812) * (_3794 + (-1.0))) + 1.0;
                                float _3817 = _3754 * _3793;
                                float _3818 = _3817 * _3817;
                                float _3824 = ((1.0 - _3818) * dot(vec3(_953, _956, _959), vec3(_3741, _3742, _3743))) + _3818;
                                float _4938 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3826 = 1.0 - _3793;
                                float _3836 = (0.5 / (((_3825 * ((_3808 * _3826) + _3793)) + 9.9999999392252902907785028219223e-09) + (((_3825 * _3826) + _3793) * _3808))) * _3825;
                                float _4949 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3846 = (_3771 * _3748) * (((_3794 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3816 * _3816) * ((_3761 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3772 * _3618.y;
                                frontier_phi_78_pred_1 = _3772 * _3618.x;
                                frontier_phi_78_pred_2 = _3846 * _3630.z;
                                frontier_phi_78_pred_3 = _3846 * _3630.y;
                                frontier_phi_78_pred_4 = _3846 * _3630.x;
                                frontier_phi_78_pred_5 = _3772 * _3618.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3854 = frontier_phi_78_pred;
                            _3853 = frontier_phi_78_pred_1;
                            _3852 = frontier_phi_78_pred_2;
                            _3851 = frontier_phi_78_pred_3;
                            _3850 = frontier_phi_78_pred_4;
                            _3855 = frontier_phi_78_pred_5;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            if (_3577 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3577;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3562;
                        frontier_phi_72_pred_1 = _3561;
                        frontier_phi_72_pred_2 = _3560;
                        frontier_phi_72_pred_3 = _3559;
                        frontier_phi_72_pred_4 = _3558;
                        frontier_phi_72_pred_5 = _3557;
                    }
                    _3230 = frontier_phi_72_pred;
                    _3228 = frontier_phi_72_pred_1;
                    _3226 = frontier_phi_72_pred_2;
                    _3224 = frontier_phi_72_pred_3;
                    _3222 = frontier_phi_72_pred_4;
                    _3220 = frontier_phi_72_pred_5;
                    uint _3365 = _3364 + 1u;
                    if (_3365 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3358 = _3220;
                        _3359 = _3222;
                        _3360 = _3224;
                        _3361 = _3226;
                        _3362 = _3228;
                        _3363 = _3230;
                        _3364 = _3365;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3230;
                frontier_phi_60_61_ladder_1 = _3228;
                frontier_phi_60_61_ladder_2 = _3224;
                frontier_phi_60_61_ladder_3 = _3222;
                frontier_phi_60_61_ladder_4 = _3220;
                frontier_phi_60_61_ladder_5 = _3226;
            }
            else
            {
                frontier_phi_60_61_ladder = _3116;
                frontier_phi_60_61_ladder_1 = _3114;
                frontier_phi_60_61_ladder_2 = _3110;
                frontier_phi_60_61_ladder_3 = _3108;
                frontier_phi_60_61_ladder_4 = _3106;
                frontier_phi_60_61_ladder_5 = _3112;
            }
            _3219 = frontier_phi_60_61_ladder_4;
            _3221 = frontier_phi_60_61_ladder_3;
            _3223 = frontier_phi_60_61_ladder_2;
            _3225 = frontier_phi_60_61_ladder_5;
            _3227 = frontier_phi_60_61_ladder_1;
            _3229 = frontier_phi_60_61_ladder;
        }
        float _3234 = isnan(1.0) ? _1012 : (isnan(_1012) ? 1.0 : min(_1012, 1.0));
        _3039 = (_3234 * _3225) + _2551;
        _3041 = (_3234 * _3227) + _2553;
        _3043 = (_3234 * _3229) + _2555;
        _3045 = ((_3219 * _996) * _3234) + _2889;
        _3047 = ((_3221 * _998) * _3234) + _2891;
        _3049 = ((_3223 * _999) * _3234) + _2893;
    }
    else
    {
        _3039 = _2551;
        _3041 = _2553;
        _3043 = _2555;
        _3045 = _2889;
        _3047 = _2891;
        _3049 = _2893;
    }
    float _4965 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _4976 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4987 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    uint _3069 = _250 + 6u;
    float _3077 = _934 / cbSceneParam._m0[86u].x;
    float _3078 = _935 / cbSceneParam._m0[86u].y;
    vec4 _3092 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, (log2((isnan(cbSceneParam._m0[77u].w) ? _868 : (isnan(_868) ? cbSceneParam._m0[77u].w : min(_868, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3094 = _3092.x;
    float _3095 = _3092.y;
    float _3096 = _3092.z;
    float _3097 = _3092.w;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    if (_868 > cbSceneParam._m0[78u].w)
    {
        float _3131 = isnan(_868) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _868 : min(cbSceneParam._m0[80u].w, _868));
        float _3132 = _3131 / _868;
        float _3143 = _3132 * _919;
        float _3144 = _920 * _3132;
        float _3145 = (-0.0) - _3144;
        float _3147 = _3132 * _921;
        float _3149 = (cbSceneParam._m0[77u].w * _3145) / _3131;
        float _3150 = _3149 + cbSceneParam._m0[79u].w;
        float _3151 = cbSceneParam._m0[79u].w - _3144;
        float _3157 = sqrt(((_3143 * _3143) + (_3144 * _3144)) + (_3147 * _3147));
        float _3160 = (1.0 - (cbSceneParam._m0[77u].w / _3131)) * _3157;
        float _3165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3320;
        if (abs((_3145 - _3149) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3320 = ((((_3150 > 0.0) ? exp2(_3165 * _3150) : (2.0 - exp2(_3167 * _3150))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3160;
        }
        else
        {
            float _3280 = 1.0 / cbSceneParam._m0[80u].x;
            float _3281 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : max(_3150, _3151));
            float _3282 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : min(_3150, _3151));
            float _3291 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : min(_3281, 0.0));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            _3320 = ((abs(_3157 / _3145) * cbSceneParam._m0[80u].y) * ((((_3291 - _3292) * 2.0) - ((exp2(_3165 * (isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0)))) - exp2(_3165 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))))) * _3280)) - ((exp2(_3167 * _3291) - exp2(_3167 * _3292)) * _3280))) + (_3160 * cbSceneParam._m0[80u].z);
        }
        vec4 _3322 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, 1.0), 0.0);
        float _3331 = exp2((_3320 * (-1.44269502162933349609375)) * (1.0 - _3322.w));
        float _3332 = log2(_3331);
        float _3348 = log2(_3097);
        _3169 = (exp2(_3348 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].x)) * _3322.x) / cbSceneParam._m0[78u].x)) + _3094;
        _3171 = (exp2(_3348 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].y)) * _3322.y) / cbSceneParam._m0[78u].y)) + _3095;
        _3173 = (exp2(_3348 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3332 * cbSceneParam._m0[78u].z)) * _3322.z) / cbSceneParam._m0[78u].z)) + _3096;
        _3175 = _3331 * _3097;
    }
    else
    {
        _3169 = _3094;
        _3171 = _3095;
        _3173 = _3096;
        _3175 = _3097;
    }
    float _3187 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3188 = _3187 == 3.0;
    float _3189 = log2(_3175);
    float _3196 = exp2(_3189 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_3039 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1012))) + ((_3045 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3197 = exp2(_3189 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_3041 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1012))) + ((_3047 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3198 = exp2(_3189 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_3043 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1012))) + ((_3049 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1819)) * cbPerFrame._m0[3u].x));
    float _3207 = (_3187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3207 * (_3188 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3169)));
    SV_Target.y = _3207 * (_3188 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3171)));
    SV_Target.z = _3207 * (_3188 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3173)));
    SV_Target.w = cbInstanceData._m0[_3069].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3069].w;
}


