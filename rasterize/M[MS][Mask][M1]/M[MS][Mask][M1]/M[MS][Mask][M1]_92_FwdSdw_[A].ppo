#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1431;
float _4092;
float _4093;
float _4094;
float _4095;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _364.x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4104 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _439 = (_432 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323;
    float _440 = (_432 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324;
    float _441 = (_432 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325;
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _480 = _478.x;
    float _490 = dot(vec4(_480, _478.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _504 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _364.y) * 2.0) - ((((_480 - _490) * cbMtdParam._m0[23u].w) + _490) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4115 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _518 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_505 * ((_458.x * cbMtdParam._m0[13u].x) - _439)) + _439);
    float _521 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_505 * ((_458.y * cbMtdParam._m0[13u].y) - _440)) + _440);
    float _524 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_505 * ((_458.z * cbMtdParam._m0[13u].z) - _441)) + _441);
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _591 = ((_563.x - _582) * _432) + _582;
    float _592 = ((_563.y - _583) * _432) + _583;
    float _593 = ((_563.z - _584) * _432) + _584;
    vec4 _605 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _618 = ((_605.z - _593) * _505) + _593;
    float _621 = ((((_605.x - _591) * _505) + _591) * 2.0) + (-1.0);
    float _623 = ((((_605.y - _592) * _505) + _592) * 2.0) + (-1.0);
    float _624 = dot(vec2(_621, _623), vec2(_621, _623));
    float _4126 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _655 = (((_643.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _621;
    float _656 = (((_643.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _623;
    float _659 = fma(_629, _242, fma(_656, _249, _655 * _235));
    float _662 = fma(_629, _243, fma(_656, _250, _655 * _236));
    float _665 = fma(_629, _244, fma(_656, _251, _655 * _237));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _698 = _696.x;
    float _699 = 1.0 - _698;
    float _708 = (cbMtdParam._m0[19u].x + dot(vec4(_669 * _659, _669 * _662, _669 * _665, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_698 - _699) * cbMtdParam._m0[24u].z) + _699) * cbMtdParam._m0[21u].z);
    float _4137 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _709 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _716 = (_709 * ((_543.x * cbMtdParam._m0[18u].x) - _518)) + _518;
    float _717 = (_709 * ((_543.y * cbMtdParam._m0[18u].y) - _521)) + _521;
    float _718 = (_709 * ((_543.z * cbMtdParam._m0[18u].z) - _524)) + _524;
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _746 = _744.x;
    float _763 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _746) * _432) + _746;
    float _780 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _763) * _505) + _763;
    float _784 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _780) * cbMtdParam._m0[19u].z) + _780;
    float _786 = _784 - (_784 * _709);
    float _790 = (cbMtdParam._m0[19u].w * (_643.z - _618)) + _618;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _810 = (_803.x * 2.0) + (-1.0);
    float _811 = (_803.y * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _4148 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _820 = ((_803.z - _790) * _709) + _790;
    float _830 = ((sqrt(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) - _629) * _709) + _629;
    float _833 = (((_810 - _655) * _709) + _655) + (cbMtdParam._m0[21u].x * _655);
    float _834 = (((_811 - _656) * _709) + _656) + (cbMtdParam._m0[21u].x * _656);
    float _836 = cbMtdParam._m0[22u].x + _643.w;
    float _839 = fma(_830, _242, fma(_834, _249, _833 * _235));
    float _842 = fma(_830, _243, fma(_834, _250, _833 * _236));
    float _845 = fma(_830, _244, fma(_834, _251, _833 * _237));
    float _849 = inversesqrt(dot(vec3(_839, _842, _845), vec3(_839, _842, _845)));
    float _850 = _849 * _839;
    float _851 = _849 * _842;
    float _852 = _849 * _845;
    float _4159 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _853 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _4170 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4181 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4192 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4203 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4214 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _858 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _872 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _923 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _913);
    float _924 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _913);
    float _925 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _913);
    float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
    float _930 = _923 * _929;
    float _931 = _924 * _929;
    float _932 = _925 * _929;
    vec4 _937 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _939 = _937.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1111 = sqrt(((_923 * _923) + (_924 * _924)) + (_925 * _925));
        float _1117 = (cbMatDynParam._m0[5u].x * _1111) + cbMatDynParam._m0[5u].y;
        float _4225 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1122 = (cbMatDynParam._m0[5u].z * _1111) + cbMatDynParam._m0[5u].w;
        float _4236 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) - _1118)) + _1118) < ((_939 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _950 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _951 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _969 = fma(_852, cbSceneParam._m0[5u].z, fma(_851, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _850));
    float _972 = fma(_852, cbSceneParam._m0[6u].z, fma(_851, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _850));
    float _975 = fma(_852, cbSceneParam._m0[7u].z, fma(_851, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _850));
    uint _988 = _254 + 9u;
    uint _989 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _995 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * cbInstanceData._m0[_989].x;
    float _996 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_989].y;
    float _997 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_989].z;
    float _4247 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _1001 = 1.0 - _858;
    float _1002 = _998 * _1001;
    float _1003 = _999 * _1001;
    float _1004 = _1000 * _1001;
    float _1009 = (_998 + (-0.039999999105930328369140625)) * _858;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _858;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _858;
    float _1012 = _1009 + 0.039999999105930328369140625;
    float _1014 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    vec4 _1024 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _950, cbSceneParam._m0[86u].y * _951));
    float _1028 = ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * TEXCOORD_5.w) * _1024.x;
    float _1029 = dot(vec3(_850, _851, _852), vec3(_930, _931, _932));
    float _1032 = _1029 * 2.0;
    float _1036 = (_1032 * _850) - _930;
    float _1037 = (_1032 * _851) - _931;
    float _1038 = (_1032 * _852) - _932;
    float _1042 = abs(dot(vec3(_930, _931, _932), vec3(_850, _851, _852)));
    float _4280 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1044 = sqrt(_853);
    float _1057 = exp2((_1044 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1044 * 3.0));
    float _1063 = (1.0 - _1057) * ((_1044 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1064 = _1057 * _1044;
    float _1092 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1096 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1100, cbModelParam._m0[26u].z, fma(_1096, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1092));
        float _1159 = fma(_1100, cbModelParam._m0[27u].z, fma(_1096, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1092));
        float _1163 = fma(_1100, cbModelParam._m0[28u].z, fma(_1096, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1092));
        float _1188 = _1092 + _850;
        float _1189 = _1096 + _851;
        float _1190 = _1100 + _852;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_850, _851, _852), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4328 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_850, _851, _852), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4361 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_850, _851, _852), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4394 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1472 = fma(_1100, cbModelParam._m0[30u].z, fma(_1096, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1092));
        float _1476 = fma(_1100, cbModelParam._m0[31u].z, fma(_1096, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1092));
        float _1480 = fma(_1100, cbModelParam._m0[32u].z, fma(_1096, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1092));
        float _1503 = _1092 + _850;
        float _1504 = _1096 + _851;
        float _1505 = _1100 + _852;
        float _1515 = fma(_1505, cbModelParam._m0[30u].z, fma(_1504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1503)) - _1472;
        float _1516 = fma(_1505, cbModelParam._m0[31u].z, fma(_1504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1503)) - _1476;
        float _1517 = fma(_1505, cbModelParam._m0[32u].z, fma(_1504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1503)) - _1480;
        float _1521 = inversesqrt(dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517)));
        float _1534 = ((_1521 * _1515) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1472 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1535 = ((_1521 * _1516) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1476 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1521 * _1517) / cbModelParam._m0[35u].z) + ((((((_1480 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1534, _1535, _1536), 0.0);
        float _1571 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1538.x + (-0.5));
        float _1573 = _1571 * (_1538.y + (-0.5));
        float _1574 = _1571 * (_1538.z + (-0.5));
        float _1581 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1545.x + (-0.5));
        float _1583 = _1581 * (_1545.y + (-0.5));
        float _1584 = _1581 * (_1545.z + (-0.5));
        float _1591 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1552.x + (-0.5));
        float _1593 = _1591 * (_1552.y + (-0.5));
        float _1594 = _1591 * (_1552.z + (-0.5));
        float _1601 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1559.x + (-0.5));
        float _1603 = _1601 * (_1559.y + (-0.5));
        float _1604 = _1601 * (_1559.z + (-0.5));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = _1572 * 0.5;
        float _1609 = _1582 * 0.5;
        float _1610 = _1592 * 0.5;
        float _1611 = dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610));
        float _1616 = (_1611 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1611);
        float _1624 = (dot(vec3(_850, _851, _852), vec3(_1616 * _1608, _1616 * _1609, _1616 * _1610)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1633 = sqrt(((_1609 * _1609) + (_1608 * _1608)) + (_1610 * _1610)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1635 = _1634 * 2.0;
        float _1639 = (1.0 - _1634) / (_1634 + 1.0);
        float _4457 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1649 = ((((1.0 - _1640) * (_1635 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1635 + 1.0))) + _1640) * _1605;
        float _1650 = _1573 * 0.5;
        float _1651 = _1583 * 0.5;
        float _1652 = _1593 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_850, _851, _852), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4490 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1677 + 1.0))) + _1682) * _1606;
        float _1692 = _1574 * 0.5;
        float _1693 = _1584 * 0.5;
        float _1694 = _1594 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_850, _851, _852), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4501 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4512 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4523 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_1719 + 1.0))) + _1724) * _1607;
        _1741 = _1574;
        _1742 = _1573;
        _1743 = _1572;
        _1744 = _1584;
        _1745 = _1583;
        _1746 = _1582;
        _1747 = _1594;
        _1748 = _1593;
        _1749 = _1592;
        _1750 = _1607;
        _1751 = _1606;
        _1752 = _1605;
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)));
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
    }
    else
    {
        _1741 = _1431;
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = _1431;
        _1752 = _1431;
        _1753 = 0.0;
        _1754 = 0.0;
        _1755 = 0.0;
    }
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1443)) + _1443;
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1444)) + _1444;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1445)) + _1445;
    float _1788 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1765));
    float _1809 = _1036 * 0.5;
    float _1810 = _1037 * 0.5;
    float _1811 = _1038 * 0.5;
    float _1812 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1815 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1818 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1852;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1825 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1829 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1833 = dot(vec4(_1809, _1810, _1811, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1840 = dot(vec4(cbModelParam._m0[39u]), vec4(_1809, _1810, _1811, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1840) ? 0.0 : (isnan(0.0) ? _1840 : max(0.0, _1840))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1863;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1854 = dot(vec4(cbModelParam._m0[40u]), vec4(_1809, _1810, _1811, 1.0));
        _1863 = dot(vec3(isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1863 = 1.0;
    }
    float _1867 = (_1863 * cbModelParam._m0[1u].x) + (_1852 * (1.0 - cbModelParam._m0[1u].x));
    float _1877 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _853);
    float _1878 = isnan(_1877) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1877 : min(cbModelParam._m0[25u].z, _1877));
    float _1958;
    float _1960;
    float _1962;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1925 = fma(_1100, cbModelParam._m0[13u].z, fma(_1096, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1092)) + cbModelParam._m0[13u].w;
        float _1929 = fma(_1100, cbModelParam._m0[14u].z, fma(_1096, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1092)) + cbModelParam._m0[14u].w;
        float _1933 = fma(_1100, cbModelParam._m0[15u].z, fma(_1096, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1092)) + cbModelParam._m0[15u].w;
        float _1936 = fma(_1038, cbModelParam._m0[13u].z, fma(_1037, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036));
        float _1939 = fma(_1038, cbModelParam._m0[14u].z, fma(_1037, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036));
        float _1942 = fma(_1038, cbModelParam._m0[15u].z, fma(_1037, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036));
        float _1970;
        if (_1936 > 0.0)
        {
            _1970 = abs((1.0 - _1925) / _1936);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1925 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1970 = frontier_phi_17_15_ladder;
        }
        float _2141;
        if (_1939 > 0.0)
        {
            _2141 = abs((1.0 - _1929) / _1939);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1939 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1929 + 1.0) / _1939);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2141 = frontier_phi_26_22_ladder;
        }
        float _2436;
        if (_1942 > 0.0)
        {
            _2436 = abs((1.0 - _1933) / _1942);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1942 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1933 + 1.0) / _1942);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2436 = frontier_phi_38_33_ladder;
        }
        float _2438 = isnan(_2141) ? _1970 : (isnan(_1970) ? _2141 : min(_1970, _2141));
        float _2439 = isnan(_2436) ? _2438 : (isnan(_2438) ? _2436 : min(_2438, _2436));
        float _2443 = (_2439 * _1936) + _1925;
        float _2444 = (_2439 * _1939) + _1929;
        float _2445 = (_2439 * _1942) + _1933;
        float _2446 = _2439 * 9.9999997473787516355514526367188e-05;
        float _2448 = (-1.0) - _2446;
        float _2450 = _2446 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2445 > _2450) || ((_2445 < _2448) || ((_2444 > _2450) || ((_2444 < _2448) || ((_2443 < _2448) || (_2443 > _2450))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2445, cbModelParam._m0[9u].z, fma(_2444, cbModelParam._m0[9u].y, _2443 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2445, cbModelParam._m0[10u].z, fma(_2444, cbModelParam._m0[10u].y, _2443 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2445, cbModelParam._m0[11u].z, fma(_2444, cbModelParam._m0[11u].y, _2443 * cbModelParam._m0[11u].x))), _1878);
            frontier_phi_16_38_ladder = _2590.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2590.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2590.x * cbModelParam._m0[1u].y;
        }
        _1958 = frontier_phi_16_38_ladder_2;
        _1960 = frontier_phi_16_38_ladder_1;
        _1962 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1946 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1036, _1037, _1038), _1878);
        _1958 = _1946.x * cbModelParam._m0[1u].y;
        _1960 = _1946.y * cbModelParam._m0[1u].y;
        _1962 = _1946.z * cbModelParam._m0[1u].y;
    }
    float _1966 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _853);
    float _1967 = isnan(_1966) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1966 : min(cbModelParam._m0[25u].w, _1966));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2020 = fma(_1100, cbModelParam._m0[21u].z, fma(_1096, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1092)) + cbModelParam._m0[21u].w;
        float _2024 = fma(_1100, cbModelParam._m0[22u].z, fma(_1096, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1092)) + cbModelParam._m0[22u].w;
        float _2028 = fma(_1100, cbModelParam._m0[23u].z, fma(_1096, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1092)) + cbModelParam._m0[23u].w;
        float _2031 = fma(_1038, cbModelParam._m0[21u].z, fma(_1037, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036));
        float _2034 = fma(_1038, cbModelParam._m0[22u].z, fma(_1037, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036));
        float _2037 = fma(_1038, cbModelParam._m0[23u].z, fma(_1037, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036));
        float _2146;
        if (_2031 > 0.0)
        {
            _2146 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2146 = frontier_phi_28_24_ladder;
        }
        float _2463;
        if (_2034 > 0.0)
        {
            _2463 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2463 = frontier_phi_40_35_ladder;
        }
        float _2801;
        if (_2037 > 0.0)
        {
            _2801 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2801 = frontier_phi_50_47_ladder;
        }
        float _2803 = isnan(_2463) ? _2146 : (isnan(_2146) ? _2463 : min(_2146, _2463));
        float _2804 = isnan(_2801) ? _2803 : (isnan(_2803) ? _2801 : min(_2803, _2801));
        float _2808 = (_2804 * _2031) + _2020;
        float _2809 = (_2804 * _2034) + _2024;
        float _2810 = (_2804 * _2037) + _2028;
        float _2811 = _2804 * 9.9999997473787516355514526367188e-05;
        float _2812 = (-1.0) - _2811;
        float _2814 = _2811 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2810 > _2814) || ((_2810 < _2812) || ((_2809 > _2814) || ((_2809 < _2812) || ((_2808 < _2812) || (_2808 > _2814))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2810, cbModelParam._m0[17u].z, fma(_2809, cbModelParam._m0[17u].y, _2808 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2810, cbModelParam._m0[18u].z, fma(_2809, cbModelParam._m0[18u].y, _2808 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2810, cbModelParam._m0[19u].z, fma(_2809, cbModelParam._m0[19u].y, _2808 * cbModelParam._m0[19u].x))), _1967);
            frontier_phi_25_50_ladder = _2932.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2932.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2932.x * cbModelParam._m0[1u].z;
        }
        _2056 = frontier_phi_25_50_ladder_2;
        _2058 = frontier_phi_25_50_ladder_1;
        _2060 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1036, _1037, _1038), _1967);
        _2056 = _2040.x * cbModelParam._m0[1u].z;
        _2058 = _2040.y * cbModelParam._m0[1u].z;
        _2060 = _2040.z * cbModelParam._m0[1u].z;
    }
    float _2073 = (((_1063 * _1012) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2056 - _1958)) + _1958);
    float _2075 = (((_1063 * _1014) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2058 - _1960)) + _1960);
    float _2077 = (((_1063 * _1015) + _1064) * _1028) * ((cbModelParam._m0[1u].w * (_2060 - _1962)) + _1962);
    float _2080 = fma(_2077, cbSceneParam._m0[89u].z, fma(_2075, cbSceneParam._m0[89u].y, _2073 * cbSceneParam._m0[89u].x));
    float _2083 = fma(_2077, cbSceneParam._m0[90u].z, fma(_2075, cbSceneParam._m0[90u].y, _2073 * cbSceneParam._m0[90u].x));
    float _2086 = fma(_2077, cbSceneParam._m0[91u].z, fma(_2075, cbSceneParam._m0[91u].y, _2073 * cbSceneParam._m0[91u].x));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2133 = _2120 / _2132;
    float _2134 = _2124 / _2132;
    float _2135 = _2128 / _2132;
    float _2282;
    float _2283;
    float _2284;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2162 = ((uint(_2135 > cbSceneParam._m0[59u].y) + uint(_2135 > cbSceneParam._m0[59u].x)) + uint(_2135 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2163 = _2162 + 43u;
        uint _2171 = _2162 + 44u;
        uint _2179 = _2162 + 45u;
        uint _2187 = _2162 + 46u;
        float _2198 = fma(_2132, cbSceneParam._m0[_2163].w, fma(_2128, cbSceneParam._m0[_2163].z, fma(_2124, cbSceneParam._m0[_2163].y, _2120 * cbSceneParam._m0[_2163].x)));
        float _2202 = fma(_2132, cbSceneParam._m0[_2171].w, fma(_2128, cbSceneParam._m0[_2171].z, fma(_2124, cbSceneParam._m0[_2171].y, _2120 * cbSceneParam._m0[_2171].x)));
        float _2210 = fma(_2132, cbSceneParam._m0[_2187].w, fma(_2128, cbSceneParam._m0[_2187].z, fma(_2124, cbSceneParam._m0[_2187].y, _2120 * cbSceneParam._m0[_2187].x)));
        float _2215 = cbSceneParam._m0[33u].z * _2210;
        float _2217 = cbSceneParam._m0[33u].w * _2210;
        float _2220 = fma(_2132, cbSceneParam._m0[_2179].w, fma(_2128, cbSceneParam._m0[_2179].z, fma(_2124, cbSceneParam._m0[_2179].y, _2120 * cbSceneParam._m0[_2179].x))) / _2210;
        float _2268 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
        float _4649 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2275 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2215 + _2198) / _2210, (_2217 + _2202) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2217 + _2198) / _2210, (_2202 - _2215) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2215) / _2210, (_2202 - _2217) / _2210), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2198 - _2217) / _2210, (_2215 + _2202) / _2210), _2220), 0.0)).x), vec4(0.25)));
        _2282 = 1.0 - (_2275 * cbSceneParam._m0[34u].x);
        _2283 = 1.0 - (_2275 * cbSceneParam._m0[34u].y);
        _2284 = 1.0 - (_2275 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2282 = 1.0;
        _2283 = 1.0;
        _2284 = 1.0;
    }
    float _2348;
    float _2350;
    float _2352;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2336 = fma(_2132, cbSceneParam._m0[63u].w, fma(_2128, cbSceneParam._m0[63u].z, fma(_2124, cbSceneParam._m0[63u].y, _2120 * cbSceneParam._m0[63u].x)));
        float _2337 = fma(_2132, cbSceneParam._m0[60u].w, fma(_2128, cbSceneParam._m0[60u].z, fma(_2124, cbSceneParam._m0[60u].y, _2120 * cbSceneParam._m0[60u].x))) / _2336;
        float _2338 = fma(_2132, cbSceneParam._m0[61u].w, fma(_2128, cbSceneParam._m0[61u].z, fma(_2124, cbSceneParam._m0[61u].y, _2120 * cbSceneParam._m0[61u].x))) / _2336;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2337 >= cbSceneParam._m0[64u].x) && (_2338 >= cbSceneParam._m0[64u].y)) && (_2337 <= cbSceneParam._m0[64u].z)) && (_2338 <= cbSceneParam._m0[64u].w))
        {
            float _2476 = fma(_2132, cbSceneParam._m0[62u].w, fma(_2128, cbSceneParam._m0[62u].z, fma(_2124, cbSceneParam._m0[62u].y, _2120 * cbSceneParam._m0[62u].x))) / _2336;
            float _2480 = isnan(cbSceneParam._m0[41u].w) ? _2476 : (isnan(_2476) ? cbSceneParam._m0[41u].w : max(_2476, cbSceneParam._m0[41u].w));
            float _2523 = (cbSceneParam._m0[33u].x - sqrt(((_2134 * _2134) + (_2133 * _2133)) + (_2135 * _2135))) * cbSceneParam._m0[33u].y;
            float _4665 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
            float _2530 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2337, cbSceneParam._m0[33u].w + _2338), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2337, _2338 - cbSceneParam._m0[33u].z), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].z, _2338 - cbSceneParam._m0[33u].w), _2480), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2337 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2338), _2480), 0.0)).x), vec4(0.25)));
            float _2534 = 1.0 - (_2530 * cbSceneParam._m0[34u].x);
            float _2535 = 1.0 - (_2530 * cbSceneParam._m0[34u].y);
            float _2536 = 1.0 - (_2530 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2536) ? _2284 : (isnan(_2284) ? _2536 : min(_2284, _2536));
            frontier_phi_37_36_ladder_1 = isnan(_2535) ? _2283 : (isnan(_2283) ? _2535 : min(_2283, _2535));
            frontier_phi_37_36_ladder_2 = isnan(_2534) ? _2282 : (isnan(_2282) ? _2534 : min(_2282, _2534));
        }
        else
        {
            frontier_phi_37_36_ladder = _2284;
            frontier_phi_37_36_ladder_1 = _2283;
            frontier_phi_37_36_ladder_2 = _2282;
        }
        _2348 = frontier_phi_37_36_ladder_2;
        _2350 = frontier_phi_37_36_ladder_1;
        _2352 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2348 = _2282;
        _2350 = _2283;
        _2352 = _2284;
    }
    uvec4 _2357 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2359 = _2357.x * 14u;
    uint _2360 = _2359 + 13u;
    float _2367 = _1028 + (-1.0);
    float _2372 = (cbLight._m0[_2360].x * _2367) + 1.0;
    float _2373 = (cbLight._m0[_2360].y * _2367) + 1.0;
    float _2374 = (cbLight._m0[_2360].z * _2367) + 1.0;
    float _2375 = (cbLight._m0[_2360].w * _2367) + 1.0;
    uint _2376 = _2359 + 5u;
    float _2382 = isnan(1.0) ? _2373 : (isnan(_2373) ? 1.0 : min(_2373, 1.0));
    uint _2386 = _2359 + 4u;
    float _2395 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    uint _2399 = _2359 | 1u;
    float _2410 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_850, _851, _852));
    float _2413 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_850, _851, _852));
    float _4701 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _4712 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2418 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2420 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * 0.3183098733425140380859375;
    float _2427 = ((cbLight._m0[_2376].x * _2382) * _2420) + (((cbLight._m0[_2386].x * _2348) * _2395) * _2418);
    float _2428 = ((_2382 * cbLight._m0[_2376].y) * _2420) + (((cbLight._m0[_2386].y * _2350) * _2395) * _2418);
    float _2429 = ((_2382 * cbLight._m0[_2376].z) * _2420) + (((cbLight._m0[_2386].z * _2352) * _2395) * _2418);
    uvec4 _2433 = floatBitsToUint(cbLight._m0[_2359 + 12u]);
    bool _2435 = _2433.x == 0u;
    float _2537;
    float _2539;
    float _2541;
    if (_2435)
    {
        _2537 = _2427;
        _2539 = _2428;
        _2541 = _2429;
    }
    else
    {
        uint _2545 = _2359 + 6u;
        float _2561 = (dot(vec3(cbLight._m0[_2359 + 2u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2562 = _2561 * _2561;
        float _4723 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2563 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2564 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2537 = (((cbLight._m0[_2545].x * 0.3183098733425140380859375) * _2563) * _2564) + _2427;
        _2539 = (((cbLight._m0[_2545].y * 0.3183098733425140380859375) * _2563) * _2564) + _2428;
        _2541 = (((cbLight._m0[_2545].z * 0.3183098733425140380859375) * _2563) * _2564) + _2429;
    }
    bool _2544 = _2433.y == 0u;
    float _2599;
    float _2601;
    float _2603;
    if (_2544)
    {
        _2599 = _2537;
        _2601 = _2539;
        _2603 = _2541;
    }
    else
    {
        uint _2772 = _2359 + 7u;
        float _2788 = (dot(vec3(cbLight._m0[_2359 + 3u].xyz), vec3(_850, _851, _852)) * 0.5) + 0.5;
        float _2789 = _2788 * _2788;
        float _4739 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2790 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2791 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2599 = (((cbLight._m0[_2772].x * 0.3183098733425140380859375) * _2790) * _2791) + _2537;
        _2601 = (((cbLight._m0[_2772].y * 0.3183098733425140380859375) * _2790) * _2791) + _2539;
        _2603 = (((cbLight._m0[_2772].z * 0.3183098733425140380859375) * _2790) * _2791) + _2541;
    }
    uint _2606 = _2359 + 8u;
    float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _853) * 0.949999988079071044921875);
    float _2620 = _2619 * _2619;
    float _2621 = cbLight._m0[_2359].x + _930;
    float _2622 = cbLight._m0[_2359].y + _931;
    float _2623 = cbLight._m0[_2359].z + _932;
    float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
    float _2628 = _2627 * _2621;
    float _2629 = _2627 * _2622;
    float _2630 = _2627 * _2623;
    float _2631 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2359].xyz));
    float _4755 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _4766 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _2635 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2636 = dot(vec3(_850, _851, _852), vec3(_2628, _2629, _2630));
    float _4777 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _2640 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2628, _2629, _2630));
    float _4788 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2644 = _2620 * _2620;
    float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
    float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
    float _2657 = 0.959999978542327880859375 - _1009;
    float _2659 = 0.959999978542327880859375 - _1010;
    float _2660 = 0.959999978542327880859375 - _1011;
    float _2667 = 1.0 - _2620;
    float _2678 = (0.5 / (((_2635 * ((_2634 * _2667) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2667) + _2620) * _2634))) * _2634;
    float _4799 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2680 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
    uint _2694 = _2359 + 9u;
    float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2399].w)) * _853) * 0.949999988079071044921875);
    float _2706 = _2705 * _2705;
    float _2707 = cbLight._m0[_2399].x + _930;
    float _2708 = cbLight._m0[_2399].y + _931;
    float _2709 = cbLight._m0[_2399].z + _932;
    float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
    float _2714 = _2713 * _2707;
    float _2715 = _2713 * _2708;
    float _2716 = _2713 * _2709;
    float _2717 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2399].xyz));
    float _4810 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
    float _2720 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2721 = dot(vec3(_850, _851, _852), vec3(_2714, _2715, _2716));
    float _4821 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2724 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
    float _2725 = dot(vec3(cbLight._m0[_2399].xyz), vec3(_2714, _2715, _2716));
    float _4832 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2729 = _2706 * _2706;
    float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
    float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) * 5.0);
    float _2747 = 1.0 - _2706;
    float _2757 = (0.5 / (((_2635 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2747) + _2706) * _2720))) * _2720;
    float _4843 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2759 = (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
    float _2769 = (((((_2740 * _2657) + _1012) * cbLight._m0[_2694].x) * _2759) * _2382) + ((((cbLight._m0[_2606].x * _2348) * ((_2656 * _2657) + _1012)) * _2680) * _2395);
    float _2770 = (((((_2740 * _2659) + _1014) * cbLight._m0[_2694].y) * _2759) * _2382) + ((((cbLight._m0[_2606].y * _2350) * ((_2656 * _2659) + _1014)) * _2680) * _2395);
    float _2771 = (((((_2740 * _2660) + _1015) * cbLight._m0[_2694].z) * _2759) * _2382) + ((((cbLight._m0[_2606].z * _2352) * ((_2656 * _2660) + _1015)) * _2680) * _2395);
    float _2827;
    float _2829;
    float _2831;
    if (_2435)
    {
        _2827 = _2769;
        _2829 = _2770;
        _2831 = _2771;
    }
    else
    {
        uint _2833 = _2359 + 2u;
        uint _2837 = _2359 + 10u;
        float _2851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2833].w)) * _853) * 0.949999988079071044921875);
        float _2852 = _2851 * _2851;
        float _2853 = cbLight._m0[_2833].x + _930;
        float _2854 = cbLight._m0[_2833].y + _931;
        float _2855 = cbLight._m0[_2833].z + _932;
        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
        float _2860 = _2859 * _2853;
        float _2861 = _2859 * _2854;
        float _2862 = _2859 * _2855;
        float _2863 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2833].xyz));
        float _4854 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2867 = dot(vec3(_850, _851, _852), vec3(_2860, _2861, _2862));
        float _4865 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2870 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2871 = dot(vec3(cbLight._m0[_2833].xyz), vec3(_2860, _2861, _2862));
        float _4876 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2875 = _2852 * _2852;
        float _2879 = ((_2870 * _2870) * (_2875 + (-1.0))) + 1.0;
        float _2886 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
        float _2893 = 1.0 - _2852;
        float _2903 = (0.5 / (((_2635 * ((_2866 * _2893) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _2893) + _2852) * _2866))) * _2866;
        float _4887 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2905 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2875 / ((_2879 * _2879) * 3.141590118408203125));
        float _2906 = isnan(1.0) ? _2374 : (isnan(_2374) ? 1.0 : min(_2374, 1.0));
        _2827 = (((((_2886 * _2657) + _1012) * cbLight._m0[_2837].x) * _2905) * _2906) + _2769;
        _2829 = (((((_2886 * _2659) + _1014) * cbLight._m0[_2837].y) * _2905) * _2906) + _2770;
        _2831 = (((((_2886 * _2660) + _1015) * cbLight._m0[_2837].z) * _2905) * _2906) + _2771;
    }
    float _2937;
    float _2939;
    float _2941;
    if (_2544)
    {
        _2937 = _2827;
        _2939 = _2829;
        _2941 = _2831;
    }
    else
    {
        uint _2948 = _2359 + 3u;
        uint _2952 = _2359 + 11u;
        float _2966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2948].w)) * _853) * 0.949999988079071044921875);
        float _2967 = _2966 * _2966;
        float _2968 = cbLight._m0[_2948].x + _930;
        float _2969 = cbLight._m0[_2948].y + _931;
        float _2970 = cbLight._m0[_2948].z + _932;
        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
        float _2975 = _2974 * _2968;
        float _2976 = _2974 * _2969;
        float _2977 = _2974 * _2970;
        float _2978 = dot(vec3(_850, _851, _852), vec3(cbLight._m0[_2948].xyz));
        float _4903 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        float _2981 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _2982 = dot(vec3(_850, _851, _852), vec3(_2975, _2976, _2977));
        float _4914 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2985 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
        float _2986 = dot(vec3(cbLight._m0[_2948].xyz), vec3(_2975, _2976, _2977));
        float _4925 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
        float _2990 = _2967 * _2967;
        float _2994 = ((_2985 * _2985) * (_2990 + (-1.0))) + 1.0;
        float _3001 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
        float _3008 = 1.0 - _2967;
        float _3018 = (0.5 / (((_2635 * ((_2981 * _3008) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2635 * _3008) + _2967) * _2981))) * _2981;
        float _4936 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3020 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2990 / ((_2994 * _2994) * 3.141590118408203125));
        float _3021 = isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0));
        _2937 = (((((_3001 * _2657) + _1012) * cbLight._m0[_2952].x) * _3020) * _3021) + _2827;
        _2939 = (((((_3001 * _2659) + _1014) * cbLight._m0[_2952].y) * _3020) * _3021) + _2829;
        _2941 = (((((_3001 * _2660) + _1015) * cbLight._m0[_2952].z) * _3020) * _3021) + _2831;
    }
    float _3087;
    float _3089;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_2357.y == 0u)
    {
        uvec4 _3042 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3043 = _3042.x;
        uint _3054 = uint((float(_3042.y) * floor(float(uint(cbSceneParam._m0[85u].y * _951) / _3043))) + floor(float(uint(cbSceneParam._m0[85u].x * _950) / _3043)));
        float _3064 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3065 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        uint _3068 = uint(isnan(14.0) ? _3065 : (isnan(_3065) ? 14.0 : min(_3065, 14.0)));
        uvec4 _3073 = texelFetch(g_lightClusterGridBuffer, int(((_3068 << 2u) + (_3054 << 6u)) >> 2u));
        uint _3074 = _3073.x;
        uint _3075 = _3042.z;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        if (((((1u << ((_3075 >> 4u) & 15u)) + 4294967295u) & _3074) == 0u) || ((_3075 & 240u) == 0u))
        {
            _3154 = 0.0;
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
        }
        else
        {
            float _3155;
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3165;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            uint _3313 = 0u;
            uint _3322;
            bool _3323;
            for (;;)
            {
                _3322 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                _3323 = _3322 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3323)
                {
                    frontier_phi_71_pred = _3312;
                    frontier_phi_71_pred_1 = _3311;
                    frontier_phi_71_pred_2 = _3310;
                    frontier_phi_71_pred_3 = _3309;
                    frontier_phi_71_pred_4 = _3308;
                    frontier_phi_71_pred_5 = _3307;
                }
                else
                {
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    uint _3458;
                    _3452 = _3307;
                    _3453 = _3308;
                    _3454 = _3309;
                    _3455 = _3310;
                    _3456 = _3311;
                    _3457 = _3312;
                    _3458 = _3322;
                    float _3379;
                    float _3380;
                    float _3381;
                    float _3382;
                    float _3383;
                    float _3384;
                    for (;;)
                    {
                        uint _3462 = uint(findLSB(_3458)) + (_3313 << 5u);
                        uint _3459 = (_3458 + 4294967295u) & _3458;
                        uint _3464 = _3462 * 48u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3464)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3464 + 3u)).x));
                        uint _3484 = (_3462 * 48u) + 4u;
                        vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 3u)).x));
                        uint _3503 = (_3462 * 48u) + 8u;
                        vec3 _3514 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3503)).x, texelFetch(g_PointLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3503 + 2u)).x));
                        float _3518 = _3478.x - _2133;
                        float _3519 = _3478.y - _2134;
                        float _3520 = _3478.z - _2135;
                        float _3521 = dot(vec3(_3518, _3519, _3520), vec3(_3518, _3519, _3520));
                        float _3524 = inversesqrt(_3521);
                        float _3525 = _3524 * _3518;
                        float _3526 = _3524 * _3519;
                        float _3527 = _3524 * _3520;
                        float _3528 = dot(vec3(_969, _972, _975), vec3(_3525, _3526, _3527));
                        float _3533 = 1.0 - (_3521 * _3478.w);
                        float _4962 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3534 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3535 = sqrt(_3521) * _3497.w;
                        float _3538 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3528) + _3539;
                        float _3545 = _3535 * _3535;
                        float _3549 = ((isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0))) * _3534) / ((_3545 * 0.699999988079071044921875) + 1.0);
                        float _3553 = (-0.0) - _2133;
                        float _3554 = (-0.0) - _2134;
                        float _3555 = (-0.0) - _2135;
                        float _3559 = inversesqrt(dot(vec3(_3553, _3554, _3555), vec3(_3553, _3554, _3555)));
                        float _3560 = _3559 * _3553;
                        float _3561 = _3559 * _3554;
                        float _3562 = _3559 * _3555;
                        float _3569 = exp2(log2(1.0 / ((_3545 * 3.5) + 5.0)) * 0.25);
                        float _3570 = 1.0 - _1044;
                        float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                        float _3578 = _3577 * _3577;
                        float _3579 = _3578 * _3578;
                        float _3580 = _3560 + _3525;
                        float _3581 = _3561 + _3526;
                        float _3582 = _3562 + _3527;
                        float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                        float _3590 = dot(vec3(_969, _972, _975), vec3(_3560, _3561, _3562));
                        float _4978 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3593 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3594 = dot(vec3(_969, _972, _975), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                        float _4989 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                        float _3602 = _3538 * _3578;
                        float _3603 = _3602 * _3602;
                        float _3606 = ((1.0 - _3603) * _3528) + _3603;
                        float _5000 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3608 = 1.0 - _3578;
                        float _3618 = (0.5 / (((_3607 * ((_3593 * _3608) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3578) * _3593))) * _3607;
                        float _5011 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3629 = (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3601 * _3601) * ((_3545 * 2.1991131305694580078125) + 3.141590118408203125))) * _3534;
                        _3382 = (_3549 * _3497.x) + _3455;
                        _3383 = (_3549 * _3497.y) + _3456;
                        _3384 = (_3549 * _3497.z) + _3457;
                        _3379 = (_3629 * _3514.x) + _3452;
                        _3380 = (_3629 * _3514.y) + _3453;
                        _3381 = (_3629 * _3514.z) + _3454;
                        if (_3459 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3452 = _3379;
                            _3453 = _3380;
                            _3454 = _3381;
                            _3455 = _3382;
                            _3456 = _3383;
                            _3457 = _3384;
                            _3458 = _3459;
                        }
                    }
                    frontier_phi_71_pred = _3384;
                    frontier_phi_71_pred_1 = _3383;
                    frontier_phi_71_pred_2 = _3382;
                    frontier_phi_71_pred_3 = _3381;
                    frontier_phi_71_pred_4 = _3380;
                    frontier_phi_71_pred_5 = _3379;
                }
                _3165 = frontier_phi_71_pred;
                _3163 = frontier_phi_71_pred_1;
                _3161 = frontier_phi_71_pred_2;
                _3159 = frontier_phi_71_pred_3;
                _3157 = frontier_phi_71_pred_4;
                _3155 = frontier_phi_71_pred_5;
                uint _3314 = _3313 + 1u;
                if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3307 = _3155;
                    _3308 = _3157;
                    _3309 = _3159;
                    _3310 = _3161;
                    _3311 = _3163;
                    _3312 = _3165;
                    _3313 = _3314;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3154 = _3155;
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
        }
        uvec4 _3168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3169 = _3168.z;
        uint _3171 = (_3169 >> 8u) & 15u;
        float _3275;
        float _3277;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        if (((4294967295u << _3171) & _3074) == 0u)
        {
            _3275 = _3154;
            _3277 = _3156;
            _3279 = _3158;
            _3281 = _3160;
            _3283 = _3162;
            _3285 = _3164;
        }
        else
        {
            float _3300 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _3301 = _3300 * _2133;
            float _3302 = _3300 * _2134;
            float _3303 = _3300 * _2135;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3171 < ((_3169 >> 12u) & 15u))
            {
                float _3276;
                float _3278;
                float _3280;
                float _3282;
                float _3284;
                float _3286;
                float _3435 = _3154;
                float _3436 = _3156;
                float _3437 = _3158;
                float _3438 = _3160;
                float _3439 = _3162;
                float _3440 = _3164;
                uint _3441 = _3171;
                uint _3450;
                bool _3451;
                for (;;)
                {
                    _3450 = texelFetch(g_lightClassification, int((((_3068 << 5u) + (_3054 << 9u)) + (_3441 << 2u)) >> 2u)).x;
                    _3451 = _3450 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3451)
                    {
                        frontier_phi_82_pred = _3440;
                        frontier_phi_82_pred_1 = _3439;
                        frontier_phi_82_pred_2 = _3438;
                        frontier_phi_82_pred_3 = _3437;
                        frontier_phi_82_pred_4 = _3436;
                        frontier_phi_82_pred_5 = _3435;
                    }
                    else
                    {
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3939;
                        float _3940;
                        float _3941;
                        float _3656 = _3435;
                        float _3657 = _3436;
                        float _3658 = _3437;
                        float _3659 = _3438;
                        float _3660 = _3439;
                        float _3661 = _3440;
                        uint _3662 = _3450;
                        uint _3663;
                        vec4 _3688;
                        float _3689;
                        vec4 _3704;
                        vec3 _3716;
                        vec4 _3731;
                        vec4 _3746;
                        float _3792;
                        bool _3793;
                        for (;;)
                        {
                            uint _3673 = ((_3441 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3662));
                            _3663 = (_3662 + 4294967295u) & _3662;
                            uint _3675 = _3673 * 40u;
                            _3688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3675 + 3u)).x));
                            _3689 = _3688.w;
                            uint _3691 = (_3673 * 40u) + 4u;
                            _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            uint _3706 = (_3673 * 40u) + 8u;
                            _3716 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3706 + 2u)).x));
                            uint _3718 = (_3673 * 40u) + 16u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3673 * 40u) + 20u;
                            _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3748 = (_3673 * 40u) + 24u;
                            vec4 _3761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3748 + 3u)).x));
                            uint _3767 = (_3673 * 40u) + 28u;
                            vec4 _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            _3792 = fma(_2135, _3780.z, fma(_2134, _3780.y, _3780.x * _2133)) + _3780.w;
                            _3793 = !((fma(_2135, _3761.z, fma(_2134, _3761.y, _3761.x * _2133)) + _3761.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3793)
                            {
                                float _3820 = _3688.x - _2133;
                                float _3821 = _3688.y - _2134;
                                float _3822 = _3688.z - _2135;
                                float _3823 = dot(vec3(_3820, _3821, _3822), vec3(_3820, _3821, _3822));
                                float _3826 = inversesqrt(_3823);
                                float _3827 = _3826 * _3820;
                                float _3828 = _3826 * _3821;
                                float _3829 = _3826 * _3822;
                                float _3833 = 1.0 - (_3823 / (_3689 * _3689));
                                float _5022 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3834 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3838 = sqrt(_3823) * _3704.w;
                                float _3840 = 1.39999997615814208984375 / (_3838 + 1.39999997615814208984375);
                                float _3841 = _3840 * _3840;
                                float _3844 = ((1.0 - _3841) * dot(vec3(_3827, _3828, _3829), vec3(_969, _972, _975))) + _3841;
                                float _3847 = _3838 * _3838;
                                float _3851 = (fma(_2135, _3731.z, fma(_2134, _3731.y, _3731.x * _2133)) + _3731.w) / _3792;
                                float _3852 = (fma(_2135, _3746.z, fma(_2134, _3746.y, _3746.x * _2133)) + _3746.w) / _3792;
                                float _3856 = 1.0 - dot(vec2(_3851, _3852), vec2(_3851, _3852));
                                float _5038 = isnan(0.0) ? _3856 : (isnan(_3856) ? 0.0 : max(_3856, 0.0));
                                float _3857 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3858 = _3857 * (((isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0))) * _3834) / ((_3847 * 0.699999988079071044921875) + 1.0));
                                float _3870 = exp2(log2(1.0 / ((_3847 * 3.5) + 5.0)) * 0.25);
                                float _3871 = 1.0 - _1044;
                                float _3878 = sqrt(1.0 - ((1.0 - (_3871 * _3871)) * (1.0 - (_3870 * _3870))));
                                float _3879 = _3878 * _3878;
                                float _3880 = _3879 * _3879;
                                float _3881 = _3827 - _3301;
                                float _3882 = _3828 - _3302;
                                float _3883 = _3829 - _3303;
                                float _3887 = inversesqrt(dot(vec3(_3881, _3882, _3883), vec3(_3881, _3882, _3883)));
                                float _3891 = dot(vec3(_969, _972, _975), vec3((-0.0) - _3301, (-0.0) - _3302, (-0.0) - _3303));
                                float _5049 = isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0));
                                float _3894 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3895 = dot(vec3(_969, _972, _975), vec3(_3887 * _3881, _3887 * _3882, _3887 * _3883));
                                float _5060 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3898 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3902 = ((_3898 * _3898) * (_3880 + (-1.0))) + 1.0;
                                float _3903 = _3840 * _3879;
                                float _3904 = _3903 * _3903;
                                float _3910 = ((1.0 - _3904) * dot(vec3(_969, _972, _975), vec3(_3827, _3828, _3829))) + _3904;
                                float _5071 = isnan(0.0) ? _3910 : (isnan(_3910) ? 0.0 : max(_3910, 0.0));
                                float _3911 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3912 = 1.0 - _3879;
                                float _3922 = (0.5 / (((_3911 * ((_3894 * _3912) + _3879)) + 9.9999999392252902907785028219223e-09) + (((_3911 * _3912) + _3879) * _3894))) * _3911;
                                float _5082 = isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0));
                                float _3932 = (_3857 * _3834) * (((_3880 * 3.1415927410125732421875) * (isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0)))) / ((_3902 * _3902) * ((_3847 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3858 * _3704.z;
                                frontier_phi_88_pred_1 = _3858 * _3704.y;
                                frontier_phi_88_pred_2 = _3858 * _3704.x;
                                frontier_phi_88_pred_3 = _3932 * _3716.z;
                                frontier_phi_88_pred_4 = _3932 * _3716.y;
                                frontier_phi_88_pred_5 = _3932 * _3716.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3941 = frontier_phi_88_pred;
                            _3940 = frontier_phi_88_pred_1;
                            _3939 = frontier_phi_88_pred_2;
                            _3938 = frontier_phi_88_pred_3;
                            _3937 = frontier_phi_88_pred_4;
                            _3936 = frontier_phi_88_pred_5;
                            _3646 = _3939 + _3659;
                            _3647 = _3940 + _3660;
                            _3648 = _3941 + _3661;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            if (_3663 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3646;
                                _3660 = _3647;
                                _3661 = _3648;
                                _3662 = _3663;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3648;
                        frontier_phi_82_pred_1 = _3647;
                        frontier_phi_82_pred_2 = _3646;
                        frontier_phi_82_pred_3 = _3645;
                        frontier_phi_82_pred_4 = _3644;
                        frontier_phi_82_pred_5 = _3643;
                    }
                    _3286 = frontier_phi_82_pred;
                    _3284 = frontier_phi_82_pred_1;
                    _3282 = frontier_phi_82_pred_2;
                    _3280 = frontier_phi_82_pred_3;
                    _3278 = frontier_phi_82_pred_4;
                    _3276 = frontier_phi_82_pred_5;
                    uint _3442 = _3441 + 1u;
                    if (_3442 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3435 = _3276;
                        _3436 = _3278;
                        _3437 = _3280;
                        _3438 = _3282;
                        _3439 = _3284;
                        _3440 = _3286;
                        _3441 = _3442;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3282;
                frontier_phi_63_64_ladder_1 = _3286;
                frontier_phi_63_64_ladder_2 = _3284;
                frontier_phi_63_64_ladder_3 = _3280;
                frontier_phi_63_64_ladder_4 = _3278;
                frontier_phi_63_64_ladder_5 = _3276;
            }
            else
            {
                frontier_phi_63_64_ladder = _3160;
                frontier_phi_63_64_ladder_1 = _3164;
                frontier_phi_63_64_ladder_2 = _3162;
                frontier_phi_63_64_ladder_3 = _3158;
                frontier_phi_63_64_ladder_4 = _3156;
                frontier_phi_63_64_ladder_5 = _3154;
            }
            _3275 = frontier_phi_63_64_ladder_5;
            _3277 = frontier_phi_63_64_ladder_4;
            _3279 = frontier_phi_63_64_ladder_3;
            _3281 = frontier_phi_63_64_ladder;
            _3283 = frontier_phi_63_64_ladder_2;
            _3285 = frontier_phi_63_64_ladder_1;
        }
        float _3290 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
        _3087 = (_3290 * _3281) + _2599;
        _3089 = (_3290 * _3283) + _2601;
        _3091 = (_3290 * _3285) + _2603;
        _3093 = ((_3275 * _1012) * _3290) + _2937;
        _3095 = ((_3277 * _1014) * _3290) + _2939;
        _3097 = ((_3279 * _1015) * _3290) + _2941;
    }
    else
    {
        _3087 = _2599;
        _3089 = _2601;
        _3091 = _2603;
        _3093 = _2937;
        _3095 = _2939;
        _3097 = _2941;
    }
    float _5098 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _5109 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _5120 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _3114 = ((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3087 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1028))) + ((_3093 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    float _3115 = ((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3089 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1028))) + ((_3095 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    float _3116 = ((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3091 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1028))) + ((_3097 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1867)) * cbPerFrame._m0[3u].x);
    uint _3117 = _254 + 6u;
    float _3125 = _950 / cbSceneParam._m0[86u].x;
    float _3126 = _951 / cbSceneParam._m0[86u].y;
    vec4 _3140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, (log2((isnan(cbSceneParam._m0[77u].w) ? _872 : (isnan(_872) ? cbSceneParam._m0[77u].w : min(_872, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3142 = _3140.x;
    float _3143 = _3140.y;
    float _3144 = _3140.z;
    float _3145 = _3140.w;
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    if (_872 > cbSceneParam._m0[78u].w)
    {
        float _3179 = isnan(_872) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _872 : min(cbSceneParam._m0[80u].w, _872));
        float _3180 = _3179 / _872;
        float _3191 = _3180 * _923;
        float _3192 = _924 * _3180;
        float _3193 = (-0.0) - _3192;
        float _3195 = _3180 * _925;
        float _3197 = (cbSceneParam._m0[77u].w * _3193) / _3179;
        float _3198 = _3197 + cbSceneParam._m0[79u].w;
        float _3199 = cbSceneParam._m0[79u].w - _3192;
        float _3205 = sqrt(((_3191 * _3191) + (_3192 * _3192)) + (_3195 * _3195));
        float _3208 = (1.0 - (cbSceneParam._m0[77u].w / _3179)) * _3205;
        float _3213 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3215 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3392;
        if (abs((_3193 - _3197) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3392 = ((((_3198 > 0.0) ? exp2(_3213 * _3198) : (2.0 - exp2(_3215 * _3198))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3208;
        }
        else
        {
            float _3336 = 1.0 / cbSceneParam._m0[80u].x;
            float _3337 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : max(_3198, _3199));
            float _3338 = isnan(_3199) ? _3198 : (isnan(_3198) ? _3199 : min(_3198, _3199));
            float _3347 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : min(_3337, 0.0));
            float _3348 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : min(_3338, 0.0));
            _3392 = ((abs(_3205 / _3193) * cbSceneParam._m0[80u].y) * ((((_3347 - _3348) * 2.0) - ((exp2(_3213 * (isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0)))) - exp2(_3213 * (isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))))) * _3336)) - ((exp2(_3215 * _3347) - exp2(_3215 * _3348)) * _3336))) + (_3208 * cbSceneParam._m0[80u].z);
        }
        vec4 _3394 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, 1.0), 0.0);
        float _3403 = exp2((_3392 * (-1.44269502162933349609375)) * (1.0 - _3394.w));
        float _3404 = log2(_3403);
        float _3420 = log2(_3145);
        _3217 = (exp2(_3420 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].x)) * _3394.x) / cbSceneParam._m0[78u].x)) + _3142;
        _3219 = (exp2(_3420 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].y)) * _3394.y) / cbSceneParam._m0[78u].y)) + _3143;
        _3221 = (exp2(_3420 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3404 * cbSceneParam._m0[78u].z)) * _3394.z) / cbSceneParam._m0[78u].z)) + _3144;
        _3223 = _3403 * _3145;
    }
    else
    {
        _3217 = _3142;
        _3219 = _3143;
        _3221 = _3144;
        _3223 = _3145;
    }
    bool _3430;
    vec4 _3233;
    vec4 _3255;
    float _3257;
    float _3261;
    float _3262;
    float _3263;
    float _3264;
    bool _3274;
    for (;;)
    {
        _3233 = cbMatDynParam._m0[0u];
        float _3235 = roundEven(_3233.y);
        bool _3236 = _3235 == 3.0;
        float _3237 = log2(_3223);
        float _3244 = exp2(_3237 * cbSceneParam._m0[78u].x) * _3114;
        float _3245 = exp2(_3237 * cbSceneParam._m0[78u].y) * _3115;
        float _3246 = exp2(_3237 * cbSceneParam._m0[78u].z) * _3116;
        float _3253 = _939 + (-0.5);
        _3255 = cbMtdParam._m0[1u];
        _3257 = _3255.y * _3253;
        float _3260 = (_3235 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3261 = _3260 * (_3236 ? _3244 : (_3244 + (cbSceneParam._m0[72u].w * _3217)));
        _3262 = _3260 * (_3236 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3219)));
        _3263 = _3260 * (_3236 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3221)));
        _3264 = _3253 * 0.999000012874603271484375;
        _3274 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3274)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _3264) < 0.5)
            {
                _3430 = true;
                break;
            }
        }
        uint _3371 = _988 + uint(_3233.w);
        if ((cbInstanceData._m0[_3371].w < 1.0) && ((cbInstanceData._m0[_3371].w + _3264) < 0.5))
        {
            _3430 = true;
            break;
        }
        if ((_3257 + 1.0) < _3255.x)
        {
            _3430 = true;
            break;
        }
        _3430 = false;
        break;
    }
    float _3634;
    if (_3430)
    {
        discard_state = true;
        _3634 = 0.0;
    }
    else
    {
        _3634 = cbInstanceData._m0[_3117].w;
    }
    SV_Target.x = _3261;
    SV_Target.y = _3262;
    SV_Target.z = _3263;
    SV_Target.w = _3634;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3117].w;
    discard_exit();
}


