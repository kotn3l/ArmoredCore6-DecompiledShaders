#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1386;
float _4048;
float _4049;
float _4050;
float _4051;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4060 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4071 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4082 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[23u].w) + _450) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4093 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _478 = (_336.x * cbMtdParam._m0[9u].x) * ((_468 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367);
    float _479 = (_336.y * cbMtdParam._m0[9u].y) * ((_468 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368);
    float _480 = (_336.z * cbMtdParam._m0[9u].z) * ((_468 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369);
    float _484 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _478;
    float _487 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _479;
    float _490 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _480;
    float _498 = (((_478 - _484) * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) + _484) * 4.55000019073486328125;
    float _500 = (((_479 - _487) * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) + _487) * 4.55000019073486328125;
    float _502 = (((_480 - _490) * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) + _490) * 4.55000019073486328125;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _585 = _583.x;
    float _586 = _583.y;
    float _587 = _583.z;
    float _596 = ((_566.z - _587) * _468) + _587;
    float _599 = ((((_566.x - _585) * _468) + _585) * 2.0) + (-1.0);
    float _600 = ((((_566.y - _586) * _468) + _586) * 2.0) + (-1.0);
    float _601 = dot(vec2(_599, _600), vec2(_599, _600));
    float _4104 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _649 = _647.x;
    float _650 = 1.0 - _649;
    float _666 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_649 - _650) * cbMtdParam._m0[24u].z) + _650) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4115 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _674 = (_667 * ((_521.x * cbMtdParam._m0[18u].x) - _498)) + _498;
    float _675 = (_667 * ((_521.y * cbMtdParam._m0[18u].y) - _500)) + _500;
    float _676 = (_667 * ((_521.z * cbMtdParam._m0[18u].z) - _502)) + _502;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _704 = _702.x;
    float _721 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _704) * _468) + _704;
    float _725 = ((_688.x - _721) * cbMtdParam._m0[19u].z) + _721;
    float _727 = _725 - (_725 * _667);
    float _732 = (((_541.z - _596) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _596;
    float _736 = ((_622.z - _732) * cbMtdParam._m0[19u].w) + _732;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _756 = (_749.x * 2.0) + (-1.0);
    float _757 = (_749.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _4126 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _766 = (_667 * (_749.z - _736)) + _736;
    float _775 = (_599 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_541.x * 2.0) + (-1.0)))) + (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _776 = (_600 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_541.y * 2.0) + (-1.0)))) + (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _788 = (((_756 - _775) + (cbMtdParam._m0[21u].x * _775)) * _667) + _775;
    float _789 = (((_757 - _776) + (cbMtdParam._m0[21u].x * _776)) * _667) + _776;
    float _790 = (_667 * (sqrt(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) - _606)) + _606;
    float _792 = cbMtdParam._m0[22u].x + _622.w;
    float _795 = fma(_790, _246 * NORMAL.x, fma(_789, _253 * TANGENT.x, (_239 * _231) * _788));
    float _798 = fma(_790, _246 * NORMAL.y, fma(_789, _253 * TANGENT.y, (_239 * _232) * _788));
    float _801 = fma(_790, _246 * NORMAL.z, fma(_789, _253 * TANGENT.z, (_239 * _233) * _788));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _806 = _805 * _795;
    float _807 = _805 * _798;
    float _808 = _805 * _801;
    float _4137 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _809 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4159 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4170 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4181 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4192 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _814 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _828 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _879 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _869);
    float _880 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _869);
    float _881 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _869);
    float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
    float _886 = _879 * _885;
    float _887 = _880 * _885;
    float _888 = _881 * _885;
    vec4 _893 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _895 = _893.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1067 = sqrt(((_879 * _879) + (_880 * _880)) + (_881 * _881));
        float _1073 = (cbMatDynParam._m0[5u].x * _1067) + cbMatDynParam._m0[5u].y;
        float _4203 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1078 = (cbMatDynParam._m0[5u].z * _1067) + cbMatDynParam._m0[5u].w;
        float _4214 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) - _1074)) + _1074) < ((_895 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _906 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _907 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _925 = fma(_808, cbSceneParam._m0[5u].z, fma(_807, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _806));
    float _928 = fma(_808, cbSceneParam._m0[6u].z, fma(_807, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _806));
    float _931 = fma(_808, cbSceneParam._m0[7u].z, fma(_807, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _806));
    uint _944 = _280 + 9u;
    uint _945 = _944 + uint(cbMatDynParam._m0[0u].w);
    float _951 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * cbInstanceData._m0[_945].x;
    float _952 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_945].y;
    float _953 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * cbInstanceData._m0[_945].z;
    float _4225 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _957 = 1.0 - _814;
    float _958 = _954 * _957;
    float _959 = _955 * _957;
    float _960 = _956 * _957;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _814;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _814;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _814;
    float _968 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    vec4 _980 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _906, cbSceneParam._m0[86u].y * _907));
    float _984 = ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * TEXCOORD_5.w) * _980.x;
    float _985 = dot(vec3(_806, _807, _808), vec3(_886, _887, _888));
    float _988 = _985 * 2.0;
    float _992 = (_988 * _806) - _886;
    float _993 = (_988 * _807) - _887;
    float _994 = (_988 * _808) - _888;
    float _998 = abs(dot(vec3(_886, _887, _888), vec3(_806, _807, _808)));
    float _4258 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1000 = sqrt(_809);
    float _1013 = exp2((_1000 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1000 * 3.0));
    float _1019 = (1.0 - _1013) * ((_1000 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1020 = _1013 * _1000;
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1385;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1110 = fma(_1056, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048));
        float _1114 = fma(_1056, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048));
        float _1118 = fma(_1056, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048));
        float _1143 = _1048 + _806;
        float _1144 = _1052 + _807;
        float _1145 = _1056 + _808;
        float _1155 = fma(_1145, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1143)) - _1110;
        float _1156 = fma(_1145, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1143)) - _1114;
        float _1157 = fma(_1145, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1143)) - _1118;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1110 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1114 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[34u].z) + ((((((_1118 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1213 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1179.x + (-0.5));
        float _1215 = _1213 * (_1179.y + (-0.5));
        float _1216 = _1213 * (_1179.z + (-0.5));
        float _1223 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1186.x + (-0.5));
        float _1225 = _1223 * (_1186.y + (-0.5));
        float _1226 = _1223 * (_1186.z + (-0.5));
        float _1233 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1193.x + (-0.5));
        float _1235 = _1233 * (_1193.y + (-0.5));
        float _1236 = _1233 * (_1193.z + (-0.5));
        float _1243 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1200.x + (-0.5));
        float _1245 = _1243 * (_1200.y + (-0.5));
        float _1246 = _1243 * (_1200.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1267 = (dot(vec3(_806, _807, _808), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1277 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4306 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1279 + 1.0))) + _1284) * _1247;
        float _1294 = _1215 * 0.5;
        float _1295 = _1225 * 0.5;
        float _1296 = _1235 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_806, _807, _808), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4339 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1321 + 1.0))) + _1326) * _1248;
        float _1336 = _1216 * 0.5;
        float _1337 = _1226 * 0.5;
        float _1338 = _1236 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_806, _807, _808), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4372 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1363 + 1.0))) + _1368) * _1249;
        _1385 = _1216;
        _1387 = _1215;
        _1388 = _1214;
        _1389 = _1226;
        _1390 = _1225;
        _1391 = _1224;
        _1392 = _1236;
        _1393 = _1235;
        _1394 = _1234;
        _1395 = _1249;
        _1396 = _1248;
        _1397 = _1247;
        _1398 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _1386;
        _1387 = _1386;
        _1388 = _1386;
        _1389 = _1386;
        _1390 = _1386;
        _1391 = _1386;
        _1392 = _1386;
        _1393 = _1386;
        _1394 = _1386;
        _1395 = _1386;
        _1396 = _1386;
        _1397 = _1386;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1428 = fma(_1056, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1048));
        float _1432 = fma(_1056, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1048));
        float _1436 = fma(_1056, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1048));
        float _1459 = _1048 + _806;
        float _1460 = _1052 + _807;
        float _1461 = _1056 + _808;
        float _1471 = fma(_1461, cbModelParam._m0[30u].z, fma(_1460, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1459)) - _1428;
        float _1472 = fma(_1461, cbModelParam._m0[31u].z, fma(_1460, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1459)) - _1432;
        float _1473 = fma(_1461, cbModelParam._m0[32u].z, fma(_1460, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1459)) - _1436;
        float _1477 = inversesqrt(dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473)));
        float _1490 = ((_1477 * _1471) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1428 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1491 = ((_1477 * _1472) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1432 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1477 * _1473) / cbModelParam._m0[35u].z) + ((((((_1436 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1490, _1491, _1492), 0.0);
        float _1527 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1494.x + (-0.5));
        float _1529 = _1527 * (_1494.y + (-0.5));
        float _1530 = _1527 * (_1494.z + (-0.5));
        float _1537 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1501.x + (-0.5));
        float _1539 = _1537 * (_1501.y + (-0.5));
        float _1540 = _1537 * (_1501.z + (-0.5));
        float _1547 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1508.x + (-0.5));
        float _1549 = _1547 * (_1508.y + (-0.5));
        float _1550 = _1547 * (_1508.z + (-0.5));
        float _1557 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1515.x + (-0.5));
        float _1559 = _1557 * (_1515.y + (-0.5));
        float _1560 = _1557 * (_1515.z + (-0.5));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = _1528 * 0.5;
        float _1565 = _1538 * 0.5;
        float _1566 = _1548 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_806, _807, _808), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4435 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1591 + 1.0))) + _1596) * _1561;
        float _1606 = _1529 * 0.5;
        float _1607 = _1539 * 0.5;
        float _1608 = _1549 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_806, _807, _808), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4468 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1633 + 1.0))) + _1638) * _1562;
        float _1648 = _1530 * 0.5;
        float _1649 = _1540 * 0.5;
        float _1650 = _1550 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_806, _807, _808), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4479 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4490 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4501 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_1675 + 1.0))) + _1680) * _1563;
        _1697 = _1530;
        _1698 = _1529;
        _1699 = _1528;
        _1700 = _1540;
        _1701 = _1539;
        _1702 = _1538;
        _1703 = _1550;
        _1704 = _1549;
        _1705 = _1548;
        _1706 = _1563;
        _1707 = _1562;
        _1708 = _1561;
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
    }
    else
    {
        _1697 = _1386;
        _1698 = _1386;
        _1699 = _1386;
        _1700 = _1386;
        _1701 = _1386;
        _1702 = _1386;
        _1703 = _1386;
        _1704 = _1386;
        _1705 = _1386;
        _1706 = _1386;
        _1707 = _1386;
        _1708 = _1386;
        _1709 = 0.0;
        _1710 = 0.0;
        _1711 = 0.0;
    }
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1398)) + _1398;
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1399)) + _1399;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1400)) + _1400;
    float _1744 = fma(_1723, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1721 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1723, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1721 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1723, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1721));
    float _1765 = _992 * 0.5;
    float _1766 = _993 * 0.5;
    float _1767 = _994 * 0.5;
    float _1768 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1771 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1774 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1808;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1781 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1385, _1389, _1392, _1395));
        float _1785 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1387, _1390, _1393, _1396));
        float _1789 = dot(vec4(_1765, _1766, _1767, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1796 = dot(vec4(cbModelParam._m0[39u]), vec4(_1765, _1766, _1767, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1819;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1810 = dot(vec4(cbModelParam._m0[40u]), vec4(_1765, _1766, _1767, 1.0));
        _1819 = dot(vec3(isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1819 = 1.0;
    }
    float _1823 = (_1819 * cbModelParam._m0[1u].x) + (_1808 * (1.0 - cbModelParam._m0[1u].x));
    float _1833 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1833 : min(cbModelParam._m0[25u].z, _1833));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1881 = fma(_1056, cbModelParam._m0[13u].z, fma(_1052, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1048)) + cbModelParam._m0[13u].w;
        float _1885 = fma(_1056, cbModelParam._m0[14u].z, fma(_1052, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1048)) + cbModelParam._m0[14u].w;
        float _1889 = fma(_1056, cbModelParam._m0[15u].z, fma(_1052, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1048)) + cbModelParam._m0[15u].w;
        float _1892 = fma(_994, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _992));
        float _1895 = fma(_994, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _992));
        float _1898 = fma(_994, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _992));
        float _1926;
        if (_1892 > 0.0)
        {
            _1926 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1926 = frontier_phi_17_15_ladder;
        }
        float _2097;
        if (_1895 > 0.0)
        {
            _2097 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2097 = frontier_phi_26_22_ladder;
        }
        float _2392;
        if (_1898 > 0.0)
        {
            _2392 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2392 = frontier_phi_38_33_ladder;
        }
        float _2394 = isnan(_2097) ? _1926 : (isnan(_1926) ? _2097 : min(_1926, _2097));
        float _2395 = isnan(_2392) ? _2394 : (isnan(_2394) ? _2392 : min(_2394, _2392));
        float _2399 = (_2395 * _1892) + _1881;
        float _2400 = (_2395 * _1895) + _1885;
        float _2401 = (_2395 * _1898) + _1889;
        float _2402 = _2395 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2402;
        float _2406 = _2402 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 > _2406) || ((_2400 < _2404) || ((_2399 < _2404) || (_2399 > _2406))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2401, cbModelParam._m0[9u].z, fma(_2400, cbModelParam._m0[9u].y, _2399 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2401, cbModelParam._m0[10u].z, fma(_2400, cbModelParam._m0[10u].y, _2399 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2401, cbModelParam._m0[11u].z, fma(_2400, cbModelParam._m0[11u].y, _2399 * cbModelParam._m0[11u].x))), _1834);
            frontier_phi_16_38_ladder = _2546.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2546.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2546.x * cbModelParam._m0[1u].y;
        }
        _1914 = frontier_phi_16_38_ladder_2;
        _1916 = frontier_phi_16_38_ladder_1;
        _1918 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_992, _993, _994), _1834);
        _1914 = _1902.x * cbModelParam._m0[1u].y;
        _1916 = _1902.y * cbModelParam._m0[1u].y;
        _1918 = _1902.z * cbModelParam._m0[1u].y;
    }
    float _1922 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1922 : min(cbModelParam._m0[25u].w, _1922));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1976 = fma(_1056, cbModelParam._m0[21u].z, fma(_1052, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1048)) + cbModelParam._m0[21u].w;
        float _1980 = fma(_1056, cbModelParam._m0[22u].z, fma(_1052, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1048)) + cbModelParam._m0[22u].w;
        float _1984 = fma(_1056, cbModelParam._m0[23u].z, fma(_1052, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1048)) + cbModelParam._m0[23u].w;
        float _1987 = fma(_994, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _992));
        float _1990 = fma(_994, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _992));
        float _1993 = fma(_994, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _992));
        float _2102;
        if (_1987 > 0.0)
        {
            _2102 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2102 = frontier_phi_28_24_ladder;
        }
        float _2419;
        if (_1990 > 0.0)
        {
            _2419 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2419 = frontier_phi_40_35_ladder;
        }
        float _2757;
        if (_1993 > 0.0)
        {
            _2757 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2757 = frontier_phi_50_47_ladder;
        }
        float _2759 = isnan(_2419) ? _2102 : (isnan(_2102) ? _2419 : min(_2102, _2419));
        float _2760 = isnan(_2757) ? _2759 : (isnan(_2759) ? _2757 : min(_2759, _2757));
        float _2764 = (_2760 * _1987) + _1976;
        float _2765 = (_2760 * _1990) + _1980;
        float _2766 = (_2760 * _1993) + _1984;
        float _2767 = _2760 * 9.9999997473787516355514526367188e-05;
        float _2768 = (-1.0) - _2767;
        float _2770 = _2767 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2766 > _2770) || ((_2766 < _2768) || ((_2765 > _2770) || ((_2765 < _2768) || ((_2764 < _2768) || (_2764 > _2770))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2766, cbModelParam._m0[17u].z, fma(_2765, cbModelParam._m0[17u].y, _2764 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2766, cbModelParam._m0[18u].z, fma(_2765, cbModelParam._m0[18u].y, _2764 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2766, cbModelParam._m0[19u].z, fma(_2765, cbModelParam._m0[19u].y, _2764 * cbModelParam._m0[19u].x))), _1923);
            frontier_phi_25_50_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _2012 = frontier_phi_25_50_ladder_2;
        _2014 = frontier_phi_25_50_ladder_1;
        _2016 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_992, _993, _994), _1923);
        _2012 = _1996.x * cbModelParam._m0[1u].z;
        _2014 = _1996.y * cbModelParam._m0[1u].z;
        _2016 = _1996.z * cbModelParam._m0[1u].z;
    }
    float _2029 = (((_1019 * _968) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2031 = (((_1019 * _970) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2033 = (((_1019 * _971) + _1020) * _984) * ((cbModelParam._m0[1u].w * (_2016 - _1918)) + _1918);
    float _2036 = fma(_2033, cbSceneParam._m0[89u].z, fma(_2031, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2039 = fma(_2033, cbSceneParam._m0[90u].z, fma(_2031, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2042 = fma(_2033, cbSceneParam._m0[91u].z, fma(_2031, cbSceneParam._m0[91u].y, _2029 * cbSceneParam._m0[91u].x));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2088 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2089 = _2076 / _2088;
    float _2090 = _2080 / _2088;
    float _2091 = _2084 / _2088;
    float _2238;
    float _2239;
    float _2240;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2118 = ((uint(_2091 > cbSceneParam._m0[59u].y) + uint(_2091 > cbSceneParam._m0[59u].x)) + uint(_2091 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2119 = _2118 + 43u;
        uint _2127 = _2118 + 44u;
        uint _2135 = _2118 + 45u;
        uint _2143 = _2118 + 46u;
        float _2154 = fma(_2088, cbSceneParam._m0[_2119].w, fma(_2084, cbSceneParam._m0[_2119].z, fma(_2080, cbSceneParam._m0[_2119].y, _2076 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2088, cbSceneParam._m0[_2127].w, fma(_2084, cbSceneParam._m0[_2127].z, fma(_2080, cbSceneParam._m0[_2127].y, _2076 * cbSceneParam._m0[_2127].x)));
        float _2166 = fma(_2088, cbSceneParam._m0[_2143].w, fma(_2084, cbSceneParam._m0[_2143].z, fma(_2080, cbSceneParam._m0[_2143].y, _2076 * cbSceneParam._m0[_2143].x)));
        float _2171 = cbSceneParam._m0[33u].z * _2166;
        float _2173 = cbSceneParam._m0[33u].w * _2166;
        float _2176 = fma(_2088, cbSceneParam._m0[_2135].w, fma(_2084, cbSceneParam._m0[_2135].z, fma(_2080, cbSceneParam._m0[_2135].y, _2076 * cbSceneParam._m0[_2135].x))) / _2166;
        float _2224 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
        float _4627 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2231 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2171 + _2154) / _2166, (_2173 + _2158) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2173 + _2154) / _2166, (_2158 - _2171) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2171) / _2166, (_2158 - _2173) / _2166), _2176), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 - _2173) / _2166, (_2171 + _2158) / _2166), _2176), 0.0)).x), vec4(0.25)));
        _2238 = 1.0 - (_2231 * cbSceneParam._m0[34u].x);
        _2239 = 1.0 - (_2231 * cbSceneParam._m0[34u].y);
        _2240 = 1.0 - (_2231 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2238 = 1.0;
        _2239 = 1.0;
        _2240 = 1.0;
    }
    float _2304;
    float _2306;
    float _2308;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2292 = fma(_2088, cbSceneParam._m0[63u].w, fma(_2084, cbSceneParam._m0[63u].z, fma(_2080, cbSceneParam._m0[63u].y, _2076 * cbSceneParam._m0[63u].x)));
        float _2293 = fma(_2088, cbSceneParam._m0[60u].w, fma(_2084, cbSceneParam._m0[60u].z, fma(_2080, cbSceneParam._m0[60u].y, _2076 * cbSceneParam._m0[60u].x))) / _2292;
        float _2294 = fma(_2088, cbSceneParam._m0[61u].w, fma(_2084, cbSceneParam._m0[61u].z, fma(_2080, cbSceneParam._m0[61u].y, _2076 * cbSceneParam._m0[61u].x))) / _2292;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2293 >= cbSceneParam._m0[64u].x) && (_2294 >= cbSceneParam._m0[64u].y)) && (_2293 <= cbSceneParam._m0[64u].z)) && (_2294 <= cbSceneParam._m0[64u].w))
        {
            float _2432 = fma(_2088, cbSceneParam._m0[62u].w, fma(_2084, cbSceneParam._m0[62u].z, fma(_2080, cbSceneParam._m0[62u].y, _2076 * cbSceneParam._m0[62u].x))) / _2292;
            float _2436 = isnan(cbSceneParam._m0[41u].w) ? _2432 : (isnan(_2432) ? cbSceneParam._m0[41u].w : max(_2432, cbSceneParam._m0[41u].w));
            float _2479 = (cbSceneParam._m0[33u].x - sqrt(((_2090 * _2090) + (_2089 * _2089)) + (_2091 * _2091))) * cbSceneParam._m0[33u].y;
            float _4643 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
            float _2486 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2293, cbSceneParam._m0[33u].w + _2294), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2293, _2294 - cbSceneParam._m0[33u].z), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2293 - cbSceneParam._m0[33u].z, _2294 - cbSceneParam._m0[33u].w), _2436), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2293 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2294), _2436), 0.0)).x), vec4(0.25)));
            float _2490 = 1.0 - (_2486 * cbSceneParam._m0[34u].x);
            float _2491 = 1.0 - (_2486 * cbSceneParam._m0[34u].y);
            float _2492 = 1.0 - (_2486 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2492) ? _2240 : (isnan(_2240) ? _2492 : min(_2240, _2492));
            frontier_phi_37_36_ladder_1 = isnan(_2491) ? _2239 : (isnan(_2239) ? _2491 : min(_2239, _2491));
            frontier_phi_37_36_ladder_2 = isnan(_2490) ? _2238 : (isnan(_2238) ? _2490 : min(_2238, _2490));
        }
        else
        {
            frontier_phi_37_36_ladder = _2240;
            frontier_phi_37_36_ladder_1 = _2239;
            frontier_phi_37_36_ladder_2 = _2238;
        }
        _2304 = frontier_phi_37_36_ladder_2;
        _2306 = frontier_phi_37_36_ladder_1;
        _2308 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2304 = _2238;
        _2306 = _2239;
        _2308 = _2240;
    }
    uvec4 _2313 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2315 = _2313.x * 14u;
    uint _2316 = _2315 + 13u;
    float _2323 = _984 + (-1.0);
    float _2328 = (cbLight._m0[_2316].x * _2323) + 1.0;
    float _2329 = (cbLight._m0[_2316].y * _2323) + 1.0;
    float _2330 = (cbLight._m0[_2316].z * _2323) + 1.0;
    float _2331 = (cbLight._m0[_2316].w * _2323) + 1.0;
    uint _2332 = _2315 + 5u;
    float _2338 = isnan(1.0) ? _2329 : (isnan(_2329) ? 1.0 : min(_2329, 1.0));
    uint _2342 = _2315 + 4u;
    float _2351 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
    uint _2355 = _2315 | 1u;
    float _2366 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_806, _807, _808));
    float _2369 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_806, _807, _808));
    float _4679 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _4690 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2374 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * 0.3183098733425140380859375;
    float _2376 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * 0.3183098733425140380859375;
    float _2383 = ((cbLight._m0[_2332].x * _2338) * _2376) + (((cbLight._m0[_2342].x * _2304) * _2351) * _2374);
    float _2384 = ((_2338 * cbLight._m0[_2332].y) * _2376) + (((cbLight._m0[_2342].y * _2306) * _2351) * _2374);
    float _2385 = ((_2338 * cbLight._m0[_2332].z) * _2376) + (((cbLight._m0[_2342].z * _2308) * _2351) * _2374);
    uvec4 _2389 = floatBitsToUint(cbLight._m0[_2315 + 12u]);
    bool _2391 = _2389.x == 0u;
    float _2493;
    float _2495;
    float _2497;
    if (_2391)
    {
        _2493 = _2383;
        _2495 = _2384;
        _2497 = _2385;
    }
    else
    {
        uint _2501 = _2315 + 6u;
        float _2517 = (dot(vec3(cbLight._m0[_2315 + 2u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4701 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2520 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2493 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2383;
        _2495 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2384;
        _2497 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2385;
    }
    bool _2500 = _2389.y == 0u;
    float _2555;
    float _2557;
    float _2559;
    if (_2500)
    {
        _2555 = _2493;
        _2557 = _2495;
        _2559 = _2497;
    }
    else
    {
        uint _2728 = _2315 + 7u;
        float _2744 = (dot(vec3(cbLight._m0[_2315 + 3u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2745 = _2744 * _2744;
        float _4717 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2746 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2747 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2555 = (((cbLight._m0[_2728].x * 0.3183098733425140380859375) * _2746) * _2747) + _2493;
        _2557 = (((cbLight._m0[_2728].y * 0.3183098733425140380859375) * _2746) * _2747) + _2495;
        _2559 = (((cbLight._m0[_2728].z * 0.3183098733425140380859375) * _2746) * _2747) + _2497;
    }
    uint _2562 = _2315 + 8u;
    float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _809) * 0.949999988079071044921875);
    float _2576 = _2575 * _2575;
    float _2577 = cbLight._m0[_2315].x + _886;
    float _2578 = cbLight._m0[_2315].y + _887;
    float _2579 = cbLight._m0[_2315].z + _888;
    float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
    float _2584 = _2583 * _2577;
    float _2585 = _2583 * _2578;
    float _2586 = _2583 * _2579;
    float _2587 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2315].xyz));
    float _4733 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _4744 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _2591 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _2592 = dot(vec3(_806, _807, _808), vec3(_2584, _2585, _2586));
    float _4755 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2596 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2584, _2585, _2586));
    float _4766 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2600 = _2576 * _2576;
    float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
    float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0);
    float _2613 = 0.959999978542327880859375 - _965;
    float _2615 = 0.959999978542327880859375 - _966;
    float _2616 = 0.959999978542327880859375 - _967;
    float _2623 = 1.0 - _2576;
    float _2634 = (0.5 / (((_2591 * ((_2590 * _2623) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2623) + _2576) * _2590))) * _2590;
    float _4777 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2636 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
    uint _2650 = _2315 + 9u;
    float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _809) * 0.949999988079071044921875);
    float _2662 = _2661 * _2661;
    float _2663 = cbLight._m0[_2355].x + _886;
    float _2664 = cbLight._m0[_2355].y + _887;
    float _2665 = cbLight._m0[_2355].z + _888;
    float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
    float _2670 = _2669 * _2663;
    float _2671 = _2669 * _2664;
    float _2672 = _2669 * _2665;
    float _2673 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2355].xyz));
    float _4788 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
    float _2677 = dot(vec3(_806, _807, _808), vec3(_2670, _2671, _2672));
    float _4799 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _2681 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2670, _2671, _2672));
    float _4810 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2685 = _2662 * _2662;
    float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
    float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0);
    float _2703 = 1.0 - _2662;
    float _2713 = (0.5 / (((_2591 * ((_2676 * _2703) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2703) + _2662) * _2676))) * _2676;
    float _4821 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2715 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
    float _2725 = (((((_2696 * _2613) + _968) * cbLight._m0[_2650].x) * _2715) * _2338) + ((((cbLight._m0[_2562].x * _2304) * ((_2612 * _2613) + _968)) * _2636) * _2351);
    float _2726 = (((((_2696 * _2615) + _970) * cbLight._m0[_2650].y) * _2715) * _2338) + ((((cbLight._m0[_2562].y * _2306) * ((_2612 * _2615) + _970)) * _2636) * _2351);
    float _2727 = (((((_2696 * _2616) + _971) * cbLight._m0[_2650].z) * _2715) * _2338) + ((((cbLight._m0[_2562].z * _2308) * ((_2612 * _2616) + _971)) * _2636) * _2351);
    float _2783;
    float _2785;
    float _2787;
    if (_2391)
    {
        _2783 = _2725;
        _2785 = _2726;
        _2787 = _2727;
    }
    else
    {
        uint _2789 = _2315 + 2u;
        uint _2793 = _2315 + 10u;
        float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2789].w)) * _809) * 0.949999988079071044921875);
        float _2808 = _2807 * _2807;
        float _2809 = cbLight._m0[_2789].x + _886;
        float _2810 = cbLight._m0[_2789].y + _887;
        float _2811 = cbLight._m0[_2789].z + _888;
        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
        float _2816 = _2815 * _2809;
        float _2817 = _2815 * _2810;
        float _2818 = _2815 * _2811;
        float _2819 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2789].xyz));
        float _4832 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2823 = dot(vec3(_806, _807, _808), vec3(_2816, _2817, _2818));
        float _4843 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2827 = dot(vec3(cbLight._m0[_2789].xyz), vec3(_2816, _2817, _2818));
        float _4854 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2831 = _2808 * _2808;
        float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
        float _2842 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
        float _2849 = 1.0 - _2808;
        float _2859 = (0.5 / (((_2591 * ((_2822 * _2849) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2849) + _2808) * _2822))) * _2822;
        float _4865 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2861 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
        float _2862 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
        _2783 = (((((_2842 * _2613) + _968) * cbLight._m0[_2793].x) * _2861) * _2862) + _2725;
        _2785 = (((((_2842 * _2615) + _970) * cbLight._m0[_2793].y) * _2861) * _2862) + _2726;
        _2787 = (((((_2842 * _2616) + _971) * cbLight._m0[_2793].z) * _2861) * _2862) + _2727;
    }
    float _2893;
    float _2895;
    float _2897;
    if (_2500)
    {
        _2893 = _2783;
        _2895 = _2785;
        _2897 = _2787;
    }
    else
    {
        uint _2904 = _2315 + 3u;
        uint _2908 = _2315 + 11u;
        float _2922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2904].w)) * _809) * 0.949999988079071044921875);
        float _2923 = _2922 * _2922;
        float _2924 = cbLight._m0[_2904].x + _886;
        float _2925 = cbLight._m0[_2904].y + _887;
        float _2926 = cbLight._m0[_2904].z + _888;
        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
        float _2931 = _2930 * _2924;
        float _2932 = _2930 * _2925;
        float _2933 = _2930 * _2926;
        float _2934 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2904].xyz));
        float _4881 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
        float _2938 = dot(vec3(_806, _807, _808), vec3(_2931, _2932, _2933));
        float _4892 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2941 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
        float _2942 = dot(vec3(cbLight._m0[_2904].xyz), vec3(_2931, _2932, _2933));
        float _4903 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2946 = _2923 * _2923;
        float _2950 = ((_2941 * _2941) * (_2946 + (-1.0))) + 1.0;
        float _2957 = exp2(log2(1.0 - (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) * 5.0);
        float _2964 = 1.0 - _2923;
        float _2974 = (0.5 / (((_2591 * ((_2937 * _2964) + _2923)) + 9.9999999392252902907785028219223e-09) + (((_2591 * _2964) + _2923) * _2937))) * _2937;
        float _4914 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
        float _2976 = (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2946 / ((_2950 * _2950) * 3.141590118408203125));
        float _2977 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
        _2893 = (((((_2957 * _2613) + _968) * cbLight._m0[_2908].x) * _2976) * _2977) + _2783;
        _2895 = (((((_2957 * _2615) + _970) * cbLight._m0[_2908].y) * _2976) * _2977) + _2785;
        _2897 = (((((_2957 * _2616) + _971) * cbLight._m0[_2908].z) * _2976) * _2977) + _2787;
    }
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_2313.y == 0u)
    {
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.x;
        uint _3010 = uint((float(_2998.y) * floor(float(uint(cbSceneParam._m0[85u].y * _907) / _2999))) + floor(float(uint(cbSceneParam._m0[85u].x * _906) / _2999)));
        float _3020 = (log2(_2091 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3021 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
        uint _3024 = uint(isnan(14.0) ? _3021 : (isnan(_3021) ? 14.0 : min(_3021, 14.0)));
        uvec4 _3029 = texelFetch(g_lightClusterGridBuffer, int(((_3024 << 2u) + (_3010 << 6u)) >> 2u));
        uint _3030 = _3029.x;
        uint _3031 = _2998.z;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        if (((((1u << ((_3031 >> 4u) & 15u)) + 4294967295u) & _3030) == 0u) || ((_3031 & 240u) == 0u))
        {
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
            _3120 = 0.0;
        }
        else
        {
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3121;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            uint _3269 = 0u;
            uint _3278;
            bool _3279;
            for (;;)
            {
                _3278 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                _3279 = _3278 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3279)
                {
                    frontier_phi_71_pred = _3268;
                    frontier_phi_71_pred_1 = _3267;
                    frontier_phi_71_pred_2 = _3266;
                    frontier_phi_71_pred_3 = _3265;
                    frontier_phi_71_pred_4 = _3264;
                    frontier_phi_71_pred_5 = _3263;
                }
                else
                {
                    float _3408;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    uint _3414;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3278;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    for (;;)
                    {
                        uint _3418 = uint(findLSB(_3414)) + (_3269 << 5u);
                        uint _3415 = (_3414 + 4294967295u) & _3414;
                        uint _3420 = _3418 * 48u;
                        vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3440 = (_3418 * 48u) + 4u;
                        vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 3u)).x));
                        uint _3459 = (_3418 * 48u) + 8u;
                        vec3 _3470 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3459)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3459 + 2u)).x));
                        float _3474 = _3434.x - _2089;
                        float _3475 = _3434.y - _2090;
                        float _3476 = _3434.z - _2091;
                        float _3477 = dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476));
                        float _3480 = inversesqrt(_3477);
                        float _3481 = _3480 * _3474;
                        float _3482 = _3480 * _3475;
                        float _3483 = _3480 * _3476;
                        float _3484 = dot(vec3(_925, _928, _931), vec3(_3481, _3482, _3483));
                        float _3489 = 1.0 - (_3477 * _3434.w);
                        float _4940 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3490 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3491 = sqrt(_3477) * _3453.w;
                        float _3494 = 1.39999997615814208984375 / (_3491 + 1.39999997615814208984375);
                        float _3495 = _3494 * _3494;
                        float _3498 = ((1.0 - _3495) * _3484) + _3495;
                        float _3501 = _3491 * _3491;
                        float _3505 = ((isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0))) * _3490) / ((_3501 * 0.699999988079071044921875) + 1.0);
                        float _3509 = (-0.0) - _2089;
                        float _3510 = (-0.0) - _2090;
                        float _3511 = (-0.0) - _2091;
                        float _3515 = inversesqrt(dot(vec3(_3509, _3510, _3511), vec3(_3509, _3510, _3511)));
                        float _3516 = _3515 * _3509;
                        float _3517 = _3515 * _3510;
                        float _3518 = _3515 * _3511;
                        float _3525 = exp2(log2(1.0 / ((_3501 * 3.5) + 5.0)) * 0.25);
                        float _3526 = 1.0 - _1000;
                        float _3533 = sqrt(1.0 - ((1.0 - (_3526 * _3526)) * (1.0 - (_3525 * _3525))));
                        float _3534 = _3533 * _3533;
                        float _3535 = _3534 * _3534;
                        float _3536 = _3516 + _3481;
                        float _3537 = _3517 + _3482;
                        float _3538 = _3518 + _3483;
                        float _3542 = inversesqrt(dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538)));
                        float _3546 = dot(vec3(_925, _928, _931), vec3(_3516, _3517, _3518));
                        float _4956 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0));
                        float _3550 = dot(vec3(_925, _928, _931), vec3(_3542 * _3536, _3542 * _3537, _3542 * _3538));
                        float _4967 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                        float _3553 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                        float _3557 = ((_3553 * _3553) * (_3535 + (-1.0))) + 1.0;
                        float _3558 = _3494 * _3534;
                        float _3559 = _3558 * _3558;
                        float _3562 = ((1.0 - _3559) * _3484) + _3559;
                        float _4978 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3564 = 1.0 - _3534;
                        float _3574 = (0.5 / (((_3563 * ((_3549 * _3564) + _3534)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3534) * _3549))) * _3563;
                        float _4989 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3585 = (((_3535 * 3.1415927410125732421875) * (isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0)))) / ((_3557 * _3557) * ((_3501 * 2.1991131305694580078125) + 3.141590118408203125))) * _3490;
                        _3338 = (_3505 * _3453.x) + _3411;
                        _3339 = (_3505 * _3453.y) + _3412;
                        _3340 = (_3505 * _3453.z) + _3413;
                        _3335 = (_3585 * _3470.x) + _3408;
                        _3336 = (_3585 * _3470.y) + _3409;
                        _3337 = (_3585 * _3470.z) + _3410;
                        if (_3415 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3415;
                        }
                    }
                    frontier_phi_71_pred = _3340;
                    frontier_phi_71_pred_1 = _3339;
                    frontier_phi_71_pred_2 = _3338;
                    frontier_phi_71_pred_3 = _3337;
                    frontier_phi_71_pred_4 = _3336;
                    frontier_phi_71_pred_5 = _3335;
                }
                _3121 = frontier_phi_71_pred;
                _3119 = frontier_phi_71_pred_1;
                _3117 = frontier_phi_71_pred_2;
                _3115 = frontier_phi_71_pred_3;
                _3113 = frontier_phi_71_pred_4;
                _3111 = frontier_phi_71_pred_5;
                uint _3270 = _3269 + 1u;
                if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3263 = _3111;
                    _3264 = _3113;
                    _3265 = _3115;
                    _3266 = _3117;
                    _3267 = _3119;
                    _3268 = _3121;
                    _3269 = _3270;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
            _3120 = _3121;
        }
        uvec4 _3124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3125 = _3124.z;
        uint _3127 = (_3125 >> 8u) & 15u;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        if (((4294967295u << _3127) & _3030) == 0u)
        {
            _3231 = _3110;
            _3233 = _3112;
            _3235 = _3114;
            _3237 = _3116;
            _3239 = _3118;
            _3241 = _3120;
        }
        else
        {
            float _3256 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
            float _3257 = _3256 * _2089;
            float _3258 = _3256 * _2090;
            float _3259 = _3256 * _2091;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3127 < ((_3125 >> 12u) & 15u))
            {
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3391 = _3110;
                float _3392 = _3112;
                float _3393 = _3114;
                float _3394 = _3116;
                float _3395 = _3118;
                float _3396 = _3120;
                uint _3397 = _3127;
                uint _3406;
                bool _3407;
                for (;;)
                {
                    _3406 = texelFetch(g_lightClassification, int((((_3024 << 5u) + (_3010 << 9u)) + (_3397 << 2u)) >> 2u)).x;
                    _3407 = _3406 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3407)
                    {
                        frontier_phi_82_pred = _3396;
                        frontier_phi_82_pred_1 = _3395;
                        frontier_phi_82_pred_2 = _3394;
                        frontier_phi_82_pred_3 = _3393;
                        frontier_phi_82_pred_4 = _3392;
                        frontier_phi_82_pred_5 = _3391;
                    }
                    else
                    {
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3897;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        float _3617 = _3396;
                        uint _3618 = _3406;
                        uint _3619;
                        vec4 _3644;
                        float _3645;
                        vec4 _3660;
                        vec3 _3672;
                        vec4 _3687;
                        vec4 _3702;
                        float _3748;
                        bool _3749;
                        for (;;)
                        {
                            uint _3629 = ((_3397 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3618));
                            _3619 = (_3618 + 4294967295u) & _3618;
                            uint _3631 = _3629 * 40u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            _3645 = _3644.w;
                            uint _3647 = (_3629 * 40u) + 4u;
                            _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3662 = (_3629 * 40u) + 8u;
                            _3672 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x));
                            uint _3674 = (_3629 * 40u) + 16u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3689 = (_3629 * 40u) + 20u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3629 * 40u) + 24u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3723 = (_3629 * 40u) + 28u;
                            vec4 _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            _3748 = fma(_2091, _3736.z, fma(_2090, _3736.y, _3736.x * _2089)) + _3736.w;
                            _3749 = !((fma(_2091, _3717.z, fma(_2090, _3717.y, _3717.x * _2089)) + _3717.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3749)
                            {
                                float _3776 = _3644.x - _2089;
                                float _3777 = _3644.y - _2090;
                                float _3778 = _3644.z - _2091;
                                float _3779 = dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778));
                                float _3782 = inversesqrt(_3779);
                                float _3783 = _3782 * _3776;
                                float _3784 = _3782 * _3777;
                                float _3785 = _3782 * _3778;
                                float _3789 = 1.0 - (_3779 / (_3645 * _3645));
                                float _5000 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3790 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3794 = sqrt(_3779) * _3660.w;
                                float _3796 = 1.39999997615814208984375 / (_3794 + 1.39999997615814208984375);
                                float _3797 = _3796 * _3796;
                                float _3800 = ((1.0 - _3797) * dot(vec3(_3783, _3784, _3785), vec3(_925, _928, _931))) + _3797;
                                float _3803 = _3794 * _3794;
                                float _3807 = (fma(_2091, _3687.z, fma(_2090, _3687.y, _3687.x * _2089)) + _3687.w) / _3748;
                                float _3808 = (fma(_2091, _3702.z, fma(_2090, _3702.y, _3702.x * _2089)) + _3702.w) / _3748;
                                float _3812 = 1.0 - dot(vec2(_3807, _3808), vec2(_3807, _3808));
                                float _5016 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _5016 : (isnan(_5016) ? 1.0 : min(_5016, 1.0));
                                float _3814 = _3813 * (((isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0))) * _3790) / ((_3803 * 0.699999988079071044921875) + 1.0));
                                float _3826 = exp2(log2(1.0 / ((_3803 * 3.5) + 5.0)) * 0.25);
                                float _3827 = 1.0 - _1000;
                                float _3834 = sqrt(1.0 - ((1.0 - (_3827 * _3827)) * (1.0 - (_3826 * _3826))));
                                float _3835 = _3834 * _3834;
                                float _3836 = _3835 * _3835;
                                float _3837 = _3783 - _3257;
                                float _3838 = _3784 - _3258;
                                float _3839 = _3785 - _3259;
                                float _3843 = inversesqrt(dot(vec3(_3837, _3838, _3839), vec3(_3837, _3838, _3839)));
                                float _3847 = dot(vec3(_925, _928, _931), vec3((-0.0) - _3257, (-0.0) - _3258, (-0.0) - _3259));
                                float _5027 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3851 = dot(vec3(_925, _928, _931), vec3(_3843 * _3837, _3843 * _3838, _3843 * _3839));
                                float _5038 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3854 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3858 = ((_3854 * _3854) * (_3836 + (-1.0))) + 1.0;
                                float _3859 = _3796 * _3835;
                                float _3860 = _3859 * _3859;
                                float _3866 = ((1.0 - _3860) * dot(vec3(_925, _928, _931), vec3(_3783, _3784, _3785))) + _3860;
                                float _5049 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3867 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3868 = 1.0 - _3835;
                                float _3878 = (0.5 / (((_3867 * ((_3850 * _3868) + _3835)) + 9.9999999392252902907785028219223e-09) + (((_3867 * _3868) + _3835) * _3850))) * _3867;
                                float _5060 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3888 = (_3813 * _3790) * (((_3836 * 3.1415927410125732421875) * (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0)))) / ((_3858 * _3858) * ((_3803 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3814 * _3660.z;
                                frontier_phi_88_pred_1 = _3814 * _3660.y;
                                frontier_phi_88_pred_2 = _3814 * _3660.x;
                                frontier_phi_88_pred_3 = _3888 * _3672.z;
                                frontier_phi_88_pred_4 = _3888 * _3672.y;
                                frontier_phi_88_pred_5 = _3888 * _3672.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3897 = frontier_phi_88_pred;
                            _3896 = frontier_phi_88_pred_1;
                            _3895 = frontier_phi_88_pred_2;
                            _3894 = frontier_phi_88_pred_3;
                            _3893 = frontier_phi_88_pred_4;
                            _3892 = frontier_phi_88_pred_5;
                            _3602 = _3895 + _3615;
                            _3603 = _3896 + _3616;
                            _3604 = _3897 + _3617;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            if (_3619 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3619;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3604;
                        frontier_phi_82_pred_1 = _3603;
                        frontier_phi_82_pred_2 = _3602;
                        frontier_phi_82_pred_3 = _3601;
                        frontier_phi_82_pred_4 = _3600;
                        frontier_phi_82_pred_5 = _3599;
                    }
                    _3242 = frontier_phi_82_pred;
                    _3240 = frontier_phi_82_pred_1;
                    _3238 = frontier_phi_82_pred_2;
                    _3236 = frontier_phi_82_pred_3;
                    _3234 = frontier_phi_82_pred_4;
                    _3232 = frontier_phi_82_pred_5;
                    uint _3398 = _3397 + 1u;
                    if (_3398 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3391 = _3232;
                        _3392 = _3234;
                        _3393 = _3236;
                        _3394 = _3238;
                        _3395 = _3240;
                        _3396 = _3242;
                        _3397 = _3398;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3238;
                frontier_phi_63_64_ladder_1 = _3242;
                frontier_phi_63_64_ladder_2 = _3240;
                frontier_phi_63_64_ladder_3 = _3236;
                frontier_phi_63_64_ladder_4 = _3234;
                frontier_phi_63_64_ladder_5 = _3232;
            }
            else
            {
                frontier_phi_63_64_ladder = _3116;
                frontier_phi_63_64_ladder_1 = _3120;
                frontier_phi_63_64_ladder_2 = _3118;
                frontier_phi_63_64_ladder_3 = _3114;
                frontier_phi_63_64_ladder_4 = _3112;
                frontier_phi_63_64_ladder_5 = _3110;
            }
            _3231 = frontier_phi_63_64_ladder_5;
            _3233 = frontier_phi_63_64_ladder_4;
            _3235 = frontier_phi_63_64_ladder_3;
            _3237 = frontier_phi_63_64_ladder;
            _3239 = frontier_phi_63_64_ladder_2;
            _3241 = frontier_phi_63_64_ladder_1;
        }
        float _3246 = isnan(1.0) ? _984 : (isnan(_984) ? 1.0 : min(_984, 1.0));
        _3043 = (_3246 * _3237) + _2555;
        _3045 = (_3246 * _3239) + _2557;
        _3047 = (_3246 * _3241) + _2559;
        _3049 = ((_3231 * _968) * _3246) + _2893;
        _3051 = ((_3233 * _970) * _3246) + _2895;
        _3053 = ((_3235 * _971) * _3246) + _2897;
    }
    else
    {
        _3043 = _2555;
        _3045 = _2557;
        _3047 = _2559;
        _3049 = _2893;
        _3051 = _2895;
        _3053 = _2897;
    }
    float _5076 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _5087 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _5098 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _3070 = ((isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (_3043 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _984))) + ((_3049 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1823)) * cbPerFrame._m0[3u].x);
    float _3071 = ((isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_3045 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _984))) + ((_3051 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1823)) * cbPerFrame._m0[3u].x);
    float _3072 = ((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3047 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _984))) + ((_3053 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1823)) * cbPerFrame._m0[3u].x);
    uint _3073 = _280 + 6u;
    float _3081 = _906 / cbSceneParam._m0[86u].x;
    float _3082 = _907 / cbSceneParam._m0[86u].y;
    vec4 _3096 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, (log2((isnan(cbSceneParam._m0[77u].w) ? _828 : (isnan(_828) ? cbSceneParam._m0[77u].w : min(_828, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3098 = _3096.x;
    float _3099 = _3096.y;
    float _3100 = _3096.z;
    float _3101 = _3096.w;
    float _3173;
    float _3175;
    float _3177;
    float _3179;
    if (_828 > cbSceneParam._m0[78u].w)
    {
        float _3135 = isnan(_828) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _828 : min(cbSceneParam._m0[80u].w, _828));
        float _3136 = _3135 / _828;
        float _3147 = _3136 * _879;
        float _3148 = _880 * _3136;
        float _3149 = (-0.0) - _3148;
        float _3151 = _3136 * _881;
        float _3153 = (cbSceneParam._m0[77u].w * _3149) / _3135;
        float _3154 = _3153 + cbSceneParam._m0[79u].w;
        float _3155 = cbSceneParam._m0[79u].w - _3148;
        float _3161 = sqrt(((_3147 * _3147) + (_3148 * _3148)) + (_3151 * _3151));
        float _3164 = (1.0 - (cbSceneParam._m0[77u].w / _3135)) * _3161;
        float _3169 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3171 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3348;
        if (abs((_3149 - _3153) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3348 = ((((_3154 > 0.0) ? exp2(_3169 * _3154) : (2.0 - exp2(_3171 * _3154))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3164;
        }
        else
        {
            float _3292 = 1.0 / cbSceneParam._m0[80u].x;
            float _3293 = isnan(_3155) ? _3154 : (isnan(_3154) ? _3155 : max(_3154, _3155));
            float _3294 = isnan(_3155) ? _3154 : (isnan(_3154) ? _3155 : min(_3154, _3155));
            float _3303 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : min(_3293, 0.0));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            _3348 = ((abs(_3161 / _3149) * cbSceneParam._m0[80u].y) * ((((_3303 - _3304) * 2.0) - ((exp2(_3169 * (isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0)))) - exp2(_3169 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))))) * _3292)) - ((exp2(_3171 * _3303) - exp2(_3171 * _3304)) * _3292))) + (_3164 * cbSceneParam._m0[80u].z);
        }
        vec4 _3350 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, 1.0), 0.0);
        float _3359 = exp2((_3348 * (-1.44269502162933349609375)) * (1.0 - _3350.w));
        float _3360 = log2(_3359);
        float _3376 = log2(_3101);
        _3173 = (exp2(_3376 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].x)) * _3350.x) / cbSceneParam._m0[78u].x)) + _3098;
        _3175 = (exp2(_3376 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].y)) * _3350.y) / cbSceneParam._m0[78u].y)) + _3099;
        _3177 = (exp2(_3376 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3360 * cbSceneParam._m0[78u].z)) * _3350.z) / cbSceneParam._m0[78u].z)) + _3100;
        _3179 = _3359 * _3101;
    }
    else
    {
        _3173 = _3098;
        _3175 = _3099;
        _3177 = _3100;
        _3179 = _3101;
    }
    bool _3386;
    vec4 _3189;
    vec4 _3211;
    float _3213;
    float _3217;
    float _3218;
    float _3219;
    float _3220;
    bool _3230;
    for (;;)
    {
        _3189 = cbMatDynParam._m0[0u];
        float _3191 = roundEven(_3189.y);
        bool _3192 = _3191 == 3.0;
        float _3193 = log2(_3179);
        float _3200 = exp2(_3193 * cbSceneParam._m0[78u].x) * _3070;
        float _3201 = exp2(_3193 * cbSceneParam._m0[78u].y) * _3071;
        float _3202 = exp2(_3193 * cbSceneParam._m0[78u].z) * _3072;
        float _3209 = _895 + (-0.5);
        _3211 = cbMtdParam._m0[1u];
        _3213 = _3211.y * _3209;
        float _3216 = (_3191 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3217 = _3216 * (_3192 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3173)));
        _3218 = _3216 * (_3192 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3175)));
        _3219 = _3216 * (_3192 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3177)));
        _3220 = _3209 * 0.999000012874603271484375;
        _3230 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3230)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3220) < 0.5)
            {
                _3386 = true;
                break;
            }
        }
        uint _3327 = _944 + uint(_3189.w);
        if ((cbInstanceData._m0[_3327].w < 1.0) && ((cbInstanceData._m0[_3327].w + _3220) < 0.5))
        {
            _3386 = true;
            break;
        }
        if ((_3213 + 1.0) < _3211.x)
        {
            _3386 = true;
            break;
        }
        _3386 = false;
        break;
    }
    float _3590;
    if (_3386)
    {
        discard_state = true;
        _3590 = 0.0;
    }
    else
    {
        _3590 = cbInstanceData._m0[_3073].w;
    }
    SV_Target.x = _3217;
    SV_Target.y = _3218;
    SV_Target.z = _3219;
    SV_Target.w = _3590;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3073].w;
    discard_exit();
}


