#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1528;
float _3906;
float _3907;
float _3908;
float _3909;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _249 = _248 * _240;
    float _250 = _248 * _241;
    float _251 = _248 * _242;
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = _255 * NORMAL.x;
    float _257 = _255 * NORMAL.y;
    float _258 = _255 * NORMAL.z;
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = _262 * TANGENT.x;
    float _264 = _262 * TANGENT.y;
    float _265 = _262 * TANGENT.z;
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3918 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3929 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3940 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _374 = _369.x * cbMtdParam._m0[11u].x;
    float _375 = _369.y * cbMtdParam._m0[11u].y;
    float _376 = _369.z * cbMtdParam._m0[11u].z;
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _445 = _443.x;
    float _457 = dot(vec4(_445, _443.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _474 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_445 - _457) * cbMtdParam._m0[23u].w) + _457) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3951 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _475 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _485 = (_343.x * cbMtdParam._m0[9u].x) * ((_475 * ((_395.x * cbMtdParam._m0[12u].x) - _374)) + _374);
    float _486 = (_343.y * cbMtdParam._m0[9u].y) * ((_475 * ((_395.y * cbMtdParam._m0[12u].y) - _375)) + _375);
    float _487 = (_343.z * cbMtdParam._m0[9u].z) * ((_475 * ((_395.z * cbMtdParam._m0[12u].z) - _376)) + _376);
    float _491 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _485;
    float _494 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _486;
    float _497 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _487;
    float _505 = (((_485 - _491) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _491) * 4.55000019073486328125;
    float _507 = (((_486 - _494) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) + _494) * 4.55000019073486328125;
    float _509 = (((_487 - _497) * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) + _497) * 4.55000019073486328125;
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _306) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _307) + cbTextureTilingScale._m0[14u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _605 = ((_575.z - _596) * _475) + _596;
    float _608 = ((((_575.x - _594) * _475) + _594) * 2.0) + (-1.0);
    float _609 = ((((_575.y - _595) * _475) + _595) * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _3962 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _647 = (_608 + ((((_548.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_635.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _648 = (_609 + ((((_548.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_635.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _651 = fma(_615, _256, fma(_648, _263, _647 * _249));
    float _654 = fma(_615, _257, fma(_648, _264, _647 * _250));
    float _657 = fma(_615, _258, fma(_648, _265, _647 * _251));
    float _661 = inversesqrt(dot(vec3(_651, _654, _657), vec3(_651, _654, _657)));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _690 = _688.x;
    float _691 = 1.0 - _690;
    float _700 = (cbMtdParam._m0[19u].x + dot(vec4(_661 * _651, _661 * _654, _661 * _657, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_690 - _691) * cbMtdParam._m0[24u].z) + _691) * cbMtdParam._m0[21u].z);
    float _3973 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _703 = (-0.0) - cbMtdParam._m0[24u].x;
    float _705 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
    float _713 = _701 - ((_701 * TEXCOORD_8.x) * _706);
    float _714 = _701 - ((_701 * TEXCOORD_8.y) * _706);
    float _715 = _701 - ((_701 * TEXCOORD_8.z) * _706);
    float _722 = (_713 * ((_528.x * cbMtdParam._m0[18u].x) - _505)) + _505;
    float _723 = (_714 * ((_528.y * cbMtdParam._m0[18u].y) - _507)) + _507;
    float _724 = (_715 * ((_528.z * cbMtdParam._m0[18u].z) - _509)) + _509;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _738 = _736.x;
    float _739 = 1.0 - _738;
    float _765 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_738 - _739) * cbMtdParam._m0[24u].w) + _739) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3994 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _766 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _774 = ((((cbMtdParam._m0[10u].x - _722) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _766) + _722;
    float _775 = ((((cbMtdParam._m0[10u].y - _723) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _766) + _723;
    float _776 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _724)) * _766) + _724;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _802 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _804 = _802.x;
    float _821 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _306) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _307) + cbTextureTilingScale._m0[9u].w)).x - _804) * _475) + _804;
    float _825 = ((_788.x - _821) * cbMtdParam._m0[19u].z) + _821;
    float _827 = _825 - (_825 * _713);
    float _829 = _827 - (_827 * _766);
    float _834 = (((_548.z - _605) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _605;
    float _838 = ((_635.z - _834) * cbMtdParam._m0[19u].w) + _834;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _4005 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = ((_852.z - _838) * _713) + _838;
    float _872 = ((cbMtdParam._m0[23u].x - _869) * _766) + _869;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _899 = (_893.x * 2.0) + (-1.0);
    float _900 = (_893.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _4016 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _916 = ((sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) - _615) * _715) + _615;
    float _919 = (((_859 - _647) * _713) + _647) + (cbMtdParam._m0[21u].x * _647);
    float _920 = (((_860 - _648) * _714) + _648) + (cbMtdParam._m0[21u].x * _648);
    float _931 = (((_899 - _919) + (_919 * cbMtdParam._m0[22u].z)) * _766) + _919;
    float _932 = (((_900 - _920) + (_920 * cbMtdParam._m0[22u].z)) * _766) + _920;
    float _933 = (_766 * (sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _916)) + _916;
    float _935 = cbMtdParam._m0[22u].x + _635.w;
    float _938 = fma(_933, _256, fma(_932, _263, _931 * _249));
    float _941 = fma(_933, _257, fma(_932, _264, _931 * _250));
    float _944 = fma(_933, _258, fma(_932, _265, _931 * _251));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _4027 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _952 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4049 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4060 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4071 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4082 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _957 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _971 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1021 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1011);
    float _1022 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1011);
    float _1023 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1011);
    float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
    float _1028 = _1021 * _1027;
    float _1029 = _1022 * _1027;
    float _1030 = _1023 * _1027;
    vec4 _1035 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1037 = _1035.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1209 = sqrt(((_1021 * _1021) + (_1022 * _1022)) + (_1023 * _1023));
        float _1215 = (cbMatDynParam._m0[5u].x * _1209) + cbMatDynParam._m0[5u].y;
        float _4093 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1220 = (cbMatDynParam._m0[5u].z * _1209) + cbMatDynParam._m0[5u].w;
        float _4104 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) - _1216)) + _1216) < ((_1037 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1048 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1049 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1067 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1070 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1073 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1086 = _287 + 9u;
    uint _1087 = _1086 + uint(cbMatDynParam._m0[0u].w);
    float _1093 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1087].x;
    float _1094 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_1087].y;
    float _1095 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_1087].z;
    float _4115 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1099 = 1.0 - _957;
    float _1100 = _1096 * _1099;
    float _1101 = _1097 * _1099;
    float _1102 = _1098 * _1099;
    float _1107 = (_1096 + (-0.039999999105930328369140625)) * _957;
    float _1108 = (_1097 + (-0.039999999105930328369140625)) * _957;
    float _1109 = (_1098 + (-0.039999999105930328369140625)) * _957;
    float _1110 = _1107 + 0.039999999105930328369140625;
    float _1112 = _1108 + 0.039999999105930328369140625;
    float _1113 = _1109 + 0.039999999105930328369140625;
    vec4 _1122 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1048, cbSceneParam._m0[86u].y * _1049));
    float _1126 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _1122.x;
    float _1127 = dot(vec3(_949, _950, _951), vec3(_1028, _1029, _1030));
    float _1130 = _1127 * 2.0;
    float _1134 = (_1130 * _949) - _1028;
    float _1135 = (_1130 * _950) - _1029;
    float _1136 = (_1130 * _951) - _1030;
    float _1140 = abs(dot(vec3(_1028, _1029, _1030), vec3(_949, _950, _951)));
    float _4148 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1142 = sqrt(_952);
    float _1155 = exp2((_1142 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1142 * 3.0));
    float _1161 = (1.0 - _1155) * ((_1142 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1162 = _1155 * _1142;
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1527;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1252 = fma(_1198, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190));
        float _1256 = fma(_1198, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190));
        float _1260 = fma(_1198, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190));
        float _1285 = _1190 + _949;
        float _1286 = _1194 + _950;
        float _1287 = _1198 + _951;
        float _1297 = fma(_1287, cbModelParam._m0[26u].z, fma(_1286, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285)) - _1252;
        float _1298 = fma(_1287, cbModelParam._m0[27u].z, fma(_1286, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285)) - _1256;
        float _1299 = fma(_1287, cbModelParam._m0[28u].z, fma(_1286, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285)) - _1260;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1252 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1256 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[34u].z) + ((((((_1260 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1355 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1321.x + (-0.5));
        float _1357 = _1355 * (_1321.y + (-0.5));
        float _1358 = _1355 * (_1321.z + (-0.5));
        float _1365 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1328.x + (-0.5));
        float _1367 = _1365 * (_1328.y + (-0.5));
        float _1368 = _1365 * (_1328.z + (-0.5));
        float _1375 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1335.x + (-0.5));
        float _1377 = _1375 * (_1335.y + (-0.5));
        float _1378 = _1375 * (_1335.z + (-0.5));
        float _1385 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1342.x + (-0.5));
        float _1387 = _1385 * (_1342.y + (-0.5));
        float _1388 = _1385 * (_1342.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1409 = (dot(vec3(_949, _950, _951), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1419 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4196 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1421 + 1.0))) + _1426) * _1389;
        float _1436 = _1357 * 0.5;
        float _1437 = _1367 * 0.5;
        float _1438 = _1377 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_949, _950, _951), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4229 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1463 + 1.0))) + _1468) * _1390;
        float _1478 = _1358 * 0.5;
        float _1479 = _1368 * 0.5;
        float _1480 = _1378 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_949, _950, _951), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4262 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1505 + 1.0))) + _1510) * _1391;
        _1527 = _1358;
        _1529 = _1357;
        _1530 = _1356;
        _1531 = _1368;
        _1532 = _1367;
        _1533 = _1366;
        _1534 = _1378;
        _1535 = _1377;
        _1536 = _1376;
        _1537 = _1391;
        _1538 = _1390;
        _1539 = _1389;
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1528;
        _1529 = _1528;
        _1530 = _1528;
        _1531 = _1528;
        _1532 = _1528;
        _1533 = _1528;
        _1534 = _1528;
        _1535 = _1528;
        _1536 = _1528;
        _1537 = _1528;
        _1538 = _1528;
        _1539 = _1528;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1570 = fma(_1198, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190));
        float _1574 = fma(_1198, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190));
        float _1578 = fma(_1198, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190));
        float _1601 = _1190 + _949;
        float _1602 = _1194 + _950;
        float _1603 = _1198 + _951;
        float _1613 = fma(_1603, cbModelParam._m0[30u].z, fma(_1602, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1601)) - _1570;
        float _1614 = fma(_1603, cbModelParam._m0[31u].z, fma(_1602, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1601)) - _1574;
        float _1615 = fma(_1603, cbModelParam._m0[32u].z, fma(_1602, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1601)) - _1578;
        float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
        float _1632 = ((_1619 * _1613) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1570 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1619 * _1614) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1574 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1619 * _1615) / cbModelParam._m0[35u].z) + ((((((_1578 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1632, _1633, _1634), 0.0);
        float _1669 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1670 = _1669 * (_1636.x + (-0.5));
        float _1671 = _1669 * (_1636.y + (-0.5));
        float _1672 = _1669 * (_1636.z + (-0.5));
        float _1679 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1680 = _1679 * (_1643.x + (-0.5));
        float _1681 = _1679 * (_1643.y + (-0.5));
        float _1682 = _1679 * (_1643.z + (-0.5));
        float _1689 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1690 = _1689 * (_1650.x + (-0.5));
        float _1691 = _1689 * (_1650.y + (-0.5));
        float _1692 = _1689 * (_1650.z + (-0.5));
        float _1699 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1657.x + (-0.5));
        float _1701 = _1699 * (_1657.y + (-0.5));
        float _1702 = _1699 * (_1657.z + (-0.5));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = _1670 * 0.5;
        float _1707 = _1680 * 0.5;
        float _1708 = _1690 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_949, _950, _951), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4325 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1733 + 1.0))) + _1738) * _1703;
        float _1748 = _1671 * 0.5;
        float _1749 = _1681 * 0.5;
        float _1750 = _1691 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_949, _950, _951), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4358 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1775 + 1.0))) + _1780) * _1704;
        float _1790 = _1672 * 0.5;
        float _1791 = _1682 * 0.5;
        float _1792 = _1692 * 0.5;
        float _1793 = dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792));
        float _1798 = (_1793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1793);
        float _1806 = (dot(vec3(_949, _950, _951), vec3(_1798 * _1790, _1798 * _1791, _1798 * _1792)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1815 = sqrt(((_1791 * _1791) + (_1790 * _1790)) + (_1792 * _1792)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1817 = _1816 * 2.0;
        float _1821 = (1.0 - _1816) / (_1816 + 1.0);
        float _4391 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1831 = ((((1.0 - _1822) * (_1817 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1817 + 1.0))) + _1822) * _1705;
        _1839 = _1672;
        _1840 = _1671;
        _1841 = _1670;
        _1842 = _1682;
        _1843 = _1681;
        _1844 = _1680;
        _1845 = _1692;
        _1846 = _1691;
        _1847 = _1690;
        _1848 = _1705;
        _1849 = _1704;
        _1850 = _1703;
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)));
    }
    else
    {
        _1839 = _1528;
        _1840 = _1528;
        _1841 = _1528;
        _1842 = _1528;
        _1843 = _1528;
        _1844 = _1528;
        _1845 = _1528;
        _1846 = _1528;
        _1847 = _1528;
        _1848 = _1528;
        _1849 = _1528;
        _1850 = _1528;
        _1851 = 0.0;
        _1852 = 0.0;
        _1853 = 0.0;
    }
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1540)) + _1540;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1541)) + _1541;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1542)) + _1542;
    float _1886 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1863));
    float _1907 = _1134 * 0.5;
    float _1908 = _1135 * 0.5;
    float _1909 = _1136 * 0.5;
    float _1910 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1913 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1916 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1950;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1923 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1527, _1531, _1534, _1537));
        float _1927 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1931 = dot(vec4(_1907, _1908, _1909, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1938 = dot(vec4(cbModelParam._m0[39u]), vec4(_1907, _1908, _1909, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1938) ? 0.0 : (isnan(0.0) ? _1938 : max(0.0, _1938))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1961;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1952 = dot(vec4(cbModelParam._m0[40u]), vec4(_1907, _1908, _1909, 1.0));
        _1961 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1961 = 1.0;
    }
    float _1965 = (_1961 * cbModelParam._m0[1u].x) + (_1950 * (1.0 - cbModelParam._m0[1u].x));
    float _1975 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _952);
    float _1976 = isnan(_1975) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1975 : min(cbModelParam._m0[25u].z, _1975));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2023 = fma(_1198, cbModelParam._m0[13u].z, fma(_1194, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1190)) + cbModelParam._m0[13u].w;
        float _2027 = fma(_1198, cbModelParam._m0[14u].z, fma(_1194, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1190)) + cbModelParam._m0[14u].w;
        float _2031 = fma(_1198, cbModelParam._m0[15u].z, fma(_1194, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1190)) + cbModelParam._m0[15u].w;
        float _2034 = fma(_1136, cbModelParam._m0[13u].z, fma(_1135, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1134));
        float _2037 = fma(_1136, cbModelParam._m0[14u].z, fma(_1135, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1134));
        float _2040 = fma(_1136, cbModelParam._m0[15u].z, fma(_1135, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1134));
        float _2068;
        if (_2034 > 0.0)
        {
            _2068 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2068 = frontier_phi_17_15_ladder;
        }
        float _2270;
        if (_2037 > 0.0)
        {
            _2270 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2270 = frontier_phi_26_22_ladder;
        }
        float _2524;
        if (_2040 > 0.0)
        {
            _2524 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2524 = frontier_phi_38_33_ladder;
        }
        float _2526 = isnan(_2270) ? _2068 : (isnan(_2068) ? _2270 : min(_2068, _2270));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _2034) + _2023;
        float _2532 = (_2527 * _2037) + _2027;
        float _2533 = (_2527 * _2040) + _2031;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2534;
        float _2538 = _2534 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 > _2538) || ((_2532 < _2536) || ((_2531 < _2536) || (_2531 > _2538))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2533, cbModelParam._m0[9u].z, fma(_2532, cbModelParam._m0[9u].y, _2531 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2533, cbModelParam._m0[10u].z, fma(_2532, cbModelParam._m0[10u].y, _2531 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2533, cbModelParam._m0[11u].z, fma(_2532, cbModelParam._m0[11u].y, _2531 * cbModelParam._m0[11u].x))), _1976);
            frontier_phi_16_38_ladder = _2661.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2661.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2661.x * cbModelParam._m0[1u].y;
        }
        _2056 = frontier_phi_16_38_ladder_2;
        _2058 = frontier_phi_16_38_ladder_1;
        _2060 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1134, _1135, _1136), _1976);
        _2056 = _2044.x * cbModelParam._m0[1u].y;
        _2058 = _2044.y * cbModelParam._m0[1u].y;
        _2060 = _2044.z * cbModelParam._m0[1u].y;
    }
    float _2064 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _952);
    float _2065 = isnan(_2064) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2064 : min(cbModelParam._m0[25u].w, _2064));
    float _2154;
    float _2156;
    float _2158;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2118 = fma(_1198, cbModelParam._m0[21u].z, fma(_1194, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1190)) + cbModelParam._m0[21u].w;
        float _2122 = fma(_1198, cbModelParam._m0[22u].z, fma(_1194, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1190)) + cbModelParam._m0[22u].w;
        float _2126 = fma(_1198, cbModelParam._m0[23u].z, fma(_1194, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1190)) + cbModelParam._m0[23u].w;
        float _2129 = fma(_1136, cbModelParam._m0[21u].z, fma(_1135, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1134));
        float _2132 = fma(_1136, cbModelParam._m0[22u].z, fma(_1135, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1134));
        float _2135 = fma(_1136, cbModelParam._m0[23u].z, fma(_1135, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1134));
        float _2275;
        if (_2129 > 0.0)
        {
            _2275 = abs((1.0 - _2118) / _2129);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2118 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2275 = frontier_phi_28_24_ladder;
        }
        float _2551;
        if (_2132 > 0.0)
        {
            _2551 = abs((1.0 - _2122) / _2132);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2122 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2551 = frontier_phi_40_35_ladder;
        }
        float _2764;
        if (_2135 > 0.0)
        {
            _2764 = abs((1.0 - _2126) / _2135);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2126 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2764 = frontier_phi_49_46_ladder;
        }
        float _2766 = isnan(_2551) ? _2275 : (isnan(_2275) ? _2551 : min(_2275, _2551));
        float _2767 = isnan(_2764) ? _2766 : (isnan(_2766) ? _2764 : min(_2766, _2764));
        float _2771 = (_2767 * _2129) + _2118;
        float _2772 = (_2767 * _2132) + _2122;
        float _2773 = (_2767 * _2135) + _2126;
        float _2774 = _2767 * 9.9999997473787516355514526367188e-05;
        float _2775 = (-1.0) - _2774;
        float _2777 = _2774 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2773 > _2777) || ((_2773 < _2775) || ((_2772 > _2777) || ((_2772 < _2775) || ((_2771 < _2775) || (_2771 > _2777))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2773, cbModelParam._m0[17u].z, fma(_2772, cbModelParam._m0[17u].y, _2771 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2773, cbModelParam._m0[18u].z, fma(_2772, cbModelParam._m0[18u].y, _2771 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2773, cbModelParam._m0[19u].z, fma(_2772, cbModelParam._m0[19u].y, _2771 * cbModelParam._m0[19u].x))), _2065);
            frontier_phi_25_49_ladder = _2972.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2972.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2972.x * cbModelParam._m0[1u].z;
        }
        _2154 = frontier_phi_25_49_ladder_2;
        _2156 = frontier_phi_25_49_ladder_1;
        _2158 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1134, _1135, _1136), _2065);
        _2154 = _2138.x * cbModelParam._m0[1u].z;
        _2156 = _2138.y * cbModelParam._m0[1u].z;
        _2158 = _2138.z * cbModelParam._m0[1u].z;
    }
    float _2171 = (((_1161 * _1110) + _1162) * _1126) * ((cbModelParam._m0[1u].w * (_2154 - _2056)) + _2056);
    float _2173 = (((_1161 * _1112) + _1162) * _1126) * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2175 = (((_1161 * _1113) + _1162) * _1126) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2178 = fma(_2175, cbSceneParam._m0[89u].z, fma(_2173, cbSceneParam._m0[89u].y, _2171 * cbSceneParam._m0[89u].x));
    float _2181 = fma(_2175, cbSceneParam._m0[90u].z, fma(_2173, cbSceneParam._m0[90u].y, _2171 * cbSceneParam._m0[90u].x));
    float _2184 = fma(_2175, cbSceneParam._m0[91u].z, fma(_2173, cbSceneParam._m0[91u].y, _2171 * cbSceneParam._m0[91u].x));
    uvec4 _2194 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2196 = _2194.x * 14u;
    uint _2197 = _2196 + 13u;
    float _2204 = _1126 + (-1.0);
    float _2209 = (cbLight._m0[_2197].x * _2204) + 1.0;
    float _2210 = (cbLight._m0[_2197].y * _2204) + 1.0;
    float _2211 = (cbLight._m0[_2197].z * _2204) + 1.0;
    float _2212 = (cbLight._m0[_2197].w * _2204) + 1.0;
    uint _2213 = _2196 + 5u;
    float _2219 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2223 = _2196 + 4u;
    float _2229 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2233 = _2196 | 1u;
    float _2244 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_949, _950, _951));
    float _2247 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_949, _950, _951));
    float _4527 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _4538 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2252 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * 0.3183098733425140380859375;
    float _2254 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2261 = ((cbLight._m0[_2213].x * _2219) * _2254) + ((cbLight._m0[_2223].x * _2229) * _2252);
    float _2262 = ((_2219 * cbLight._m0[_2213].y) * _2254) + ((_2229 * cbLight._m0[_2223].y) * _2252);
    float _2263 = ((_2219 * cbLight._m0[_2213].z) * _2254) + ((_2229 * cbLight._m0[_2223].z) * _2252);
    uvec4 _2267 = floatBitsToUint(cbLight._m0[_2196 + 12u]);
    bool _2269 = _2267.x == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2269)
    {
        _2280 = _2261;
        _2282 = _2262;
        _2284 = _2263;
    }
    else
    {
        uint _2288 = _2196 + 6u;
        float _2304 = (dot(vec3(cbLight._m0[_2196 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4549 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2307 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2280 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2261;
        _2282 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2262;
        _2284 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2263;
    }
    bool _2287 = _2267.y == 0u;
    float _2325;
    float _2327;
    float _2329;
    if (_2287)
    {
        _2325 = _2280;
        _2327 = _2282;
        _2329 = _2284;
    }
    else
    {
        uint _2495 = _2196 + 7u;
        float _2511 = (dot(vec3(cbLight._m0[_2196 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4565 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2514 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2325 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2280;
        _2327 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2282;
        _2329 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2284;
    }
    uint _2332 = _2196 + 8u;
    float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _952) * 0.949999988079071044921875);
    float _2346 = _2345 * _2345;
    float _2347 = cbLight._m0[_2196].x + _1028;
    float _2348 = cbLight._m0[_2196].y + _1029;
    float _2349 = cbLight._m0[_2196].z + _1030;
    float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
    float _2354 = _2353 * _2347;
    float _2355 = _2353 * _2348;
    float _2356 = _2353 * _2349;
    float _2357 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2196].xyz));
    float _4581 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _4592 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _2361 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _2362 = dot(vec3(_949, _950, _951), vec3(_2354, _2355, _2356));
    float _4603 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2354, _2355, _2356));
    float _4614 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2346 * _2346;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2382 = exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0);
    float _2383 = 0.959999978542327880859375 - _1107;
    float _2385 = 0.959999978542327880859375 - _1108;
    float _2386 = 0.959999978542327880859375 - _1109;
    float _2393 = 1.0 - _2346;
    float _2404 = (0.5 / (((_2361 * ((_2360 * _2393) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2393) + _2346) * _2360))) * _2360;
    float _4625 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2406 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    uint _2417 = _2196 + 9u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _952) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2233].x + _1028;
    float _2431 = cbLight._m0[_2233].y + _1029;
    float _2432 = cbLight._m0[_2233].z + _1030;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2233].xyz));
    float _4636 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2444 = dot(vec3(_949, _950, _951), vec3(_2437, _2438, _2439));
    float _4647 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2437, _2438, _2439));
    float _4658 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2429 * _2429;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
    float _2470 = 1.0 - _2429;
    float _2480 = (0.5 / (((_2361 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2470) + _2429) * _2443))) * _2443;
    float _4669 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    float _2492 = (((((_2463 * _2383) + _1110) * cbLight._m0[_2417].x) * _2482) * _2219) + (((((_2382 * _2383) + _1110) * cbLight._m0[_2332].x) * _2406) * _2229);
    float _2493 = (((((_2463 * _2385) + _1112) * cbLight._m0[_2417].y) * _2482) * _2219) + (((((_2382 * _2385) + _1112) * cbLight._m0[_2332].y) * _2406) * _2229);
    float _2494 = (((((_2463 * _2386) + _1113) * cbLight._m0[_2417].z) * _2482) * _2219) + (((((_2382 * _2386) + _1113) * cbLight._m0[_2332].z) * _2406) * _2229);
    float _2556;
    float _2558;
    float _2560;
    if (_2269)
    {
        _2556 = _2492;
        _2558 = _2493;
        _2560 = _2494;
    }
    else
    {
        uint _2562 = _2196 + 2u;
        uint _2566 = _2196 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _952) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _1028;
        float _2583 = cbLight._m0[_2562].y + _1029;
        float _2584 = cbLight._m0[_2562].z + _1030;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2562].xyz));
        float _4680 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2596 = dot(vec3(_949, _950, _951), vec3(_2589, _2590, _2591));
        float _4691 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4702 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
        float _2622 = 1.0 - _2581;
        float _2632 = (0.5 / (((_2361 * ((_2595 * _2622) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2622) + _2581) * _2595))) * _2595;
        float _4713 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2634 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2635 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2556 = (((((_2615 * _2383) + _1110) * cbLight._m0[_2566].x) * _2634) * _2635) + _2492;
        _2558 = (((((_2615 * _2385) + _1112) * cbLight._m0[_2566].y) * _2634) * _2635) + _2493;
        _2560 = (((((_2615 * _2386) + _1113) * cbLight._m0[_2566].z) * _2634) * _2635) + _2494;
    }
    float _2670;
    float _2672;
    float _2674;
    if (_2287)
    {
        _2670 = _2556;
        _2672 = _2558;
        _2674 = _2560;
    }
    else
    {
        uint _2681 = _2196 + 3u;
        uint _2685 = _2196 + 11u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _952) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _1028;
        float _2702 = cbLight._m0[_2681].y + _1029;
        float _2703 = cbLight._m0[_2681].z + _1030;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2681].xyz));
        float _4729 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
        float _2715 = dot(vec3(_949, _950, _951), vec3(_2708, _2709, _2710));
        float _4740 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4751 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2734 = exp2(log2(1.0 - (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0)))) * 5.0);
        float _2741 = 1.0 - _2700;
        float _2751 = (0.5 / (((_2361 * ((_2714 * _2741) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2361 * _2741) + _2700) * _2714))) * _2714;
        float _4762 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2670 = (((((_2734 * _2383) + _1110) * cbLight._m0[_2685].x) * _2753) * _2754) + _2556;
        _2672 = (((((_2734 * _2385) + _1112) * cbLight._m0[_2685].y) * _2753) * _2754) + _2558;
        _2674 = (((((_2734 * _2386) + _1113) * cbLight._m0[_2685].z) * _2753) * _2754) + _2560;
    }
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    if (_2194.y == 0u)
    {
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2829;
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2829;
        float _2832 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2829;
        uvec4 _2844 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2845 = _2844.x;
        uint _2856 = uint((float(_2844.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1049) / _2845))) + floor(float(uint(cbSceneParam._m0[85u].x * _1048) / _2845)));
        float _2866 = (log2(_2832 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2867 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        uint _2870 = uint(isnan(14.0) ? _2867 : (isnan(_2867) ? 14.0 : min(_2867, 14.0)));
        uvec4 _2875 = texelFetch(g_lightClusterGridBuffer, int(((_2870 << 2u) + (_2856 << 6u)) >> 2u));
        uint _2876 = _2875.x;
        uint _2877 = _2844.z;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((((1u << ((_2877 >> 4u) & 15u)) + 4294967295u) & _2876) == 0u) || ((_2877 & 240u) == 0u))
        {
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
            _2985 = 0.0;
            _2987 = 0.0;
        }
        else
        {
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _2986;
            float _2988;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3145)
                {
                    frontier_phi_66_pred = _3129;
                    frontier_phi_66_pred_1 = _3134;
                    frontier_phi_66_pred_2 = _3133;
                    frontier_phi_66_pred_3 = _3132;
                    frontier_phi_66_pred_4 = _3131;
                    frontier_phi_66_pred_5 = _3130;
                }
                else
                {
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    uint _3280;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3144;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    for (;;)
                    {
                        uint _3284 = uint(findLSB(_3280)) + (_3135 << 5u);
                        uint _3281 = (_3280 + 4294967295u) & _3280;
                        uint _3286 = _3284 * 48u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3306 = (_3284 * 48u) + 4u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3325 = (_3284 * 48u) + 8u;
                        vec3 _3336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x));
                        float _3340 = _3300.x - _2830;
                        float _3341 = _3300.y - _2831;
                        float _3342 = _3300.z - _2832;
                        float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                        float _3346 = inversesqrt(_3343);
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3350 = dot(vec3(_1067, _1070, _1073), vec3(_3347, _3348, _3349));
                        float _3355 = 1.0 - (_3343 * _3300.w);
                        float _4788 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3357 = sqrt(_3343) * _3319.w;
                        float _3360 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3350) + _3361;
                        float _3367 = _3357 * _3357;
                        float _3371 = ((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3356) / ((_3367 * 0.699999988079071044921875) + 1.0);
                        float _3375 = (-0.0) - _2830;
                        float _3376 = (-0.0) - _2831;
                        float _3377 = (-0.0) - _2832;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3392 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3393 = 1.0 - _1142;
                        float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                        float _3401 = _3400 * _3400;
                        float _3402 = _3401 * _3401;
                        float _3403 = _3382 + _3347;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3413 = dot(vec3(_1067, _1070, _1073), vec3(_3382, _3383, _3384));
                        float _4804 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3417 = dot(vec3(_1067, _1070, _1073), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                        float _4815 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                        float _3425 = _3360 * _3401;
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3350) + _3426;
                        float _4826 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3431 = 1.0 - _3401;
                        float _3441 = (0.5 / (((_3430 * ((_3416 * _3431) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3401) * _3416))) * _3430;
                        float _4837 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3452 = (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3424 * _3424) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * _3356;
                        _3204 = (_3371 * _3319.x) + _3277;
                        _3205 = (_3371 * _3319.y) + _3278;
                        _3206 = (_3371 * _3319.z) + _3279;
                        _3201 = (_3452 * _3336.x) + _3274;
                        _3202 = (_3452 * _3336.y) + _3275;
                        _3203 = (_3452 * _3336.z) + _3276;
                        if (_3281 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3281;
                        }
                    }
                    frontier_phi_66_pred = _3201;
                    frontier_phi_66_pred_1 = _3206;
                    frontier_phi_66_pred_2 = _3205;
                    frontier_phi_66_pred_3 = _3204;
                    frontier_phi_66_pred_4 = _3203;
                    frontier_phi_66_pred_5 = _3202;
                }
                _2978 = frontier_phi_66_pred;
                _2988 = frontier_phi_66_pred_1;
                _2986 = frontier_phi_66_pred_2;
                _2984 = frontier_phi_66_pred_3;
                _2982 = frontier_phi_66_pred_4;
                _2980 = frontier_phi_66_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2978;
                    _3130 = _2980;
                    _3131 = _2982;
                    _3132 = _2984;
                    _3133 = _2986;
                    _3134 = _2988;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
            _2985 = _2986;
            _2987 = _2988;
        }
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.z;
        uint _2994 = (_2992 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _2994) & _2876) == 0u)
        {
            _3097 = _2977;
            _3099 = _2979;
            _3101 = _2981;
            _3103 = _2983;
            _3105 = _2985;
            _3107 = _2987;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
            float _3123 = _3122 * _2830;
            float _3124 = _3122 * _2831;
            float _3125 = _3122 * _2832;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2994 < ((_2992 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3257 = _2977;
                float _3258 = _2979;
                float _3259 = _2981;
                float _3260 = _2983;
                float _3261 = _2985;
                float _3262 = _2987;
                uint _3263 = _2994;
                uint _3272;
                bool _3273;
                for (;;)
                {
                    _3272 = texelFetch(g_lightClassification, int((((_2870 << 5u) + (_2856 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                    _3273 = _3272 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3273)
                    {
                        frontier_phi_77_pred = _3262;
                        frontier_phi_77_pred_1 = _3261;
                        frontier_phi_77_pred_2 = _3260;
                        frontier_phi_77_pred_3 = _3259;
                        frontier_phi_77_pred_4 = _3258;
                        frontier_phi_77_pred_5 = _3257;
                    }
                    else
                    {
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        uint _3485 = _3272;
                        uint _3486;
                        vec4 _3511;
                        float _3512;
                        vec4 _3527;
                        vec3 _3539;
                        vec4 _3554;
                        vec4 _3569;
                        float _3615;
                        bool _3616;
                        for (;;)
                        {
                            uint _3496 = ((_3263 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3485));
                            _3486 = (_3485 + 4294967295u) & _3485;
                            uint _3498 = _3496 * 40u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3512 = _3511.w;
                            uint _3514 = (_3496 * 40u) + 4u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3496 * 40u) + 8u;
                            _3539 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x));
                            uint _3541 = (_3496 * 40u) + 16u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3496 * 40u) + 20u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3496 * 40u) + 24u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3590 = (_3496 * 40u) + 28u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3615 = fma(_2832, _3603.z, fma(_2831, _3603.y, _3603.x * _2830)) + _3603.w;
                            _3616 = !((fma(_2832, _3584.z, fma(_2831, _3584.y, _3584.x * _2830)) + _3584.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3616)
                            {
                                float _3643 = _3511.x - _2830;
                                float _3644 = _3511.y - _2831;
                                float _3645 = _3511.z - _2832;
                                float _3646 = dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645));
                                float _3649 = inversesqrt(_3646);
                                float _3650 = _3649 * _3643;
                                float _3651 = _3649 * _3644;
                                float _3652 = _3649 * _3645;
                                float _3656 = 1.0 - (_3646 / (_3512 * _3512));
                                float _4848 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3661 = sqrt(_3646) * _3527.w;
                                float _3663 = 1.39999997615814208984375 / (_3661 + 1.39999997615814208984375);
                                float _3664 = _3663 * _3663;
                                float _3667 = ((1.0 - _3664) * dot(vec3(_3650, _3651, _3652), vec3(_1067, _1070, _1073))) + _3664;
                                float _3670 = _3661 * _3661;
                                float _3674 = (fma(_2832, _3554.z, fma(_2831, _3554.y, _3554.x * _2830)) + _3554.w) / _3615;
                                float _3675 = (fma(_2832, _3569.z, fma(_2831, _3569.y, _3569.x * _2830)) + _3569.w) / _3615;
                                float _3679 = 1.0 - dot(vec2(_3674, _3675), vec2(_3674, _3675));
                                float _4864 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3681 = _3680 * (((isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0))) * _3657) / ((_3670 * 0.699999988079071044921875) + 1.0));
                                float _3693 = exp2(log2(1.0 / ((_3670 * 3.5) + 5.0)) * 0.25);
                                float _3694 = 1.0 - _1142;
                                float _3701 = sqrt(1.0 - ((1.0 - (_3694 * _3694)) * (1.0 - (_3693 * _3693))));
                                float _3702 = _3701 * _3701;
                                float _3703 = _3702 * _3702;
                                float _3704 = _3650 - _3123;
                                float _3705 = _3651 - _3124;
                                float _3706 = _3652 - _3125;
                                float _3710 = inversesqrt(dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706)));
                                float _3714 = dot(vec3(_1067, _1070, _1073), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4875 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3718 = dot(vec3(_1067, _1070, _1073), vec3(_3710 * _3704, _3710 * _3705, _3710 * _3706));
                                float _4886 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3725 = ((_3721 * _3721) * (_3703 + (-1.0))) + 1.0;
                                float _3726 = _3663 * _3702;
                                float _3727 = _3726 * _3726;
                                float _3733 = ((1.0 - _3727) * dot(vec3(_1067, _1070, _1073), vec3(_3650, _3651, _3652))) + _3727;
                                float _4897 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3735 = 1.0 - _3702;
                                float _3745 = (0.5 / (((_3734 * ((_3717 * _3735) + _3702)) + 9.9999999392252902907785028219223e-09) + (((_3734 * _3735) + _3702) * _3717))) * _3734;
                                float _4908 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3755 = (_3680 * _3657) * (((_3703 * 3.1415927410125732421875) * (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) / ((_3725 * _3725) * ((_3670 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3681 * _3527.y;
                                frontier_phi_83_pred_1 = _3681 * _3527.x;
                                frontier_phi_83_pred_2 = _3755 * _3539.z;
                                frontier_phi_83_pred_3 = _3755 * _3539.y;
                                frontier_phi_83_pred_4 = _3755 * _3539.x;
                                frontier_phi_83_pred_5 = _3681 * _3527.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3763 = frontier_phi_83_pred;
                            _3762 = frontier_phi_83_pred_1;
                            _3761 = frontier_phi_83_pred_2;
                            _3760 = frontier_phi_83_pred_3;
                            _3759 = frontier_phi_83_pred_4;
                            _3764 = frontier_phi_83_pred_5;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            if (_3486 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3486;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3471;
                        frontier_phi_77_pred_1 = _3470;
                        frontier_phi_77_pred_2 = _3469;
                        frontier_phi_77_pred_3 = _3468;
                        frontier_phi_77_pred_4 = _3467;
                        frontier_phi_77_pred_5 = _3466;
                    }
                    _3108 = frontier_phi_77_pred;
                    _3106 = frontier_phi_77_pred_1;
                    _3104 = frontier_phi_77_pred_2;
                    _3102 = frontier_phi_77_pred_3;
                    _3100 = frontier_phi_77_pred_4;
                    _3098 = frontier_phi_77_pred_5;
                    uint _3264 = _3263 + 1u;
                    if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3257 = _3098;
                        _3258 = _3100;
                        _3259 = _3102;
                        _3260 = _3104;
                        _3261 = _3106;
                        _3262 = _3108;
                        _3263 = _3264;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3102;
                frontier_phi_58_59_ladder_1 = _3108;
                frontier_phi_58_59_ladder_2 = _3106;
                frontier_phi_58_59_ladder_3 = _3104;
                frontier_phi_58_59_ladder_4 = _3100;
                frontier_phi_58_59_ladder_5 = _3098;
            }
            else
            {
                frontier_phi_58_59_ladder = _2981;
                frontier_phi_58_59_ladder_1 = _2987;
                frontier_phi_58_59_ladder_2 = _2985;
                frontier_phi_58_59_ladder_3 = _2983;
                frontier_phi_58_59_ladder_4 = _2979;
                frontier_phi_58_59_ladder_5 = _2977;
            }
            _3097 = frontier_phi_58_59_ladder_5;
            _3099 = frontier_phi_58_59_ladder_4;
            _3101 = frontier_phi_58_59_ladder;
            _3103 = frontier_phi_58_59_ladder_3;
            _3105 = frontier_phi_58_59_ladder_2;
            _3107 = frontier_phi_58_59_ladder_1;
        }
        float _3112 = isnan(1.0) ? _1126 : (isnan(_1126) ? 1.0 : min(_1126, 1.0));
        _2889 = (_3112 * _3103) + _2325;
        _2891 = (_3112 * _3105) + _2327;
        _2893 = (_3112 * _3107) + _2329;
        _2895 = ((_3097 * _1110) * _3112) + _2670;
        _2897 = ((_3099 * _1112) * _3112) + _2672;
        _2899 = ((_3101 * _1113) * _3112) + _2674;
    }
    else
    {
        _2889 = _2325;
        _2891 = _2327;
        _2893 = _2329;
        _2895 = _2670;
        _2897 = _2672;
        _2899 = _2674;
    }
    float _4924 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4935 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _4946 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _2916 = ((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2889 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1126))) + ((_2895 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2917 = ((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2891 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1126))) + ((_2897 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    float _2918 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2893 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1126))) + ((_2899 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1965)) * cbPerFrame._m0[3u].x);
    uint _2919 = _287 + 6u;
    float _2927 = _1048 / cbSceneParam._m0[86u].x;
    float _2928 = _1049 / cbSceneParam._m0[86u].y;
    vec4 _2942 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, (log2((isnan(cbSceneParam._m0[77u].w) ? _971 : (isnan(_971) ? cbSceneParam._m0[77u].w : min(_971, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2944 = _2942.x;
    float _2945 = _2942.y;
    float _2946 = _2942.z;
    float _2947 = _2942.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_971 > cbSceneParam._m0[78u].w)
    {
        float _3002 = isnan(_971) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _971 : min(cbSceneParam._m0[80u].w, _971));
        float _3003 = _3002 / _971;
        float _3014 = _3003 * _1021;
        float _3015 = _1022 * _3003;
        float _3016 = (-0.0) - _3015;
        float _3017 = _3003 * _1023;
        float _3019 = (cbSceneParam._m0[77u].w * _3016) / _3002;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3015;
        float _3027 = sqrt(((_3014 * _3014) + (_3015 * _3015)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3002)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3214;
        if (abs((_3016 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3214 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3160 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3214 = ((abs(_3027 / _3016) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3037 * _3169) - exp2(_3037 * _3170)) * _3158))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3216 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2927, _2928, 1.0), 0.0);
        float _3225 = exp2((_3214 * (-1.44269502162933349609375)) * (1.0 - _3216.w));
        float _3226 = log2(_3225);
        float _3242 = log2(_2947);
        _3039 = (exp2(_3242 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].x)) * _3216.x) / cbSceneParam._m0[78u].x)) + _2944;
        _3041 = (exp2(_3242 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].y)) * _3216.y) / cbSceneParam._m0[78u].y)) + _2945;
        _3043 = (exp2(_3242 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].z)) * _3216.z) / cbSceneParam._m0[78u].z)) + _2946;
        _3045 = _3225 * _2947;
    }
    else
    {
        _3039 = _2944;
        _3041 = _2945;
        _3043 = _2946;
        _3045 = _2947;
    }
    bool _3252;
    vec4 _3055;
    vec4 _3077;
    float _3079;
    float _3083;
    float _3084;
    float _3085;
    float _3086;
    bool _3096;
    for (;;)
    {
        _3055 = cbMatDynParam._m0[0u];
        float _3057 = roundEven(_3055.y);
        bool _3058 = _3057 == 3.0;
        float _3059 = log2(_3045);
        float _3066 = exp2(_3059 * cbSceneParam._m0[78u].x) * _2916;
        float _3067 = exp2(_3059 * cbSceneParam._m0[78u].y) * _2917;
        float _3068 = exp2(_3059 * cbSceneParam._m0[78u].z) * _2918;
        float _3075 = _1037 + (-0.5);
        _3077 = cbMtdParam._m0[1u];
        _3079 = _3077.y * _3075;
        float _3082 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3083 = _3082 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
        _3084 = _3082 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
        _3085 = _3082 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
        _3086 = _3075 * 0.999000012874603271484375;
        _3096 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3096)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3086) < 0.5)
            {
                _3252 = true;
                break;
            }
        }
        uint _3193 = _1086 + uint(_3055.w);
        if ((cbInstanceData._m0[_3193].w < 1.0) && ((cbInstanceData._m0[_3193].w + _3086) < 0.5))
        {
            _3252 = true;
            break;
        }
        if ((_3079 + 1.0) < _3077.x)
        {
            _3252 = true;
            break;
        }
        _3252 = false;
        break;
    }
    float _3457;
    if (_3252)
    {
        discard_state = true;
        _3457 = 0.0;
    }
    else
    {
        _3457 = cbInstanceData._m0[_2919].w;
    }
    SV_Target.x = _3083;
    SV_Target.y = _3084;
    SV_Target.z = _3085;
    SV_Target.w = _3457;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2919].w;
    discard_exit();
}


