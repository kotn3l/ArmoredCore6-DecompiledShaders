#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1307;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3918 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3929 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3940 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _408 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _410 = _408.x;
    float _422 = dot(vec4(_410, _408.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _439 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _376.x) * 2.0) - ((((_410 - _422) * cbMtdParam._m0[23u].w) + _422) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3951 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _447 = (_440 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _448 = (_440 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _449 = (_440 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _466 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _488 = _486.x;
    float _498 = dot(vec4(_488, _486.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _512 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _376.y) * 2.0) - ((((_488 - _498) * cbMtdParam._m0[23u].w) + _498) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3962 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _513 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _520 = (_513 * ((_466.x * cbMtdParam._m0[13u].x) - _447)) + _447;
    float _521 = (_513 * ((_466.y * cbMtdParam._m0[13u].y) - _448)) + _448;
    float _522 = (_513 * ((_466.z * cbMtdParam._m0[13u].z) - _449)) + _449;
    float _526 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _520;
    float _529 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _521;
    float _532 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _522;
    float _539 = ((_520 - _526) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _526;
    float _540 = ((_521 - _529) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) + _529;
    float _541 = ((_522 - _532) * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) + _532;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    float _604 = ((_576.x - _595) * _440) + _595;
    float _605 = ((_576.y - _596) * _440) + _596;
    float _606 = ((_576.z - _597) * _440) + _597;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _631 = ((_618.z - _606) * _513) + _606;
    float _634 = ((((_618.x - _604) * _513) + _604) * 2.0) + (-1.0);
    float _635 = ((((_618.y - _605) * _513) + _605) * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3973 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _673 = (_634 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_553.x * 2.0) + (-1.0)))) + (((_661.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _674 = (_635 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_553.y * 2.0) + (-1.0)))) + (((_661.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _702 = _700.x;
    float _720 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _702) * _440) + _702;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _293) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _294) + cbTextureTilingScale._m0[21u].w)).x - _720) * _513) + _720;
    float _742 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _738) * cbMtdParam._m0[19u].z) + _738;
    float _747 = (((_553.z - _631) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _631;
    float _751 = ((_661.z - _747) * cbMtdParam._m0[19u].w) + _747;
    float _753 = cbMtdParam._m0[22u].x + _661.w;
    float _756 = fma(_641, _240 * NORMAL.x, fma(_674, _247 * TANGENT.x, (_233 * _225) * _673));
    float _759 = fma(_641, _240 * NORMAL.y, fma(_674, _247 * TANGENT.y, (_233 * _226) * _673));
    float _762 = fma(_641, _240 * NORMAL.z, fma(_674, _247 * TANGENT.z, (_233 * _227) * _673));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _3984 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _770 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4006 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _4017 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _4028 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _4039 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _775 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _840 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _830);
    float _841 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _830);
    float _842 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _830);
    float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
    float _847 = _840 * _846;
    float _848 = _841 * _846;
    float _849 = _842 * _846;
    float _855 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _856 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _874 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _877 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _880 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    uint _894 = (_274 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _900 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_894].x;
    float _901 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_894].y;
    float _902 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_894].z;
    float _4050 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _906 = 1.0 - _775;
    float _907 = _903 * _906;
    float _908 = _904 * _906;
    float _909 = _905 * _906;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _775;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _775;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _775;
    float _917 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    float _920 = _916 + 0.039999999105930328369140625;
    vec4 _929 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _855, cbSceneParam._m0[86u].y * _856));
    float _933 = ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * TEXCOORD_5.w) * _929.x;
    float _934 = dot(vec3(_767, _768, _769), vec3(_847, _848, _849));
    float _937 = _934 * 2.0;
    float _941 = (_937 * _767) - _847;
    float _942 = (_937 * _768) - _848;
    float _943 = (_937 * _769) - _849;
    float _947 = abs(dot(vec3(_847, _848, _849), vec3(_767, _768, _769)));
    float _4083 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_770);
    float _962 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _968 = (1.0 - _962) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _969 = _962 * _949;
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1306;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_1005, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997));
        float _1035 = fma(_1005, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997));
        float _1039 = fma(_1005, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997));
        float _1064 = _997 + _767;
        float _1065 = _1001 + _768;
        float _1066 = _1005 + _769;
        float _1076 = fma(_1066, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064)) - _1031;
        float _1077 = fma(_1066, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064)) - _1035;
        float _1078 = fma(_1066, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064)) - _1039;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1134 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1100.x + (-0.5));
        float _1136 = _1134 * (_1100.y + (-0.5));
        float _1137 = _1134 * (_1100.z + (-0.5));
        float _1144 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1107.x + (-0.5));
        float _1146 = _1144 * (_1107.y + (-0.5));
        float _1147 = _1144 * (_1107.z + (-0.5));
        float _1154 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1114.x + (-0.5));
        float _1156 = _1154 * (_1114.y + (-0.5));
        float _1157 = _1154 * (_1114.z + (-0.5));
        float _1164 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1121.x + (-0.5));
        float _1166 = _1164 * (_1121.y + (-0.5));
        float _1167 = _1164 * (_1121.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1188 = (dot(vec3(_767, _768, _769), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4109 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1198 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4120 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4131 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_1200 + 1.0))) + _1205) * _1168;
        float _1215 = _1136 * 0.5;
        float _1216 = _1146 * 0.5;
        float _1217 = _1156 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_767, _768, _769), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4164 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1242 + 1.0))) + _1247) * _1169;
        float _1257 = _1137 * 0.5;
        float _1258 = _1147 * 0.5;
        float _1259 = _1157 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_767, _768, _769), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4197 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1284 + 1.0))) + _1289) * _1170;
        _1306 = _1137;
        _1308 = _1136;
        _1309 = _1135;
        _1310 = _1147;
        _1311 = _1146;
        _1312 = _1145;
        _1313 = _1157;
        _1314 = _1156;
        _1315 = _1155;
        _1316 = _1170;
        _1317 = _1169;
        _1318 = _1168;
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _1307;
        _1308 = _1307;
        _1309 = _1307;
        _1310 = _1307;
        _1311 = _1307;
        _1312 = _1307;
        _1313 = _1307;
        _1314 = _1307;
        _1315 = _1307;
        _1316 = _1307;
        _1317 = _1307;
        _1318 = _1307;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_1005, cbModelParam._m0[30u].z, fma(_1001, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997));
        float _1349 = fma(_1005, cbModelParam._m0[31u].z, fma(_1001, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997));
        float _1353 = fma(_1005, cbModelParam._m0[32u].z, fma(_1001, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997));
        float _1376 = _997 + _767;
        float _1377 = _1001 + _768;
        float _1378 = _1005 + _769;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_767, _768, _769), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4238 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4249 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4260 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_767, _768, _769), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4293 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_767, _768, _769), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4326 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1307;
        _1615 = _1307;
        _1616 = _1307;
        _1617 = _1307;
        _1618 = _1307;
        _1619 = _1307;
        _1620 = _1307;
        _1621 = _1307;
        _1622 = _1307;
        _1623 = _1307;
        _1624 = _1307;
        _1625 = _1307;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1319)) + _1319;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1320)) + _1320;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1321)) + _1321;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _941 * 0.5;
    float _1683 = _942 * 0.5;
    float _1684 = _943 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1306, _1310, _1313, _1316));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _770);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1800 = fma(_1005, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _997)) + cbModelParam._m0[13u].w;
        float _1804 = fma(_1005, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _997)) + cbModelParam._m0[14u].w;
        float _1808 = fma(_1005, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _997)) + cbModelParam._m0[15u].w;
        float _1811 = fma(_943, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941));
        float _1814 = fma(_943, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941));
        float _1817 = fma(_943, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941));
        float _1845;
        if (_1811 > 0.0)
        {
            _1845 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1845 = frontier_phi_14_12_ladder;
        }
        float _2017;
        if (_1814 > 0.0)
        {
            _2017 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2017 = frontier_phi_23_19_ladder;
        }
        float _2312;
        if (_1817 > 0.0)
        {
            _2312 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2312 = frontier_phi_35_30_ladder;
        }
        float _2314 = isnan(_2017) ? _1845 : (isnan(_1845) ? _2017 : min(_1845, _2017));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1811) + _1800;
        float _2320 = (_2315 * _1814) + _1804;
        float _2321 = (_2315 * _1817) + _1808;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_13_35_ladder = _2466.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2466.x * cbModelParam._m0[1u].y;
        }
        _1833 = frontier_phi_13_35_ladder_2;
        _1835 = frontier_phi_13_35_ladder_1;
        _1837 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_941, _942, _943), _1751);
        _1833 = _1821.x * cbModelParam._m0[1u].y;
        _1835 = _1821.y * cbModelParam._m0[1u].y;
        _1837 = _1821.z * cbModelParam._m0[1u].y;
    }
    float _1841 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _770);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1841 : min(cbModelParam._m0[25u].w, _1841));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1896 = fma(_1005, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _997)) + cbModelParam._m0[21u].w;
        float _1900 = fma(_1005, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _997)) + cbModelParam._m0[22u].w;
        float _1904 = fma(_1005, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _997)) + cbModelParam._m0[23u].w;
        float _1907 = fma(_943, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941));
        float _1910 = fma(_943, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941));
        float _1913 = fma(_943, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941));
        float _2022;
        if (_1907 > 0.0)
        {
            _2022 = abs((1.0 - _1896) / _1907);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1896 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2022 = frontier_phi_25_21_ladder;
        }
        float _2339;
        if (_1910 > 0.0)
        {
            _2339 = abs((1.0 - _1900) / _1910);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1900 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2339 = frontier_phi_37_32_ladder;
        }
        float _2677;
        if (_1913 > 0.0)
        {
            _2677 = abs((1.0 - _1904) / _1913);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1904 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2677 = frontier_phi_47_44_ladder;
        }
        float _2679 = isnan(_2339) ? _2022 : (isnan(_2022) ? _2339 : min(_2022, _2339));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _1907) + _1896;
        float _2685 = (_2680 * _1910) + _1900;
        float _2686 = (_2680 * _1913) + _1904;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2688 = (-1.0) - _2687;
        float _2690 = _2687 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2686 > _2690) || ((_2686 < _2688) || ((_2685 > _2690) || ((_2685 < _2688) || ((_2684 < _2688) || (_2684 > _2690))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2686, cbModelParam._m0[17u].z, fma(_2685, cbModelParam._m0[17u].y, _2684 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2686, cbModelParam._m0[18u].z, fma(_2685, cbModelParam._m0[18u].y, _2684 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2686, cbModelParam._m0[19u].z, fma(_2685, cbModelParam._m0[19u].y, _2684 * cbModelParam._m0[19u].x))), _1842);
            frontier_phi_22_47_ladder = _2808.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2808.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2808.x * cbModelParam._m0[1u].z;
        }
        _1932 = frontier_phi_22_47_ladder_2;
        _1934 = frontier_phi_22_47_ladder_1;
        _1936 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_941, _942, _943), _1842);
        _1932 = _1916.x * cbModelParam._m0[1u].z;
        _1934 = _1916.y * cbModelParam._m0[1u].z;
        _1936 = _1916.z * cbModelParam._m0[1u].z;
    }
    float _1949 = (((_968 * _917) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1932 - _1833)) + _1833);
    float _1951 = (((_968 * _919) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1934 - _1835)) + _1835);
    float _1953 = (((_968 * _920) + _969) * _933) * ((cbModelParam._m0[1u].w * (_1936 - _1837)) + _1837);
    float _1956 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1949 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1949 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1949 * cbSceneParam._m0[91u].x));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2009 = _1996 / _2008;
    float _2010 = _2000 / _2008;
    float _2011 = _2004 / _2008;
    float _2158;
    float _2159;
    float _2160;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2038 = ((uint(_2011 > cbSceneParam._m0[59u].y) + uint(_2011 > cbSceneParam._m0[59u].x)) + uint(_2011 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2039 = _2038 + 43u;
        uint _2047 = _2038 + 44u;
        uint _2055 = _2038 + 45u;
        uint _2063 = _2038 + 46u;
        float _2074 = fma(_2008, cbSceneParam._m0[_2039].w, fma(_2004, cbSceneParam._m0[_2039].z, fma(_2000, cbSceneParam._m0[_2039].y, _1996 * cbSceneParam._m0[_2039].x)));
        float _2078 = fma(_2008, cbSceneParam._m0[_2047].w, fma(_2004, cbSceneParam._m0[_2047].z, fma(_2000, cbSceneParam._m0[_2047].y, _1996 * cbSceneParam._m0[_2047].x)));
        float _2086 = fma(_2008, cbSceneParam._m0[_2063].w, fma(_2004, cbSceneParam._m0[_2063].z, fma(_2000, cbSceneParam._m0[_2063].y, _1996 * cbSceneParam._m0[_2063].x)));
        float _2091 = cbSceneParam._m0[33u].z * _2086;
        float _2093 = cbSceneParam._m0[33u].w * _2086;
        float _2096 = fma(_2008, cbSceneParam._m0[_2055].w, fma(_2004, cbSceneParam._m0[_2055].z, fma(_2000, cbSceneParam._m0[_2055].y, _1996 * cbSceneParam._m0[_2055].x))) / _2086;
        float _2144 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
        float _4452 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2151 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2091 + _2074) / _2086, (_2093 + _2078) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2074) / _2086, (_2078 - _2091) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2091) / _2086, (_2078 - _2093) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2093) / _2086, (_2091 + _2078) / _2086), _2096), 0.0)).x), vec4(0.25)));
        _2158 = 1.0 - (_2151 * cbSceneParam._m0[34u].x);
        _2159 = 1.0 - (_2151 * cbSceneParam._m0[34u].y);
        _2160 = 1.0 - (_2151 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2158 = 1.0;
        _2159 = 1.0;
        _2160 = 1.0;
    }
    float _2224;
    float _2226;
    float _2228;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2212 = fma(_2008, cbSceneParam._m0[63u].w, fma(_2004, cbSceneParam._m0[63u].z, fma(_2000, cbSceneParam._m0[63u].y, _1996 * cbSceneParam._m0[63u].x)));
        float _2213 = fma(_2008, cbSceneParam._m0[60u].w, fma(_2004, cbSceneParam._m0[60u].z, fma(_2000, cbSceneParam._m0[60u].y, _1996 * cbSceneParam._m0[60u].x))) / _2212;
        float _2214 = fma(_2008, cbSceneParam._m0[61u].w, fma(_2004, cbSceneParam._m0[61u].z, fma(_2000, cbSceneParam._m0[61u].y, _1996 * cbSceneParam._m0[61u].x))) / _2212;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2213 >= cbSceneParam._m0[64u].x) && (_2214 >= cbSceneParam._m0[64u].y)) && (_2213 <= cbSceneParam._m0[64u].z)) && (_2214 <= cbSceneParam._m0[64u].w))
        {
            float _2352 = fma(_2008, cbSceneParam._m0[62u].w, fma(_2004, cbSceneParam._m0[62u].z, fma(_2000, cbSceneParam._m0[62u].y, _1996 * cbSceneParam._m0[62u].x))) / _2212;
            float _2356 = isnan(cbSceneParam._m0[41u].w) ? _2352 : (isnan(_2352) ? cbSceneParam._m0[41u].w : max(_2352, cbSceneParam._m0[41u].w));
            float _2399 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
            float _4468 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
            float _2406 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2213, cbSceneParam._m0[33u].w + _2214), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2213, _2214 - cbSceneParam._m0[33u].z), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].z, _2214 - cbSceneParam._m0[33u].w), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2214), _2356), 0.0)).x), vec4(0.25)));
            float _2410 = 1.0 - (_2406 * cbSceneParam._m0[34u].x);
            float _2411 = 1.0 - (_2406 * cbSceneParam._m0[34u].y);
            float _2412 = 1.0 - (_2406 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
            frontier_phi_34_33_ladder_1 = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
            frontier_phi_34_33_ladder_2 = isnan(_2410) ? _2158 : (isnan(_2158) ? _2410 : min(_2158, _2410));
        }
        else
        {
            frontier_phi_34_33_ladder = _2160;
            frontier_phi_34_33_ladder_1 = _2159;
            frontier_phi_34_33_ladder_2 = _2158;
        }
        _2224 = frontier_phi_34_33_ladder_2;
        _2226 = frontier_phi_34_33_ladder_1;
        _2228 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2224 = _2158;
        _2226 = _2159;
        _2228 = _2160;
    }
    uvec4 _2233 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2235 = _2233.x * 14u;
    uint _2236 = _2235 + 13u;
    float _2243 = _933 + (-1.0);
    float _2248 = (cbLight._m0[_2236].x * _2243) + 1.0;
    float _2249 = (cbLight._m0[_2236].y * _2243) + 1.0;
    float _2250 = (cbLight._m0[_2236].z * _2243) + 1.0;
    float _2251 = (cbLight._m0[_2236].w * _2243) + 1.0;
    uint _2252 = _2235 + 5u;
    float _2258 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2262 = _2235 + 4u;
    float _2271 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
    uint _2275 = _2235 | 1u;
    float _2286 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_767, _768, _769));
    float _2289 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_767, _768, _769));
    float _4504 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _4515 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2294 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2296 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2303 = ((cbLight._m0[_2252].x * _2258) * _2296) + (((cbLight._m0[_2262].x * _2224) * _2271) * _2294);
    float _2304 = ((_2258 * cbLight._m0[_2252].y) * _2296) + (((cbLight._m0[_2262].y * _2226) * _2271) * _2294);
    float _2305 = ((_2258 * cbLight._m0[_2252].z) * _2296) + (((cbLight._m0[_2262].z * _2228) * _2271) * _2294);
    uvec4 _2309 = floatBitsToUint(cbLight._m0[_2235 + 12u]);
    bool _2311 = _2309.x == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2311)
    {
        _2413 = _2303;
        _2415 = _2304;
        _2417 = _2305;
    }
    else
    {
        uint _2421 = _2235 + 6u;
        float _2437 = (dot(vec3(cbLight._m0[_2235 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4526 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2440 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2413 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2303;
        _2415 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2304;
        _2417 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2305;
    }
    bool _2420 = _2309.y == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2420)
    {
        _2475 = _2413;
        _2477 = _2415;
        _2479 = _2417;
    }
    else
    {
        uint _2648 = _2235 + 7u;
        float _2664 = (dot(vec3(cbLight._m0[_2235 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2665 = _2664 * _2664;
        float _4542 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2666 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2667 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2475 = (((cbLight._m0[_2648].x * 0.3183098733425140380859375) * _2666) * _2667) + _2413;
        _2477 = (((cbLight._m0[_2648].y * 0.3183098733425140380859375) * _2666) * _2667) + _2415;
        _2479 = (((cbLight._m0[_2648].z * 0.3183098733425140380859375) * _2666) * _2667) + _2417;
    }
    uint _2482 = _2235 + 8u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _770) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2235].x + _847;
    float _2498 = cbLight._m0[_2235].y + _848;
    float _2499 = cbLight._m0[_2235].z + _849;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2235].xyz));
    float _4558 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2511 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2512 = dot(vec3(_767, _768, _769), vec3(_2504, _2505, _2506));
    float _4580 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2504, _2505, _2506));
    float _4591 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2496 * _2496;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2533 = 0.959999978542327880859375 - _914;
    float _2535 = 0.959999978542327880859375 - _915;
    float _2536 = 0.959999978542327880859375 - _916;
    float _2543 = 1.0 - _2496;
    float _2554 = (0.5 / (((_2511 * ((_2510 * _2543) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2543) + _2496) * _2510))) * _2510;
    float _4602 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2556 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    uint _2570 = _2235 + 9u;
    float _2581 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _770) * 0.949999988079071044921875);
    float _2582 = _2581 * _2581;
    float _2583 = cbLight._m0[_2275].x + _847;
    float _2584 = cbLight._m0[_2275].y + _848;
    float _2585 = cbLight._m0[_2275].z + _849;
    float _2589 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
    float _2590 = _2589 * _2583;
    float _2591 = _2589 * _2584;
    float _2592 = _2589 * _2585;
    float _2593 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2275].xyz));
    float _4613 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2596 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2597 = dot(vec3(_767, _768, _769), vec3(_2590, _2591, _2592));
    float _4624 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2601 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2590, _2591, _2592));
    float _4635 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2605 = _2582 * _2582;
    float _2609 = ((_2600 * _2600) * (_2605 + (-1.0))) + 1.0;
    float _2616 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
    float _2623 = 1.0 - _2582;
    float _2633 = (0.5 / (((_2511 * ((_2596 * _2623) + _2582)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2623) + _2582) * _2596))) * _2596;
    float _4646 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2635 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2605 / ((_2609 * _2609) * 3.141590118408203125));
    float _2645 = (((((_2616 * _2533) + _917) * cbLight._m0[_2570].x) * _2635) * _2258) + ((((cbLight._m0[_2482].x * _2224) * ((_2532 * _2533) + _917)) * _2556) * _2271);
    float _2646 = (((((_2616 * _2535) + _919) * cbLight._m0[_2570].y) * _2635) * _2258) + ((((cbLight._m0[_2482].y * _2226) * ((_2532 * _2535) + _919)) * _2556) * _2271);
    float _2647 = (((((_2616 * _2536) + _920) * cbLight._m0[_2570].z) * _2635) * _2258) + ((((cbLight._m0[_2482].z * _2228) * ((_2532 * _2536) + _920)) * _2556) * _2271);
    float _2703;
    float _2705;
    float _2707;
    if (_2311)
    {
        _2703 = _2645;
        _2705 = _2646;
        _2707 = _2647;
    }
    else
    {
        uint _2709 = _2235 + 2u;
        uint _2713 = _2235 + 10u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _770) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _847;
        float _2730 = cbLight._m0[_2709].y + _848;
        float _2731 = cbLight._m0[_2709].z + _849;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2709].xyz));
        float _4657 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2743 = dot(vec3(_767, _768, _769), vec3(_2736, _2737, _2738));
        float _4668 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4679 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2511 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2769) + _2728) * _2742))) * _2742;
        float _4690 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2703 = (((((_2762 * _2533) + _917) * cbLight._m0[_2713].x) * _2781) * _2782) + _2645;
        _2705 = (((((_2762 * _2535) + _919) * cbLight._m0[_2713].y) * _2781) * _2782) + _2646;
        _2707 = (((((_2762 * _2536) + _920) * cbLight._m0[_2713].z) * _2781) * _2782) + _2647;
    }
    float _2813;
    float _2815;
    float _2817;
    if (_2420)
    {
        _2813 = _2703;
        _2815 = _2705;
        _2817 = _2707;
    }
    else
    {
        uint _2824 = _2235 + 3u;
        uint _2828 = _2235 + 11u;
        float _2842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2824].w)) * _770) * 0.949999988079071044921875);
        float _2843 = _2842 * _2842;
        float _2844 = cbLight._m0[_2824].x + _847;
        float _2845 = cbLight._m0[_2824].y + _848;
        float _2846 = cbLight._m0[_2824].z + _849;
        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
        float _2851 = _2850 * _2844;
        float _2852 = _2850 * _2845;
        float _2853 = _2850 * _2846;
        float _2854 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2824].xyz));
        float _4706 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2857 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2858 = dot(vec3(_767, _768, _769), vec3(_2851, _2852, _2853));
        float _4717 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2862 = dot(vec3(cbLight._m0[_2824].xyz), vec3(_2851, _2852, _2853));
        float _4728 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2866 = _2843 * _2843;
        float _2870 = ((_2861 * _2861) * (_2866 + (-1.0))) + 1.0;
        float _2877 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
        float _2884 = 1.0 - _2843;
        float _2894 = (0.5 / (((_2511 * ((_2857 * _2884) + _2843)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2884) + _2843) * _2857))) * _2857;
        float _4739 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2896 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2866 / ((_2870 * _2870) * 3.141590118408203125));
        float _2897 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2813 = (((((_2877 * _2533) + _917) * cbLight._m0[_2828].x) * _2896) * _2897) + _2703;
        _2815 = (((((_2877 * _2535) + _919) * cbLight._m0[_2828].y) * _2896) * _2897) + _2705;
        _2817 = (((((_2877 * _2536) + _920) * cbLight._m0[_2828].z) * _2896) * _2897) + _2707;
    }
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_2233.y == 0u)
    {
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.x;
        uint _2930 = uint((float(_2918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _856) / _2919))) + floor(float(uint(cbSceneParam._m0[85u].x * _855) / _2919)));
        float _2940 = (log2(_2011 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2941 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        uint _2944 = uint(isnan(14.0) ? _2941 : (isnan(_2941) ? 14.0 : min(_2941, 14.0)));
        uvec4 _2949 = texelFetch(g_lightClusterGridBuffer, int(((_2944 << 2u) + (_2930 << 6u)) >> 2u));
        uint _2950 = _2949.x;
        uint _2951 = _2918.z;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((((1u << ((_2951 >> 4u) & 15u)) + 4294967295u) & _2950) == 0u) || ((_2951 & 240u) == 0u))
        {
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
        }
        else
        {
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            uint _3181 = 0u;
            uint _3190;
            bool _3191;
            for (;;)
            {
                _3190 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                _3191 = _3190 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3191)
                {
                    frontier_phi_66_pred = _3180;
                    frontier_phi_66_pred_1 = _3179;
                    frontier_phi_66_pred_2 = _3178;
                    frontier_phi_66_pred_3 = _3177;
                    frontier_phi_66_pred_4 = _3176;
                    frontier_phi_66_pred_5 = _3175;
                }
                else
                {
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    uint _3305;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3190;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    for (;;)
                    {
                        uint _3309 = uint(findLSB(_3305)) + (_3181 << 5u);
                        uint _3306 = (_3305 + 4294967295u) & _3305;
                        uint _3311 = _3309 * 48u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3331 = (_3309 * 48u) + 4u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3350 = (_3309 * 48u) + 8u;
                        vec3 _3361 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x));
                        float _3365 = _3325.x - _2009;
                        float _3366 = _3325.y - _2010;
                        float _3367 = _3325.z - _2011;
                        float _3368 = dot(vec3(_3365, _3366, _3367), vec3(_3365, _3366, _3367));
                        float _3371 = inversesqrt(_3368);
                        float _3372 = _3371 * _3365;
                        float _3373 = _3371 * _3366;
                        float _3374 = _3371 * _3367;
                        float _3375 = dot(vec3(_874, _877, _880), vec3(_3372, _3373, _3374));
                        float _3380 = 1.0 - (_3368 * _3325.w);
                        float _4765 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3381 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3382 = sqrt(_3368) * _3344.w;
                        float _3385 = 1.39999997615814208984375 / (_3382 + 1.39999997615814208984375);
                        float _3386 = _3385 * _3385;
                        float _3389 = ((1.0 - _3386) * _3375) + _3386;
                        float _3392 = _3382 * _3382;
                        float _3396 = ((isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0))) * _3381) / ((_3392 * 0.699999988079071044921875) + 1.0);
                        float _3400 = (-0.0) - _2009;
                        float _3401 = (-0.0) - _2010;
                        float _3402 = (-0.0) - _2011;
                        float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                        float _3407 = _3406 * _3400;
                        float _3408 = _3406 * _3401;
                        float _3409 = _3406 * _3402;
                        float _3416 = exp2(log2(1.0 / ((_3392 * 3.5) + 5.0)) * 0.25);
                        float _3417 = 1.0 - _949;
                        float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                        float _3425 = _3424 * _3424;
                        float _3426 = _3425 * _3425;
                        float _3427 = _3407 + _3372;
                        float _3428 = _3408 + _3373;
                        float _3429 = _3409 + _3374;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3437 = dot(vec3(_874, _877, _880), vec3(_3407, _3408, _3409));
                        float _4781 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3441 = dot(vec3(_874, _877, _880), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                        float _4792 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                        float _3449 = _3385 * _3425;
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3375) + _3450;
                        float _4803 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3455 = 1.0 - _3425;
                        float _3465 = (0.5 / (((_3454 * ((_3440 * _3455) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3425) * _3440))) * _3454;
                        float _4814 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3476 = (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3448 * _3448) * ((_3392 * 2.1991131305694580078125) + 3.141590118408203125))) * _3381;
                        _3234 = (_3396 * _3344.x) + _3302;
                        _3235 = (_3396 * _3344.y) + _3303;
                        _3236 = (_3396 * _3344.z) + _3304;
                        _3231 = (_3476 * _3361.x) + _3299;
                        _3232 = (_3476 * _3361.y) + _3300;
                        _3233 = (_3476 * _3361.z) + _3301;
                        if (_3306 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3306;
                        }
                    }
                    frontier_phi_66_pred = _3236;
                    frontier_phi_66_pred_1 = _3235;
                    frontier_phi_66_pred_2 = _3234;
                    frontier_phi_66_pred_3 = _3233;
                    frontier_phi_66_pred_4 = _3232;
                    frontier_phi_66_pred_5 = _3231;
                }
                _3041 = frontier_phi_66_pred;
                _3039 = frontier_phi_66_pred_1;
                _3037 = frontier_phi_66_pred_2;
                _3035 = frontier_phi_66_pred_3;
                _3033 = frontier_phi_66_pred_4;
                _3031 = frontier_phi_66_pred_5;
                uint _3182 = _3181 + 1u;
                if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3175 = _3031;
                    _3176 = _3033;
                    _3177 = _3035;
                    _3178 = _3037;
                    _3179 = _3039;
                    _3180 = _3041;
                    _3181 = _3182;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
        }
        uvec4 _3044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3045 = _3044.z;
        uint _3047 = (_3045 >> 8u) & 15u;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        if (((4294967295u << _3047) & _2950) == 0u)
        {
            _3143 = _3030;
            _3145 = _3032;
            _3147 = _3034;
            _3149 = _3036;
            _3151 = _3038;
            _3153 = _3040;
        }
        else
        {
            float _3168 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
            float _3169 = _3168 * _2009;
            float _3170 = _3168 * _2010;
            float _3171 = _3168 * _2011;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3047 < ((_3045 >> 12u) & 15u))
            {
                float _3144;
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3282 = _3030;
                float _3283 = _3032;
                float _3284 = _3034;
                float _3285 = _3036;
                float _3286 = _3038;
                float _3287 = _3040;
                uint _3288 = _3047;
                uint _3297;
                bool _3298;
                for (;;)
                {
                    _3297 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3288 << 2u)) >> 2u)).x;
                    _3298 = _3297 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3298)
                    {
                        frontier_phi_72_pred = _3287;
                        frontier_phi_72_pred_1 = _3286;
                        frontier_phi_72_pred_2 = _3285;
                        frontier_phi_72_pred_3 = _3284;
                        frontier_phi_72_pred_4 = _3283;
                        frontier_phi_72_pred_5 = _3282;
                    }
                    else
                    {
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3494 = _3282;
                        float _3495 = _3283;
                        float _3496 = _3284;
                        float _3497 = _3285;
                        float _3498 = _3286;
                        float _3499 = _3287;
                        uint _3500 = _3297;
                        uint _3501;
                        vec4 _3526;
                        float _3527;
                        vec4 _3542;
                        vec3 _3554;
                        vec4 _3569;
                        vec4 _3584;
                        float _3631;
                        bool _3632;
                        for (;;)
                        {
                            uint _3511 = ((_3288 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3500));
                            _3501 = (_3500 + 4294967295u) & _3500;
                            uint _3513 = _3511 * 40u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3527 = _3526.w;
                            uint _3529 = (_3511 * 40u) + 4u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3511 * 40u) + 8u;
                            _3554 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x));
                            uint _3556 = (_3511 * 40u) + 16u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3511 * 40u) + 20u;
                            _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3587 = (_3511 * 40u) + 24u;
                            vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3606 = (_3511 * 40u) + 28u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            _3631 = fma(_2011, _3619.z, fma(_2010, _3619.y, _3619.x * _2009)) + _3619.w;
                            _3632 = !((fma(_2011, _3600.z, fma(_2010, _3600.y, _3600.x * _2009)) + _3600.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3632)
                            {
                                float _3659 = _3526.x - _2009;
                                float _3660 = _3526.y - _2010;
                                float _3661 = _3526.z - _2011;
                                float _3662 = dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661));
                                float _3665 = inversesqrt(_3662);
                                float _3666 = _3665 * _3659;
                                float _3667 = _3665 * _3660;
                                float _3668 = _3665 * _3661;
                                float _3672 = 1.0 - (_3662 / (_3527 * _3527));
                                float _4825 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3677 = sqrt(_3662) * _3542.w;
                                float _3679 = 1.39999997615814208984375 / (_3677 + 1.39999997615814208984375);
                                float _3680 = _3679 * _3679;
                                float _3683 = ((1.0 - _3680) * dot(vec3(_3666, _3667, _3668), vec3(_874, _877, _880))) + _3680;
                                float _3686 = _3677 * _3677;
                                float _3690 = (fma(_2011, _3569.z, fma(_2010, _3569.y, _3569.x * _2009)) + _3569.w) / _3631;
                                float _3691 = (fma(_2011, _3584.z, fma(_2010, _3584.y, _3584.x * _2009)) + _3584.w) / _3631;
                                float _3695 = 1.0 - dot(vec2(_3690, _3691), vec2(_3690, _3691));
                                float _4841 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3697 = _3696 * (((isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0))) * _3673) / ((_3686 * 0.699999988079071044921875) + 1.0));
                                float _3709 = exp2(log2(1.0 / ((_3686 * 3.5) + 5.0)) * 0.25);
                                float _3710 = 1.0 - _949;
                                float _3717 = sqrt(1.0 - ((1.0 - (_3710 * _3710)) * (1.0 - (_3709 * _3709))));
                                float _3718 = _3717 * _3717;
                                float _3719 = _3718 * _3718;
                                float _3720 = _3666 - _3169;
                                float _3721 = _3667 - _3170;
                                float _3722 = _3668 - _3171;
                                float _3726 = inversesqrt(dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722)));
                                float _3730 = dot(vec3(_874, _877, _880), vec3((-0.0) - _3169, (-0.0) - _3170, (-0.0) - _3171));
                                float _4852 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3734 = dot(vec3(_874, _877, _880), vec3(_3726 * _3720, _3726 * _3721, _3726 * _3722));
                                float _4863 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3737 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3741 = ((_3737 * _3737) * (_3719 + (-1.0))) + 1.0;
                                float _3742 = _3679 * _3718;
                                float _3743 = _3742 * _3742;
                                float _3749 = ((1.0 - _3743) * dot(vec3(_874, _877, _880), vec3(_3666, _3667, _3668))) + _3743;
                                float _4874 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3751 = 1.0 - _3718;
                                float _3761 = (0.5 / (((_3750 * ((_3733 * _3751) + _3718)) + 9.9999999392252902907785028219223e-09) + (((_3750 * _3751) + _3718) * _3733))) * _3750;
                                float _4885 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3771 = (_3696 * _3673) * (((_3719 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3741 * _3741) * ((_3686 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3697 * _3542.y;
                                frontier_phi_78_pred_1 = _3697 * _3542.x;
                                frontier_phi_78_pred_2 = _3771 * _3554.z;
                                frontier_phi_78_pred_3 = _3771 * _3554.y;
                                frontier_phi_78_pred_4 = _3771 * _3554.x;
                                frontier_phi_78_pred_5 = _3697 * _3542.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3779 = frontier_phi_78_pred;
                            _3778 = frontier_phi_78_pred_1;
                            _3777 = frontier_phi_78_pred_2;
                            _3776 = frontier_phi_78_pred_3;
                            _3775 = frontier_phi_78_pred_4;
                            _3780 = frontier_phi_78_pred_5;
                            _3484 = _3778 + _3497;
                            _3485 = _3779 + _3498;
                            _3486 = _3780 + _3499;
                            _3481 = _3775 + _3494;
                            _3482 = _3776 + _3495;
                            _3483 = _3777 + _3496;
                            if (_3501 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3501;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3486;
                        frontier_phi_72_pred_1 = _3485;
                        frontier_phi_72_pred_2 = _3484;
                        frontier_phi_72_pred_3 = _3483;
                        frontier_phi_72_pred_4 = _3482;
                        frontier_phi_72_pred_5 = _3481;
                    }
                    _3154 = frontier_phi_72_pred;
                    _3152 = frontier_phi_72_pred_1;
                    _3150 = frontier_phi_72_pred_2;
                    _3148 = frontier_phi_72_pred_3;
                    _3146 = frontier_phi_72_pred_4;
                    _3144 = frontier_phi_72_pred_5;
                    uint _3289 = _3288 + 1u;
                    if (_3289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3282 = _3144;
                        _3283 = _3146;
                        _3284 = _3148;
                        _3285 = _3150;
                        _3286 = _3152;
                        _3287 = _3154;
                        _3288 = _3289;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3154;
                frontier_phi_60_61_ladder_1 = _3152;
                frontier_phi_60_61_ladder_2 = _3148;
                frontier_phi_60_61_ladder_3 = _3146;
                frontier_phi_60_61_ladder_4 = _3144;
                frontier_phi_60_61_ladder_5 = _3150;
            }
            else
            {
                frontier_phi_60_61_ladder = _3040;
                frontier_phi_60_61_ladder_1 = _3038;
                frontier_phi_60_61_ladder_2 = _3034;
                frontier_phi_60_61_ladder_3 = _3032;
                frontier_phi_60_61_ladder_4 = _3030;
                frontier_phi_60_61_ladder_5 = _3036;
            }
            _3143 = frontier_phi_60_61_ladder_4;
            _3145 = frontier_phi_60_61_ladder_3;
            _3147 = frontier_phi_60_61_ladder_2;
            _3149 = frontier_phi_60_61_ladder_5;
            _3151 = frontier_phi_60_61_ladder_1;
            _3153 = frontier_phi_60_61_ladder;
        }
        float _3158 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2963 = (_3158 * _3149) + _2475;
        _2965 = (_3158 * _3151) + _2477;
        _2967 = (_3158 * _3153) + _2479;
        _2969 = ((_3143 * _917) * _3158) + _2813;
        _2971 = ((_3145 * _919) * _3158) + _2815;
        _2973 = ((_3147 * _920) * _3158) + _2817;
    }
    else
    {
        _2963 = _2475;
        _2965 = _2477;
        _2967 = _2479;
        _2969 = _2813;
        _2971 = _2815;
        _2973 = _2817;
    }
    float _4901 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4912 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4923 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    uint _2993 = _274 + 6u;
    float _3001 = _855 / cbSceneParam._m0[86u].x;
    float _3002 = _856 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _3055 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _3056 = _3055 / _789;
        float _3067 = _3056 * _840;
        float _3068 = _841 * _3056;
        float _3069 = (-0.0) - _3068;
        float _3071 = _3056 * _842;
        float _3073 = (cbSceneParam._m0[77u].w * _3069) / _3055;
        float _3074 = _3073 + cbSceneParam._m0[79u].w;
        float _3075 = cbSceneParam._m0[79u].w - _3068;
        float _3081 = sqrt(((_3067 * _3067) + (_3068 * _3068)) + (_3071 * _3071));
        float _3084 = (1.0 - (cbSceneParam._m0[77u].w / _3055)) * _3081;
        float _3089 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3091 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3244;
        if (abs((_3069 - _3073) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3244 = ((((_3074 > 0.0) ? exp2(_3089 * _3074) : (2.0 - exp2(_3091 * _3074))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3084;
        }
        else
        {
            float _3204 = 1.0 / cbSceneParam._m0[80u].x;
            float _3205 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : max(_3074, _3075));
            float _3206 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : min(_3074, _3075));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            float _3216 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : min(_3206, 0.0));
            _3244 = ((abs(_3081 / _3069) * cbSceneParam._m0[80u].y) * ((((_3215 - _3216) * 2.0) - ((exp2(_3089 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0)))) - exp2(_3089 * (isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))))) * _3204)) - ((exp2(_3091 * _3215) - exp2(_3091 * _3216)) * _3204))) + (_3084 * cbSceneParam._m0[80u].z);
        }
        vec4 _3246 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3255 = exp2((_3244 * (-1.44269502162933349609375)) * (1.0 - _3246.w));
        float _3256 = log2(_3255);
        float _3272 = log2(_3021);
        _3093 = (exp2(_3272 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].x)) * _3246.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3095 = (exp2(_3272 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].y)) * _3246.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3097 = (exp2(_3272 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3256 * cbSceneParam._m0[78u].z)) * _3246.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3099 = _3255 * _3021;
    }
    else
    {
        _3093 = _3018;
        _3095 = _3019;
        _3097 = _3020;
        _3099 = _3021;
    }
    float _3111 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3112 = _3111 == 3.0;
    float _3113 = log2(_3099);
    float _3120 = exp2(_3113 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2963 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _933))) + ((_2969 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _3121 = exp2(_3113 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2965 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _933))) + ((_2971 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _3122 = exp2(_3113 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2967 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _933))) + ((_2973 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _3131 = (_3111 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3131 * (_3112 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3093)));
    SV_Target.y = _3131 * (_3112 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3095)));
    SV_Target.z = _3131 * (_3112 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3097)));
    SV_Target.w = cbInstanceData._m0[_2993].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2993].w;
}


