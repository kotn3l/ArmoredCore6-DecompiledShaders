#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1404;
float _3784;
float _3785;
float _3786;
float _3787;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _248 + 1u;
    uint _258 = _248 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _312.x * cbMtdParam._m0[11u].x;
    float _318 = _312.y * cbMtdParam._m0[11u].y;
    float _319 = _312.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _358.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3796 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _433 = (_426 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _434 = (_426 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _435 = (_426 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _358.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3807 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _512 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _288.x) * ((_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433);
    float _515 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _288.y) * ((_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434);
    float _518 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _288.z) * ((_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435);
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _555 = _553.x;
    float _556 = _553.y;
    float _557 = _553.z;
    float _564 = ((_536.x - _555) * _426) + _555;
    float _565 = ((_536.y - _556) * _426) + _556;
    float _566 = ((_536.z - _557) * _426) + _557;
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _591 = ((_578.z - _566) * _499) + _566;
    float _594 = ((((_578.x - _564) * _499) + _564) * 2.0) + (-1.0);
    float _596 = ((((_578.y - _565) * _499) + _565) * 2.0) + (-1.0);
    float _597 = dot(vec2(_594, _596), vec2(_594, _596));
    float _3818 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _602 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _628 = (((_616.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _594;
    float _629 = (((_616.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _632 = fma(_602, _236, fma(_629, _243, _628 * _229));
    float _635 = fma(_602, _237, fma(_629, _244, _628 * _230));
    float _638 = fma(_602, _238, fma(_629, _245, _628 * _231));
    float _642 = inversesqrt(dot(vec3(_632, _635, _638), vec3(_632, _635, _638)));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _681 = (cbMtdParam._m0[19u].x + dot(vec4(_642 * _632, _642 * _635, _642 * _638, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_671 - _672) * cbMtdParam._m0[24u].z) + _672) * cbMtdParam._m0[21u].z);
    float _3829 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _689 = (_682 * (cbMtdParam._m0[17u].x - _512)) + _512;
    float _690 = (_682 * (cbMtdParam._m0[17u].y - _515)) + _515;
    float _691 = (_682 * (cbMtdParam._m0[17u].z - _518)) + _518;
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _719 = _717.x;
    float _736 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _268) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w)).x - _719) * _426) + _719;
    float _753 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _268) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _269) + cbTextureTilingScale._m0[21u].w)).x - _736) * _499) + _736;
    float _757 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _753) * cbMtdParam._m0[19u].z) + _753;
    float _759 = _757 - (_757 * _682);
    float _763 = (cbMtdParam._m0[19u].w * (_616.z - _591)) + _591;
    vec4 _776 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _783 = (_776.x * 2.0) + (-1.0);
    float _784 = (_776.y * 2.0) + (-1.0);
    float _785 = dot(vec2(_783, _784), vec2(_783, _784));
    float _3840 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _793 = ((_776.z - _763) * _682) + _763;
    float _803 = ((sqrt(1.0 - (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) - _602) * _682) + _602;
    float _806 = (((_783 - _628) * _682) + _628) + (cbMtdParam._m0[21u].x * _628);
    float _807 = (((_784 - _629) * _682) + _629) + (cbMtdParam._m0[21u].x * _629);
    float _809 = cbMtdParam._m0[22u].x + _616.w;
    float _812 = fma(_803, _236, fma(_807, _243, _806 * _229));
    float _815 = fma(_803, _237, fma(_807, _244, _806 * _230));
    float _818 = fma(_803, _238, fma(_807, _245, _806 * _231));
    float _822 = inversesqrt(dot(vec3(_812, _815, _818), vec3(_812, _815, _818)));
    float _823 = _822 * _812;
    float _824 = _822 * _815;
    float _825 = _822 * _818;
    float _3851 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _826 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _3873 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3884 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3895 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3906 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _831 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _845 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _896 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _886);
    float _897 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _886);
    float _898 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _886);
    float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
    float _903 = _896 * _902;
    float _904 = _897 * _902;
    float _905 = _898 * _902;
    vec4 _910 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _912 = _910.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1084 = sqrt(((_896 * _896) + (_897 * _897)) + (_898 * _898));
        float _1090 = (cbMatDynParam._m0[5u].x * _1084) + cbMatDynParam._m0[5u].y;
        float _3917 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1095 = (cbMatDynParam._m0[5u].z * _1084) + cbMatDynParam._m0[5u].w;
        float _3928 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) - _1091)) + _1091) < ((_912 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _923 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _924 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _942 = fma(_825, cbSceneParam._m0[5u].z, fma(_824, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _823));
    float _945 = fma(_825, cbSceneParam._m0[6u].z, fma(_824, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _823));
    float _948 = fma(_825, cbSceneParam._m0[7u].z, fma(_824, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _823));
    uint _961 = _248 + 9u;
    uint _962 = _961 + uint(cbMatDynParam._m0[0u].w);
    float _968 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_962].x;
    float _969 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_962].y;
    float _970 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_962].z;
    float _3939 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _972 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _973 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _974 = 1.0 - _831;
    float _975 = _971 * _974;
    float _976 = _972 * _974;
    float _977 = _973 * _974;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _831;
    float _983 = (_972 + (-0.039999999105930328369140625)) * _831;
    float _984 = (_973 + (-0.039999999105930328369140625)) * _831;
    float _985 = _982 + 0.039999999105930328369140625;
    float _987 = _983 + 0.039999999105930328369140625;
    float _988 = _984 + 0.039999999105930328369140625;
    vec4 _997 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _923, cbSceneParam._m0[86u].y * _924));
    float _1001 = ((isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * TEXCOORD_5.w) * _997.x;
    float _1002 = dot(vec3(_823, _824, _825), vec3(_903, _904, _905));
    float _1005 = _1002 * 2.0;
    float _1009 = (_1005 * _823) - _903;
    float _1010 = (_1005 * _824) - _904;
    float _1011 = (_1005 * _825) - _905;
    float _1015 = abs(dot(vec3(_903, _904, _905), vec3(_823, _824, _825)));
    float _3972 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1017 = sqrt(_826);
    float _1030 = exp2((_1017 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1017 * 3.0));
    float _1036 = (1.0 - _1030) * ((_1017 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1037 = _1030 * _1017;
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1403;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1128 = fma(_1073, cbModelParam._m0[26u].z, fma(_1069, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065));
        float _1132 = fma(_1073, cbModelParam._m0[27u].z, fma(_1069, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065));
        float _1136 = fma(_1073, cbModelParam._m0[28u].z, fma(_1069, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065));
        float _1161 = _1065 + _823;
        float _1162 = _1069 + _824;
        float _1163 = _1073 + _825;
        float _1173 = fma(_1163, cbModelParam._m0[26u].z, fma(_1162, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161)) - _1128;
        float _1174 = fma(_1163, cbModelParam._m0[27u].z, fma(_1162, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161)) - _1132;
        float _1175 = fma(_1163, cbModelParam._m0[28u].z, fma(_1162, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161)) - _1136;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1128 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1132 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[34u].z) + ((((((_1136 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1231 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1197.x + (-0.5));
        float _1233 = _1231 * (_1197.y + (-0.5));
        float _1234 = _1231 * (_1197.z + (-0.5));
        float _1241 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1204.x + (-0.5));
        float _1243 = _1241 * (_1204.y + (-0.5));
        float _1244 = _1241 * (_1204.z + (-0.5));
        float _1251 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1211.x + (-0.5));
        float _1253 = _1251 * (_1211.y + (-0.5));
        float _1254 = _1251 * (_1211.z + (-0.5));
        float _1261 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1218.x + (-0.5));
        float _1263 = _1261 * (_1218.y + (-0.5));
        float _1264 = _1261 * (_1218.z + (-0.5));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = _1232 * 0.5;
        float _1269 = _1242 * 0.5;
        float _1270 = _1252 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1285 = (dot(vec3(_823, _824, _825), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1295 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _4020 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1297 + 1.0))) + _1302) * _1265;
        float _1312 = _1233 * 0.5;
        float _1313 = _1243 * 0.5;
        float _1314 = _1253 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_823, _824, _825), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4053 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1339 + 1.0))) + _1344) * _1266;
        float _1354 = _1234 * 0.5;
        float _1355 = _1244 * 0.5;
        float _1356 = _1254 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_823, _824, _825), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4086 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1381 + 1.0))) + _1386) * _1267;
        _1403 = _1234;
        _1405 = _1233;
        _1406 = _1232;
        _1407 = _1244;
        _1408 = _1243;
        _1409 = _1242;
        _1410 = _1254;
        _1411 = _1253;
        _1412 = _1252;
        _1413 = _1267;
        _1414 = _1266;
        _1415 = _1265;
        _1416 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1404;
        _1405 = _1404;
        _1406 = _1404;
        _1407 = _1404;
        _1408 = _1404;
        _1409 = _1404;
        _1410 = _1404;
        _1411 = _1404;
        _1412 = _1404;
        _1413 = _1404;
        _1414 = _1404;
        _1415 = _1404;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1445 = fma(_1073, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065));
        float _1449 = fma(_1073, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065));
        float _1453 = fma(_1073, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065));
        float _1476 = _1065 + _823;
        float _1477 = _1069 + _824;
        float _1478 = _1073 + _825;
        float _1488 = fma(_1478, cbModelParam._m0[30u].z, fma(_1477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1476)) - _1445;
        float _1489 = fma(_1478, cbModelParam._m0[31u].z, fma(_1477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1476)) - _1449;
        float _1490 = fma(_1478, cbModelParam._m0[32u].z, fma(_1477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1476)) - _1453;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1445 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1449 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[35u].z) + ((((((_1453 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1518 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1544 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1511.x + (-0.5));
        float _1546 = _1544 * (_1511.y + (-0.5));
        float _1547 = _1544 * (_1511.z + (-0.5));
        float _1554 = exp2((_1518.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1518.x + (-0.5));
        float _1556 = _1554 * (_1518.y + (-0.5));
        float _1557 = _1554 * (_1518.z + (-0.5));
        float _1564 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1525.x + (-0.5));
        float _1566 = _1564 * (_1525.y + (-0.5));
        float _1567 = _1564 * (_1525.z + (-0.5));
        float _1574 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1532.x + (-0.5));
        float _1576 = _1574 * (_1532.y + (-0.5));
        float _1577 = _1574 * (_1532.z + (-0.5));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = _1545 * 0.5;
        float _1582 = _1555 * 0.5;
        float _1583 = _1565 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_823, _824, _825), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4127 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4138 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4149 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_1608 + 1.0))) + _1613) * _1578;
        float _1623 = _1546 * 0.5;
        float _1624 = _1556 * 0.5;
        float _1625 = _1566 * 0.5;
        float _1626 = dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625));
        float _1631 = (_1626 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1626);
        float _1639 = (dot(vec3(_823, _824, _825), vec3(_1631 * _1623, _1631 * _1624, _1631 * _1625)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1648 = sqrt(((_1624 * _1624) + (_1623 * _1623)) + (_1625 * _1625)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1650 = _1649 * 2.0;
        float _1654 = (1.0 - _1649) / (_1649 + 1.0);
        float _4182 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1664 = ((((1.0 - _1655) * (_1650 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1650 + 1.0))) + _1655) * _1579;
        float _1665 = _1547 * 0.5;
        float _1666 = _1557 * 0.5;
        float _1667 = _1567 * 0.5;
        float _1668 = dot(vec3(_1665, _1666, _1667), vec3(_1665, _1666, _1667));
        float _1673 = (_1668 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1668);
        float _1681 = (dot(vec3(_823, _824, _825), vec3(_1673 * _1665, _1673 * _1666, _1673 * _1667)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1690 = sqrt(((_1666 * _1666) + (_1665 * _1665)) + (_1667 * _1667)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1692 = _1691 * 2.0;
        float _1696 = (1.0 - _1691) / (_1691 + 1.0);
        float _4215 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1706 = ((((1.0 - _1697) * (_1692 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1692 + 1.0))) + _1697) * _1580;
        _1714 = _1547;
        _1715 = _1546;
        _1716 = _1545;
        _1717 = _1557;
        _1718 = _1556;
        _1719 = _1555;
        _1720 = _1567;
        _1721 = _1566;
        _1722 = _1565;
        _1723 = _1580;
        _1724 = _1579;
        _1725 = _1578;
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)));
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)));
    }
    else
    {
        _1714 = _1404;
        _1715 = _1404;
        _1716 = _1404;
        _1717 = _1404;
        _1718 = _1404;
        _1719 = _1404;
        _1720 = _1404;
        _1721 = _1404;
        _1722 = _1404;
        _1723 = _1404;
        _1724 = _1404;
        _1725 = _1404;
        _1726 = 0.0;
        _1727 = 0.0;
        _1728 = 0.0;
    }
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1416)) + _1416;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1417)) + _1417;
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1418)) + _1418;
    float _1761 = fma(_1740, cbSceneParam._m0[89u].z, fma(_1739, cbSceneParam._m0[89u].y, _1738 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1740, cbSceneParam._m0[90u].z, fma(_1739, cbSceneParam._m0[90u].y, _1738 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1740, cbSceneParam._m0[91u].z, fma(_1739, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1738));
    float _1782 = _1009 * 0.5;
    float _1783 = _1010 * 0.5;
    float _1784 = _1011 * 0.5;
    float _1785 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1788 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1791 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1825;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1798 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1403, _1407, _1410, _1413));
        float _1802 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1405, _1408, _1411, _1414));
        float _1806 = dot(vec4(_1782, _1783, _1784, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1813 = dot(vec4(cbModelParam._m0[39u]), vec4(_1782, _1783, _1784, 1.0));
        _1825 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1813) ? 0.0 : (isnan(0.0) ? _1813 : max(0.0, _1813))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1825 = 1.0;
    }
    float _1836;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1827 = dot(vec4(cbModelParam._m0[40u]), vec4(_1782, _1783, _1784, 1.0));
        _1836 = dot(vec3(isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1836 = 1.0;
    }
    float _1840 = (_1836 * cbModelParam._m0[1u].x) + (_1825 * (1.0 - cbModelParam._m0[1u].x));
    float _1850 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _826);
    float _1851 = isnan(_1850) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1850 : min(cbModelParam._m0[25u].z, _1850));
    float _1932;
    float _1934;
    float _1936;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1899 = fma(_1073, cbModelParam._m0[13u].z, fma(_1069, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065)) + cbModelParam._m0[13u].w;
        float _1903 = fma(_1073, cbModelParam._m0[14u].z, fma(_1069, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065)) + cbModelParam._m0[14u].w;
        float _1907 = fma(_1073, cbModelParam._m0[15u].z, fma(_1069, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065)) + cbModelParam._m0[15u].w;
        float _1910 = fma(_1011, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1009));
        float _1913 = fma(_1011, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1009));
        float _1916 = fma(_1011, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1009));
        float _1944;
        if (_1910 > 0.0)
        {
            _1944 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1944 = frontier_phi_17_15_ladder;
        }
        float _2147;
        if (_1913 > 0.0)
        {
            _2147 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2147 = frontier_phi_26_22_ladder;
        }
        float _2401;
        if (_1916 > 0.0)
        {
            _2401 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2401 = frontier_phi_38_33_ladder;
        }
        float _2403 = isnan(_2147) ? _1944 : (isnan(_1944) ? _2147 : min(_1944, _2147));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1910) + _1899;
        float _2409 = (_2404 * _1913) + _1903;
        float _2410 = (_2404 * _1916) + _1907;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2411;
        float _2415 = _2411 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 > _2415) || ((_2409 < _2413) || ((_2408 < _2413) || (_2408 > _2415))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2410, cbModelParam._m0[9u].z, fma(_2409, cbModelParam._m0[9u].y, _2408 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2410, cbModelParam._m0[10u].z, fma(_2409, cbModelParam._m0[10u].y, _2408 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2410, cbModelParam._m0[11u].z, fma(_2409, cbModelParam._m0[11u].y, _2408 * cbModelParam._m0[11u].x))), _1851);
            frontier_phi_16_38_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1932 = frontier_phi_16_38_ladder_2;
        _1934 = frontier_phi_16_38_ladder_1;
        _1936 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1009, _1010, _1011), _1851);
        _1932 = _1920.x * cbModelParam._m0[1u].y;
        _1934 = _1920.y * cbModelParam._m0[1u].y;
        _1936 = _1920.z * cbModelParam._m0[1u].y;
    }
    float _1940 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _826);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1940 : min(cbModelParam._m0[25u].w, _1940));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1073, cbModelParam._m0[21u].z, fma(_1069, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1073, cbModelParam._m0[22u].z, fma(_1069, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1073, cbModelParam._m0[23u].z, fma(_1069, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1011, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1009));
        float _2009 = fma(_1011, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1009));
        float _2012 = fma(_1011, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1009));
        float _2152;
        if (_2006 > 0.0)
        {
            _2152 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2152 = frontier_phi_28_24_ladder;
        }
        float _2428;
        if (_2009 > 0.0)
        {
            _2428 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2428 = frontier_phi_40_35_ladder;
        }
        float _2641;
        if (_2012 > 0.0)
        {
            _2641 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2641 = frontier_phi_49_46_ladder;
        }
        float _2643 = isnan(_2428) ? _2152 : (isnan(_2152) ? _2428 : min(_2152, _2428));
        float _2644 = isnan(_2641) ? _2643 : (isnan(_2643) ? _2641 : min(_2643, _2641));
        float _2648 = (_2644 * _2006) + _1995;
        float _2649 = (_2644 * _2009) + _1999;
        float _2650 = (_2644 * _2012) + _2003;
        float _2651 = _2644 * 9.9999997473787516355514526367188e-05;
        float _2652 = (-1.0) - _2651;
        float _2654 = _2651 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2650 > _2654) || ((_2650 < _2652) || ((_2649 > _2654) || ((_2649 < _2652) || ((_2648 < _2652) || (_2648 > _2654))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2849 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2650, cbModelParam._m0[17u].z, fma(_2649, cbModelParam._m0[17u].y, _2648 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2650, cbModelParam._m0[18u].z, fma(_2649, cbModelParam._m0[18u].y, _2648 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2650, cbModelParam._m0[19u].z, fma(_2649, cbModelParam._m0[19u].y, _2648 * cbModelParam._m0[19u].x))), _1941);
            frontier_phi_25_49_ladder = _2849.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2849.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2849.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_25_49_ladder_2;
        _2033 = frontier_phi_25_49_ladder_1;
        _2035 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1009, _1010, _1011), _1941);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2048 = (((_1036 * _985) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2031 - _1932)) + _1932);
    float _2050 = (((_1036 * _987) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2033 - _1934)) + _1934);
    float _2052 = (((_1036 * _988) + _1037) * _1001) * ((cbModelParam._m0[1u].w * (_2035 - _1936)) + _1936);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    uvec4 _2071 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _2073 = _2071.x * 14u;
    uint _2074 = _2073 + 13u;
    float _2081 = _1001 + (-1.0);
    float _2086 = (cbLight._m0[_2074].x * _2081) + 1.0;
    float _2087 = (cbLight._m0[_2074].y * _2081) + 1.0;
    float _2088 = (cbLight._m0[_2074].z * _2081) + 1.0;
    float _2089 = (cbLight._m0[_2074].w * _2081) + 1.0;
    uint _2090 = _2073 + 5u;
    float _2096 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2100 = _2073 + 4u;
    float _2106 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
    uint _2110 = _2073 | 1u;
    float _2121 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_823, _824, _825));
    float _2124 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_823, _824, _825));
    float _4351 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _4362 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2129 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2131 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2138 = ((cbLight._m0[_2090].x * _2096) * _2131) + ((cbLight._m0[_2100].x * _2106) * _2129);
    float _2139 = ((_2096 * cbLight._m0[_2090].y) * _2131) + ((_2106 * cbLight._m0[_2100].y) * _2129);
    float _2140 = ((_2096 * cbLight._m0[_2090].z) * _2131) + ((_2106 * cbLight._m0[_2100].z) * _2129);
    uvec4 _2144 = floatBitsToUint(cbLight._m0[_2073 + 12u]);
    bool _2146 = _2144.x == 0u;
    float _2157;
    float _2159;
    float _2161;
    if (_2146)
    {
        _2157 = _2138;
        _2159 = _2139;
        _2161 = _2140;
    }
    else
    {
        uint _2165 = _2073 + 6u;
        float _2181 = (dot(vec3(cbLight._m0[_2073 + 2u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4373 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2184 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2157 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _2138;
        _2159 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _2139;
        _2161 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _2140;
    }
    bool _2164 = _2144.y == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2164)
    {
        _2202 = _2157;
        _2204 = _2159;
        _2206 = _2161;
    }
    else
    {
        uint _2372 = _2073 + 7u;
        float _2388 = (dot(vec3(cbLight._m0[_2073 + 3u].xyz), vec3(_823, _824, _825)) * 0.5) + 0.5;
        float _2389 = _2388 * _2388;
        float _4389 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2390 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2391 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2202 = (((cbLight._m0[_2372].x * 0.3183098733425140380859375) * _2390) * _2391) + _2157;
        _2204 = (((cbLight._m0[_2372].y * 0.3183098733425140380859375) * _2390) * _2391) + _2159;
        _2206 = (((cbLight._m0[_2372].z * 0.3183098733425140380859375) * _2390) * _2391) + _2161;
    }
    uint _2209 = _2073 + 8u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2073].w)) * _826) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2073].x + _903;
    float _2225 = cbLight._m0[_2073].y + _904;
    float _2226 = cbLight._m0[_2073].z + _905;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2073].xyz));
    float _4405 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _2238 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2239 = dot(vec3(_823, _824, _825), vec3(_2231, _2232, _2233));
    float _4427 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2073].xyz), vec3(_2231, _2232, _2233));
    float _4438 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2223 * _2223;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2259 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
    float _2260 = 0.959999978542327880859375 - _982;
    float _2262 = 0.959999978542327880859375 - _983;
    float _2263 = 0.959999978542327880859375 - _984;
    float _2270 = 1.0 - _2223;
    float _2281 = (0.5 / (((_2238 * ((_2237 * _2270) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2270) + _2223) * _2237))) * _2237;
    float _4449 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2283 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    uint _2294 = _2073 + 9u;
    float _2305 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _826) * 0.949999988079071044921875);
    float _2306 = _2305 * _2305;
    float _2307 = cbLight._m0[_2110].x + _903;
    float _2308 = cbLight._m0[_2110].y + _904;
    float _2309 = cbLight._m0[_2110].z + _905;
    float _2313 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
    float _2314 = _2313 * _2307;
    float _2315 = _2313 * _2308;
    float _2316 = _2313 * _2309;
    float _2317 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2110].xyz));
    float _4460 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _2320 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2321 = dot(vec3(_823, _824, _825), vec3(_2314, _2315, _2316));
    float _4471 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2314, _2315, _2316));
    float _4482 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2306 * _2306;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0);
    float _2347 = 1.0 - _2306;
    float _2357 = (0.5 / (((_2238 * ((_2320 * _2347) + _2306)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2347) + _2306) * _2320))) * _2320;
    float _4493 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2359 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    float _2369 = (((((_2340 * _2260) + _985) * cbLight._m0[_2294].x) * _2359) * _2096) + (((((_2259 * _2260) + _985) * cbLight._m0[_2209].x) * _2283) * _2106);
    float _2370 = (((((_2340 * _2262) + _987) * cbLight._m0[_2294].y) * _2359) * _2096) + (((((_2259 * _2262) + _987) * cbLight._m0[_2209].y) * _2283) * _2106);
    float _2371 = (((((_2340 * _2263) + _988) * cbLight._m0[_2294].z) * _2359) * _2096) + (((((_2259 * _2263) + _988) * cbLight._m0[_2209].z) * _2283) * _2106);
    float _2433;
    float _2435;
    float _2437;
    if (_2146)
    {
        _2433 = _2369;
        _2435 = _2370;
        _2437 = _2371;
    }
    else
    {
        uint _2439 = _2073 + 2u;
        uint _2443 = _2073 + 10u;
        float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _826) * 0.949999988079071044921875);
        float _2458 = _2457 * _2457;
        float _2459 = cbLight._m0[_2439].x + _903;
        float _2460 = cbLight._m0[_2439].y + _904;
        float _2461 = cbLight._m0[_2439].z + _905;
        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
        float _2466 = _2465 * _2459;
        float _2467 = _2465 * _2460;
        float _2468 = _2465 * _2461;
        float _2469 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2439].xyz));
        float _4504 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2473 = dot(vec3(_823, _824, _825), vec3(_2466, _2467, _2468));
        float _4515 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2477 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2466, _2467, _2468));
        float _4526 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2481 = _2458 * _2458;
        float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
        float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0);
        float _2499 = 1.0 - _2458;
        float _2509 = (0.5 / (((_2238 * ((_2472 * _2499) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2499) + _2458) * _2472))) * _2472;
        float _4537 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
        _2433 = (((((_2492 * _2260) + _985) * cbLight._m0[_2443].x) * _2511) * _2512) + _2369;
        _2435 = (((((_2492 * _2262) + _987) * cbLight._m0[_2443].y) * _2511) * _2512) + _2370;
        _2437 = (((((_2492 * _2263) + _988) * cbLight._m0[_2443].z) * _2511) * _2512) + _2371;
    }
    float _2547;
    float _2549;
    float _2551;
    if (_2164)
    {
        _2547 = _2433;
        _2549 = _2435;
        _2551 = _2437;
    }
    else
    {
        uint _2558 = _2073 + 3u;
        uint _2562 = _2073 + 11u;
        float _2576 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2558].w)) * _826) * 0.949999988079071044921875);
        float _2577 = _2576 * _2576;
        float _2578 = cbLight._m0[_2558].x + _903;
        float _2579 = cbLight._m0[_2558].y + _904;
        float _2580 = cbLight._m0[_2558].z + _905;
        float _2584 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
        float _2585 = _2584 * _2578;
        float _2586 = _2584 * _2579;
        float _2587 = _2584 * _2580;
        float _2588 = dot(vec3(_823, _824, _825), vec3(cbLight._m0[_2558].xyz));
        float _4553 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2591 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2592 = dot(vec3(_823, _824, _825), vec3(_2585, _2586, _2587));
        float _4564 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2596 = dot(vec3(cbLight._m0[_2558].xyz), vec3(_2585, _2586, _2587));
        float _4575 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2600 = _2577 * _2577;
        float _2604 = ((_2595 * _2595) * (_2600 + (-1.0))) + 1.0;
        float _2611 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
        float _2618 = 1.0 - _2577;
        float _2628 = (0.5 / (((_2238 * ((_2591 * _2618) + _2577)) + 9.9999999392252902907785028219223e-09) + (((_2238 * _2618) + _2577) * _2591))) * _2591;
        float _4586 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2600 / ((_2604 * _2604) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2547 = (((((_2611 * _2260) + _985) * cbLight._m0[_2562].x) * _2630) * _2631) + _2433;
        _2549 = (((((_2611 * _2262) + _987) * cbLight._m0[_2562].y) * _2630) * _2631) + _2435;
        _2551 = (((((_2611 * _2263) + _988) * cbLight._m0[_2562].z) * _2630) * _2631) + _2437;
    }
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_2071.y == 0u)
    {
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2706;
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2706;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2706;
        uvec4 _2721 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2722 = _2721.x;
        uint _2733 = uint((float(_2721.y) * floor(float(uint(cbSceneParam._m0[85u].y * _924) / _2722))) + floor(float(uint(cbSceneParam._m0[85u].x * _923) / _2722)));
        float _2743 = (log2(_2709 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2744 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        uint _2747 = uint(isnan(14.0) ? _2744 : (isnan(_2744) ? 14.0 : min(_2744, 14.0)));
        uvec4 _2752 = texelFetch(g_lightClusterGridBuffer, int(((_2747 << 2u) + (_2733 << 6u)) >> 2u));
        uint _2753 = _2752.x;
        uint _2754 = _2721.z;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((((1u << ((_2754 >> 4u) & 15u)) + 4294967295u) & _2753) == 0u) || ((_2754 & 240u) == 0u))
        {
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
        }
        else
        {
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            uint _3013 = 0u;
            uint _3022;
            bool _3023;
            for (;;)
            {
                _3022 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                _3023 = _3022 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3023)
                {
                    frontier_phi_66_pred = _3007;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3010;
                    frontier_phi_66_pred_4 = _3009;
                    frontier_phi_66_pred_5 = _3008;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3022;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3013 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _2707;
                        float _3219 = _3178.y - _2708;
                        float _3220 = _3178.z - _2709;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_942, _945, _948), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4612 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _2707;
                        float _3254 = (-0.0) - _2708;
                        float _3255 = (-0.0) - _2709;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3270 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3271 = 1.0 - _1017;
                        float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                        float _3279 = _3278 * _3278;
                        float _3280 = _3279 * _3279;
                        float _3281 = _3260 + _3225;
                        float _3282 = _3261 + _3226;
                        float _3283 = _3262 + _3227;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3291 = dot(vec3(_942, _945, _948), vec3(_3260, _3261, _3262));
                        float _4628 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3295 = dot(vec3(_942, _945, _948), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                        float _4639 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                        float _3303 = _3238 * _3279;
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3228) + _3304;
                        float _4650 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3309 = 1.0 - _3279;
                        float _3319 = (0.5 / (((_3308 * ((_3294 * _3309) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3279) * _3294))) * _3308;
                        float _4661 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3330 = (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3302 * _3302) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3082 = (_3249 * _3197.x) + _3155;
                        _3083 = (_3249 * _3197.y) + _3156;
                        _3084 = (_3249 * _3197.z) + _3157;
                        _3079 = (_3330 * _3214.x) + _3152;
                        _3080 = (_3330 * _3214.y) + _3153;
                        _3081 = (_3330 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_66_pred = _3079;
                    frontier_phi_66_pred_1 = _3084;
                    frontier_phi_66_pred_2 = _3083;
                    frontier_phi_66_pred_3 = _3082;
                    frontier_phi_66_pred_4 = _3081;
                    frontier_phi_66_pred_5 = _3080;
                }
                _2855 = frontier_phi_66_pred;
                _2865 = frontier_phi_66_pred_1;
                _2863 = frontier_phi_66_pred_2;
                _2861 = frontier_phi_66_pred_3;
                _2859 = frontier_phi_66_pred_4;
                _2857 = frontier_phi_66_pred_5;
                uint _3014 = _3013 + 1u;
                if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3007 = _2855;
                    _3008 = _2857;
                    _3009 = _2859;
                    _3010 = _2861;
                    _3011 = _2863;
                    _3012 = _2865;
                    _3013 = _3014;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
        }
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.z;
        uint _2871 = (_2869 >> 8u) & 15u;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((4294967295u << _2871) & _2753) == 0u)
        {
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
        }
        else
        {
            float _3000 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
            float _3001 = _3000 * _2707;
            float _3002 = _3000 * _2708;
            float _3003 = _3000 * _2709;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2871 < ((_2869 >> 12u) & 15u))
            {
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _3135 = _2854;
                float _3136 = _2856;
                float _3137 = _2858;
                float _3138 = _2860;
                float _3139 = _2862;
                float _3140 = _2864;
                uint _3141 = _2871;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2747 << 5u) + (_2733 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3151)
                    {
                        frontier_phi_77_pred = _3140;
                        frontier_phi_77_pred_1 = _3139;
                        frontier_phi_77_pred_2 = _3138;
                        frontier_phi_77_pred_3 = _3137;
                        frontier_phi_77_pred_4 = _3136;
                        frontier_phi_77_pred_5 = _3135;
                    }
                    else
                    {
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        uint _3363 = _3150;
                        uint _3364;
                        vec4 _3389;
                        float _3390;
                        vec4 _3405;
                        vec3 _3417;
                        vec4 _3432;
                        vec4 _3447;
                        float _3493;
                        bool _3494;
                        for (;;)
                        {
                            uint _3374 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3363));
                            _3364 = (_3363 + 4294967295u) & _3363;
                            uint _3376 = _3374 * 40u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            _3390 = _3389.w;
                            uint _3392 = (_3374 * 40u) + 4u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3374 * 40u) + 8u;
                            _3417 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x));
                            uint _3419 = (_3374 * 40u) + 16u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3374 * 40u) + 20u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3374 * 40u) + 24u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3468 = (_3374 * 40u) + 28u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3493 = fma(_2709, _3481.z, fma(_2708, _3481.y, _3481.x * _2707)) + _3481.w;
                            _3494 = !((fma(_2709, _3462.z, fma(_2708, _3462.y, _3462.x * _2707)) + _3462.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3494)
                            {
                                float _3521 = _3389.x - _2707;
                                float _3522 = _3389.y - _2708;
                                float _3523 = _3389.z - _2709;
                                float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                                float _3527 = inversesqrt(_3524);
                                float _3528 = _3527 * _3521;
                                float _3529 = _3527 * _3522;
                                float _3530 = _3527 * _3523;
                                float _3534 = 1.0 - (_3524 / (_3390 * _3390));
                                float _4672 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3539 = sqrt(_3524) * _3405.w;
                                float _3541 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                                float _3542 = _3541 * _3541;
                                float _3545 = ((1.0 - _3542) * dot(vec3(_3528, _3529, _3530), vec3(_942, _945, _948))) + _3542;
                                float _3548 = _3539 * _3539;
                                float _3552 = (fma(_2709, _3432.z, fma(_2708, _3432.y, _3432.x * _2707)) + _3432.w) / _3493;
                                float _3553 = (fma(_2709, _3447.z, fma(_2708, _3447.y, _3447.x * _2707)) + _3447.w) / _3493;
                                float _3557 = 1.0 - dot(vec2(_3552, _3553), vec2(_3552, _3553));
                                float _4688 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3559 = _3558 * (((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3535) / ((_3548 * 0.699999988079071044921875) + 1.0));
                                float _3571 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                                float _3572 = 1.0 - _1017;
                                float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                                float _3580 = _3579 * _3579;
                                float _3581 = _3580 * _3580;
                                float _3582 = _3528 - _3001;
                                float _3583 = _3529 - _3002;
                                float _3584 = _3530 - _3003;
                                float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                                float _3592 = dot(vec3(_942, _945, _948), vec3((-0.0) - _3001, (-0.0) - _3002, (-0.0) - _3003));
                                float _4699 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3596 = dot(vec3(_942, _945, _948), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                                float _4710 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                                float _3604 = _3541 * _3580;
                                float _3605 = _3604 * _3604;
                                float _3611 = ((1.0 - _3605) * dot(vec3(_942, _945, _948), vec3(_3528, _3529, _3530))) + _3605;
                                float _4721 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3613 = 1.0 - _3580;
                                float _3623 = (0.5 / (((_3612 * ((_3595 * _3613) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3580) * _3595))) * _3612;
                                float _4732 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3633 = (_3558 * _3535) * (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) / ((_3603 * _3603) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3559 * _3405.y;
                                frontier_phi_83_pred_1 = _3559 * _3405.x;
                                frontier_phi_83_pred_2 = _3633 * _3417.z;
                                frontier_phi_83_pred_3 = _3633 * _3417.y;
                                frontier_phi_83_pred_4 = _3633 * _3417.x;
                                frontier_phi_83_pred_5 = _3559 * _3405.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3641 = frontier_phi_83_pred;
                            _3640 = frontier_phi_83_pred_1;
                            _3639 = frontier_phi_83_pred_2;
                            _3638 = frontier_phi_83_pred_3;
                            _3637 = frontier_phi_83_pred_4;
                            _3642 = frontier_phi_83_pred_5;
                            _3347 = _3640 + _3360;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            if (_3364 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3364;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3349;
                        frontier_phi_77_pred_1 = _3348;
                        frontier_phi_77_pred_2 = _3347;
                        frontier_phi_77_pred_3 = _3346;
                        frontier_phi_77_pred_4 = _3345;
                        frontier_phi_77_pred_5 = _3344;
                    }
                    _2986 = frontier_phi_77_pred;
                    _2984 = frontier_phi_77_pred_1;
                    _2982 = frontier_phi_77_pred_2;
                    _2980 = frontier_phi_77_pred_3;
                    _2978 = frontier_phi_77_pred_4;
                    _2976 = frontier_phi_77_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2976;
                        _3136 = _2978;
                        _3137 = _2980;
                        _3138 = _2982;
                        _3139 = _2984;
                        _3140 = _2986;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2980;
                frontier_phi_58_59_ladder_1 = _2986;
                frontier_phi_58_59_ladder_2 = _2984;
                frontier_phi_58_59_ladder_3 = _2982;
                frontier_phi_58_59_ladder_4 = _2978;
                frontier_phi_58_59_ladder_5 = _2976;
            }
            else
            {
                frontier_phi_58_59_ladder = _2858;
                frontier_phi_58_59_ladder_1 = _2864;
                frontier_phi_58_59_ladder_2 = _2862;
                frontier_phi_58_59_ladder_3 = _2860;
                frontier_phi_58_59_ladder_4 = _2856;
                frontier_phi_58_59_ladder_5 = _2854;
            }
            _2975 = frontier_phi_58_59_ladder_5;
            _2977 = frontier_phi_58_59_ladder_4;
            _2979 = frontier_phi_58_59_ladder;
            _2981 = frontier_phi_58_59_ladder_3;
            _2983 = frontier_phi_58_59_ladder_2;
            _2985 = frontier_phi_58_59_ladder_1;
        }
        float _2990 = isnan(1.0) ? _1001 : (isnan(_1001) ? 1.0 : min(_1001, 1.0));
        _2766 = (_2990 * _2981) + _2202;
        _2768 = (_2990 * _2983) + _2204;
        _2770 = (_2990 * _2985) + _2206;
        _2772 = ((_2975 * _985) * _2990) + _2547;
        _2774 = ((_2977 * _987) * _2990) + _2549;
        _2776 = ((_2979 * _988) * _2990) + _2551;
    }
    else
    {
        _2766 = _2202;
        _2768 = _2204;
        _2770 = _2206;
        _2772 = _2547;
        _2774 = _2549;
        _2776 = _2551;
    }
    float _4748 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _4759 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4770 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2793 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2766 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1001))) + ((_2772 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _2794 = ((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2768 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1001))) + ((_2774 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    float _2795 = ((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2770 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1001))) + ((_2776 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1840)) * cbPerFrame._m0[3u].x);
    uint _2796 = _248 + 6u;
    float _2804 = _923 / cbSceneParam._m0[86u].x;
    float _2805 = _924 / cbSceneParam._m0[86u].y;
    vec4 _2819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, (log2((isnan(cbSceneParam._m0[77u].w) ? _845 : (isnan(_845) ? cbSceneParam._m0[77u].w : min(_845, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2821 = _2819.x;
    float _2822 = _2819.y;
    float _2823 = _2819.z;
    float _2824 = _2819.w;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_845 > cbSceneParam._m0[78u].w)
    {
        float _2879 = isnan(_845) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _845 : min(cbSceneParam._m0[80u].w, _845));
        float _2880 = _2879 / _845;
        float _2891 = _2880 * _896;
        float _2892 = _897 * _2880;
        float _2893 = (-0.0) - _2892;
        float _2895 = _2880 * _898;
        float _2897 = (cbSceneParam._m0[77u].w * _2893) / _2879;
        float _2898 = _2897 + cbSceneParam._m0[79u].w;
        float _2899 = cbSceneParam._m0[79u].w - _2892;
        float _2905 = sqrt(((_2891 * _2891) + (_2892 * _2892)) + (_2895 * _2895));
        float _2908 = (1.0 - (cbSceneParam._m0[77u].w / _2879)) * _2905;
        float _2913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3092;
        if (abs((_2893 - _2897) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3092 = ((((_2898 > 0.0) ? exp2(_2913 * _2898) : (2.0 - exp2(_2915 * _2898))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2908;
        }
        else
        {
            float _3036 = 1.0 / cbSceneParam._m0[80u].x;
            float _3037 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : max(_2898, _2899));
            float _3038 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : min(_2898, _2899));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            _3092 = ((abs(_2905 / _2893) * cbSceneParam._m0[80u].y) * ((((_3047 - _3048) * 2.0) - ((exp2(_2913 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0)))) - exp2(_2913 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))))) * _3036)) - ((exp2(_2915 * _3047) - exp2(_2915 * _3048)) * _3036))) + (_2908 * cbSceneParam._m0[80u].z);
        }
        vec4 _3094 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, 1.0), 0.0);
        float _3103 = exp2((_3092 * (-1.44269502162933349609375)) * (1.0 - _3094.w));
        float _3104 = log2(_3103);
        float _3120 = log2(_2824);
        _2917 = (exp2(_3120 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].x)) * _3094.x) / cbSceneParam._m0[78u].x)) + _2821;
        _2919 = (exp2(_3120 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].y)) * _3094.y) / cbSceneParam._m0[78u].y)) + _2822;
        _2921 = (exp2(_3120 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].z)) * _3094.z) / cbSceneParam._m0[78u].z)) + _2823;
        _2923 = _3103 * _2824;
    }
    else
    {
        _2917 = _2821;
        _2919 = _2822;
        _2921 = _2823;
        _2923 = _2824;
    }
    bool _3130;
    vec4 _2933;
    vec4 _2955;
    float _2957;
    float _2961;
    float _2962;
    float _2963;
    float _2964;
    bool _2974;
    for (;;)
    {
        _2933 = cbMatDynParam._m0[0u];
        float _2935 = roundEven(_2933.y);
        bool _2936 = _2935 == 3.0;
        float _2937 = log2(_2923);
        float _2944 = exp2(_2937 * cbSceneParam._m0[78u].x) * _2793;
        float _2945 = exp2(_2937 * cbSceneParam._m0[78u].y) * _2794;
        float _2946 = exp2(_2937 * cbSceneParam._m0[78u].z) * _2795;
        float _2953 = _912 + (-0.5);
        _2955 = cbMtdParam._m0[1u];
        _2957 = _2955.y * _2953;
        float _2960 = (_2935 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2961 = _2960 * (_2936 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2917)));
        _2962 = _2960 * (_2936 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2919)));
        _2963 = _2960 * (_2936 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2921)));
        _2964 = _2953 * 0.999000012874603271484375;
        _2974 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2974)
        {
            if ((cbInstanceData._m0[_248 + 7u].x + _2964) < 0.5)
            {
                _3130 = true;
                break;
            }
        }
        uint _3071 = _961 + uint(_2933.w);
        if ((cbInstanceData._m0[_3071].w < 1.0) && ((cbInstanceData._m0[_3071].w + _2964) < 0.5))
        {
            _3130 = true;
            break;
        }
        if ((_2957 + 1.0) < _2955.x)
        {
            _3130 = true;
            break;
        }
        _3130 = false;
        break;
    }
    float _3335;
    if (_3130)
    {
        discard_state = true;
        _3335 = 0.0;
    }
    else
    {
        _3335 = cbInstanceData._m0[_2796].w;
    }
    SV_Target.x = _2961;
    SV_Target.y = _2962;
    SV_Target.z = _2963;
    SV_Target.w = _3335;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2796].w;
    discard_exit();
}


