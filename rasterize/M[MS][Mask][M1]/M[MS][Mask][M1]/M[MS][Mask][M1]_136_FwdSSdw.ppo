#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1580;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _311.x * cbMtdParam._m0[11u].x;
    float _318 = _311.y * cbMtdParam._m0[11u].y;
    float _319 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _357.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3927 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _435 = (_428 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _436 = (_428 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _437 = (_428 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _357.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3938 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _548 = _546.x;
    float _558 = dot(vec4(_548, _546.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _570 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _357.z) * 2.0) - ((((_548 - _558) * cbMtdParam._m0[23u].w) + _558) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3949 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _578 = (_571 * ((_529.x * cbMtdParam._m0[14u].x) - _508)) + _508;
    float _579 = (_571 * ((_529.y * cbMtdParam._m0[14u].y) - _509)) + _509;
    float _580 = (_571 * ((_529.z * cbMtdParam._m0[14u].z) - _510)) + _510;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _290) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _291) + cbTextureTilingScale._m0[14u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _637 = _635.x;
    float _638 = _635.y;
    float _639 = _635.z;
    float _646 = ((_618.x - _637) * _428) + _637;
    float _647 = ((_618.y - _638) * _428) + _638;
    float _648 = ((_618.z - _639) * _428) + _639;
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _671 = ((_660.x - _646) * _501) + _646;
    float _672 = ((_660.y - _647) * _501) + _647;
    float _673 = ((_660.z - _648) * _501) + _648;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _698 = ((_685.z - _673) * _571) + _673;
    float _701 = ((((_685.x - _671) * _571) + _671) * 2.0) + (-1.0);
    float _703 = ((((_685.y - _672) * _571) + _672) * 2.0) + (-1.0);
    float _704 = dot(vec2(_701, _703), vec2(_701, _703));
    float _3960 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _709 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _750 = _748.x;
    float _751 = 1.0 - _750;
    float _759 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _762 = ((isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : min(_759, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _771 = (_762 - ((((((_750 - _751) * cbMtdParam._m0[24u].z) + _751) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _762))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3981 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _772 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _779 = (_772 * ((_598.x * cbMtdParam._m0[18u].x) - _578)) + _578;
    float _780 = (_772 * ((_598.y * cbMtdParam._m0[18u].y) - _579)) + _579;
    float _781 = (_772 * ((_598.z * cbMtdParam._m0[18u].z) - _580)) + _580;
    vec4 _793 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _795 = _793.x;
    float _796 = 1.0 - _795;
    float _821 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_795 - _796) * cbMtdParam._m0[24u].w) + _796) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3992 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _822 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _830 = ((((cbMtdParam._m0[10u].x - _779) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _822) + _779;
    float _831 = ((((cbMtdParam._m0[10u].y - _780) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _822) + _780;
    float _832 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _781)) * _822) + _781;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _860 = _858.x;
    float _878 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _860) * _428) + _860;
    float _895 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _878) * _501) + _878;
    float _912 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _895) * _571) + _895;
    float _916 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _912) * cbMtdParam._m0[19u].z) + _912;
    float _918 = _916 - (_916 * _772);
    float _920 = _918 - (_918 * _822);
    float _924 = (cbMtdParam._m0[19u].w * (_723.z - _698)) + _698;
    vec4 _938 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _945 = (_938.x * 2.0) + (-1.0);
    float _946 = (_938.y * 2.0) + (-1.0);
    float _947 = dot(vec2(_945, _946), vec2(_945, _946));
    float _4003 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _955 = (_772 * (_938.z - _924)) + _924;
    float _958 = ((cbMtdParam._m0[23u].x - _955) * _822) + _955;
    vec4 _981 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _987 = (_981.x * 2.0) + (-1.0);
    float _988 = (_981.y * 2.0) + (-1.0);
    float _989 = dot(vec2(_987, _988), vec2(_987, _988));
    float _4014 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _997 = (((_723.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _701;
    float _998 = (((_723.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _1010 = (((_945 - _997) + (cbMtdParam._m0[21u].x * _997)) * _772) + _997;
    float _1011 = (((_946 - _998) + (cbMtdParam._m0[21u].x * _998)) * _772) + _998;
    float _1012 = (_772 * (sqrt(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) - _709)) + _709;
    float _1023 = (((_987 - _1010) + (_1010 * cbMtdParam._m0[22u].z)) * _822) + _1010;
    float _1024 = (((_988 - _1011) + (_1011 * cbMtdParam._m0[22u].z)) * _822) + _1011;
    float _1025 = ((sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _1012) * _822) + _1012;
    float _1027 = cbMtdParam._m0[22u].x + _723.w;
    float _1030 = fma(_1025, _258 * NORMAL.x, fma(_1024, _265 * TANGENT.x, (_251 * _243) * _1023));
    float _1033 = fma(_1025, _258 * NORMAL.y, fma(_1024, _265 * TANGENT.y, (_251 * _244) * _1023));
    float _1036 = fma(_1025, _258 * NORMAL.z, fma(_1024, _265 * TANGENT.z, (_251 * _245) * _1023));
    float _1040 = inversesqrt(dot(vec3(_1030, _1033, _1036), vec3(_1030, _1033, _1036)));
    float _1041 = _1040 * _1030;
    float _1042 = _1040 * _1033;
    float _1043 = _1040 * _1036;
    float _4025 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _1044 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _4047 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4058 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4069 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4080 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _1049 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1063 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1113 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1103);
    float _1114 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1103);
    float _1115 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1103);
    float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
    float _1120 = _1113 * _1119;
    float _1121 = _1114 * _1119;
    float _1122 = _1115 * _1119;
    float _1128 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1129 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1147 = fma(_1043, cbSceneParam._m0[5u].z, fma(_1042, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1041));
    float _1150 = fma(_1043, cbSceneParam._m0[6u].z, fma(_1042, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1041));
    float _1153 = fma(_1043, cbSceneParam._m0[7u].z, fma(_1042, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1041));
    uint _1167 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1173 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1167].x;
    float _1174 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_1167].y;
    float _1175 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_1167].z;
    float _4091 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _1179 = 1.0 - _1049;
    float _1180 = _1176 * _1179;
    float _1181 = _1177 * _1179;
    float _1182 = _1178 * _1179;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1049;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1049;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1049;
    float _1190 = _1187 + 0.039999999105930328369140625;
    float _1192 = _1188 + 0.039999999105930328369140625;
    float _1193 = _1189 + 0.039999999105930328369140625;
    vec4 _1202 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1128, cbSceneParam._m0[86u].y * _1129));
    float _1206 = ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * TEXCOORD_5.w) * _1202.x;
    float _1207 = dot(vec3(_1041, _1042, _1043), vec3(_1120, _1121, _1122));
    float _1210 = _1207 * 2.0;
    float _1214 = (_1210 * _1041) - _1120;
    float _1215 = (_1210 * _1042) - _1121;
    float _1216 = (_1210 * _1043) - _1122;
    float _1220 = abs(dot(vec3(_1120, _1121, _1122), vec3(_1041, _1042, _1043)));
    float _4124 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1222 = sqrt(_1044);
    float _1235 = exp2((_1222 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1222 * 3.0));
    float _1241 = (1.0 - _1235) * ((_1222 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1242 = _1235 * _1222;
    float _1270 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1579;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1304 = fma(_1278, cbModelParam._m0[26u].z, fma(_1274, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1270));
        float _1308 = fma(_1278, cbModelParam._m0[27u].z, fma(_1274, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1270));
        float _1312 = fma(_1278, cbModelParam._m0[28u].z, fma(_1274, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1270));
        float _1337 = _1270 + _1041;
        float _1338 = _1274 + _1042;
        float _1339 = _1278 + _1043;
        float _1349 = fma(_1339, cbModelParam._m0[26u].z, fma(_1338, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1337)) - _1304;
        float _1350 = fma(_1339, cbModelParam._m0[27u].z, fma(_1338, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1337)) - _1308;
        float _1351 = fma(_1339, cbModelParam._m0[28u].z, fma(_1338, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1337)) - _1312;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1304 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1308 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[34u].z) + ((((((_1312 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1407 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1373.x + (-0.5));
        float _1409 = _1407 * (_1373.y + (-0.5));
        float _1410 = _1407 * (_1373.z + (-0.5));
        float _1417 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1380.x + (-0.5));
        float _1419 = _1417 * (_1380.y + (-0.5));
        float _1420 = _1417 * (_1380.z + (-0.5));
        float _1427 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1387.x + (-0.5));
        float _1429 = _1427 * (_1387.y + (-0.5));
        float _1430 = _1427 * (_1387.z + (-0.5));
        float _1437 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1394.x + (-0.5));
        float _1439 = _1437 * (_1394.y + (-0.5));
        float _1440 = _1437 * (_1394.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1461 = (dot(vec3(_1041, _1042, _1043), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1471 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4172 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1473 + 1.0))) + _1478) * _1441;
        float _1488 = _1409 * 0.5;
        float _1489 = _1419 * 0.5;
        float _1490 = _1429 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_1041, _1042, _1043), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4205 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1515 + 1.0))) + _1520) * _1442;
        float _1530 = _1410 * 0.5;
        float _1531 = _1420 * 0.5;
        float _1532 = _1430 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_1041, _1042, _1043), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4238 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1557 + 1.0))) + _1562) * _1443;
        _1579 = _1410;
        _1581 = _1409;
        _1582 = _1408;
        _1583 = _1420;
        _1584 = _1419;
        _1585 = _1418;
        _1586 = _1430;
        _1587 = _1429;
        _1588 = _1428;
        _1589 = _1443;
        _1590 = _1442;
        _1591 = _1441;
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1593 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1594 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1580;
        _1581 = _1580;
        _1582 = _1580;
        _1583 = _1580;
        _1584 = _1580;
        _1585 = _1580;
        _1586 = _1580;
        _1587 = _1580;
        _1588 = _1580;
        _1589 = _1580;
        _1590 = _1580;
        _1591 = _1580;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    float _1900;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1617 = fma(_1278, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1270));
        float _1621 = fma(_1278, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1270));
        float _1625 = fma(_1278, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1270));
        float _1648 = _1270 + _1041;
        float _1649 = _1274 + _1042;
        float _1650 = _1278 + _1043;
        float _1660 = fma(_1650, cbModelParam._m0[30u].z, fma(_1649, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1648)) - _1617;
        float _1661 = fma(_1650, cbModelParam._m0[31u].z, fma(_1649, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1648)) - _1621;
        float _1662 = fma(_1650, cbModelParam._m0[32u].z, fma(_1649, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1648)) - _1625;
        float _1666 = inversesqrt(dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662)));
        float _1679 = ((_1666 * _1660) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1617 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1680 = ((_1666 * _1661) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1621 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1681 = ((_1666 * _1662) / cbModelParam._m0[35u].z) + ((((((_1625 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1683 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        vec4 _1690 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        vec4 _1697 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1679, _1680, _1681), 0.0);
        float _1716 = exp2((_1683.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1683.x + (-0.5));
        float _1718 = _1716 * (_1683.y + (-0.5));
        float _1719 = _1716 * (_1683.z + (-0.5));
        float _1726 = exp2((_1690.w + (-0.5)) * 20.0) * 2.0;
        float _1727 = _1726 * (_1690.x + (-0.5));
        float _1728 = _1726 * (_1690.y + (-0.5));
        float _1729 = _1726 * (_1690.z + (-0.5));
        float _1736 = exp2((_1697.w + (-0.5)) * 20.0) * 2.0;
        float _1737 = _1736 * (_1697.x + (-0.5));
        float _1738 = _1736 * (_1697.y + (-0.5));
        float _1739 = _1736 * (_1697.z + (-0.5));
        float _1746 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1747 = _1746 * (_1704.x + (-0.5));
        float _1748 = _1746 * (_1704.y + (-0.5));
        float _1749 = _1746 * (_1704.z + (-0.5));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1753 = _1717 * 0.5;
        float _1754 = _1727 * 0.5;
        float _1755 = _1737 * 0.5;
        float _1756 = dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755));
        float _1761 = (_1756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1756);
        float _1769 = (dot(vec3(_1041, _1042, _1043), vec3(_1761 * _1753, _1761 * _1754, _1761 * _1755)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1778 = sqrt(((_1754 * _1754) + (_1753 * _1753)) + (_1755 * _1755)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1780 = _1779 * 2.0;
        float _1784 = (1.0 - _1779) / (_1779 + 1.0);
        float _4301 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1785 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1794 = ((((1.0 - _1785) * (_1780 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1780 + 1.0))) + _1785) * _1750;
        float _1795 = _1718 * 0.5;
        float _1796 = _1728 * 0.5;
        float _1797 = _1738 * 0.5;
        float _1798 = dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797));
        float _1803 = (_1798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1798);
        float _1811 = (dot(vec3(_1041, _1042, _1043), vec3(_1803 * _1795, _1803 * _1796, _1803 * _1797)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1820 = sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1822 = _1821 * 2.0;
        float _1826 = (1.0 - _1821) / (_1821 + 1.0);
        float _4334 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1827 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1836 = ((((1.0 - _1827) * (_1822 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1822 + 1.0))) + _1827) * _1751;
        float _1837 = _1719 * 0.5;
        float _1838 = _1729 * 0.5;
        float _1839 = _1739 * 0.5;
        float _1840 = dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839));
        float _1845 = (_1840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1840);
        float _1853 = (dot(vec3(_1041, _1042, _1043), vec3(_1845 * _1837, _1845 * _1838, _1845 * _1839)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839)) / (_1752 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1864 = _1863 * 2.0;
        float _1868 = (1.0 - _1863) / (_1863 + 1.0);
        float _4367 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1878 = ((((1.0 - _1869) * (_1864 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1864 + 1.0))) + _1869) * _1752;
        _1886 = _1719;
        _1887 = _1718;
        _1888 = _1717;
        _1889 = _1729;
        _1890 = _1728;
        _1891 = _1727;
        _1892 = _1739;
        _1893 = _1738;
        _1894 = _1737;
        _1895 = _1752;
        _1896 = _1751;
        _1897 = _1750;
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)));
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)));
        _1900 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)));
    }
    else
    {
        _1886 = _1580;
        _1887 = _1580;
        _1888 = _1580;
        _1889 = _1580;
        _1890 = _1580;
        _1891 = _1580;
        _1892 = _1580;
        _1893 = _1580;
        _1894 = _1580;
        _1895 = _1580;
        _1896 = _1580;
        _1897 = _1580;
        _1898 = 0.0;
        _1899 = 0.0;
        _1900 = 0.0;
    }
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1592)) + _1592;
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1593)) + _1593;
    float _1912 = (cbModelParam._m0[1u].x * (_1900 - _1594)) + _1594;
    float _1933 = fma(_1912, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1910 * cbSceneParam._m0[89u].x));
    float _1936 = fma(_1912, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1910 * cbSceneParam._m0[90u].x));
    float _1939 = fma(_1912, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1910));
    float _1954 = _1214 * 0.5;
    float _1955 = _1215 * 0.5;
    float _1956 = _1216 * 0.5;
    float _1957 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1888, _1891, _1894, _1897));
    float _1960 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1963 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1997;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1970 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1579, _1583, _1586, _1589));
        float _1974 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1581, _1584, _1587, _1590));
        float _1978 = dot(vec4(_1954, _1955, _1956, 1.0), vec4(_1582, _1585, _1588, _1591));
        float _1985 = dot(vec4(cbModelParam._m0[39u]), vec4(_1954, _1955, _1956, 1.0));
        _1997 = dot(vec3(isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0)), isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1985) ? 0.0 : (isnan(0.0) ? _1985 : max(0.0, _1985))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1997 = 1.0;
    }
    float _2008;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1999 = dot(vec4(cbModelParam._m0[40u]), vec4(_1954, _1955, _1956, 1.0));
        _2008 = dot(vec3(isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1999) ? 0.0 : (isnan(0.0) ? _1999 : max(0.0, _1999))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2008 = 1.0;
    }
    float _2012 = (_2008 * cbModelParam._m0[1u].x) + (_1997 * (1.0 - cbModelParam._m0[1u].x));
    float _2022 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1044);
    float _2023 = isnan(_2022) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2022 : min(cbModelParam._m0[25u].z, _2022));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2070 = fma(_1278, cbModelParam._m0[13u].z, fma(_1274, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1270)) + cbModelParam._m0[13u].w;
        float _2074 = fma(_1278, cbModelParam._m0[14u].z, fma(_1274, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1270)) + cbModelParam._m0[14u].w;
        float _2078 = fma(_1278, cbModelParam._m0[15u].z, fma(_1274, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1270)) + cbModelParam._m0[15u].w;
        float _2081 = fma(_1216, cbModelParam._m0[13u].z, fma(_1215, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1214));
        float _2084 = fma(_1216, cbModelParam._m0[14u].z, fma(_1215, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1214));
        float _2087 = fma(_1216, cbModelParam._m0[15u].z, fma(_1215, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1214));
        float _2115;
        if (_2081 > 0.0)
        {
            _2115 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2115 = frontier_phi_14_12_ladder;
        }
        float _2338;
        if (_2084 > 0.0)
        {
            _2338 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2338 = frontier_phi_23_19_ladder;
        }
        float _2595;
        if (_2087 > 0.0)
        {
            _2595 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2595 = frontier_phi_35_30_ladder;
        }
        float _2597 = isnan(_2338) ? _2115 : (isnan(_2115) ? _2338 : min(_2115, _2338));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _2081) + _2070;
        float _2603 = (_2598 * _2084) + _2074;
        float _2604 = (_2598 * _2087) + _2078;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2607 = (-1.0) - _2605;
        float _2609 = _2605 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2604 > _2609) || ((_2604 < _2607) || ((_2603 > _2609) || ((_2603 < _2607) || ((_2602 < _2607) || (_2602 > _2609))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2604, cbModelParam._m0[9u].z, fma(_2603, cbModelParam._m0[9u].y, _2602 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2604, cbModelParam._m0[10u].z, fma(_2603, cbModelParam._m0[10u].y, _2602 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2604, cbModelParam._m0[11u].z, fma(_2603, cbModelParam._m0[11u].y, _2602 * cbModelParam._m0[11u].x))), _2023);
            frontier_phi_13_35_ladder = _2732.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2732.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2732.x * cbModelParam._m0[1u].y;
        }
        _2103 = frontier_phi_13_35_ladder_2;
        _2105 = frontier_phi_13_35_ladder_1;
        _2107 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1214, _1215, _1216), _2023);
        _2103 = _2091.x * cbModelParam._m0[1u].y;
        _2105 = _2091.y * cbModelParam._m0[1u].y;
        _2107 = _2091.z * cbModelParam._m0[1u].y;
    }
    float _2111 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1044);
    float _2112 = isnan(_2111) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2111 : min(cbModelParam._m0[25u].w, _2111));
    float _2201;
    float _2203;
    float _2205;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2165 = fma(_1278, cbModelParam._m0[21u].z, fma(_1274, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1270)) + cbModelParam._m0[21u].w;
        float _2169 = fma(_1278, cbModelParam._m0[22u].z, fma(_1274, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1270)) + cbModelParam._m0[22u].w;
        float _2173 = fma(_1278, cbModelParam._m0[23u].z, fma(_1274, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1270)) + cbModelParam._m0[23u].w;
        float _2176 = fma(_1216, cbModelParam._m0[21u].z, fma(_1215, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1214));
        float _2179 = fma(_1216, cbModelParam._m0[22u].z, fma(_1215, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1214));
        float _2182 = fma(_1216, cbModelParam._m0[23u].z, fma(_1215, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1214));
        float _2343;
        if (_2176 > 0.0)
        {
            _2343 = abs((1.0 - _2165) / _2176);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2165 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2343 = frontier_phi_25_21_ladder;
        }
        float _2622;
        if (_2179 > 0.0)
        {
            _2622 = abs((1.0 - _2169) / _2179);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2169 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2622 = frontier_phi_37_32_ladder;
        }
        float _2835;
        if (_2182 > 0.0)
        {
            _2835 = abs((1.0 - _2173) / _2182);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2173 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2835 = frontier_phi_46_43_ladder;
        }
        float _2837 = isnan(_2622) ? _2343 : (isnan(_2343) ? _2622 : min(_2343, _2622));
        float _2838 = isnan(_2835) ? _2837 : (isnan(_2837) ? _2835 : min(_2837, _2835));
        float _2842 = (_2838 * _2176) + _2165;
        float _2843 = (_2838 * _2179) + _2169;
        float _2844 = (_2838 * _2182) + _2173;
        float _2845 = _2838 * 9.9999997473787516355514526367188e-05;
        float _2846 = (-1.0) - _2845;
        float _2848 = _2845 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2844 > _2848) || ((_2844 < _2846) || ((_2843 > _2848) || ((_2843 < _2846) || ((_2842 < _2846) || (_2842 > _2848))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3043 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2844, cbModelParam._m0[17u].z, fma(_2843, cbModelParam._m0[17u].y, _2842 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2844, cbModelParam._m0[18u].z, fma(_2843, cbModelParam._m0[18u].y, _2842 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2844, cbModelParam._m0[19u].z, fma(_2843, cbModelParam._m0[19u].y, _2842 * cbModelParam._m0[19u].x))), _2112);
            frontier_phi_22_46_ladder = _3043.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3043.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3043.x * cbModelParam._m0[1u].z;
        }
        _2201 = frontier_phi_22_46_ladder_2;
        _2203 = frontier_phi_22_46_ladder_1;
        _2205 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2185 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1214, _1215, _1216), _2112);
        _2201 = _2185.x * cbModelParam._m0[1u].z;
        _2203 = _2185.y * cbModelParam._m0[1u].z;
        _2205 = _2185.z * cbModelParam._m0[1u].z;
    }
    float _2218 = (((_1241 * _1190) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2201 - _2103)) + _2103);
    float _2220 = (((_1241 * _1192) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2203 - _2105)) + _2105);
    float _2222 = (((_1241 * _1193) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2205 - _2107)) + _2107);
    float _2225 = fma(_2222, cbSceneParam._m0[89u].z, fma(_2220, cbSceneParam._m0[89u].y, _2218 * cbSceneParam._m0[89u].x));
    float _2228 = fma(_2222, cbSceneParam._m0[90u].z, fma(_2220, cbSceneParam._m0[90u].y, _2218 * cbSceneParam._m0[90u].x));
    float _2231 = fma(_2222, cbSceneParam._m0[91u].z, fma(_2220, cbSceneParam._m0[91u].y, _2218 * cbSceneParam._m0[91u].x));
    vec4 _2239 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1128, _1129));
    float _2241 = _2239.w;
    float _2253 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2241);
    float _2254 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2241);
    float _2255 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2241);
    uvec4 _2259 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2261 = _2259.x * 14u;
    uint _2262 = _2261 + 13u;
    float _2269 = _1206 + (-1.0);
    float _2274 = (cbLight._m0[_2262].x * _2269) + 1.0;
    float _2275 = (cbLight._m0[_2262].y * _2269) + 1.0;
    float _2276 = (cbLight._m0[_2262].z * _2269) + 1.0;
    float _2277 = (cbLight._m0[_2262].w * _2269) + 1.0;
    uint _2278 = _2261 + 5u;
    float _2284 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2288 = _2261 + 4u;
    float _2297 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
    uint _2301 = _2261 | 1u;
    float _2312 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_1041, _1042, _1043));
    float _2315 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_1041, _1042, _1043));
    float _4503 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _4514 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2320 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2322 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2329 = ((cbLight._m0[_2278].x * _2284) * _2322) + (((cbLight._m0[_2288].x * _2253) * _2297) * _2320);
    float _2330 = ((_2284 * cbLight._m0[_2278].y) * _2322) + (((cbLight._m0[_2288].y * _2254) * _2297) * _2320);
    float _2331 = ((_2284 * cbLight._m0[_2278].z) * _2322) + (((cbLight._m0[_2288].z * _2255) * _2297) * _2320);
    uvec4 _2335 = floatBitsToUint(cbLight._m0[_2261 + 12u]);
    bool _2337 = _2335.x == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2337)
    {
        _2348 = _2329;
        _2350 = _2330;
        _2352 = _2331;
    }
    else
    {
        uint _2356 = _2261 + 6u;
        float _2372 = (dot(vec3(cbLight._m0[_2261 + 2u].xyz), vec3(_1041, _1042, _1043)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4525 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2375 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2348 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2329;
        _2350 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2330;
        _2352 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2331;
    }
    bool _2355 = _2335.y == 0u;
    float _2393;
    float _2395;
    float _2397;
    if (_2355)
    {
        _2393 = _2348;
        _2395 = _2350;
        _2397 = _2352;
    }
    else
    {
        uint _2566 = _2261 + 7u;
        float _2582 = (dot(vec3(cbLight._m0[_2261 + 3u].xyz), vec3(_1041, _1042, _1043)) * 0.5) + 0.5;
        float _2583 = _2582 * _2582;
        float _4541 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2584 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2585 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2393 = (((cbLight._m0[_2566].x * 0.3183098733425140380859375) * _2584) * _2585) + _2348;
        _2395 = (((cbLight._m0[_2566].y * 0.3183098733425140380859375) * _2584) * _2585) + _2350;
        _2397 = (((cbLight._m0[_2566].z * 0.3183098733425140380859375) * _2584) * _2585) + _2352;
    }
    uint _2400 = _2261 + 8u;
    float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _1044) * 0.949999988079071044921875);
    float _2414 = _2413 * _2413;
    float _2415 = cbLight._m0[_2261].x + _1120;
    float _2416 = cbLight._m0[_2261].y + _1121;
    float _2417 = cbLight._m0[_2261].z + _1122;
    float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
    float _2422 = _2421 * _2415;
    float _2423 = _2421 * _2416;
    float _2424 = _2421 * _2417;
    float _2425 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2261].xyz));
    float _4557 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2428 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _4568 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _2429 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2430 = dot(vec3(_1041, _1042, _1043), vec3(_2422, _2423, _2424));
    float _4579 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2434 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2422, _2423, _2424));
    float _4590 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2438 = _2414 * _2414;
    float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
    float _2450 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2451 = 0.959999978542327880859375 - _1187;
    float _2453 = 0.959999978542327880859375 - _1188;
    float _2454 = 0.959999978542327880859375 - _1189;
    float _2461 = 1.0 - _2414;
    float _2472 = (0.5 / (((_2429 * ((_2428 * _2461) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2461) + _2414) * _2428))) * _2428;
    float _4601 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2474 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
    uint _2488 = _2261 + 9u;
    float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2301].w)) * _1044) * 0.949999988079071044921875);
    float _2500 = _2499 * _2499;
    float _2501 = cbLight._m0[_2301].x + _1120;
    float _2502 = cbLight._m0[_2301].y + _1121;
    float _2503 = cbLight._m0[_2301].z + _1122;
    float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
    float _2508 = _2507 * _2501;
    float _2509 = _2507 * _2502;
    float _2510 = _2507 * _2503;
    float _2511 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2301].xyz));
    float _4612 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2515 = dot(vec3(_1041, _1042, _1043), vec3(_2508, _2509, _2510));
    float _4623 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2519 = dot(vec3(cbLight._m0[_2301].xyz), vec3(_2508, _2509, _2510));
    float _4634 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2523 = _2500 * _2500;
    float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
    float _2534 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2541 = 1.0 - _2500;
    float _2551 = (0.5 / (((_2429 * ((_2514 * _2541) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2541) + _2500) * _2514))) * _2514;
    float _4645 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2553 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
    float _2563 = (((((_2534 * _2451) + _1190) * cbLight._m0[_2488].x) * _2553) * _2284) + ((((cbLight._m0[_2400].x * _2253) * ((_2450 * _2451) + _1190)) * _2474) * _2297);
    float _2564 = (((((_2534 * _2453) + _1192) * cbLight._m0[_2488].y) * _2553) * _2284) + ((((cbLight._m0[_2400].y * _2254) * ((_2450 * _2453) + _1192)) * _2474) * _2297);
    float _2565 = (((((_2534 * _2454) + _1193) * cbLight._m0[_2488].z) * _2553) * _2284) + ((((cbLight._m0[_2400].z * _2255) * ((_2450 * _2454) + _1193)) * _2474) * _2297);
    float _2627;
    float _2629;
    float _2631;
    if (_2337)
    {
        _2627 = _2563;
        _2629 = _2564;
        _2631 = _2565;
    }
    else
    {
        uint _2633 = _2261 + 2u;
        uint _2637 = _2261 + 10u;
        float _2651 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2633].w)) * _1044) * 0.949999988079071044921875);
        float _2652 = _2651 * _2651;
        float _2653 = cbLight._m0[_2633].x + _1120;
        float _2654 = cbLight._m0[_2633].y + _1121;
        float _2655 = cbLight._m0[_2633].z + _1122;
        float _2659 = inversesqrt(dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655)));
        float _2660 = _2659 * _2653;
        float _2661 = _2659 * _2654;
        float _2662 = _2659 * _2655;
        float _2663 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2633].xyz));
        float _4656 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2667 = dot(vec3(_1041, _1042, _1043), vec3(_2660, _2661, _2662));
        float _4667 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2671 = dot(vec3(cbLight._m0[_2633].xyz), vec3(_2660, _2661, _2662));
        float _4678 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2675 = _2652 * _2652;
        float _2679 = ((_2670 * _2670) * (_2675 + (-1.0))) + 1.0;
        float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
        float _2693 = 1.0 - _2652;
        float _2703 = (0.5 / (((_2429 * ((_2666 * _2693) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2693) + _2652) * _2666))) * _2666;
        float _4689 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2675 / ((_2679 * _2679) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
        _2627 = (((((_2686 * _2451) + _1190) * cbLight._m0[_2637].x) * _2705) * _2706) + _2563;
        _2629 = (((((_2686 * _2453) + _1192) * cbLight._m0[_2637].y) * _2705) * _2706) + _2564;
        _2631 = (((((_2686 * _2454) + _1193) * cbLight._m0[_2637].z) * _2705) * _2706) + _2565;
    }
    float _2741;
    float _2743;
    float _2745;
    if (_2355)
    {
        _2741 = _2627;
        _2743 = _2629;
        _2745 = _2631;
    }
    else
    {
        uint _2752 = _2261 + 3u;
        uint _2756 = _2261 + 11u;
        float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2752].w)) * _1044) * 0.949999988079071044921875);
        float _2771 = _2770 * _2770;
        float _2772 = cbLight._m0[_2752].x + _1120;
        float _2773 = cbLight._m0[_2752].y + _1121;
        float _2774 = cbLight._m0[_2752].z + _1122;
        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
        float _2779 = _2778 * _2772;
        float _2780 = _2778 * _2773;
        float _2781 = _2778 * _2774;
        float _2782 = dot(vec3(_1041, _1042, _1043), vec3(cbLight._m0[_2752].xyz));
        float _4705 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2786 = dot(vec3(_1041, _1042, _1043), vec3(_2779, _2780, _2781));
        float _4716 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2790 = dot(vec3(cbLight._m0[_2752].xyz), vec3(_2779, _2780, _2781));
        float _4727 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2794 = _2771 * _2771;
        float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
        float _2805 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
        float _2812 = 1.0 - _2771;
        float _2822 = (0.5 / (((_2429 * ((_2785 * _2812) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2429 * _2812) + _2771) * _2785))) * _2785;
        float _4738 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2741 = (((((_2805 * _2451) + _1190) * cbLight._m0[_2756].x) * _2824) * _2825) + _2627;
        _2743 = (((((_2805 * _2453) + _1192) * cbLight._m0[_2756].y) * _2824) * _2825) + _2629;
        _2745 = (((((_2805 * _2454) + _1193) * cbLight._m0[_2756].z) * _2824) * _2825) + _2631;
    }
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    if (_2259.y == 0u)
    {
        float _2900 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2900;
        float _2902 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2900;
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2900;
        uvec4 _2915 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2916 = _2915.x;
        uint _2927 = uint((float(_2915.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1129) / _2916))) + floor(float(uint(cbSceneParam._m0[85u].x * _1128) / _2916)));
        float _2937 = (log2(_2903 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2938 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        uint _2941 = uint(isnan(14.0) ? _2938 : (isnan(_2938) ? 14.0 : min(_2938, 14.0)));
        uvec4 _2946 = texelFetch(g_lightClusterGridBuffer, int(((_2941 << 2u) + (_2927 << 6u)) >> 2u));
        uint _2947 = _2946.x;
        uint _2948 = _2915.z;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((((1u << ((_2948 >> 4u) & 15u)) + 4294967295u) & _2947) == 0u) || ((_2948 & 240u) == 0u))
        {
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
        }
        else
        {
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            uint _3199 = 0u;
            uint _3208;
            bool _3209;
            for (;;)
            {
                _3208 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                _3209 = _3208 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3209)
                {
                    frontier_phi_61_pred = _3193;
                    frontier_phi_61_pred_1 = _3198;
                    frontier_phi_61_pred_2 = _3197;
                    frontier_phi_61_pred_3 = _3196;
                    frontier_phi_61_pred_4 = _3195;
                    frontier_phi_61_pred_5 = _3194;
                }
                else
                {
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    uint _3323;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3208;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    for (;;)
                    {
                        uint _3327 = uint(findLSB(_3323)) + (_3199 << 5u);
                        uint _3324 = (_3323 + 4294967295u) & _3323;
                        uint _3329 = _3327 * 48u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3349 = (_3327 * 48u) + 4u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3368 = (_3327 * 48u) + 8u;
                        vec3 _3379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x));
                        float _3383 = _3343.x - _2901;
                        float _3384 = _3343.y - _2902;
                        float _3385 = _3343.z - _2903;
                        float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                        float _3389 = inversesqrt(_3386);
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3393 = dot(vec3(_1147, _1150, _1153), vec3(_3390, _3391, _3392));
                        float _3398 = 1.0 - (_3386 * _3343.w);
                        float _4764 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3400 = sqrt(_3386) * _3362.w;
                        float _3403 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3393) + _3404;
                        float _3410 = _3400 * _3400;
                        float _3414 = ((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3399) / ((_3410 * 0.699999988079071044921875) + 1.0);
                        float _3418 = (-0.0) - _2901;
                        float _3419 = (-0.0) - _2902;
                        float _3420 = (-0.0) - _2903;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3435 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                        float _3436 = 1.0 - _1222;
                        float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                        float _3444 = _3443 * _3443;
                        float _3445 = _3444 * _3444;
                        float _3446 = _3425 + _3390;
                        float _3447 = _3426 + _3391;
                        float _3448 = _3427 + _3392;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3456 = dot(vec3(_1147, _1150, _1153), vec3(_3425, _3426, _3427));
                        float _4780 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3460 = dot(vec3(_1147, _1150, _1153), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                        float _4791 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                        float _3468 = _3403 * _3444;
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3393) + _3469;
                        float _4802 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3474 = 1.0 - _3444;
                        float _3484 = (0.5 / (((_3473 * ((_3459 * _3474) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3444) * _3459))) * _3473;
                        float _4813 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3495 = (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3467 * _3467) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125))) * _3399;
                        _3252 = (_3414 * _3362.x) + _3320;
                        _3253 = (_3414 * _3362.y) + _3321;
                        _3254 = (_3414 * _3362.z) + _3322;
                        _3249 = (_3495 * _3379.x) + _3317;
                        _3250 = (_3495 * _3379.y) + _3318;
                        _3251 = (_3495 * _3379.z) + _3319;
                        if (_3324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3324;
                        }
                    }
                    frontier_phi_61_pred = _3249;
                    frontier_phi_61_pred_1 = _3254;
                    frontier_phi_61_pred_2 = _3253;
                    frontier_phi_61_pred_3 = _3252;
                    frontier_phi_61_pred_4 = _3251;
                    frontier_phi_61_pred_5 = _3250;
                }
                _3049 = frontier_phi_61_pred;
                _3059 = frontier_phi_61_pred_1;
                _3057 = frontier_phi_61_pred_2;
                _3055 = frontier_phi_61_pred_3;
                _3053 = frontier_phi_61_pred_4;
                _3051 = frontier_phi_61_pred_5;
                uint _3200 = _3199 + 1u;
                if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3193 = _3049;
                    _3194 = _3051;
                    _3195 = _3053;
                    _3196 = _3055;
                    _3197 = _3057;
                    _3198 = _3059;
                    _3199 = _3200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
        }
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.z;
        uint _3065 = (_3063 >> 8u) & 15u;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        if (((4294967295u << _3065) & _2947) == 0u)
        {
            _3161 = _3048;
            _3163 = _3050;
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
            _3171 = _3058;
        }
        else
        {
            float _3186 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
            float _3187 = _3186 * _2901;
            float _3188 = _3186 * _2902;
            float _3189 = _3186 * _2903;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3065 < ((_3063 >> 12u) & 15u))
            {
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3300 = _3048;
                float _3301 = _3050;
                float _3302 = _3052;
                float _3303 = _3054;
                float _3304 = _3056;
                float _3305 = _3058;
                uint _3306 = _3065;
                uint _3315;
                bool _3316;
                for (;;)
                {
                    _3315 = texelFetch(g_lightClassification, int((((_2941 << 5u) + (_2927 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                    _3316 = _3315 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3316)
                    {
                        frontier_phi_67_pred = _3303;
                        frontier_phi_67_pred_1 = _3304;
                        frontier_phi_67_pred_2 = _3305;
                        frontier_phi_67_pred_3 = _3302;
                        frontier_phi_67_pred_4 = _3301;
                        frontier_phi_67_pred_5 = _3300;
                    }
                    else
                    {
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3513 = _3300;
                        float _3514 = _3301;
                        float _3515 = _3302;
                        float _3516 = _3303;
                        float _3517 = _3304;
                        float _3518 = _3305;
                        uint _3519 = _3315;
                        uint _3520;
                        vec4 _3545;
                        float _3546;
                        vec4 _3561;
                        vec3 _3573;
                        vec4 _3588;
                        vec4 _3603;
                        float _3649;
                        bool _3650;
                        for (;;)
                        {
                            uint _3530 = ((_3306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3519));
                            _3520 = (_3519 + 4294967295u) & _3519;
                            uint _3532 = _3530 * 40u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            _3546 = _3545.w;
                            uint _3548 = (_3530 * 40u) + 4u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3530 * 40u) + 8u;
                            _3573 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x));
                            uint _3575 = (_3530 * 40u) + 16u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3530 * 40u) + 20u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3530 * 40u) + 24u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3624 = (_3530 * 40u) + 28u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3649 = fma(_2903, _3637.z, fma(_2902, _3637.y, _3637.x * _2901)) + _3637.w;
                            _3650 = !((fma(_2903, _3618.z, fma(_2902, _3618.y, _3618.x * _2901)) + _3618.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3650)
                            {
                                float _3677 = _3545.x - _2901;
                                float _3678 = _3545.y - _2902;
                                float _3679 = _3545.z - _2903;
                                float _3680 = dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679));
                                float _3683 = inversesqrt(_3680);
                                float _3684 = _3683 * _3677;
                                float _3685 = _3683 * _3678;
                                float _3686 = _3683 * _3679;
                                float _3690 = 1.0 - (_3680 / (_3546 * _3546));
                                float _4824 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3695 = sqrt(_3680) * _3561.w;
                                float _3697 = 1.39999997615814208984375 / (_3695 + 1.39999997615814208984375);
                                float _3698 = _3697 * _3697;
                                float _3701 = ((1.0 - _3698) * dot(vec3(_3684, _3685, _3686), vec3(_1147, _1150, _1153))) + _3698;
                                float _3704 = _3695 * _3695;
                                float _3708 = (fma(_2903, _3588.z, fma(_2902, _3588.y, _3588.x * _2901)) + _3588.w) / _3649;
                                float _3709 = (fma(_2903, _3603.z, fma(_2902, _3603.y, _3603.x * _2901)) + _3603.w) / _3649;
                                float _3713 = 1.0 - dot(vec2(_3708, _3709), vec2(_3708, _3709));
                                float _4840 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3715 = _3714 * (((isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0))) * _3691) / ((_3704 * 0.699999988079071044921875) + 1.0));
                                float _3727 = exp2(log2(1.0 / ((_3704 * 3.5) + 5.0)) * 0.25);
                                float _3728 = 1.0 - _1222;
                                float _3735 = sqrt(1.0 - ((1.0 - (_3728 * _3728)) * (1.0 - (_3727 * _3727))));
                                float _3736 = _3735 * _3735;
                                float _3737 = _3736 * _3736;
                                float _3738 = _3684 - _3187;
                                float _3739 = _3685 - _3188;
                                float _3740 = _3686 - _3189;
                                float _3744 = inversesqrt(dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740)));
                                float _3748 = dot(vec3(_1147, _1150, _1153), vec3((-0.0) - _3187, (-0.0) - _3188, (-0.0) - _3189));
                                float _4851 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3752 = dot(vec3(_1147, _1150, _1153), vec3(_3744 * _3738, _3744 * _3739, _3744 * _3740));
                                float _4862 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3759 = ((_3755 * _3755) * (_3737 + (-1.0))) + 1.0;
                                float _3760 = _3697 * _3736;
                                float _3761 = _3760 * _3760;
                                float _3767 = ((1.0 - _3761) * dot(vec3(_1147, _1150, _1153), vec3(_3684, _3685, _3686))) + _3761;
                                float _4873 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3769 = 1.0 - _3736;
                                float _3779 = (0.5 / (((_3768 * ((_3751 * _3769) + _3736)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3736) * _3751))) * _3768;
                                float _4884 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3789 = (_3714 * _3691) * (((_3737 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3759 * _3759) * ((_3704 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3789 * _3573.x;
                                frontier_phi_73_pred_1 = _3789 * _3573.y;
                                frontier_phi_73_pred_2 = _3715 * _3561.z;
                                frontier_phi_73_pred_3 = _3715 * _3561.y;
                                frontier_phi_73_pred_4 = _3715 * _3561.x;
                                frontier_phi_73_pred_5 = _3789 * _3573.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3793 = frontier_phi_73_pred;
                            _3794 = frontier_phi_73_pred_1;
                            _3798 = frontier_phi_73_pred_2;
                            _3797 = frontier_phi_73_pred_3;
                            _3796 = frontier_phi_73_pred_4;
                            _3795 = frontier_phi_73_pred_5;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            if (_3520 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3520;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3503;
                        frontier_phi_67_pred_1 = _3504;
                        frontier_phi_67_pred_2 = _3505;
                        frontier_phi_67_pred_3 = _3502;
                        frontier_phi_67_pred_4 = _3501;
                        frontier_phi_67_pred_5 = _3500;
                    }
                    _3168 = frontier_phi_67_pred;
                    _3170 = frontier_phi_67_pred_1;
                    _3172 = frontier_phi_67_pred_2;
                    _3166 = frontier_phi_67_pred_3;
                    _3164 = frontier_phi_67_pred_4;
                    _3162 = frontier_phi_67_pred_5;
                    uint _3307 = _3306 + 1u;
                    if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3300 = _3162;
                        _3301 = _3164;
                        _3302 = _3166;
                        _3303 = _3168;
                        _3304 = _3170;
                        _3305 = _3172;
                        _3306 = _3307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3170;
                frontier_phi_55_56_ladder_1 = _3172;
                frontier_phi_55_56_ladder_2 = _3168;
                frontier_phi_55_56_ladder_3 = _3166;
                frontier_phi_55_56_ladder_4 = _3164;
                frontier_phi_55_56_ladder_5 = _3162;
            }
            else
            {
                frontier_phi_55_56_ladder = _3056;
                frontier_phi_55_56_ladder_1 = _3058;
                frontier_phi_55_56_ladder_2 = _3054;
                frontier_phi_55_56_ladder_3 = _3052;
                frontier_phi_55_56_ladder_4 = _3050;
                frontier_phi_55_56_ladder_5 = _3048;
            }
            _3161 = frontier_phi_55_56_ladder_5;
            _3163 = frontier_phi_55_56_ladder_4;
            _3165 = frontier_phi_55_56_ladder_3;
            _3167 = frontier_phi_55_56_ladder_2;
            _3169 = frontier_phi_55_56_ladder;
            _3171 = frontier_phi_55_56_ladder_1;
        }
        float _3176 = isnan(1.0) ? _1206 : (isnan(_1206) ? 1.0 : min(_1206, 1.0));
        _2960 = (_3176 * _3167) + _2393;
        _2962 = (_3176 * _3169) + _2395;
        _2964 = (_3176 * _3171) + _2397;
        _2966 = ((_3161 * _1190) * _3176) + _2741;
        _2968 = ((_3163 * _1192) * _3176) + _2743;
        _2970 = ((_3165 * _1193) * _3176) + _2745;
    }
    else
    {
        _2960 = _2393;
        _2962 = _2395;
        _2964 = _2397;
        _2966 = _2741;
        _2968 = _2743;
        _2970 = _2745;
    }
    float _4900 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _4911 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _4922 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    uint _2990 = _271 + 6u;
    float _2998 = _1128 / cbSceneParam._m0[86u].x;
    float _2999 = _1129 / cbSceneParam._m0[86u].y;
    vec4 _3013 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, (log2((isnan(cbSceneParam._m0[77u].w) ? _1063 : (isnan(_1063) ? cbSceneParam._m0[77u].w : min(_1063, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3015 = _3013.x;
    float _3016 = _3013.y;
    float _3017 = _3013.z;
    float _3018 = _3013.w;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_1063 > cbSceneParam._m0[78u].w)
    {
        float _3073 = isnan(_1063) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1063 : min(cbSceneParam._m0[80u].w, _1063));
        float _3074 = _3073 / _1063;
        float _3085 = _3074 * _1113;
        float _3086 = _1114 * _3074;
        float _3087 = (-0.0) - _3086;
        float _3089 = _3074 * _1115;
        float _3091 = (cbSceneParam._m0[77u].w * _3087) / _3073;
        float _3092 = _3091 + cbSceneParam._m0[79u].w;
        float _3093 = cbSceneParam._m0[79u].w - _3086;
        float _3099 = sqrt(((_3085 * _3085) + (_3086 * _3086)) + (_3089 * _3089));
        float _3102 = (1.0 - (cbSceneParam._m0[77u].w / _3073)) * _3099;
        float _3107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3262;
        if (abs((_3087 - _3091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3262 = ((((_3092 > 0.0) ? exp2(_3107 * _3092) : (2.0 - exp2(_3109 * _3092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3102;
        }
        else
        {
            float _3222 = 1.0 / cbSceneParam._m0[80u].x;
            float _3223 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : max(_3092, _3093));
            float _3224 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : min(_3092, _3093));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            _3262 = ((abs(_3099 / _3087) * cbSceneParam._m0[80u].y) * ((((_3233 - _3234) * 2.0) - ((exp2(_3107 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0)))) - exp2(_3107 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))))) * _3222)) - ((exp2(_3109 * _3233) - exp2(_3109 * _3234)) * _3222))) + (_3102 * cbSceneParam._m0[80u].z);
        }
        vec4 _3264 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2998, _2999, 1.0), 0.0);
        float _3273 = exp2((_3262 * (-1.44269502162933349609375)) * (1.0 - _3264.w));
        float _3274 = log2(_3273);
        float _3290 = log2(_3018);
        _3111 = (exp2(_3290 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].x)) * _3264.x) / cbSceneParam._m0[78u].x)) + _3015;
        _3113 = (exp2(_3290 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].y)) * _3264.y) / cbSceneParam._m0[78u].y)) + _3016;
        _3115 = (exp2(_3290 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].z)) * _3264.z) / cbSceneParam._m0[78u].z)) + _3017;
        _3117 = _3273 * _3018;
    }
    else
    {
        _3111 = _3015;
        _3113 = _3016;
        _3115 = _3017;
        _3117 = _3018;
    }
    float _3129 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3130 = _3129 == 3.0;
    float _3131 = log2(_3117);
    float _3138 = exp2(_3131 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2960 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1206))) + ((_2966 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2012)) * cbPerFrame._m0[3u].x));
    float _3139 = exp2(_3131 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2962 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1206))) + ((_2968 + ((isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0))) * _2012)) * cbPerFrame._m0[3u].x));
    float _3140 = exp2(_3131 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2964 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1206))) + ((_2970 + ((isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0))) * _2012)) * cbPerFrame._m0[3u].x));
    float _3149 = (_3129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3149 * (_3130 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3111)));
    SV_Target.y = _3149 * (_3130 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.z = _3149 * (_3130 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.w = cbInstanceData._m0[_2990].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2990].w;
}


