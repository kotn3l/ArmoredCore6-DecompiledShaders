#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1237;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _307 = _302.x * cbMtdParam._m0[11u].x;
    float _308 = _302.y * cbMtdParam._m0[11u].y;
    float _309 = _302.z * cbMtdParam._m0[11u].z;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3589 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _426 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _278.x) * ((_413 * ((_328.x * cbMtdParam._m0[12u].x) - _307)) + _307);
    float _429 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _278.y) * ((_413 * ((_328.y * cbMtdParam._m0[12u].y) - _308)) + _308);
    float _432 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _278.z) * ((_413 * ((_328.z * cbMtdParam._m0[12u].z) - _309)) + _309);
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _480 = ((_450.z - _471) * _413) + _471;
    float _483 = ((((_450.x - _469) * _413) + _469) * 2.0) + (-1.0);
    float _485 = ((((_450.y - _470) * _413) + _470) * 2.0) + (-1.0);
    float _486 = dot(vec2(_483, _485), vec2(_483, _485));
    float _3600 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _491 = sqrt(1.0 - (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _519 = (((_507.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _483;
    float _520 = (((_507.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _485;
    float _523 = fma(_491, _226, fma(_520, _233, _519 * _219));
    float _526 = fma(_491, _227, fma(_520, _234, _519 * _220));
    float _529 = fma(_491, _228, fma(_520, _235, _519 * _221));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _562 = _560.x;
    float _563 = 1.0 - _562;
    float _572 = (cbMtdParam._m0[19u].x + dot(vec4(_533 * _523, _533 * _526, _533 * _529, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_562 - _563) * cbMtdParam._m0[24u].z) + _563) * cbMtdParam._m0[21u].z);
    float _3611 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _580 = (_573 * (cbMtdParam._m0[17u].x - _426)) + _426;
    float _581 = (_573 * (cbMtdParam._m0[17u].y - _429)) + _429;
    float _582 = (_573 * (cbMtdParam._m0[17u].z - _432)) + _432;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _610 = _608.x;
    float _627 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _258) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w)).x - _610) * _413) + _610;
    float _631 = ((_594.x - _627) * cbMtdParam._m0[19u].z) + _627;
    float _633 = _631 - (_631 * _573);
    float _637 = (cbMtdParam._m0[19u].w * (_507.z - _480)) + _480;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _657 = (_650.x * 2.0) + (-1.0);
    float _658 = (_650.y * 2.0) + (-1.0);
    float _659 = dot(vec2(_657, _658), vec2(_657, _658));
    float _3622 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _667 = ((_650.z - _637) * _573) + _637;
    float _677 = ((sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) - _491) * _573) + _491;
    float _680 = (((_657 - _519) * _573) + _519) + (cbMtdParam._m0[21u].x * _519);
    float _681 = (((_658 - _520) * _573) + _520) + (cbMtdParam._m0[21u].x * _520);
    float _683 = cbMtdParam._m0[22u].x + _507.w;
    float _686 = fma(_677, _226, fma(_681, _233, _680 * _219));
    float _689 = fma(_677, _227, fma(_681, _234, _680 * _220));
    float _692 = fma(_677, _228, fma(_681, _235, _680 * _221));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _3633 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _700 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3655 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3666 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3677 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3688 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _705 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _719 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _770 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _760);
    float _771 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _760);
    float _772 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _760);
    float _776 = inversesqrt(dot(vec3(_770, _771, _772), vec3(_770, _771, _772)));
    float _777 = _770 * _776;
    float _778 = _771 * _776;
    float _779 = _772 * _776;
    float _785 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _786 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _804 = fma(_699, cbSceneParam._m0[5u].z, fma(_698, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _697));
    float _807 = fma(_699, cbSceneParam._m0[6u].z, fma(_698, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _697));
    float _810 = fma(_699, cbSceneParam._m0[7u].z, fma(_698, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _697));
    uint _824 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _830 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_824].x;
    float _831 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_824].y;
    float _832 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_824].z;
    float _3699 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _836 = 1.0 - _705;
    float _837 = _833 * _836;
    float _838 = _834 * _836;
    float _839 = _835 * _836;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _705;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _705;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _705;
    float _847 = _844 + 0.039999999105930328369140625;
    float _849 = _845 + 0.039999999105930328369140625;
    float _850 = _846 + 0.039999999105930328369140625;
    vec4 _859 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _785, cbSceneParam._m0[86u].y * _786));
    float _863 = ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * TEXCOORD_5.w) * _859.x;
    float _864 = dot(vec3(_697, _698, _699), vec3(_777, _778, _779));
    float _867 = _864 * 2.0;
    float _871 = (_867 * _697) - _777;
    float _872 = (_867 * _698) - _778;
    float _873 = (_867 * _699) - _779;
    float _877 = abs(dot(vec3(_777, _778, _779), vec3(_697, _698, _699)));
    float _3732 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _879 = sqrt(_700);
    float _892 = exp2((_879 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _898 = (1.0 - _892) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _899 = _892 * _879;
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1236;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _961 = fma(_935, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927));
        float _965 = fma(_935, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927));
        float _969 = fma(_935, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927));
        float _994 = _927 + _697;
        float _995 = _931 + _698;
        float _996 = _935 + _699;
        float _1006 = fma(_996, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994)) - _961;
        float _1007 = fma(_996, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994)) - _965;
        float _1008 = fma(_996, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994)) - _969;
        float _1012 = inversesqrt(dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008)));
        float _1025 = ((_1012 * _1006) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_961 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1012 * _1007) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_965 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1012 * _1008) / cbModelParam._m0[34u].z) + ((((((_969 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1025, _1026, _1027), 0.0);
        float _1064 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1030.x + (-0.5));
        float _1066 = _1064 * (_1030.y + (-0.5));
        float _1067 = _1064 * (_1030.z + (-0.5));
        float _1074 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1037.x + (-0.5));
        float _1076 = _1074 * (_1037.y + (-0.5));
        float _1077 = _1074 * (_1037.z + (-0.5));
        float _1084 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1044.x + (-0.5));
        float _1086 = _1084 * (_1044.y + (-0.5));
        float _1087 = _1084 * (_1044.z + (-0.5));
        float _1094 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1051.x + (-0.5));
        float _1096 = _1094 * (_1051.y + (-0.5));
        float _1097 = _1094 * (_1051.z + (-0.5));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = _1065 * 0.5;
        float _1102 = _1075 * 0.5;
        float _1103 = _1085 * 0.5;
        float _1104 = dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103));
        float _1109 = (_1104 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1104);
        float _1118 = (dot(vec3(_697, _698, _699), vec3(_1109 * _1101, _1109 * _1102, _1109 * _1103)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1128 = sqrt(((_1102 * _1102) + (_1101 * _1101)) + (_1103 * _1103)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3780 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1130 + 1.0))) + _1135) * _1098;
        float _1145 = _1066 * 0.5;
        float _1146 = _1076 * 0.5;
        float _1147 = _1086 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_697, _698, _699), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3813 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1172 + 1.0))) + _1177) * _1099;
        float _1187 = _1067 * 0.5;
        float _1188 = _1077 * 0.5;
        float _1189 = _1087 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(_697, _698, _699), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3846 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1214 + 1.0))) + _1219) * _1100;
        _1236 = _1067;
        _1238 = _1066;
        _1239 = _1065;
        _1240 = _1077;
        _1241 = _1076;
        _1242 = _1075;
        _1243 = _1087;
        _1244 = _1086;
        _1245 = _1085;
        _1246 = _1100;
        _1247 = _1099;
        _1248 = _1098;
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
    }
    else
    {
        _1236 = _1237;
        _1238 = _1237;
        _1239 = _1237;
        _1240 = _1237;
        _1241 = _1237;
        _1242 = _1237;
        _1243 = _1237;
        _1244 = _1237;
        _1245 = _1237;
        _1246 = _1237;
        _1247 = _1237;
        _1248 = _1237;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1276 = fma(_935, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _927));
        float _1280 = fma(_935, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _927));
        float _1284 = fma(_935, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _927));
        float _1307 = _927 + _697;
        float _1308 = _931 + _698;
        float _1309 = _935 + _699;
        float _1319 = fma(_1309, cbModelParam._m0[30u].z, fma(_1308, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307)) - _1276;
        float _1320 = fma(_1309, cbModelParam._m0[31u].z, fma(_1308, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307)) - _1280;
        float _1321 = fma(_1309, cbModelParam._m0[32u].z, fma(_1308, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307)) - _1284;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1276 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1280 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[35u].z) + ((((((_1284 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1356 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1375 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1342.x + (-0.5));
        float _1377 = _1375 * (_1342.y + (-0.5));
        float _1378 = _1375 * (_1342.z + (-0.5));
        float _1385 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1349.x + (-0.5));
        float _1387 = _1385 * (_1349.y + (-0.5));
        float _1388 = _1385 * (_1349.z + (-0.5));
        float _1395 = exp2((_1356.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1356.x + (-0.5));
        float _1397 = _1395 * (_1356.y + (-0.5));
        float _1398 = _1395 * (_1356.z + (-0.5));
        float _1405 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1363.x + (-0.5));
        float _1407 = _1405 * (_1363.y + (-0.5));
        float _1408 = _1405 * (_1363.z + (-0.5));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = _1376 * 0.5;
        float _1413 = _1386 * 0.5;
        float _1414 = _1396 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1428 = (dot(vec3(_697, _698, _699), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1437 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1439 = _1438 * 2.0;
        float _1443 = (1.0 - _1438) / (_1438 + 1.0);
        float _3909 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1453 = ((((1.0 - _1444) * (_1439 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1439 + 1.0))) + _1444) * _1409;
        float _1454 = _1377 * 0.5;
        float _1455 = _1387 * 0.5;
        float _1456 = _1397 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1470 = (dot(vec3(_697, _698, _699), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1479 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1481 = _1480 * 2.0;
        float _1485 = (1.0 - _1480) / (_1480 + 1.0);
        float _3942 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1495 = ((((1.0 - _1486) * (_1481 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1481 + 1.0))) + _1486) * _1410;
        float _1496 = _1378 * 0.5;
        float _1497 = _1388 * 0.5;
        float _1498 = _1398 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_697, _698, _699), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _3975 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1523 + 1.0))) + _1528) * _1411;
        _1545 = _1378;
        _1546 = _1377;
        _1547 = _1376;
        _1548 = _1388;
        _1549 = _1387;
        _1550 = _1386;
        _1551 = _1398;
        _1552 = _1397;
        _1553 = _1396;
        _1554 = _1411;
        _1555 = _1410;
        _1556 = _1409;
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
    }
    else
    {
        _1545 = _1237;
        _1546 = _1237;
        _1547 = _1237;
        _1548 = _1237;
        _1549 = _1237;
        _1550 = _1237;
        _1551 = _1237;
        _1552 = _1237;
        _1553 = _1237;
        _1554 = _1237;
        _1555 = _1237;
        _1556 = _1237;
        _1557 = 0.0;
        _1558 = 0.0;
        _1559 = 0.0;
    }
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1249)) + _1249;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1250)) + _1250;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1251)) + _1251;
    float _1592 = fma(_1571, cbSceneParam._m0[89u].z, fma(_1570, cbSceneParam._m0[89u].y, _1569 * cbSceneParam._m0[89u].x));
    float _1595 = fma(_1571, cbSceneParam._m0[90u].z, fma(_1570, cbSceneParam._m0[90u].y, _1569 * cbSceneParam._m0[90u].x));
    float _1598 = fma(_1571, cbSceneParam._m0[91u].z, fma(_1570, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1569));
    float _1613 = _871 * 0.5;
    float _1614 = _872 * 0.5;
    float _1615 = _873 * 0.5;
    float _1616 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1619 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1622 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1656;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1629 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1236, _1240, _1243, _1246));
        float _1633 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1637 = dot(vec4(_1613, _1614, _1615, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1644 = dot(vec4(cbModelParam._m0[39u]), vec4(_1613, _1614, _1615, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1667;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1658 = dot(vec4(cbModelParam._m0[40u]), vec4(_1613, _1614, _1615, 1.0));
        _1667 = dot(vec3(isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1658) ? 0.0 : (isnan(0.0) ? _1658 : max(0.0, _1658))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1667 = 1.0;
    }
    float _1671 = (_1667 * cbModelParam._m0[1u].x) + (_1656 * (1.0 - cbModelParam._m0[1u].x));
    float _1681 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1682 = isnan(_1681) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1681 : min(cbModelParam._m0[25u].z, _1681));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_935, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_935, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_935, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_873, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871));
        float _1744 = fma(_873, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871));
        float _1747 = fma(_873, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1775 = frontier_phi_14_12_ladder;
        }
        float _1999;
        if (_1744 > 0.0)
        {
            _1999 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1999 = frontier_phi_23_19_ladder;
        }
        float _2256;
        if (_1747 > 0.0)
        {
            _2256 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2256 = frontier_phi_35_30_ladder;
        }
        float _2258 = isnan(_1999) ? _1775 : (isnan(_1775) ? _1999 : min(_1775, _1999));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1741) + _1730;
        float _2264 = (_2259 * _1744) + _1734;
        float _2265 = (_2259 * _1747) + _1738;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2268 = (-1.0) - _2266;
        float _2270 = _2266 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2265 > _2270) || ((_2265 < _2268) || ((_2264 > _2270) || ((_2264 < _2268) || ((_2263 < _2268) || (_2263 > _2270))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2265, cbModelParam._m0[9u].z, fma(_2264, cbModelParam._m0[9u].y, _2263 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2265, cbModelParam._m0[10u].z, fma(_2264, cbModelParam._m0[10u].y, _2263 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2265, cbModelParam._m0[11u].z, fma(_2264, cbModelParam._m0[11u].y, _2263 * cbModelParam._m0[11u].x))), _1682);
            frontier_phi_13_35_ladder = _2393.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2393.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2393.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_13_35_ladder_2;
        _1765 = frontier_phi_13_35_ladder_1;
        _1767 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_871, _872, _873), _1682);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1826 = fma(_935, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927)) + cbModelParam._m0[21u].w;
        float _1830 = fma(_935, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927)) + cbModelParam._m0[22u].w;
        float _1834 = fma(_935, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927)) + cbModelParam._m0[23u].w;
        float _1837 = fma(_873, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871));
        float _1840 = fma(_873, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871));
        float _1843 = fma(_873, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871));
        float _2004;
        if (_1837 > 0.0)
        {
            _2004 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2004 = frontier_phi_25_21_ladder;
        }
        float _2283;
        if (_1840 > 0.0)
        {
            _2283 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2283 = frontier_phi_37_32_ladder;
        }
        float _2496;
        if (_1843 > 0.0)
        {
            _2496 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2496 = frontier_phi_46_43_ladder;
        }
        float _2498 = isnan(_2283) ? _2004 : (isnan(_2004) ? _2283 : min(_2004, _2283));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _1837) + _1826;
        float _2504 = (_2499 * _1840) + _1830;
        float _2505 = (_2499 * _1843) + _1834;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2506;
        float _2509 = _2506 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2505 > _2509) || ((_2505 < _2507) || ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 < _2507) || (_2503 > _2509))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2505, cbModelParam._m0[17u].z, fma(_2504, cbModelParam._m0[17u].y, _2503 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2505, cbModelParam._m0[18u].z, fma(_2504, cbModelParam._m0[18u].y, _2503 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2505, cbModelParam._m0[19u].z, fma(_2504, cbModelParam._m0[19u].y, _2503 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_22_46_ladder = _2704.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2704.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2704.x * cbModelParam._m0[1u].z;
        }
        _1862 = frontier_phi_22_46_ladder_2;
        _1864 = frontier_phi_22_46_ladder_1;
        _1866 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_871, _872, _873), _1772);
        _1862 = _1846.x * cbModelParam._m0[1u].z;
        _1864 = _1846.y * cbModelParam._m0[1u].z;
        _1866 = _1846.z * cbModelParam._m0[1u].z;
    }
    float _1879 = (((_898 * _847) + _899) * _863) * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1881 = (((_898 * _849) + _899) * _863) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1883 = (((_898 * _850) + _899) * _863) * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1886 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1879 * cbSceneParam._m0[91u].x));
    vec4 _1900 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_785, _786));
    float _1902 = _1900.w;
    float _1914 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1902);
    float _1915 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1902);
    float _1916 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1902);
    uvec4 _1920 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1922 = _1920.x * 14u;
    uint _1923 = _1922 + 13u;
    float _1930 = _863 + (-1.0);
    float _1935 = (cbLight._m0[_1923].x * _1930) + 1.0;
    float _1936 = (cbLight._m0[_1923].y * _1930) + 1.0;
    float _1937 = (cbLight._m0[_1923].z * _1930) + 1.0;
    float _1938 = (cbLight._m0[_1923].w * _1930) + 1.0;
    uint _1939 = _1922 + 5u;
    float _1945 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1949 = _1922 + 4u;
    float _1958 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1962 = _1922 | 1u;
    float _1973 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_697, _698, _699));
    float _1976 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_697, _698, _699));
    float _4111 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _4122 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1981 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1990 = ((cbLight._m0[_1939].x * _1945) * _1983) + (((cbLight._m0[_1949].x * _1914) * _1958) * _1981);
    float _1991 = ((_1945 * cbLight._m0[_1939].y) * _1983) + (((cbLight._m0[_1949].y * _1915) * _1958) * _1981);
    float _1992 = ((_1945 * cbLight._m0[_1939].z) * _1983) + (((cbLight._m0[_1949].z * _1916) * _1958) * _1981);
    uvec4 _1996 = floatBitsToUint(cbLight._m0[_1922 + 12u]);
    bool _1998 = _1996.x == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1998)
    {
        _2009 = _1990;
        _2011 = _1991;
        _2013 = _1992;
    }
    else
    {
        uint _2017 = _1922 + 6u;
        float _2033 = (dot(vec3(cbLight._m0[_1922 + 2u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _4133 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2036 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2009 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1990;
        _2011 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1991;
        _2013 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1992;
    }
    bool _2016 = _1996.y == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2016)
    {
        _2054 = _2009;
        _2056 = _2011;
        _2058 = _2013;
    }
    else
    {
        uint _2227 = _1922 + 7u;
        float _2243 = (dot(vec3(cbLight._m0[_1922 + 3u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2244 = _2243 * _2243;
        float _4149 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2245 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2246 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2054 = (((cbLight._m0[_2227].x * 0.3183098733425140380859375) * _2245) * _2246) + _2009;
        _2056 = (((cbLight._m0[_2227].y * 0.3183098733425140380859375) * _2245) * _2246) + _2011;
        _2058 = (((cbLight._m0[_2227].z * 0.3183098733425140380859375) * _2245) * _2246) + _2013;
    }
    uint _2061 = _1922 + 8u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _700) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1922].x + _777;
    float _2077 = cbLight._m0[_1922].y + _778;
    float _2078 = cbLight._m0[_1922].z + _779;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1922].xyz));
    float _4165 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2090 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2091 = dot(vec3(_697, _698, _699), vec3(_2083, _2084, _2085));
    float _4187 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2083, _2084, _2085));
    float _4198 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2075 * _2075;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2111 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
    float _2112 = 0.959999978542327880859375 - _844;
    float _2114 = 0.959999978542327880859375 - _845;
    float _2115 = 0.959999978542327880859375 - _846;
    float _2122 = 1.0 - _2075;
    float _2133 = (0.5 / (((_2090 * ((_2089 * _2122) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2122) + _2075) * _2089))) * _2089;
    float _4209 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    uint _2149 = _1922 + 9u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _700) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_1962].x + _777;
    float _2163 = cbLight._m0[_1962].y + _778;
    float _2164 = cbLight._m0[_1962].z + _779;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1962].xyz));
    float _4220 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2176 = dot(vec3(_697, _698, _699), vec3(_2169, _2170, _2171));
    float _4231 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2180 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2169, _2170, _2171));
    float _4242 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = _2161 * _2161;
    float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
    float _2195 = exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0);
    float _2202 = 1.0 - _2161;
    float _2212 = (0.5 / (((_2090 * ((_2175 * _2202) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2202) + _2161) * _2175))) * _2175;
    float _4253 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
    float _2224 = (((((_2195 * _2112) + _847) * cbLight._m0[_2149].x) * _2214) * _1945) + ((((cbLight._m0[_2061].x * _1914) * ((_2111 * _2112) + _847)) * _2135) * _1958);
    float _2225 = (((((_2195 * _2114) + _849) * cbLight._m0[_2149].y) * _2214) * _1945) + ((((cbLight._m0[_2061].y * _1915) * ((_2111 * _2114) + _849)) * _2135) * _1958);
    float _2226 = (((((_2195 * _2115) + _850) * cbLight._m0[_2149].z) * _2214) * _1945) + ((((cbLight._m0[_2061].z * _1916) * ((_2111 * _2115) + _850)) * _2135) * _1958);
    float _2288;
    float _2290;
    float _2292;
    if (_1998)
    {
        _2288 = _2224;
        _2290 = _2225;
        _2292 = _2226;
    }
    else
    {
        uint _2294 = _1922 + 2u;
        uint _2298 = _1922 + 10u;
        float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _700) * 0.949999988079071044921875);
        float _2313 = _2312 * _2312;
        float _2314 = cbLight._m0[_2294].x + _777;
        float _2315 = cbLight._m0[_2294].y + _778;
        float _2316 = cbLight._m0[_2294].z + _779;
        float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
        float _2321 = _2320 * _2314;
        float _2322 = _2320 * _2315;
        float _2323 = _2320 * _2316;
        float _2324 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2294].xyz));
        float _4264 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2327 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2328 = dot(vec3(_697, _698, _699), vec3(_2321, _2322, _2323));
        float _4275 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2331 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2332 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2321, _2322, _2323));
        float _4286 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2336 = _2313 * _2313;
        float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
        float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
        float _2354 = 1.0 - _2313;
        float _2364 = (0.5 / (((_2090 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2354) + _2313) * _2327))) * _2327;
        float _4297 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2366 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
        float _2367 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2288 = (((((_2347 * _2112) + _847) * cbLight._m0[_2298].x) * _2366) * _2367) + _2224;
        _2290 = (((((_2347 * _2114) + _849) * cbLight._m0[_2298].y) * _2366) * _2367) + _2225;
        _2292 = (((((_2347 * _2115) + _850) * cbLight._m0[_2298].z) * _2366) * _2367) + _2226;
    }
    float _2402;
    float _2404;
    float _2406;
    if (_2016)
    {
        _2402 = _2288;
        _2404 = _2290;
        _2406 = _2292;
    }
    else
    {
        uint _2413 = _1922 + 3u;
        uint _2417 = _1922 + 11u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _700) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _777;
        float _2434 = cbLight._m0[_2413].y + _778;
        float _2435 = cbLight._m0[_2413].z + _779;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2413].xyz));
        float _4313 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2447 = dot(vec3(_697, _698, _699), vec3(_2440, _2441, _2442));
        float _4324 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4335 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2090 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2473) + _2432) * _2446))) * _2446;
        float _4346 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2402 = (((((_2466 * _2112) + _847) * cbLight._m0[_2417].x) * _2485) * _2486) + _2288;
        _2404 = (((((_2466 * _2114) + _849) * cbLight._m0[_2417].y) * _2485) * _2486) + _2290;
        _2406 = (((((_2466 * _2115) + _850) * cbLight._m0[_2417].z) * _2485) * _2486) + _2292;
    }
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_1920.y == 0u)
    {
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2562 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2561;
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2561;
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2561;
        uvec4 _2576 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2577 = _2576.x;
        uint _2588 = uint((float(_2576.y) * floor(float(uint(cbSceneParam._m0[85u].y * _786) / _2577))) + floor(float(uint(cbSceneParam._m0[85u].x * _785) / _2577)));
        float _2598 = (log2(_2564 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2599 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        uint _2602 = uint(isnan(14.0) ? _2599 : (isnan(_2599) ? 14.0 : min(_2599, 14.0)));
        uvec4 _2607 = texelFetch(g_lightClusterGridBuffer, int(((_2602 << 2u) + (_2588 << 6u)) >> 2u));
        uint _2608 = _2607.x;
        uint _2609 = _2576.z;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        if (((((1u << ((_2609 >> 4u) & 15u)) + 4294967295u) & _2608) == 0u) || ((_2609 & 240u) == 0u))
        {
            _2709 = 0.0;
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
        }
        else
        {
            float _2710;
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            float _2858 = 0.0;
            float _2859 = 0.0;
            uint _2860 = 0u;
            uint _2869;
            bool _2870;
            for (;;)
            {
                _2869 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2860 << 2u)) >> 2u)).x;
                _2870 = _2869 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2870)
                {
                    frontier_phi_61_pred = _2854;
                    frontier_phi_61_pred_1 = _2859;
                    frontier_phi_61_pred_2 = _2858;
                    frontier_phi_61_pred_3 = _2857;
                    frontier_phi_61_pred_4 = _2856;
                    frontier_phi_61_pred_5 = _2855;
                }
                else
                {
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    uint _2984;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2856;
                    _2981 = _2857;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2869;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    for (;;)
                    {
                        uint _2988 = uint(findLSB(_2984)) + (_2860 << 5u);
                        uint _2985 = (_2984 + 4294967295u) & _2984;
                        uint _2990 = _2988 * 48u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3010 = (_2988 * 48u) + 4u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3029 = (_2988 * 48u) + 8u;
                        vec3 _3040 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x));
                        float _3044 = _3004.x - _2562;
                        float _3045 = _3004.y - _2563;
                        float _3046 = _3004.z - _2564;
                        float _3047 = dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046));
                        float _3050 = inversesqrt(_3047);
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3054 = dot(vec3(_804, _807, _810), vec3(_3051, _3052, _3053));
                        float _3059 = 1.0 - (_3047 * _3004.w);
                        float _4372 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3061 = sqrt(_3047) * _3023.w;
                        float _3064 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _3054) + _3065;
                        float _3071 = _3061 * _3061;
                        float _3075 = ((isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * _3060) / ((_3071 * 0.699999988079071044921875) + 1.0);
                        float _3079 = (-0.0) - _2562;
                        float _3080 = (-0.0) - _2563;
                        float _3081 = (-0.0) - _2564;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3096 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                        float _3097 = 1.0 - _879;
                        float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                        float _3105 = _3104 * _3104;
                        float _3106 = _3105 * _3105;
                        float _3107 = _3086 + _3051;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3117 = dot(vec3(_804, _807, _810), vec3(_3086, _3087, _3088));
                        float _4388 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3121 = dot(vec3(_804, _807, _810), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                        float _4399 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                        float _3129 = _3064 * _3105;
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3054) + _3130;
                        float _4410 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3135 = 1.0 - _3105;
                        float _3145 = (0.5 / (((_3134 * ((_3120 * _3135) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3105) * _3120))) * _3134;
                        float _4421 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3156 = (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3128 * _3128) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125))) * _3060;
                        _2913 = (_3075 * _3023.x) + _2981;
                        _2914 = (_3075 * _3023.y) + _2982;
                        _2915 = (_3075 * _3023.z) + _2983;
                        _2910 = (_3156 * _3040.x) + _2978;
                        _2911 = (_3156 * _3040.y) + _2979;
                        _2912 = (_3156 * _3040.z) + _2980;
                        if (_2985 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2912;
                            _2981 = _2913;
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2985;
                        }
                    }
                    frontier_phi_61_pred = _2910;
                    frontier_phi_61_pred_1 = _2915;
                    frontier_phi_61_pred_2 = _2914;
                    frontier_phi_61_pred_3 = _2913;
                    frontier_phi_61_pred_4 = _2912;
                    frontier_phi_61_pred_5 = _2911;
                }
                _2710 = frontier_phi_61_pred;
                _2720 = frontier_phi_61_pred_1;
                _2718 = frontier_phi_61_pred_2;
                _2716 = frontier_phi_61_pred_3;
                _2714 = frontier_phi_61_pred_4;
                _2712 = frontier_phi_61_pred_5;
                uint _2861 = _2860 + 1u;
                if (_2861 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2854 = _2710;
                    _2855 = _2712;
                    _2856 = _2714;
                    _2857 = _2716;
                    _2858 = _2718;
                    _2859 = _2720;
                    _2860 = _2861;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2709 = _2710;
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
        }
        uvec4 _2723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2724 = _2723.z;
        uint _2726 = (_2724 >> 8u) & 15u;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        if (((4294967295u << _2726) & _2608) == 0u)
        {
            _2822 = _2709;
            _2824 = _2711;
            _2826 = _2713;
            _2828 = _2715;
            _2830 = _2717;
            _2832 = _2719;
        }
        else
        {
            float _2847 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
            float _2848 = _2847 * _2562;
            float _2849 = _2847 * _2563;
            float _2850 = _2847 * _2564;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2726 < ((_2724 >> 12u) & 15u))
            {
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2961 = _2709;
                float _2962 = _2711;
                float _2963 = _2713;
                float _2964 = _2715;
                float _2965 = _2717;
                float _2966 = _2719;
                uint _2967 = _2726;
                uint _2976;
                bool _2977;
                for (;;)
                {
                    _2976 = texelFetch(g_lightClassification, int((((_2602 << 5u) + (_2588 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                    _2977 = _2976 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2977)
                    {
                        frontier_phi_67_pred = _2964;
                        frontier_phi_67_pred_1 = _2965;
                        frontier_phi_67_pred_2 = _2966;
                        frontier_phi_67_pred_3 = _2963;
                        frontier_phi_67_pred_4 = _2962;
                        frontier_phi_67_pred_5 = _2961;
                    }
                    else
                    {
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3166;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3174 = _2961;
                        float _3175 = _2962;
                        float _3176 = _2963;
                        float _3177 = _2964;
                        float _3178 = _2965;
                        float _3179 = _2966;
                        uint _3180 = _2976;
                        uint _3181;
                        vec4 _3206;
                        float _3207;
                        vec4 _3222;
                        vec3 _3234;
                        vec4 _3249;
                        vec4 _3265;
                        float _3311;
                        bool _3312;
                        for (;;)
                        {
                            uint _3191 = ((_2967 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3180));
                            _3181 = (_3180 + 4294967295u) & _3180;
                            uint _3193 = _3191 * 40u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3207 = _3206.w;
                            uint _3209 = (_3191 * 40u) + 4u;
                            _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3224 = (_3191 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3236 = (_3191 * 40u) + 16u;
                            _3249 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 3u)).x));
                            uint _3252 = (_3191 * 40u) + 20u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3267 = (_3191 * 40u) + 24u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            uint _3286 = (_3191 * 40u) + 28u;
                            vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3311 = fma(_2564, _3299.z, fma(_2563, _3299.y, _3299.x * _2562)) + _3299.w;
                            _3312 = !((fma(_2564, _3280.z, fma(_2563, _3280.y, _3280.x * _2562)) + _3280.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3312)
                            {
                                float _3339 = _3206.x - _2562;
                                float _3340 = _3206.y - _2563;
                                float _3341 = _3206.z - _2564;
                                float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                                float _3345 = inversesqrt(_3342);
                                float _3346 = _3345 * _3339;
                                float _3347 = _3345 * _3340;
                                float _3348 = _3345 * _3341;
                                float _3352 = 1.0 - (_3342 / (_3207 * _3207));
                                float _4432 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3357 = sqrt(_3342) * _3222.w;
                                float _3359 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                                float _3360 = _3359 * _3359;
                                float _3363 = ((1.0 - _3360) * dot(vec3(_3346, _3347, _3348), vec3(_804, _807, _810))) + _3360;
                                float _3366 = _3357 * _3357;
                                float _3370 = (fma(_2564, _3249.z, fma(_2563, _3249.y, _3249.x * _2562)) + _3249.w) / _3311;
                                float _3371 = (fma(_2564, _3265.z, fma(_2563, _3265.y, _3265.x * _2562)) + _3265.w) / _3311;
                                float _3375 = 1.0 - dot(vec2(_3370, _3371), vec2(_3370, _3371));
                                float _4448 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3377 = _3376 * (((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3353) / ((_3366 * 0.699999988079071044921875) + 1.0));
                                float _3389 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                                float _3390 = 1.0 - _879;
                                float _3397 = sqrt(1.0 - ((1.0 - (_3390 * _3390)) * (1.0 - (_3389 * _3389))));
                                float _3398 = _3397 * _3397;
                                float _3399 = _3398 * _3398;
                                float _3400 = _3346 - _2848;
                                float _3401 = _3347 - _2849;
                                float _3402 = _3348 - _2850;
                                float _3406 = inversesqrt(dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402)));
                                float _3410 = dot(vec3(_804, _807, _810), vec3((-0.0) - _2848, (-0.0) - _2849, (-0.0) - _2850));
                                float _4459 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3414 = dot(vec3(_804, _807, _810), vec3(_3406 * _3400, _3406 * _3401, _3406 * _3402));
                                float _4470 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3421 = ((_3417 * _3417) * (_3399 + (-1.0))) + 1.0;
                                float _3422 = _3359 * _3398;
                                float _3423 = _3422 * _3422;
                                float _3429 = ((1.0 - _3423) * dot(vec3(_804, _807, _810), vec3(_3346, _3347, _3348))) + _3423;
                                float _4481 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3431 = 1.0 - _3398;
                                float _3441 = (0.5 / (((_3430 * ((_3413 * _3431) + _3398)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3398) * _3413))) * _3430;
                                float _4492 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3451 = (_3376 * _3353) * (((_3399 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3421 * _3421) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3451 * _3234.x;
                                frontier_phi_73_pred_1 = _3451 * _3234.y;
                                frontier_phi_73_pred_2 = _3377 * _3222.z;
                                frontier_phi_73_pred_3 = _3377 * _3222.y;
                                frontier_phi_73_pred_4 = _3377 * _3222.x;
                                frontier_phi_73_pred_5 = _3451 * _3234.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3455 = frontier_phi_73_pred;
                            _3456 = frontier_phi_73_pred_1;
                            _3460 = frontier_phi_73_pred_2;
                            _3459 = frontier_phi_73_pred_3;
                            _3458 = frontier_phi_73_pred_4;
                            _3457 = frontier_phi_73_pred_5;
                            _3164 = _3458 + _3177;
                            _3165 = _3459 + _3178;
                            _3166 = _3460 + _3179;
                            _3161 = _3455 + _3174;
                            _3162 = _3456 + _3175;
                            _3163 = _3457 + _3176;
                            if (_3181 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3181;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3164;
                        frontier_phi_67_pred_1 = _3165;
                        frontier_phi_67_pred_2 = _3166;
                        frontier_phi_67_pred_3 = _3163;
                        frontier_phi_67_pred_4 = _3162;
                        frontier_phi_67_pred_5 = _3161;
                    }
                    _2829 = frontier_phi_67_pred;
                    _2831 = frontier_phi_67_pred_1;
                    _2833 = frontier_phi_67_pred_2;
                    _2827 = frontier_phi_67_pred_3;
                    _2825 = frontier_phi_67_pred_4;
                    _2823 = frontier_phi_67_pred_5;
                    uint _2968 = _2967 + 1u;
                    if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2961 = _2823;
                        _2962 = _2825;
                        _2963 = _2827;
                        _2964 = _2829;
                        _2965 = _2831;
                        _2966 = _2833;
                        _2967 = _2968;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2831;
                frontier_phi_55_56_ladder_1 = _2833;
                frontier_phi_55_56_ladder_2 = _2829;
                frontier_phi_55_56_ladder_3 = _2827;
                frontier_phi_55_56_ladder_4 = _2825;
                frontier_phi_55_56_ladder_5 = _2823;
            }
            else
            {
                frontier_phi_55_56_ladder = _2717;
                frontier_phi_55_56_ladder_1 = _2719;
                frontier_phi_55_56_ladder_2 = _2715;
                frontier_phi_55_56_ladder_3 = _2713;
                frontier_phi_55_56_ladder_4 = _2711;
                frontier_phi_55_56_ladder_5 = _2709;
            }
            _2822 = frontier_phi_55_56_ladder_5;
            _2824 = frontier_phi_55_56_ladder_4;
            _2826 = frontier_phi_55_56_ladder_3;
            _2828 = frontier_phi_55_56_ladder_2;
            _2830 = frontier_phi_55_56_ladder;
            _2832 = frontier_phi_55_56_ladder_1;
        }
        float _2837 = isnan(1.0) ? _863 : (isnan(_863) ? 1.0 : min(_863, 1.0));
        _2621 = (_2837 * _2828) + _2054;
        _2623 = (_2837 * _2830) + _2056;
        _2625 = (_2837 * _2832) + _2058;
        _2627 = ((_2822 * _847) * _2837) + _2402;
        _2629 = ((_2824 * _849) * _2837) + _2404;
        _2631 = ((_2826 * _850) * _2837) + _2406;
    }
    else
    {
        _2621 = _2054;
        _2623 = _2056;
        _2625 = _2058;
        _2627 = _2402;
        _2629 = _2404;
        _2631 = _2406;
    }
    float _4508 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4519 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4530 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    uint _2651 = _238 + 6u;
    float _2659 = _785 / cbSceneParam._m0[86u].x;
    float _2660 = _786 / cbSceneParam._m0[86u].y;
    vec4 _2674 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, (log2((isnan(cbSceneParam._m0[77u].w) ? _719 : (isnan(_719) ? cbSceneParam._m0[77u].w : min(_719, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2676 = _2674.x;
    float _2677 = _2674.y;
    float _2678 = _2674.z;
    float _2679 = _2674.w;
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    if (_719 > cbSceneParam._m0[78u].w)
    {
        float _2734 = isnan(_719) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _719 : min(cbSceneParam._m0[80u].w, _719));
        float _2735 = _2734 / _719;
        float _2746 = _2735 * _770;
        float _2747 = _771 * _2735;
        float _2748 = (-0.0) - _2747;
        float _2750 = _2735 * _772;
        float _2752 = (cbSceneParam._m0[77u].w * _2748) / _2734;
        float _2753 = _2752 + cbSceneParam._m0[79u].w;
        float _2754 = cbSceneParam._m0[79u].w - _2747;
        float _2760 = sqrt(((_2746 * _2746) + (_2747 * _2747)) + (_2750 * _2750));
        float _2763 = (1.0 - (cbSceneParam._m0[77u].w / _2734)) * _2760;
        float _2768 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2770 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2923;
        if (abs((_2748 - _2752) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2923 = ((((_2753 > 0.0) ? exp2(_2768 * _2753) : (2.0 - exp2(_2770 * _2753))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2763;
        }
        else
        {
            float _2883 = 1.0 / cbSceneParam._m0[80u].x;
            float _2884 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : max(_2753, _2754));
            float _2885 = isnan(_2754) ? _2753 : (isnan(_2753) ? _2754 : min(_2753, _2754));
            float _2894 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : min(_2884, 0.0));
            float _2895 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : min(_2885, 0.0));
            _2923 = ((abs(_2760 / _2748) * cbSceneParam._m0[80u].y) * ((((_2894 - _2895) * 2.0) - ((exp2(_2768 * (isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0)))) - exp2(_2768 * (isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))))) * _2883)) - ((exp2(_2770 * _2894) - exp2(_2770 * _2895)) * _2883))) + (_2763 * cbSceneParam._m0[80u].z);
        }
        vec4 _2925 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2659, _2660, 1.0), 0.0);
        float _2934 = exp2((_2923 * (-1.44269502162933349609375)) * (1.0 - _2925.w));
        float _2935 = log2(_2934);
        float _2951 = log2(_2679);
        _2772 = (exp2(_2951 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].x)) * _2925.x) / cbSceneParam._m0[78u].x)) + _2676;
        _2774 = (exp2(_2951 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].y)) * _2925.y) / cbSceneParam._m0[78u].y)) + _2677;
        _2776 = (exp2(_2951 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].z)) * _2925.z) / cbSceneParam._m0[78u].z)) + _2678;
        _2778 = _2934 * _2679;
    }
    else
    {
        _2772 = _2676;
        _2774 = _2677;
        _2776 = _2678;
        _2778 = _2679;
    }
    float _2790 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2791 = _2790 == 3.0;
    float _2792 = log2(_2778);
    float _2799 = exp2(_2792 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2621 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _863))) + ((_2627 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1671)) * cbPerFrame._m0[3u].x));
    float _2800 = exp2(_2792 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2623 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _863))) + ((_2629 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1671)) * cbPerFrame._m0[3u].x));
    float _2801 = exp2(_2792 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2625 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _863))) + ((_2631 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1671)) * cbPerFrame._m0[3u].x));
    float _2810 = (_2790 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2810 * (_2791 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.y = _2810 * (_2791 ? _2800 : (_2800 + (cbSceneParam._m0[72u].w * _2774)));
    SV_Target.z = _2810 * (_2791 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.w = cbInstanceData._m0[_2651].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2651].w;
}


