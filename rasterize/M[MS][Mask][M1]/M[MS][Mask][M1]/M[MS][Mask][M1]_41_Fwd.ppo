#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1225;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[23u].w) + _371) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3551 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _396 = (_389 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _397 = (_389 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _398 = (_389 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _467 = ((_437.z - _458) * _389) + _458;
    float _470 = ((((_437.x - _456) * _389) + _456) * 2.0) + (-1.0);
    float _472 = ((((_437.y - _457) * _389) + _457) * 2.0) + (-1.0);
    float _473 = dot(vec2(_470, _472), vec2(_470, _472));
    float _3562 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _506 = (((_494.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _470;
    float _507 = (((_494.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _472;
    float _510 = fma(_478, _224, fma(_507, _231, _506 * _217));
    float _513 = fma(_478, _225, fma(_507, _232, _506 * _218));
    float _516 = fma(_478, _226, fma(_507, _233, _506 * _219));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _549 = _547.x;
    float _550 = 1.0 - _549;
    float _559 = (cbMtdParam._m0[19u].x + dot(vec4(_520 * _510, _520 * _513, _520 * _516, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_549 - _550) * cbMtdParam._m0[24u].z) + _550) * cbMtdParam._m0[21u].z);
    float _3573 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _567 = (_560 * ((_417.x * cbMtdParam._m0[18u].x) - _396)) + _396;
    float _568 = (_560 * ((_417.y * cbMtdParam._m0[18u].y) - _397)) + _397;
    float _569 = (_560 * ((_417.z * cbMtdParam._m0[18u].z) - _398)) + _398;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _597 = _595.x;
    float _615 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _597) * _389) + _597;
    float _619 = ((_581.x - _615) * cbMtdParam._m0[19u].z) + _615;
    float _621 = _619 - (_619 * _560);
    float _625 = (cbMtdParam._m0[19u].w * (_494.z - _467)) + _467;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3584 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _655 = ((_638.z - _625) * _560) + _625;
    float _665 = ((sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) - _478) * _560) + _478;
    float _668 = (((_645 - _506) * _560) + _506) + (cbMtdParam._m0[21u].x * _506);
    float _669 = (((_646 - _507) * _560) + _507) + (cbMtdParam._m0[21u].x * _507);
    float _671 = cbMtdParam._m0[22u].x + _494.w;
    float _674 = fma(_665, _224, fma(_669, _231, _668 * _217));
    float _677 = fma(_665, _225, fma(_669, _232, _668 * _218));
    float _680 = fma(_665, _226, fma(_669, _233, _668 * _219));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    float _685 = _684 * _674;
    float _686 = _684 * _677;
    float _687 = _684 * _680;
    float _3595 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _688 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3617 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3628 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3639 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3650 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _693 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _707 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_687, cbSceneParam._m0[5u].z, fma(_686, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _685));
    float _795 = fma(_687, cbSceneParam._m0[6u].z, fma(_686, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _685));
    float _798 = fma(_687, cbSceneParam._m0[7u].z, fma(_686, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _685));
    uint _812 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_812].z;
    float _3661 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _824 = 1.0 - _693;
    float _825 = _821 * _824;
    float _826 = _822 * _824;
    float _827 = _823 * _824;
    float _832 = (_821 + (-0.039999999105930328369140625)) * _693;
    float _833 = (_822 + (-0.039999999105930328369140625)) * _693;
    float _834 = (_823 + (-0.039999999105930328369140625)) * _693;
    float _835 = _832 + 0.039999999105930328369140625;
    float _837 = _833 + 0.039999999105930328369140625;
    float _838 = _834 + 0.039999999105930328369140625;
    vec4 _847 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _851 = ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * TEXCOORD_5.w) * _847.x;
    float _852 = dot(vec3(_685, _686, _687), vec3(_765, _766, _767));
    float _855 = _852 * 2.0;
    float _859 = (_855 * _685) - _765;
    float _860 = (_855 * _686) - _766;
    float _861 = (_855 * _687) - _767;
    float _865 = abs(dot(vec3(_765, _766, _767), vec3(_685, _686, _687)));
    float _3694 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _867 = sqrt(_688);
    float _880 = exp2((_867 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_867 * 3.0));
    float _886 = (1.0 - _880) * ((_867 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _887 = _880 * _867;
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1224;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _949 = fma(_923, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _915));
        float _953 = fma(_923, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _915));
        float _957 = fma(_923, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _915));
        float _982 = _915 + _685;
        float _983 = _919 + _686;
        float _984 = _923 + _687;
        float _994 = fma(_984, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) - _949;
        float _995 = fma(_984, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) - _953;
        float _996 = fma(_984, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) - _957;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_949 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_953 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[34u].z) + ((((((_957 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1052 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1018.x + (-0.5));
        float _1054 = _1052 * (_1018.y + (-0.5));
        float _1055 = _1052 * (_1018.z + (-0.5));
        float _1062 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1025.x + (-0.5));
        float _1064 = _1062 * (_1025.y + (-0.5));
        float _1065 = _1062 * (_1025.z + (-0.5));
        float _1072 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1032.x + (-0.5));
        float _1074 = _1072 * (_1032.y + (-0.5));
        float _1075 = _1072 * (_1032.z + (-0.5));
        float _1082 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1039.x + (-0.5));
        float _1084 = _1082 * (_1039.y + (-0.5));
        float _1085 = _1082 * (_1039.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1106 = (dot(vec3(_685, _686, _687), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1116 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3742 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1118 + 1.0))) + _1123) * _1086;
        float _1133 = _1054 * 0.5;
        float _1134 = _1064 * 0.5;
        float _1135 = _1074 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_685, _686, _687), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3775 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1160 + 1.0))) + _1165) * _1087;
        float _1175 = _1055 * 0.5;
        float _1176 = _1065 * 0.5;
        float _1177 = _1075 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_685, _686, _687), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3808 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1202 + 1.0))) + _1207) * _1088;
        _1224 = _1055;
        _1226 = _1054;
        _1227 = _1053;
        _1228 = _1065;
        _1229 = _1064;
        _1230 = _1063;
        _1231 = _1075;
        _1232 = _1074;
        _1233 = _1073;
        _1234 = _1088;
        _1235 = _1087;
        _1236 = _1086;
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _1225;
        _1226 = _1225;
        _1227 = _1225;
        _1228 = _1225;
        _1229 = _1225;
        _1230 = _1225;
        _1231 = _1225;
        _1232 = _1225;
        _1233 = _1225;
        _1234 = _1225;
        _1235 = _1225;
        _1236 = _1225;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1264 = fma(_923, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915));
        float _1268 = fma(_923, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915));
        float _1272 = fma(_923, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915));
        float _1295 = _915 + _685;
        float _1296 = _919 + _686;
        float _1297 = _923 + _687;
        float _1307 = fma(_1297, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295)) - _1264;
        float _1308 = fma(_1297, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295)) - _1268;
        float _1309 = fma(_1297, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295)) - _1272;
        float _1313 = inversesqrt(dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309)));
        float _1326 = ((_1313 * _1307) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1264 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1313 * _1308) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1268 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1313 * _1309) / cbModelParam._m0[35u].z) + ((((((_1272 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1326, _1327, _1328), 0.0);
        float _1363 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1330.x + (-0.5));
        float _1365 = _1363 * (_1330.y + (-0.5));
        float _1366 = _1363 * (_1330.z + (-0.5));
        float _1373 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1337.x + (-0.5));
        float _1375 = _1373 * (_1337.y + (-0.5));
        float _1376 = _1373 * (_1337.z + (-0.5));
        float _1383 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1344.x + (-0.5));
        float _1385 = _1383 * (_1344.y + (-0.5));
        float _1386 = _1383 * (_1344.z + (-0.5));
        float _1393 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1351.x + (-0.5));
        float _1395 = _1393 * (_1351.y + (-0.5));
        float _1396 = _1393 * (_1351.z + (-0.5));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = _1364 * 0.5;
        float _1401 = _1374 * 0.5;
        float _1402 = _1384 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_685, _686, _687), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3871 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1427 + 1.0))) + _1432) * _1397;
        float _1442 = _1365 * 0.5;
        float _1443 = _1375 * 0.5;
        float _1444 = _1385 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_685, _686, _687), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3904 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1469 + 1.0))) + _1474) * _1398;
        float _1484 = _1366 * 0.5;
        float _1485 = _1376 * 0.5;
        float _1486 = _1386 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_685, _686, _687), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _3937 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1511 + 1.0))) + _1516) * _1399;
        _1533 = _1366;
        _1534 = _1365;
        _1535 = _1364;
        _1536 = _1376;
        _1537 = _1375;
        _1538 = _1374;
        _1539 = _1386;
        _1540 = _1385;
        _1541 = _1384;
        _1542 = _1399;
        _1543 = _1398;
        _1544 = _1397;
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1225;
        _1534 = _1225;
        _1535 = _1225;
        _1536 = _1225;
        _1537 = _1225;
        _1538 = _1225;
        _1539 = _1225;
        _1540 = _1225;
        _1541 = _1225;
        _1542 = _1225;
        _1543 = _1225;
        _1544 = _1225;
        _1545 = 0.0;
        _1546 = 0.0;
        _1547 = 0.0;
    }
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1239)) + _1239;
    float _1580 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1583 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1586 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1557));
    float _1601 = _859 * 0.5;
    float _1602 = _860 * 0.5;
    float _1603 = _861 * 0.5;
    float _1604 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1607 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1610 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1644;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1617 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1224, _1228, _1231, _1234));
        float _1621 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1625 = dot(vec4(_1601, _1602, _1603, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1632 = dot(vec4(cbModelParam._m0[39u]), vec4(_1601, _1602, _1603, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1632) ? 0.0 : (isnan(0.0) ? _1632 : max(0.0, _1632))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1655;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1646 = dot(vec4(cbModelParam._m0[40u]), vec4(_1601, _1602, _1603, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1659 = (_1655 * cbModelParam._m0[1u].x) + (_1644 * (1.0 - cbModelParam._m0[1u].x));
    float _1669 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _688);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1669 : min(cbModelParam._m0[25u].z, _1669));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_923, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_923, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_923, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_861, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859));
        float _1731 = fma(_861, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859));
        float _1734 = fma(_861, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1762 = frontier_phi_14_12_ladder;
        }
        float _1964;
        if (_1731 > 0.0)
        {
            _1964 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1964 = frontier_phi_23_19_ladder;
        }
        float _2218;
        if (_1734 > 0.0)
        {
            _2218 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2218 = frontier_phi_35_30_ladder;
        }
        float _2220 = isnan(_1964) ? _1762 : (isnan(_1762) ? _1964 : min(_1762, _1964));
        float _2221 = isnan(_2218) ? _2220 : (isnan(_2220) ? _2218 : min(_2220, _2218));
        float _2225 = (_2221 * _1728) + _1717;
        float _2226 = (_2221 * _1731) + _1721;
        float _2227 = (_2221 * _1734) + _1725;
        float _2228 = _2221 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2228;
        float _2232 = _2228 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 > _2232) || ((_2226 < _2230) || ((_2225 < _2230) || (_2225 > _2232))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2227, cbModelParam._m0[9u].z, fma(_2226, cbModelParam._m0[9u].y, _2225 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2227, cbModelParam._m0[10u].z, fma(_2226, cbModelParam._m0[10u].y, _2225 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2227, cbModelParam._m0[11u].z, fma(_2226, cbModelParam._m0[11u].y, _2225 * cbModelParam._m0[11u].x))), _1670);
            frontier_phi_13_35_ladder = _2355.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2355.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2355.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_13_35_ladder_2;
        _1752 = frontier_phi_13_35_ladder_1;
        _1754 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_859, _860, _861), _1670);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _688);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1848;
    float _1850;
    float _1852;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1812 = fma(_923, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915)) + cbModelParam._m0[21u].w;
        float _1816 = fma(_923, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915)) + cbModelParam._m0[22u].w;
        float _1820 = fma(_923, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915)) + cbModelParam._m0[23u].w;
        float _1823 = fma(_861, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859));
        float _1826 = fma(_861, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859));
        float _1829 = fma(_861, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859));
        float _1969;
        if (_1823 > 0.0)
        {
            _1969 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1969 = frontier_phi_25_21_ladder;
        }
        float _2245;
        if (_1826 > 0.0)
        {
            _2245 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2245 = frontier_phi_37_32_ladder;
        }
        float _2458;
        if (_1829 > 0.0)
        {
            _2458 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2458 = frontier_phi_46_43_ladder;
        }
        float _2460 = isnan(_2245) ? _1969 : (isnan(_1969) ? _2245 : min(_1969, _2245));
        float _2461 = isnan(_2458) ? _2460 : (isnan(_2460) ? _2458 : min(_2460, _2458));
        float _2465 = (_2461 * _1823) + _1812;
        float _2466 = (_2461 * _1826) + _1816;
        float _2467 = (_2461 * _1829) + _1820;
        float _2468 = _2461 * 9.9999997473787516355514526367188e-05;
        float _2469 = (-1.0) - _2468;
        float _2471 = _2468 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2467 > _2471) || ((_2467 < _2469) || ((_2466 > _2471) || ((_2466 < _2469) || ((_2465 < _2469) || (_2465 > _2471))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2467, cbModelParam._m0[17u].z, fma(_2466, cbModelParam._m0[17u].y, _2465 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2467, cbModelParam._m0[18u].z, fma(_2466, cbModelParam._m0[18u].y, _2465 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2467, cbModelParam._m0[19u].z, fma(_2466, cbModelParam._m0[19u].y, _2465 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_22_46_ladder = _2666.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2666.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2666.x * cbModelParam._m0[1u].z;
        }
        _1848 = frontier_phi_22_46_ladder_2;
        _1850 = frontier_phi_22_46_ladder_1;
        _1852 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_859, _860, _861), _1759);
        _1848 = _1832.x * cbModelParam._m0[1u].z;
        _1850 = _1832.y * cbModelParam._m0[1u].z;
        _1852 = _1832.z * cbModelParam._m0[1u].z;
    }
    float _1865 = (((_886 * _835) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1848 - _1750)) + _1750);
    float _1867 = (((_886 * _837) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1850 - _1752)) + _1752);
    float _1869 = (((_886 * _838) + _887) * _851) * ((cbModelParam._m0[1u].w * (_1852 - _1754)) + _1754);
    float _1872 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1875 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1878 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, _1865 * cbSceneParam._m0[91u].x));
    uvec4 _1888 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1890 = _1888.x * 14u;
    uint _1891 = _1890 + 13u;
    float _1898 = _851 + (-1.0);
    float _1903 = (cbLight._m0[_1891].x * _1898) + 1.0;
    float _1904 = (cbLight._m0[_1891].y * _1898) + 1.0;
    float _1905 = (cbLight._m0[_1891].z * _1898) + 1.0;
    float _1906 = (cbLight._m0[_1891].w * _1898) + 1.0;
    uint _1907 = _1890 + 5u;
    float _1913 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
    uint _1917 = _1890 + 4u;
    float _1923 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1927 = _1890 | 1u;
    float _1938 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_685, _686, _687));
    float _1941 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_685, _686, _687));
    float _4073 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _4084 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1946 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1948 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1955 = ((cbLight._m0[_1907].x * _1913) * _1948) + ((cbLight._m0[_1917].x * _1923) * _1946);
    float _1956 = ((_1913 * cbLight._m0[_1907].y) * _1948) + ((_1923 * cbLight._m0[_1917].y) * _1946);
    float _1957 = ((_1913 * cbLight._m0[_1907].z) * _1948) + ((_1923 * cbLight._m0[_1917].z) * _1946);
    uvec4 _1961 = floatBitsToUint(cbLight._m0[_1890 + 12u]);
    bool _1963 = _1961.x == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1963)
    {
        _1974 = _1955;
        _1976 = _1956;
        _1978 = _1957;
    }
    else
    {
        uint _1982 = _1890 + 6u;
        float _1998 = (dot(vec3(cbLight._m0[_1890 + 2u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _4095 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2001 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _1974 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1955;
        _1976 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1956;
        _1978 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1957;
    }
    bool _1981 = _1961.y == 0u;
    float _2019;
    float _2021;
    float _2023;
    if (_1981)
    {
        _2019 = _1974;
        _2021 = _1976;
        _2023 = _1978;
    }
    else
    {
        uint _2189 = _1890 + 7u;
        float _2205 = (dot(vec3(cbLight._m0[_1890 + 3u].xyz), vec3(_685, _686, _687)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4111 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2208 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2019 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _1974;
        _2021 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _1976;
        _2023 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _1978;
    }
    uint _2026 = _1890 + 8u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1890].w)) * _688) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1890].x + _765;
    float _2042 = cbLight._m0[_1890].y + _766;
    float _2043 = cbLight._m0[_1890].z + _767;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1890].xyz));
    float _4127 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _2055 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2056 = dot(vec3(_685, _686, _687), vec3(_2048, _2049, _2050));
    float _4149 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1890].xyz), vec3(_2048, _2049, _2050));
    float _4160 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2064 = _2040 * _2040;
    float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
    float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0);
    float _2077 = 0.959999978542327880859375 - _832;
    float _2079 = 0.959999978542327880859375 - _833;
    float _2080 = 0.959999978542327880859375 - _834;
    float _2087 = 1.0 - _2040;
    float _2098 = (0.5 / (((_2055 * ((_2054 * _2087) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2087) + _2040) * _2054))) * _2054;
    float _4171 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2100 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
    uint _2111 = _1890 + 9u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1927].w)) * _688) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1927].x + _765;
    float _2125 = cbLight._m0[_1927].y + _766;
    float _2126 = cbLight._m0[_1927].z + _767;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_1927].xyz));
    float _4182 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2138 = dot(vec3(_685, _686, _687), vec3(_2131, _2132, _2133));
    float _4193 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2142 = dot(vec3(cbLight._m0[_1927].xyz), vec3(_2131, _2132, _2133));
    float _4204 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2146 = _2123 * _2123;
    float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
    float _2157 = exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0);
    float _2164 = 1.0 - _2123;
    float _2174 = (0.5 / (((_2055 * ((_2137 * _2164) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2164) + _2123) * _2137))) * _2137;
    float _4215 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2176 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
    float _2186 = (((((_2157 * _2077) + _835) * cbLight._m0[_2111].x) * _2176) * _1913) + (((((_2076 * _2077) + _835) * cbLight._m0[_2026].x) * _2100) * _1923);
    float _2187 = (((((_2157 * _2079) + _837) * cbLight._m0[_2111].y) * _2176) * _1913) + (((((_2076 * _2079) + _837) * cbLight._m0[_2026].y) * _2100) * _1923);
    float _2188 = (((((_2157 * _2080) + _838) * cbLight._m0[_2111].z) * _2176) * _1913) + (((((_2076 * _2080) + _838) * cbLight._m0[_2026].z) * _2100) * _1923);
    float _2250;
    float _2252;
    float _2254;
    if (_1963)
    {
        _2250 = _2186;
        _2252 = _2187;
        _2254 = _2188;
    }
    else
    {
        uint _2256 = _1890 + 2u;
        uint _2260 = _1890 + 10u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _688) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _765;
        float _2277 = cbLight._m0[_2256].y + _766;
        float _2278 = cbLight._m0[_2256].z + _767;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2256].xyz));
        float _4226 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2290 = dot(vec3(_685, _686, _687), vec3(_2283, _2284, _2285));
        float _4237 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4248 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0);
        float _2316 = 1.0 - _2275;
        float _2326 = (0.5 / (((_2055 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2316) + _2275) * _2289))) * _2289;
        float _4259 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2250 = (((((_2309 * _2077) + _835) * cbLight._m0[_2260].x) * _2328) * _2329) + _2186;
        _2252 = (((((_2309 * _2079) + _837) * cbLight._m0[_2260].y) * _2328) * _2329) + _2187;
        _2254 = (((((_2309 * _2080) + _838) * cbLight._m0[_2260].z) * _2328) * _2329) + _2188;
    }
    float _2364;
    float _2366;
    float _2368;
    if (_1981)
    {
        _2364 = _2250;
        _2366 = _2252;
        _2368 = _2254;
    }
    else
    {
        uint _2375 = _1890 + 3u;
        uint _2379 = _1890 + 11u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _688) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _765;
        float _2396 = cbLight._m0[_2375].y + _766;
        float _2397 = cbLight._m0[_2375].z + _767;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2375].xyz));
        float _4275 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2409 = dot(vec3(_685, _686, _687), vec3(_2402, _2403, _2404));
        float _4286 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4297 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0);
        float _2435 = 1.0 - _2394;
        float _2445 = (0.5 / (((_2055 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2055 * _2435) + _2394) * _2408))) * _2408;
        float _4308 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _1906 : (isnan(_1906) ? 1.0 : min(_1906, 1.0));
        _2364 = (((((_2428 * _2077) + _835) * cbLight._m0[_2379].x) * _2447) * _2448) + _2250;
        _2366 = (((((_2428 * _2079) + _837) * cbLight._m0[_2379].y) * _2447) * _2448) + _2252;
        _2368 = (((((_2428 * _2080) + _838) * cbLight._m0[_2379].z) * _2447) * _2448) + _2254;
    }
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    if (_1888.y == 0u)
    {
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2523;
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2523;
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2523;
        uvec4 _2538 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2539 = _2538.x;
        uint _2550 = uint((float(_2538.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2539))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2539)));
        float _2560 = (log2(_2526 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2561 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        uint _2564 = uint(isnan(14.0) ? _2561 : (isnan(_2561) ? 14.0 : min(_2561, 14.0)));
        uvec4 _2569 = texelFetch(g_lightClusterGridBuffer, int(((_2564 << 2u) + (_2550 << 6u)) >> 2u));
        uint _2570 = _2569.x;
        uint _2571 = _2538.z;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((((1u << ((_2571 >> 4u) & 15u)) + 4294967295u) & _2570) == 0u) || ((_2571 & 240u) == 0u))
        {
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
        }
        else
        {
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            uint _2822 = 0u;
            uint _2831;
            bool _2832;
            for (;;)
            {
                _2831 = texelFetch(g_lightClassification, int((((_2564 << 5u) + (_2550 << 9u)) + (_2822 << 2u)) >> 2u)).x;
                _2832 = _2831 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2832)
                {
                    frontier_phi_61_pred = _2816;
                    frontier_phi_61_pred_1 = _2821;
                    frontier_phi_61_pred_2 = _2820;
                    frontier_phi_61_pred_3 = _2819;
                    frontier_phi_61_pred_4 = _2818;
                    frontier_phi_61_pred_5 = _2817;
                }
                else
                {
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    uint _2946;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2831;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    for (;;)
                    {
                        uint _2950 = uint(findLSB(_2946)) + (_2822 << 5u);
                        uint _2947 = (_2946 + 4294967295u) & _2946;
                        uint _2952 = _2950 * 48u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2972 = (_2950 * 48u) + 4u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 3u)).x));
                        uint _2991 = (_2950 * 48u) + 8u;
                        vec3 _3002 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x));
                        float _3006 = _2966.x - _2524;
                        float _3007 = _2966.y - _2525;
                        float _3008 = _2966.z - _2526;
                        float _3009 = dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008));
                        float _3012 = inversesqrt(_3009);
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3016 = dot(vec3(_792, _795, _798), vec3(_3013, _3014, _3015));
                        float _3021 = 1.0 - (_3009 * _2966.w);
                        float _4334 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3023 = sqrt(_3009) * _2985.w;
                        float _3026 = 1.39999997615814208984375 / (_3023 + 1.39999997615814208984375);
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _3016) + _3027;
                        float _3033 = _3023 * _3023;
                        float _3037 = ((isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))) * _3022) / ((_3033 * 0.699999988079071044921875) + 1.0);
                        float _3041 = (-0.0) - _2524;
                        float _3042 = (-0.0) - _2525;
                        float _3043 = (-0.0) - _2526;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3058 = exp2(log2(1.0 / ((_3033 * 3.5) + 5.0)) * 0.25);
                        float _3059 = 1.0 - _867;
                        float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                        float _3067 = _3066 * _3066;
                        float _3068 = _3067 * _3067;
                        float _3069 = _3048 + _3013;
                        float _3070 = _3049 + _3014;
                        float _3071 = _3050 + _3015;
                        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                        float _3079 = dot(vec3(_792, _795, _798), vec3(_3048, _3049, _3050));
                        float _4350 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3083 = dot(vec3(_792, _795, _798), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                        float _4361 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                        float _3091 = _3026 * _3067;
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3016) + _3092;
                        float _4372 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3097 = 1.0 - _3067;
                        float _3107 = (0.5 / (((_3096 * ((_3082 * _3097) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3096 * _3097) + _3067) * _3082))) * _3096;
                        float _4383 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3118 = (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3090 * _3090) * ((_3033 * 2.1991131305694580078125) + 3.141590118408203125))) * _3022;
                        _2875 = (_3037 * _2985.x) + _2943;
                        _2876 = (_3037 * _2985.y) + _2944;
                        _2877 = (_3037 * _2985.z) + _2945;
                        _2872 = (_3118 * _3002.x) + _2940;
                        _2873 = (_3118 * _3002.y) + _2941;
                        _2874 = (_3118 * _3002.z) + _2942;
                        if (_2947 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2947;
                        }
                    }
                    frontier_phi_61_pred = _2872;
                    frontier_phi_61_pred_1 = _2877;
                    frontier_phi_61_pred_2 = _2876;
                    frontier_phi_61_pred_3 = _2875;
                    frontier_phi_61_pred_4 = _2874;
                    frontier_phi_61_pred_5 = _2873;
                }
                _2672 = frontier_phi_61_pred;
                _2682 = frontier_phi_61_pred_1;
                _2680 = frontier_phi_61_pred_2;
                _2678 = frontier_phi_61_pred_3;
                _2676 = frontier_phi_61_pred_4;
                _2674 = frontier_phi_61_pred_5;
                uint _2823 = _2822 + 1u;
                if (_2823 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2816 = _2672;
                    _2817 = _2674;
                    _2818 = _2676;
                    _2819 = _2678;
                    _2820 = _2680;
                    _2821 = _2682;
                    _2822 = _2823;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
        }
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.z;
        uint _2688 = (_2686 >> 8u) & 15u;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        if (((4294967295u << _2688) & _2570) == 0u)
        {
            _2784 = _2671;
            _2786 = _2673;
            _2788 = _2675;
            _2790 = _2677;
            _2792 = _2679;
            _2794 = _2681;
        }
        else
        {
            float _2809 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
            float _2810 = _2809 * _2524;
            float _2811 = _2809 * _2525;
            float _2812 = _2809 * _2526;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2688 < ((_2686 >> 12u) & 15u))
            {
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2923 = _2671;
                float _2924 = _2673;
                float _2925 = _2675;
                float _2926 = _2677;
                float _2927 = _2679;
                float _2928 = _2681;
                uint _2929 = _2688;
                uint _2938;
                bool _2939;
                for (;;)
                {
                    _2938 = texelFetch(g_lightClassification, int((((_2564 << 5u) + (_2550 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                    _2939 = _2938 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2939)
                    {
                        frontier_phi_67_pred = _2926;
                        frontier_phi_67_pred_1 = _2927;
                        frontier_phi_67_pred_2 = _2928;
                        frontier_phi_67_pred_3 = _2925;
                        frontier_phi_67_pred_4 = _2924;
                        frontier_phi_67_pred_5 = _2923;
                    }
                    else
                    {
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3136 = _2923;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        uint _3142 = _2938;
                        uint _3143;
                        vec4 _3168;
                        float _3169;
                        vec4 _3184;
                        vec3 _3196;
                        vec4 _3211;
                        vec4 _3227;
                        float _3273;
                        bool _3274;
                        for (;;)
                        {
                            uint _3153 = ((_2929 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3142));
                            _3143 = (_3142 + 4294967295u) & _3142;
                            uint _3155 = _3153 * 40u;
                            _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3169 = _3168.w;
                            uint _3171 = (_3153 * 40u) + 4u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3186 = (_3153 * 40u) + 8u;
                            _3196 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x));
                            uint _3198 = (_3153 * 40u) + 16u;
                            _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3214 = (_3153 * 40u) + 20u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3153 * 40u) + 24u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3248 = (_3153 * 40u) + 28u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3273 = fma(_2526, _3261.z, fma(_2525, _3261.y, _3261.x * _2524)) + _3261.w;
                            _3274 = !((fma(_2526, _3242.z, fma(_2525, _3242.y, _3242.x * _2524)) + _3242.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3274)
                            {
                                float _3301 = _3168.x - _2524;
                                float _3302 = _3168.y - _2525;
                                float _3303 = _3168.z - _2526;
                                float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                                float _3307 = inversesqrt(_3304);
                                float _3308 = _3307 * _3301;
                                float _3309 = _3307 * _3302;
                                float _3310 = _3307 * _3303;
                                float _3314 = 1.0 - (_3304 / (_3169 * _3169));
                                float _4394 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3319 = sqrt(_3304) * _3184.w;
                                float _3321 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                                float _3322 = _3321 * _3321;
                                float _3325 = ((1.0 - _3322) * dot(vec3(_3308, _3309, _3310), vec3(_792, _795, _798))) + _3322;
                                float _3328 = _3319 * _3319;
                                float _3332 = (fma(_2526, _3211.z, fma(_2525, _3211.y, _3211.x * _2524)) + _3211.w) / _3273;
                                float _3333 = (fma(_2526, _3227.z, fma(_2525, _3227.y, _3227.x * _2524)) + _3227.w) / _3273;
                                float _3337 = 1.0 - dot(vec2(_3332, _3333), vec2(_3332, _3333));
                                float _4410 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3339 = _3338 * (((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3315) / ((_3328 * 0.699999988079071044921875) + 1.0));
                                float _3351 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                                float _3352 = 1.0 - _867;
                                float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                                float _3360 = _3359 * _3359;
                                float _3361 = _3360 * _3360;
                                float _3362 = _3308 - _2810;
                                float _3363 = _3309 - _2811;
                                float _3364 = _3310 - _2812;
                                float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                                float _3372 = dot(vec3(_792, _795, _798), vec3((-0.0) - _2810, (-0.0) - _2811, (-0.0) - _2812));
                                float _4421 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3376 = dot(vec3(_792, _795, _798), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                                float _4432 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                                float _3384 = _3321 * _3360;
                                float _3385 = _3384 * _3384;
                                float _3391 = ((1.0 - _3385) * dot(vec3(_792, _795, _798), vec3(_3308, _3309, _3310))) + _3385;
                                float _4443 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3393 = 1.0 - _3360;
                                float _3403 = (0.5 / (((_3392 * ((_3375 * _3393) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3360) * _3375))) * _3392;
                                float _4454 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3413 = (_3338 * _3315) * (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3383 * _3383) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3413 * _3196.x;
                                frontier_phi_73_pred_1 = _3413 * _3196.y;
                                frontier_phi_73_pred_2 = _3339 * _3184.z;
                                frontier_phi_73_pred_3 = _3339 * _3184.y;
                                frontier_phi_73_pred_4 = _3339 * _3184.x;
                                frontier_phi_73_pred_5 = _3413 * _3196.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_73_pred;
                            _3418 = frontier_phi_73_pred_1;
                            _3422 = frontier_phi_73_pred_2;
                            _3421 = frontier_phi_73_pred_3;
                            _3420 = frontier_phi_73_pred_4;
                            _3419 = frontier_phi_73_pred_5;
                            _3126 = _3420 + _3139;
                            _3127 = _3421 + _3140;
                            _3128 = _3422 + _3141;
                            _3123 = _3417 + _3136;
                            _3124 = _3418 + _3137;
                            _3125 = _3419 + _3138;
                            if (_3143 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3143;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3126;
                        frontier_phi_67_pred_1 = _3127;
                        frontier_phi_67_pred_2 = _3128;
                        frontier_phi_67_pred_3 = _3125;
                        frontier_phi_67_pred_4 = _3124;
                        frontier_phi_67_pred_5 = _3123;
                    }
                    _2791 = frontier_phi_67_pred;
                    _2793 = frontier_phi_67_pred_1;
                    _2795 = frontier_phi_67_pred_2;
                    _2789 = frontier_phi_67_pred_3;
                    _2787 = frontier_phi_67_pred_4;
                    _2785 = frontier_phi_67_pred_5;
                    uint _2930 = _2929 + 1u;
                    if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2923 = _2785;
                        _2924 = _2787;
                        _2925 = _2789;
                        _2926 = _2791;
                        _2927 = _2793;
                        _2928 = _2795;
                        _2929 = _2930;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2793;
                frontier_phi_55_56_ladder_1 = _2795;
                frontier_phi_55_56_ladder_2 = _2791;
                frontier_phi_55_56_ladder_3 = _2789;
                frontier_phi_55_56_ladder_4 = _2787;
                frontier_phi_55_56_ladder_5 = _2785;
            }
            else
            {
                frontier_phi_55_56_ladder = _2679;
                frontier_phi_55_56_ladder_1 = _2681;
                frontier_phi_55_56_ladder_2 = _2677;
                frontier_phi_55_56_ladder_3 = _2675;
                frontier_phi_55_56_ladder_4 = _2673;
                frontier_phi_55_56_ladder_5 = _2671;
            }
            _2784 = frontier_phi_55_56_ladder_5;
            _2786 = frontier_phi_55_56_ladder_4;
            _2788 = frontier_phi_55_56_ladder_3;
            _2790 = frontier_phi_55_56_ladder_2;
            _2792 = frontier_phi_55_56_ladder;
            _2794 = frontier_phi_55_56_ladder_1;
        }
        float _2799 = isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0));
        _2583 = (_2799 * _2790) + _2019;
        _2585 = (_2799 * _2792) + _2021;
        _2587 = (_2799 * _2794) + _2023;
        _2589 = ((_2784 * _835) * _2799) + _2364;
        _2591 = ((_2786 * _837) * _2799) + _2366;
        _2593 = ((_2788 * _838) * _2799) + _2368;
    }
    else
    {
        _2583 = _2019;
        _2585 = _2021;
        _2587 = _2023;
        _2589 = _2364;
        _2591 = _2366;
        _2593 = _2368;
    }
    float _4470 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4481 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4492 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    uint _2613 = _236 + 6u;
    float _2621 = _773 / cbSceneParam._m0[86u].x;
    float _2622 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2636 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, (log2((isnan(cbSceneParam._m0[77u].w) ? _707 : (isnan(_707) ? cbSceneParam._m0[77u].w : min(_707, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2638 = _2636.x;
    float _2639 = _2636.y;
    float _2640 = _2636.z;
    float _2641 = _2636.w;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_707 > cbSceneParam._m0[78u].w)
    {
        float _2696 = isnan(_707) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _707 : min(cbSceneParam._m0[80u].w, _707));
        float _2697 = _2696 / _707;
        float _2708 = _2697 * _758;
        float _2709 = _759 * _2697;
        float _2710 = (-0.0) - _2709;
        float _2712 = _2697 * _760;
        float _2714 = (cbSceneParam._m0[77u].w * _2710) / _2696;
        float _2715 = _2714 + cbSceneParam._m0[79u].w;
        float _2716 = cbSceneParam._m0[79u].w - _2709;
        float _2722 = sqrt(((_2708 * _2708) + (_2709 * _2709)) + (_2712 * _2712));
        float _2725 = (1.0 - (cbSceneParam._m0[77u].w / _2696)) * _2722;
        float _2730 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2732 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2885;
        if (abs((_2710 - _2714) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2885 = ((((_2715 > 0.0) ? exp2(_2730 * _2715) : (2.0 - exp2(_2732 * _2715))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2725;
        }
        else
        {
            float _2845 = 1.0 / cbSceneParam._m0[80u].x;
            float _2846 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : max(_2715, _2716));
            float _2847 = isnan(_2716) ? _2715 : (isnan(_2715) ? _2716 : min(_2715, _2716));
            float _2856 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : min(_2846, 0.0));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            _2885 = ((abs(_2722 / _2710) * cbSceneParam._m0[80u].y) * ((((_2856 - _2857) * 2.0) - ((exp2(_2730 * (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0)))) - exp2(_2730 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0))))) * _2845)) - ((exp2(_2732 * _2856) - exp2(_2732 * _2857)) * _2845))) + (_2725 * cbSceneParam._m0[80u].z);
        }
        vec4 _2887 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2621, _2622, 1.0), 0.0);
        float _2896 = exp2((_2885 * (-1.44269502162933349609375)) * (1.0 - _2887.w));
        float _2897 = log2(_2896);
        float _2913 = log2(_2641);
        _2734 = (exp2(_2913 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].x)) * _2887.x) / cbSceneParam._m0[78u].x)) + _2638;
        _2736 = (exp2(_2913 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].y)) * _2887.y) / cbSceneParam._m0[78u].y)) + _2639;
        _2738 = (exp2(_2913 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2897 * cbSceneParam._m0[78u].z)) * _2887.z) / cbSceneParam._m0[78u].z)) + _2640;
        _2740 = _2896 * _2641;
    }
    else
    {
        _2734 = _2638;
        _2736 = _2639;
        _2738 = _2640;
        _2740 = _2641;
    }
    float _2752 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2753 = _2752 == 3.0;
    float _2754 = log2(_2740);
    float _2761 = exp2(_2754 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2583 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _851))) + ((_2589 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1659)) * cbPerFrame._m0[3u].x));
    float _2762 = exp2(_2754 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2585 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _851))) + ((_2591 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1659)) * cbPerFrame._m0[3u].x));
    float _2763 = exp2(_2754 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2587 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _851))) + ((_2593 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1659)) * cbPerFrame._m0[3u].x));
    float _2772 = (_2752 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2772 * (_2753 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2734)));
    SV_Target.y = _2772 * (_2753 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2736)));
    SV_Target.z = _2772 * (_2753 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2738)));
    SV_Target.w = cbInstanceData._m0[_2613].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2613].w;
}


