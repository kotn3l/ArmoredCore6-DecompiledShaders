#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1618;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3965 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _455 = (_448 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _456 = (_448 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _457 = (_448 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3976 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _568 = _566.x;
    float _578 = dot(vec4(_568, _566.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _590 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _377.z) * 2.0) - ((((_568 - _578) * cbMtdParam._m0[23u].w) + _578) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3987 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _604 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_591 * ((_549.x * cbMtdParam._m0[14u].x) - _528)) + _528);
    float _607 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_591 * ((_549.y * cbMtdParam._m0[14u].y) - _529)) + _529);
    float _610 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_591 * ((_549.z * cbMtdParam._m0[14u].z) - _530)) + _530);
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _647 = _645.x;
    float _648 = _645.y;
    float _649 = _645.z;
    float _656 = ((_628.x - _647) * _448) + _647;
    float _657 = ((_628.y - _648) * _448) + _648;
    float _658 = ((_628.z - _649) * _448) + _649;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _681 = ((_670.x - _656) * _521) + _656;
    float _682 = ((_670.y - _657) * _521) + _657;
    float _683 = ((_670.z - _658) * _521) + _658;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _708 = ((_695.z - _683) * _591) + _683;
    float _711 = ((((_695.x - _681) * _591) + _681) * 2.0) + (-1.0);
    float _713 = ((((_695.y - _682) * _591) + _682) * 2.0) + (-1.0);
    float _714 = dot(vec2(_711, _713), vec2(_711, _713));
    float _3998 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _719 = sqrt(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))));
    vec4 _733 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _745 = (((_733.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _711;
    float _746 = (((_733.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _713;
    float _749 = fma(_719, _257, fma(_746, _264, _745 * _250));
    float _752 = fma(_719, _258, fma(_746, _265, _745 * _251));
    float _755 = fma(_719, _259, fma(_746, _266, _745 * _252));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    vec4 _786 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _788 = _786.x;
    float _789 = 1.0 - _788;
    float _797 = (cbMtdParam._m0[19u].x + dot(vec4(_759 * _749, _759 * _752, _759 * _755, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_788 - _789) * cbMtdParam._m0[24u].z) + _789) * cbMtdParam._m0[21u].z);
    float _4009 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _798 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _800 = (-0.0) - cbMtdParam._m0[24u].x;
    float _802 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
    float _810 = _798 - ((_798 * TEXCOORD_8.x) * _803);
    float _811 = _798 - ((_798 * TEXCOORD_8.y) * _803);
    float _812 = _798 - ((_798 * TEXCOORD_8.z) * _803);
    float _819 = (_810 * (cbMtdParam._m0[17u].x - _604)) + _604;
    float _820 = (_811 * (cbMtdParam._m0[17u].y - _607)) + _607;
    float _821 = (_812 * (cbMtdParam._m0[17u].z - _610)) + _610;
    vec4 _833 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _835 = _833.x;
    float _836 = 1.0 - _835;
    float _862 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_835 - _836) * cbMtdParam._m0[24u].w) + _836) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4030 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _863 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _871 = ((((cbMtdParam._m0[10u].x - _819) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _863) + _819;
    float _872 = ((((cbMtdParam._m0[10u].y - _820) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _863) + _820;
    float _873 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _821)) * _863) + _821;
    vec4 _899 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _901 = _899.x;
    float _918 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _901) * _448) + _901;
    float _935 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _918) * _521) + _918;
    float _952 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _935) * _591) + _935;
    float _956 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _952) * cbMtdParam._m0[19u].z) + _952;
    float _958 = _956 - (_956 * _810);
    float _960 = _958 - (_958 * _863);
    float _964 = (cbMtdParam._m0[19u].w * (_733.z - _708)) + _708;
    vec4 _980 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _987 = (_980.x * 2.0) + (-1.0);
    float _988 = (_980.y * 2.0) + (-1.0);
    float _989 = dot(vec2(_987, _988), vec2(_987, _988));
    float _4041 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _997 = ((_980.z - _964) * _810) + _964;
    float _1000 = ((cbMtdParam._m0[23u].x - _997) * _863) + _997;
    vec4 _1023 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1029 = (_1023.x * 2.0) + (-1.0);
    float _1030 = (_1023.y * 2.0) + (-1.0);
    float _1031 = dot(vec2(_1029, _1030), vec2(_1029, _1030));
    float _4052 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1046 = ((sqrt(1.0 - (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) - _719) * _812) + _719;
    float _1049 = (((_987 - _745) * _810) + _745) + (cbMtdParam._m0[21u].x * _745);
    float _1050 = (((_988 - _746) * _811) + _746) + (cbMtdParam._m0[21u].x * _746);
    float _1061 = (((_1029 - _1049) + (_1049 * cbMtdParam._m0[22u].z)) * _863) + _1049;
    float _1062 = (((_1030 - _1050) + (_1050 * cbMtdParam._m0[22u].z)) * _863) + _1050;
    float _1063 = (_863 * (sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) - _1046)) + _1046;
    float _1065 = cbMtdParam._m0[22u].x + _733.w;
    float _1068 = fma(_1063, _257, fma(_1062, _264, _1061 * _250));
    float _1071 = fma(_1063, _258, fma(_1062, _265, _1061 * _251));
    float _1074 = fma(_1063, _259, fma(_1062, _266, _1061 * _252));
    float _1078 = inversesqrt(dot(vec3(_1068, _1071, _1074), vec3(_1068, _1071, _1074)));
    float _1079 = _1078 * _1068;
    float _1080 = _1078 * _1071;
    float _1081 = _1078 * _1074;
    float _4063 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1082 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _4085 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4096 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4107 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4118 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _1087 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1101 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1151 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1141);
    float _1152 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1141);
    float _1153 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1141);
    float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
    float _1158 = _1151 * _1157;
    float _1159 = _1152 * _1157;
    float _1160 = _1153 * _1157;
    float _1166 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1167 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1185 = fma(_1081, cbSceneParam._m0[5u].z, fma(_1080, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1079));
    float _1188 = fma(_1081, cbSceneParam._m0[6u].z, fma(_1080, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1079));
    float _1191 = fma(_1081, cbSceneParam._m0[7u].z, fma(_1080, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1079));
    uint _1205 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1211 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) * cbInstanceData._m0[_1205].x;
    float _1212 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_1205].y;
    float _1213 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_1205].z;
    float _4129 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1214 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _4140 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _1215 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1216 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _1217 = 1.0 - _1087;
    float _1218 = _1214 * _1217;
    float _1219 = _1215 * _1217;
    float _1220 = _1216 * _1217;
    float _1225 = (_1214 + (-0.039999999105930328369140625)) * _1087;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1087;
    float _1227 = (_1216 + (-0.039999999105930328369140625)) * _1087;
    float _1228 = _1225 + 0.039999999105930328369140625;
    float _1230 = _1226 + 0.039999999105930328369140625;
    float _1231 = _1227 + 0.039999999105930328369140625;
    vec4 _1240 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1166, cbSceneParam._m0[86u].y * _1167));
    float _1244 = ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * TEXCOORD_5.w) * _1240.x;
    float _1245 = dot(vec3(_1079, _1080, _1081), vec3(_1158, _1159, _1160));
    float _1248 = _1245 * 2.0;
    float _1252 = (_1248 * _1079) - _1158;
    float _1253 = (_1248 * _1080) - _1159;
    float _1254 = (_1248 * _1081) - _1160;
    float _1258 = abs(dot(vec3(_1158, _1159, _1160), vec3(_1079, _1080, _1081)));
    float _4162 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1260 = sqrt(_1082);
    float _1273 = exp2((_1260 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1260 * 3.0));
    float _1279 = (1.0 - _1273) * ((_1260 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1280 = _1273 * _1260;
    float _1308 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1312 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1316 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1617;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1342 = fma(_1316, cbModelParam._m0[26u].z, fma(_1312, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1308));
        float _1346 = fma(_1316, cbModelParam._m0[27u].z, fma(_1312, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1308));
        float _1350 = fma(_1316, cbModelParam._m0[28u].z, fma(_1312, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1308));
        float _1375 = _1308 + _1079;
        float _1376 = _1312 + _1080;
        float _1377 = _1316 + _1081;
        float _1387 = fma(_1377, cbModelParam._m0[26u].z, fma(_1376, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1375)) - _1342;
        float _1388 = fma(_1377, cbModelParam._m0[27u].z, fma(_1376, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1375)) - _1346;
        float _1389 = fma(_1377, cbModelParam._m0[28u].z, fma(_1376, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1375)) - _1350;
        float _1393 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
        float _1406 = ((_1393 * _1387) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1342 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1393 * _1388) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1346 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1393 * _1389) / cbModelParam._m0[34u].z) + ((((((_1350 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1445 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1411.x + (-0.5));
        float _1447 = _1445 * (_1411.y + (-0.5));
        float _1448 = _1445 * (_1411.z + (-0.5));
        float _1455 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1418.x + (-0.5));
        float _1457 = _1455 * (_1418.y + (-0.5));
        float _1458 = _1455 * (_1418.z + (-0.5));
        float _1465 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1425.x + (-0.5));
        float _1467 = _1465 * (_1425.y + (-0.5));
        float _1468 = _1465 * (_1425.z + (-0.5));
        float _1475 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1432.x + (-0.5));
        float _1477 = _1475 * (_1432.y + (-0.5));
        float _1478 = _1475 * (_1432.z + (-0.5));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = _1446 * 0.5;
        float _1483 = _1456 * 0.5;
        float _1484 = _1466 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1499 = (dot(vec3(_1079, _1080, _1081), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1509 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4210 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1511 + 1.0))) + _1516) * _1479;
        float _1526 = _1447 * 0.5;
        float _1527 = _1457 * 0.5;
        float _1528 = _1467 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_1079, _1080, _1081), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4221 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4232 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4243 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_1553 + 1.0))) + _1558) * _1480;
        float _1568 = _1448 * 0.5;
        float _1569 = _1458 * 0.5;
        float _1570 = _1468 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_1079, _1080, _1081), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4254 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4265 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4276 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_1595 + 1.0))) + _1600) * _1481;
        _1617 = _1448;
        _1619 = _1447;
        _1620 = _1446;
        _1621 = _1458;
        _1622 = _1457;
        _1623 = _1456;
        _1624 = _1468;
        _1625 = _1467;
        _1626 = _1466;
        _1627 = _1481;
        _1628 = _1480;
        _1629 = _1479;
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1631 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1632 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1618;
        _1619 = _1618;
        _1620 = _1618;
        _1621 = _1618;
        _1622 = _1618;
        _1623 = _1618;
        _1624 = _1618;
        _1625 = _1618;
        _1626 = _1618;
        _1627 = _1618;
        _1628 = _1618;
        _1629 = _1618;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1655 = fma(_1316, cbModelParam._m0[30u].z, fma(_1312, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308));
        float _1659 = fma(_1316, cbModelParam._m0[31u].z, fma(_1312, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308));
        float _1663 = fma(_1316, cbModelParam._m0[32u].z, fma(_1312, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308));
        float _1686 = _1308 + _1079;
        float _1687 = _1312 + _1080;
        float _1688 = _1316 + _1081;
        float _1698 = fma(_1688, cbModelParam._m0[30u].z, fma(_1687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1686)) - _1655;
        float _1699 = fma(_1688, cbModelParam._m0[31u].z, fma(_1687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1686)) - _1659;
        float _1700 = fma(_1688, cbModelParam._m0[32u].z, fma(_1687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1686)) - _1663;
        float _1704 = inversesqrt(dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700)));
        float _1717 = ((_1704 * _1698) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1655 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1718 = ((_1704 * _1699) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1659 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1719 = ((_1704 * _1700) / cbModelParam._m0[35u].z) + ((((((_1663 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1721 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1717, _1718, _1719), 0.0);
        float _1754 = exp2((_1721.w + (-0.5)) * 20.0) * 2.0;
        float _1755 = _1754 * (_1721.x + (-0.5));
        float _1756 = _1754 * (_1721.y + (-0.5));
        float _1757 = _1754 * (_1721.z + (-0.5));
        float _1764 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1728.x + (-0.5));
        float _1766 = _1764 * (_1728.y + (-0.5));
        float _1767 = _1764 * (_1728.z + (-0.5));
        float _1774 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1775 = _1774 * (_1735.x + (-0.5));
        float _1776 = _1774 * (_1735.y + (-0.5));
        float _1777 = _1774 * (_1735.z + (-0.5));
        float _1784 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1785 = _1784 * (_1742.x + (-0.5));
        float _1786 = _1784 * (_1742.y + (-0.5));
        float _1787 = _1784 * (_1742.z + (-0.5));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1790 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1791 = _1755 * 0.5;
        float _1792 = _1765 * 0.5;
        float _1793 = _1775 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_1079, _1080, _1081), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4339 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1818 + 1.0))) + _1823) * _1788;
        float _1833 = _1756 * 0.5;
        float _1834 = _1766 * 0.5;
        float _1835 = _1776 * 0.5;
        float _1836 = dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835));
        float _1841 = (_1836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1836);
        float _1849 = (dot(vec3(_1079, _1080, _1081), vec3(_1841 * _1833, _1841 * _1834, _1841 * _1835)) + 1.0) * 0.5;
        float _4350 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1858 = sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835)) / (_1789 + 9.9999997473787516355514526367188e-06);
        float _4361 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1860 = _1859 * 2.0;
        float _1864 = (1.0 - _1859) / (_1859 + 1.0);
        float _4372 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1874 = ((((1.0 - _1865) * (_1860 + 2.0)) * exp2(log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_1860 + 1.0))) + _1865) * _1789;
        float _1875 = _1757 * 0.5;
        float _1876 = _1767 * 0.5;
        float _1877 = _1777 * 0.5;
        float _1878 = dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877));
        float _1883 = (_1878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1878);
        float _1891 = (dot(vec3(_1079, _1080, _1081), vec3(_1883 * _1875, _1883 * _1876, _1883 * _1877)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1900 = sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877)) / (_1790 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1902 = _1901 * 2.0;
        float _1906 = (1.0 - _1901) / (_1901 + 1.0);
        float _4405 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1916 = ((((1.0 - _1907) * (_1902 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1902 + 1.0))) + _1907) * _1790;
        _1924 = _1757;
        _1925 = _1756;
        _1926 = _1755;
        _1927 = _1767;
        _1928 = _1766;
        _1929 = _1765;
        _1930 = _1777;
        _1931 = _1776;
        _1932 = _1775;
        _1933 = _1790;
        _1934 = _1789;
        _1935 = _1788;
        _1936 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
        _1937 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)));
        _1938 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)));
    }
    else
    {
        _1924 = _1618;
        _1925 = _1618;
        _1926 = _1618;
        _1927 = _1618;
        _1928 = _1618;
        _1929 = _1618;
        _1930 = _1618;
        _1931 = _1618;
        _1932 = _1618;
        _1933 = _1618;
        _1934 = _1618;
        _1935 = _1618;
        _1936 = 0.0;
        _1937 = 0.0;
        _1938 = 0.0;
    }
    float _1948 = (cbModelParam._m0[1u].x * (_1936 - _1630)) + _1630;
    float _1949 = (cbModelParam._m0[1u].x * (_1937 - _1631)) + _1631;
    float _1950 = (cbModelParam._m0[1u].x * (_1938 - _1632)) + _1632;
    float _1971 = fma(_1950, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1948 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1950, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1948 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1950, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1948));
    float _1992 = _1252 * 0.5;
    float _1993 = _1253 * 0.5;
    float _1994 = _1254 * 0.5;
    float _1995 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1926, _1929, _1932, _1935));
    float _1998 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1925, _1928, _1931, _1934));
    float _2001 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1924, _1927, _1930, _1933));
    float _2035;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2008 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1617, _1621, _1624, _1627));
        float _2012 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1619, _1622, _1625, _1628));
        float _2016 = dot(vec4(_1992, _1993, _1994, 1.0), vec4(_1620, _1623, _1626, _1629));
        float _2023 = dot(vec4(cbModelParam._m0[39u]), vec4(_1992, _1993, _1994, 1.0));
        _2035 = dot(vec3(isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0)), isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2023) ? 0.0 : (isnan(0.0) ? _2023 : max(0.0, _2023))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2035 = 1.0;
    }
    float _2046;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2037 = dot(vec4(cbModelParam._m0[40u]), vec4(_1992, _1993, _1994, 1.0));
        _2046 = dot(vec3(isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2037) ? 0.0 : (isnan(0.0) ? _2037 : max(0.0, _2037))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2046 = 1.0;
    }
    float _2050 = (_2046 * cbModelParam._m0[1u].x) + (_2035 * (1.0 - cbModelParam._m0[1u].x));
    float _2060 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1082);
    float _2061 = isnan(_2060) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2060 : min(cbModelParam._m0[25u].z, _2060));
    float _2141;
    float _2143;
    float _2145;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2108 = fma(_1316, cbModelParam._m0[13u].z, fma(_1312, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1308)) + cbModelParam._m0[13u].w;
        float _2112 = fma(_1316, cbModelParam._m0[14u].z, fma(_1312, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1308)) + cbModelParam._m0[14u].w;
        float _2116 = fma(_1316, cbModelParam._m0[15u].z, fma(_1312, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1308)) + cbModelParam._m0[15u].w;
        float _2119 = fma(_1254, cbModelParam._m0[13u].z, fma(_1253, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1252));
        float _2122 = fma(_1254, cbModelParam._m0[14u].z, fma(_1253, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1252));
        float _2125 = fma(_1254, cbModelParam._m0[15u].z, fma(_1253, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1252));
        float _2153;
        if (_2119 > 0.0)
        {
            _2153 = abs((1.0 - _2108) / _2119);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2108 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2153 = frontier_phi_14_12_ladder;
        }
        float _2377;
        if (_2122 > 0.0)
        {
            _2377 = abs((1.0 - _2112) / _2122);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2112 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2377 = frontier_phi_23_19_ladder;
        }
        float _2634;
        if (_2125 > 0.0)
        {
            _2634 = abs((1.0 - _2116) / _2125);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2116 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2634 = frontier_phi_35_30_ladder;
        }
        float _2636 = isnan(_2377) ? _2153 : (isnan(_2153) ? _2377 : min(_2153, _2377));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _2119) + _2108;
        float _2642 = (_2637 * _2122) + _2112;
        float _2643 = (_2637 * _2125) + _2116;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2644;
        float _2648 = _2644 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 > _2648) || ((_2642 < _2646) || ((_2641 < _2646) || (_2641 > _2648))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2643, cbModelParam._m0[9u].z, fma(_2642, cbModelParam._m0[9u].y, _2641 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2643, cbModelParam._m0[10u].z, fma(_2642, cbModelParam._m0[10u].y, _2641 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2643, cbModelParam._m0[11u].z, fma(_2642, cbModelParam._m0[11u].y, _2641 * cbModelParam._m0[11u].x))), _2061);
            frontier_phi_13_35_ladder = _2771.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2771.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2771.x * cbModelParam._m0[1u].y;
        }
        _2141 = frontier_phi_13_35_ladder_2;
        _2143 = frontier_phi_13_35_ladder_1;
        _2145 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2129 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1252, _1253, _1254), _2061);
        _2141 = _2129.x * cbModelParam._m0[1u].y;
        _2143 = _2129.y * cbModelParam._m0[1u].y;
        _2145 = _2129.z * cbModelParam._m0[1u].y;
    }
    float _2149 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1082);
    float _2150 = isnan(_2149) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2149 : min(cbModelParam._m0[25u].w, _2149));
    float _2240;
    float _2242;
    float _2244;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2204 = fma(_1316, cbModelParam._m0[21u].z, fma(_1312, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1308)) + cbModelParam._m0[21u].w;
        float _2208 = fma(_1316, cbModelParam._m0[22u].z, fma(_1312, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1308)) + cbModelParam._m0[22u].w;
        float _2212 = fma(_1316, cbModelParam._m0[23u].z, fma(_1312, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1308)) + cbModelParam._m0[23u].w;
        float _2215 = fma(_1254, cbModelParam._m0[21u].z, fma(_1253, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1252));
        float _2218 = fma(_1254, cbModelParam._m0[22u].z, fma(_1253, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1252));
        float _2221 = fma(_1254, cbModelParam._m0[23u].z, fma(_1253, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1252));
        float _2382;
        if (_2215 > 0.0)
        {
            _2382 = abs((1.0 - _2204) / _2215);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2215 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2204 + 1.0) / _2215);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2382 = frontier_phi_25_21_ladder;
        }
        float _2661;
        if (_2218 > 0.0)
        {
            _2661 = abs((1.0 - _2208) / _2218);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2218 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2208 + 1.0) / _2218);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2661 = frontier_phi_37_32_ladder;
        }
        float _2874;
        if (_2221 > 0.0)
        {
            _2874 = abs((1.0 - _2212) / _2221);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2221 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2212 + 1.0) / _2221);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2874 = frontier_phi_46_43_ladder;
        }
        float _2876 = isnan(_2661) ? _2382 : (isnan(_2382) ? _2661 : min(_2382, _2661));
        float _2877 = isnan(_2874) ? _2876 : (isnan(_2876) ? _2874 : min(_2876, _2874));
        float _2881 = (_2877 * _2215) + _2204;
        float _2882 = (_2877 * _2218) + _2208;
        float _2883 = (_2877 * _2221) + _2212;
        float _2884 = _2877 * 9.9999997473787516355514526367188e-05;
        float _2885 = (-1.0) - _2884;
        float _2887 = _2884 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2883 > _2887) || ((_2883 < _2885) || ((_2882 > _2887) || ((_2882 < _2885) || ((_2881 < _2885) || (_2881 > _2887))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2883, cbModelParam._m0[17u].z, fma(_2882, cbModelParam._m0[17u].y, _2881 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2883, cbModelParam._m0[18u].z, fma(_2882, cbModelParam._m0[18u].y, _2881 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2883, cbModelParam._m0[19u].z, fma(_2882, cbModelParam._m0[19u].y, _2881 * cbModelParam._m0[19u].x))), _2150);
            frontier_phi_22_46_ladder = _3082.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3082.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3082.x * cbModelParam._m0[1u].z;
        }
        _2240 = frontier_phi_22_46_ladder_2;
        _2242 = frontier_phi_22_46_ladder_1;
        _2244 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2224 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1252, _1253, _1254), _2150);
        _2240 = _2224.x * cbModelParam._m0[1u].z;
        _2242 = _2224.y * cbModelParam._m0[1u].z;
        _2244 = _2224.z * cbModelParam._m0[1u].z;
    }
    float _2257 = (((_1279 * _1228) + _1280) * _1244) * ((cbModelParam._m0[1u].w * (_2240 - _2141)) + _2141);
    float _2259 = (((_1279 * _1230) + _1280) * _1244) * ((cbModelParam._m0[1u].w * (_2242 - _2143)) + _2143);
    float _2261 = (((_1279 * _1231) + _1280) * _1244) * ((cbModelParam._m0[1u].w * (_2244 - _2145)) + _2145);
    float _2264 = fma(_2261, cbSceneParam._m0[89u].z, fma(_2259, cbSceneParam._m0[89u].y, _2257 * cbSceneParam._m0[89u].x));
    float _2267 = fma(_2261, cbSceneParam._m0[90u].z, fma(_2259, cbSceneParam._m0[90u].y, _2257 * cbSceneParam._m0[90u].x));
    float _2270 = fma(_2261, cbSceneParam._m0[91u].z, fma(_2259, cbSceneParam._m0[91u].y, _2257 * cbSceneParam._m0[91u].x));
    vec4 _2278 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1166, _1167));
    float _2280 = _2278.w;
    float _2292 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2280);
    float _2293 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2280);
    float _2294 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2280);
    uvec4 _2298 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2300 = _2298.x * 14u;
    uint _2301 = _2300 + 13u;
    float _2308 = _1244 + (-1.0);
    float _2313 = (cbLight._m0[_2301].x * _2308) + 1.0;
    float _2314 = (cbLight._m0[_2301].y * _2308) + 1.0;
    float _2315 = (cbLight._m0[_2301].z * _2308) + 1.0;
    float _2316 = (cbLight._m0[_2301].w * _2308) + 1.0;
    uint _2317 = _2300 + 5u;
    float _2323 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
    uint _2327 = _2300 + 4u;
    float _2336 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2340 = _2300 | 1u;
    float _2351 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_1079, _1080, _1081));
    float _2354 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_1079, _1080, _1081));
    float _4541 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _4552 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2359 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * 0.3183098733425140380859375;
    float _2361 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.3183098733425140380859375;
    float _2368 = ((cbLight._m0[_2317].x * _2323) * _2361) + (((cbLight._m0[_2327].x * _2292) * _2336) * _2359);
    float _2369 = ((_2323 * cbLight._m0[_2317].y) * _2361) + (((cbLight._m0[_2327].y * _2293) * _2336) * _2359);
    float _2370 = ((_2323 * cbLight._m0[_2317].z) * _2361) + (((cbLight._m0[_2327].z * _2294) * _2336) * _2359);
    uvec4 _2374 = floatBitsToUint(cbLight._m0[_2300 + 12u]);
    bool _2376 = _2374.x == 0u;
    float _2387;
    float _2389;
    float _2391;
    if (_2376)
    {
        _2387 = _2368;
        _2389 = _2369;
        _2391 = _2370;
    }
    else
    {
        uint _2395 = _2300 + 6u;
        float _2411 = (dot(vec3(cbLight._m0[_2300 + 2u].xyz), vec3(_1079, _1080, _1081)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4563 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2414 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2387 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2368;
        _2389 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2369;
        _2391 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2370;
    }
    bool _2394 = _2374.y == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2394)
    {
        _2432 = _2387;
        _2434 = _2389;
        _2436 = _2391;
    }
    else
    {
        uint _2605 = _2300 + 7u;
        float _2621 = (dot(vec3(cbLight._m0[_2300 + 3u].xyz), vec3(_1079, _1080, _1081)) * 0.5) + 0.5;
        float _2622 = _2621 * _2621;
        float _4579 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2623 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2624 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2432 = (((cbLight._m0[_2605].x * 0.3183098733425140380859375) * _2623) * _2624) + _2387;
        _2434 = (((cbLight._m0[_2605].y * 0.3183098733425140380859375) * _2623) * _2624) + _2389;
        _2436 = (((cbLight._m0[_2605].z * 0.3183098733425140380859375) * _2623) * _2624) + _2391;
    }
    uint _2439 = _2300 + 8u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _1082) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2300].x + _1158;
    float _2455 = cbLight._m0[_2300].y + _1159;
    float _2456 = cbLight._m0[_2300].z + _1160;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_1079, _1080, _1081), vec3(cbLight._m0[_2300].xyz));
    float _4595 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _4606 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _2468 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2469 = dot(vec3(_1079, _1080, _1081), vec3(_2461, _2462, _2463));
    float _4617 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2473 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2461, _2462, _2463));
    float _4628 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2477 = _2453 * _2453;
    float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
    float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
    float _2490 = 0.959999978542327880859375 - _1225;
    float _2492 = 0.959999978542327880859375 - _1226;
    float _2493 = 0.959999978542327880859375 - _1227;
    float _2500 = 1.0 - _2453;
    float _2511 = (0.5 / (((_2468 * ((_2467 * _2500) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2500) + _2453) * _2467))) * _2467;
    float _4639 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
    uint _2527 = _2300 + 9u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _1082) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2340].x + _1158;
    float _2541 = cbLight._m0[_2340].y + _1159;
    float _2542 = cbLight._m0[_2340].z + _1160;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_1079, _1080, _1081), vec3(cbLight._m0[_2340].xyz));
    float _4650 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _2554 = dot(vec3(_1079, _1080, _1081), vec3(_2547, _2548, _2549));
    float _4661 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2547, _2548, _2549));
    float _4672 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2539 * _2539;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0);
    float _2580 = 1.0 - _2539;
    float _2590 = (0.5 / (((_2468 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2580) + _2539) * _2553))) * _2553;
    float _4683 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2592 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    float _2602 = (((((_2573 * _2490) + _1228) * cbLight._m0[_2527].x) * _2592) * _2323) + ((((cbLight._m0[_2439].x * _2292) * ((_2489 * _2490) + _1228)) * _2513) * _2336);
    float _2603 = (((((_2573 * _2492) + _1230) * cbLight._m0[_2527].y) * _2592) * _2323) + ((((cbLight._m0[_2439].y * _2293) * ((_2489 * _2492) + _1230)) * _2513) * _2336);
    float _2604 = (((((_2573 * _2493) + _1231) * cbLight._m0[_2527].z) * _2592) * _2323) + ((((cbLight._m0[_2439].z * _2294) * ((_2489 * _2493) + _1231)) * _2513) * _2336);
    float _2666;
    float _2668;
    float _2670;
    if (_2376)
    {
        _2666 = _2602;
        _2668 = _2603;
        _2670 = _2604;
    }
    else
    {
        uint _2672 = _2300 + 2u;
        uint _2676 = _2300 + 10u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _1082) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _1158;
        float _2693 = cbLight._m0[_2672].y + _1159;
        float _2694 = cbLight._m0[_2672].z + _1160;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_1079, _1080, _1081), vec3(cbLight._m0[_2672].xyz));
        float _4694 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2706 = dot(vec3(_1079, _1080, _1081), vec3(_2699, _2700, _2701));
        float _4705 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4716 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
        float _2732 = 1.0 - _2691;
        float _2742 = (0.5 / (((_2468 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2732) + _2691) * _2705))) * _2705;
        float _4727 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2666 = (((((_2725 * _2490) + _1228) * cbLight._m0[_2676].x) * _2744) * _2745) + _2602;
        _2668 = (((((_2725 * _2492) + _1230) * cbLight._m0[_2676].y) * _2744) * _2745) + _2603;
        _2670 = (((((_2725 * _2493) + _1231) * cbLight._m0[_2676].z) * _2744) * _2745) + _2604;
    }
    float _2780;
    float _2782;
    float _2784;
    if (_2394)
    {
        _2780 = _2666;
        _2782 = _2668;
        _2784 = _2670;
    }
    else
    {
        uint _2791 = _2300 + 3u;
        uint _2795 = _2300 + 11u;
        float _2809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2791].w)) * _1082) * 0.949999988079071044921875);
        float _2810 = _2809 * _2809;
        float _2811 = cbLight._m0[_2791].x + _1158;
        float _2812 = cbLight._m0[_2791].y + _1159;
        float _2813 = cbLight._m0[_2791].z + _1160;
        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
        float _2818 = _2817 * _2811;
        float _2819 = _2817 * _2812;
        float _2820 = _2817 * _2813;
        float _2821 = dot(vec3(_1079, _1080, _1081), vec3(cbLight._m0[_2791].xyz));
        float _4743 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2825 = dot(vec3(_1079, _1080, _1081), vec3(_2818, _2819, _2820));
        float _4754 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2829 = dot(vec3(cbLight._m0[_2791].xyz), vec3(_2818, _2819, _2820));
        float _4765 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2833 = _2810 * _2810;
        float _2837 = ((_2828 * _2828) * (_2833 + (-1.0))) + 1.0;
        float _2844 = exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0);
        float _2851 = 1.0 - _2810;
        float _2861 = (0.5 / (((_2468 * ((_2824 * _2851) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2468 * _2851) + _2810) * _2824))) * _2824;
        float _4776 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        float _2863 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2833 / ((_2837 * _2837) * 3.141590118408203125));
        float _2864 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
        _2780 = (((((_2844 * _2490) + _1228) * cbLight._m0[_2795].x) * _2863) * _2864) + _2666;
        _2782 = (((((_2844 * _2492) + _1230) * cbLight._m0[_2795].y) * _2863) * _2864) + _2668;
        _2784 = (((((_2844 * _2493) + _1231) * cbLight._m0[_2795].z) * _2863) * _2864) + _2670;
    }
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    if (_2298.y == 0u)
    {
        float _2939 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2940 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2939;
        float _2941 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2939;
        float _2942 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2939;
        uvec4 _2954 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2955 = _2954.x;
        uint _2966 = uint((float(_2954.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1167) / _2955))) + floor(float(uint(cbSceneParam._m0[85u].x * _1166) / _2955)));
        float _2976 = (log2(_2942 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2977 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
        uint _2980 = uint(isnan(14.0) ? _2977 : (isnan(_2977) ? 14.0 : min(_2977, 14.0)));
        uvec4 _2985 = texelFetch(g_lightClusterGridBuffer, int(((_2980 << 2u) + (_2966 << 6u)) >> 2u));
        uint _2986 = _2985.x;
        uint _2987 = _2954.z;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((((1u << ((_2987 >> 4u) & 15u)) + 4294967295u) & _2986) == 0u) || ((_2987 & 240u) == 0u))
        {
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
        }
        else
        {
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            uint _3237 = 0u;
            uint _3246;
            bool _3247;
            for (;;)
            {
                _3246 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3237 << 2u)) >> 2u)).x;
                _3247 = _3246 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3247)
                {
                    frontier_phi_61_pred = _3231;
                    frontier_phi_61_pred_1 = _3236;
                    frontier_phi_61_pred_2 = _3235;
                    frontier_phi_61_pred_3 = _3234;
                    frontier_phi_61_pred_4 = _3233;
                    frontier_phi_61_pred_5 = _3232;
                }
                else
                {
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    uint _3361;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3246;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    for (;;)
                    {
                        uint _3365 = uint(findLSB(_3361)) + (_3237 << 5u);
                        uint _3362 = (_3361 + 4294967295u) & _3361;
                        uint _3367 = _3365 * 48u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3387 = (_3365 * 48u) + 4u;
                        vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3406 = (_3365 * 48u) + 8u;
                        vec3 _3417 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x));
                        float _3421 = _3381.x - _2940;
                        float _3422 = _3381.y - _2941;
                        float _3423 = _3381.z - _2942;
                        float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                        float _3427 = inversesqrt(_3424);
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3431 = dot(vec3(_1185, _1188, _1191), vec3(_3428, _3429, _3430));
                        float _3436 = 1.0 - (_3424 * _3381.w);
                        float _4802 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3437 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3438 = sqrt(_3424) * _3400.w;
                        float _3441 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3431) + _3442;
                        float _3448 = _3438 * _3438;
                        float _3452 = ((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3437) / ((_3448 * 0.699999988079071044921875) + 1.0);
                        float _3456 = (-0.0) - _2940;
                        float _3457 = (-0.0) - _2941;
                        float _3458 = (-0.0) - _2942;
                        float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3473 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                        float _3474 = 1.0 - _1260;
                        float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                        float _3482 = _3481 * _3481;
                        float _3483 = _3482 * _3482;
                        float _3484 = _3463 + _3428;
                        float _3485 = _3464 + _3429;
                        float _3486 = _3465 + _3430;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3494 = dot(vec3(_1185, _1188, _1191), vec3(_3463, _3464, _3465));
                        float _4818 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3498 = dot(vec3(_1185, _1188, _1191), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                        float _4829 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                        float _3506 = _3441 * _3482;
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3431) + _3507;
                        float _4840 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3512 = 1.0 - _3482;
                        float _3522 = (0.5 / (((_3511 * ((_3497 * _3512) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3482) * _3497))) * _3511;
                        float _4851 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3533 = (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3505 * _3505) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125))) * _3437;
                        _3290 = (_3452 * _3400.x) + _3358;
                        _3291 = (_3452 * _3400.y) + _3359;
                        _3292 = (_3452 * _3400.z) + _3360;
                        _3287 = (_3533 * _3417.x) + _3355;
                        _3288 = (_3533 * _3417.y) + _3356;
                        _3289 = (_3533 * _3417.z) + _3357;
                        if (_3362 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3362;
                        }
                    }
                    frontier_phi_61_pred = _3287;
                    frontier_phi_61_pred_1 = _3292;
                    frontier_phi_61_pred_2 = _3291;
                    frontier_phi_61_pred_3 = _3290;
                    frontier_phi_61_pred_4 = _3289;
                    frontier_phi_61_pred_5 = _3288;
                }
                _3088 = frontier_phi_61_pred;
                _3098 = frontier_phi_61_pred_1;
                _3096 = frontier_phi_61_pred_2;
                _3094 = frontier_phi_61_pred_3;
                _3092 = frontier_phi_61_pred_4;
                _3090 = frontier_phi_61_pred_5;
                uint _3238 = _3237 + 1u;
                if (_3238 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3231 = _3088;
                    _3232 = _3090;
                    _3233 = _3092;
                    _3234 = _3094;
                    _3235 = _3096;
                    _3236 = _3098;
                    _3237 = _3238;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
        }
        uvec4 _3101 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3102 = _3101.z;
        uint _3104 = (_3102 >> 8u) & 15u;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        if (((4294967295u << _3104) & _2986) == 0u)
        {
            _3199 = _3087;
            _3201 = _3089;
            _3203 = _3091;
            _3205 = _3093;
            _3207 = _3095;
            _3209 = _3097;
        }
        else
        {
            float _3224 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
            float _3225 = _3224 * _2940;
            float _3226 = _3224 * _2941;
            float _3227 = _3224 * _2942;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3104 < ((_3102 >> 12u) & 15u))
            {
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3338 = _3087;
                float _3339 = _3089;
                float _3340 = _3091;
                float _3341 = _3093;
                float _3342 = _3095;
                float _3343 = _3097;
                uint _3344 = _3104;
                uint _3353;
                bool _3354;
                for (;;)
                {
                    _3353 = texelFetch(g_lightClassification, int((((_2980 << 5u) + (_2966 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                    _3354 = _3353 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3354)
                    {
                        frontier_phi_67_pred = _3341;
                        frontier_phi_67_pred_1 = _3342;
                        frontier_phi_67_pred_2 = _3343;
                        frontier_phi_67_pred_3 = _3340;
                        frontier_phi_67_pred_4 = _3339;
                        frontier_phi_67_pred_5 = _3338;
                    }
                    else
                    {
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3551 = _3338;
                        float _3552 = _3339;
                        float _3553 = _3340;
                        float _3554 = _3341;
                        float _3555 = _3342;
                        float _3556 = _3343;
                        uint _3557 = _3353;
                        uint _3558;
                        vec4 _3583;
                        float _3584;
                        vec4 _3599;
                        vec3 _3611;
                        vec4 _3626;
                        vec4 _3641;
                        float _3687;
                        bool _3688;
                        for (;;)
                        {
                            uint _3568 = ((_3344 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3557));
                            _3558 = (_3557 + 4294967295u) & _3557;
                            uint _3570 = _3568 * 40u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3584 = _3583.w;
                            uint _3586 = (_3568 * 40u) + 4u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3568 * 40u) + 8u;
                            _3611 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x));
                            uint _3613 = (_3568 * 40u) + 16u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3628 = (_3568 * 40u) + 20u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3568 * 40u) + 24u;
                            vec4 _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3662 = (_3568 * 40u) + 28u;
                            vec4 _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            _3687 = fma(_2942, _3675.z, fma(_2941, _3675.y, _3675.x * _2940)) + _3675.w;
                            _3688 = !((fma(_2942, _3656.z, fma(_2941, _3656.y, _3656.x * _2940)) + _3656.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3688)
                            {
                                float _3715 = _3583.x - _2940;
                                float _3716 = _3583.y - _2941;
                                float _3717 = _3583.z - _2942;
                                float _3718 = dot(vec3(_3715, _3716, _3717), vec3(_3715, _3716, _3717));
                                float _3721 = inversesqrt(_3718);
                                float _3722 = _3721 * _3715;
                                float _3723 = _3721 * _3716;
                                float _3724 = _3721 * _3717;
                                float _3728 = 1.0 - (_3718 / (_3584 * _3584));
                                float _4862 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3733 = sqrt(_3718) * _3599.w;
                                float _3735 = 1.39999997615814208984375 / (_3733 + 1.39999997615814208984375);
                                float _3736 = _3735 * _3735;
                                float _3739 = ((1.0 - _3736) * dot(vec3(_3722, _3723, _3724), vec3(_1185, _1188, _1191))) + _3736;
                                float _3742 = _3733 * _3733;
                                float _3746 = (fma(_2942, _3626.z, fma(_2941, _3626.y, _3626.x * _2940)) + _3626.w) / _3687;
                                float _3747 = (fma(_2942, _3641.z, fma(_2941, _3641.y, _3641.x * _2940)) + _3641.w) / _3687;
                                float _3751 = 1.0 - dot(vec2(_3746, _3747), vec2(_3746, _3747));
                                float _4878 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3752 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3753 = _3752 * (((isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0))) * _3729) / ((_3742 * 0.699999988079071044921875) + 1.0));
                                float _3765 = exp2(log2(1.0 / ((_3742 * 3.5) + 5.0)) * 0.25);
                                float _3766 = 1.0 - _1260;
                                float _3773 = sqrt(1.0 - ((1.0 - (_3766 * _3766)) * (1.0 - (_3765 * _3765))));
                                float _3774 = _3773 * _3773;
                                float _3775 = _3774 * _3774;
                                float _3776 = _3722 - _3225;
                                float _3777 = _3723 - _3226;
                                float _3778 = _3724 - _3227;
                                float _3782 = inversesqrt(dot(vec3(_3776, _3777, _3778), vec3(_3776, _3777, _3778)));
                                float _3786 = dot(vec3(_1185, _1188, _1191), vec3((-0.0) - _3225, (-0.0) - _3226, (-0.0) - _3227));
                                float _4889 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3789 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3790 = dot(vec3(_1185, _1188, _1191), vec3(_3782 * _3776, _3782 * _3777, _3782 * _3778));
                                float _4900 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3797 = ((_3793 * _3793) * (_3775 + (-1.0))) + 1.0;
                                float _3798 = _3735 * _3774;
                                float _3799 = _3798 * _3798;
                                float _3805 = ((1.0 - _3799) * dot(vec3(_1185, _1188, _1191), vec3(_3722, _3723, _3724))) + _3799;
                                float _4911 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3807 = 1.0 - _3774;
                                float _3817 = (0.5 / (((_3806 * ((_3789 * _3807) + _3774)) + 9.9999999392252902907785028219223e-09) + (((_3806 * _3807) + _3774) * _3789))) * _3806;
                                float _4922 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3827 = (_3752 * _3729) * (((_3775 * 3.1415927410125732421875) * (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0)))) / ((_3797 * _3797) * ((_3742 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3827 * _3611.x;
                                frontier_phi_73_pred_1 = _3827 * _3611.y;
                                frontier_phi_73_pred_2 = _3753 * _3599.z;
                                frontier_phi_73_pred_3 = _3753 * _3599.y;
                                frontier_phi_73_pred_4 = _3753 * _3599.x;
                                frontier_phi_73_pred_5 = _3827 * _3611.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3831 = frontier_phi_73_pred;
                            _3832 = frontier_phi_73_pred_1;
                            _3836 = frontier_phi_73_pred_2;
                            _3835 = frontier_phi_73_pred_3;
                            _3834 = frontier_phi_73_pred_4;
                            _3833 = frontier_phi_73_pred_5;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            if (_3558 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3558;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3541;
                        frontier_phi_67_pred_1 = _3542;
                        frontier_phi_67_pred_2 = _3543;
                        frontier_phi_67_pred_3 = _3540;
                        frontier_phi_67_pred_4 = _3539;
                        frontier_phi_67_pred_5 = _3538;
                    }
                    _3206 = frontier_phi_67_pred;
                    _3208 = frontier_phi_67_pred_1;
                    _3210 = frontier_phi_67_pred_2;
                    _3204 = frontier_phi_67_pred_3;
                    _3202 = frontier_phi_67_pred_4;
                    _3200 = frontier_phi_67_pred_5;
                    uint _3345 = _3344 + 1u;
                    if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3338 = _3200;
                        _3339 = _3202;
                        _3340 = _3204;
                        _3341 = _3206;
                        _3342 = _3208;
                        _3343 = _3210;
                        _3344 = _3345;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3208;
                frontier_phi_55_56_ladder_1 = _3210;
                frontier_phi_55_56_ladder_2 = _3206;
                frontier_phi_55_56_ladder_3 = _3204;
                frontier_phi_55_56_ladder_4 = _3202;
                frontier_phi_55_56_ladder_5 = _3200;
            }
            else
            {
                frontier_phi_55_56_ladder = _3095;
                frontier_phi_55_56_ladder_1 = _3097;
                frontier_phi_55_56_ladder_2 = _3093;
                frontier_phi_55_56_ladder_3 = _3091;
                frontier_phi_55_56_ladder_4 = _3089;
                frontier_phi_55_56_ladder_5 = _3087;
            }
            _3199 = frontier_phi_55_56_ladder_5;
            _3201 = frontier_phi_55_56_ladder_4;
            _3203 = frontier_phi_55_56_ladder_3;
            _3205 = frontier_phi_55_56_ladder_2;
            _3207 = frontier_phi_55_56_ladder;
            _3209 = frontier_phi_55_56_ladder_1;
        }
        float _3214 = isnan(1.0) ? _1244 : (isnan(_1244) ? 1.0 : min(_1244, 1.0));
        _2999 = (_3214 * _3205) + _2432;
        _3001 = (_3214 * _3207) + _2434;
        _3003 = (_3214 * _3209) + _2436;
        _3005 = ((_3199 * _1228) * _3214) + _2780;
        _3007 = ((_3201 * _1230) * _3214) + _2782;
        _3009 = ((_3203 * _1231) * _3214) + _2784;
    }
    else
    {
        _2999 = _2432;
        _3001 = _2434;
        _3003 = _2436;
        _3005 = _2780;
        _3007 = _2782;
        _3009 = _2784;
    }
    float _4938 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _4949 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _4960 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    uint _3029 = _269 + 6u;
    float _3037 = _1166 / cbSceneParam._m0[86u].x;
    float _3038 = _1167 / cbSceneParam._m0[86u].y;
    vec4 _3052 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, (log2((isnan(cbSceneParam._m0[77u].w) ? _1101 : (isnan(_1101) ? cbSceneParam._m0[77u].w : min(_1101, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3054 = _3052.x;
    float _3055 = _3052.y;
    float _3056 = _3052.z;
    float _3057 = _3052.w;
    float _3149;
    float _3151;
    float _3153;
    float _3155;
    if (_1101 > cbSceneParam._m0[78u].w)
    {
        float _3112 = isnan(_1101) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1101 : min(cbSceneParam._m0[80u].w, _1101));
        float _3113 = _3112 / _1101;
        float _3124 = _3113 * _1151;
        float _3125 = _1152 * _3113;
        float _3126 = (-0.0) - _3125;
        float _3127 = _3113 * _1153;
        float _3129 = (cbSceneParam._m0[77u].w * _3126) / _3112;
        float _3130 = _3129 + cbSceneParam._m0[79u].w;
        float _3131 = cbSceneParam._m0[79u].w - _3125;
        float _3137 = sqrt(((_3124 * _3124) + (_3125 * _3125)) + (_3127 * _3127));
        float _3140 = (1.0 - (cbSceneParam._m0[77u].w / _3112)) * _3137;
        float _3145 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3147 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3300;
        if (abs((_3126 - _3129) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3300 = ((((_3130 > 0.0) ? exp2(_3145 * _3130) : (2.0 - exp2(_3147 * _3130))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3140;
        }
        else
        {
            float _3260 = 1.0 / cbSceneParam._m0[80u].x;
            float _3261 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : max(_3130, _3131));
            float _3262 = isnan(_3131) ? _3130 : (isnan(_3130) ? _3131 : min(_3130, _3131));
            float _3271 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : min(_3261, 0.0));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            _3300 = ((abs(_3137 / _3126) * cbSceneParam._m0[80u].y) * ((((_3271 - _3272) * 2.0) - ((exp2(_3145 * (isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0)))) - exp2(_3145 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0))))) * _3260)) - ((exp2(_3147 * _3271) - exp2(_3147 * _3272)) * _3260))) + (_3140 * cbSceneParam._m0[80u].z);
        }
        vec4 _3302 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3037, _3038, 1.0), 0.0);
        float _3311 = exp2((_3300 * (-1.44269502162933349609375)) * (1.0 - _3302.w));
        float _3312 = log2(_3311);
        float _3328 = log2(_3057);
        _3149 = (exp2(_3328 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].x)) * _3302.x) / cbSceneParam._m0[78u].x)) + _3054;
        _3151 = (exp2(_3328 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].y)) * _3302.y) / cbSceneParam._m0[78u].y)) + _3055;
        _3153 = (exp2(_3328 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].z)) * _3302.z) / cbSceneParam._m0[78u].z)) + _3056;
        _3155 = _3311 * _3057;
    }
    else
    {
        _3149 = _3054;
        _3151 = _3055;
        _3153 = _3056;
        _3155 = _3057;
    }
    float _3167 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3168 = _3167 == 3.0;
    float _3169 = log2(_3155);
    float _3176 = exp2(_3169 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2999 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1244))) + ((_3005 + ((isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0))) * _2050)) * cbPerFrame._m0[3u].x));
    float _3177 = exp2(_3169 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_3001 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1244))) + ((_3007 + ((isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0))) * _2050)) * cbPerFrame._m0[3u].x));
    float _3178 = exp2(_3169 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_3003 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1244))) + ((_3009 + ((isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0))) * _2050)) * cbPerFrame._m0[3u].x));
    float _3187 = (_3167 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3187 * (_3168 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3149)));
    SV_Target.y = _3187 * (_3168 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3151)));
    SV_Target.z = _3187 * (_3168 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3153)));
    SV_Target.w = cbInstanceData._m0[_3029].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3029].w;
}


