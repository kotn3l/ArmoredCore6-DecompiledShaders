#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1529;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4138 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4149 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4160 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _427 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _429 = _427.x;
    float _441 = dot(vec4(_429, _427.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _458 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_429 - _441) * cbMtdParam._m0[23u].w) + _441) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4171 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _466 = (_459 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _467 = (_459 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _468 = (_459 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _507 = _505.x;
    float _517 = dot(vec4(_507, _505.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _531 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_507 - _517) * cbMtdParam._m0[23u].w) + _517) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4182 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _539 = (_532 * ((_485.x * cbMtdParam._m0[13u].x) - _466)) + _466;
    float _540 = (_532 * ((_485.y * cbMtdParam._m0[13u].y) - _467)) + _467;
    float _541 = (_532 * ((_485.z * cbMtdParam._m0[13u].z) - _468)) + _468;
    float _545 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _539;
    float _548 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _540;
    float _551 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _541;
    float _558 = ((_539 - _545) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) + _545;
    float _559 = ((_540 - _548) * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) + _548;
    float _560 = ((_541 - _551) * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) + _551;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _459) + _619;
    float _629 = ((_600.y - _620) * _459) + _620;
    float _630 = ((_600.z - _621) * _459) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _655 = ((_642.z - _630) * _532) + _630;
    float _658 = ((((_642.x - _628) * _532) + _628) * 2.0) + (-1.0);
    float _659 = ((((_642.y - _629) * _532) + _629) * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _4193 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _312) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _313) + cbTextureTilingScale._m0[11u].w));
    float _706 = _704.x;
    float _707 = 1.0 - _706;
    float _716 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _719 = ((isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : min(_716, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _728 = (_719 - ((((((_706 - _707) * cbMtdParam._m0[24u].z) + _707) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _719))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4214 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _729 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _736 = (_729 * (cbMtdParam._m0[17u].x - _558)) + _558;
    float _737 = (_729 * (cbMtdParam._m0[17u].y - _559)) + _559;
    float _738 = (_729 * (cbMtdParam._m0[17u].z - _560)) + _560;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _752 = _750.x;
    float _753 = 1.0 - _752;
    float _778 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_752 - _753) * cbMtdParam._m0[24u].w) + _753) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4225 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _787 = ((((cbMtdParam._m0[10u].x - _736) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _779) + _736;
    float _788 = ((((cbMtdParam._m0[10u].y - _737) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _779) + _737;
    float _789 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _738)) * _779) + _738;
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _817 = _815.x;
    float _835 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _817) * _459) + _817;
    float _852 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _835) * _532) + _835;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _852) * cbMtdParam._m0[19u].z) + _852;
    float _858 = _856 - (_856 * _729);
    float _860 = _858 - (_858 * _779);
    float _865 = (((_577.z - _655) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _655;
    float _869 = ((_679.z - _865) * cbMtdParam._m0[19u].w) + _865;
    vec4 _883 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _312) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _313) + cbTextureTilingScale._m0[15u].w));
    float _890 = (_883.x * 2.0) + (-1.0);
    float _891 = (_883.y * 2.0) + (-1.0);
    float _892 = dot(vec2(_890, _891), vec2(_890, _891));
    float _4236 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _900 = (_729 * (_883.z - _869)) + _869;
    float _903 = ((cbMtdParam._m0[23u].x - _900) * _779) + _900;
    vec4 _924 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _930 = (_924.x * 2.0) + (-1.0);
    float _931 = (_924.y * 2.0) + (-1.0);
    float _932 = dot(vec2(_930, _931), vec2(_930, _931));
    float _4247 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _946 = (_658 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_577.x * 2.0) + (-1.0)))) + (((_679.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _947 = (_659 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_577.y * 2.0) + (-1.0)))) + (((_679.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _959 = (((_890 - _946) + (cbMtdParam._m0[21u].x * _946)) * _729) + _946;
    float _960 = (((_891 - _947) + (cbMtdParam._m0[21u].x * _947)) * _729) + _947;
    float _961 = (_729 * (sqrt(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) - _665)) + _665;
    float _972 = (((_930 - _959) + (_959 * cbMtdParam._m0[22u].z)) * _779) + _959;
    float _973 = (((_931 - _960) + (_960 * cbMtdParam._m0[22u].z)) * _779) + _960;
    float _974 = ((sqrt(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) - _961) * _779) + _961;
    float _976 = cbMtdParam._m0[22u].x + _679.w;
    float _979 = fma(_974, _261 * NORMAL.x, fma(_973, _268 * TANGENT.x, (_254 * _246) * _972));
    float _982 = fma(_974, _261 * NORMAL.y, fma(_973, _268 * TANGENT.y, (_254 * _247) * _972));
    float _985 = fma(_974, _261 * NORMAL.z, fma(_973, _268 * TANGENT.z, (_254 * _248) * _972));
    float _989 = inversesqrt(dot(vec3(_979, _982, _985), vec3(_979, _982, _985)));
    float _990 = _989 * _979;
    float _991 = _989 * _982;
    float _992 = _989 * _985;
    float _4258 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _993 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4280 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4291 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4302 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4313 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _998 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _1012 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1062 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1052);
    float _1063 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1052);
    float _1064 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1052);
    float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
    float _1069 = _1062 * _1068;
    float _1070 = _1063 * _1068;
    float _1071 = _1064 * _1068;
    float _1077 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1078 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1096 = fma(_992, cbSceneParam._m0[5u].z, fma(_991, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _990));
    float _1099 = fma(_992, cbSceneParam._m0[6u].z, fma(_991, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _990));
    float _1102 = fma(_992, cbSceneParam._m0[7u].z, fma(_991, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _990));
    uint _1116 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1122 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * cbInstanceData._m0[_1116].x;
    float _1123 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * cbInstanceData._m0[_1116].y;
    float _1124 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * cbInstanceData._m0[_1116].z;
    float _4324 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1126 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _4346 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1127 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _1128 = 1.0 - _998;
    float _1129 = _1125 * _1128;
    float _1130 = _1126 * _1128;
    float _1131 = _1127 * _1128;
    float _1136 = (_1125 + (-0.039999999105930328369140625)) * _998;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _998;
    float _1138 = (_1127 + (-0.039999999105930328369140625)) * _998;
    float _1139 = _1136 + 0.039999999105930328369140625;
    float _1141 = _1137 + 0.039999999105930328369140625;
    float _1142 = _1138 + 0.039999999105930328369140625;
    vec4 _1151 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1077, cbSceneParam._m0[86u].y * _1078));
    float _1155 = ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * TEXCOORD_5.w) * _1151.x;
    float _1156 = dot(vec3(_990, _991, _992), vec3(_1069, _1070, _1071));
    float _1159 = _1156 * 2.0;
    float _1163 = (_1159 * _990) - _1069;
    float _1164 = (_1159 * _991) - _1070;
    float _1165 = (_1159 * _992) - _1071;
    float _1169 = abs(dot(vec3(_1069, _1070, _1071), vec3(_990, _991, _992)));
    float _4357 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1171 = sqrt(_993);
    float _1184 = exp2((_1171 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1171 * 3.0));
    float _1190 = (1.0 - _1184) * ((_1171 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1191 = _1184 * _1171;
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1528;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1253 = fma(_1227, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219));
        float _1257 = fma(_1227, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219));
        float _1261 = fma(_1227, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219));
        float _1286 = _1219 + _990;
        float _1287 = _1223 + _991;
        float _1288 = _1227 + _992;
        float _1298 = fma(_1288, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286)) - _1253;
        float _1299 = fma(_1288, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286)) - _1257;
        float _1300 = fma(_1288, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286)) - _1261;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1253 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1257 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[34u].z) + ((((((_1261 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1356 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1322.x + (-0.5));
        float _1358 = _1356 * (_1322.y + (-0.5));
        float _1359 = _1356 * (_1322.z + (-0.5));
        float _1366 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1329.x + (-0.5));
        float _1368 = _1366 * (_1329.y + (-0.5));
        float _1369 = _1366 * (_1329.z + (-0.5));
        float _1376 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1336.x + (-0.5));
        float _1378 = _1376 * (_1336.y + (-0.5));
        float _1379 = _1376 * (_1336.z + (-0.5));
        float _1386 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1343.x + (-0.5));
        float _1388 = _1386 * (_1343.y + (-0.5));
        float _1389 = _1386 * (_1343.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1410 = (dot(vec3(_990, _991, _992), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4383 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1420 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4394 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4405 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_1422 + 1.0))) + _1427) * _1390;
        float _1437 = _1358 * 0.5;
        float _1438 = _1368 * 0.5;
        float _1439 = _1378 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_990, _991, _992), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4438 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1464 + 1.0))) + _1469) * _1391;
        float _1479 = _1359 * 0.5;
        float _1480 = _1369 * 0.5;
        float _1481 = _1379 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_990, _991, _992), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4471 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1506 + 1.0))) + _1511) * _1392;
        _1528 = _1359;
        _1530 = _1358;
        _1531 = _1357;
        _1532 = _1369;
        _1533 = _1368;
        _1534 = _1367;
        _1535 = _1379;
        _1536 = _1378;
        _1537 = _1377;
        _1538 = _1392;
        _1539 = _1391;
        _1540 = _1390;
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1529;
        _1530 = _1529;
        _1531 = _1529;
        _1532 = _1529;
        _1533 = _1529;
        _1534 = _1529;
        _1535 = _1529;
        _1536 = _1529;
        _1537 = _1529;
        _1538 = _1529;
        _1539 = _1529;
        _1540 = _1529;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1567 = fma(_1227, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219));
        float _1571 = fma(_1227, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219));
        float _1575 = fma(_1227, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219));
        float _1598 = _1219 + _990;
        float _1599 = _1223 + _991;
        float _1600 = _1227 + _992;
        float _1610 = fma(_1600, cbModelParam._m0[30u].z, fma(_1599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1598)) - _1567;
        float _1611 = fma(_1600, cbModelParam._m0[31u].z, fma(_1599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1598)) - _1571;
        float _1612 = fma(_1600, cbModelParam._m0[32u].z, fma(_1599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1598)) - _1575;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1629 = ((_1616 * _1610) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1567 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1616 * _1611) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1571 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1616 * _1612) / cbModelParam._m0[35u].z) + ((((((_1575 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        float _1666 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1633.x + (-0.5));
        float _1668 = _1666 * (_1633.y + (-0.5));
        float _1669 = _1666 * (_1633.z + (-0.5));
        float _1676 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1640.x + (-0.5));
        float _1678 = _1676 * (_1640.y + (-0.5));
        float _1679 = _1676 * (_1640.z + (-0.5));
        float _1686 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1647.x + (-0.5));
        float _1688 = _1686 * (_1647.y + (-0.5));
        float _1689 = _1686 * (_1647.z + (-0.5));
        float _1696 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1654.x + (-0.5));
        float _1698 = _1696 * (_1654.y + (-0.5));
        float _1699 = _1696 * (_1654.z + (-0.5));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = _1667 * 0.5;
        float _1704 = _1677 * 0.5;
        float _1705 = _1687 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_990, _991, _992), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4512 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4523 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4534 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_1730 + 1.0))) + _1735) * _1700;
        float _1745 = _1668 * 0.5;
        float _1746 = _1678 * 0.5;
        float _1747 = _1688 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_990, _991, _992), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4545 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4556 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4567 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_1772 + 1.0))) + _1777) * _1701;
        float _1787 = _1669 * 0.5;
        float _1788 = _1679 * 0.5;
        float _1789 = _1689 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_990, _991, _992), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4600 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1814 + 1.0))) + _1819) * _1702;
        _1836 = _1669;
        _1837 = _1668;
        _1838 = _1667;
        _1839 = _1679;
        _1840 = _1678;
        _1841 = _1677;
        _1842 = _1689;
        _1843 = _1688;
        _1844 = _1687;
        _1845 = _1702;
        _1846 = _1701;
        _1847 = _1700;
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
    }
    else
    {
        _1836 = _1529;
        _1837 = _1529;
        _1838 = _1529;
        _1839 = _1529;
        _1840 = _1529;
        _1841 = _1529;
        _1842 = _1529;
        _1843 = _1529;
        _1844 = _1529;
        _1845 = _1529;
        _1846 = _1529;
        _1847 = _1529;
        _1848 = 0.0;
        _1849 = 0.0;
        _1850 = 0.0;
    }
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1541)) + _1541;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1542)) + _1542;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1543)) + _1543;
    float _1883 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1860));
    float _1904 = _1163 * 0.5;
    float _1905 = _1164 * 0.5;
    float _1906 = _1165 * 0.5;
    float _1907 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1910 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1913 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1947;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1920 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1528, _1532, _1535, _1538));
        float _1924 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1928 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1935 = dot(vec4(cbModelParam._m0[39u]), vec4(_1904, _1905, _1906, 1.0));
        _1947 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1947 = 1.0;
    }
    float _1958;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1949 = dot(vec4(cbModelParam._m0[40u]), vec4(_1904, _1905, _1906, 1.0));
        _1958 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1949) ? 0.0 : (isnan(0.0) ? _1949 : max(0.0, _1949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1958 = 1.0;
    }
    float _1962 = (_1958 * cbModelParam._m0[1u].x) + (_1947 * (1.0 - cbModelParam._m0[1u].x));
    float _1972 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _993);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1972 : min(cbModelParam._m0[25u].z, _1972));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2021 = fma(_1227, cbModelParam._m0[13u].z, fma(_1223, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1219)) + cbModelParam._m0[13u].w;
        float _2025 = fma(_1227, cbModelParam._m0[14u].z, fma(_1223, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1219)) + cbModelParam._m0[14u].w;
        float _2029 = fma(_1227, cbModelParam._m0[15u].z, fma(_1223, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1219)) + cbModelParam._m0[15u].w;
        float _2032 = fma(_1165, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163));
        float _2035 = fma(_1165, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163));
        float _2038 = fma(_1165, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163));
        float _2066;
        if (_2032 > 0.0)
        {
            _2066 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2066 = frontier_phi_14_12_ladder;
        }
        float _2238;
        if (_2035 > 0.0)
        {
            _2238 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2238 = frontier_phi_23_19_ladder;
        }
        float _2533;
        if (_2038 > 0.0)
        {
            _2533 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2533 = frontier_phi_35_30_ladder;
        }
        float _2535 = isnan(_2238) ? _2066 : (isnan(_2066) ? _2238 : min(_2066, _2238));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _2032) + _2021;
        float _2541 = (_2536 * _2035) + _2025;
        float _2542 = (_2536 * _2038) + _2029;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2543;
        float _2547 = _2543 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 > _2547) || ((_2541 < _2545) || ((_2540 < _2545) || (_2540 > _2547))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2542, cbModelParam._m0[9u].z, fma(_2541, cbModelParam._m0[9u].y, _2540 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2542, cbModelParam._m0[10u].z, fma(_2541, cbModelParam._m0[10u].y, _2540 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2542, cbModelParam._m0[11u].z, fma(_2541, cbModelParam._m0[11u].y, _2540 * cbModelParam._m0[11u].x))), _1973);
            frontier_phi_13_35_ladder = _2687.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2687.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2687.x * cbModelParam._m0[1u].y;
        }
        _2054 = frontier_phi_13_35_ladder_2;
        _2056 = frontier_phi_13_35_ladder_1;
        _2058 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1163, _1164, _1165), _1973);
        _2054 = _2042.x * cbModelParam._m0[1u].y;
        _2056 = _2042.y * cbModelParam._m0[1u].y;
        _2058 = _2042.z * cbModelParam._m0[1u].y;
    }
    float _2062 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _993);
    float _2063 = isnan(_2062) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2062 : min(cbModelParam._m0[25u].w, _2062));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2117 = fma(_1227, cbModelParam._m0[21u].z, fma(_1223, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1219)) + cbModelParam._m0[21u].w;
        float _2121 = fma(_1227, cbModelParam._m0[22u].z, fma(_1223, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1219)) + cbModelParam._m0[22u].w;
        float _2125 = fma(_1227, cbModelParam._m0[23u].z, fma(_1223, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1219)) + cbModelParam._m0[23u].w;
        float _2128 = fma(_1165, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163));
        float _2131 = fma(_1165, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163));
        float _2134 = fma(_1165, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163));
        float _2243;
        if (_2128 > 0.0)
        {
            _2243 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2243 = frontier_phi_25_21_ladder;
        }
        float _2560;
        if (_2131 > 0.0)
        {
            _2560 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2560 = frontier_phi_37_32_ladder;
        }
        float _2898;
        if (_2134 > 0.0)
        {
            _2898 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2898 = frontier_phi_47_44_ladder;
        }
        float _2900 = isnan(_2560) ? _2243 : (isnan(_2243) ? _2560 : min(_2243, _2560));
        float _2901 = isnan(_2898) ? _2900 : (isnan(_2900) ? _2898 : min(_2900, _2898));
        float _2905 = (_2901 * _2128) + _2117;
        float _2906 = (_2901 * _2131) + _2121;
        float _2907 = (_2901 * _2134) + _2125;
        float _2908 = _2901 * 9.9999997473787516355514526367188e-05;
        float _2909 = (-1.0) - _2908;
        float _2911 = _2908 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2907 > _2911) || ((_2907 < _2909) || ((_2906 > _2911) || ((_2906 < _2909) || ((_2905 < _2909) || (_2905 > _2911))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3029 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2907, cbModelParam._m0[17u].z, fma(_2906, cbModelParam._m0[17u].y, _2905 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2907, cbModelParam._m0[18u].z, fma(_2906, cbModelParam._m0[18u].y, _2905 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2907, cbModelParam._m0[19u].z, fma(_2906, cbModelParam._m0[19u].y, _2905 * cbModelParam._m0[19u].x))), _2063);
            frontier_phi_22_47_ladder = _3029.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3029.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3029.x * cbModelParam._m0[1u].z;
        }
        _2153 = frontier_phi_22_47_ladder_2;
        _2155 = frontier_phi_22_47_ladder_1;
        _2157 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1163, _1164, _1165), _2063);
        _2153 = _2137.x * cbModelParam._m0[1u].z;
        _2155 = _2137.y * cbModelParam._m0[1u].z;
        _2157 = _2137.z * cbModelParam._m0[1u].z;
    }
    float _2170 = (((_1190 * _1139) + _1191) * _1155) * ((cbModelParam._m0[1u].w * (_2153 - _2054)) + _2054);
    float _2172 = (((_1190 * _1141) + _1191) * _1155) * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2174 = (((_1190 * _1142) + _1191) * _1155) * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2177 = fma(_2174, cbSceneParam._m0[89u].z, fma(_2172, cbSceneParam._m0[89u].y, _2170 * cbSceneParam._m0[89u].x));
    float _2180 = fma(_2174, cbSceneParam._m0[90u].z, fma(_2172, cbSceneParam._m0[90u].y, _2170 * cbSceneParam._m0[90u].x));
    float _2183 = fma(_2174, cbSceneParam._m0[91u].z, fma(_2172, cbSceneParam._m0[91u].y, _2170 * cbSceneParam._m0[91u].x));
    float _2217 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2221 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2225 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2230 = _2217 / _2229;
    float _2231 = _2221 / _2229;
    float _2232 = _2225 / _2229;
    float _2379;
    float _2380;
    float _2381;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2259 = ((uint(_2232 > cbSceneParam._m0[59u].y) + uint(_2232 > cbSceneParam._m0[59u].x)) + uint(_2232 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2260 = _2259 + 43u;
        uint _2268 = _2259 + 44u;
        uint _2276 = _2259 + 45u;
        uint _2284 = _2259 + 46u;
        float _2295 = fma(_2229, cbSceneParam._m0[_2260].w, fma(_2225, cbSceneParam._m0[_2260].z, fma(_2221, cbSceneParam._m0[_2260].y, _2217 * cbSceneParam._m0[_2260].x)));
        float _2299 = fma(_2229, cbSceneParam._m0[_2268].w, fma(_2225, cbSceneParam._m0[_2268].z, fma(_2221, cbSceneParam._m0[_2268].y, _2217 * cbSceneParam._m0[_2268].x)));
        float _2307 = fma(_2229, cbSceneParam._m0[_2284].w, fma(_2225, cbSceneParam._m0[_2284].z, fma(_2221, cbSceneParam._m0[_2284].y, _2217 * cbSceneParam._m0[_2284].x)));
        float _2312 = cbSceneParam._m0[33u].z * _2307;
        float _2314 = cbSceneParam._m0[33u].w * _2307;
        float _2317 = fma(_2229, cbSceneParam._m0[_2276].w, fma(_2225, cbSceneParam._m0[_2276].z, fma(_2221, cbSceneParam._m0[_2276].y, _2217 * cbSceneParam._m0[_2276].x))) / _2307;
        float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_2231 * _2231) + (_2230 * _2230)) + (_2232 * _2232))) * cbSceneParam._m0[33u].y;
        float _4726 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2372 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2312 + _2295) / _2307, (_2314 + _2299) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2314 + _2295) / _2307, (_2299 - _2312) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 - _2312) / _2307, (_2299 - _2314) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 - _2314) / _2307, (_2312 + _2299) / _2307), _2317), 0.0)).x), vec4(0.25)));
        _2379 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
        _2380 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
        _2381 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2379 = 1.0;
        _2380 = 1.0;
        _2381 = 1.0;
    }
    float _2445;
    float _2447;
    float _2449;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2433 = fma(_2229, cbSceneParam._m0[63u].w, fma(_2225, cbSceneParam._m0[63u].z, fma(_2221, cbSceneParam._m0[63u].y, _2217 * cbSceneParam._m0[63u].x)));
        float _2434 = fma(_2229, cbSceneParam._m0[60u].w, fma(_2225, cbSceneParam._m0[60u].z, fma(_2221, cbSceneParam._m0[60u].y, _2217 * cbSceneParam._m0[60u].x))) / _2433;
        float _2435 = fma(_2229, cbSceneParam._m0[61u].w, fma(_2225, cbSceneParam._m0[61u].z, fma(_2221, cbSceneParam._m0[61u].y, _2217 * cbSceneParam._m0[61u].x))) / _2433;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2434 >= cbSceneParam._m0[64u].x) && (_2435 >= cbSceneParam._m0[64u].y)) && (_2434 <= cbSceneParam._m0[64u].z)) && (_2435 <= cbSceneParam._m0[64u].w))
        {
            float _2573 = fma(_2229, cbSceneParam._m0[62u].w, fma(_2225, cbSceneParam._m0[62u].z, fma(_2221, cbSceneParam._m0[62u].y, _2217 * cbSceneParam._m0[62u].x))) / _2433;
            float _2577 = isnan(cbSceneParam._m0[41u].w) ? _2573 : (isnan(_2573) ? cbSceneParam._m0[41u].w : max(_2573, cbSceneParam._m0[41u].w));
            float _2620 = (cbSceneParam._m0[33u].x - sqrt(((_2231 * _2231) + (_2230 * _2230)) + (_2232 * _2232))) * cbSceneParam._m0[33u].y;
            float _4742 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
            float _2627 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2434, cbSceneParam._m0[33u].w + _2435), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2434, _2435 - cbSceneParam._m0[33u].z), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2434 - cbSceneParam._m0[33u].z, _2435 - cbSceneParam._m0[33u].w), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2434 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2435), _2577), 0.0)).x), vec4(0.25)));
            float _2631 = 1.0 - (_2627 * cbSceneParam._m0[34u].x);
            float _2632 = 1.0 - (_2627 * cbSceneParam._m0[34u].y);
            float _2633 = 1.0 - (_2627 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
            frontier_phi_34_33_ladder_1 = isnan(_2632) ? _2380 : (isnan(_2380) ? _2632 : min(_2380, _2632));
            frontier_phi_34_33_ladder_2 = isnan(_2631) ? _2379 : (isnan(_2379) ? _2631 : min(_2379, _2631));
        }
        else
        {
            frontier_phi_34_33_ladder = _2381;
            frontier_phi_34_33_ladder_1 = _2380;
            frontier_phi_34_33_ladder_2 = _2379;
        }
        _2445 = frontier_phi_34_33_ladder_2;
        _2447 = frontier_phi_34_33_ladder_1;
        _2449 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2445 = _2379;
        _2447 = _2380;
        _2449 = _2381;
    }
    uvec4 _2454 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2456 = _2454.x * 14u;
    uint _2457 = _2456 + 13u;
    float _2464 = _1155 + (-1.0);
    float _2469 = (cbLight._m0[_2457].x * _2464) + 1.0;
    float _2470 = (cbLight._m0[_2457].y * _2464) + 1.0;
    float _2471 = (cbLight._m0[_2457].z * _2464) + 1.0;
    float _2472 = (cbLight._m0[_2457].w * _2464) + 1.0;
    uint _2473 = _2456 + 5u;
    float _2479 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
    uint _2483 = _2456 + 4u;
    float _2492 = isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0));
    uint _2496 = _2456 | 1u;
    float _2507 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_990, _991, _992));
    float _2510 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_990, _991, _992));
    float _4778 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _4789 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2515 = (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0))) * 0.3183098733425140380859375;
    float _2517 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * 0.3183098733425140380859375;
    float _2524 = ((cbLight._m0[_2473].x * _2479) * _2517) + (((cbLight._m0[_2483].x * _2445) * _2492) * _2515);
    float _2525 = ((_2479 * cbLight._m0[_2473].y) * _2517) + (((cbLight._m0[_2483].y * _2447) * _2492) * _2515);
    float _2526 = ((_2479 * cbLight._m0[_2473].z) * _2517) + (((cbLight._m0[_2483].z * _2449) * _2492) * _2515);
    uvec4 _2530 = floatBitsToUint(cbLight._m0[_2456 + 12u]);
    bool _2532 = _2530.x == 0u;
    float _2634;
    float _2636;
    float _2638;
    if (_2532)
    {
        _2634 = _2524;
        _2636 = _2525;
        _2638 = _2526;
    }
    else
    {
        uint _2642 = _2456 + 6u;
        float _2658 = (dot(vec3(cbLight._m0[_2456 + 2u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2659 = _2658 * _2658;
        float _4800 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2660 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2661 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
        _2634 = (((cbLight._m0[_2642].x * 0.3183098733425140380859375) * _2660) * _2661) + _2524;
        _2636 = (((cbLight._m0[_2642].y * 0.3183098733425140380859375) * _2660) * _2661) + _2525;
        _2638 = (((cbLight._m0[_2642].z * 0.3183098733425140380859375) * _2660) * _2661) + _2526;
    }
    bool _2641 = _2530.y == 0u;
    float _2696;
    float _2698;
    float _2700;
    if (_2641)
    {
        _2696 = _2634;
        _2698 = _2636;
        _2700 = _2638;
    }
    else
    {
        uint _2869 = _2456 + 7u;
        float _2885 = (dot(vec3(cbLight._m0[_2456 + 3u].xyz), vec3(_990, _991, _992)) * 0.5) + 0.5;
        float _2886 = _2885 * _2885;
        float _4816 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2887 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2888 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2696 = (((cbLight._m0[_2869].x * 0.3183098733425140380859375) * _2887) * _2888) + _2634;
        _2698 = (((cbLight._m0[_2869].y * 0.3183098733425140380859375) * _2887) * _2888) + _2636;
        _2700 = (((cbLight._m0[_2869].z * 0.3183098733425140380859375) * _2887) * _2888) + _2638;
    }
    uint _2703 = _2456 + 8u;
    float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _993) * 0.949999988079071044921875);
    float _2717 = _2716 * _2716;
    float _2718 = cbLight._m0[_2456].x + _1069;
    float _2719 = cbLight._m0[_2456].y + _1070;
    float _2720 = cbLight._m0[_2456].z + _1071;
    float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
    float _2725 = _2724 * _2718;
    float _2726 = _2724 * _2719;
    float _2727 = _2724 * _2720;
    float _2728 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2456].xyz));
    float _4832 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2731 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _4843 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _2732 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    float _2733 = dot(vec3(_990, _991, _992), vec3(_2725, _2726, _2727));
    float _4854 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2736 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
    float _2737 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2725, _2726, _2727));
    float _4865 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2741 = _2717 * _2717;
    float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
    float _2753 = exp2(log2(1.0 - (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) * 5.0);
    float _2754 = 0.959999978542327880859375 - _1136;
    float _2756 = 0.959999978542327880859375 - _1137;
    float _2757 = 0.959999978542327880859375 - _1138;
    float _2764 = 1.0 - _2717;
    float _2775 = (0.5 / (((_2732 * ((_2731 * _2764) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2764) + _2717) * _2731))) * _2731;
    float _4876 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2777 = (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
    uint _2791 = _2456 + 9u;
    float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _993) * 0.949999988079071044921875);
    float _2803 = _2802 * _2802;
    float _2804 = cbLight._m0[_2496].x + _1069;
    float _2805 = cbLight._m0[_2496].y + _1070;
    float _2806 = cbLight._m0[_2496].z + _1071;
    float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
    float _2811 = _2810 * _2804;
    float _2812 = _2810 * _2805;
    float _2813 = _2810 * _2806;
    float _2814 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2496].xyz));
    float _4887 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2817 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
    float _2818 = dot(vec3(_990, _991, _992), vec3(_2811, _2812, _2813));
    float _4898 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2821 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _2822 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2811, _2812, _2813));
    float _4909 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2826 = _2803 * _2803;
    float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
    float _2837 = exp2(log2(1.0 - (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) * 5.0);
    float _2844 = 1.0 - _2803;
    float _2854 = (0.5 / (((_2732 * ((_2817 * _2844) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2844) + _2803) * _2817))) * _2817;
    float _4920 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2856 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
    float _2866 = (((((_2837 * _2754) + _1139) * cbLight._m0[_2791].x) * _2856) * _2479) + ((((cbLight._m0[_2703].x * _2445) * ((_2753 * _2754) + _1139)) * _2777) * _2492);
    float _2867 = (((((_2837 * _2756) + _1141) * cbLight._m0[_2791].y) * _2856) * _2479) + ((((cbLight._m0[_2703].y * _2447) * ((_2753 * _2756) + _1141)) * _2777) * _2492);
    float _2868 = (((((_2837 * _2757) + _1142) * cbLight._m0[_2791].z) * _2856) * _2479) + ((((cbLight._m0[_2703].z * _2449) * ((_2753 * _2757) + _1142)) * _2777) * _2492);
    float _2924;
    float _2926;
    float _2928;
    if (_2532)
    {
        _2924 = _2866;
        _2926 = _2867;
        _2928 = _2868;
    }
    else
    {
        uint _2930 = _2456 + 2u;
        uint _2934 = _2456 + 10u;
        float _2948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2930].w)) * _993) * 0.949999988079071044921875);
        float _2949 = _2948 * _2948;
        float _2950 = cbLight._m0[_2930].x + _1069;
        float _2951 = cbLight._m0[_2930].y + _1070;
        float _2952 = cbLight._m0[_2930].z + _1071;
        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
        float _2957 = _2956 * _2950;
        float _2958 = _2956 * _2951;
        float _2959 = _2956 * _2952;
        float _2960 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_2930].xyz));
        float _4931 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
        float _2964 = dot(vec3(_990, _991, _992), vec3(_2957, _2958, _2959));
        float _4942 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2967 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
        float _2968 = dot(vec3(cbLight._m0[_2930].xyz), vec3(_2957, _2958, _2959));
        float _4953 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2972 = _2949 * _2949;
        float _2976 = ((_2967 * _2967) * (_2972 + (-1.0))) + 1.0;
        float _2983 = exp2(log2(1.0 - (isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0)))) * 5.0);
        float _2990 = 1.0 - _2949;
        float _3000 = (0.5 / (((_2732 * ((_2963 * _2990) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2990) + _2949) * _2963))) * _2963;
        float _4964 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3002 = (isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2972 / ((_2976 * _2976) * 3.141590118408203125));
        float _3003 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
        _2924 = (((((_2983 * _2754) + _1139) * cbLight._m0[_2934].x) * _3002) * _3003) + _2866;
        _2926 = (((((_2983 * _2756) + _1141) * cbLight._m0[_2934].y) * _3002) * _3003) + _2867;
        _2928 = (((((_2983 * _2757) + _1142) * cbLight._m0[_2934].z) * _3002) * _3003) + _2868;
    }
    float _3034;
    float _3036;
    float _3038;
    if (_2641)
    {
        _3034 = _2924;
        _3036 = _2926;
        _3038 = _2928;
    }
    else
    {
        uint _3045 = _2456 + 3u;
        uint _3049 = _2456 + 11u;
        float _3063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3045].w)) * _993) * 0.949999988079071044921875);
        float _3064 = _3063 * _3063;
        float _3065 = cbLight._m0[_3045].x + _1069;
        float _3066 = cbLight._m0[_3045].y + _1070;
        float _3067 = cbLight._m0[_3045].z + _1071;
        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
        float _3072 = _3071 * _3065;
        float _3073 = _3071 * _3066;
        float _3074 = _3071 * _3067;
        float _3075 = dot(vec3(_990, _991, _992), vec3(cbLight._m0[_3045].xyz));
        float _4980 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3078 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
        float _3079 = dot(vec3(_990, _991, _992), vec3(_3072, _3073, _3074));
        float _4991 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        float _3082 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
        float _3083 = dot(vec3(cbLight._m0[_3045].xyz), vec3(_3072, _3073, _3074));
        float _5002 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3087 = _3064 * _3064;
        float _3091 = ((_3082 * _3082) * (_3087 + (-1.0))) + 1.0;
        float _3098 = exp2(log2(1.0 - (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0)))) * 5.0);
        float _3105 = 1.0 - _3064;
        float _3115 = (0.5 / (((_2732 * ((_3078 * _3105) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _3105) + _3064) * _3078))) * _3078;
        float _5013 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
        float _3117 = (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_3087 / ((_3091 * _3091) * 3.141590118408203125));
        float _3118 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _3034 = (((((_3098 * _2754) + _1139) * cbLight._m0[_3049].x) * _3117) * _3118) + _2924;
        _3036 = (((((_3098 * _2756) + _1141) * cbLight._m0[_3049].y) * _3117) * _3118) + _2926;
        _3038 = (((((_3098 * _2757) + _1142) * cbLight._m0[_3049].z) * _3117) * _3118) + _2928;
    }
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    if (_2454.y == 0u)
    {
        uvec4 _3139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3140 = _3139.x;
        uint _3151 = uint((float(_3139.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1078) / _3140))) + floor(float(uint(cbSceneParam._m0[85u].x * _1077) / _3140)));
        float _3161 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3162 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
        uint _3165 = uint(isnan(14.0) ? _3162 : (isnan(_3162) ? 14.0 : min(_3162, 14.0)));
        uvec4 _3170 = texelFetch(g_lightClusterGridBuffer, int(((_3165 << 2u) + (_3151 << 6u)) >> 2u));
        uint _3171 = _3170.x;
        uint _3172 = _3139.z;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        if (((((1u << ((_3172 >> 4u) & 15u)) + 4294967295u) & _3171) == 0u) || ((_3172 & 240u) == 0u))
        {
            _3251 = 0.0;
            _3253 = 0.0;
            _3255 = 0.0;
            _3257 = 0.0;
            _3259 = 0.0;
            _3261 = 0.0;
        }
        else
        {
            float _3252;
            float _3254;
            float _3256;
            float _3258;
            float _3260;
            float _3262;
            float _3396 = 0.0;
            float _3397 = 0.0;
            float _3398 = 0.0;
            float _3399 = 0.0;
            float _3400 = 0.0;
            float _3401 = 0.0;
            uint _3402 = 0u;
            uint _3411;
            bool _3412;
            for (;;)
            {
                _3411 = texelFetch(g_lightClassification, int((((_3165 << 5u) + (_3151 << 9u)) + (_3402 << 2u)) >> 2u)).x;
                _3412 = _3411 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3412)
                {
                    frontier_phi_66_pred = _3401;
                    frontier_phi_66_pred_1 = _3400;
                    frontier_phi_66_pred_2 = _3399;
                    frontier_phi_66_pred_3 = _3398;
                    frontier_phi_66_pred_4 = _3397;
                    frontier_phi_66_pred_5 = _3396;
                }
                else
                {
                    float _3520;
                    float _3521;
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    uint _3526;
                    _3520 = _3396;
                    _3521 = _3397;
                    _3522 = _3398;
                    _3523 = _3399;
                    _3524 = _3400;
                    _3525 = _3401;
                    _3526 = _3411;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    for (;;)
                    {
                        uint _3530 = uint(findLSB(_3526)) + (_3402 << 5u);
                        uint _3527 = (_3526 + 4294967295u) & _3526;
                        uint _3532 = _3530 * 48u;
                        vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3532)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 3u)).x));
                        uint _3552 = (_3530 * 48u) + 4u;
                        vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3552)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 3u)).x));
                        uint _3571 = (_3530 * 48u) + 8u;
                        vec3 _3582 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3571)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3571 + 2u)).x));
                        float _3586 = _3546.x - _2230;
                        float _3587 = _3546.y - _2231;
                        float _3588 = _3546.z - _2232;
                        float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                        float _3592 = inversesqrt(_3589);
                        float _3593 = _3592 * _3586;
                        float _3594 = _3592 * _3587;
                        float _3595 = _3592 * _3588;
                        float _3596 = dot(vec3(_1096, _1099, _1102), vec3(_3593, _3594, _3595));
                        float _3601 = 1.0 - (_3589 * _3546.w);
                        float _5039 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3602 = isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0));
                        float _3603 = sqrt(_3589) * _3565.w;
                        float _3606 = 1.39999997615814208984375 / (_3603 + 1.39999997615814208984375);
                        float _3607 = _3606 * _3606;
                        float _3610 = ((1.0 - _3607) * _3596) + _3607;
                        float _3613 = _3603 * _3603;
                        float _3617 = ((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3602) / ((_3613 * 0.699999988079071044921875) + 1.0);
                        float _3621 = (-0.0) - _2230;
                        float _3622 = (-0.0) - _2231;
                        float _3623 = (-0.0) - _2232;
                        float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                        float _3628 = _3627 * _3621;
                        float _3629 = _3627 * _3622;
                        float _3630 = _3627 * _3623;
                        float _3637 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                        float _3638 = 1.0 - _1171;
                        float _3645 = sqrt(1.0 - ((1.0 - (_3638 * _3638)) * (1.0 - (_3637 * _3637))));
                        float _3646 = _3645 * _3645;
                        float _3647 = _3646 * _3646;
                        float _3648 = _3628 + _3593;
                        float _3649 = _3629 + _3594;
                        float _3650 = _3630 + _3595;
                        float _3654 = inversesqrt(dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650)));
                        float _3658 = dot(vec3(_1096, _1099, _1102), vec3(_3628, _3629, _3630));
                        float _5055 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                        float _3661 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                        float _3662 = dot(vec3(_1096, _1099, _1102), vec3(_3654 * _3648, _3654 * _3649, _3654 * _3650));
                        float _5066 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                        float _3665 = isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0));
                        float _3669 = ((_3665 * _3665) * (_3647 + (-1.0))) + 1.0;
                        float _3670 = _3606 * _3646;
                        float _3671 = _3670 * _3670;
                        float _3674 = ((1.0 - _3671) * _3596) + _3671;
                        float _5077 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3675 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                        float _3676 = 1.0 - _3646;
                        float _3686 = (0.5 / (((_3675 * ((_3661 * _3676) + _3646)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3646) * _3661))) * _3675;
                        float _5088 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3697 = (((_3647 * 3.1415927410125732421875) * (isnan(1.0) ? _5088 : (isnan(_5088) ? 1.0 : min(_5088, 1.0)))) / ((_3669 * _3669) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125))) * _3602;
                        _3455 = (_3617 * _3565.x) + _3523;
                        _3456 = (_3617 * _3565.y) + _3524;
                        _3457 = (_3617 * _3565.z) + _3525;
                        _3452 = (_3697 * _3582.x) + _3520;
                        _3453 = (_3697 * _3582.y) + _3521;
                        _3454 = (_3697 * _3582.z) + _3522;
                        if (_3527 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3520 = _3452;
                            _3521 = _3453;
                            _3522 = _3454;
                            _3523 = _3455;
                            _3524 = _3456;
                            _3525 = _3457;
                            _3526 = _3527;
                        }
                    }
                    frontier_phi_66_pred = _3457;
                    frontier_phi_66_pred_1 = _3456;
                    frontier_phi_66_pred_2 = _3455;
                    frontier_phi_66_pred_3 = _3454;
                    frontier_phi_66_pred_4 = _3453;
                    frontier_phi_66_pred_5 = _3452;
                }
                _3262 = frontier_phi_66_pred;
                _3260 = frontier_phi_66_pred_1;
                _3258 = frontier_phi_66_pred_2;
                _3256 = frontier_phi_66_pred_3;
                _3254 = frontier_phi_66_pred_4;
                _3252 = frontier_phi_66_pred_5;
                uint _3403 = _3402 + 1u;
                if (_3403 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3396 = _3252;
                    _3397 = _3254;
                    _3398 = _3256;
                    _3399 = _3258;
                    _3400 = _3260;
                    _3401 = _3262;
                    _3402 = _3403;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3251 = _3252;
            _3253 = _3254;
            _3255 = _3256;
            _3257 = _3258;
            _3259 = _3260;
            _3261 = _3262;
        }
        uvec4 _3265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3266 = _3265.z;
        uint _3268 = (_3266 >> 8u) & 15u;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        float _3372;
        float _3374;
        if (((4294967295u << _3268) & _3171) == 0u)
        {
            _3364 = _3251;
            _3366 = _3253;
            _3368 = _3255;
            _3370 = _3257;
            _3372 = _3259;
            _3374 = _3261;
        }
        else
        {
            float _3389 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _3390 = _3389 * _2230;
            float _3391 = _3389 * _2231;
            float _3392 = _3389 * _2232;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3268 < ((_3266 >> 12u) & 15u))
            {
                float _3365;
                float _3367;
                float _3369;
                float _3371;
                float _3373;
                float _3375;
                float _3503 = _3251;
                float _3504 = _3253;
                float _3505 = _3255;
                float _3506 = _3257;
                float _3507 = _3259;
                float _3508 = _3261;
                uint _3509 = _3268;
                uint _3518;
                bool _3519;
                for (;;)
                {
                    _3518 = texelFetch(g_lightClassification, int((((_3165 << 5u) + (_3151 << 9u)) + (_3509 << 2u)) >> 2u)).x;
                    _3519 = _3518 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3519)
                    {
                        frontier_phi_72_pred = _3508;
                        frontier_phi_72_pred_1 = _3507;
                        frontier_phi_72_pred_2 = _3506;
                        frontier_phi_72_pred_3 = _3505;
                        frontier_phi_72_pred_4 = _3504;
                        frontier_phi_72_pred_5 = _3503;
                    }
                    else
                    {
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _3715 = _3503;
                        float _3716 = _3504;
                        float _3717 = _3505;
                        float _3718 = _3506;
                        float _3719 = _3507;
                        float _3720 = _3508;
                        uint _3721 = _3518;
                        uint _3722;
                        vec4 _3747;
                        float _3748;
                        vec4 _3763;
                        vec3 _3775;
                        vec4 _3790;
                        vec4 _3805;
                        float _3851;
                        bool _3852;
                        for (;;)
                        {
                            uint _3732 = ((_3509 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3721));
                            _3722 = (_3721 + 4294967295u) & _3721;
                            uint _3734 = _3732 * 40u;
                            _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            _3748 = _3747.w;
                            uint _3750 = (_3732 * 40u) + 4u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3765 = (_3732 * 40u) + 8u;
                            _3775 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x));
                            uint _3777 = (_3732 * 40u) + 16u;
                            _3790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3777 + 3u)).x));
                            uint _3792 = (_3732 * 40u) + 20u;
                            _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3807 = (_3732 * 40u) + 24u;
                            vec4 _3820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 3u)).x));
                            uint _3826 = (_3732 * 40u) + 28u;
                            vec4 _3839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 3u)).x));
                            _3851 = fma(_2232, _3839.z, fma(_2231, _3839.y, _3839.x * _2230)) + _3839.w;
                            _3852 = !((fma(_2232, _3820.z, fma(_2231, _3820.y, _3820.x * _2230)) + _3820.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3852)
                            {
                                float _3879 = _3747.x - _2230;
                                float _3880 = _3747.y - _2231;
                                float _3881 = _3747.z - _2232;
                                float _3882 = dot(vec3(_3879, _3880, _3881), vec3(_3879, _3880, _3881));
                                float _3885 = inversesqrt(_3882);
                                float _3886 = _3885 * _3879;
                                float _3887 = _3885 * _3880;
                                float _3888 = _3885 * _3881;
                                float _3892 = 1.0 - (_3882 / (_3748 * _3748));
                                float _5099 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5099 : (isnan(_5099) ? 1.0 : min(_5099, 1.0));
                                float _3897 = sqrt(_3882) * _3763.w;
                                float _3899 = 1.39999997615814208984375 / (_3897 + 1.39999997615814208984375);
                                float _3900 = _3899 * _3899;
                                float _3903 = ((1.0 - _3900) * dot(vec3(_3886, _3887, _3888), vec3(_1096, _1099, _1102))) + _3900;
                                float _3906 = _3897 * _3897;
                                float _3910 = (fma(_2232, _3790.z, fma(_2231, _3790.y, _3790.x * _2230)) + _3790.w) / _3851;
                                float _3911 = (fma(_2232, _3805.z, fma(_2231, _3805.y, _3805.x * _2230)) + _3805.w) / _3851;
                                float _3915 = 1.0 - dot(vec2(_3910, _3911), vec2(_3910, _3911));
                                float _5115 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3917 = _3916 * (((isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0))) * _3893) / ((_3906 * 0.699999988079071044921875) + 1.0));
                                float _3929 = exp2(log2(1.0 / ((_3906 * 3.5) + 5.0)) * 0.25);
                                float _3930 = 1.0 - _1171;
                                float _3937 = sqrt(1.0 - ((1.0 - (_3930 * _3930)) * (1.0 - (_3929 * _3929))));
                                float _3938 = _3937 * _3937;
                                float _3939 = _3938 * _3938;
                                float _3940 = _3886 - _3390;
                                float _3941 = _3887 - _3391;
                                float _3942 = _3888 - _3392;
                                float _3946 = inversesqrt(dot(vec3(_3940, _3941, _3942), vec3(_3940, _3941, _3942)));
                                float _3950 = dot(vec3(_1096, _1099, _1102), vec3((-0.0) - _3390, (-0.0) - _3391, (-0.0) - _3392));
                                float _5126 = isnan(0.0) ? _3950 : (isnan(_3950) ? 0.0 : max(_3950, 0.0));
                                float _3953 = isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0));
                                float _3954 = dot(vec3(_1096, _1099, _1102), vec3(_3946 * _3940, _3946 * _3941, _3946 * _3942));
                                float _5137 = isnan(0.0) ? _3954 : (isnan(_3954) ? 0.0 : max(_3954, 0.0));
                                float _3957 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3961 = ((_3957 * _3957) * (_3939 + (-1.0))) + 1.0;
                                float _3962 = _3899 * _3938;
                                float _3963 = _3962 * _3962;
                                float _3969 = ((1.0 - _3963) * dot(vec3(_1096, _1099, _1102), vec3(_3886, _3887, _3888))) + _3963;
                                float _5148 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3970 = isnan(1.0) ? _5148 : (isnan(_5148) ? 1.0 : min(_5148, 1.0));
                                float _3971 = 1.0 - _3938;
                                float _3981 = (0.5 / (((_3970 * ((_3953 * _3971) + _3938)) + 9.9999999392252902907785028219223e-09) + (((_3970 * _3971) + _3938) * _3953))) * _3970;
                                float _5159 = isnan(0.0) ? _3981 : (isnan(_3981) ? 0.0 : max(_3981, 0.0));
                                float _3991 = (_3916 * _3893) * (((_3939 * 3.1415927410125732421875) * (isnan(1.0) ? _5159 : (isnan(_5159) ? 1.0 : min(_5159, 1.0)))) / ((_3961 * _3961) * ((_3906 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3917 * _3763.y;
                                frontier_phi_78_pred_1 = _3917 * _3763.x;
                                frontier_phi_78_pred_2 = _3991 * _3775.z;
                                frontier_phi_78_pred_3 = _3991 * _3775.y;
                                frontier_phi_78_pred_4 = _3991 * _3775.x;
                                frontier_phi_78_pred_5 = _3917 * _3763.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3999 = frontier_phi_78_pred;
                            _3998 = frontier_phi_78_pred_1;
                            _3997 = frontier_phi_78_pred_2;
                            _3996 = frontier_phi_78_pred_3;
                            _3995 = frontier_phi_78_pred_4;
                            _4000 = frontier_phi_78_pred_5;
                            _3705 = _3998 + _3718;
                            _3706 = _3999 + _3719;
                            _3707 = _4000 + _3720;
                            _3702 = _3995 + _3715;
                            _3703 = _3996 + _3716;
                            _3704 = _3997 + _3717;
                            if (_3722 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3715 = _3702;
                                _3716 = _3703;
                                _3717 = _3704;
                                _3718 = _3705;
                                _3719 = _3706;
                                _3720 = _3707;
                                _3721 = _3722;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3707;
                        frontier_phi_72_pred_1 = _3706;
                        frontier_phi_72_pred_2 = _3705;
                        frontier_phi_72_pred_3 = _3704;
                        frontier_phi_72_pred_4 = _3703;
                        frontier_phi_72_pred_5 = _3702;
                    }
                    _3375 = frontier_phi_72_pred;
                    _3373 = frontier_phi_72_pred_1;
                    _3371 = frontier_phi_72_pred_2;
                    _3369 = frontier_phi_72_pred_3;
                    _3367 = frontier_phi_72_pred_4;
                    _3365 = frontier_phi_72_pred_5;
                    uint _3510 = _3509 + 1u;
                    if (_3510 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3503 = _3365;
                        _3504 = _3367;
                        _3505 = _3369;
                        _3506 = _3371;
                        _3507 = _3373;
                        _3508 = _3375;
                        _3509 = _3510;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3375;
                frontier_phi_60_61_ladder_1 = _3373;
                frontier_phi_60_61_ladder_2 = _3369;
                frontier_phi_60_61_ladder_3 = _3367;
                frontier_phi_60_61_ladder_4 = _3365;
                frontier_phi_60_61_ladder_5 = _3371;
            }
            else
            {
                frontier_phi_60_61_ladder = _3261;
                frontier_phi_60_61_ladder_1 = _3259;
                frontier_phi_60_61_ladder_2 = _3255;
                frontier_phi_60_61_ladder_3 = _3253;
                frontier_phi_60_61_ladder_4 = _3251;
                frontier_phi_60_61_ladder_5 = _3257;
            }
            _3364 = frontier_phi_60_61_ladder_4;
            _3366 = frontier_phi_60_61_ladder_3;
            _3368 = frontier_phi_60_61_ladder_2;
            _3370 = frontier_phi_60_61_ladder_5;
            _3372 = frontier_phi_60_61_ladder_1;
            _3374 = frontier_phi_60_61_ladder;
        }
        float _3379 = isnan(1.0) ? _1155 : (isnan(_1155) ? 1.0 : min(_1155, 1.0));
        _3184 = (_3379 * _3370) + _2696;
        _3186 = (_3379 * _3372) + _2698;
        _3188 = (_3379 * _3374) + _2700;
        _3190 = ((_3364 * _1139) * _3379) + _3034;
        _3192 = ((_3366 * _1141) * _3379) + _3036;
        _3194 = ((_3368 * _1142) * _3379) + _3038;
    }
    else
    {
        _3184 = _2696;
        _3186 = _2698;
        _3188 = _2700;
        _3190 = _3034;
        _3192 = _3036;
        _3194 = _3038;
    }
    float _5175 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _5186 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _5197 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    uint _3214 = _293 + 6u;
    float _3222 = _1077 / cbSceneParam._m0[86u].x;
    float _3223 = _1078 / cbSceneParam._m0[86u].y;
    vec4 _3237 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3222, _3223, (log2((isnan(cbSceneParam._m0[77u].w) ? _1012 : (isnan(_1012) ? cbSceneParam._m0[77u].w : min(_1012, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3239 = _3237.x;
    float _3240 = _3237.y;
    float _3241 = _3237.z;
    float _3242 = _3237.w;
    float _3314;
    float _3316;
    float _3318;
    float _3320;
    if (_1012 > cbSceneParam._m0[78u].w)
    {
        float _3276 = isnan(_1012) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1012 : min(cbSceneParam._m0[80u].w, _1012));
        float _3277 = _3276 / _1012;
        float _3288 = _3277 * _1062;
        float _3289 = _1063 * _3277;
        float _3290 = (-0.0) - _3289;
        float _3292 = _3277 * _1064;
        float _3294 = (cbSceneParam._m0[77u].w * _3290) / _3276;
        float _3295 = _3294 + cbSceneParam._m0[79u].w;
        float _3296 = cbSceneParam._m0[79u].w - _3289;
        float _3302 = sqrt(((_3288 * _3288) + (_3289 * _3289)) + (_3292 * _3292));
        float _3305 = (1.0 - (cbSceneParam._m0[77u].w / _3276)) * _3302;
        float _3310 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3312 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3465;
        if (abs((_3290 - _3294) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3465 = ((((_3295 > 0.0) ? exp2(_3310 * _3295) : (2.0 - exp2(_3312 * _3295))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3305;
        }
        else
        {
            float _3425 = 1.0 / cbSceneParam._m0[80u].x;
            float _3426 = isnan(_3296) ? _3295 : (isnan(_3295) ? _3296 : max(_3295, _3296));
            float _3427 = isnan(_3296) ? _3295 : (isnan(_3295) ? _3296 : min(_3295, _3296));
            float _3436 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : min(_3426, 0.0));
            float _3437 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : min(_3427, 0.0));
            _3465 = ((abs(_3302 / _3290) * cbSceneParam._m0[80u].y) * ((((_3436 - _3437) * 2.0) - ((exp2(_3310 * (isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0)))) - exp2(_3310 * (isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))))) * _3425)) - ((exp2(_3312 * _3436) - exp2(_3312 * _3437)) * _3425))) + (_3305 * cbSceneParam._m0[80u].z);
        }
        vec4 _3467 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3222, _3223, 1.0), 0.0);
        float _3476 = exp2((_3465 * (-1.44269502162933349609375)) * (1.0 - _3467.w));
        float _3477 = log2(_3476);
        float _3493 = log2(_3242);
        _3314 = (exp2(_3493 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].x)) * _3467.x) / cbSceneParam._m0[78u].x)) + _3239;
        _3316 = (exp2(_3493 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].y)) * _3467.y) / cbSceneParam._m0[78u].y)) + _3240;
        _3318 = (exp2(_3493 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].z)) * _3467.z) / cbSceneParam._m0[78u].z)) + _3241;
        _3320 = _3476 * _3242;
    }
    else
    {
        _3314 = _3239;
        _3316 = _3240;
        _3318 = _3241;
        _3320 = _3242;
    }
    float _3332 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3333 = _3332 == 3.0;
    float _3334 = log2(_3320);
    float _3341 = exp2(_3334 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0))) * (_3184 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1155))) + ((_3190 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1962)) * cbPerFrame._m0[3u].x));
    float _3342 = exp2(_3334 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0))) * (_3186 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1155))) + ((_3192 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1962)) * cbPerFrame._m0[3u].x));
    float _3343 = exp2(_3334 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0))) * (_3188 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1155))) + ((_3194 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1962)) * cbPerFrame._m0[3u].x));
    float _3352 = (_3332 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3352 * (_3333 ? _3341 : (_3341 + (cbSceneParam._m0[72u].w * _3314)));
    SV_Target.y = _3352 * (_3333 ? _3342 : (_3342 + (cbSceneParam._m0[72u].w * _3316)));
    SV_Target.z = _3352 * (_3333 ? _3343 : (_3343 + (cbSceneParam._m0[72u].w * _3318)));
    SV_Target.w = cbInstanceData._m0[_3214].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3214].w;
}


