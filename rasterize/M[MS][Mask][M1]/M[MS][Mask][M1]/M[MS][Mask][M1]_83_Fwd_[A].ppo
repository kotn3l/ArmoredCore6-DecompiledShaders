#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1473;
float _3851;
float _3852;
float _3853;
float _3854;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3863 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3874 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3885 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3896 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _455 = (_448 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _456 = (_448 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _457 = (_448 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3907 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _534 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _528;
    float _537 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _529;
    float _540 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _530;
    float _547 = ((_528 - _534) * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) + _534;
    float _548 = ((_529 - _537) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) + _537;
    float _549 = ((_530 - _540) * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) + _540;
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _301) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _302) + cbTextureTilingScale._m0[14u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _629 = _627.x;
    float _630 = _627.y;
    float _631 = _627.z;
    float _638 = ((_610.x - _629) * _448) + _629;
    float _639 = ((_610.y - _630) * _448) + _630;
    float _640 = ((_610.z - _631) * _448) + _631;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _665 = ((_652.z - _640) * _521) + _640;
    float _668 = ((((_652.x - _638) * _521) + _638) * 2.0) + (-1.0);
    float _669 = ((((_652.y - _639) * _521) + _639) * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3918 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))));
    vec4 _689 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _714 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _716 = _714.x;
    float _717 = 1.0 - _716;
    float _733 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_716 - _717) * cbMtdParam._m0[24u].z) + _717) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3929 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _741 = (_734 * ((_568.x * cbMtdParam._m0[18u].x) - _547)) + _547;
    float _742 = (_734 * ((_568.y * cbMtdParam._m0[18u].y) - _548)) + _548;
    float _743 = (_734 * ((_568.z * cbMtdParam._m0[18u].z) - _549)) + _549;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _771 = _769.x;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _771) * _448) + _771;
    float _806 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _789) * _521) + _789;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _806) * cbMtdParam._m0[19u].z) + _806;
    float _812 = _810 - (_810 * _734);
    float _817 = (((_587.z - _665) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _665;
    float _821 = ((_689.z - _817) * cbMtdParam._m0[19u].w) + _817;
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _841 = (_834.x * 2.0) + (-1.0);
    float _842 = (_834.y * 2.0) + (-1.0);
    float _843 = dot(vec2(_841, _842), vec2(_841, _842));
    float _3940 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _851 = (_734 * (_834.z - _821)) + _821;
    float _860 = (_668 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_587.x * 2.0) + (-1.0)))) + (((_689.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _861 = (_669 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_587.y * 2.0) + (-1.0)))) + (((_689.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _873 = (((_841 - _860) + (cbMtdParam._m0[21u].x * _860)) * _734) + _860;
    float _874 = (((_842 - _861) + (cbMtdParam._m0[21u].x * _861)) * _734) + _861;
    float _875 = (_734 * (sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) - _675)) + _675;
    float _879 = cbMtdParam._m0[22u].x + _689.w;
    float _882 = fma(_875, _248 * NORMAL.x, fma(_874, _255 * TANGENT.x, (_241 * _233) * _873));
    float _885 = fma(_875, _248 * NORMAL.y, fma(_874, _255 * TANGENT.y, (_241 * _234) * _873));
    float _888 = fma(_875, _248 * NORMAL.z, fma(_874, _255 * TANGENT.z, (_241 * _235) * _873));
    float _892 = inversesqrt(dot(vec3(_882, _885, _888), vec3(_882, _885, _888)));
    float _893 = _892 * _882;
    float _894 = _892 * _885;
    float _895 = _892 * _888;
    float _3951 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _896 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _3973 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3984 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3995 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4006 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _901 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _915 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _966 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _956);
    float _967 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _956);
    float _968 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _956);
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    vec4 _980 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _982 = _980.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1154 = sqrt(((_966 * _966) + (_967 * _967)) + (_968 * _968));
        float _1160 = (cbMatDynParam._m0[5u].x * _1154) + cbMatDynParam._m0[5u].y;
        float _4017 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1165 = (cbMatDynParam._m0[5u].z * _1154) + cbMatDynParam._m0[5u].w;
        float _4028 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) - _1161)) + _1161) < ((_982 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _993 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _994 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1012 = fma(_895, cbSceneParam._m0[5u].z, fma(_894, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _893));
    float _1015 = fma(_895, cbSceneParam._m0[6u].z, fma(_894, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _893));
    float _1018 = fma(_895, cbSceneParam._m0[7u].z, fma(_894, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _893));
    uint _1031 = _282 + 9u;
    uint _1032 = _1031 + uint(cbMatDynParam._m0[0u].w);
    float _1038 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * cbInstanceData._m0[_1032].x;
    float _1039 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * cbInstanceData._m0[_1032].y;
    float _1040 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_1032].z;
    float _4039 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1044 = 1.0 - _901;
    float _1045 = _1041 * _1044;
    float _1046 = _1042 * _1044;
    float _1047 = _1043 * _1044;
    float _1052 = (_1041 + (-0.039999999105930328369140625)) * _901;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _901;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _901;
    float _1055 = _1052 + 0.039999999105930328369140625;
    float _1057 = _1053 + 0.039999999105930328369140625;
    float _1058 = _1054 + 0.039999999105930328369140625;
    vec4 _1067 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _993, cbSceneParam._m0[86u].y * _994));
    float _1071 = ((isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * TEXCOORD_5.w) * _1067.x;
    float _1072 = dot(vec3(_893, _894, _895), vec3(_973, _974, _975));
    float _1075 = _1072 * 2.0;
    float _1079 = (_1075 * _893) - _973;
    float _1080 = (_1075 * _894) - _974;
    float _1081 = (_1075 * _895) - _975;
    float _1085 = abs(dot(vec3(_973, _974, _975), vec3(_893, _894, _895)));
    float _4072 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1087 = sqrt(_896);
    float _1100 = exp2((_1087 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1087 * 3.0));
    float _1106 = (1.0 - _1100) * ((_1087 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1107 = _1100 * _1087;
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1472;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1197 = fma(_1143, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135));
        float _1201 = fma(_1143, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135));
        float _1205 = fma(_1143, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135));
        float _1230 = _1135 + _893;
        float _1231 = _1139 + _894;
        float _1232 = _1143 + _895;
        float _1242 = fma(_1232, cbModelParam._m0[26u].z, fma(_1231, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1230)) - _1197;
        float _1243 = fma(_1232, cbModelParam._m0[27u].z, fma(_1231, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1230)) - _1201;
        float _1244 = fma(_1232, cbModelParam._m0[28u].z, fma(_1231, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1230)) - _1205;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1197 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1201 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[34u].z) + ((((((_1205 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1300 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1266.x + (-0.5));
        float _1302 = _1300 * (_1266.y + (-0.5));
        float _1303 = _1300 * (_1266.z + (-0.5));
        float _1310 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1273.x + (-0.5));
        float _1312 = _1310 * (_1273.y + (-0.5));
        float _1313 = _1310 * (_1273.z + (-0.5));
        float _1320 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1280.x + (-0.5));
        float _1322 = _1320 * (_1280.y + (-0.5));
        float _1323 = _1320 * (_1280.z + (-0.5));
        float _1330 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1287.x + (-0.5));
        float _1332 = _1330 * (_1287.y + (-0.5));
        float _1333 = _1330 * (_1287.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1354 = (dot(vec3(_893, _894, _895), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1364 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4120 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1366 + 1.0))) + _1371) * _1334;
        float _1381 = _1302 * 0.5;
        float _1382 = _1312 * 0.5;
        float _1383 = _1322 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_893, _894, _895), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4153 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1408 + 1.0))) + _1413) * _1335;
        float _1423 = _1303 * 0.5;
        float _1424 = _1313 * 0.5;
        float _1425 = _1323 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_893, _894, _895), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4186 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1450 + 1.0))) + _1455) * _1336;
        _1472 = _1303;
        _1474 = _1302;
        _1475 = _1301;
        _1476 = _1313;
        _1477 = _1312;
        _1478 = _1311;
        _1479 = _1323;
        _1480 = _1322;
        _1481 = _1321;
        _1482 = _1336;
        _1483 = _1335;
        _1484 = _1334;
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1473;
        _1474 = _1473;
        _1475 = _1473;
        _1476 = _1473;
        _1477 = _1473;
        _1478 = _1473;
        _1479 = _1473;
        _1480 = _1473;
        _1481 = _1473;
        _1482 = _1473;
        _1483 = _1473;
        _1484 = _1473;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1514 = fma(_1143, cbModelParam._m0[30u].z, fma(_1139, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135));
        float _1518 = fma(_1143, cbModelParam._m0[31u].z, fma(_1139, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135));
        float _1522 = fma(_1143, cbModelParam._m0[32u].z, fma(_1139, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135));
        float _1545 = _1135 + _893;
        float _1546 = _1139 + _894;
        float _1547 = _1143 + _895;
        float _1557 = fma(_1547, cbModelParam._m0[30u].z, fma(_1546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1545)) - _1514;
        float _1558 = fma(_1547, cbModelParam._m0[31u].z, fma(_1546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1545)) - _1518;
        float _1559 = fma(_1547, cbModelParam._m0[32u].z, fma(_1546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1545)) - _1522;
        float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
        float _1576 = ((_1563 * _1557) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1514 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1563 * _1558) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1518 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1578 = ((_1563 * _1559) / cbModelParam._m0[35u].z) + ((((((_1522 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1576, _1577, _1578), 0.0);
        float _1613 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1580.x + (-0.5));
        float _1615 = _1613 * (_1580.y + (-0.5));
        float _1616 = _1613 * (_1580.z + (-0.5));
        float _1623 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1587.x + (-0.5));
        float _1625 = _1623 * (_1587.y + (-0.5));
        float _1626 = _1623 * (_1587.z + (-0.5));
        float _1633 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1594.x + (-0.5));
        float _1635 = _1633 * (_1594.y + (-0.5));
        float _1636 = _1633 * (_1594.z + (-0.5));
        float _1643 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1601.x + (-0.5));
        float _1645 = _1643 * (_1601.y + (-0.5));
        float _1646 = _1643 * (_1601.z + (-0.5));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = _1614 * 0.5;
        float _1651 = _1624 * 0.5;
        float _1652 = _1634 * 0.5;
        float _1653 = dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652));
        float _1658 = (_1653 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1653);
        float _1666 = (dot(vec3(_893, _894, _895), vec3(_1658 * _1650, _1658 * _1651, _1658 * _1652)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1675 = sqrt(((_1651 * _1651) + (_1650 * _1650)) + (_1652 * _1652)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1677 = _1676 * 2.0;
        float _1681 = (1.0 - _1676) / (_1676 + 1.0);
        float _4249 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1691 = ((((1.0 - _1682) * (_1677 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1677 + 1.0))) + _1682) * _1647;
        float _1692 = _1615 * 0.5;
        float _1693 = _1625 * 0.5;
        float _1694 = _1635 * 0.5;
        float _1695 = dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694));
        float _1700 = (_1695 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1695);
        float _1708 = (dot(vec3(_893, _894, _895), vec3(_1700 * _1692, _1700 * _1693, _1700 * _1694)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1717 = sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1719 = _1718 * 2.0;
        float _1723 = (1.0 - _1718) / (_1718 + 1.0);
        float _4282 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1733 = ((((1.0 - _1724) * (_1719 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1719 + 1.0))) + _1724) * _1648;
        float _1734 = _1616 * 0.5;
        float _1735 = _1626 * 0.5;
        float _1736 = _1636 * 0.5;
        float _1737 = dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736));
        float _1742 = (_1737 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1737);
        float _1750 = (dot(vec3(_893, _894, _895), vec3(_1742 * _1734, _1742 * _1735, _1742 * _1736)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1759 = sqrt(((_1735 * _1735) + (_1734 * _1734)) + (_1736 * _1736)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
        float _1760 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1761 = _1760 * 2.0;
        float _1765 = (1.0 - _1760) / (_1760 + 1.0);
        float _4315 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1775 = ((((1.0 - _1766) * (_1761 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1761 + 1.0))) + _1766) * _1649;
        _1783 = _1616;
        _1784 = _1615;
        _1785 = _1614;
        _1786 = _1626;
        _1787 = _1625;
        _1788 = _1624;
        _1789 = _1636;
        _1790 = _1635;
        _1791 = _1634;
        _1792 = _1649;
        _1793 = _1648;
        _1794 = _1647;
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)));
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)));
    }
    else
    {
        _1783 = _1473;
        _1784 = _1473;
        _1785 = _1473;
        _1786 = _1473;
        _1787 = _1473;
        _1788 = _1473;
        _1789 = _1473;
        _1790 = _1473;
        _1791 = _1473;
        _1792 = _1473;
        _1793 = _1473;
        _1794 = _1473;
        _1795 = 0.0;
        _1796 = 0.0;
        _1797 = 0.0;
    }
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1485)) + _1485;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1486)) + _1486;
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1487)) + _1487;
    float _1830 = fma(_1809, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1807 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1809, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1807 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1809, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1807));
    float _1851 = _1079 * 0.5;
    float _1852 = _1080 * 0.5;
    float _1853 = _1081 * 0.5;
    float _1854 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1857 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1860 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1894;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1867 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1472, _1476, _1479, _1482));
        float _1871 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1474, _1477, _1480, _1483));
        float _1875 = dot(vec4(_1851, _1852, _1853, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1882 = dot(vec4(cbModelParam._m0[39u]), vec4(_1851, _1852, _1853, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1905;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1896 = dot(vec4(cbModelParam._m0[40u]), vec4(_1851, _1852, _1853, 1.0));
        _1905 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1905 = 1.0;
    }
    float _1909 = (_1905 * cbModelParam._m0[1u].x) + (_1894 * (1.0 - cbModelParam._m0[1u].x));
    float _1919 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _896);
    float _1920 = isnan(_1919) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1919 : min(cbModelParam._m0[25u].z, _1919));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1967 = fma(_1143, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1135)) + cbModelParam._m0[13u].w;
        float _1971 = fma(_1143, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1135)) + cbModelParam._m0[14u].w;
        float _1975 = fma(_1143, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1135)) + cbModelParam._m0[15u].w;
        float _1978 = fma(_1081, cbModelParam._m0[13u].z, fma(_1080, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079));
        float _1981 = fma(_1081, cbModelParam._m0[14u].z, fma(_1080, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079));
        float _1984 = fma(_1081, cbModelParam._m0[15u].z, fma(_1080, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079));
        float _2012;
        if (_1978 > 0.0)
        {
            _2012 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2012 = frontier_phi_17_15_ladder;
        }
        float _2214;
        if (_1981 > 0.0)
        {
            _2214 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2214 = frontier_phi_26_22_ladder;
        }
        float _2468;
        if (_1984 > 0.0)
        {
            _2468 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2468 = frontier_phi_38_33_ladder;
        }
        float _2470 = isnan(_2214) ? _2012 : (isnan(_2012) ? _2214 : min(_2012, _2214));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1978) + _1967;
        float _2476 = (_2471 * _1981) + _1971;
        float _2477 = (_2471 * _1984) + _1975;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2478;
        float _2482 = _2478 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 > _2482) || ((_2476 < _2480) || ((_2475 < _2480) || (_2475 > _2482))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2477, cbModelParam._m0[9u].z, fma(_2476, cbModelParam._m0[9u].y, _2475 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2477, cbModelParam._m0[10u].z, fma(_2476, cbModelParam._m0[10u].y, _2475 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2477, cbModelParam._m0[11u].z, fma(_2476, cbModelParam._m0[11u].y, _2475 * cbModelParam._m0[11u].x))), _1920);
            frontier_phi_16_38_ladder = _2605.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2605.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2605.x * cbModelParam._m0[1u].y;
        }
        _2000 = frontier_phi_16_38_ladder_2;
        _2002 = frontier_phi_16_38_ladder_1;
        _2004 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1079, _1080, _1081), _1920);
        _2000 = _1988.x * cbModelParam._m0[1u].y;
        _2002 = _1988.y * cbModelParam._m0[1u].y;
        _2004 = _1988.z * cbModelParam._m0[1u].y;
    }
    float _2008 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _896);
    float _2009 = isnan(_2008) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2008 : min(cbModelParam._m0[25u].w, _2008));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2062 = fma(_1143, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1135)) + cbModelParam._m0[21u].w;
        float _2066 = fma(_1143, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1135)) + cbModelParam._m0[22u].w;
        float _2070 = fma(_1143, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1135)) + cbModelParam._m0[23u].w;
        float _2073 = fma(_1081, cbModelParam._m0[21u].z, fma(_1080, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079));
        float _2076 = fma(_1081, cbModelParam._m0[22u].z, fma(_1080, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079));
        float _2079 = fma(_1081, cbModelParam._m0[23u].z, fma(_1080, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079));
        float _2219;
        if (_2073 > 0.0)
        {
            _2219 = abs((1.0 - _2062) / _2073);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2062 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2219 = frontier_phi_28_24_ladder;
        }
        float _2495;
        if (_2076 > 0.0)
        {
            _2495 = abs((1.0 - _2066) / _2076);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2066 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2495 = frontier_phi_40_35_ladder;
        }
        float _2708;
        if (_2079 > 0.0)
        {
            _2708 = abs((1.0 - _2070) / _2079);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2070 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2708 = frontier_phi_49_46_ladder;
        }
        float _2710 = isnan(_2495) ? _2219 : (isnan(_2219) ? _2495 : min(_2219, _2495));
        float _2711 = isnan(_2708) ? _2710 : (isnan(_2710) ? _2708 : min(_2710, _2708));
        float _2715 = (_2711 * _2073) + _2062;
        float _2716 = (_2711 * _2076) + _2066;
        float _2717 = (_2711 * _2079) + _2070;
        float _2718 = _2711 * 9.9999997473787516355514526367188e-05;
        float _2719 = (-1.0) - _2718;
        float _2721 = _2718 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2717 > _2721) || ((_2717 < _2719) || ((_2716 > _2721) || ((_2716 < _2719) || ((_2715 < _2719) || (_2715 > _2721))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2916 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2717, cbModelParam._m0[17u].z, fma(_2716, cbModelParam._m0[17u].y, _2715 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2717, cbModelParam._m0[18u].z, fma(_2716, cbModelParam._m0[18u].y, _2715 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2717, cbModelParam._m0[19u].z, fma(_2716, cbModelParam._m0[19u].y, _2715 * cbModelParam._m0[19u].x))), _2009);
            frontier_phi_25_49_ladder = _2916.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2916.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2916.x * cbModelParam._m0[1u].z;
        }
        _2098 = frontier_phi_25_49_ladder_2;
        _2100 = frontier_phi_25_49_ladder_1;
        _2102 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1079, _1080, _1081), _2009);
        _2098 = _2082.x * cbModelParam._m0[1u].z;
        _2100 = _2082.y * cbModelParam._m0[1u].z;
        _2102 = _2082.z * cbModelParam._m0[1u].z;
    }
    float _2115 = (((_1106 * _1055) + _1107) * _1071) * ((cbModelParam._m0[1u].w * (_2098 - _2000)) + _2000);
    float _2117 = (((_1106 * _1057) + _1107) * _1071) * ((cbModelParam._m0[1u].w * (_2100 - _2002)) + _2002);
    float _2119 = (((_1106 * _1058) + _1107) * _1071) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2122 = fma(_2119, cbSceneParam._m0[89u].z, fma(_2117, cbSceneParam._m0[89u].y, _2115 * cbSceneParam._m0[89u].x));
    float _2125 = fma(_2119, cbSceneParam._m0[90u].z, fma(_2117, cbSceneParam._m0[90u].y, _2115 * cbSceneParam._m0[90u].x));
    float _2128 = fma(_2119, cbSceneParam._m0[91u].z, fma(_2117, cbSceneParam._m0[91u].y, _2115 * cbSceneParam._m0[91u].x));
    uvec4 _2138 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2140 = _2138.x * 14u;
    uint _2141 = _2140 + 13u;
    float _2148 = _1071 + (-1.0);
    float _2153 = (cbLight._m0[_2141].x * _2148) + 1.0;
    float _2154 = (cbLight._m0[_2141].y * _2148) + 1.0;
    float _2155 = (cbLight._m0[_2141].z * _2148) + 1.0;
    float _2156 = (cbLight._m0[_2141].w * _2148) + 1.0;
    uint _2157 = _2140 + 5u;
    float _2163 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2167 = _2140 + 4u;
    float _2173 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2177 = _2140 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_893, _894, _895));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_893, _894, _895));
    float _4451 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4462 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2157].x * _2163) * _2198) + ((cbLight._m0[_2167].x * _2173) * _2196);
    float _2206 = ((_2163 * cbLight._m0[_2157].y) * _2198) + ((_2173 * cbLight._m0[_2167].y) * _2196);
    float _2207 = ((_2163 * cbLight._m0[_2157].z) * _2198) + ((_2173 * cbLight._m0[_2167].z) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2140 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2213)
    {
        _2224 = _2205;
        _2226 = _2206;
        _2228 = _2207;
    }
    else
    {
        uint _2232 = _2140 + 6u;
        float _2248 = (dot(vec3(cbLight._m0[_2140 + 2u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4473 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2251 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2224 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2205;
        _2226 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2206;
        _2228 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2207;
    }
    bool _2231 = _2211.y == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2231)
    {
        _2269 = _2224;
        _2271 = _2226;
        _2273 = _2228;
    }
    else
    {
        uint _2439 = _2140 + 7u;
        float _2455 = (dot(vec3(cbLight._m0[_2140 + 3u].xyz), vec3(_893, _894, _895)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4489 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2458 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2269 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2224;
        _2271 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2226;
        _2273 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2228;
    }
    uint _2276 = _2140 + 8u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2140].w)) * _896) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2140].x + _973;
    float _2292 = cbLight._m0[_2140].y + _974;
    float _2293 = cbLight._m0[_2140].z + _975;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2140].xyz));
    float _4505 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _4516 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _2305 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
    float _2306 = dot(vec3(_893, _894, _895), vec3(_2298, _2299, _2300));
    float _4527 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2140].xyz), vec3(_2298, _2299, _2300));
    float _4538 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2290 * _2290;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) * 5.0);
    float _2327 = 0.959999978542327880859375 - _1052;
    float _2329 = 0.959999978542327880859375 - _1053;
    float _2330 = 0.959999978542327880859375 - _1054;
    float _2337 = 1.0 - _2290;
    float _2348 = (0.5 / (((_2305 * ((_2304 * _2337) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2337) + _2290) * _2304))) * _2304;
    float _4549 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    uint _2361 = _2140 + 9u;
    float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _896) * 0.949999988079071044921875);
    float _2373 = _2372 * _2372;
    float _2374 = cbLight._m0[_2177].x + _973;
    float _2375 = cbLight._m0[_2177].y + _974;
    float _2376 = cbLight._m0[_2177].z + _975;
    float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
    float _2381 = _2380 * _2374;
    float _2382 = _2380 * _2375;
    float _2383 = _2380 * _2376;
    float _2384 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2177].xyz));
    float _4560 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2388 = dot(vec3(_893, _894, _895), vec3(_2381, _2382, _2383));
    float _4571 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2392 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2381, _2382, _2383));
    float _4582 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2396 = _2373 * _2373;
    float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2414 = 1.0 - _2373;
    float _2424 = (0.5 / (((_2305 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2414) + _2373) * _2387))) * _2387;
    float _4593 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
    float _2436 = (((((_2407 * _2327) + _1055) * cbLight._m0[_2361].x) * _2426) * _2163) + (((((_2326 * _2327) + _1055) * cbLight._m0[_2276].x) * _2350) * _2173);
    float _2437 = (((((_2407 * _2329) + _1057) * cbLight._m0[_2361].y) * _2426) * _2163) + (((((_2326 * _2329) + _1057) * cbLight._m0[_2276].y) * _2350) * _2173);
    float _2438 = (((((_2407 * _2330) + _1058) * cbLight._m0[_2361].z) * _2426) * _2163) + (((((_2326 * _2330) + _1058) * cbLight._m0[_2276].z) * _2350) * _2173);
    float _2500;
    float _2502;
    float _2504;
    if (_2213)
    {
        _2500 = _2436;
        _2502 = _2437;
        _2504 = _2438;
    }
    else
    {
        uint _2506 = _2140 + 2u;
        uint _2510 = _2140 + 10u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _896) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _973;
        float _2527 = cbLight._m0[_2506].y + _974;
        float _2528 = cbLight._m0[_2506].z + _975;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2506].xyz));
        float _4604 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2540 = dot(vec3(_893, _894, _895), vec3(_2533, _2534, _2535));
        float _4615 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4626 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
        float _2566 = 1.0 - _2525;
        float _2576 = (0.5 / (((_2305 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2566) + _2525) * _2539))) * _2539;
        float _4637 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2500 = (((((_2559 * _2327) + _1055) * cbLight._m0[_2510].x) * _2578) * _2579) + _2436;
        _2502 = (((((_2559 * _2329) + _1057) * cbLight._m0[_2510].y) * _2578) * _2579) + _2437;
        _2504 = (((((_2559 * _2330) + _1058) * cbLight._m0[_2510].z) * _2578) * _2579) + _2438;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2231)
    {
        _2614 = _2500;
        _2616 = _2502;
        _2618 = _2504;
    }
    else
    {
        uint _2625 = _2140 + 3u;
        uint _2629 = _2140 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _896) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _973;
        float _2646 = cbLight._m0[_2625].y + _974;
        float _2647 = cbLight._m0[_2625].z + _975;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_893, _894, _895), vec3(cbLight._m0[_2625].xyz));
        float _4653 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2659 = dot(vec3(_893, _894, _895), vec3(_2652, _2653, _2654));
        float _4664 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4675 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2305 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2685) + _2644) * _2658))) * _2658;
        float _4686 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2614 = (((((_2678 * _2327) + _1055) * cbLight._m0[_2629].x) * _2697) * _2698) + _2500;
        _2616 = (((((_2678 * _2329) + _1057) * cbLight._m0[_2629].y) * _2697) * _2698) + _2502;
        _2618 = (((((_2678 * _2330) + _1058) * cbLight._m0[_2629].z) * _2697) * _2698) + _2504;
    }
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_2138.y == 0u)
    {
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2773;
        float _2775 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2773;
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2773;
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.x;
        uint _2800 = uint((float(_2788.y) * floor(float(uint(cbSceneParam._m0[85u].y * _994) / _2789))) + floor(float(uint(cbSceneParam._m0[85u].x * _993) / _2789)));
        float _2810 = (log2(_2776 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2811 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        uint _2814 = uint(isnan(14.0) ? _2811 : (isnan(_2811) ? 14.0 : min(_2811, 14.0)));
        uvec4 _2819 = texelFetch(g_lightClusterGridBuffer, int(((_2814 << 2u) + (_2800 << 6u)) >> 2u));
        uint _2820 = _2819.x;
        uint _2821 = _2788.z;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        float _2931;
        if (((((1u << ((_2821 >> 4u) & 15u)) + 4294967295u) & _2820) == 0u) || ((_2821 & 240u) == 0u))
        {
            _2921 = 0.0;
            _2923 = 0.0;
            _2925 = 0.0;
            _2927 = 0.0;
            _2929 = 0.0;
            _2931 = 0.0;
        }
        else
        {
            float _2922;
            float _2924;
            float _2926;
            float _2928;
            float _2930;
            float _2932;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            uint _3080 = 0u;
            uint _3089;
            bool _3090;
            for (;;)
            {
                _3089 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3080 << 2u)) >> 2u)).x;
                _3090 = _3089 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3090)
                {
                    frontier_phi_66_pred = _3074;
                    frontier_phi_66_pred_1 = _3079;
                    frontier_phi_66_pred_2 = _3078;
                    frontier_phi_66_pred_3 = _3077;
                    frontier_phi_66_pred_4 = _3076;
                    frontier_phi_66_pred_5 = _3075;
                }
                else
                {
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    uint _3225;
                    _3219 = _3074;
                    _3220 = _3075;
                    _3221 = _3076;
                    _3222 = _3077;
                    _3223 = _3078;
                    _3224 = _3079;
                    _3225 = _3089;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    for (;;)
                    {
                        uint _3229 = uint(findLSB(_3225)) + (_3080 << 5u);
                        uint _3226 = (_3225 + 4294967295u) & _3225;
                        uint _3231 = _3229 * 48u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 3u)).x));
                        uint _3251 = (_3229 * 48u) + 4u;
                        vec4 _3264 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 3u)).x));
                        uint _3270 = (_3229 * 48u) + 8u;
                        vec3 _3281 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x));
                        float _3285 = _3245.x - _2774;
                        float _3286 = _3245.y - _2775;
                        float _3287 = _3245.z - _2776;
                        float _3288 = dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287));
                        float _3291 = inversesqrt(_3288);
                        float _3292 = _3291 * _3285;
                        float _3293 = _3291 * _3286;
                        float _3294 = _3291 * _3287;
                        float _3295 = dot(vec3(_1012, _1015, _1018), vec3(_3292, _3293, _3294));
                        float _3300 = 1.0 - (_3288 * _3245.w);
                        float _4712 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3301 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                        float _3302 = sqrt(_3288) * _3264.w;
                        float _3305 = 1.39999997615814208984375 / (_3302 + 1.39999997615814208984375);
                        float _3306 = _3305 * _3305;
                        float _3309 = ((1.0 - _3306) * _3295) + _3306;
                        float _3312 = _3302 * _3302;
                        float _3316 = ((isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0))) * _3301) / ((_3312 * 0.699999988079071044921875) + 1.0);
                        float _3320 = (-0.0) - _2774;
                        float _3321 = (-0.0) - _2775;
                        float _3322 = (-0.0) - _2776;
                        float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                        float _3327 = _3326 * _3320;
                        float _3328 = _3326 * _3321;
                        float _3329 = _3326 * _3322;
                        float _3337 = exp2(log2(1.0 / ((_3312 * 3.5) + 5.0)) * 0.25);
                        float _3338 = 1.0 - _1087;
                        float _3345 = sqrt(1.0 - ((1.0 - (_3338 * _3338)) * (1.0 - (_3337 * _3337))));
                        float _3346 = _3345 * _3345;
                        float _3347 = _3346 * _3346;
                        float _3348 = _3327 + _3292;
                        float _3349 = _3328 + _3293;
                        float _3350 = _3329 + _3294;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3358 = dot(vec3(_1012, _1015, _1018), vec3(_3327, _3328, _3329));
                        float _4728 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3361 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3362 = dot(vec3(_1012, _1015, _1018), vec3(_3354 * _3348, _3354 * _3349, _3354 * _3350));
                        float _4739 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                        float _3365 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                        float _3369 = ((_3365 * _3365) * (_3347 + (-1.0))) + 1.0;
                        float _3370 = _3305 * _3346;
                        float _3371 = _3370 * _3370;
                        float _3374 = ((1.0 - _3371) * _3295) + _3371;
                        float _4750 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3376 = 1.0 - _3346;
                        float _3386 = (0.5 / (((_3375 * ((_3361 * _3376) + _3346)) + 9.9999999392252902907785028219223e-09) + (((_3375 * _3376) + _3346) * _3361))) * _3375;
                        float _4761 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3397 = (((_3347 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3369 * _3369) * ((_3312 * 2.1991131305694580078125) + 3.141590118408203125))) * _3301;
                        _3149 = (_3316 * _3264.x) + _3222;
                        _3150 = (_3316 * _3264.y) + _3223;
                        _3151 = (_3316 * _3264.z) + _3224;
                        _3146 = (_3397 * _3281.x) + _3219;
                        _3147 = (_3397 * _3281.y) + _3220;
                        _3148 = (_3397 * _3281.z) + _3221;
                        if (_3226 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3219 = _3146;
                            _3220 = _3147;
                            _3221 = _3148;
                            _3222 = _3149;
                            _3223 = _3150;
                            _3224 = _3151;
                            _3225 = _3226;
                        }
                    }
                    frontier_phi_66_pred = _3146;
                    frontier_phi_66_pred_1 = _3151;
                    frontier_phi_66_pred_2 = _3150;
                    frontier_phi_66_pred_3 = _3149;
                    frontier_phi_66_pred_4 = _3148;
                    frontier_phi_66_pred_5 = _3147;
                }
                _2922 = frontier_phi_66_pred;
                _2932 = frontier_phi_66_pred_1;
                _2930 = frontier_phi_66_pred_2;
                _2928 = frontier_phi_66_pred_3;
                _2926 = frontier_phi_66_pred_4;
                _2924 = frontier_phi_66_pred_5;
                uint _3081 = _3080 + 1u;
                if (_3081 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3074 = _2922;
                    _3075 = _2924;
                    _3076 = _2926;
                    _3077 = _2928;
                    _3078 = _2930;
                    _3079 = _2932;
                    _3080 = _3081;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2921 = _2922;
            _2923 = _2924;
            _2925 = _2926;
            _2927 = _2928;
            _2929 = _2930;
            _2931 = _2932;
        }
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.z;
        uint _2938 = (_2936 >> 8u) & 15u;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((4294967295u << _2938) & _2820) == 0u)
        {
            _3042 = _2921;
            _3044 = _2923;
            _3046 = _2925;
            _3048 = _2927;
            _3050 = _2929;
            _3052 = _2931;
        }
        else
        {
            float _3067 = inversesqrt(dot(vec3(_2774, _2775, _2776), vec3(_2774, _2775, _2776)));
            float _3068 = _3067 * _2774;
            float _3069 = _3067 * _2775;
            float _3070 = _3067 * _2776;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2938 < ((_2936 >> 12u) & 15u))
            {
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3202 = _2921;
                float _3203 = _2923;
                float _3204 = _2925;
                float _3205 = _2927;
                float _3206 = _2929;
                float _3207 = _2931;
                uint _3208 = _2938;
                uint _3217;
                bool _3218;
                for (;;)
                {
                    _3217 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3208 << 2u)) >> 2u)).x;
                    _3218 = _3217 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3218)
                    {
                        frontier_phi_77_pred = _3207;
                        frontier_phi_77_pred_1 = _3206;
                        frontier_phi_77_pred_2 = _3205;
                        frontier_phi_77_pred_3 = _3204;
                        frontier_phi_77_pred_4 = _3203;
                        frontier_phi_77_pred_5 = _3202;
                    }
                    else
                    {
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3424 = _3202;
                        float _3425 = _3203;
                        float _3426 = _3204;
                        float _3427 = _3205;
                        float _3428 = _3206;
                        float _3429 = _3207;
                        uint _3430 = _3217;
                        uint _3431;
                        vec4 _3456;
                        float _3457;
                        vec4 _3472;
                        vec3 _3484;
                        vec4 _3499;
                        vec4 _3514;
                        float _3560;
                        bool _3561;
                        for (;;)
                        {
                            uint _3441 = ((_3208 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3430));
                            _3431 = (_3430 + 4294967295u) & _3430;
                            uint _3443 = _3441 * 40u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            _3457 = _3456.w;
                            uint _3459 = (_3441 * 40u) + 4u;
                            _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3474 = (_3441 * 40u) + 8u;
                            _3484 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x));
                            uint _3486 = (_3441 * 40u) + 16u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3441 * 40u) + 20u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            uint _3516 = (_3441 * 40u) + 24u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            uint _3535 = (_3441 * 40u) + 28u;
                            vec4 _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            _3560 = fma(_2776, _3548.z, fma(_2775, _3548.y, _3548.x * _2774)) + _3548.w;
                            _3561 = !((fma(_2776, _3529.z, fma(_2775, _3529.y, _3529.x * _2774)) + _3529.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3561)
                            {
                                float _3588 = _3456.x - _2774;
                                float _3589 = _3456.y - _2775;
                                float _3590 = _3456.z - _2776;
                                float _3591 = dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590));
                                float _3594 = inversesqrt(_3591);
                                float _3595 = _3594 * _3588;
                                float _3596 = _3594 * _3589;
                                float _3597 = _3594 * _3590;
                                float _3601 = 1.0 - (_3591 / (_3457 * _3457));
                                float _4772 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                                float _3606 = sqrt(_3591) * _3472.w;
                                float _3608 = 1.39999997615814208984375 / (_3606 + 1.39999997615814208984375);
                                float _3609 = _3608 * _3608;
                                float _3612 = ((1.0 - _3609) * dot(vec3(_3595, _3596, _3597), vec3(_1012, _1015, _1018))) + _3609;
                                float _3615 = _3606 * _3606;
                                float _3619 = (fma(_2776, _3499.z, fma(_2775, _3499.y, _3499.x * _2774)) + _3499.w) / _3560;
                                float _3620 = (fma(_2776, _3514.z, fma(_2775, _3514.y, _3514.x * _2774)) + _3514.w) / _3560;
                                float _3624 = 1.0 - dot(vec2(_3619, _3620), vec2(_3619, _3620));
                                float _4788 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3626 = _3625 * (((isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0))) * _3602) / ((_3615 * 0.699999988079071044921875) + 1.0));
                                float _3638 = exp2(log2(1.0 / ((_3615 * 3.5) + 5.0)) * 0.25);
                                float _3639 = 1.0 - _1087;
                                float _3646 = sqrt(1.0 - ((1.0 - (_3639 * _3639)) * (1.0 - (_3638 * _3638))));
                                float _3647 = _3646 * _3646;
                                float _3648 = _3647 * _3647;
                                float _3649 = _3595 - _3068;
                                float _3650 = _3596 - _3069;
                                float _3651 = _3597 - _3070;
                                float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                                float _3659 = dot(vec3(_1012, _1015, _1018), vec3((-0.0) - _3068, (-0.0) - _3069, (-0.0) - _3070));
                                float _4799 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3663 = dot(vec3(_1012, _1015, _1018), vec3(_3655 * _3649, _3655 * _3650, _3655 * _3651));
                                float _4810 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3670 = ((_3666 * _3666) * (_3648 + (-1.0))) + 1.0;
                                float _3671 = _3608 * _3647;
                                float _3672 = _3671 * _3671;
                                float _3678 = ((1.0 - _3672) * dot(vec3(_1012, _1015, _1018), vec3(_3595, _3596, _3597))) + _3672;
                                float _4821 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3679 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3680 = 1.0 - _3647;
                                float _3690 = (0.5 / (((_3679 * ((_3662 * _3680) + _3647)) + 9.9999999392252902907785028219223e-09) + (((_3679 * _3680) + _3647) * _3662))) * _3679;
                                float _4832 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3700 = (_3625 * _3602) * (((_3648 * 3.1415927410125732421875) * (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0)))) / ((_3670 * _3670) * ((_3615 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3626 * _3472.y;
                                frontier_phi_83_pred_1 = _3626 * _3472.x;
                                frontier_phi_83_pred_2 = _3700 * _3484.z;
                                frontier_phi_83_pred_3 = _3700 * _3484.y;
                                frontier_phi_83_pred_4 = _3700 * _3484.x;
                                frontier_phi_83_pred_5 = _3626 * _3472.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3708 = frontier_phi_83_pred;
                            _3707 = frontier_phi_83_pred_1;
                            _3706 = frontier_phi_83_pred_2;
                            _3705 = frontier_phi_83_pred_3;
                            _3704 = frontier_phi_83_pred_4;
                            _3709 = frontier_phi_83_pred_5;
                            _3414 = _3707 + _3427;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            if (_3431 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3431;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3416;
                        frontier_phi_77_pred_1 = _3415;
                        frontier_phi_77_pred_2 = _3414;
                        frontier_phi_77_pred_3 = _3413;
                        frontier_phi_77_pred_4 = _3412;
                        frontier_phi_77_pred_5 = _3411;
                    }
                    _3053 = frontier_phi_77_pred;
                    _3051 = frontier_phi_77_pred_1;
                    _3049 = frontier_phi_77_pred_2;
                    _3047 = frontier_phi_77_pred_3;
                    _3045 = frontier_phi_77_pred_4;
                    _3043 = frontier_phi_77_pred_5;
                    uint _3209 = _3208 + 1u;
                    if (_3209 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3202 = _3043;
                        _3203 = _3045;
                        _3204 = _3047;
                        _3205 = _3049;
                        _3206 = _3051;
                        _3207 = _3053;
                        _3208 = _3209;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3047;
                frontier_phi_58_59_ladder_1 = _3053;
                frontier_phi_58_59_ladder_2 = _3051;
                frontier_phi_58_59_ladder_3 = _3049;
                frontier_phi_58_59_ladder_4 = _3045;
                frontier_phi_58_59_ladder_5 = _3043;
            }
            else
            {
                frontier_phi_58_59_ladder = _2925;
                frontier_phi_58_59_ladder_1 = _2931;
                frontier_phi_58_59_ladder_2 = _2929;
                frontier_phi_58_59_ladder_3 = _2927;
                frontier_phi_58_59_ladder_4 = _2923;
                frontier_phi_58_59_ladder_5 = _2921;
            }
            _3042 = frontier_phi_58_59_ladder_5;
            _3044 = frontier_phi_58_59_ladder_4;
            _3046 = frontier_phi_58_59_ladder;
            _3048 = frontier_phi_58_59_ladder_3;
            _3050 = frontier_phi_58_59_ladder_2;
            _3052 = frontier_phi_58_59_ladder_1;
        }
        float _3057 = isnan(1.0) ? _1071 : (isnan(_1071) ? 1.0 : min(_1071, 1.0));
        _2833 = (_3057 * _3048) + _2269;
        _2835 = (_3057 * _3050) + _2271;
        _2837 = (_3057 * _3052) + _2273;
        _2839 = ((_3042 * _1055) * _3057) + _2614;
        _2841 = ((_3044 * _1057) * _3057) + _2616;
        _2843 = ((_3046 * _1058) * _3057) + _2618;
    }
    else
    {
        _2833 = _2269;
        _2835 = _2271;
        _2837 = _2273;
        _2839 = _2614;
        _2841 = _2616;
        _2843 = _2618;
    }
    float _4848 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _4859 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4870 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _2860 = ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2833 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1071))) + ((_2839 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1909)) * cbPerFrame._m0[3u].x);
    float _2861 = ((isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2835 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1071))) + ((_2841 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1909)) * cbPerFrame._m0[3u].x);
    float _2862 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2837 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1071))) + ((_2843 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1909)) * cbPerFrame._m0[3u].x);
    uint _2863 = _282 + 6u;
    float _2871 = _993 / cbSceneParam._m0[86u].x;
    float _2872 = _994 / cbSceneParam._m0[86u].y;
    vec4 _2886 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, (log2((isnan(cbSceneParam._m0[77u].w) ? _915 : (isnan(_915) ? cbSceneParam._m0[77u].w : min(_915, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2888 = _2886.x;
    float _2889 = _2886.y;
    float _2890 = _2886.z;
    float _2891 = _2886.w;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_915 > cbSceneParam._m0[78u].w)
    {
        float _2946 = isnan(_915) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _915 : min(cbSceneParam._m0[80u].w, _915));
        float _2947 = _2946 / _915;
        float _2958 = _2947 * _966;
        float _2959 = _967 * _2947;
        float _2960 = (-0.0) - _2959;
        float _2962 = _2947 * _968;
        float _2964 = (cbSceneParam._m0[77u].w * _2960) / _2946;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2959;
        float _2972 = sqrt(((_2958 * _2958) + (_2959 * _2959)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2946)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3159;
        if (abs((_2960 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3159 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2982 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3103 = 1.0 / cbSceneParam._m0[80u].x;
            float _3104 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3105 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3114 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : min(_3104, 0.0));
            float _3115 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : min(_3105, 0.0));
            _3159 = ((abs(_2972 / _2960) * cbSceneParam._m0[80u].y) * ((((_3114 - _3115) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))))) * _3103)) - ((exp2(_2982 * _3114) - exp2(_2982 * _3115)) * _3103))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3161 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, 1.0), 0.0);
        float _3170 = exp2((_3159 * (-1.44269502162933349609375)) * (1.0 - _3161.w));
        float _3171 = log2(_3170);
        float _3187 = log2(_2891);
        _2984 = (exp2(_3187 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].x)) * _3161.x) / cbSceneParam._m0[78u].x)) + _2888;
        _2986 = (exp2(_3187 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].y)) * _3161.y) / cbSceneParam._m0[78u].y)) + _2889;
        _2988 = (exp2(_3187 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3171 * cbSceneParam._m0[78u].z)) * _3161.z) / cbSceneParam._m0[78u].z)) + _2890;
        _2990 = _3170 * _2891;
    }
    else
    {
        _2984 = _2888;
        _2986 = _2889;
        _2988 = _2890;
        _2990 = _2891;
    }
    bool _3197;
    vec4 _3000;
    vec4 _3022;
    float _3024;
    float _3028;
    float _3029;
    float _3030;
    float _3031;
    bool _3041;
    for (;;)
    {
        _3000 = cbMatDynParam._m0[0u];
        float _3002 = roundEven(_3000.y);
        bool _3003 = _3002 == 3.0;
        float _3004 = log2(_2990);
        float _3011 = exp2(_3004 * cbSceneParam._m0[78u].x) * _2860;
        float _3012 = exp2(_3004 * cbSceneParam._m0[78u].y) * _2861;
        float _3013 = exp2(_3004 * cbSceneParam._m0[78u].z) * _2862;
        float _3020 = _982 + (-0.5);
        _3022 = cbMtdParam._m0[1u];
        _3024 = _3022.y * _3020;
        float _3027 = (_3002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3028 = _3027 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2984)));
        _3029 = _3027 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
        _3030 = _3027 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
        _3031 = _3020 * 0.999000012874603271484375;
        _3041 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3041)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3031) < 0.5)
            {
                _3197 = true;
                break;
            }
        }
        uint _3138 = _1031 + uint(_3000.w);
        if ((cbInstanceData._m0[_3138].w < 1.0) && ((cbInstanceData._m0[_3138].w + _3031) < 0.5))
        {
            _3197 = true;
            break;
        }
        if ((_3024 + 1.0) < _3022.x)
        {
            _3197 = true;
            break;
        }
        _3197 = false;
        break;
    }
    float _3402;
    if (_3197)
    {
        discard_state = true;
        _3402 = 0.0;
    }
    else
    {
        _3402 = cbInstanceData._m0[_2863].w;
    }
    SV_Target.x = _3028;
    SV_Target.y = _3029;
    SV_Target.z = _3030;
    SV_Target.w = _3402;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2863].w;
    discard_exit();
}


