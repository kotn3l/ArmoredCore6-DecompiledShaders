#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1490;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _369.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3839 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _444 = (_437 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _445 = (_437 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _446 = (_437 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _369.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[23u].w) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3850 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _523 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444);
    float _526 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445);
    float _529 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446);
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _566 = _564.x;
    float _567 = _564.y;
    float _568 = _564.z;
    float _575 = ((_547.x - _566) * _437) + _566;
    float _576 = ((_547.y - _567) * _437) + _567;
    float _577 = ((_547.z - _568) * _437) + _568;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _602 = ((_589.z - _577) * _510) + _577;
    float _605 = ((((_589.x - _575) * _510) + _575) * 2.0) + (-1.0);
    float _607 = ((((_589.y - _576) * _510) + _576) * 2.0) + (-1.0);
    float _608 = dot(vec2(_605, _607), vec2(_605, _607));
    float _3861 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _613 = sqrt(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _639 = (((_627.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _605;
    float _640 = (((_627.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _607;
    float _643 = fma(_613, _249, fma(_640, _256, _639 * _242));
    float _646 = fma(_613, _250, fma(_640, _257, _639 * _243));
    float _649 = fma(_613, _251, fma(_640, _258, _639 * _244));
    float _653 = inversesqrt(dot(vec3(_643, _646, _649), vec3(_643, _646, _649)));
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _682 = _680.x;
    float _683 = 1.0 - _682;
    float _692 = (cbMtdParam._m0[19u].x + dot(vec4(_653 * _643, _653 * _646, _653 * _649, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_682 - _683) * cbMtdParam._m0[24u].z) + _683) * cbMtdParam._m0[21u].z);
    float _3872 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _693 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _695 = (-0.0) - cbMtdParam._m0[24u].x;
    float _697 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _698 = isnan(1.0) ? _697 : (isnan(_697) ? 1.0 : min(_697, 1.0));
    float _705 = _693 - ((_693 * TEXCOORD_8.x) * _698);
    float _706 = _693 - ((_693 * TEXCOORD_8.y) * _698);
    float _707 = _693 - ((_693 * TEXCOORD_8.z) * _698);
    float _714 = (_705 * (cbMtdParam._m0[17u].x - _523)) + _523;
    float _715 = (_706 * (cbMtdParam._m0[17u].y - _526)) + _526;
    float _716 = (_707 * (cbMtdParam._m0[17u].z - _529)) + _529;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _730 = _728.x;
    float _731 = 1.0 - _730;
    float _757 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_730 - _731) * cbMtdParam._m0[24u].w) + _731) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3893 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _758 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _766 = ((((cbMtdParam._m0[10u].x - _714) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _758) + _714;
    float _767 = ((((cbMtdParam._m0[10u].y - _715) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _758) + _715;
    float _768 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _716)) * _758) + _716;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _796 = _794.x;
    float _813 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _796) * _437) + _796;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _813) * _510) + _813;
    float _834 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _830) * cbMtdParam._m0[19u].z) + _830;
    float _836 = _834 - (_834 * _705);
    float _838 = _836 - (_836 * _758);
    float _842 = (cbMtdParam._m0[19u].w * (_627.z - _602)) + _602;
    vec4 _856 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _863 = (_856.x * 2.0) + (-1.0);
    float _864 = (_856.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _3904 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _873 = ((_856.z - _842) * _705) + _842;
    float _876 = ((cbMtdParam._m0[23u].x - _873) * _758) + _873;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _901 = (_895.x * 2.0) + (-1.0);
    float _902 = (_895.y * 2.0) + (-1.0);
    float _903 = dot(vec2(_901, _902), vec2(_901, _902));
    float _3915 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _918 = ((sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) - _613) * _707) + _613;
    float _921 = (((_863 - _639) * _705) + _639) + (cbMtdParam._m0[21u].x * _639);
    float _922 = (((_864 - _640) * _706) + _640) + (cbMtdParam._m0[21u].x * _640);
    float _933 = (((_901 - _921) + (_921 * cbMtdParam._m0[22u].z)) * _758) + _921;
    float _934 = (((_902 - _922) + (_922 * cbMtdParam._m0[22u].z)) * _758) + _922;
    float _935 = (_758 * (sqrt(1.0 - (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) - _918)) + _918;
    float _937 = cbMtdParam._m0[22u].x + _627.w;
    float _940 = fma(_935, _249, fma(_934, _256, _933 * _242));
    float _943 = fma(_935, _250, fma(_934, _257, _933 * _243));
    float _946 = fma(_935, _251, fma(_934, _258, _933 * _244));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _3926 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _954 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _3937 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _3948 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _3959 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _3970 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _3981 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _959 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _973 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    float _1038 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1039 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1057 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1060 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1063 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1077 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1083 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_1077].x;
    float _1084 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_1077].y;
    float _1085 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_1077].z;
    float _3992 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1087 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1089 = 1.0 - _959;
    float _1090 = _1086 * _1089;
    float _1091 = _1087 * _1089;
    float _1092 = _1088 * _1089;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _959;
    float _1098 = (_1087 + (-0.039999999105930328369140625)) * _959;
    float _1099 = (_1088 + (-0.039999999105930328369140625)) * _959;
    float _1100 = _1097 + 0.039999999105930328369140625;
    float _1102 = _1098 + 0.039999999105930328369140625;
    float _1103 = _1099 + 0.039999999105930328369140625;
    vec4 _1112 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1038, cbSceneParam._m0[86u].y * _1039));
    float _1116 = ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * TEXCOORD_5.w) * _1112.x;
    float _1117 = dot(vec3(_951, _952, _953), vec3(_1030, _1031, _1032));
    float _1120 = _1117 * 2.0;
    float _1124 = (_1120 * _951) - _1030;
    float _1125 = (_1120 * _952) - _1031;
    float _1126 = (_1120 * _953) - _1032;
    float _1130 = abs(dot(vec3(_1030, _1031, _1032), vec3(_951, _952, _953)));
    float _4025 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1132 = sqrt(_954);
    float _1145 = exp2((_1132 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1132 * 3.0));
    float _1151 = (1.0 - _1145) * ((_1132 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1152 = _1145 * _1132;
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1188 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1489;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1214 = fma(_1188, cbModelParam._m0[26u].z, fma(_1184, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180));
        float _1218 = fma(_1188, cbModelParam._m0[27u].z, fma(_1184, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180));
        float _1222 = fma(_1188, cbModelParam._m0[28u].z, fma(_1184, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180));
        float _1247 = _1180 + _951;
        float _1248 = _1184 + _952;
        float _1249 = _1188 + _953;
        float _1259 = fma(_1249, cbModelParam._m0[26u].z, fma(_1248, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1247)) - _1214;
        float _1260 = fma(_1249, cbModelParam._m0[27u].z, fma(_1248, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1247)) - _1218;
        float _1261 = fma(_1249, cbModelParam._m0[28u].z, fma(_1248, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1247)) - _1222;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1214 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1218 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[34u].z) + ((((((_1222 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1317 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1283.x + (-0.5));
        float _1319 = _1317 * (_1283.y + (-0.5));
        float _1320 = _1317 * (_1283.z + (-0.5));
        float _1327 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1290.x + (-0.5));
        float _1329 = _1327 * (_1290.y + (-0.5));
        float _1330 = _1327 * (_1290.z + (-0.5));
        float _1337 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1297.x + (-0.5));
        float _1339 = _1337 * (_1297.y + (-0.5));
        float _1340 = _1337 * (_1297.z + (-0.5));
        float _1347 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1304.x + (-0.5));
        float _1349 = _1347 * (_1304.y + (-0.5));
        float _1350 = _1347 * (_1304.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1371 = (dot(vec3(_951, _952, _953), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1381 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4073 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1383 + 1.0))) + _1388) * _1351;
        float _1398 = _1319 * 0.5;
        float _1399 = _1329 * 0.5;
        float _1400 = _1339 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_951, _952, _953), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4106 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1425 + 1.0))) + _1430) * _1352;
        float _1440 = _1320 * 0.5;
        float _1441 = _1330 * 0.5;
        float _1442 = _1340 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_951, _952, _953), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4139 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1467 + 1.0))) + _1472) * _1353;
        _1489 = _1320;
        _1491 = _1319;
        _1492 = _1318;
        _1493 = _1330;
        _1494 = _1329;
        _1495 = _1328;
        _1496 = _1340;
        _1497 = _1339;
        _1498 = _1338;
        _1499 = _1353;
        _1500 = _1352;
        _1501 = _1351;
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1503 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1504 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1490;
        _1491 = _1490;
        _1492 = _1490;
        _1493 = _1490;
        _1494 = _1490;
        _1495 = _1490;
        _1496 = _1490;
        _1497 = _1490;
        _1498 = _1490;
        _1499 = _1490;
        _1500 = _1490;
        _1501 = _1490;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1528 = fma(_1188, cbModelParam._m0[30u].z, fma(_1184, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180));
        float _1532 = fma(_1188, cbModelParam._m0[31u].z, fma(_1184, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180));
        float _1536 = fma(_1188, cbModelParam._m0[32u].z, fma(_1184, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180));
        float _1559 = _1180 + _951;
        float _1560 = _1184 + _952;
        float _1561 = _1188 + _953;
        float _1571 = fma(_1561, cbModelParam._m0[30u].z, fma(_1560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1559)) - _1528;
        float _1572 = fma(_1561, cbModelParam._m0[31u].z, fma(_1560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1559)) - _1532;
        float _1573 = fma(_1561, cbModelParam._m0[32u].z, fma(_1560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1559)) - _1536;
        float _1577 = inversesqrt(dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573)));
        float _1590 = ((_1577 * _1571) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1528 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1591 = ((_1577 * _1572) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1532 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1592 = ((_1577 * _1573) / cbModelParam._m0[35u].z) + ((((((_1536 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1590, _1591, _1592), 0.0);
        float _1627 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1594.x + (-0.5));
        float _1629 = _1627 * (_1594.y + (-0.5));
        float _1630 = _1627 * (_1594.z + (-0.5));
        float _1637 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1601.x + (-0.5));
        float _1639 = _1637 * (_1601.y + (-0.5));
        float _1640 = _1637 * (_1601.z + (-0.5));
        float _1647 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1608.x + (-0.5));
        float _1649 = _1647 * (_1608.y + (-0.5));
        float _1650 = _1647 * (_1608.z + (-0.5));
        float _1657 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1615.x + (-0.5));
        float _1659 = _1657 * (_1615.y + (-0.5));
        float _1660 = _1657 * (_1615.z + (-0.5));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1663 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1664 = _1628 * 0.5;
        float _1665 = _1638 * 0.5;
        float _1666 = _1648 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_951, _952, _953), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4202 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1691 + 1.0))) + _1696) * _1661;
        float _1706 = _1629 * 0.5;
        float _1707 = _1639 * 0.5;
        float _1708 = _1649 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_951, _952, _953), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1662 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4235 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1733 + 1.0))) + _1738) * _1662;
        float _1748 = _1630 * 0.5;
        float _1749 = _1640 * 0.5;
        float _1750 = _1650 * 0.5;
        float _1751 = dot(vec3(_1748, _1749, _1750), vec3(_1748, _1749, _1750));
        float _1756 = (_1751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1751);
        float _1764 = (dot(vec3(_951, _952, _953), vec3(_1756 * _1748, _1756 * _1749, _1756 * _1750)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1773 = sqrt(((_1749 * _1749) + (_1748 * _1748)) + (_1750 * _1750)) / (_1663 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1775 = _1774 * 2.0;
        float _1779 = (1.0 - _1774) / (_1774 + 1.0);
        float _4268 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1780 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1789 = ((((1.0 - _1780) * (_1775 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1775 + 1.0))) + _1780) * _1663;
        _1797 = _1630;
        _1798 = _1629;
        _1799 = _1628;
        _1800 = _1640;
        _1801 = _1639;
        _1802 = _1638;
        _1803 = _1650;
        _1804 = _1649;
        _1805 = _1648;
        _1806 = _1663;
        _1807 = _1662;
        _1808 = _1661;
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1810 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
        _1811 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)));
    }
    else
    {
        _1797 = _1490;
        _1798 = _1490;
        _1799 = _1490;
        _1800 = _1490;
        _1801 = _1490;
        _1802 = _1490;
        _1803 = _1490;
        _1804 = _1490;
        _1805 = _1490;
        _1806 = _1490;
        _1807 = _1490;
        _1808 = _1490;
        _1809 = 0.0;
        _1810 = 0.0;
        _1811 = 0.0;
    }
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1502)) + _1502;
    float _1822 = (cbModelParam._m0[1u].x * (_1810 - _1503)) + _1503;
    float _1823 = (cbModelParam._m0[1u].x * (_1811 - _1504)) + _1504;
    float _1844 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1847 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1850 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1821));
    float _1865 = _1124 * 0.5;
    float _1866 = _1125 * 0.5;
    float _1867 = _1126 * 0.5;
    float _1868 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1799, _1802, _1805, _1808));
    float _1871 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1798, _1801, _1804, _1807));
    float _1874 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1908;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1881 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1489, _1493, _1496, _1499));
        float _1885 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1491, _1494, _1497, _1500));
        float _1889 = dot(vec4(_1865, _1866, _1867, 1.0), vec4(_1492, _1495, _1498, _1501));
        float _1896 = dot(vec4(cbModelParam._m0[39u]), vec4(_1865, _1866, _1867, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1896) ? 0.0 : (isnan(0.0) ? _1896 : max(0.0, _1896))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1919;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1910 = dot(vec4(cbModelParam._m0[40u]), vec4(_1865, _1866, _1867, 1.0));
        _1919 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1919 = 1.0;
    }
    float _1923 = (_1919 * cbModelParam._m0[1u].x) + (_1908 * (1.0 - cbModelParam._m0[1u].x));
    float _1933 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1934 = isnan(_1933) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1933 : min(cbModelParam._m0[25u].z, _1933));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1982 = fma(_1188, cbModelParam._m0[13u].z, fma(_1184, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1180)) + cbModelParam._m0[13u].w;
        float _1986 = fma(_1188, cbModelParam._m0[14u].z, fma(_1184, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1180)) + cbModelParam._m0[14u].w;
        float _1990 = fma(_1188, cbModelParam._m0[15u].z, fma(_1184, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1180)) + cbModelParam._m0[15u].w;
        float _1993 = fma(_1126, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1124));
        float _1996 = fma(_1126, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1124));
        float _1999 = fma(_1126, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1124));
        float _2027;
        if (_1993 > 0.0)
        {
            _2027 = abs((1.0 - _1982) / _1993);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1982 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2027 = frontier_phi_14_12_ladder;
        }
        float _2251;
        if (_1996 > 0.0)
        {
            _2251 = abs((1.0 - _1986) / _1996);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1986 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2251 = frontier_phi_23_19_ladder;
        }
        float _2508;
        if (_1999 > 0.0)
        {
            _2508 = abs((1.0 - _1990) / _1999);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1990 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2508 = frontier_phi_35_30_ladder;
        }
        float _2510 = isnan(_2251) ? _2027 : (isnan(_2027) ? _2251 : min(_2027, _2251));
        float _2511 = isnan(_2508) ? _2510 : (isnan(_2510) ? _2508 : min(_2510, _2508));
        float _2515 = (_2511 * _1993) + _1982;
        float _2516 = (_2511 * _1996) + _1986;
        float _2517 = (_2511 * _1999) + _1990;
        float _2518 = _2511 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2518;
        float _2522 = _2518 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 > _2522) || ((_2516 < _2520) || ((_2515 < _2520) || (_2515 > _2522))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2517, cbModelParam._m0[9u].z, fma(_2516, cbModelParam._m0[9u].y, _2515 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2517, cbModelParam._m0[10u].z, fma(_2516, cbModelParam._m0[10u].y, _2515 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2517, cbModelParam._m0[11u].z, fma(_2516, cbModelParam._m0[11u].y, _2515 * cbModelParam._m0[11u].x))), _1934);
            frontier_phi_13_35_ladder = _2645.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2645.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2645.x * cbModelParam._m0[1u].y;
        }
        _2015 = frontier_phi_13_35_ladder_2;
        _2017 = frontier_phi_13_35_ladder_1;
        _2019 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2003 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1124, _1125, _1126), _1934);
        _2015 = _2003.x * cbModelParam._m0[1u].y;
        _2017 = _2003.y * cbModelParam._m0[1u].y;
        _2019 = _2003.z * cbModelParam._m0[1u].y;
    }
    float _2023 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2024 = isnan(_2023) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2023 : min(cbModelParam._m0[25u].w, _2023));
    float _2114;
    float _2116;
    float _2118;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2078 = fma(_1188, cbModelParam._m0[21u].z, fma(_1184, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1180)) + cbModelParam._m0[21u].w;
        float _2082 = fma(_1188, cbModelParam._m0[22u].z, fma(_1184, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1180)) + cbModelParam._m0[22u].w;
        float _2086 = fma(_1188, cbModelParam._m0[23u].z, fma(_1184, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1180)) + cbModelParam._m0[23u].w;
        float _2089 = fma(_1126, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1124));
        float _2092 = fma(_1126, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1124));
        float _2095 = fma(_1126, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1124));
        float _2256;
        if (_2089 > 0.0)
        {
            _2256 = abs((1.0 - _2078) / _2089);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2078 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2256 = frontier_phi_25_21_ladder;
        }
        float _2535;
        if (_2092 > 0.0)
        {
            _2535 = abs((1.0 - _2082) / _2092);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2092 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2082 + 1.0) / _2092);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2535 = frontier_phi_37_32_ladder;
        }
        float _2748;
        if (_2095 > 0.0)
        {
            _2748 = abs((1.0 - _2086) / _2095);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2086 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2748 = frontier_phi_46_43_ladder;
        }
        float _2750 = isnan(_2535) ? _2256 : (isnan(_2256) ? _2535 : min(_2256, _2535));
        float _2751 = isnan(_2748) ? _2750 : (isnan(_2750) ? _2748 : min(_2750, _2748));
        float _2755 = (_2751 * _2089) + _2078;
        float _2756 = (_2751 * _2092) + _2082;
        float _2757 = (_2751 * _2095) + _2086;
        float _2758 = _2751 * 9.9999997473787516355514526367188e-05;
        float _2759 = (-1.0) - _2758;
        float _2761 = _2758 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2757 > _2761) || ((_2757 < _2759) || ((_2756 > _2761) || ((_2756 < _2759) || ((_2755 < _2759) || (_2755 > _2761))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2757, cbModelParam._m0[17u].z, fma(_2756, cbModelParam._m0[17u].y, _2755 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2757, cbModelParam._m0[18u].z, fma(_2756, cbModelParam._m0[18u].y, _2755 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2757, cbModelParam._m0[19u].z, fma(_2756, cbModelParam._m0[19u].y, _2755 * cbModelParam._m0[19u].x))), _2024);
            frontier_phi_22_46_ladder = _2956.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2956.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2956.x * cbModelParam._m0[1u].z;
        }
        _2114 = frontier_phi_22_46_ladder_2;
        _2116 = frontier_phi_22_46_ladder_1;
        _2118 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1124, _1125, _1126), _2024);
        _2114 = _2098.x * cbModelParam._m0[1u].z;
        _2116 = _2098.y * cbModelParam._m0[1u].z;
        _2118 = _2098.z * cbModelParam._m0[1u].z;
    }
    float _2131 = (((_1151 * _1100) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2114 - _2015)) + _2015);
    float _2133 = (((_1151 * _1102) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2116 - _2017)) + _2017);
    float _2135 = (((_1151 * _1103) + _1152) * _1116) * ((cbModelParam._m0[1u].w * (_2118 - _2019)) + _2019);
    float _2138 = fma(_2135, cbSceneParam._m0[89u].z, fma(_2133, cbSceneParam._m0[89u].y, _2131 * cbSceneParam._m0[89u].x));
    float _2141 = fma(_2135, cbSceneParam._m0[90u].z, fma(_2133, cbSceneParam._m0[90u].y, _2131 * cbSceneParam._m0[90u].x));
    float _2144 = fma(_2135, cbSceneParam._m0[91u].z, fma(_2133, cbSceneParam._m0[91u].y, _2131 * cbSceneParam._m0[91u].x));
    vec4 _2152 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1038, _1039));
    float _2154 = _2152.w;
    float _2166 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2154);
    float _2167 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2154);
    float _2168 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2154);
    uvec4 _2172 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2174 = _2172.x * 14u;
    uint _2175 = _2174 + 13u;
    float _2182 = _1116 + (-1.0);
    float _2187 = (cbLight._m0[_2175].x * _2182) + 1.0;
    float _2188 = (cbLight._m0[_2175].y * _2182) + 1.0;
    float _2189 = (cbLight._m0[_2175].z * _2182) + 1.0;
    float _2190 = (cbLight._m0[_2175].w * _2182) + 1.0;
    uint _2191 = _2174 + 5u;
    float _2197 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2201 = _2174 + 4u;
    float _2210 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2214 = _2174 | 1u;
    float _2225 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_951, _952, _953));
    float _2228 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_951, _952, _953));
    float _4404 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _4415 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2233 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2235 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * 0.3183098733425140380859375;
    float _2242 = ((cbLight._m0[_2191].x * _2197) * _2235) + (((cbLight._m0[_2201].x * _2166) * _2210) * _2233);
    float _2243 = ((_2197 * cbLight._m0[_2191].y) * _2235) + (((cbLight._m0[_2201].y * _2167) * _2210) * _2233);
    float _2244 = ((_2197 * cbLight._m0[_2191].z) * _2235) + (((cbLight._m0[_2201].z * _2168) * _2210) * _2233);
    uvec4 _2248 = floatBitsToUint(cbLight._m0[_2174 + 12u]);
    bool _2250 = _2248.x == 0u;
    float _2261;
    float _2263;
    float _2265;
    if (_2250)
    {
        _2261 = _2242;
        _2263 = _2243;
        _2265 = _2244;
    }
    else
    {
        uint _2269 = _2174 + 6u;
        float _2285 = (dot(vec3(cbLight._m0[_2174 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4426 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2288 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2261 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2242;
        _2263 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2243;
        _2265 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2244;
    }
    bool _2268 = _2248.y == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2268)
    {
        _2306 = _2261;
        _2308 = _2263;
        _2310 = _2265;
    }
    else
    {
        uint _2479 = _2174 + 7u;
        float _2495 = (dot(vec3(cbLight._m0[_2174 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2496 = _2495 * _2495;
        float _4442 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2497 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2498 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2306 = (((cbLight._m0[_2479].x * 0.3183098733425140380859375) * _2497) * _2498) + _2261;
        _2308 = (((cbLight._m0[_2479].y * 0.3183098733425140380859375) * _2497) * _2498) + _2263;
        _2310 = (((cbLight._m0[_2479].z * 0.3183098733425140380859375) * _2497) * _2498) + _2265;
    }
    uint _2313 = _2174 + 8u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _954) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2174].x + _1030;
    float _2329 = cbLight._m0[_2174].y + _1031;
    float _2330 = cbLight._m0[_2174].z + _1032;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2174].xyz));
    float _4458 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _4469 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
    float _2342 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2343 = dot(vec3(_951, _952, _953), vec3(_2335, _2336, _2337));
    float _4480 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2335, _2336, _2337));
    float _4491 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2327 * _2327;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2363 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
    float _2364 = 0.959999978542327880859375 - _1097;
    float _2366 = 0.959999978542327880859375 - _1098;
    float _2367 = 0.959999978542327880859375 - _1099;
    float _2374 = 1.0 - _2327;
    float _2385 = (0.5 / (((_2342 * ((_2341 * _2374) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2374) + _2327) * _2341))) * _2341;
    float _4502 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2387 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    uint _2401 = _2174 + 9u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _954) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2214].x + _1030;
    float _2415 = cbLight._m0[_2214].y + _1031;
    float _2416 = cbLight._m0[_2214].z + _1032;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2214].xyz));
    float _4513 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2428 = dot(vec3(_951, _952, _953), vec3(_2421, _2422, _2423));
    float _4524 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _2432 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2421, _2422, _2423));
    float _4535 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = _2413 * _2413;
    float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
    float _2447 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
    float _2454 = 1.0 - _2413;
    float _2464 = (0.5 / (((_2342 * ((_2427 * _2454) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2454) + _2413) * _2427))) * _2427;
    float _4546 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2466 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
    float _2476 = (((((_2447 * _2364) + _1100) * cbLight._m0[_2401].x) * _2466) * _2197) + ((((cbLight._m0[_2313].x * _2166) * ((_2363 * _2364) + _1100)) * _2387) * _2210);
    float _2477 = (((((_2447 * _2366) + _1102) * cbLight._m0[_2401].y) * _2466) * _2197) + ((((cbLight._m0[_2313].y * _2167) * ((_2363 * _2366) + _1102)) * _2387) * _2210);
    float _2478 = (((((_2447 * _2367) + _1103) * cbLight._m0[_2401].z) * _2466) * _2197) + ((((cbLight._m0[_2313].z * _2168) * ((_2363 * _2367) + _1103)) * _2387) * _2210);
    float _2540;
    float _2542;
    float _2544;
    if (_2250)
    {
        _2540 = _2476;
        _2542 = _2477;
        _2544 = _2478;
    }
    else
    {
        uint _2546 = _2174 + 2u;
        uint _2550 = _2174 + 10u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _954) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _1030;
        float _2567 = cbLight._m0[_2546].y + _1031;
        float _2568 = cbLight._m0[_2546].z + _1032;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2546].xyz));
        float _4557 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2580 = dot(vec3(_951, _952, _953), vec3(_2573, _2574, _2575));
        float _4568 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4579 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
        float _2606 = 1.0 - _2565;
        float _2616 = (0.5 / (((_2342 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2606) + _2565) * _2579))) * _2579;
        float _4590 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2540 = (((((_2599 * _2364) + _1100) * cbLight._m0[_2550].x) * _2618) * _2619) + _2476;
        _2542 = (((((_2599 * _2366) + _1102) * cbLight._m0[_2550].y) * _2618) * _2619) + _2477;
        _2544 = (((((_2599 * _2367) + _1103) * cbLight._m0[_2550].z) * _2618) * _2619) + _2478;
    }
    float _2654;
    float _2656;
    float _2658;
    if (_2268)
    {
        _2654 = _2540;
        _2656 = _2542;
        _2658 = _2544;
    }
    else
    {
        uint _2665 = _2174 + 3u;
        uint _2669 = _2174 + 11u;
        float _2683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2665].w)) * _954) * 0.949999988079071044921875);
        float _2684 = _2683 * _2683;
        float _2685 = cbLight._m0[_2665].x + _1030;
        float _2686 = cbLight._m0[_2665].y + _1031;
        float _2687 = cbLight._m0[_2665].z + _1032;
        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
        float _2692 = _2691 * _2685;
        float _2693 = _2691 * _2686;
        float _2694 = _2691 * _2687;
        float _2695 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2665].xyz));
        float _4606 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2699 = dot(vec3(_951, _952, _953), vec3(_2692, _2693, _2694));
        float _4617 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2703 = dot(vec3(cbLight._m0[_2665].xyz), vec3(_2692, _2693, _2694));
        float _4628 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2707 = _2684 * _2684;
        float _2711 = ((_2702 * _2702) * (_2707 + (-1.0))) + 1.0;
        float _2718 = exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0);
        float _2725 = 1.0 - _2684;
        float _2735 = (0.5 / (((_2342 * ((_2698 * _2725) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2725) + _2684) * _2698))) * _2698;
        float _4639 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2707 / ((_2711 * _2711) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2654 = (((((_2718 * _2364) + _1100) * cbLight._m0[_2669].x) * _2737) * _2738) + _2540;
        _2656 = (((((_2718 * _2366) + _1102) * cbLight._m0[_2669].y) * _2737) * _2738) + _2542;
        _2658 = (((((_2718 * _2367) + _1103) * cbLight._m0[_2669].z) * _2737) * _2738) + _2544;
    }
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    if (_2172.y == 0u)
    {
        float _2813 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2813;
        float _2815 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2813;
        float _2816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2813;
        uvec4 _2828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2829 = _2828.x;
        uint _2840 = uint((float(_2828.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1039) / _2829))) + floor(float(uint(cbSceneParam._m0[85u].x * _1038) / _2829)));
        float _2850 = (log2(_2816 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2851 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        uint _2854 = uint(isnan(14.0) ? _2851 : (isnan(_2851) ? 14.0 : min(_2851, 14.0)));
        uvec4 _2859 = texelFetch(g_lightClusterGridBuffer, int(((_2854 << 2u) + (_2840 << 6u)) >> 2u));
        uint _2860 = _2859.x;
        uint _2861 = _2828.z;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((((1u << ((_2861 >> 4u) & 15u)) + 4294967295u) & _2860) == 0u) || ((_2861 & 240u) == 0u))
        {
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
        }
        else
        {
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            uint _3111 = 0u;
            uint _3120;
            bool _3121;
            for (;;)
            {
                _3120 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3111 << 2u)) >> 2u)).x;
                _3121 = _3120 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3121)
                {
                    frontier_phi_61_pred = _3105;
                    frontier_phi_61_pred_1 = _3110;
                    frontier_phi_61_pred_2 = _3109;
                    frontier_phi_61_pred_3 = _3108;
                    frontier_phi_61_pred_4 = _3107;
                    frontier_phi_61_pred_5 = _3106;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3108;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3120;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3111 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _2814;
                        float _3296 = _3255.y - _2815;
                        float _3297 = _3255.z - _2816;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_1057, _1060, _1063), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4665 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _2814;
                        float _3331 = (-0.0) - _2815;
                        float _3332 = (-0.0) - _2816;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3347 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3348 = 1.0 - _1132;
                        float _3355 = sqrt(1.0 - ((1.0 - (_3348 * _3348)) * (1.0 - (_3347 * _3347))));
                        float _3356 = _3355 * _3355;
                        float _3357 = _3356 * _3356;
                        float _3358 = _3337 + _3302;
                        float _3359 = _3338 + _3303;
                        float _3360 = _3339 + _3304;
                        float _3364 = inversesqrt(dot(vec3(_3358, _3359, _3360), vec3(_3358, _3359, _3360)));
                        float _3368 = dot(vec3(_1057, _1060, _1063), vec3(_3337, _3338, _3339));
                        float _4681 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3371 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3372 = dot(vec3(_1057, _1060, _1063), vec3(_3364 * _3358, _3364 * _3359, _3364 * _3360));
                        float _4692 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3379 = ((_3375 * _3375) * (_3357 + (-1.0))) + 1.0;
                        float _3380 = _3315 * _3356;
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3305) + _3381;
                        float _4703 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                        float _3386 = 1.0 - _3356;
                        float _3396 = (0.5 / (((_3385 * ((_3371 * _3386) + _3356)) + 9.9999999392252902907785028219223e-09) + (((_3385 * _3386) + _3356) * _3371))) * _3385;
                        float _4714 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3407 = (((_3357 * 3.1415927410125732421875) * (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) / ((_3379 * _3379) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3164 = (_3326 * _3274.x) + _3232;
                        _3165 = (_3326 * _3274.y) + _3233;
                        _3166 = (_3326 * _3274.z) + _3234;
                        _3161 = (_3407 * _3291.x) + _3229;
                        _3162 = (_3407 * _3291.y) + _3230;
                        _3163 = (_3407 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3164;
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_61_pred = _3161;
                    frontier_phi_61_pred_1 = _3166;
                    frontier_phi_61_pred_2 = _3165;
                    frontier_phi_61_pred_3 = _3164;
                    frontier_phi_61_pred_4 = _3163;
                    frontier_phi_61_pred_5 = _3162;
                }
                _2962 = frontier_phi_61_pred;
                _2972 = frontier_phi_61_pred_1;
                _2970 = frontier_phi_61_pred_2;
                _2968 = frontier_phi_61_pred_3;
                _2966 = frontier_phi_61_pred_4;
                _2964 = frontier_phi_61_pred_5;
                uint _3112 = _3111 + 1u;
                if (_3112 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3105 = _2962;
                    _3106 = _2964;
                    _3107 = _2966;
                    _3108 = _2968;
                    _3109 = _2970;
                    _3110 = _2972;
                    _3111 = _3112;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
        }
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.z;
        uint _2978 = (_2976 >> 8u) & 15u;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        if (((4294967295u << _2978) & _2860) == 0u)
        {
            _3073 = _2961;
            _3075 = _2963;
            _3077 = _2965;
            _3079 = _2967;
            _3081 = _2969;
            _3083 = _2971;
        }
        else
        {
            float _3098 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
            float _3099 = _3098 * _2814;
            float _3100 = _3098 * _2815;
            float _3101 = _3098 * _2816;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2978 < ((_2976 >> 12u) & 15u))
            {
                float _3074;
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3212 = _2961;
                float _3213 = _2963;
                float _3214 = _2965;
                float _3215 = _2967;
                float _3216 = _2969;
                float _3217 = _2971;
                uint _3218 = _2978;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2854 << 5u) + (_2840 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3228)
                    {
                        frontier_phi_67_pred = _3215;
                        frontier_phi_67_pred_1 = _3216;
                        frontier_phi_67_pred_2 = _3217;
                        frontier_phi_67_pred_3 = _3214;
                        frontier_phi_67_pred_4 = _3213;
                        frontier_phi_67_pred_5 = _3212;
                    }
                    else
                    {
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3425 = _3212;
                        float _3426 = _3213;
                        float _3427 = _3214;
                        float _3428 = _3215;
                        float _3429 = _3216;
                        float _3430 = _3217;
                        uint _3431 = _3227;
                        uint _3432;
                        vec4 _3457;
                        float _3458;
                        vec4 _3473;
                        vec3 _3485;
                        vec4 _3500;
                        vec4 _3515;
                        float _3561;
                        bool _3562;
                        for (;;)
                        {
                            uint _3442 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3431));
                            _3432 = (_3431 + 4294967295u) & _3431;
                            uint _3444 = _3442 * 40u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            _3458 = _3457.w;
                            uint _3460 = (_3442 * 40u) + 4u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3442 * 40u) + 8u;
                            _3485 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x));
                            uint _3487 = (_3442 * 40u) + 16u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            uint _3502 = (_3442 * 40u) + 20u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            uint _3517 = (_3442 * 40u) + 24u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3536 = (_3442 * 40u) + 28u;
                            vec4 _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            _3561 = fma(_2816, _3549.z, fma(_2815, _3549.y, _3549.x * _2814)) + _3549.w;
                            _3562 = !((fma(_2816, _3530.z, fma(_2815, _3530.y, _3530.x * _2814)) + _3530.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3562)
                            {
                                float _3589 = _3457.x - _2814;
                                float _3590 = _3457.y - _2815;
                                float _3591 = _3457.z - _2816;
                                float _3592 = dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591));
                                float _3595 = inversesqrt(_3592);
                                float _3596 = _3595 * _3589;
                                float _3597 = _3595 * _3590;
                                float _3598 = _3595 * _3591;
                                float _3602 = 1.0 - (_3592 / (_3458 * _3458));
                                float _4725 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3607 = sqrt(_3592) * _3473.w;
                                float _3609 = 1.39999997615814208984375 / (_3607 + 1.39999997615814208984375);
                                float _3610 = _3609 * _3609;
                                float _3613 = ((1.0 - _3610) * dot(vec3(_3596, _3597, _3598), vec3(_1057, _1060, _1063))) + _3610;
                                float _3616 = _3607 * _3607;
                                float _3620 = (fma(_2816, _3500.z, fma(_2815, _3500.y, _3500.x * _2814)) + _3500.w) / _3561;
                                float _3621 = (fma(_2816, _3515.z, fma(_2815, _3515.y, _3515.x * _2814)) + _3515.w) / _3561;
                                float _3625 = 1.0 - dot(vec2(_3620, _3621), vec2(_3620, _3621));
                                float _4741 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3627 = _3626 * (((isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0))) * _3603) / ((_3616 * 0.699999988079071044921875) + 1.0));
                                float _3639 = exp2(log2(1.0 / ((_3616 * 3.5) + 5.0)) * 0.25);
                                float _3640 = 1.0 - _1132;
                                float _3647 = sqrt(1.0 - ((1.0 - (_3640 * _3640)) * (1.0 - (_3639 * _3639))));
                                float _3648 = _3647 * _3647;
                                float _3649 = _3648 * _3648;
                                float _3650 = _3596 - _3099;
                                float _3651 = _3597 - _3100;
                                float _3652 = _3598 - _3101;
                                float _3656 = inversesqrt(dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652)));
                                float _3660 = dot(vec3(_1057, _1060, _1063), vec3((-0.0) - _3099, (-0.0) - _3100, (-0.0) - _3101));
                                float _4752 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3663 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3664 = dot(vec3(_1057, _1060, _1063), vec3(_3656 * _3650, _3656 * _3651, _3656 * _3652));
                                float _4763 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3671 = ((_3667 * _3667) * (_3649 + (-1.0))) + 1.0;
                                float _3672 = _3609 * _3648;
                                float _3673 = _3672 * _3672;
                                float _3679 = ((1.0 - _3673) * dot(vec3(_1057, _1060, _1063), vec3(_3596, _3597, _3598))) + _3673;
                                float _4774 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                                float _3681 = 1.0 - _3648;
                                float _3691 = (0.5 / (((_3680 * ((_3663 * _3681) + _3648)) + 9.9999999392252902907785028219223e-09) + (((_3680 * _3681) + _3648) * _3663))) * _3680;
                                float _4785 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3701 = (_3626 * _3603) * (((_3649 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3671 * _3671) * ((_3616 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3701 * _3485.x;
                                frontier_phi_73_pred_1 = _3701 * _3485.y;
                                frontier_phi_73_pred_2 = _3627 * _3473.z;
                                frontier_phi_73_pred_3 = _3627 * _3473.y;
                                frontier_phi_73_pred_4 = _3627 * _3473.x;
                                frontier_phi_73_pred_5 = _3701 * _3485.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3705 = frontier_phi_73_pred;
                            _3706 = frontier_phi_73_pred_1;
                            _3710 = frontier_phi_73_pred_2;
                            _3709 = frontier_phi_73_pred_3;
                            _3708 = frontier_phi_73_pred_4;
                            _3707 = frontier_phi_73_pred_5;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            if (_3432 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3432;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3415;
                        frontier_phi_67_pred_1 = _3416;
                        frontier_phi_67_pred_2 = _3417;
                        frontier_phi_67_pred_3 = _3414;
                        frontier_phi_67_pred_4 = _3413;
                        frontier_phi_67_pred_5 = _3412;
                    }
                    _3080 = frontier_phi_67_pred;
                    _3082 = frontier_phi_67_pred_1;
                    _3084 = frontier_phi_67_pred_2;
                    _3078 = frontier_phi_67_pred_3;
                    _3076 = frontier_phi_67_pred_4;
                    _3074 = frontier_phi_67_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3074;
                        _3213 = _3076;
                        _3214 = _3078;
                        _3215 = _3080;
                        _3216 = _3082;
                        _3217 = _3084;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3082;
                frontier_phi_55_56_ladder_1 = _3084;
                frontier_phi_55_56_ladder_2 = _3080;
                frontier_phi_55_56_ladder_3 = _3078;
                frontier_phi_55_56_ladder_4 = _3076;
                frontier_phi_55_56_ladder_5 = _3074;
            }
            else
            {
                frontier_phi_55_56_ladder = _2969;
                frontier_phi_55_56_ladder_1 = _2971;
                frontier_phi_55_56_ladder_2 = _2967;
                frontier_phi_55_56_ladder_3 = _2965;
                frontier_phi_55_56_ladder_4 = _2963;
                frontier_phi_55_56_ladder_5 = _2961;
            }
            _3073 = frontier_phi_55_56_ladder_5;
            _3075 = frontier_phi_55_56_ladder_4;
            _3077 = frontier_phi_55_56_ladder_3;
            _3079 = frontier_phi_55_56_ladder_2;
            _3081 = frontier_phi_55_56_ladder;
            _3083 = frontier_phi_55_56_ladder_1;
        }
        float _3088 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
        _2873 = (_3088 * _3079) + _2306;
        _2875 = (_3088 * _3081) + _2308;
        _2877 = (_3088 * _3083) + _2310;
        _2879 = ((_3073 * _1100) * _3088) + _2654;
        _2881 = ((_3075 * _1102) * _3088) + _2656;
        _2883 = ((_3077 * _1103) * _3088) + _2658;
    }
    else
    {
        _2873 = _2306;
        _2875 = _2308;
        _2877 = _2310;
        _2879 = _2654;
        _2881 = _2656;
        _2883 = _2658;
    }
    float _4801 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _4812 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _4823 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    uint _2903 = _261 + 6u;
    float _2911 = _1038 / cbSceneParam._m0[86u].x;
    float _2912 = _1039 / cbSceneParam._m0[86u].y;
    vec4 _2926 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, (log2((isnan(cbSceneParam._m0[77u].w) ? _973 : (isnan(_973) ? cbSceneParam._m0[77u].w : min(_973, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2928 = _2926.x;
    float _2929 = _2926.y;
    float _2930 = _2926.z;
    float _2931 = _2926.w;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_973 > cbSceneParam._m0[78u].w)
    {
        float _2986 = isnan(_973) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _973 : min(cbSceneParam._m0[80u].w, _973));
        float _2987 = _2986 / _973;
        float _2998 = _2987 * _1023;
        float _2999 = _1024 * _2987;
        float _3000 = (-0.0) - _2999;
        float _3001 = _2987 * _1025;
        float _3003 = (cbSceneParam._m0[77u].w * _3000) / _2986;
        float _3004 = _3003 + cbSceneParam._m0[79u].w;
        float _3005 = cbSceneParam._m0[79u].w - _2999;
        float _3011 = sqrt(((_2998 * _2998) + (_2999 * _2999)) + (_3001 * _3001));
        float _3014 = (1.0 - (cbSceneParam._m0[77u].w / _2986)) * _3011;
        float _3019 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3021 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3174;
        if (abs((_3000 - _3003) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3174 = ((((_3004 > 0.0) ? exp2(_3019 * _3004) : (2.0 - exp2(_3021 * _3004))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3014;
        }
        else
        {
            float _3134 = 1.0 / cbSceneParam._m0[80u].x;
            float _3135 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : max(_3004, _3005));
            float _3136 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : min(_3004, _3005));
            float _3145 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : min(_3135, 0.0));
            float _3146 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : min(_3136, 0.0));
            _3174 = ((abs(_3011 / _3000) * cbSceneParam._m0[80u].y) * ((((_3145 - _3146) * 2.0) - ((exp2(_3019 * (isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0)))) - exp2(_3019 * (isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0))))) * _3134)) - ((exp2(_3021 * _3145) - exp2(_3021 * _3146)) * _3134))) + (_3014 * cbSceneParam._m0[80u].z);
        }
        vec4 _3176 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2911, _2912, 1.0), 0.0);
        float _3185 = exp2((_3174 * (-1.44269502162933349609375)) * (1.0 - _3176.w));
        float _3186 = log2(_3185);
        float _3202 = log2(_2931);
        _3023 = (exp2(_3202 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].x)) * _3176.x) / cbSceneParam._m0[78u].x)) + _2928;
        _3025 = (exp2(_3202 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].y)) * _3176.y) / cbSceneParam._m0[78u].y)) + _2929;
        _3027 = (exp2(_3202 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3186 * cbSceneParam._m0[78u].z)) * _3176.z) / cbSceneParam._m0[78u].z)) + _2930;
        _3029 = _3185 * _2931;
    }
    else
    {
        _3023 = _2928;
        _3025 = _2929;
        _3027 = _2930;
        _3029 = _2931;
    }
    float _3041 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3042 = _3041 == 3.0;
    float _3043 = log2(_3029);
    float _3050 = exp2(_3043 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2873 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1116))) + ((_2879 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3051 = exp2(_3043 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2875 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1116))) + ((_2881 + ((isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3052 = exp2(_3043 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * (_2877 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1116))) + ((_2883 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1923)) * cbPerFrame._m0[3u].x));
    float _3061 = (_3041 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3061 * (_3042 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3023)));
    SV_Target.y = _3061 * (_3042 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3025)));
    SV_Target.z = _3061 * (_3042 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3027)));
    SV_Target.w = cbInstanceData._m0[_2903].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2903].w;
}


