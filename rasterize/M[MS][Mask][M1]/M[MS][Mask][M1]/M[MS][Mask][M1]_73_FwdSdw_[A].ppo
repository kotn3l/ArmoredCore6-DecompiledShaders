#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1470;
float _4133;
float _4134;
float _4135;
float _4136;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4145 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4156 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _4167 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4178 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _455 = (_448 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _456 = (_448 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _457 = (_448 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4189 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _534 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _528;
    float _537 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _529;
    float _540 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _530;
    float _547 = ((_528 - _534) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) + _534;
    float _548 = ((_529 - _537) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) + _537;
    float _549 = ((_530 - _540) * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) + _540;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _610 = _608.x;
    float _611 = _608.y;
    float _612 = _608.z;
    float _619 = ((_591.x - _610) * _448) + _610;
    float _620 = ((_591.y - _611) * _448) + _611;
    float _621 = ((_591.z - _612) * _448) + _612;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _646 = ((_633.z - _621) * _521) + _621;
    float _649 = ((((_633.x - _619) * _521) + _619) * 2.0) + (-1.0);
    float _650 = ((((_633.y - _620) * _521) + _620) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _4200 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _686 = (_649 + ((((_566.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_674.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _687 = (_650 + ((((_566.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_674.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _690 = fma(_656, _249, fma(_687, _256, _686 * _242));
    float _693 = fma(_656, _250, fma(_687, _257, _686 * _243));
    float _696 = fma(_656, _251, fma(_687, _258, _686 * _244));
    float _700 = inversesqrt(dot(vec3(_690, _693, _696), vec3(_690, _693, _696)));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _739 = (cbMtdParam._m0[19u].x + dot(vec4(_700 * _690, _700 * _693, _700 * _696, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_729 - _730) * cbMtdParam._m0[24u].z) + _730) * cbMtdParam._m0[21u].z);
    float _4211 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _740 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _747 = (_740 * (cbMtdParam._m0[17u].x - _547)) + _547;
    float _748 = (_740 * (cbMtdParam._m0[17u].y - _548)) + _548;
    float _749 = (_740 * (cbMtdParam._m0[17u].z - _549)) + _549;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _777 = _775.x;
    float _795 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _777) * _448) + _777;
    float _812 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _795) * _521) + _795;
    float _816 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _812) * cbMtdParam._m0[19u].z) + _812;
    float _818 = _816 - (_816 * _740);
    float _823 = (((_566.z - _646) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _646;
    float _827 = ((_674.z - _823) * cbMtdParam._m0[19u].w) + _823;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _847 = (_840.x * 2.0) + (-1.0);
    float _848 = (_840.y * 2.0) + (-1.0);
    float _849 = dot(vec2(_847, _848), vec2(_847, _848));
    float _4222 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _857 = ((_840.z - _827) * _740) + _827;
    float _867 = ((sqrt(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) - _656) * _740) + _656;
    float _870 = (((_847 - _686) * _740) + _686) + (cbMtdParam._m0[21u].x * _686);
    float _871 = (((_848 - _687) * _740) + _687) + (cbMtdParam._m0[21u].x * _687);
    float _875 = cbMtdParam._m0[22u].x + _674.w;
    float _878 = fma(_867, _249, fma(_871, _256, _870 * _242));
    float _881 = fma(_867, _250, fma(_871, _257, _870 * _243));
    float _884 = fma(_867, _251, fma(_871, _258, _870 * _244));
    float _888 = inversesqrt(dot(vec3(_878, _881, _884), vec3(_878, _881, _884)));
    float _889 = _888 * _878;
    float _890 = _888 * _881;
    float _891 = _888 * _884;
    float _4233 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _892 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _4244 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4255 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4266 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4277 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4288 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _897 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    vec4 _976 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _978 = _976.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1150 = sqrt(((_962 * _962) + (_963 * _963)) + (_964 * _964));
        float _1156 = (cbMatDynParam._m0[5u].x * _1150) + cbMatDynParam._m0[5u].y;
        float _4299 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1161 = (cbMatDynParam._m0[5u].z * _1150) + cbMatDynParam._m0[5u].w;
        float _4310 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) - _1157)) + _1157) < ((_978 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _989 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _990 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1008 = fma(_891, cbSceneParam._m0[5u].z, fma(_890, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _889));
    float _1011 = fma(_891, cbSceneParam._m0[6u].z, fma(_890, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _889));
    float _1014 = fma(_891, cbSceneParam._m0[7u].z, fma(_890, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _889));
    uint _1027 = _282 + 9u;
    uint _1028 = _1027 + uint(cbMatDynParam._m0[0u].w);
    float _1034 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * cbInstanceData._m0[_1028].x;
    float _1035 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * cbInstanceData._m0[_1028].y;
    float _1036 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * cbInstanceData._m0[_1028].z;
    float _4321 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _1040 = 1.0 - _897;
    float _1041 = _1037 * _1040;
    float _1042 = _1038 * _1040;
    float _1043 = _1039 * _1040;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _897;
    float _1049 = (_1038 + (-0.039999999105930328369140625)) * _897;
    float _1050 = (_1039 + (-0.039999999105930328369140625)) * _897;
    float _1051 = _1048 + 0.039999999105930328369140625;
    float _1053 = _1049 + 0.039999999105930328369140625;
    float _1054 = _1050 + 0.039999999105930328369140625;
    vec4 _1063 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _989, cbSceneParam._m0[86u].y * _990));
    float _1067 = ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * TEXCOORD_5.w) * _1063.x;
    float _1068 = dot(vec3(_889, _890, _891), vec3(_969, _970, _971));
    float _1071 = _1068 * 2.0;
    float _1075 = (_1071 * _889) - _969;
    float _1076 = (_1071 * _890) - _970;
    float _1077 = (_1071 * _891) - _971;
    float _1081 = abs(dot(vec3(_969, _970, _971), vec3(_889, _890, _891)));
    float _4354 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1083 = sqrt(_892);
    float _1096 = exp2((_1083 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1083 * 3.0));
    float _1102 = (1.0 - _1096) * ((_1083 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1103 = _1096 * _1083;
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1469;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1194 = fma(_1139, cbModelParam._m0[26u].z, fma(_1135, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131));
        float _1198 = fma(_1139, cbModelParam._m0[27u].z, fma(_1135, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131));
        float _1202 = fma(_1139, cbModelParam._m0[28u].z, fma(_1135, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131));
        float _1227 = _1131 + _889;
        float _1228 = _1135 + _890;
        float _1229 = _1139 + _891;
        float _1239 = fma(_1229, cbModelParam._m0[26u].z, fma(_1228, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1227)) - _1194;
        float _1240 = fma(_1229, cbModelParam._m0[27u].z, fma(_1228, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1227)) - _1198;
        float _1241 = fma(_1229, cbModelParam._m0[28u].z, fma(_1228, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1227)) - _1202;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1194 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1198 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[34u].z) + ((((((_1202 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1297 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1263.x + (-0.5));
        float _1299 = _1297 * (_1263.y + (-0.5));
        float _1300 = _1297 * (_1263.z + (-0.5));
        float _1307 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1270.x + (-0.5));
        float _1309 = _1307 * (_1270.y + (-0.5));
        float _1310 = _1307 * (_1270.z + (-0.5));
        float _1317 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1277.x + (-0.5));
        float _1319 = _1317 * (_1277.y + (-0.5));
        float _1320 = _1317 * (_1277.z + (-0.5));
        float _1327 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1284.x + (-0.5));
        float _1329 = _1327 * (_1284.y + (-0.5));
        float _1330 = _1327 * (_1284.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1351 = (dot(vec3(_889, _890, _891), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1361 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4402 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1363 + 1.0))) + _1368) * _1331;
        float _1378 = _1299 * 0.5;
        float _1379 = _1309 * 0.5;
        float _1380 = _1319 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_889, _890, _891), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4413 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4424 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4435 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_1405 + 1.0))) + _1410) * _1332;
        float _1420 = _1300 * 0.5;
        float _1421 = _1310 * 0.5;
        float _1422 = _1320 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_889, _890, _891), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4446 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4457 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4468 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_1447 + 1.0))) + _1452) * _1333;
        _1469 = _1300;
        _1471 = _1299;
        _1472 = _1298;
        _1473 = _1310;
        _1474 = _1309;
        _1475 = _1308;
        _1476 = _1320;
        _1477 = _1319;
        _1478 = _1318;
        _1479 = _1333;
        _1480 = _1332;
        _1481 = _1331;
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1470;
        _1471 = _1470;
        _1472 = _1470;
        _1473 = _1470;
        _1474 = _1470;
        _1475 = _1470;
        _1476 = _1470;
        _1477 = _1470;
        _1478 = _1470;
        _1479 = _1470;
        _1480 = _1470;
        _1481 = _1470;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1511 = fma(_1139, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1131));
        float _1515 = fma(_1139, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1131));
        float _1519 = fma(_1139, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1131));
        float _1542 = _1131 + _889;
        float _1543 = _1135 + _890;
        float _1544 = _1139 + _891;
        float _1554 = fma(_1544, cbModelParam._m0[30u].z, fma(_1543, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1542)) - _1511;
        float _1555 = fma(_1544, cbModelParam._m0[31u].z, fma(_1543, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1542)) - _1515;
        float _1556 = fma(_1544, cbModelParam._m0[32u].z, fma(_1543, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1542)) - _1519;
        float _1560 = inversesqrt(dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556)));
        float _1573 = ((_1560 * _1554) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1511 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1560 * _1555) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1515 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1575 = ((_1560 * _1556) / cbModelParam._m0[35u].z) + ((((((_1519 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        float _1610 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1577.x + (-0.5));
        float _1612 = _1610 * (_1577.y + (-0.5));
        float _1613 = _1610 * (_1577.z + (-0.5));
        float _1620 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1584.x + (-0.5));
        float _1622 = _1620 * (_1584.y + (-0.5));
        float _1623 = _1620 * (_1584.z + (-0.5));
        float _1630 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1591.x + (-0.5));
        float _1632 = _1630 * (_1591.y + (-0.5));
        float _1633 = _1630 * (_1591.z + (-0.5));
        float _1640 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1598.x + (-0.5));
        float _1642 = _1640 * (_1598.y + (-0.5));
        float _1643 = _1640 * (_1598.z + (-0.5));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = _1611 * 0.5;
        float _1648 = _1621 * 0.5;
        float _1649 = _1631 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_889, _890, _891), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4509 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4520 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4531 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_1674 + 1.0))) + _1679) * _1644;
        float _1689 = _1612 * 0.5;
        float _1690 = _1622 * 0.5;
        float _1691 = _1632 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_889, _890, _891), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4542 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4553 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4564 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_1716 + 1.0))) + _1721) * _1645;
        float _1731 = _1613 * 0.5;
        float _1732 = _1623 * 0.5;
        float _1733 = _1633 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_889, _890, _891), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4575 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4586 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4597 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_1758 + 1.0))) + _1763) * _1646;
        _1780 = _1613;
        _1781 = _1612;
        _1782 = _1611;
        _1783 = _1623;
        _1784 = _1622;
        _1785 = _1621;
        _1786 = _1633;
        _1787 = _1632;
        _1788 = _1631;
        _1789 = _1646;
        _1790 = _1645;
        _1791 = _1644;
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
    }
    else
    {
        _1780 = _1470;
        _1781 = _1470;
        _1782 = _1470;
        _1783 = _1470;
        _1784 = _1470;
        _1785 = _1470;
        _1786 = _1470;
        _1787 = _1470;
        _1788 = _1470;
        _1789 = _1470;
        _1790 = _1470;
        _1791 = _1470;
        _1792 = 0.0;
        _1793 = 0.0;
        _1794 = 0.0;
    }
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1482)) + _1482;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1483)) + _1483;
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1484)) + _1484;
    float _1827 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1804));
    float _1848 = _1075 * 0.5;
    float _1849 = _1076 * 0.5;
    float _1850 = _1077 * 0.5;
    float _1851 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1854 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1857 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1891;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1864 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1469, _1473, _1476, _1479));
        float _1868 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1471, _1474, _1477, _1480));
        float _1872 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1879 = dot(vec4(cbModelParam._m0[39u]), vec4(_1848, _1849, _1850, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1902;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1893 = dot(vec4(cbModelParam._m0[40u]), vec4(_1848, _1849, _1850, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1906 = (_1902 * cbModelParam._m0[1u].x) + (_1891 * (1.0 - cbModelParam._m0[1u].x));
    float _1916 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _892);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1916 : min(cbModelParam._m0[25u].z, _1916));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1965 = fma(_1139, cbModelParam._m0[13u].z, fma(_1135, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1131)) + cbModelParam._m0[13u].w;
        float _1969 = fma(_1139, cbModelParam._m0[14u].z, fma(_1135, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1131)) + cbModelParam._m0[14u].w;
        float _1973 = fma(_1139, cbModelParam._m0[15u].z, fma(_1135, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1131)) + cbModelParam._m0[15u].w;
        float _1976 = fma(_1077, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075));
        float _1979 = fma(_1077, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075));
        float _1982 = fma(_1077, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075));
        float _2010;
        if (_1976 > 0.0)
        {
            _2010 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2010 = frontier_phi_17_15_ladder;
        }
        float _2182;
        if (_1979 > 0.0)
        {
            _2182 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2182 = frontier_phi_26_22_ladder;
        }
        float _2477;
        if (_1982 > 0.0)
        {
            _2477 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2477 = frontier_phi_38_33_ladder;
        }
        float _2479 = isnan(_2182) ? _2010 : (isnan(_2010) ? _2182 : min(_2010, _2182));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1976) + _1965;
        float _2485 = (_2480 * _1979) + _1969;
        float _2486 = (_2480 * _1982) + _1973;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2487;
        float _2491 = _2487 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 > _2491) || ((_2485 < _2489) || ((_2484 < _2489) || (_2484 > _2491))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1917);
            frontier_phi_16_38_ladder = _2631.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2631.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2631.x * cbModelParam._m0[1u].y;
        }
        _1998 = frontier_phi_16_38_ladder_2;
        _2000 = frontier_phi_16_38_ladder_1;
        _2002 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1075, _1076, _1077), _1917);
        _1998 = _1986.x * cbModelParam._m0[1u].y;
        _2000 = _1986.y * cbModelParam._m0[1u].y;
        _2002 = _1986.z * cbModelParam._m0[1u].y;
    }
    float _2006 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _892);
    float _2007 = isnan(_2006) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2006 : min(cbModelParam._m0[25u].w, _2006));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2061 = fma(_1139, cbModelParam._m0[21u].z, fma(_1135, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1131)) + cbModelParam._m0[21u].w;
        float _2065 = fma(_1139, cbModelParam._m0[22u].z, fma(_1135, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1131)) + cbModelParam._m0[22u].w;
        float _2069 = fma(_1139, cbModelParam._m0[23u].z, fma(_1135, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1131)) + cbModelParam._m0[23u].w;
        float _2072 = fma(_1077, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075));
        float _2075 = fma(_1077, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075));
        float _2078 = fma(_1077, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075));
        float _2187;
        if (_2072 > 0.0)
        {
            _2187 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2187 = frontier_phi_28_24_ladder;
        }
        float _2504;
        if (_2075 > 0.0)
        {
            _2504 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2504 = frontier_phi_40_35_ladder;
        }
        float _2842;
        if (_2078 > 0.0)
        {
            _2842 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2842 = frontier_phi_50_47_ladder;
        }
        float _2844 = isnan(_2504) ? _2187 : (isnan(_2187) ? _2504 : min(_2187, _2504));
        float _2845 = isnan(_2842) ? _2844 : (isnan(_2844) ? _2842 : min(_2844, _2842));
        float _2849 = (_2845 * _2072) + _2061;
        float _2850 = (_2845 * _2075) + _2065;
        float _2851 = (_2845 * _2078) + _2069;
        float _2852 = _2845 * 9.9999997473787516355514526367188e-05;
        float _2853 = (-1.0) - _2852;
        float _2855 = _2852 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2851 > _2855) || ((_2851 < _2853) || ((_2850 > _2855) || ((_2850 < _2853) || ((_2849 < _2853) || (_2849 > _2855))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2851, cbModelParam._m0[17u].z, fma(_2850, cbModelParam._m0[17u].y, _2849 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2851, cbModelParam._m0[18u].z, fma(_2850, cbModelParam._m0[18u].y, _2849 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2851, cbModelParam._m0[19u].z, fma(_2850, cbModelParam._m0[19u].y, _2849 * cbModelParam._m0[19u].x))), _2007);
            frontier_phi_25_50_ladder = _2973.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2973.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2973.x * cbModelParam._m0[1u].z;
        }
        _2097 = frontier_phi_25_50_ladder_2;
        _2099 = frontier_phi_25_50_ladder_1;
        _2101 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2081 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1075, _1076, _1077), _2007);
        _2097 = _2081.x * cbModelParam._m0[1u].z;
        _2099 = _2081.y * cbModelParam._m0[1u].z;
        _2101 = _2081.z * cbModelParam._m0[1u].z;
    }
    float _2114 = (((_1102 * _1051) + _1103) * _1067) * ((cbModelParam._m0[1u].w * (_2097 - _1998)) + _1998);
    float _2116 = (((_1102 * _1053) + _1103) * _1067) * ((cbModelParam._m0[1u].w * (_2099 - _2000)) + _2000);
    float _2118 = (((_1102 * _1054) + _1103) * _1067) * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2121 = fma(_2118, cbSceneParam._m0[89u].z, fma(_2116, cbSceneParam._m0[89u].y, _2114 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2118, cbSceneParam._m0[90u].z, fma(_2116, cbSceneParam._m0[90u].y, _2114 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2118, cbSceneParam._m0[91u].z, fma(_2116, cbSceneParam._m0[91u].y, _2114 * cbSceneParam._m0[91u].x));
    float _2161 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2165 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2169 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2174 = _2161 / _2173;
    float _2175 = _2165 / _2173;
    float _2176 = _2169 / _2173;
    float _2323;
    float _2324;
    float _2325;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2203 = ((uint(_2176 > cbSceneParam._m0[59u].y) + uint(_2176 > cbSceneParam._m0[59u].x)) + uint(_2176 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2204 = _2203 + 43u;
        uint _2212 = _2203 + 44u;
        uint _2220 = _2203 + 45u;
        uint _2228 = _2203 + 46u;
        float _2239 = fma(_2173, cbSceneParam._m0[_2204].w, fma(_2169, cbSceneParam._m0[_2204].z, fma(_2165, cbSceneParam._m0[_2204].y, _2161 * cbSceneParam._m0[_2204].x)));
        float _2243 = fma(_2173, cbSceneParam._m0[_2212].w, fma(_2169, cbSceneParam._m0[_2212].z, fma(_2165, cbSceneParam._m0[_2212].y, _2161 * cbSceneParam._m0[_2212].x)));
        float _2251 = fma(_2173, cbSceneParam._m0[_2228].w, fma(_2169, cbSceneParam._m0[_2228].z, fma(_2165, cbSceneParam._m0[_2228].y, _2161 * cbSceneParam._m0[_2228].x)));
        float _2256 = cbSceneParam._m0[33u].z * _2251;
        float _2258 = cbSceneParam._m0[33u].w * _2251;
        float _2261 = fma(_2173, cbSceneParam._m0[_2220].w, fma(_2169, cbSceneParam._m0[_2220].z, fma(_2165, cbSceneParam._m0[_2220].y, _2161 * cbSceneParam._m0[_2220].x))) / _2251;
        float _2309 = (cbSceneParam._m0[33u].x - sqrt(((_2175 * _2175) + (_2174 * _2174)) + (_2176 * _2176))) * cbSceneParam._m0[33u].y;
        float _4723 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2316 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 + _2239) / _2251, (_2258 + _2243) / _2251), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 + _2239) / _2251, (_2243 - _2256) / _2251), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2239 - _2256) / _2251, (_2243 - _2258) / _2251), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2239 - _2258) / _2251, (_2256 + _2243) / _2251), _2261), 0.0)).x), vec4(0.25)));
        _2323 = 1.0 - (_2316 * cbSceneParam._m0[34u].x);
        _2324 = 1.0 - (_2316 * cbSceneParam._m0[34u].y);
        _2325 = 1.0 - (_2316 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2323 = 1.0;
        _2324 = 1.0;
        _2325 = 1.0;
    }
    float _2389;
    float _2391;
    float _2393;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2377 = fma(_2173, cbSceneParam._m0[63u].w, fma(_2169, cbSceneParam._m0[63u].z, fma(_2165, cbSceneParam._m0[63u].y, _2161 * cbSceneParam._m0[63u].x)));
        float _2378 = fma(_2173, cbSceneParam._m0[60u].w, fma(_2169, cbSceneParam._m0[60u].z, fma(_2165, cbSceneParam._m0[60u].y, _2161 * cbSceneParam._m0[60u].x))) / _2377;
        float _2379 = fma(_2173, cbSceneParam._m0[61u].w, fma(_2169, cbSceneParam._m0[61u].z, fma(_2165, cbSceneParam._m0[61u].y, _2161 * cbSceneParam._m0[61u].x))) / _2377;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2378 >= cbSceneParam._m0[64u].x) && (_2379 >= cbSceneParam._m0[64u].y)) && (_2378 <= cbSceneParam._m0[64u].z)) && (_2379 <= cbSceneParam._m0[64u].w))
        {
            float _2517 = fma(_2173, cbSceneParam._m0[62u].w, fma(_2169, cbSceneParam._m0[62u].z, fma(_2165, cbSceneParam._m0[62u].y, _2161 * cbSceneParam._m0[62u].x))) / _2377;
            float _2521 = isnan(cbSceneParam._m0[41u].w) ? _2517 : (isnan(_2517) ? cbSceneParam._m0[41u].w : max(_2517, cbSceneParam._m0[41u].w));
            float _2564 = (cbSceneParam._m0[33u].x - sqrt(((_2175 * _2175) + (_2174 * _2174)) + (_2176 * _2176))) * cbSceneParam._m0[33u].y;
            float _4739 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
            float _2571 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2378, cbSceneParam._m0[33u].w + _2379), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2378, _2379 - cbSceneParam._m0[33u].z), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2378 - cbSceneParam._m0[33u].z, _2379 - cbSceneParam._m0[33u].w), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2378 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2379), _2521), 0.0)).x), vec4(0.25)));
            float _2575 = 1.0 - (_2571 * cbSceneParam._m0[34u].x);
            float _2576 = 1.0 - (_2571 * cbSceneParam._m0[34u].y);
            float _2577 = 1.0 - (_2571 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2577) ? _2325 : (isnan(_2325) ? _2577 : min(_2325, _2577));
            frontier_phi_37_36_ladder_1 = isnan(_2576) ? _2324 : (isnan(_2324) ? _2576 : min(_2324, _2576));
            frontier_phi_37_36_ladder_2 = isnan(_2575) ? _2323 : (isnan(_2323) ? _2575 : min(_2323, _2575));
        }
        else
        {
            frontier_phi_37_36_ladder = _2325;
            frontier_phi_37_36_ladder_1 = _2324;
            frontier_phi_37_36_ladder_2 = _2323;
        }
        _2389 = frontier_phi_37_36_ladder_2;
        _2391 = frontier_phi_37_36_ladder_1;
        _2393 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2389 = _2323;
        _2391 = _2324;
        _2393 = _2325;
    }
    uvec4 _2398 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2400 = _2398.x * 14u;
    uint _2401 = _2400 + 13u;
    float _2408 = _1067 + (-1.0);
    float _2413 = (cbLight._m0[_2401].x * _2408) + 1.0;
    float _2414 = (cbLight._m0[_2401].y * _2408) + 1.0;
    float _2415 = (cbLight._m0[_2401].z * _2408) + 1.0;
    float _2416 = (cbLight._m0[_2401].w * _2408) + 1.0;
    uint _2417 = _2400 + 5u;
    float _2423 = isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0));
    uint _2427 = _2400 + 4u;
    float _2436 = isnan(1.0) ? _2413 : (isnan(_2413) ? 1.0 : min(_2413, 1.0));
    uint _2440 = _2400 | 1u;
    float _2451 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_889, _890, _891));
    float _2454 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_889, _890, _891));
    float _4775 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _4786 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2459 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * 0.3183098733425140380859375;
    float _2461 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * 0.3183098733425140380859375;
    float _2468 = ((cbLight._m0[_2417].x * _2423) * _2461) + (((cbLight._m0[_2427].x * _2389) * _2436) * _2459);
    float _2469 = ((_2423 * cbLight._m0[_2417].y) * _2461) + (((cbLight._m0[_2427].y * _2391) * _2436) * _2459);
    float _2470 = ((_2423 * cbLight._m0[_2417].z) * _2461) + (((cbLight._m0[_2427].z * _2393) * _2436) * _2459);
    uvec4 _2474 = floatBitsToUint(cbLight._m0[_2400 + 12u]);
    bool _2476 = _2474.x == 0u;
    float _2578;
    float _2580;
    float _2582;
    if (_2476)
    {
        _2578 = _2468;
        _2580 = _2469;
        _2582 = _2470;
    }
    else
    {
        uint _2586 = _2400 + 6u;
        float _2602 = (dot(vec3(cbLight._m0[_2400 + 2u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2603 = _2602 * _2602;
        float _4797 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2604 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2605 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
        _2578 = (((cbLight._m0[_2586].x * 0.3183098733425140380859375) * _2604) * _2605) + _2468;
        _2580 = (((cbLight._m0[_2586].y * 0.3183098733425140380859375) * _2604) * _2605) + _2469;
        _2582 = (((cbLight._m0[_2586].z * 0.3183098733425140380859375) * _2604) * _2605) + _2470;
    }
    bool _2585 = _2474.y == 0u;
    float _2640;
    float _2642;
    float _2644;
    if (_2585)
    {
        _2640 = _2578;
        _2642 = _2580;
        _2644 = _2582;
    }
    else
    {
        uint _2813 = _2400 + 7u;
        float _2829 = (dot(vec3(cbLight._m0[_2400 + 3u].xyz), vec3(_889, _890, _891)) * 0.5) + 0.5;
        float _2830 = _2829 * _2829;
        float _4813 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2831 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2832 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2640 = (((cbLight._m0[_2813].x * 0.3183098733425140380859375) * _2831) * _2832) + _2578;
        _2642 = (((cbLight._m0[_2813].y * 0.3183098733425140380859375) * _2831) * _2832) + _2580;
        _2644 = (((cbLight._m0[_2813].z * 0.3183098733425140380859375) * _2831) * _2832) + _2582;
    }
    uint _2647 = _2400 + 8u;
    float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _892) * 0.949999988079071044921875);
    float _2661 = _2660 * _2660;
    float _2662 = cbLight._m0[_2400].x + _969;
    float _2663 = cbLight._m0[_2400].y + _970;
    float _2664 = cbLight._m0[_2400].z + _971;
    float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
    float _2669 = _2668 * _2662;
    float _2670 = _2668 * _2663;
    float _2671 = _2668 * _2664;
    float _2672 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2400].xyz));
    float _4829 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
    float _4840 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2676 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
    float _2677 = dot(vec3(_889, _890, _891), vec3(_2669, _2670, _2671));
    float _4851 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2681 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2669, _2670, _2671));
    float _4862 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2685 = _2661 * _2661;
    float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
    float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) * 5.0);
    float _2698 = 0.959999978542327880859375 - _1048;
    float _2700 = 0.959999978542327880859375 - _1049;
    float _2701 = 0.959999978542327880859375 - _1050;
    float _2708 = 1.0 - _2661;
    float _2719 = (0.5 / (((_2676 * ((_2675 * _2708) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2708) + _2661) * _2675))) * _2675;
    float _4873 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2721 = (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
    uint _2735 = _2400 + 9u;
    float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _892) * 0.949999988079071044921875);
    float _2747 = _2746 * _2746;
    float _2748 = cbLight._m0[_2440].x + _969;
    float _2749 = cbLight._m0[_2440].y + _970;
    float _2750 = cbLight._m0[_2440].z + _971;
    float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
    float _2755 = _2754 * _2748;
    float _2756 = _2754 * _2749;
    float _2757 = _2754 * _2750;
    float _2758 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2440].xyz));
    float _4884 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
    float _2762 = dot(vec3(_889, _890, _891), vec3(_2755, _2756, _2757));
    float _4895 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2765 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _2766 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2755, _2756, _2757));
    float _4906 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2770 = _2747 * _2747;
    float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
    float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0);
    float _2788 = 1.0 - _2747;
    float _2798 = (0.5 / (((_2676 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2788) + _2747) * _2761))) * _2761;
    float _4917 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2800 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
    float _2810 = (((((_2781 * _2698) + _1051) * cbLight._m0[_2735].x) * _2800) * _2423) + ((((cbLight._m0[_2647].x * _2389) * ((_2697 * _2698) + _1051)) * _2721) * _2436);
    float _2811 = (((((_2781 * _2700) + _1053) * cbLight._m0[_2735].y) * _2800) * _2423) + ((((cbLight._m0[_2647].y * _2391) * ((_2697 * _2700) + _1053)) * _2721) * _2436);
    float _2812 = (((((_2781 * _2701) + _1054) * cbLight._m0[_2735].z) * _2800) * _2423) + ((((cbLight._m0[_2647].z * _2393) * ((_2697 * _2701) + _1054)) * _2721) * _2436);
    float _2868;
    float _2870;
    float _2872;
    if (_2476)
    {
        _2868 = _2810;
        _2870 = _2811;
        _2872 = _2812;
    }
    else
    {
        uint _2874 = _2400 + 2u;
        uint _2878 = _2400 + 10u;
        float _2892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2874].w)) * _892) * 0.949999988079071044921875);
        float _2893 = _2892 * _2892;
        float _2894 = cbLight._m0[_2874].x + _969;
        float _2895 = cbLight._m0[_2874].y + _970;
        float _2896 = cbLight._m0[_2874].z + _971;
        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
        float _2901 = _2900 * _2894;
        float _2902 = _2900 * _2895;
        float _2903 = _2900 * _2896;
        float _2904 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2874].xyz));
        float _4928 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
        float _2908 = dot(vec3(_889, _890, _891), vec3(_2901, _2902, _2903));
        float _4939 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2912 = dot(vec3(cbLight._m0[_2874].xyz), vec3(_2901, _2902, _2903));
        float _4950 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2916 = _2893 * _2893;
        float _2920 = ((_2911 * _2911) * (_2916 + (-1.0))) + 1.0;
        float _2927 = exp2(log2(1.0 - (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) * 5.0);
        float _2934 = 1.0 - _2893;
        float _2944 = (0.5 / (((_2676 * ((_2907 * _2934) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2934) + _2893) * _2907))) * _2907;
        float _4961 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2946 = (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2916 / ((_2920 * _2920) * 3.141590118408203125));
        float _2947 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
        _2868 = (((((_2927 * _2698) + _1051) * cbLight._m0[_2878].x) * _2946) * _2947) + _2810;
        _2870 = (((((_2927 * _2700) + _1053) * cbLight._m0[_2878].y) * _2946) * _2947) + _2811;
        _2872 = (((((_2927 * _2701) + _1054) * cbLight._m0[_2878].z) * _2946) * _2947) + _2812;
    }
    float _2978;
    float _2980;
    float _2982;
    if (_2585)
    {
        _2978 = _2868;
        _2980 = _2870;
        _2982 = _2872;
    }
    else
    {
        uint _2989 = _2400 + 3u;
        uint _2993 = _2400 + 11u;
        float _3007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2989].w)) * _892) * 0.949999988079071044921875);
        float _3008 = _3007 * _3007;
        float _3009 = cbLight._m0[_2989].x + _969;
        float _3010 = cbLight._m0[_2989].y + _970;
        float _3011 = cbLight._m0[_2989].z + _971;
        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
        float _3016 = _3015 * _3009;
        float _3017 = _3015 * _3010;
        float _3018 = _3015 * _3011;
        float _3019 = dot(vec3(_889, _890, _891), vec3(cbLight._m0[_2989].xyz));
        float _4977 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3022 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
        float _3023 = dot(vec3(_889, _890, _891), vec3(_3016, _3017, _3018));
        float _4988 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3026 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _3027 = dot(vec3(cbLight._m0[_2989].xyz), vec3(_3016, _3017, _3018));
        float _4999 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3031 = _3008 * _3008;
        float _3035 = ((_3026 * _3026) * (_3031 + (-1.0))) + 1.0;
        float _3042 = exp2(log2(1.0 - (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0)))) * 5.0);
        float _3049 = 1.0 - _3008;
        float _3059 = (0.5 / (((_2676 * ((_3022 * _3049) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _3049) + _3008) * _3022))) * _3022;
        float _5010 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3061 = (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_3031 / ((_3035 * _3035) * 3.141590118408203125));
        float _3062 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2978 = (((((_3042 * _2698) + _1051) * cbLight._m0[_2993].x) * _3061) * _3062) + _2868;
        _2980 = (((((_3042 * _2700) + _1053) * cbLight._m0[_2993].y) * _3061) * _3062) + _2870;
        _2982 = (((((_3042 * _2701) + _1054) * cbLight._m0[_2993].z) * _3061) * _3062) + _2872;
    }
    float _3128;
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_2398.y == 0u)
    {
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.x;
        uint _3095 = uint((float(_3083.y) * floor(float(uint(cbSceneParam._m0[85u].y * _990) / _3084))) + floor(float(uint(cbSceneParam._m0[85u].x * _989) / _3084)));
        float _3105 = (log2(_2176 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3106 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
        uint _3109 = uint(isnan(14.0) ? _3106 : (isnan(_3106) ? 14.0 : min(_3106, 14.0)));
        uvec4 _3114 = texelFetch(g_lightClusterGridBuffer, int(((_3109 << 2u) + (_3095 << 6u)) >> 2u));
        uint _3115 = _3114.x;
        uint _3116 = _3083.z;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        if (((((1u << ((_3116 >> 4u) & 15u)) + 4294967295u) & _3115) == 0u) || ((_3116 & 240u) == 0u))
        {
            _3195 = 0.0;
            _3197 = 0.0;
            _3199 = 0.0;
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
        }
        else
        {
            float _3196;
            float _3198;
            float _3200;
            float _3202;
            float _3204;
            float _3206;
            float _3348 = 0.0;
            float _3349 = 0.0;
            float _3350 = 0.0;
            float _3351 = 0.0;
            float _3352 = 0.0;
            float _3353 = 0.0;
            uint _3354 = 0u;
            uint _3363;
            bool _3364;
            for (;;)
            {
                _3363 = texelFetch(g_lightClassification, int((((_3109 << 5u) + (_3095 << 9u)) + (_3354 << 2u)) >> 2u)).x;
                _3364 = _3363 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3364)
                {
                    frontier_phi_71_pred = _3353;
                    frontier_phi_71_pred_1 = _3352;
                    frontier_phi_71_pred_2 = _3351;
                    frontier_phi_71_pred_3 = _3350;
                    frontier_phi_71_pred_4 = _3349;
                    frontier_phi_71_pred_5 = _3348;
                }
                else
                {
                    float _3493;
                    float _3494;
                    float _3495;
                    float _3496;
                    float _3497;
                    float _3498;
                    uint _3499;
                    _3493 = _3348;
                    _3494 = _3349;
                    _3495 = _3350;
                    _3496 = _3351;
                    _3497 = _3352;
                    _3498 = _3353;
                    _3499 = _3363;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    float _3425;
                    for (;;)
                    {
                        uint _3503 = uint(findLSB(_3499)) + (_3354 << 5u);
                        uint _3500 = (_3499 + 4294967295u) & _3499;
                        uint _3505 = _3503 * 48u;
                        vec4 _3519 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3505)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3505 + 3u)).x));
                        uint _3525 = (_3503 * 48u) + 4u;
                        vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3525)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3525 + 3u)).x));
                        uint _3544 = (_3503 * 48u) + 8u;
                        vec3 _3555 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3544)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 2u)).x));
                        float _3559 = _3519.x - _2174;
                        float _3560 = _3519.y - _2175;
                        float _3561 = _3519.z - _2176;
                        float _3562 = dot(vec3(_3559, _3560, _3561), vec3(_3559, _3560, _3561));
                        float _3565 = inversesqrt(_3562);
                        float _3566 = _3565 * _3559;
                        float _3567 = _3565 * _3560;
                        float _3568 = _3565 * _3561;
                        float _3569 = dot(vec3(_1008, _1011, _1014), vec3(_3566, _3567, _3568));
                        float _3574 = 1.0 - (_3562 * _3519.w);
                        float _5036 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3575 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                        float _3576 = sqrt(_3562) * _3538.w;
                        float _3579 = 1.39999997615814208984375 / (_3576 + 1.39999997615814208984375);
                        float _3580 = _3579 * _3579;
                        float _3583 = ((1.0 - _3580) * _3569) + _3580;
                        float _3586 = _3576 * _3576;
                        float _3590 = ((isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0))) * _3575) / ((_3586 * 0.699999988079071044921875) + 1.0);
                        float _3594 = (-0.0) - _2174;
                        float _3595 = (-0.0) - _2175;
                        float _3596 = (-0.0) - _2176;
                        float _3600 = inversesqrt(dot(vec3(_3594, _3595, _3596), vec3(_3594, _3595, _3596)));
                        float _3601 = _3600 * _3594;
                        float _3602 = _3600 * _3595;
                        float _3603 = _3600 * _3596;
                        float _3610 = exp2(log2(1.0 / ((_3586 * 3.5) + 5.0)) * 0.25);
                        float _3611 = 1.0 - _1083;
                        float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                        float _3619 = _3618 * _3618;
                        float _3620 = _3619 * _3619;
                        float _3621 = _3601 + _3566;
                        float _3622 = _3602 + _3567;
                        float _3623 = _3603 + _3568;
                        float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                        float _3631 = dot(vec3(_1008, _1011, _1014), vec3(_3601, _3602, _3603));
                        float _5052 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                        float _3634 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                        float _3635 = dot(vec3(_1008, _1011, _1014), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                        float _5063 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                        float _3638 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                        float _3643 = _3579 * _3619;
                        float _3644 = _3643 * _3643;
                        float _3647 = ((1.0 - _3644) * _3569) + _3644;
                        float _5074 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                        float _3648 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                        float _3649 = 1.0 - _3619;
                        float _3659 = (0.5 / (((_3648 * ((_3634 * _3649) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3648 * _3649) + _3619) * _3634))) * _3648;
                        float _5085 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3670 = (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0)))) / ((_3642 * _3642) * ((_3586 * 2.1991131305694580078125) + 3.141590118408203125))) * _3575;
                        _3423 = (_3590 * _3538.x) + _3496;
                        _3424 = (_3590 * _3538.y) + _3497;
                        _3425 = (_3590 * _3538.z) + _3498;
                        _3420 = (_3670 * _3555.x) + _3493;
                        _3421 = (_3670 * _3555.y) + _3494;
                        _3422 = (_3670 * _3555.z) + _3495;
                        if (_3500 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3493 = _3420;
                            _3494 = _3421;
                            _3495 = _3422;
                            _3496 = _3423;
                            _3497 = _3424;
                            _3498 = _3425;
                            _3499 = _3500;
                        }
                    }
                    frontier_phi_71_pred = _3425;
                    frontier_phi_71_pred_1 = _3424;
                    frontier_phi_71_pred_2 = _3423;
                    frontier_phi_71_pred_3 = _3422;
                    frontier_phi_71_pred_4 = _3421;
                    frontier_phi_71_pred_5 = _3420;
                }
                _3206 = frontier_phi_71_pred;
                _3204 = frontier_phi_71_pred_1;
                _3202 = frontier_phi_71_pred_2;
                _3200 = frontier_phi_71_pred_3;
                _3198 = frontier_phi_71_pred_4;
                _3196 = frontier_phi_71_pred_5;
                uint _3355 = _3354 + 1u;
                if (_3355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3348 = _3196;
                    _3349 = _3198;
                    _3350 = _3200;
                    _3351 = _3202;
                    _3352 = _3204;
                    _3353 = _3206;
                    _3354 = _3355;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3195 = _3196;
            _3197 = _3198;
            _3199 = _3200;
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
        }
        uvec4 _3209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3210 = _3209.z;
        uint _3212 = (_3210 >> 8u) & 15u;
        float _3316;
        float _3318;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        if (((4294967295u << _3212) & _3115) == 0u)
        {
            _3316 = _3195;
            _3318 = _3197;
            _3320 = _3199;
            _3322 = _3201;
            _3324 = _3203;
            _3326 = _3205;
        }
        else
        {
            float _3341 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
            float _3342 = _3341 * _2174;
            float _3343 = _3341 * _2175;
            float _3344 = _3341 * _2176;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3212 < ((_3210 >> 12u) & 15u))
            {
                float _3317;
                float _3319;
                float _3321;
                float _3323;
                float _3325;
                float _3327;
                float _3476 = _3195;
                float _3477 = _3197;
                float _3478 = _3199;
                float _3479 = _3201;
                float _3480 = _3203;
                float _3481 = _3205;
                uint _3482 = _3212;
                uint _3491;
                bool _3492;
                for (;;)
                {
                    _3491 = texelFetch(g_lightClassification, int((((_3109 << 5u) + (_3095 << 9u)) + (_3482 << 2u)) >> 2u)).x;
                    _3492 = _3491 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3492)
                    {
                        frontier_phi_82_pred = _3481;
                        frontier_phi_82_pred_1 = _3480;
                        frontier_phi_82_pred_2 = _3479;
                        frontier_phi_82_pred_3 = _3478;
                        frontier_phi_82_pred_4 = _3477;
                        frontier_phi_82_pred_5 = _3476;
                    }
                    else
                    {
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3977;
                        float _3978;
                        float _3979;
                        float _3980;
                        float _3981;
                        float _3982;
                        float _3697 = _3476;
                        float _3698 = _3477;
                        float _3699 = _3478;
                        float _3700 = _3479;
                        float _3701 = _3480;
                        float _3702 = _3481;
                        uint _3703 = _3491;
                        uint _3704;
                        vec4 _3729;
                        float _3730;
                        vec4 _3745;
                        vec3 _3757;
                        vec4 _3772;
                        vec4 _3787;
                        float _3833;
                        bool _3834;
                        for (;;)
                        {
                            uint _3714 = ((_3482 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3703));
                            _3704 = (_3703 + 4294967295u) & _3703;
                            uint _3716 = _3714 * 40u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            _3730 = _3729.w;
                            uint _3732 = (_3714 * 40u) + 4u;
                            _3745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3732 + 3u)).x));
                            uint _3747 = (_3714 * 40u) + 8u;
                            _3757 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x));
                            uint _3759 = (_3714 * 40u) + 16u;
                            _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3774 = (_3714 * 40u) + 20u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3714 * 40u) + 24u;
                            vec4 _3802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 3u)).x));
                            uint _3808 = (_3714 * 40u) + 28u;
                            vec4 _3821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3808 + 3u)).x));
                            _3833 = fma(_2176, _3821.z, fma(_2175, _3821.y, _3821.x * _2174)) + _3821.w;
                            _3834 = !((fma(_2176, _3802.z, fma(_2175, _3802.y, _3802.x * _2174)) + _3802.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3834)
                            {
                                float _3861 = _3729.x - _2174;
                                float _3862 = _3729.y - _2175;
                                float _3863 = _3729.z - _2176;
                                float _3864 = dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863));
                                float _3867 = inversesqrt(_3864);
                                float _3868 = _3867 * _3861;
                                float _3869 = _3867 * _3862;
                                float _3870 = _3867 * _3863;
                                float _3874 = 1.0 - (_3864 / (_3730 * _3730));
                                float _5096 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3875 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
                                float _3879 = sqrt(_3864) * _3745.w;
                                float _3881 = 1.39999997615814208984375 / (_3879 + 1.39999997615814208984375);
                                float _3882 = _3881 * _3881;
                                float _3885 = ((1.0 - _3882) * dot(vec3(_3868, _3869, _3870), vec3(_1008, _1011, _1014))) + _3882;
                                float _3888 = _3879 * _3879;
                                float _3892 = (fma(_2176, _3772.z, fma(_2175, _3772.y, _3772.x * _2174)) + _3772.w) / _3833;
                                float _3893 = (fma(_2176, _3787.z, fma(_2175, _3787.y, _3787.x * _2174)) + _3787.w) / _3833;
                                float _3897 = 1.0 - dot(vec2(_3892, _3893), vec2(_3892, _3893));
                                float _5112 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3898 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                                float _3899 = _3898 * (((isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0))) * _3875) / ((_3888 * 0.699999988079071044921875) + 1.0));
                                float _3911 = exp2(log2(1.0 / ((_3888 * 3.5) + 5.0)) * 0.25);
                                float _3912 = 1.0 - _1083;
                                float _3919 = sqrt(1.0 - ((1.0 - (_3912 * _3912)) * (1.0 - (_3911 * _3911))));
                                float _3920 = _3919 * _3919;
                                float _3921 = _3920 * _3920;
                                float _3922 = _3868 - _3342;
                                float _3923 = _3869 - _3343;
                                float _3924 = _3870 - _3344;
                                float _3928 = inversesqrt(dot(vec3(_3922, _3923, _3924), vec3(_3922, _3923, _3924)));
                                float _3932 = dot(vec3(_1008, _1011, _1014), vec3((-0.0) - _3342, (-0.0) - _3343, (-0.0) - _3344));
                                float _5123 = isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0));
                                float _3935 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3936 = dot(vec3(_1008, _1011, _1014), vec3(_3928 * _3922, _3928 * _3923, _3928 * _3924));
                                float _5134 = isnan(0.0) ? _3936 : (isnan(_3936) ? 0.0 : max(_3936, 0.0));
                                float _3939 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3943 = ((_3939 * _3939) * (_3921 + (-1.0))) + 1.0;
                                float _3944 = _3881 * _3920;
                                float _3945 = _3944 * _3944;
                                float _3951 = ((1.0 - _3945) * dot(vec3(_1008, _1011, _1014), vec3(_3868, _3869, _3870))) + _3945;
                                float _5145 = isnan(0.0) ? _3951 : (isnan(_3951) ? 0.0 : max(_3951, 0.0));
                                float _3952 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3953 = 1.0 - _3920;
                                float _3963 = (0.5 / (((_3952 * ((_3935 * _3953) + _3920)) + 9.9999999392252902907785028219223e-09) + (((_3952 * _3953) + _3920) * _3935))) * _3952;
                                float _5156 = isnan(0.0) ? _3963 : (isnan(_3963) ? 0.0 : max(_3963, 0.0));
                                float _3973 = (_3898 * _3875) * (((_3921 * 3.1415927410125732421875) * (isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0)))) / ((_3943 * _3943) * ((_3888 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3899 * _3745.z;
                                frontier_phi_88_pred_1 = _3899 * _3745.y;
                                frontier_phi_88_pred_2 = _3899 * _3745.x;
                                frontier_phi_88_pred_3 = _3973 * _3757.z;
                                frontier_phi_88_pred_4 = _3973 * _3757.y;
                                frontier_phi_88_pred_5 = _3973 * _3757.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3982 = frontier_phi_88_pred;
                            _3981 = frontier_phi_88_pred_1;
                            _3980 = frontier_phi_88_pred_2;
                            _3979 = frontier_phi_88_pred_3;
                            _3978 = frontier_phi_88_pred_4;
                            _3977 = frontier_phi_88_pred_5;
                            _3687 = _3980 + _3700;
                            _3688 = _3981 + _3701;
                            _3689 = _3982 + _3702;
                            _3684 = _3977 + _3697;
                            _3685 = _3978 + _3698;
                            _3686 = _3979 + _3699;
                            if (_3704 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3697 = _3684;
                                _3698 = _3685;
                                _3699 = _3686;
                                _3700 = _3687;
                                _3701 = _3688;
                                _3702 = _3689;
                                _3703 = _3704;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3689;
                        frontier_phi_82_pred_1 = _3688;
                        frontier_phi_82_pred_2 = _3687;
                        frontier_phi_82_pred_3 = _3686;
                        frontier_phi_82_pred_4 = _3685;
                        frontier_phi_82_pred_5 = _3684;
                    }
                    _3327 = frontier_phi_82_pred;
                    _3325 = frontier_phi_82_pred_1;
                    _3323 = frontier_phi_82_pred_2;
                    _3321 = frontier_phi_82_pred_3;
                    _3319 = frontier_phi_82_pred_4;
                    _3317 = frontier_phi_82_pred_5;
                    uint _3483 = _3482 + 1u;
                    if (_3483 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3476 = _3317;
                        _3477 = _3319;
                        _3478 = _3321;
                        _3479 = _3323;
                        _3480 = _3325;
                        _3481 = _3327;
                        _3482 = _3483;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3323;
                frontier_phi_63_64_ladder_1 = _3327;
                frontier_phi_63_64_ladder_2 = _3325;
                frontier_phi_63_64_ladder_3 = _3321;
                frontier_phi_63_64_ladder_4 = _3319;
                frontier_phi_63_64_ladder_5 = _3317;
            }
            else
            {
                frontier_phi_63_64_ladder = _3201;
                frontier_phi_63_64_ladder_1 = _3205;
                frontier_phi_63_64_ladder_2 = _3203;
                frontier_phi_63_64_ladder_3 = _3199;
                frontier_phi_63_64_ladder_4 = _3197;
                frontier_phi_63_64_ladder_5 = _3195;
            }
            _3316 = frontier_phi_63_64_ladder_5;
            _3318 = frontier_phi_63_64_ladder_4;
            _3320 = frontier_phi_63_64_ladder_3;
            _3322 = frontier_phi_63_64_ladder;
            _3324 = frontier_phi_63_64_ladder_2;
            _3326 = frontier_phi_63_64_ladder_1;
        }
        float _3331 = isnan(1.0) ? _1067 : (isnan(_1067) ? 1.0 : min(_1067, 1.0));
        _3128 = (_3331 * _3322) + _2640;
        _3130 = (_3331 * _3324) + _2642;
        _3132 = (_3331 * _3326) + _2644;
        _3134 = ((_3316 * _1051) * _3331) + _2978;
        _3136 = ((_3318 * _1053) * _3331) + _2980;
        _3138 = ((_3320 * _1054) * _3331) + _2982;
    }
    else
    {
        _3128 = _2640;
        _3130 = _2642;
        _3132 = _2644;
        _3134 = _2978;
        _3136 = _2980;
        _3138 = _2982;
    }
    float _5172 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _5183 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _5194 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _3155 = ((isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0))) * (_3128 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1067))) + ((_3134 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1906)) * cbPerFrame._m0[3u].x);
    float _3156 = ((isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0))) * (_3130 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1067))) + ((_3136 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1906)) * cbPerFrame._m0[3u].x);
    float _3157 = ((isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0))) * (_3132 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1067))) + ((_3138 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1906)) * cbPerFrame._m0[3u].x);
    uint _3158 = _282 + 6u;
    float _3166 = _989 / cbSceneParam._m0[86u].x;
    float _3167 = _990 / cbSceneParam._m0[86u].y;
    vec4 _3181 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3166, _3167, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3183 = _3181.x;
    float _3184 = _3181.y;
    float _3185 = _3181.z;
    float _3186 = _3181.w;
    float _3258;
    float _3260;
    float _3262;
    float _3264;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _3220 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _3221 = _3220 / _911;
        float _3232 = _3221 * _962;
        float _3233 = _963 * _3221;
        float _3234 = (-0.0) - _3233;
        float _3236 = _3221 * _964;
        float _3238 = (cbSceneParam._m0[77u].w * _3234) / _3220;
        float _3239 = _3238 + cbSceneParam._m0[79u].w;
        float _3240 = cbSceneParam._m0[79u].w - _3233;
        float _3246 = sqrt(((_3232 * _3232) + (_3233 * _3233)) + (_3236 * _3236));
        float _3249 = (1.0 - (cbSceneParam._m0[77u].w / _3220)) * _3246;
        float _3254 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3256 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3433;
        if (abs((_3234 - _3238) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3433 = ((((_3239 > 0.0) ? exp2(_3254 * _3239) : (2.0 - exp2(_3256 * _3239))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3249;
        }
        else
        {
            float _3377 = 1.0 / cbSceneParam._m0[80u].x;
            float _3378 = isnan(_3240) ? _3239 : (isnan(_3239) ? _3240 : max(_3239, _3240));
            float _3379 = isnan(_3240) ? _3239 : (isnan(_3239) ? _3240 : min(_3239, _3240));
            float _3388 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : min(_3378, 0.0));
            float _3389 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : min(_3379, 0.0));
            _3433 = ((abs(_3246 / _3234) * cbSceneParam._m0[80u].y) * ((((_3388 - _3389) * 2.0) - ((exp2(_3254 * (isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0)))) - exp2(_3254 * (isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))))) * _3377)) - ((exp2(_3256 * _3388) - exp2(_3256 * _3389)) * _3377))) + (_3249 * cbSceneParam._m0[80u].z);
        }
        vec4 _3435 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3166, _3167, 1.0), 0.0);
        float _3444 = exp2((_3433 * (-1.44269502162933349609375)) * (1.0 - _3435.w));
        float _3445 = log2(_3444);
        float _3461 = log2(_3186);
        _3258 = (exp2(_3461 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3445 * cbSceneParam._m0[78u].x)) * _3435.x) / cbSceneParam._m0[78u].x)) + _3183;
        _3260 = (exp2(_3461 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3445 * cbSceneParam._m0[78u].y)) * _3435.y) / cbSceneParam._m0[78u].y)) + _3184;
        _3262 = (exp2(_3461 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3445 * cbSceneParam._m0[78u].z)) * _3435.z) / cbSceneParam._m0[78u].z)) + _3185;
        _3264 = _3444 * _3186;
    }
    else
    {
        _3258 = _3183;
        _3260 = _3184;
        _3262 = _3185;
        _3264 = _3186;
    }
    bool _3471;
    vec4 _3274;
    vec4 _3296;
    float _3298;
    float _3302;
    float _3303;
    float _3304;
    float _3305;
    bool _3315;
    for (;;)
    {
        _3274 = cbMatDynParam._m0[0u];
        float _3276 = roundEven(_3274.y);
        bool _3277 = _3276 == 3.0;
        float _3278 = log2(_3264);
        float _3285 = exp2(_3278 * cbSceneParam._m0[78u].x) * _3155;
        float _3286 = exp2(_3278 * cbSceneParam._m0[78u].y) * _3156;
        float _3287 = exp2(_3278 * cbSceneParam._m0[78u].z) * _3157;
        float _3294 = _978 + (-0.5);
        _3296 = cbMtdParam._m0[1u];
        _3298 = _3296.y * _3294;
        float _3301 = (_3276 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3302 = _3301 * (_3277 ? _3285 : (_3285 + (cbSceneParam._m0[72u].w * _3258)));
        _3303 = _3301 * (_3277 ? _3286 : (_3286 + (cbSceneParam._m0[72u].w * _3260)));
        _3304 = _3301 * (_3277 ? _3287 : (_3287 + (cbSceneParam._m0[72u].w * _3262)));
        _3305 = _3294 * 0.999000012874603271484375;
        _3315 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3315)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3305) < 0.5)
            {
                _3471 = true;
                break;
            }
        }
        uint _3412 = _1027 + uint(_3274.w);
        if ((cbInstanceData._m0[_3412].w < 1.0) && ((cbInstanceData._m0[_3412].w + _3305) < 0.5))
        {
            _3471 = true;
            break;
        }
        if ((_3298 + 1.0) < _3296.x)
        {
            _3471 = true;
            break;
        }
        _3471 = false;
        break;
    }
    float _3675;
    if (_3471)
    {
        discard_state = true;
        _3675 = 0.0;
    }
    else
    {
        _3675 = cbInstanceData._m0[_3158].w;
    }
    SV_Target.x = _3302;
    SV_Target.y = _3303;
    SV_Target.z = _3304;
    SV_Target.w = _3675;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3158].w;
    discard_exit();
}


