#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1642;
float _4019;
float _4020;
float _4021;
float _4022;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4031 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4042 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4053 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    uint _290 = uint(roundEven(NORMAL.w)) * 13u;
    uint _295 = _290 + 1u;
    uint _299 = _290 + 2u;
    float _308 = sqrt(((cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x)) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x));
    float _309 = _308 * TEXCOORD.z;
    float _310 = _308 * TEXCOORD.w;
    vec4 _323 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _309) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _310) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _377 = _372.x * cbMtdParam._m0[11u].x;
    float _378 = _372.y * cbMtdParam._m0[11u].y;
    float _379 = _372.z * cbMtdParam._m0[11u].z;
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _309) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _310) + cbTextureTilingScale._m0[5u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _466 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _483 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _417.x) * 2.0) - ((((_454 - _466) * cbMtdParam._m0[23u].w) + _466) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4064 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _491 = (_484 * ((_398.x * cbMtdParam._m0[12u].x) - _377)) + _377;
    float _492 = (_484 * ((_398.y * cbMtdParam._m0[12u].y) - _378)) + _378;
    float _493 = (_484 * ((_398.z * cbMtdParam._m0[12u].z) - _379)) + _379;
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _309) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _310) + cbTextureTilingScale._m0[3u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _532 = _530.x;
    float _542 = dot(vec4(_532, _530.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _556 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _417.y) * 2.0) - ((((_532 - _542) * cbMtdParam._m0[23u].w) + _542) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4075 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _557 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _564 = (_557 * ((_510.x * cbMtdParam._m0[13u].x) - _491)) + _491;
    float _565 = (_557 * ((_510.y * cbMtdParam._m0[13u].y) - _492)) + _492;
    float _566 = (_557 * ((_510.z * cbMtdParam._m0[13u].z) - _493)) + _493;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _309) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _310) + cbTextureTilingScale._m0[24u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _604 = _602.x;
    float _614 = dot(vec4(_604, _602.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _626 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _417.z) * 2.0) - ((((_604 - _614) * cbMtdParam._m0[23u].w) + _614) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4086 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _627 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _637 = (_346.x * cbMtdParam._m0[9u].x) * ((_627 * ((_585.x * cbMtdParam._m0[14u].x) - _564)) + _564);
    float _638 = (_346.y * cbMtdParam._m0[9u].y) * ((_627 * ((_585.y * cbMtdParam._m0[14u].y) - _565)) + _565);
    float _639 = (_346.z * cbMtdParam._m0[9u].z) * ((_627 * ((_585.z * cbMtdParam._m0[14u].z) - _566)) + _566);
    float _643 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _323.x) * _637;
    float _646 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _323.y) * _638;
    float _649 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _323.z) * _639;
    float _657 = (((_637 - _643) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) + _643) * 4.55000019073486328125;
    float _659 = (((_638 - _646) * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) + _646) * 4.55000019073486328125;
    float _661 = (((_639 - _649) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) + _649) * 4.55000019073486328125;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _309) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _310) + cbTextureTilingScale._m0[14u].w));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _309) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _310) + cbTextureTilingScale._m0[20u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _309) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _310) + cbTextureTilingScale._m0[4u].w));
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _742 = _740.x;
    float _743 = _740.y;
    float _744 = _740.z;
    float _751 = ((_723.x - _742) * _484) + _742;
    float _752 = ((_723.y - _743) * _484) + _743;
    float _753 = ((_723.z - _744) * _484) + _744;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _309) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _310) + cbTextureTilingScale._m0[2u].w));
    float _776 = ((_765.x - _751) * _557) + _751;
    float _777 = ((_765.y - _752) * _557) + _752;
    float _778 = ((_765.z - _753) * _557) + _753;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _309) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _310) + cbTextureTilingScale._m0[23u].w));
    float _803 = ((_790.z - _778) * _627) + _778;
    float _806 = ((((_790.x - _776) * _627) + _776) * 2.0) + (-1.0);
    float _807 = ((((_790.y - _777) * _627) + _777) * 2.0) + (-1.0);
    float _808 = dot(vec2(_806, _807), vec2(_806, _807));
    float _4097 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _813 = sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))));
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _843 = (_806 + ((((_698.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_831.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _844 = (_807 + ((((_698.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_831.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _847 = fma(_813, _257, fma(_844, _264, _843 * _250));
    float _850 = fma(_813, _258, fma(_844, _265, _843 * _251));
    float _853 = fma(_813, _259, fma(_844, _266, _843 * _252));
    float _857 = inversesqrt(dot(vec3(_847, _850, _853), vec3(_847, _850, _853)));
    vec4 _884 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _309) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _310) + cbTextureTilingScale._m0[11u].w));
    float _886 = _884.x;
    float _887 = 1.0 - _886;
    float _895 = (cbMtdParam._m0[19u].x + dot(vec4(_857 * _847, _857 * _850, _857 * _853, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_886 - _887) * cbMtdParam._m0[24u].z) + _887) * cbMtdParam._m0[21u].z);
    float _4108 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _896 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _903 = (_896 * ((_679.x * cbMtdParam._m0[18u].x) - _657)) + _657;
    float _904 = (_896 * ((_679.y * cbMtdParam._m0[18u].y) - _659)) + _659;
    float _905 = (_896 * ((_679.z * cbMtdParam._m0[18u].z) - _661)) + _661;
    vec4 _931 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _933 = _931.x;
    float _950 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _309) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _310) + cbTextureTilingScale._m0[9u].w)).x - _933) * _484) + _933;
    float _967 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _309) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _310) + cbTextureTilingScale._m0[21u].w)).x - _950) * _557) + _950;
    float _985 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _309) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _310) + cbTextureTilingScale._m0[10u].w)).x - _967) * _627) + _967;
    float _989 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _985) * cbMtdParam._m0[19u].z) + _985;
    float _991 = _989 - (_989 * _896);
    float _996 = (((_698.z - _803) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _803;
    float _1000 = ((_831.z - _996) * cbMtdParam._m0[19u].w) + _996;
    vec4 _1013 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _309) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _310) + cbTextureTilingScale._m0[15u].w));
    float _1020 = (_1013.x * 2.0) + (-1.0);
    float _1021 = (_1013.y * 2.0) + (-1.0);
    float _1022 = dot(vec2(_1020, _1021), vec2(_1020, _1021));
    float _4119 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1030 = ((_1013.z - _1000) * _896) + _1000;
    float _1040 = ((sqrt(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) - _813) * _896) + _813;
    float _1043 = (((_1020 - _843) * _896) + _843) + (cbMtdParam._m0[21u].x * _843);
    float _1044 = (((_1021 - _844) * _896) + _844) + (cbMtdParam._m0[21u].x * _844);
    float _1048 = cbMtdParam._m0[22u].x + _831.w;
    float _1051 = fma(_1040, _257, fma(_1044, _264, _1043 * _250));
    float _1054 = fma(_1040, _258, fma(_1044, _265, _1043 * _251));
    float _1057 = fma(_1040, _259, fma(_1044, _266, _1043 * _252));
    float _1061 = inversesqrt(dot(vec3(_1051, _1054, _1057), vec3(_1051, _1054, _1057)));
    float _1062 = _1061 * _1051;
    float _1063 = _1061 * _1054;
    float _1064 = _1061 * _1057;
    float _4130 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1065 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4152 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4163 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4174 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4185 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _1070 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _1084 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1134 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1124);
    float _1135 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1124);
    float _1136 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1124);
    float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
    float _1141 = _1134 * _1140;
    float _1142 = _1135 * _1140;
    float _1143 = _1136 * _1140;
    vec4 _1148 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1150 = _1148.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1322 = sqrt(((_1134 * _1134) + (_1135 * _1135)) + (_1136 * _1136));
        float _1328 = (cbMatDynParam._m0[5u].x * _1322) + cbMatDynParam._m0[5u].y;
        float _4196 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1333 = (cbMatDynParam._m0[5u].z * _1322) + cbMatDynParam._m0[5u].w;
        float _4207 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) - _1329)) + _1329) < ((_1150 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1161 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1162 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1180 = fma(_1064, cbSceneParam._m0[5u].z, fma(_1063, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1062));
    float _1183 = fma(_1064, cbSceneParam._m0[6u].z, fma(_1063, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1062));
    float _1186 = fma(_1064, cbSceneParam._m0[7u].z, fma(_1063, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1062));
    uint _1199 = _290 + 9u;
    uint _1200 = _1199 + uint(cbMatDynParam._m0[0u].w);
    float _1206 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * cbInstanceData._m0[_1200].x;
    float _1207 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * cbInstanceData._m0[_1200].y;
    float _1208 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0)))) * cbInstanceData._m0[_1200].z;
    float _4218 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1209 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1210 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _1212 = 1.0 - _1070;
    float _1213 = _1209 * _1212;
    float _1214 = _1210 * _1212;
    float _1215 = _1211 * _1212;
    float _1220 = (_1209 + (-0.039999999105930328369140625)) * _1070;
    float _1221 = (_1210 + (-0.039999999105930328369140625)) * _1070;
    float _1222 = (_1211 + (-0.039999999105930328369140625)) * _1070;
    float _1223 = _1220 + 0.039999999105930328369140625;
    float _1225 = _1221 + 0.039999999105930328369140625;
    float _1226 = _1222 + 0.039999999105930328369140625;
    vec4 _1235 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1161, cbSceneParam._m0[86u].y * _1162));
    float _1239 = ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * TEXCOORD_5.w) * _1235.x;
    float _1240 = dot(vec3(_1062, _1063, _1064), vec3(_1141, _1142, _1143));
    float _1243 = _1240 * 2.0;
    float _1247 = (_1243 * _1062) - _1141;
    float _1248 = (_1243 * _1063) - _1142;
    float _1249 = (_1243 * _1064) - _1143;
    float _1253 = abs(dot(vec3(_1141, _1142, _1143), vec3(_1062, _1063, _1064)));
    float _4251 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    float _1255 = sqrt(_1065);
    float _1268 = exp2((_1255 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1255 * 3.0));
    float _1274 = (1.0 - _1268) * ((_1255 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1275 = _1268 * _1255;
    float _1303 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1641;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1366 = fma(_1311, cbModelParam._m0[26u].z, fma(_1307, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1303));
        float _1370 = fma(_1311, cbModelParam._m0[27u].z, fma(_1307, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1303));
        float _1374 = fma(_1311, cbModelParam._m0[28u].z, fma(_1307, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1303));
        float _1399 = _1303 + _1062;
        float _1400 = _1307 + _1063;
        float _1401 = _1311 + _1064;
        float _1411 = fma(_1401, cbModelParam._m0[26u].z, fma(_1400, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1399)) - _1366;
        float _1412 = fma(_1401, cbModelParam._m0[27u].z, fma(_1400, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1399)) - _1370;
        float _1413 = fma(_1401, cbModelParam._m0[28u].z, fma(_1400, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1399)) - _1374;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1366 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1370 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[34u].z) + ((((((_1374 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1469 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1435.x + (-0.5));
        float _1471 = _1469 * (_1435.y + (-0.5));
        float _1472 = _1469 * (_1435.z + (-0.5));
        float _1479 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1442.x + (-0.5));
        float _1481 = _1479 * (_1442.y + (-0.5));
        float _1482 = _1479 * (_1442.z + (-0.5));
        float _1489 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1449.x + (-0.5));
        float _1491 = _1489 * (_1449.y + (-0.5));
        float _1492 = _1489 * (_1449.z + (-0.5));
        float _1499 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1456.x + (-0.5));
        float _1501 = _1499 * (_1456.y + (-0.5));
        float _1502 = _1499 * (_1456.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1523 = (dot(vec3(_1062, _1063, _1064), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1533 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4299 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1535 + 1.0))) + _1540) * _1503;
        float _1550 = _1471 * 0.5;
        float _1551 = _1481 * 0.5;
        float _1552 = _1491 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_1062, _1063, _1064), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4332 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1577 + 1.0))) + _1582) * _1504;
        float _1592 = _1472 * 0.5;
        float _1593 = _1482 * 0.5;
        float _1594 = _1492 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_1062, _1063, _1064), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4365 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1619 + 1.0))) + _1624) * _1505;
        _1641 = _1472;
        _1643 = _1471;
        _1644 = _1470;
        _1645 = _1482;
        _1646 = _1481;
        _1647 = _1480;
        _1648 = _1492;
        _1649 = _1491;
        _1650 = _1490;
        _1651 = _1505;
        _1652 = _1504;
        _1653 = _1503;
        _1654 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1655 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1656 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1642;
        _1643 = _1642;
        _1644 = _1642;
        _1645 = _1642;
        _1646 = _1642;
        _1647 = _1642;
        _1648 = _1642;
        _1649 = _1642;
        _1650 = _1642;
        _1651 = _1642;
        _1652 = _1642;
        _1653 = _1642;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1682 = fma(_1311, cbModelParam._m0[30u].z, fma(_1307, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1303));
        float _1686 = fma(_1311, cbModelParam._m0[31u].z, fma(_1307, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1303));
        float _1690 = fma(_1311, cbModelParam._m0[32u].z, fma(_1307, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1303));
        float _1713 = _1303 + _1062;
        float _1714 = _1307 + _1063;
        float _1715 = _1311 + _1064;
        float _1725 = fma(_1715, cbModelParam._m0[30u].z, fma(_1714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1713)) - _1682;
        float _1726 = fma(_1715, cbModelParam._m0[31u].z, fma(_1714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1713)) - _1686;
        float _1727 = fma(_1715, cbModelParam._m0[32u].z, fma(_1714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1713)) - _1690;
        float _1731 = inversesqrt(dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727)));
        float _1744 = ((_1731 * _1725) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1682 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1745 = ((_1731 * _1726) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1686 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1746 = ((_1731 * _1727) / cbModelParam._m0[35u].z) + ((((((_1690 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1748 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        vec4 _1755 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        vec4 _1762 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        vec4 _1769 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1744, _1745, _1746), 0.0);
        float _1781 = exp2((_1748.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1748.x + (-0.5));
        float _1783 = _1781 * (_1748.y + (-0.5));
        float _1784 = _1781 * (_1748.z + (-0.5));
        float _1791 = exp2((_1755.w + (-0.5)) * 20.0) * 2.0;
        float _1792 = _1791 * (_1755.x + (-0.5));
        float _1793 = _1791 * (_1755.y + (-0.5));
        float _1794 = _1791 * (_1755.z + (-0.5));
        float _1801 = exp2((_1762.w + (-0.5)) * 20.0) * 2.0;
        float _1802 = _1801 * (_1762.x + (-0.5));
        float _1803 = _1801 * (_1762.y + (-0.5));
        float _1804 = _1801 * (_1762.z + (-0.5));
        float _1811 = exp2((_1769.w + (-0.5)) * 20.0) * 2.0;
        float _1812 = _1811 * (_1769.x + (-0.5));
        float _1813 = _1811 * (_1769.y + (-0.5));
        float _1814 = _1811 * (_1769.z + (-0.5));
        float _1815 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1816 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1817 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1818 = _1782 * 0.5;
        float _1819 = _1792 * 0.5;
        float _1820 = _1802 * 0.5;
        float _1821 = dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820));
        float _1826 = (_1821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1821);
        float _1834 = (dot(vec3(_1062, _1063, _1064), vec3(_1826 * _1818, _1826 * _1819, _1826 * _1820)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1843 = sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820)) / (_1815 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1844 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1845 = _1844 * 2.0;
        float _1849 = (1.0 - _1844) / (_1844 + 1.0);
        float _4428 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1859 = ((((1.0 - _1850) * (_1845 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1845 + 1.0))) + _1850) * _1815;
        float _1860 = _1783 * 0.5;
        float _1861 = _1793 * 0.5;
        float _1862 = _1803 * 0.5;
        float _1863 = dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862));
        float _1868 = (_1863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1863);
        float _1876 = (dot(vec3(_1062, _1063, _1064), vec3(_1868 * _1860, _1868 * _1861, _1868 * _1862)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1885 = sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862)) / (_1816 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1887 = _1886 * 2.0;
        float _1891 = (1.0 - _1886) / (_1886 + 1.0);
        float _4461 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1892 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1901 = ((((1.0 - _1892) * (_1887 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1887 + 1.0))) + _1892) * _1816;
        float _1902 = _1784 * 0.5;
        float _1903 = _1794 * 0.5;
        float _1904 = _1804 * 0.5;
        float _1905 = dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904));
        float _1910 = (_1905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1905);
        float _1918 = (dot(vec3(_1062, _1063, _1064), vec3(_1910 * _1902, _1910 * _1903, _1910 * _1904)) + 1.0) * 0.5;
        float _4472 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1927 = sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904)) / (_1817 + 9.9999997473787516355514526367188e-06);
        float _4483 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1928 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1929 = _1928 * 2.0;
        float _1933 = (1.0 - _1928) / (_1928 + 1.0);
        float _4494 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1934 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _1943 = ((((1.0 - _1934) * (_1929 + 2.0)) * exp2(log2(isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_1929 + 1.0))) + _1934) * _1817;
        _1951 = _1784;
        _1952 = _1783;
        _1953 = _1782;
        _1954 = _1794;
        _1955 = _1793;
        _1956 = _1792;
        _1957 = _1804;
        _1958 = _1803;
        _1959 = _1802;
        _1960 = _1817;
        _1961 = _1816;
        _1962 = _1815;
        _1963 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)));
        _1964 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0)));
        _1965 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)));
    }
    else
    {
        _1951 = _1642;
        _1952 = _1642;
        _1953 = _1642;
        _1954 = _1642;
        _1955 = _1642;
        _1956 = _1642;
        _1957 = _1642;
        _1958 = _1642;
        _1959 = _1642;
        _1960 = _1642;
        _1961 = _1642;
        _1962 = _1642;
        _1963 = 0.0;
        _1964 = 0.0;
        _1965 = 0.0;
    }
    float _1975 = (cbModelParam._m0[1u].x * (_1963 - _1654)) + _1654;
    float _1976 = (cbModelParam._m0[1u].x * (_1964 - _1655)) + _1655;
    float _1977 = (cbModelParam._m0[1u].x * (_1965 - _1656)) + _1656;
    float _1998 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1975 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1975 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1975));
    float _2019 = _1247 * 0.5;
    float _2020 = _1248 * 0.5;
    float _2021 = _1249 * 0.5;
    float _2022 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1953, _1956, _1959, _1962));
    float _2025 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1952, _1955, _1958, _1961));
    float _2028 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1951, _1954, _1957, _1960));
    float _2062;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2035 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1641, _1645, _1648, _1651));
        float _2039 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1643, _1646, _1649, _1652));
        float _2043 = dot(vec4(_2019, _2020, _2021, 1.0), vec4(_1644, _1647, _1650, _1653));
        float _2050 = dot(vec4(cbModelParam._m0[39u]), vec4(_2019, _2020, _2021, 1.0));
        _2062 = dot(vec3(isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)), isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2050) ? 0.0 : (isnan(0.0) ? _2050 : max(0.0, _2050))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2062 = 1.0;
    }
    float _2073;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2064 = dot(vec4(cbModelParam._m0[40u]), vec4(_2019, _2020, _2021, 1.0));
        _2073 = dot(vec3(isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)), isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2064) ? 0.0 : (isnan(0.0) ? _2064 : max(0.0, _2064))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2073 = 1.0;
    }
    float _2077 = (_2073 * cbModelParam._m0[1u].x) + (_2062 * (1.0 - cbModelParam._m0[1u].x));
    float _2087 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1065);
    float _2088 = isnan(_2087) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2087 : min(cbModelParam._m0[25u].z, _2087));
    float _2168;
    float _2170;
    float _2172;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2135 = fma(_1311, cbModelParam._m0[13u].z, fma(_1307, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1303)) + cbModelParam._m0[13u].w;
        float _2139 = fma(_1311, cbModelParam._m0[14u].z, fma(_1307, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1303)) + cbModelParam._m0[14u].w;
        float _2143 = fma(_1311, cbModelParam._m0[15u].z, fma(_1307, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1303)) + cbModelParam._m0[15u].w;
        float _2146 = fma(_1249, cbModelParam._m0[13u].z, fma(_1248, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1247));
        float _2149 = fma(_1249, cbModelParam._m0[14u].z, fma(_1248, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1247));
        float _2152 = fma(_1249, cbModelParam._m0[15u].z, fma(_1248, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1247));
        float _2180;
        if (_2146 > 0.0)
        {
            _2180 = abs((1.0 - _2135) / _2146);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2135 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2180 = frontier_phi_17_15_ladder;
        }
        float _2382;
        if (_2149 > 0.0)
        {
            _2382 = abs((1.0 - _2139) / _2149);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2139 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2382 = frontier_phi_26_22_ladder;
        }
        float _2636;
        if (_2152 > 0.0)
        {
            _2636 = abs((1.0 - _2143) / _2152);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2143 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2636 = frontier_phi_38_33_ladder;
        }
        float _2638 = isnan(_2382) ? _2180 : (isnan(_2180) ? _2382 : min(_2180, _2382));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _2146) + _2135;
        float _2644 = (_2639 * _2149) + _2139;
        float _2645 = (_2639 * _2152) + _2143;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2646;
        float _2650 = _2646 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 > _2650) || ((_2644 < _2648) || ((_2643 < _2648) || (_2643 > _2650))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2645, cbModelParam._m0[9u].z, fma(_2644, cbModelParam._m0[9u].y, _2643 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2645, cbModelParam._m0[10u].z, fma(_2644, cbModelParam._m0[10u].y, _2643 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2645, cbModelParam._m0[11u].z, fma(_2644, cbModelParam._m0[11u].y, _2643 * cbModelParam._m0[11u].x))), _2088);
            frontier_phi_16_38_ladder = _2773.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2773.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2773.x * cbModelParam._m0[1u].y;
        }
        _2168 = frontier_phi_16_38_ladder_2;
        _2170 = frontier_phi_16_38_ladder_1;
        _2172 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2156 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1247, _1248, _1249), _2088);
        _2168 = _2156.x * cbModelParam._m0[1u].y;
        _2170 = _2156.y * cbModelParam._m0[1u].y;
        _2172 = _2156.z * cbModelParam._m0[1u].y;
    }
    float _2176 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1065);
    float _2177 = isnan(_2176) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2176 : min(cbModelParam._m0[25u].w, _2176));
    float _2266;
    float _2268;
    float _2270;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2230 = fma(_1311, cbModelParam._m0[21u].z, fma(_1307, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1303)) + cbModelParam._m0[21u].w;
        float _2234 = fma(_1311, cbModelParam._m0[22u].z, fma(_1307, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1303)) + cbModelParam._m0[22u].w;
        float _2238 = fma(_1311, cbModelParam._m0[23u].z, fma(_1307, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1303)) + cbModelParam._m0[23u].w;
        float _2241 = fma(_1249, cbModelParam._m0[21u].z, fma(_1248, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1247));
        float _2244 = fma(_1249, cbModelParam._m0[22u].z, fma(_1248, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1247));
        float _2247 = fma(_1249, cbModelParam._m0[23u].z, fma(_1248, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1247));
        float _2387;
        if (_2241 > 0.0)
        {
            _2387 = abs((1.0 - _2230) / _2241);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2241 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2230 + 1.0) / _2241);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2387 = frontier_phi_28_24_ladder;
        }
        float _2663;
        if (_2244 > 0.0)
        {
            _2663 = abs((1.0 - _2234) / _2244);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2244 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2234 + 1.0) / _2244);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2663 = frontier_phi_40_35_ladder;
        }
        float _2876;
        if (_2247 > 0.0)
        {
            _2876 = abs((1.0 - _2238) / _2247);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2247 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2238 + 1.0) / _2247);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2876 = frontier_phi_49_46_ladder;
        }
        float _2878 = isnan(_2663) ? _2387 : (isnan(_2387) ? _2663 : min(_2387, _2663));
        float _2879 = isnan(_2876) ? _2878 : (isnan(_2878) ? _2876 : min(_2878, _2876));
        float _2883 = (_2879 * _2241) + _2230;
        float _2884 = (_2879 * _2244) + _2234;
        float _2885 = (_2879 * _2247) + _2238;
        float _2886 = _2879 * 9.9999997473787516355514526367188e-05;
        float _2887 = (-1.0) - _2886;
        float _2889 = _2886 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2885 > _2889) || ((_2885 < _2887) || ((_2884 > _2889) || ((_2884 < _2887) || ((_2883 < _2887) || (_2883 > _2889))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2885, cbModelParam._m0[17u].z, fma(_2884, cbModelParam._m0[17u].y, _2883 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2885, cbModelParam._m0[18u].z, fma(_2884, cbModelParam._m0[18u].y, _2883 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2885, cbModelParam._m0[19u].z, fma(_2884, cbModelParam._m0[19u].y, _2883 * cbModelParam._m0[19u].x))), _2177);
            frontier_phi_25_49_ladder = _3084.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3084.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3084.x * cbModelParam._m0[1u].z;
        }
        _2266 = frontier_phi_25_49_ladder_2;
        _2268 = frontier_phi_25_49_ladder_1;
        _2270 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2250 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1247, _1248, _1249), _2177);
        _2266 = _2250.x * cbModelParam._m0[1u].z;
        _2268 = _2250.y * cbModelParam._m0[1u].z;
        _2270 = _2250.z * cbModelParam._m0[1u].z;
    }
    float _2283 = (((_1274 * _1223) + _1275) * _1239) * ((cbModelParam._m0[1u].w * (_2266 - _2168)) + _2168);
    float _2285 = (((_1274 * _1225) + _1275) * _1239) * ((cbModelParam._m0[1u].w * (_2268 - _2170)) + _2170);
    float _2287 = (((_1274 * _1226) + _1275) * _1239) * ((cbModelParam._m0[1u].w * (_2270 - _2172)) + _2172);
    float _2290 = fma(_2287, cbSceneParam._m0[89u].z, fma(_2285, cbSceneParam._m0[89u].y, _2283 * cbSceneParam._m0[89u].x));
    float _2293 = fma(_2287, cbSceneParam._m0[90u].z, fma(_2285, cbSceneParam._m0[90u].y, _2283 * cbSceneParam._m0[90u].x));
    float _2296 = fma(_2287, cbSceneParam._m0[91u].z, fma(_2285, cbSceneParam._m0[91u].y, _2283 * cbSceneParam._m0[91u].x));
    uvec4 _2306 = floatBitsToUint(cbInstanceData._m0[_290 + 5u]);
    uint _2308 = _2306.x * 14u;
    uint _2309 = _2308 + 13u;
    float _2316 = _1239 + (-1.0);
    float _2321 = (cbLight._m0[_2309].x * _2316) + 1.0;
    float _2322 = (cbLight._m0[_2309].y * _2316) + 1.0;
    float _2323 = (cbLight._m0[_2309].z * _2316) + 1.0;
    float _2324 = (cbLight._m0[_2309].w * _2316) + 1.0;
    uint _2325 = _2308 + 5u;
    float _2331 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2335 = _2308 + 4u;
    float _2341 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2345 = _2308 | 1u;
    float _2356 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_1062, _1063, _1064));
    float _2359 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_1062, _1063, _1064));
    float _4630 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _4641 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2364 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2366 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2373 = ((cbLight._m0[_2325].x * _2331) * _2366) + ((cbLight._m0[_2335].x * _2341) * _2364);
    float _2374 = ((_2331 * cbLight._m0[_2325].y) * _2366) + ((_2341 * cbLight._m0[_2335].y) * _2364);
    float _2375 = ((_2331 * cbLight._m0[_2325].z) * _2366) + ((_2341 * cbLight._m0[_2335].z) * _2364);
    uvec4 _2379 = floatBitsToUint(cbLight._m0[_2308 + 12u]);
    bool _2381 = _2379.x == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2381)
    {
        _2392 = _2373;
        _2394 = _2374;
        _2396 = _2375;
    }
    else
    {
        uint _2400 = _2308 + 6u;
        float _2416 = (dot(vec3(cbLight._m0[_2308 + 2u].xyz), vec3(_1062, _1063, _1064)) * 0.5) + 0.5;
        float _2417 = _2416 * _2416;
        float _4652 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2418 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2419 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2392 = (((cbLight._m0[_2400].x * 0.3183098733425140380859375) * _2418) * _2419) + _2373;
        _2394 = (((cbLight._m0[_2400].y * 0.3183098733425140380859375) * _2418) * _2419) + _2374;
        _2396 = (((cbLight._m0[_2400].z * 0.3183098733425140380859375) * _2418) * _2419) + _2375;
    }
    bool _2399 = _2379.y == 0u;
    float _2437;
    float _2439;
    float _2441;
    if (_2399)
    {
        _2437 = _2392;
        _2439 = _2394;
        _2441 = _2396;
    }
    else
    {
        uint _2607 = _2308 + 7u;
        float _2623 = (dot(vec3(cbLight._m0[_2308 + 3u].xyz), vec3(_1062, _1063, _1064)) * 0.5) + 0.5;
        float _2624 = _2623 * _2623;
        float _4668 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2625 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2626 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2437 = (((cbLight._m0[_2607].x * 0.3183098733425140380859375) * _2625) * _2626) + _2392;
        _2439 = (((cbLight._m0[_2607].y * 0.3183098733425140380859375) * _2625) * _2626) + _2394;
        _2441 = (((cbLight._m0[_2607].z * 0.3183098733425140380859375) * _2625) * _2626) + _2396;
    }
    uint _2444 = _2308 + 8u;
    float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _1065) * 0.949999988079071044921875);
    float _2458 = _2457 * _2457;
    float _2459 = cbLight._m0[_2308].x + _1141;
    float _2460 = cbLight._m0[_2308].y + _1142;
    float _2461 = cbLight._m0[_2308].z + _1143;
    float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
    float _2466 = _2465 * _2459;
    float _2467 = _2465 * _2460;
    float _2468 = _2465 * _2461;
    float _2469 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2308].xyz));
    float _4684 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _2473 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2474 = dot(vec3(_1062, _1063, _1064), vec3(_2466, _2467, _2468));
    float _4706 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2477 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2478 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2466, _2467, _2468));
    float _4717 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2482 = _2458 * _2458;
    float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
    float _2494 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
    float _2495 = 0.959999978542327880859375 - _1220;
    float _2497 = 0.959999978542327880859375 - _1221;
    float _2498 = 0.959999978542327880859375 - _1222;
    float _2505 = 1.0 - _2458;
    float _2516 = (0.5 / (((_2473 * ((_2472 * _2505) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2473 * _2505) + _2458) * _2472))) * _2472;
    float _4728 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2518 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
    uint _2529 = _2308 + 9u;
    float _2540 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _1065) * 0.949999988079071044921875);
    float _2541 = _2540 * _2540;
    float _2542 = cbLight._m0[_2345].x + _1141;
    float _2543 = cbLight._m0[_2345].y + _1142;
    float _2544 = cbLight._m0[_2345].z + _1143;
    float _2548 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
    float _2549 = _2548 * _2542;
    float _2550 = _2548 * _2543;
    float _2551 = _2548 * _2544;
    float _2552 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2345].xyz));
    float _4739 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2555 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2556 = dot(vec3(_1062, _1063, _1064), vec3(_2549, _2550, _2551));
    float _4750 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2560 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2549, _2550, _2551));
    float _4761 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2564 = _2541 * _2541;
    float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
    float _2575 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2582 = 1.0 - _2541;
    float _2592 = (0.5 / (((_2473 * ((_2555 * _2582) + _2541)) + 9.9999999392252902907785028219223e-09) + (((_2473 * _2582) + _2541) * _2555))) * _2555;
    float _4772 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2594 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
    float _2604 = (((((_2575 * _2495) + _1223) * cbLight._m0[_2529].x) * _2594) * _2331) + (((((_2494 * _2495) + _1223) * cbLight._m0[_2444].x) * _2518) * _2341);
    float _2605 = (((((_2575 * _2497) + _1225) * cbLight._m0[_2529].y) * _2594) * _2331) + (((((_2494 * _2497) + _1225) * cbLight._m0[_2444].y) * _2518) * _2341);
    float _2606 = (((((_2575 * _2498) + _1226) * cbLight._m0[_2529].z) * _2594) * _2331) + (((((_2494 * _2498) + _1226) * cbLight._m0[_2444].z) * _2518) * _2341);
    float _2668;
    float _2670;
    float _2672;
    if (_2381)
    {
        _2668 = _2604;
        _2670 = _2605;
        _2672 = _2606;
    }
    else
    {
        uint _2674 = _2308 + 2u;
        uint _2678 = _2308 + 10u;
        float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2674].w)) * _1065) * 0.949999988079071044921875);
        float _2693 = _2692 * _2692;
        float _2694 = cbLight._m0[_2674].x + _1141;
        float _2695 = cbLight._m0[_2674].y + _1142;
        float _2696 = cbLight._m0[_2674].z + _1143;
        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
        float _2701 = _2700 * _2694;
        float _2702 = _2700 * _2695;
        float _2703 = _2700 * _2696;
        float _2704 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2674].xyz));
        float _4783 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2708 = dot(vec3(_1062, _1063, _1064), vec3(_2701, _2702, _2703));
        float _4794 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2712 = dot(vec3(cbLight._m0[_2674].xyz), vec3(_2701, _2702, _2703));
        float _4805 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2716 = _2693 * _2693;
        float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
        float _2727 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
        float _2734 = 1.0 - _2693;
        float _2744 = (0.5 / (((_2473 * ((_2707 * _2734) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2473 * _2734) + _2693) * _2707))) * _2707;
        float _4816 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2746 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
        float _2747 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2668 = (((((_2727 * _2495) + _1223) * cbLight._m0[_2678].x) * _2746) * _2747) + _2604;
        _2670 = (((((_2727 * _2497) + _1225) * cbLight._m0[_2678].y) * _2746) * _2747) + _2605;
        _2672 = (((((_2727 * _2498) + _1226) * cbLight._m0[_2678].z) * _2746) * _2747) + _2606;
    }
    float _2782;
    float _2784;
    float _2786;
    if (_2399)
    {
        _2782 = _2668;
        _2784 = _2670;
        _2786 = _2672;
    }
    else
    {
        uint _2793 = _2308 + 3u;
        uint _2797 = _2308 + 11u;
        float _2811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2793].w)) * _1065) * 0.949999988079071044921875);
        float _2812 = _2811 * _2811;
        float _2813 = cbLight._m0[_2793].x + _1141;
        float _2814 = cbLight._m0[_2793].y + _1142;
        float _2815 = cbLight._m0[_2793].z + _1143;
        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
        float _2820 = _2819 * _2813;
        float _2821 = _2819 * _2814;
        float _2822 = _2819 * _2815;
        float _2823 = dot(vec3(_1062, _1063, _1064), vec3(cbLight._m0[_2793].xyz));
        float _4832 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2827 = dot(vec3(_1062, _1063, _1064), vec3(_2820, _2821, _2822));
        float _4843 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2830 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2831 = dot(vec3(cbLight._m0[_2793].xyz), vec3(_2820, _2821, _2822));
        float _4854 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2835 = _2812 * _2812;
        float _2839 = ((_2830 * _2830) * (_2835 + (-1.0))) + 1.0;
        float _2846 = exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0);
        float _2853 = 1.0 - _2812;
        float _2863 = (0.5 / (((_2473 * ((_2826 * _2853) + _2812)) + 9.9999999392252902907785028219223e-09) + (((_2473 * _2853) + _2812) * _2826))) * _2826;
        float _4865 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2865 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2835 / ((_2839 * _2839) * 3.141590118408203125));
        float _2866 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2782 = (((((_2846 * _2495) + _1223) * cbLight._m0[_2797].x) * _2865) * _2866) + _2668;
        _2784 = (((((_2846 * _2497) + _1225) * cbLight._m0[_2797].y) * _2865) * _2866) + _2670;
        _2786 = (((((_2846 * _2498) + _1226) * cbLight._m0[_2797].z) * _2865) * _2866) + _2672;
    }
    float _3001;
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    if (_2306.y == 0u)
    {
        float _2941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2941;
        float _2943 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2941;
        float _2944 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2941;
        uvec4 _2956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2957 = _2956.x;
        uint _2968 = uint((float(_2956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1162) / _2957))) + floor(float(uint(cbSceneParam._m0[85u].x * _1161) / _2957)));
        float _2978 = (log2(_2944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2979 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
        uint _2982 = uint(isnan(14.0) ? _2979 : (isnan(_2979) ? 14.0 : min(_2979, 14.0)));
        uvec4 _2987 = texelFetch(g_lightClusterGridBuffer, int(((_2982 << 2u) + (_2968 << 6u)) >> 2u));
        uint _2988 = _2987.x;
        uint _2989 = _2956.z;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((((1u << ((_2989 >> 4u) & 15u)) + 4294967295u) & _2988) == 0u) || ((_2989 & 240u) == 0u))
        {
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
        }
        else
        {
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            uint _3248 = 0u;
            uint _3257;
            bool _3258;
            for (;;)
            {
                _3257 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                _3258 = _3257 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3258)
                {
                    frontier_phi_66_pred = _3242;
                    frontier_phi_66_pred_1 = _3247;
                    frontier_phi_66_pred_2 = _3246;
                    frontier_phi_66_pred_3 = _3245;
                    frontier_phi_66_pred_4 = _3244;
                    frontier_phi_66_pred_5 = _3243;
                }
                else
                {
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    uint _3393;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3257;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    for (;;)
                    {
                        uint _3397 = uint(findLSB(_3393)) + (_3248 << 5u);
                        uint _3394 = (_3393 + 4294967295u) & _3393;
                        uint _3399 = _3397 * 48u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3419 = (_3397 * 48u) + 4u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3438 = (_3397 * 48u) + 8u;
                        vec3 _3449 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x));
                        float _3453 = _3413.x - _2942;
                        float _3454 = _3413.y - _2943;
                        float _3455 = _3413.z - _2944;
                        float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                        float _3459 = inversesqrt(_3456);
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3463 = dot(vec3(_1180, _1183, _1186), vec3(_3460, _3461, _3462));
                        float _3468 = 1.0 - (_3456 * _3413.w);
                        float _4891 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3470 = sqrt(_3456) * _3432.w;
                        float _3473 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3463) + _3474;
                        float _3480 = _3470 * _3470;
                        float _3484 = ((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3469) / ((_3480 * 0.699999988079071044921875) + 1.0);
                        float _3488 = (-0.0) - _2942;
                        float _3489 = (-0.0) - _2943;
                        float _3490 = (-0.0) - _2944;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3505 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                        float _3506 = 1.0 - _1255;
                        float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                        float _3514 = _3513 * _3513;
                        float _3515 = _3514 * _3514;
                        float _3516 = _3495 + _3460;
                        float _3517 = _3496 + _3461;
                        float _3518 = _3497 + _3462;
                        float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                        float _3526 = dot(vec3(_1180, _1183, _1186), vec3(_3495, _3496, _3497));
                        float _4907 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3529 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3530 = dot(vec3(_1180, _1183, _1186), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                        float _4918 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3533 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                        float _3538 = _3473 * _3514;
                        float _3539 = _3538 * _3538;
                        float _3542 = ((1.0 - _3539) * _3463) + _3539;
                        float _4929 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3543 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3544 = 1.0 - _3514;
                        float _3554 = (0.5 / (((_3543 * ((_3529 * _3544) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3543 * _3544) + _3514) * _3529))) * _3543;
                        float _4940 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3565 = (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3537 * _3537) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125))) * _3469;
                        _3317 = (_3484 * _3432.x) + _3390;
                        _3318 = (_3484 * _3432.y) + _3391;
                        _3319 = (_3484 * _3432.z) + _3392;
                        _3314 = (_3565 * _3449.x) + _3387;
                        _3315 = (_3565 * _3449.y) + _3388;
                        _3316 = (_3565 * _3449.z) + _3389;
                        if (_3394 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3394;
                        }
                    }
                    frontier_phi_66_pred = _3314;
                    frontier_phi_66_pred_1 = _3319;
                    frontier_phi_66_pred_2 = _3318;
                    frontier_phi_66_pred_3 = _3317;
                    frontier_phi_66_pred_4 = _3316;
                    frontier_phi_66_pred_5 = _3315;
                }
                _3090 = frontier_phi_66_pred;
                _3100 = frontier_phi_66_pred_1;
                _3098 = frontier_phi_66_pred_2;
                _3096 = frontier_phi_66_pred_3;
                _3094 = frontier_phi_66_pred_4;
                _3092 = frontier_phi_66_pred_5;
                uint _3249 = _3248 + 1u;
                if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3242 = _3090;
                    _3243 = _3092;
                    _3244 = _3094;
                    _3245 = _3096;
                    _3246 = _3098;
                    _3247 = _3100;
                    _3248 = _3249;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
        }
        uvec4 _3103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3104 = _3103.z;
        uint _3106 = (_3104 >> 8u) & 15u;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        if (((4294967295u << _3106) & _2988) == 0u)
        {
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
            _3218 = _3097;
            _3220 = _3099;
        }
        else
        {
            float _3235 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
            float _3236 = _3235 * _2942;
            float _3237 = _3235 * _2943;
            float _3238 = _3235 * _2944;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3106 < ((_3104 >> 12u) & 15u))
            {
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3370 = _3089;
                float _3371 = _3091;
                float _3372 = _3093;
                float _3373 = _3095;
                float _3374 = _3097;
                float _3375 = _3099;
                uint _3376 = _3106;
                uint _3385;
                bool _3386;
                for (;;)
                {
                    _3385 = texelFetch(g_lightClassification, int((((_2982 << 5u) + (_2968 << 9u)) + (_3376 << 2u)) >> 2u)).x;
                    _3386 = _3385 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3386)
                    {
                        frontier_phi_77_pred = _3375;
                        frontier_phi_77_pred_1 = _3374;
                        frontier_phi_77_pred_2 = _3373;
                        frontier_phi_77_pred_3 = _3372;
                        frontier_phi_77_pred_4 = _3371;
                        frontier_phi_77_pred_5 = _3370;
                    }
                    else
                    {
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3592 = _3370;
                        float _3593 = _3371;
                        float _3594 = _3372;
                        float _3595 = _3373;
                        float _3596 = _3374;
                        float _3597 = _3375;
                        uint _3598 = _3385;
                        uint _3599;
                        vec4 _3624;
                        float _3625;
                        vec4 _3640;
                        vec3 _3652;
                        vec4 _3667;
                        vec4 _3682;
                        float _3728;
                        bool _3729;
                        for (;;)
                        {
                            uint _3609 = ((_3376 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3598));
                            _3599 = (_3598 + 4294967295u) & _3598;
                            uint _3611 = _3609 * 40u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            _3625 = _3624.w;
                            uint _3627 = (_3609 * 40u) + 4u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3609 * 40u) + 8u;
                            _3652 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x));
                            uint _3654 = (_3609 * 40u) + 16u;
                            _3667 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 3u)).x));
                            uint _3669 = (_3609 * 40u) + 20u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3609 * 40u) + 24u;
                            vec4 _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3703 = (_3609 * 40u) + 28u;
                            vec4 _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            _3728 = fma(_2944, _3716.z, fma(_2943, _3716.y, _3716.x * _2942)) + _3716.w;
                            _3729 = !((fma(_2944, _3697.z, fma(_2943, _3697.y, _3697.x * _2942)) + _3697.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3729)
                            {
                                float _3756 = _3624.x - _2942;
                                float _3757 = _3624.y - _2943;
                                float _3758 = _3624.z - _2944;
                                float _3759 = dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758));
                                float _3762 = inversesqrt(_3759);
                                float _3763 = _3762 * _3756;
                                float _3764 = _3762 * _3757;
                                float _3765 = _3762 * _3758;
                                float _3769 = 1.0 - (_3759 / (_3625 * _3625));
                                float _4951 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3774 = sqrt(_3759) * _3640.w;
                                float _3776 = 1.39999997615814208984375 / (_3774 + 1.39999997615814208984375);
                                float _3777 = _3776 * _3776;
                                float _3780 = ((1.0 - _3777) * dot(vec3(_3763, _3764, _3765), vec3(_1180, _1183, _1186))) + _3777;
                                float _3783 = _3774 * _3774;
                                float _3787 = (fma(_2944, _3667.z, fma(_2943, _3667.y, _3667.x * _2942)) + _3667.w) / _3728;
                                float _3788 = (fma(_2944, _3682.z, fma(_2943, _3682.y, _3682.x * _2942)) + _3682.w) / _3728;
                                float _3792 = 1.0 - dot(vec2(_3787, _3788), vec2(_3787, _3788));
                                float _4967 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                                float _3793 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3794 = _3793 * (((isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0))) * _3770) / ((_3783 * 0.699999988079071044921875) + 1.0));
                                float _3806 = exp2(log2(1.0 / ((_3783 * 3.5) + 5.0)) * 0.25);
                                float _3807 = 1.0 - _1255;
                                float _3814 = sqrt(1.0 - ((1.0 - (_3807 * _3807)) * (1.0 - (_3806 * _3806))));
                                float _3815 = _3814 * _3814;
                                float _3816 = _3815 * _3815;
                                float _3817 = _3763 - _3236;
                                float _3818 = _3764 - _3237;
                                float _3819 = _3765 - _3238;
                                float _3823 = inversesqrt(dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819)));
                                float _3827 = dot(vec3(_1180, _1183, _1186), vec3((-0.0) - _3236, (-0.0) - _3237, (-0.0) - _3238));
                                float _4978 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3830 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3831 = dot(vec3(_1180, _1183, _1186), vec3(_3823 * _3817, _3823 * _3818, _3823 * _3819));
                                float _4989 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3834 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3838 = ((_3834 * _3834) * (_3816 + (-1.0))) + 1.0;
                                float _3839 = _3776 * _3815;
                                float _3840 = _3839 * _3839;
                                float _3846 = ((1.0 - _3840) * dot(vec3(_1180, _1183, _1186), vec3(_3763, _3764, _3765))) + _3840;
                                float _5000 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3848 = 1.0 - _3815;
                                float _3858 = (0.5 / (((_3847 * ((_3830 * _3848) + _3815)) + 9.9999999392252902907785028219223e-09) + (((_3847 * _3848) + _3815) * _3830))) * _3847;
                                float _5011 = isnan(0.0) ? _3858 : (isnan(_3858) ? 0.0 : max(_3858, 0.0));
                                float _3868 = (_3793 * _3770) * (((_3816 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3838 * _3838) * ((_3783 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3794 * _3640.y;
                                frontier_phi_83_pred_1 = _3794 * _3640.x;
                                frontier_phi_83_pred_2 = _3868 * _3652.z;
                                frontier_phi_83_pred_3 = _3868 * _3652.y;
                                frontier_phi_83_pred_4 = _3868 * _3652.x;
                                frontier_phi_83_pred_5 = _3794 * _3640.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3876 = frontier_phi_83_pred;
                            _3875 = frontier_phi_83_pred_1;
                            _3874 = frontier_phi_83_pred_2;
                            _3873 = frontier_phi_83_pred_3;
                            _3872 = frontier_phi_83_pred_4;
                            _3877 = frontier_phi_83_pred_5;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            if (_3599 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3599;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3584;
                        frontier_phi_77_pred_1 = _3583;
                        frontier_phi_77_pred_2 = _3582;
                        frontier_phi_77_pred_3 = _3581;
                        frontier_phi_77_pred_4 = _3580;
                        frontier_phi_77_pred_5 = _3579;
                    }
                    _3221 = frontier_phi_77_pred;
                    _3219 = frontier_phi_77_pred_1;
                    _3217 = frontier_phi_77_pred_2;
                    _3215 = frontier_phi_77_pred_3;
                    _3213 = frontier_phi_77_pred_4;
                    _3211 = frontier_phi_77_pred_5;
                    uint _3377 = _3376 + 1u;
                    if (_3377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3370 = _3211;
                        _3371 = _3213;
                        _3372 = _3215;
                        _3373 = _3217;
                        _3374 = _3219;
                        _3375 = _3221;
                        _3376 = _3377;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3215;
                frontier_phi_58_59_ladder_1 = _3221;
                frontier_phi_58_59_ladder_2 = _3219;
                frontier_phi_58_59_ladder_3 = _3217;
                frontier_phi_58_59_ladder_4 = _3213;
                frontier_phi_58_59_ladder_5 = _3211;
            }
            else
            {
                frontier_phi_58_59_ladder = _3093;
                frontier_phi_58_59_ladder_1 = _3099;
                frontier_phi_58_59_ladder_2 = _3097;
                frontier_phi_58_59_ladder_3 = _3095;
                frontier_phi_58_59_ladder_4 = _3091;
                frontier_phi_58_59_ladder_5 = _3089;
            }
            _3210 = frontier_phi_58_59_ladder_5;
            _3212 = frontier_phi_58_59_ladder_4;
            _3214 = frontier_phi_58_59_ladder;
            _3216 = frontier_phi_58_59_ladder_3;
            _3218 = frontier_phi_58_59_ladder_2;
            _3220 = frontier_phi_58_59_ladder_1;
        }
        float _3225 = isnan(1.0) ? _1239 : (isnan(_1239) ? 1.0 : min(_1239, 1.0));
        _3001 = (_3225 * _3216) + _2437;
        _3003 = (_3225 * _3218) + _2439;
        _3005 = (_3225 * _3220) + _2441;
        _3007 = ((_3210 * _1223) * _3225) + _2782;
        _3009 = ((_3212 * _1225) * _3225) + _2784;
        _3011 = ((_3214 * _1226) * _3225) + _2786;
    }
    else
    {
        _3001 = _2437;
        _3003 = _2439;
        _3005 = _2441;
        _3007 = _2782;
        _3009 = _2784;
        _3011 = _2786;
    }
    float _5027 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _5038 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _5049 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _3028 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_3001 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1239))) + ((_3007 + ((isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * _2077)) * cbPerFrame._m0[3u].x);
    float _3029 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_3003 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1239))) + ((_3009 + ((isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0))) * _2077)) * cbPerFrame._m0[3u].x);
    float _3030 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3005 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1239))) + ((_3011 + ((isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0))) * _2077)) * cbPerFrame._m0[3u].x);
    uint _3031 = _290 + 6u;
    float _3039 = _1161 / cbSceneParam._m0[86u].x;
    float _3040 = _1162 / cbSceneParam._m0[86u].y;
    vec4 _3054 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3039, _3040, (log2((isnan(cbSceneParam._m0[77u].w) ? _1084 : (isnan(_1084) ? cbSceneParam._m0[77u].w : min(_1084, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3056 = _3054.x;
    float _3057 = _3054.y;
    float _3058 = _3054.z;
    float _3059 = _3054.w;
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    if (_1084 > cbSceneParam._m0[78u].w)
    {
        float _3114 = isnan(_1084) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1084 : min(cbSceneParam._m0[80u].w, _1084));
        float _3115 = _3114 / _1084;
        float _3126 = _3115 * _1134;
        float _3127 = _1135 * _3115;
        float _3128 = (-0.0) - _3127;
        float _3130 = _3115 * _1136;
        float _3132 = (cbSceneParam._m0[77u].w * _3128) / _3114;
        float _3133 = _3132 + cbSceneParam._m0[79u].w;
        float _3134 = cbSceneParam._m0[79u].w - _3127;
        float _3140 = sqrt(((_3126 * _3126) + (_3127 * _3127)) + (_3130 * _3130));
        float _3143 = (1.0 - (cbSceneParam._m0[77u].w / _3114)) * _3140;
        float _3148 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3150 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3327;
        if (abs((_3128 - _3132) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3327 = ((((_3133 > 0.0) ? exp2(_3148 * _3133) : (2.0 - exp2(_3150 * _3133))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3143;
        }
        else
        {
            float _3271 = 1.0 / cbSceneParam._m0[80u].x;
            float _3272 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : max(_3133, _3134));
            float _3273 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : min(_3133, _3134));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            _3327 = ((abs(_3140 / _3128) * cbSceneParam._m0[80u].y) * ((((_3282 - _3283) * 2.0) - ((exp2(_3148 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0)))) - exp2(_3148 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))))) * _3271)) - ((exp2(_3150 * _3282) - exp2(_3150 * _3283)) * _3271))) + (_3143 * cbSceneParam._m0[80u].z);
        }
        vec4 _3329 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3039, _3040, 1.0), 0.0);
        float _3338 = exp2((_3327 * (-1.44269502162933349609375)) * (1.0 - _3329.w));
        float _3339 = log2(_3338);
        float _3355 = log2(_3059);
        _3152 = (exp2(_3355 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].x)) * _3329.x) / cbSceneParam._m0[78u].x)) + _3056;
        _3154 = (exp2(_3355 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].y)) * _3329.y) / cbSceneParam._m0[78u].y)) + _3057;
        _3156 = (exp2(_3355 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].z)) * _3329.z) / cbSceneParam._m0[78u].z)) + _3058;
        _3158 = _3338 * _3059;
    }
    else
    {
        _3152 = _3056;
        _3154 = _3057;
        _3156 = _3058;
        _3158 = _3059;
    }
    bool _3365;
    vec4 _3168;
    vec4 _3190;
    float _3192;
    float _3196;
    float _3197;
    float _3198;
    float _3199;
    bool _3209;
    for (;;)
    {
        _3168 = cbMatDynParam._m0[0u];
        float _3170 = roundEven(_3168.y);
        bool _3171 = _3170 == 3.0;
        float _3172 = log2(_3158);
        float _3179 = exp2(_3172 * cbSceneParam._m0[78u].x) * _3028;
        float _3180 = exp2(_3172 * cbSceneParam._m0[78u].y) * _3029;
        float _3181 = exp2(_3172 * cbSceneParam._m0[78u].z) * _3030;
        float _3188 = _1150 + (-0.5);
        _3190 = cbMtdParam._m0[1u];
        _3192 = _3190.y * _3188;
        float _3195 = (_3170 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3196 = _3195 * (_3171 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3152)));
        _3197 = _3195 * (_3171 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3154)));
        _3198 = _3195 * (_3171 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3156)));
        _3199 = _3188 * 0.999000012874603271484375;
        _3209 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3209)
        {
            if ((cbInstanceData._m0[_290 + 7u].x + _3199) < 0.5)
            {
                _3365 = true;
                break;
            }
        }
        uint _3306 = _1199 + uint(_3168.w);
        if ((cbInstanceData._m0[_3306].w < 1.0) && ((cbInstanceData._m0[_3306].w + _3199) < 0.5))
        {
            _3365 = true;
            break;
        }
        if ((_3192 + 1.0) < _3190.x)
        {
            _3365 = true;
            break;
        }
        _3365 = false;
        break;
    }
    float _3570;
    if (_3365)
    {
        discard_state = true;
        _3570 = 0.0;
    }
    else
    {
        _3570 = cbInstanceData._m0[_3031].w;
    }
    SV_Target.x = _3196;
    SV_Target.y = _3197;
    SV_Target.z = _3198;
    SV_Target.w = _3570;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3031].w;
    discard_exit();
}


