#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1699;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _261 = _260 * _252;
    float _262 = _260 * _253;
    float _263 = _260 * _254;
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = _267 * NORMAL.x;
    float _269 = _267 * NORMAL.y;
    float _270 = _267 * NORMAL.z;
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = _274 * TANGENT.x;
    float _276 = _274 * TANGENT.y;
    float _277 = _274 * TANGENT.z;
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4305 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4316 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4327 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[23u].w) + _450) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4338 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[23u].w) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4349 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _548 = (_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475;
    float _549 = (_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476;
    float _550 = (_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _401.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[23u].w) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4360 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _618 = (_611 * ((_569.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _619 = (_611 * ((_569.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _620 = (_611 * ((_569.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _624 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _618;
    float _627 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _619;
    float _630 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _620;
    float _637 = ((_618 - _624) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) + _624;
    float _638 = ((_619 - _627) * (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) + _627;
    float _639 = ((_620 - _630) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) + _630;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _700 = _698.x;
    float _701 = _698.y;
    float _702 = _698.z;
    float _709 = ((_681.x - _700) * _468) + _700;
    float _710 = ((_681.y - _701) * _468) + _701;
    float _711 = ((_681.z - _702) * _468) + _702;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _734 = ((_723.x - _709) * _541) + _709;
    float _735 = ((_723.y - _710) * _541) + _710;
    float _736 = ((_723.z - _711) * _541) + _711;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _761 = ((_748.z - _736) * _611) + _736;
    float _764 = ((((_748.x - _734) * _611) + _734) * 2.0) + (-1.0);
    float _765 = ((((_748.y - _735) * _611) + _735) * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _4371 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _771 = sqrt(1.0 - (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))));
    vec4 _789 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _801 = (_764 + ((((_656.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_789.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _802 = (_765 + ((((_656.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_789.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _805 = fma(_771, _268, fma(_802, _275, _801 * _261));
    float _808 = fma(_771, _269, fma(_802, _276, _801 * _262));
    float _811 = fma(_771, _270, fma(_802, _277, _801 * _263));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _844 = _842.x;
    float _845 = 1.0 - _844;
    float _853 = (cbMtdParam._m0[19u].x + dot(vec4(_815 * _805, _815 * _808, _815 * _811, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_844 - _845) * cbMtdParam._m0[24u].z) + _845) * cbMtdParam._m0[21u].z);
    float _4382 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _854 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
    float _856 = (-0.0) - cbMtdParam._m0[24u].x;
    float _858 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
    float _866 = _854 - ((_854 * TEXCOORD_8.x) * _859);
    float _867 = _854 - ((_854 * TEXCOORD_8.y) * _859);
    float _868 = _854 - ((_854 * TEXCOORD_8.z) * _859);
    float _875 = (_866 * (cbMtdParam._m0[17u].x - _637)) + _637;
    float _876 = (_867 * (cbMtdParam._m0[17u].y - _638)) + _638;
    float _877 = (_868 * (cbMtdParam._m0[17u].z - _639)) + _639;
    float _892 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _893 = _892 * TEXCOORD.z;
    float _894 = _892 * TEXCOORD.w;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _893) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _894) + cbTextureTilingScale._m0[19u].w));
    float _908 = _906.x;
    float _909 = 1.0 - _908;
    float _935 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_908 - _909) * cbMtdParam._m0[24u].w) + _909) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4403 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _936 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _944 = ((((cbMtdParam._m0[10u].x - _875) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _936) + _875;
    float _945 = ((((cbMtdParam._m0[10u].y - _876) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _936) + _876;
    float _946 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _877)) * _936) + _877;
    vec4 _972 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _974 = _972.x;
    float _992 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _974) * _468) + _974;
    float _1009 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _992) * _541) + _992;
    float _1026 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _1009) * _611) + _1009;
    float _1032 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1026) * cbMtdParam._m0[19u].z) + _1026;
    float _1034 = _1032 - (_1032 * _866);
    float _1036 = _1034 - (_1034 * _936);
    float _1041 = (((_656.z - _761) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _761;
    float _1045 = ((_789.z - _1041) * cbMtdParam._m0[19u].w) + _1041;
    vec4 _1061 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _1068 = (_1061.x * 2.0) + (-1.0);
    float _1069 = (_1061.y * 2.0) + (-1.0);
    float _1070 = dot(vec2(_1068, _1069), vec2(_1068, _1069));
    float _4414 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1078 = ((_1061.z - _1045) * _866) + _1045;
    float _1081 = ((cbMtdParam._m0[23u].x - _1078) * _936) + _1078;
    vec4 _1104 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _893) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _894) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1110 = (_1104.x * 2.0) + (-1.0);
    float _1111 = (_1104.y * 2.0) + (-1.0);
    float _1112 = dot(vec2(_1110, _1111), vec2(_1110, _1111));
    float _4425 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1127 = ((sqrt(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) - _771) * _868) + _771;
    float _1130 = (((_1068 - _801) * _866) + _801) + (cbMtdParam._m0[21u].x * _801);
    float _1131 = (((_1069 - _802) * _867) + _802) + (cbMtdParam._m0[21u].x * _802);
    float _1142 = (((_1110 - _1130) + (_1130 * cbMtdParam._m0[22u].z)) * _936) + _1130;
    float _1143 = (((_1111 - _1131) + (_1131 * cbMtdParam._m0[22u].z)) * _936) + _1131;
    float _1144 = (_936 * (sqrt(1.0 - (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) - _1127)) + _1127;
    float _1146 = cbMtdParam._m0[22u].x + _789.w;
    float _1149 = fma(_1144, _268, fma(_1143, _275, _1142 * _261));
    float _1152 = fma(_1144, _269, fma(_1143, _276, _1142 * _262));
    float _1155 = fma(_1144, _270, fma(_1143, _277, _1142 * _263));
    float _1159 = inversesqrt(dot(vec3(_1149, _1152, _1155), vec3(_1149, _1152, _1155)));
    float _1160 = _1159 * _1149;
    float _1161 = _1159 * _1152;
    float _1162 = _1159 * _1155;
    float _4436 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1163 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _4447 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _4458 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4469 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4480 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4491 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1168 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _1182 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1222 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1232 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1222);
    float _1233 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1222);
    float _1234 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1222);
    float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
    float _1239 = _1232 * _1238;
    float _1240 = _1233 * _1238;
    float _1241 = _1234 * _1238;
    float _1247 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1248 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1266 = fma(_1162, cbSceneParam._m0[5u].z, fma(_1161, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1160));
    float _1269 = fma(_1162, cbSceneParam._m0[6u].z, fma(_1161, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1160));
    float _1272 = fma(_1162, cbSceneParam._m0[7u].z, fma(_1161, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1160));
    uint _1286 = (_299 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1292 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * cbInstanceData._m0[_1286].x;
    float _1293 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * cbInstanceData._m0[_1286].y;
    float _1294 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * cbInstanceData._m0[_1286].z;
    float _4502 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
    float _1295 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _4513 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _1296 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _4524 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _1297 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _1298 = 1.0 - _1168;
    float _1299 = _1295 * _1298;
    float _1300 = _1296 * _1298;
    float _1301 = _1297 * _1298;
    float _1306 = (_1295 + (-0.039999999105930328369140625)) * _1168;
    float _1307 = (_1296 + (-0.039999999105930328369140625)) * _1168;
    float _1308 = (_1297 + (-0.039999999105930328369140625)) * _1168;
    float _1309 = _1306 + 0.039999999105930328369140625;
    float _1311 = _1307 + 0.039999999105930328369140625;
    float _1312 = _1308 + 0.039999999105930328369140625;
    vec4 _1321 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1247, cbSceneParam._m0[86u].y * _1248));
    float _1325 = ((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * TEXCOORD_5.w) * _1321.x;
    float _1326 = dot(vec3(_1160, _1161, _1162), vec3(_1239, _1240, _1241));
    float _1329 = _1326 * 2.0;
    float _1333 = (_1329 * _1160) - _1239;
    float _1334 = (_1329 * _1161) - _1240;
    float _1335 = (_1329 * _1162) - _1241;
    float _1339 = abs(dot(vec3(_1239, _1240, _1241), vec3(_1160, _1161, _1162)));
    float _4535 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _1341 = sqrt(_1163);
    float _1354 = exp2((_1341 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1341 * 3.0));
    float _1360 = (1.0 - _1354) * ((_1341 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1361 = _1354 * _1341;
    float _1389 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1393 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1397 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1698;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1423 = fma(_1397, cbModelParam._m0[26u].z, fma(_1393, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1389));
        float _1427 = fma(_1397, cbModelParam._m0[27u].z, fma(_1393, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1389));
        float _1431 = fma(_1397, cbModelParam._m0[28u].z, fma(_1393, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1389));
        float _1456 = _1389 + _1160;
        float _1457 = _1393 + _1161;
        float _1458 = _1397 + _1162;
        float _1468 = fma(_1458, cbModelParam._m0[26u].z, fma(_1457, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1456)) - _1423;
        float _1469 = fma(_1458, cbModelParam._m0[27u].z, fma(_1457, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1456)) - _1427;
        float _1470 = fma(_1458, cbModelParam._m0[28u].z, fma(_1457, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1456)) - _1431;
        float _1474 = inversesqrt(dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470)));
        float _1487 = ((_1474 * _1468) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1423 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1488 = ((_1474 * _1469) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1427 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1474 * _1470) / cbModelParam._m0[34u].z) + ((((((_1431 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1487, _1488, _1489), 0.0);
        float _1526 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1492.x + (-0.5));
        float _1528 = _1526 * (_1492.y + (-0.5));
        float _1529 = _1526 * (_1492.z + (-0.5));
        float _1536 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1499.x + (-0.5));
        float _1538 = _1536 * (_1499.y + (-0.5));
        float _1539 = _1536 * (_1499.z + (-0.5));
        float _1546 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1506.x + (-0.5));
        float _1548 = _1546 * (_1506.y + (-0.5));
        float _1549 = _1546 * (_1506.z + (-0.5));
        float _1556 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1513.x + (-0.5));
        float _1558 = _1556 * (_1513.y + (-0.5));
        float _1559 = _1556 * (_1513.z + (-0.5));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = _1527 * 0.5;
        float _1564 = _1537 * 0.5;
        float _1565 = _1547 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1580 = (dot(vec3(_1160, _1161, _1162), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1590 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4583 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1592 + 1.0))) + _1597) * _1560;
        float _1607 = _1528 * 0.5;
        float _1608 = _1538 * 0.5;
        float _1609 = _1548 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_1160, _1161, _1162), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4594 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4605 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4616 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_1634 + 1.0))) + _1639) * _1561;
        float _1649 = _1529 * 0.5;
        float _1650 = _1539 * 0.5;
        float _1651 = _1549 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_1160, _1161, _1162), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4627 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4638 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4649 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_1676 + 1.0))) + _1681) * _1562;
        _1698 = _1529;
        _1700 = _1528;
        _1701 = _1527;
        _1702 = _1539;
        _1703 = _1538;
        _1704 = _1537;
        _1705 = _1549;
        _1706 = _1548;
        _1707 = _1547;
        _1708 = _1562;
        _1709 = _1561;
        _1710 = _1560;
        _1711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1712 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1713 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1699;
        _1700 = _1699;
        _1701 = _1699;
        _1702 = _1699;
        _1703 = _1699;
        _1704 = _1699;
        _1705 = _1699;
        _1706 = _1699;
        _1707 = _1699;
        _1708 = _1699;
        _1709 = _1699;
        _1710 = _1699;
        _1711 = 0.0;
        _1712 = 0.0;
        _1713 = 0.0;
    }
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1736 = fma(_1397, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389));
        float _1740 = fma(_1397, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389));
        float _1744 = fma(_1397, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389));
        float _1767 = _1389 + _1160;
        float _1768 = _1393 + _1161;
        float _1769 = _1397 + _1162;
        float _1779 = fma(_1769, cbModelParam._m0[30u].z, fma(_1768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1767)) - _1736;
        float _1780 = fma(_1769, cbModelParam._m0[31u].z, fma(_1768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1767)) - _1740;
        float _1781 = fma(_1769, cbModelParam._m0[32u].z, fma(_1768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1767)) - _1744;
        float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
        float _1798 = ((_1785 * _1779) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1736 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1799 = ((_1785 * _1780) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1740 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1800 = ((_1785 * _1781) / cbModelParam._m0[35u].z) + ((((((_1744 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1802 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1798, _1799, _1800), 0.0);
        vec4 _1809 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1798, _1799, _1800), 0.0);
        vec4 _1816 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1798, _1799, _1800), 0.0);
        vec4 _1823 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1798, _1799, _1800), 0.0);
        float _1835 = exp2((_1802.w + (-0.5)) * 20.0) * 2.0;
        float _1836 = _1835 * (_1802.x + (-0.5));
        float _1837 = _1835 * (_1802.y + (-0.5));
        float _1838 = _1835 * (_1802.z + (-0.5));
        float _1845 = exp2((_1809.w + (-0.5)) * 20.0) * 2.0;
        float _1846 = _1845 * (_1809.x + (-0.5));
        float _1847 = _1845 * (_1809.y + (-0.5));
        float _1848 = _1845 * (_1809.z + (-0.5));
        float _1855 = exp2((_1816.w + (-0.5)) * 20.0) * 2.0;
        float _1856 = _1855 * (_1816.x + (-0.5));
        float _1857 = _1855 * (_1816.y + (-0.5));
        float _1858 = _1855 * (_1816.z + (-0.5));
        float _1865 = exp2((_1823.w + (-0.5)) * 20.0) * 2.0;
        float _1866 = _1865 * (_1823.x + (-0.5));
        float _1867 = _1865 * (_1823.y + (-0.5));
        float _1868 = _1865 * (_1823.z + (-0.5));
        float _1869 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1870 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1871 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1872 = _1836 * 0.5;
        float _1873 = _1846 * 0.5;
        float _1874 = _1856 * 0.5;
        float _1875 = dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874));
        float _1880 = (_1875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1875);
        float _1888 = (dot(vec3(_1160, _1161, _1162), vec3(_1880 * _1872, _1880 * _1873, _1880 * _1874)) + 1.0) * 0.5;
        float _4690 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1897 = sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874)) / (_1869 + 9.9999997473787516355514526367188e-06);
        float _4701 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _1899 = _1898 * 2.0;
        float _1903 = (1.0 - _1898) / (_1898 + 1.0);
        float _4712 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _1913 = ((((1.0 - _1904) * (_1899 + 2.0)) * exp2(log2(isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_1899 + 1.0))) + _1904) * _1869;
        float _1914 = _1837 * 0.5;
        float _1915 = _1847 * 0.5;
        float _1916 = _1857 * 0.5;
        float _1917 = dot(vec3(_1914, _1915, _1916), vec3(_1914, _1915, _1916));
        float _1922 = (_1917 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1917);
        float _1930 = (dot(vec3(_1160, _1161, _1162), vec3(_1922 * _1914, _1922 * _1915, _1922 * _1916)) + 1.0) * 0.5;
        float _4723 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1939 = sqrt(((_1915 * _1915) + (_1914 * _1914)) + (_1916 * _1916)) / (_1870 + 9.9999997473787516355514526367188e-06);
        float _4734 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _1941 = _1940 * 2.0;
        float _1945 = (1.0 - _1940) / (_1940 + 1.0);
        float _4745 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _1955 = ((((1.0 - _1946) * (_1941 + 2.0)) * exp2(log2(isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_1941 + 1.0))) + _1946) * _1870;
        float _1956 = _1838 * 0.5;
        float _1957 = _1848 * 0.5;
        float _1958 = _1858 * 0.5;
        float _1959 = dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958));
        float _1964 = (_1959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1959);
        float _1972 = (dot(vec3(_1160, _1161, _1162), vec3(_1964 * _1956, _1964 * _1957, _1964 * _1958)) + 1.0) * 0.5;
        float _4756 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1981 = sqrt(((_1957 * _1957) + (_1956 * _1956)) + (_1958 * _1958)) / (_1871 + 9.9999997473787516355514526367188e-06);
        float _4767 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _1983 = _1982 * 2.0;
        float _1987 = (1.0 - _1982) / (_1982 + 1.0);
        float _4778 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1988 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
        float _1997 = ((((1.0 - _1988) * (_1983 + 2.0)) * exp2(log2(isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_1983 + 1.0))) + _1988) * _1871;
        _2005 = _1838;
        _2006 = _1837;
        _2007 = _1836;
        _2008 = _1848;
        _2009 = _1847;
        _2010 = _1846;
        _2011 = _1858;
        _2012 = _1857;
        _2013 = _1856;
        _2014 = _1871;
        _2015 = _1870;
        _2016 = _1869;
        _2017 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)));
        _2018 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)));
        _2019 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)));
    }
    else
    {
        _2005 = _1699;
        _2006 = _1699;
        _2007 = _1699;
        _2008 = _1699;
        _2009 = _1699;
        _2010 = _1699;
        _2011 = _1699;
        _2012 = _1699;
        _2013 = _1699;
        _2014 = _1699;
        _2015 = _1699;
        _2016 = _1699;
        _2017 = 0.0;
        _2018 = 0.0;
        _2019 = 0.0;
    }
    float _2029 = (cbModelParam._m0[1u].x * (_2017 - _1711)) + _1711;
    float _2030 = (cbModelParam._m0[1u].x * (_2018 - _1712)) + _1712;
    float _2031 = (cbModelParam._m0[1u].x * (_2019 - _1713)) + _1713;
    float _2052 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2030, cbSceneParam._m0[89u].y, _2029 * cbSceneParam._m0[89u].x));
    float _2055 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2030, cbSceneParam._m0[90u].y, _2029 * cbSceneParam._m0[90u].x));
    float _2058 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2030, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2029));
    float _2073 = _1333 * 0.5;
    float _2074 = _1334 * 0.5;
    float _2075 = _1335 * 0.5;
    float _2076 = dot(vec4(_2073, _2074, _2075, 1.0), vec4(_2007, _2010, _2013, _2016));
    float _2079 = dot(vec4(_2073, _2074, _2075, 1.0), vec4(_2006, _2009, _2012, _2015));
    float _2082 = dot(vec4(_2073, _2074, _2075, 1.0), vec4(_2005, _2008, _2011, _2014));
    float _2116;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2089 = dot(vec4(_2073, _2074, _2075, 1.0), vec4(_1698, _1702, _1705, _1708));
        float _2093 = dot(vec4(_2073, _2074, _2075, 1.0), vec4(_1700, _1703, _1706, _1709));
        float _2097 = dot(vec4(_2073, _2074, _2075, 1.0), vec4(_1701, _1704, _1707, _1710));
        float _2104 = dot(vec4(cbModelParam._m0[39u]), vec4(_2073, _2074, _2075, 1.0));
        _2116 = dot(vec3(isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0)), isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0)), isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2104) ? 0.0 : (isnan(0.0) ? _2104 : max(0.0, _2104))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2116 = 1.0;
    }
    float _2127;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2118 = dot(vec4(cbModelParam._m0[40u]), vec4(_2073, _2074, _2075, 1.0));
        _2127 = dot(vec3(isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)), isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0)), isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2118) ? 0.0 : (isnan(0.0) ? _2118 : max(0.0, _2118))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2127 = 1.0;
    }
    float _2131 = (_2127 * cbModelParam._m0[1u].x) + (_2116 * (1.0 - cbModelParam._m0[1u].x));
    float _2141 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1163);
    float _2142 = isnan(_2141) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2141 : min(cbModelParam._m0[25u].z, _2141));
    float _2222;
    float _2224;
    float _2226;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2189 = fma(_1397, cbModelParam._m0[13u].z, fma(_1393, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1389)) + cbModelParam._m0[13u].w;
        float _2193 = fma(_1397, cbModelParam._m0[14u].z, fma(_1393, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1389)) + cbModelParam._m0[14u].w;
        float _2197 = fma(_1397, cbModelParam._m0[15u].z, fma(_1393, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1389)) + cbModelParam._m0[15u].w;
        float _2200 = fma(_1335, cbModelParam._m0[13u].z, fma(_1334, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1333));
        float _2203 = fma(_1335, cbModelParam._m0[14u].z, fma(_1334, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1333));
        float _2206 = fma(_1335, cbModelParam._m0[15u].z, fma(_1334, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1333));
        float _2234;
        if (_2200 > 0.0)
        {
            _2234 = abs((1.0 - _2189) / _2200);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2189 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2234 = frontier_phi_14_12_ladder;
        }
        float _2406;
        if (_2203 > 0.0)
        {
            _2406 = abs((1.0 - _2193) / _2203);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2193 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2406 = frontier_phi_23_19_ladder;
        }
        float _2701;
        if (_2206 > 0.0)
        {
            _2701 = abs((1.0 - _2197) / _2206);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2197 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2701 = frontier_phi_35_30_ladder;
        }
        float _2703 = isnan(_2406) ? _2234 : (isnan(_2234) ? _2406 : min(_2234, _2406));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _2200) + _2189;
        float _2709 = (_2704 * _2203) + _2193;
        float _2710 = (_2704 * _2206) + _2197;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2713 = (-1.0) - _2711;
        float _2715 = _2711 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2710 > _2715) || ((_2710 < _2713) || ((_2709 > _2715) || ((_2709 < _2713) || ((_2708 < _2713) || (_2708 > _2715))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2855 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2710, cbModelParam._m0[9u].z, fma(_2709, cbModelParam._m0[9u].y, _2708 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2710, cbModelParam._m0[10u].z, fma(_2709, cbModelParam._m0[10u].y, _2708 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2710, cbModelParam._m0[11u].z, fma(_2709, cbModelParam._m0[11u].y, _2708 * cbModelParam._m0[11u].x))), _2142);
            frontier_phi_13_35_ladder = _2855.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2855.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2855.x * cbModelParam._m0[1u].y;
        }
        _2222 = frontier_phi_13_35_ladder_2;
        _2224 = frontier_phi_13_35_ladder_1;
        _2226 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1333, _1334, _1335), _2142);
        _2222 = _2210.x * cbModelParam._m0[1u].y;
        _2224 = _2210.y * cbModelParam._m0[1u].y;
        _2226 = _2210.z * cbModelParam._m0[1u].y;
    }
    float _2230 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1163);
    float _2231 = isnan(_2230) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2230 : min(cbModelParam._m0[25u].w, _2230));
    float _2321;
    float _2323;
    float _2325;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2285 = fma(_1397, cbModelParam._m0[21u].z, fma(_1393, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1389)) + cbModelParam._m0[21u].w;
        float _2289 = fma(_1397, cbModelParam._m0[22u].z, fma(_1393, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1389)) + cbModelParam._m0[22u].w;
        float _2293 = fma(_1397, cbModelParam._m0[23u].z, fma(_1393, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1389)) + cbModelParam._m0[23u].w;
        float _2296 = fma(_1335, cbModelParam._m0[21u].z, fma(_1334, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1333));
        float _2299 = fma(_1335, cbModelParam._m0[22u].z, fma(_1334, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1333));
        float _2302 = fma(_1335, cbModelParam._m0[23u].z, fma(_1334, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1333));
        float _2411;
        if (_2296 > 0.0)
        {
            _2411 = abs((1.0 - _2285) / _2296);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2296 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2285 + 1.0) / _2296);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2411 = frontier_phi_25_21_ladder;
        }
        float _2728;
        if (_2299 > 0.0)
        {
            _2728 = abs((1.0 - _2289) / _2299);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2299 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2289 + 1.0) / _2299);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2728 = frontier_phi_37_32_ladder;
        }
        float _3066;
        if (_2302 > 0.0)
        {
            _3066 = abs((1.0 - _2293) / _2302);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2302 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2293 + 1.0) / _2302);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _3066 = frontier_phi_47_44_ladder;
        }
        float _3068 = isnan(_2728) ? _2411 : (isnan(_2411) ? _2728 : min(_2411, _2728));
        float _3069 = isnan(_3066) ? _3068 : (isnan(_3068) ? _3066 : min(_3068, _3066));
        float _3073 = (_3069 * _2296) + _2285;
        float _3074 = (_3069 * _2299) + _2289;
        float _3075 = (_3069 * _2302) + _2293;
        float _3076 = _3069 * 9.9999997473787516355514526367188e-05;
        float _3077 = (-1.0) - _3076;
        float _3079 = _3076 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_3075 > _3079) || ((_3075 < _3077) || ((_3074 > _3079) || ((_3074 < _3077) || ((_3073 < _3077) || (_3073 > _3079))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3197 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3075, cbModelParam._m0[17u].z, fma(_3074, cbModelParam._m0[17u].y, _3073 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3075, cbModelParam._m0[18u].z, fma(_3074, cbModelParam._m0[18u].y, _3073 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3075, cbModelParam._m0[19u].z, fma(_3074, cbModelParam._m0[19u].y, _3073 * cbModelParam._m0[19u].x))), _2231);
            frontier_phi_22_47_ladder = _3197.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3197.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3197.x * cbModelParam._m0[1u].z;
        }
        _2321 = frontier_phi_22_47_ladder_2;
        _2323 = frontier_phi_22_47_ladder_1;
        _2325 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2305 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1333, _1334, _1335), _2231);
        _2321 = _2305.x * cbModelParam._m0[1u].z;
        _2323 = _2305.y * cbModelParam._m0[1u].z;
        _2325 = _2305.z * cbModelParam._m0[1u].z;
    }
    float _2338 = (((_1360 * _1309) + _1361) * _1325) * ((cbModelParam._m0[1u].w * (_2321 - _2222)) + _2222);
    float _2340 = (((_1360 * _1311) + _1361) * _1325) * ((cbModelParam._m0[1u].w * (_2323 - _2224)) + _2224);
    float _2342 = (((_1360 * _1312) + _1361) * _1325) * ((cbModelParam._m0[1u].w * (_2325 - _2226)) + _2226);
    float _2345 = fma(_2342, cbSceneParam._m0[89u].z, fma(_2340, cbSceneParam._m0[89u].y, _2338 * cbSceneParam._m0[89u].x));
    float _2348 = fma(_2342, cbSceneParam._m0[90u].z, fma(_2340, cbSceneParam._m0[90u].y, _2338 * cbSceneParam._m0[90u].x));
    float _2351 = fma(_2342, cbSceneParam._m0[91u].z, fma(_2340, cbSceneParam._m0[91u].y, _2338 * cbSceneParam._m0[91u].x));
    float _2385 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2389 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2393 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2397 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2398 = _2385 / _2397;
    float _2399 = _2389 / _2397;
    float _2400 = _2393 / _2397;
    float _2547;
    float _2548;
    float _2549;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2427 = ((uint(_2400 > cbSceneParam._m0[59u].y) + uint(_2400 > cbSceneParam._m0[59u].x)) + uint(_2400 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2428 = _2427 + 43u;
        uint _2436 = _2427 + 44u;
        uint _2444 = _2427 + 45u;
        uint _2452 = _2427 + 46u;
        float _2463 = fma(_2397, cbSceneParam._m0[_2428].w, fma(_2393, cbSceneParam._m0[_2428].z, fma(_2389, cbSceneParam._m0[_2428].y, _2385 * cbSceneParam._m0[_2428].x)));
        float _2467 = fma(_2397, cbSceneParam._m0[_2436].w, fma(_2393, cbSceneParam._m0[_2436].z, fma(_2389, cbSceneParam._m0[_2436].y, _2385 * cbSceneParam._m0[_2436].x)));
        float _2475 = fma(_2397, cbSceneParam._m0[_2452].w, fma(_2393, cbSceneParam._m0[_2452].z, fma(_2389, cbSceneParam._m0[_2452].y, _2385 * cbSceneParam._m0[_2452].x)));
        float _2480 = cbSceneParam._m0[33u].z * _2475;
        float _2482 = cbSceneParam._m0[33u].w * _2475;
        float _2485 = fma(_2397, cbSceneParam._m0[_2444].w, fma(_2393, cbSceneParam._m0[_2444].z, fma(_2389, cbSceneParam._m0[_2444].y, _2385 * cbSceneParam._m0[_2444].x))) / _2475;
        float _2533 = (cbSceneParam._m0[33u].x - sqrt(((_2399 * _2399) + (_2398 * _2398)) + (_2400 * _2400))) * cbSceneParam._m0[33u].y;
        float _4904 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2540 = (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2480 + _2463) / _2475, (_2482 + _2467) / _2475), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2482 + _2463) / _2475, (_2467 - _2480) / _2475), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2463 - _2480) / _2475, (_2467 - _2482) / _2475), _2485), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2463 - _2482) / _2475, (_2480 + _2467) / _2475), _2485), 0.0)).x), vec4(0.25)));
        _2547 = 1.0 - (_2540 * cbSceneParam._m0[34u].x);
        _2548 = 1.0 - (_2540 * cbSceneParam._m0[34u].y);
        _2549 = 1.0 - (_2540 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2547 = 1.0;
        _2548 = 1.0;
        _2549 = 1.0;
    }
    float _2613;
    float _2615;
    float _2617;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2601 = fma(_2397, cbSceneParam._m0[63u].w, fma(_2393, cbSceneParam._m0[63u].z, fma(_2389, cbSceneParam._m0[63u].y, _2385 * cbSceneParam._m0[63u].x)));
        float _2602 = fma(_2397, cbSceneParam._m0[60u].w, fma(_2393, cbSceneParam._m0[60u].z, fma(_2389, cbSceneParam._m0[60u].y, _2385 * cbSceneParam._m0[60u].x))) / _2601;
        float _2603 = fma(_2397, cbSceneParam._m0[61u].w, fma(_2393, cbSceneParam._m0[61u].z, fma(_2389, cbSceneParam._m0[61u].y, _2385 * cbSceneParam._m0[61u].x))) / _2601;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2602 >= cbSceneParam._m0[64u].x) && (_2603 >= cbSceneParam._m0[64u].y)) && (_2602 <= cbSceneParam._m0[64u].z)) && (_2603 <= cbSceneParam._m0[64u].w))
        {
            float _2741 = fma(_2397, cbSceneParam._m0[62u].w, fma(_2393, cbSceneParam._m0[62u].z, fma(_2389, cbSceneParam._m0[62u].y, _2385 * cbSceneParam._m0[62u].x))) / _2601;
            float _2745 = isnan(cbSceneParam._m0[41u].w) ? _2741 : (isnan(_2741) ? cbSceneParam._m0[41u].w : max(_2741, cbSceneParam._m0[41u].w));
            float _2788 = (cbSceneParam._m0[33u].x - sqrt(((_2399 * _2399) + (_2398 * _2398)) + (_2400 * _2400))) * cbSceneParam._m0[33u].y;
            float _4920 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
            float _2795 = (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2602, cbSceneParam._m0[33u].w + _2603), _2745), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2602, _2603 - cbSceneParam._m0[33u].z), _2745), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2602 - cbSceneParam._m0[33u].z, _2603 - cbSceneParam._m0[33u].w), _2745), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2602 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2603), _2745), 0.0)).x), vec4(0.25)));
            float _2799 = 1.0 - (_2795 * cbSceneParam._m0[34u].x);
            float _2800 = 1.0 - (_2795 * cbSceneParam._m0[34u].y);
            float _2801 = 1.0 - (_2795 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2801) ? _2549 : (isnan(_2549) ? _2801 : min(_2549, _2801));
            frontier_phi_34_33_ladder_1 = isnan(_2800) ? _2548 : (isnan(_2548) ? _2800 : min(_2548, _2800));
            frontier_phi_34_33_ladder_2 = isnan(_2799) ? _2547 : (isnan(_2547) ? _2799 : min(_2547, _2799));
        }
        else
        {
            frontier_phi_34_33_ladder = _2549;
            frontier_phi_34_33_ladder_1 = _2548;
            frontier_phi_34_33_ladder_2 = _2547;
        }
        _2613 = frontier_phi_34_33_ladder_2;
        _2615 = frontier_phi_34_33_ladder_1;
        _2617 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2613 = _2547;
        _2615 = _2548;
        _2617 = _2549;
    }
    uvec4 _2622 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2624 = _2622.x * 14u;
    uint _2625 = _2624 + 13u;
    float _2632 = _1325 + (-1.0);
    float _2637 = (cbLight._m0[_2625].x * _2632) + 1.0;
    float _2638 = (cbLight._m0[_2625].y * _2632) + 1.0;
    float _2639 = (cbLight._m0[_2625].z * _2632) + 1.0;
    float _2640 = (cbLight._m0[_2625].w * _2632) + 1.0;
    uint _2641 = _2624 + 5u;
    float _2647 = isnan(1.0) ? _2638 : (isnan(_2638) ? 1.0 : min(_2638, 1.0));
    uint _2651 = _2624 + 4u;
    float _2660 = isnan(1.0) ? _2637 : (isnan(_2637) ? 1.0 : min(_2637, 1.0));
    uint _2664 = _2624 | 1u;
    float _2675 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_1160, _1161, _1162));
    float _2678 = dot(vec3(cbLight._m0[_2664].xyz), vec3(_1160, _1161, _1162));
    float _4956 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _4967 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2683 = (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * 0.3183098733425140380859375;
    float _2685 = (isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0))) * 0.3183098733425140380859375;
    float _2692 = ((cbLight._m0[_2641].x * _2647) * _2685) + (((cbLight._m0[_2651].x * _2613) * _2660) * _2683);
    float _2693 = ((_2647 * cbLight._m0[_2641].y) * _2685) + (((cbLight._m0[_2651].y * _2615) * _2660) * _2683);
    float _2694 = ((_2647 * cbLight._m0[_2641].z) * _2685) + (((cbLight._m0[_2651].z * _2617) * _2660) * _2683);
    uvec4 _2698 = floatBitsToUint(cbLight._m0[_2624 + 12u]);
    bool _2700 = _2698.x == 0u;
    float _2802;
    float _2804;
    float _2806;
    if (_2700)
    {
        _2802 = _2692;
        _2804 = _2693;
        _2806 = _2694;
    }
    else
    {
        uint _2810 = _2624 + 6u;
        float _2826 = (dot(vec3(cbLight._m0[_2624 + 2u].xyz), vec3(_1160, _1161, _1162)) * 0.5) + 0.5;
        float _2827 = _2826 * _2826;
        float _4978 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2828 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
        float _2829 = isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0));
        _2802 = (((cbLight._m0[_2810].x * 0.3183098733425140380859375) * _2828) * _2829) + _2692;
        _2804 = (((cbLight._m0[_2810].y * 0.3183098733425140380859375) * _2828) * _2829) + _2693;
        _2806 = (((cbLight._m0[_2810].z * 0.3183098733425140380859375) * _2828) * _2829) + _2694;
    }
    bool _2809 = _2698.y == 0u;
    float _2864;
    float _2866;
    float _2868;
    if (_2809)
    {
        _2864 = _2802;
        _2866 = _2804;
        _2868 = _2806;
    }
    else
    {
        uint _3037 = _2624 + 7u;
        float _3053 = (dot(vec3(cbLight._m0[_2624 + 3u].xyz), vec3(_1160, _1161, _1162)) * 0.5) + 0.5;
        float _3054 = _3053 * _3053;
        float _4994 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3055 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
        float _3056 = isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0));
        _2864 = (((cbLight._m0[_3037].x * 0.3183098733425140380859375) * _3055) * _3056) + _2802;
        _2866 = (((cbLight._m0[_3037].y * 0.3183098733425140380859375) * _3055) * _3056) + _2804;
        _2868 = (((cbLight._m0[_3037].z * 0.3183098733425140380859375) * _3055) * _3056) + _2806;
    }
    uint _2871 = _2624 + 8u;
    float _2884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _1163) * 0.949999988079071044921875);
    float _2885 = _2884 * _2884;
    float _2886 = cbLight._m0[_2624].x + _1239;
    float _2887 = cbLight._m0[_2624].y + _1240;
    float _2888 = cbLight._m0[_2624].z + _1241;
    float _2892 = inversesqrt(dot(vec3(_2886, _2887, _2888), vec3(_2886, _2887, _2888)));
    float _2893 = _2892 * _2886;
    float _2894 = _2892 * _2887;
    float _2895 = _2892 * _2888;
    float _2896 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_2624].xyz));
    float _5010 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
    float _2899 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
    float _5021 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    float _2900 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
    float _2901 = dot(vec3(_1160, _1161, _1162), vec3(_2893, _2894, _2895));
    float _5032 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
    float _2904 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
    float _2905 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2893, _2894, _2895));
    float _5043 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
    float _2909 = _2885 * _2885;
    float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
    float _2921 = exp2(log2(1.0 - (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0)))) * 5.0);
    float _2922 = 0.959999978542327880859375 - _1306;
    float _2924 = 0.959999978542327880859375 - _1307;
    float _2925 = 0.959999978542327880859375 - _1308;
    float _2932 = 1.0 - _2885;
    float _2943 = (0.5 / (((_2900 * ((_2899 * _2932) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _2932) + _2885) * _2899))) * _2899;
    float _5054 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
    float _2945 = (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
    uint _2959 = _2624 + 9u;
    float _2970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2664].w)) * _1163) * 0.949999988079071044921875);
    float _2971 = _2970 * _2970;
    float _2972 = cbLight._m0[_2664].x + _1239;
    float _2973 = cbLight._m0[_2664].y + _1240;
    float _2974 = cbLight._m0[_2664].z + _1241;
    float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
    float _2979 = _2978 * _2972;
    float _2980 = _2978 * _2973;
    float _2981 = _2978 * _2974;
    float _2982 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_2664].xyz));
    float _5065 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
    float _2985 = isnan(1.0) ? _5065 : (isnan(_5065) ? 1.0 : min(_5065, 1.0));
    float _2986 = dot(vec3(_1160, _1161, _1162), vec3(_2979, _2980, _2981));
    float _5076 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
    float _2989 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
    float _2990 = dot(vec3(cbLight._m0[_2664].xyz), vec3(_2979, _2980, _2981));
    float _5087 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
    float _2994 = _2971 * _2971;
    float _2998 = ((_2989 * _2989) * (_2994 + (-1.0))) + 1.0;
    float _3005 = exp2(log2(1.0 - (isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0)))) * 5.0);
    float _3012 = 1.0 - _2971;
    float _3022 = (0.5 / (((_2900 * ((_2985 * _3012) + _2971)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _3012) + _2971) * _2985))) * _2985;
    float _5098 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
    float _3024 = (isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_2994 / ((_2998 * _2998) * 3.141590118408203125));
    float _3034 = (((((_3005 * _2922) + _1309) * cbLight._m0[_2959].x) * _3024) * _2647) + ((((cbLight._m0[_2871].x * _2613) * ((_2921 * _2922) + _1309)) * _2945) * _2660);
    float _3035 = (((((_3005 * _2924) + _1311) * cbLight._m0[_2959].y) * _3024) * _2647) + ((((cbLight._m0[_2871].y * _2615) * ((_2921 * _2924) + _1311)) * _2945) * _2660);
    float _3036 = (((((_3005 * _2925) + _1312) * cbLight._m0[_2959].z) * _3024) * _2647) + ((((cbLight._m0[_2871].z * _2617) * ((_2921 * _2925) + _1312)) * _2945) * _2660);
    float _3092;
    float _3094;
    float _3096;
    if (_2700)
    {
        _3092 = _3034;
        _3094 = _3035;
        _3096 = _3036;
    }
    else
    {
        uint _3098 = _2624 + 2u;
        uint _3102 = _2624 + 10u;
        float _3116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3098].w)) * _1163) * 0.949999988079071044921875);
        float _3117 = _3116 * _3116;
        float _3118 = cbLight._m0[_3098].x + _1239;
        float _3119 = cbLight._m0[_3098].y + _1240;
        float _3120 = cbLight._m0[_3098].z + _1241;
        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
        float _3125 = _3124 * _3118;
        float _3126 = _3124 * _3119;
        float _3127 = _3124 * _3120;
        float _3128 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_3098].xyz));
        float _5109 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
        float _3131 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
        float _3132 = dot(vec3(_1160, _1161, _1162), vec3(_3125, _3126, _3127));
        float _5120 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
        float _3135 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
        float _3136 = dot(vec3(cbLight._m0[_3098].xyz), vec3(_3125, _3126, _3127));
        float _5131 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
        float _3140 = _3117 * _3117;
        float _3144 = ((_3135 * _3135) * (_3140 + (-1.0))) + 1.0;
        float _3151 = exp2(log2(1.0 - (isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0)))) * 5.0);
        float _3158 = 1.0 - _3117;
        float _3168 = (0.5 / (((_2900 * ((_3131 * _3158) + _3117)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _3158) + _3117) * _3131))) * _3131;
        float _5142 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        float _3170 = (isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0))) * (_3140 / ((_3144 * _3144) * 3.141590118408203125));
        float _3171 = isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0));
        _3092 = (((((_3151 * _2922) + _1309) * cbLight._m0[_3102].x) * _3170) * _3171) + _3034;
        _3094 = (((((_3151 * _2924) + _1311) * cbLight._m0[_3102].y) * _3170) * _3171) + _3035;
        _3096 = (((((_3151 * _2925) + _1312) * cbLight._m0[_3102].z) * _3170) * _3171) + _3036;
    }
    float _3202;
    float _3204;
    float _3206;
    if (_2809)
    {
        _3202 = _3092;
        _3204 = _3094;
        _3206 = _3096;
    }
    else
    {
        uint _3213 = _2624 + 3u;
        uint _3217 = _2624 + 11u;
        float _3231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3213].w)) * _1163) * 0.949999988079071044921875);
        float _3232 = _3231 * _3231;
        float _3233 = cbLight._m0[_3213].x + _1239;
        float _3234 = cbLight._m0[_3213].y + _1240;
        float _3235 = cbLight._m0[_3213].z + _1241;
        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
        float _3240 = _3239 * _3233;
        float _3241 = _3239 * _3234;
        float _3242 = _3239 * _3235;
        float _3243 = dot(vec3(_1160, _1161, _1162), vec3(cbLight._m0[_3213].xyz));
        float _5158 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
        float _3246 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
        float _3247 = dot(vec3(_1160, _1161, _1162), vec3(_3240, _3241, _3242));
        float _5169 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
        float _3250 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
        float _3251 = dot(vec3(cbLight._m0[_3213].xyz), vec3(_3240, _3241, _3242));
        float _5180 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
        float _3255 = _3232 * _3232;
        float _3259 = ((_3250 * _3250) * (_3255 + (-1.0))) + 1.0;
        float _3266 = exp2(log2(1.0 - (isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0)))) * 5.0);
        float _3273 = 1.0 - _3232;
        float _3283 = (0.5 / (((_2900 * ((_3246 * _3273) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_2900 * _3273) + _3232) * _3246))) * _3246;
        float _5191 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
        float _3285 = (isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0))) * (_3255 / ((_3259 * _3259) * 3.141590118408203125));
        float _3286 = isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0));
        _3202 = (((((_3266 * _2922) + _1309) * cbLight._m0[_3217].x) * _3285) * _3286) + _3092;
        _3204 = (((((_3266 * _2924) + _1311) * cbLight._m0[_3217].y) * _3285) * _3286) + _3094;
        _3206 = (((((_3266 * _2925) + _1312) * cbLight._m0[_3217].z) * _3285) * _3286) + _3096;
    }
    float _3352;
    float _3354;
    float _3356;
    float _3358;
    float _3360;
    float _3362;
    if (_2622.y == 0u)
    {
        uvec4 _3307 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3308 = _3307.x;
        uint _3319 = uint((float(_3307.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1248) / _3308))) + floor(float(uint(cbSceneParam._m0[85u].x * _1247) / _3308)));
        float _3329 = (log2(_2400 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3330 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
        uint _3333 = uint(isnan(14.0) ? _3330 : (isnan(_3330) ? 14.0 : min(_3330, 14.0)));
        uvec4 _3338 = texelFetch(g_lightClusterGridBuffer, int(((_3333 << 2u) + (_3319 << 6u)) >> 2u));
        uint _3339 = _3338.x;
        uint _3340 = _3307.z;
        float _3419;
        float _3421;
        float _3423;
        float _3425;
        float _3427;
        float _3429;
        if (((((1u << ((_3340 >> 4u) & 15u)) + 4294967295u) & _3339) == 0u) || ((_3340 & 240u) == 0u))
        {
            _3419 = 0.0;
            _3421 = 0.0;
            _3423 = 0.0;
            _3425 = 0.0;
            _3427 = 0.0;
            _3429 = 0.0;
        }
        else
        {
            float _3420;
            float _3422;
            float _3424;
            float _3426;
            float _3428;
            float _3430;
            float _3563 = 0.0;
            float _3564 = 0.0;
            float _3565 = 0.0;
            float _3566 = 0.0;
            float _3567 = 0.0;
            float _3568 = 0.0;
            uint _3569 = 0u;
            uint _3578;
            bool _3579;
            for (;;)
            {
                _3578 = texelFetch(g_lightClassification, int((((_3333 << 5u) + (_3319 << 9u)) + (_3569 << 2u)) >> 2u)).x;
                _3579 = _3578 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3579)
                {
                    frontier_phi_66_pred = _3568;
                    frontier_phi_66_pred_1 = _3567;
                    frontier_phi_66_pred_2 = _3566;
                    frontier_phi_66_pred_3 = _3565;
                    frontier_phi_66_pred_4 = _3564;
                    frontier_phi_66_pred_5 = _3563;
                }
                else
                {
                    float _3687;
                    float _3688;
                    float _3689;
                    float _3690;
                    float _3691;
                    float _3692;
                    uint _3693;
                    _3687 = _3563;
                    _3688 = _3564;
                    _3689 = _3565;
                    _3690 = _3566;
                    _3691 = _3567;
                    _3692 = _3568;
                    _3693 = _3578;
                    float _3619;
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    float _3624;
                    for (;;)
                    {
                        uint _3697 = uint(findLSB(_3693)) + (_3569 << 5u);
                        uint _3694 = (_3693 + 4294967295u) & _3693;
                        uint _3699 = _3697 * 48u;
                        vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3699)).x, texelFetch(g_PointLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3699 + 3u)).x));
                        uint _3719 = (_3697 * 48u) + 4u;
                        vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3719)).x, texelFetch(g_PointLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3719 + 3u)).x));
                        uint _3738 = (_3697 * 48u) + 8u;
                        vec3 _3749 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3738)).x, texelFetch(g_PointLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3738 + 2u)).x));
                        float _3753 = _3713.x - _2398;
                        float _3754 = _3713.y - _2399;
                        float _3755 = _3713.z - _2400;
                        float _3756 = dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755));
                        float _3759 = inversesqrt(_3756);
                        float _3760 = _3759 * _3753;
                        float _3761 = _3759 * _3754;
                        float _3762 = _3759 * _3755;
                        float _3763 = dot(vec3(_1266, _1269, _1272), vec3(_3760, _3761, _3762));
                        float _3768 = 1.0 - (_3756 * _3713.w);
                        float _5217 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                        float _3769 = isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0));
                        float _3770 = sqrt(_3756) * _3732.w;
                        float _3773 = 1.39999997615814208984375 / (_3770 + 1.39999997615814208984375);
                        float _3774 = _3773 * _3773;
                        float _3777 = ((1.0 - _3774) * _3763) + _3774;
                        float _3780 = _3770 * _3770;
                        float _3784 = ((isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0))) * _3769) / ((_3780 * 0.699999988079071044921875) + 1.0);
                        float _3788 = (-0.0) - _2398;
                        float _3789 = (-0.0) - _2399;
                        float _3790 = (-0.0) - _2400;
                        float _3794 = inversesqrt(dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790)));
                        float _3795 = _3794 * _3788;
                        float _3796 = _3794 * _3789;
                        float _3797 = _3794 * _3790;
                        float _3804 = exp2(log2(1.0 / ((_3780 * 3.5) + 5.0)) * 0.25);
                        float _3805 = 1.0 - _1341;
                        float _3812 = sqrt(1.0 - ((1.0 - (_3805 * _3805)) * (1.0 - (_3804 * _3804))));
                        float _3813 = _3812 * _3812;
                        float _3814 = _3813 * _3813;
                        float _3815 = _3795 + _3760;
                        float _3816 = _3796 + _3761;
                        float _3817 = _3797 + _3762;
                        float _3821 = inversesqrt(dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817)));
                        float _3825 = dot(vec3(_1266, _1269, _1272), vec3(_3795, _3796, _3797));
                        float _5233 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                        float _3828 = isnan(1.0) ? _5233 : (isnan(_5233) ? 1.0 : min(_5233, 1.0));
                        float _3829 = dot(vec3(_1266, _1269, _1272), vec3(_3821 * _3815, _3821 * _3816, _3821 * _3817));
                        float _5244 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                        float _3832 = isnan(1.0) ? _5244 : (isnan(_5244) ? 1.0 : min(_5244, 1.0));
                        float _3836 = ((_3832 * _3832) * (_3814 + (-1.0))) + 1.0;
                        float _3837 = _3773 * _3813;
                        float _3838 = _3837 * _3837;
                        float _3841 = ((1.0 - _3838) * _3763) + _3838;
                        float _5255 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                        float _3842 = isnan(1.0) ? _5255 : (isnan(_5255) ? 1.0 : min(_5255, 1.0));
                        float _3843 = 1.0 - _3813;
                        float _3853 = (0.5 / (((_3842 * ((_3828 * _3843) + _3813)) + 9.9999999392252902907785028219223e-09) + (((_3842 * _3843) + _3813) * _3828))) * _3842;
                        float _5266 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                        float _3864 = (((_3814 * 3.1415927410125732421875) * (isnan(1.0) ? _5266 : (isnan(_5266) ? 1.0 : min(_5266, 1.0)))) / ((_3836 * _3836) * ((_3780 * 2.1991131305694580078125) + 3.141590118408203125))) * _3769;
                        _3622 = (_3784 * _3732.x) + _3690;
                        _3623 = (_3784 * _3732.y) + _3691;
                        _3624 = (_3784 * _3732.z) + _3692;
                        _3619 = (_3864 * _3749.x) + _3687;
                        _3620 = (_3864 * _3749.y) + _3688;
                        _3621 = (_3864 * _3749.z) + _3689;
                        if (_3694 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3687 = _3619;
                            _3688 = _3620;
                            _3689 = _3621;
                            _3690 = _3622;
                            _3691 = _3623;
                            _3692 = _3624;
                            _3693 = _3694;
                        }
                    }
                    frontier_phi_66_pred = _3624;
                    frontier_phi_66_pred_1 = _3623;
                    frontier_phi_66_pred_2 = _3622;
                    frontier_phi_66_pred_3 = _3621;
                    frontier_phi_66_pred_4 = _3620;
                    frontier_phi_66_pred_5 = _3619;
                }
                _3430 = frontier_phi_66_pred;
                _3428 = frontier_phi_66_pred_1;
                _3426 = frontier_phi_66_pred_2;
                _3424 = frontier_phi_66_pred_3;
                _3422 = frontier_phi_66_pred_4;
                _3420 = frontier_phi_66_pred_5;
                uint _3570 = _3569 + 1u;
                if (_3570 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3563 = _3420;
                    _3564 = _3422;
                    _3565 = _3424;
                    _3566 = _3426;
                    _3567 = _3428;
                    _3568 = _3430;
                    _3569 = _3570;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3419 = _3420;
            _3421 = _3422;
            _3423 = _3424;
            _3425 = _3426;
            _3427 = _3428;
            _3429 = _3430;
        }
        uvec4 _3433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3434 = _3433.z;
        uint _3436 = (_3434 >> 8u) & 15u;
        float _3531;
        float _3533;
        float _3535;
        float _3537;
        float _3539;
        float _3541;
        if (((4294967295u << _3436) & _3339) == 0u)
        {
            _3531 = _3419;
            _3533 = _3421;
            _3535 = _3423;
            _3537 = _3425;
            _3539 = _3427;
            _3541 = _3429;
        }
        else
        {
            float _3556 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
            float _3557 = _3556 * _2398;
            float _3558 = _3556 * _2399;
            float _3559 = _3556 * _2400;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3436 < ((_3434 >> 12u) & 15u))
            {
                float _3532;
                float _3534;
                float _3536;
                float _3538;
                float _3540;
                float _3542;
                float _3670 = _3419;
                float _3671 = _3421;
                float _3672 = _3423;
                float _3673 = _3425;
                float _3674 = _3427;
                float _3675 = _3429;
                uint _3676 = _3436;
                uint _3685;
                bool _3686;
                for (;;)
                {
                    _3685 = texelFetch(g_lightClassification, int((((_3333 << 5u) + (_3319 << 9u)) + (_3676 << 2u)) >> 2u)).x;
                    _3686 = _3685 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3686)
                    {
                        frontier_phi_72_pred = _3675;
                        frontier_phi_72_pred_1 = _3674;
                        frontier_phi_72_pred_2 = _3673;
                        frontier_phi_72_pred_3 = _3672;
                        frontier_phi_72_pred_4 = _3671;
                        frontier_phi_72_pred_5 = _3670;
                    }
                    else
                    {
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _4162;
                        float _4163;
                        float _4164;
                        float _4165;
                        float _4166;
                        float _4167;
                        float _3882 = _3670;
                        float _3883 = _3671;
                        float _3884 = _3672;
                        float _3885 = _3673;
                        float _3886 = _3674;
                        float _3887 = _3675;
                        uint _3888 = _3685;
                        uint _3889;
                        vec4 _3914;
                        float _3915;
                        vec4 _3930;
                        vec3 _3942;
                        vec4 _3957;
                        vec4 _3972;
                        float _4018;
                        bool _4019;
                        for (;;)
                        {
                            uint _3899 = ((_3676 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3888));
                            _3889 = (_3888 + 4294967295u) & _3888;
                            uint _3901 = _3899 * 40u;
                            _3914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3901 + 3u)).x));
                            _3915 = _3914.w;
                            uint _3917 = (_3899 * 40u) + 4u;
                            _3930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 3u)).x));
                            uint _3932 = (_3899 * 40u) + 8u;
                            _3942 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 2u)).x));
                            uint _3944 = (_3899 * 40u) + 16u;
                            _3957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 3u)).x));
                            uint _3959 = (_3899 * 40u) + 20u;
                            _3972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3959 + 3u)).x));
                            uint _3974 = (_3899 * 40u) + 24u;
                            vec4 _3987 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3974)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3974 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3974 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3974 + 3u)).x));
                            uint _3993 = (_3899 * 40u) + 28u;
                            vec4 _4006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3993 + 3u)).x));
                            _4018 = fma(_2400, _4006.z, fma(_2399, _4006.y, _4006.x * _2398)) + _4006.w;
                            _4019 = !((fma(_2400, _3987.z, fma(_2399, _3987.y, _3987.x * _2398)) + _3987.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_4019)
                            {
                                float _4046 = _3914.x - _2398;
                                float _4047 = _3914.y - _2399;
                                float _4048 = _3914.z - _2400;
                                float _4049 = dot(vec3(_4046, _4047, _4048), vec3(_4046, _4047, _4048));
                                float _4052 = inversesqrt(_4049);
                                float _4053 = _4052 * _4046;
                                float _4054 = _4052 * _4047;
                                float _4055 = _4052 * _4048;
                                float _4059 = 1.0 - (_4049 / (_3915 * _3915));
                                float _5277 = isnan(0.0) ? _4059 : (isnan(_4059) ? 0.0 : max(_4059, 0.0));
                                float _4060 = isnan(1.0) ? _5277 : (isnan(_5277) ? 1.0 : min(_5277, 1.0));
                                float _4064 = sqrt(_4049) * _3930.w;
                                float _4066 = 1.39999997615814208984375 / (_4064 + 1.39999997615814208984375);
                                float _4067 = _4066 * _4066;
                                float _4070 = ((1.0 - _4067) * dot(vec3(_4053, _4054, _4055), vec3(_1266, _1269, _1272))) + _4067;
                                float _4073 = _4064 * _4064;
                                float _4077 = (fma(_2400, _3957.z, fma(_2399, _3957.y, _3957.x * _2398)) + _3957.w) / _4018;
                                float _4078 = (fma(_2400, _3972.z, fma(_2399, _3972.y, _3972.x * _2398)) + _3972.w) / _4018;
                                float _4082 = 1.0 - dot(vec2(_4077, _4078), vec2(_4077, _4078));
                                float _5293 = isnan(0.0) ? _4082 : (isnan(_4082) ? 0.0 : max(_4082, 0.0));
                                float _4083 = isnan(1.0) ? _5293 : (isnan(_5293) ? 1.0 : min(_5293, 1.0));
                                float _4084 = _4083 * (((isnan(0.0) ? _4070 : (isnan(_4070) ? 0.0 : max(_4070, 0.0))) * _4060) / ((_4073 * 0.699999988079071044921875) + 1.0));
                                float _4096 = exp2(log2(1.0 / ((_4073 * 3.5) + 5.0)) * 0.25);
                                float _4097 = 1.0 - _1341;
                                float _4104 = sqrt(1.0 - ((1.0 - (_4097 * _4097)) * (1.0 - (_4096 * _4096))));
                                float _4105 = _4104 * _4104;
                                float _4106 = _4105 * _4105;
                                float _4107 = _4053 - _3557;
                                float _4108 = _4054 - _3558;
                                float _4109 = _4055 - _3559;
                                float _4113 = inversesqrt(dot(vec3(_4107, _4108, _4109), vec3(_4107, _4108, _4109)));
                                float _4117 = dot(vec3(_1266, _1269, _1272), vec3((-0.0) - _3557, (-0.0) - _3558, (-0.0) - _3559));
                                float _5304 = isnan(0.0) ? _4117 : (isnan(_4117) ? 0.0 : max(_4117, 0.0));
                                float _4120 = isnan(1.0) ? _5304 : (isnan(_5304) ? 1.0 : min(_5304, 1.0));
                                float _4121 = dot(vec3(_1266, _1269, _1272), vec3(_4113 * _4107, _4113 * _4108, _4113 * _4109));
                                float _5315 = isnan(0.0) ? _4121 : (isnan(_4121) ? 0.0 : max(_4121, 0.0));
                                float _4124 = isnan(1.0) ? _5315 : (isnan(_5315) ? 1.0 : min(_5315, 1.0));
                                float _4128 = ((_4124 * _4124) * (_4106 + (-1.0))) + 1.0;
                                float _4129 = _4066 * _4105;
                                float _4130 = _4129 * _4129;
                                float _4136 = ((1.0 - _4130) * dot(vec3(_1266, _1269, _1272), vec3(_4053, _4054, _4055))) + _4130;
                                float _5326 = isnan(0.0) ? _4136 : (isnan(_4136) ? 0.0 : max(_4136, 0.0));
                                float _4137 = isnan(1.0) ? _5326 : (isnan(_5326) ? 1.0 : min(_5326, 1.0));
                                float _4138 = 1.0 - _4105;
                                float _4148 = (0.5 / (((_4137 * ((_4120 * _4138) + _4105)) + 9.9999999392252902907785028219223e-09) + (((_4137 * _4138) + _4105) * _4120))) * _4137;
                                float _5337 = isnan(0.0) ? _4148 : (isnan(_4148) ? 0.0 : max(_4148, 0.0));
                                float _4158 = (_4083 * _4060) * (((_4106 * 3.1415927410125732421875) * (isnan(1.0) ? _5337 : (isnan(_5337) ? 1.0 : min(_5337, 1.0)))) / ((_4128 * _4128) * ((_4073 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4084 * _3930.y;
                                frontier_phi_78_pred_1 = _4084 * _3930.x;
                                frontier_phi_78_pred_2 = _4158 * _3942.z;
                                frontier_phi_78_pred_3 = _4158 * _3942.y;
                                frontier_phi_78_pred_4 = _4158 * _3942.x;
                                frontier_phi_78_pred_5 = _4084 * _3930.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4166 = frontier_phi_78_pred;
                            _4165 = frontier_phi_78_pred_1;
                            _4164 = frontier_phi_78_pred_2;
                            _4163 = frontier_phi_78_pred_3;
                            _4162 = frontier_phi_78_pred_4;
                            _4167 = frontier_phi_78_pred_5;
                            _3872 = _4165 + _3885;
                            _3873 = _4166 + _3886;
                            _3874 = _4167 + _3887;
                            _3869 = _4162 + _3882;
                            _3870 = _4163 + _3883;
                            _3871 = _4164 + _3884;
                            if (_3889 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3882 = _3869;
                                _3883 = _3870;
                                _3884 = _3871;
                                _3885 = _3872;
                                _3886 = _3873;
                                _3887 = _3874;
                                _3888 = _3889;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3874;
                        frontier_phi_72_pred_1 = _3873;
                        frontier_phi_72_pred_2 = _3872;
                        frontier_phi_72_pred_3 = _3871;
                        frontier_phi_72_pred_4 = _3870;
                        frontier_phi_72_pred_5 = _3869;
                    }
                    _3542 = frontier_phi_72_pred;
                    _3540 = frontier_phi_72_pred_1;
                    _3538 = frontier_phi_72_pred_2;
                    _3536 = frontier_phi_72_pred_3;
                    _3534 = frontier_phi_72_pred_4;
                    _3532 = frontier_phi_72_pred_5;
                    uint _3677 = _3676 + 1u;
                    if (_3677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3670 = _3532;
                        _3671 = _3534;
                        _3672 = _3536;
                        _3673 = _3538;
                        _3674 = _3540;
                        _3675 = _3542;
                        _3676 = _3677;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3542;
                frontier_phi_60_61_ladder_1 = _3540;
                frontier_phi_60_61_ladder_2 = _3536;
                frontier_phi_60_61_ladder_3 = _3534;
                frontier_phi_60_61_ladder_4 = _3532;
                frontier_phi_60_61_ladder_5 = _3538;
            }
            else
            {
                frontier_phi_60_61_ladder = _3429;
                frontier_phi_60_61_ladder_1 = _3427;
                frontier_phi_60_61_ladder_2 = _3423;
                frontier_phi_60_61_ladder_3 = _3421;
                frontier_phi_60_61_ladder_4 = _3419;
                frontier_phi_60_61_ladder_5 = _3425;
            }
            _3531 = frontier_phi_60_61_ladder_4;
            _3533 = frontier_phi_60_61_ladder_3;
            _3535 = frontier_phi_60_61_ladder_2;
            _3537 = frontier_phi_60_61_ladder_5;
            _3539 = frontier_phi_60_61_ladder_1;
            _3541 = frontier_phi_60_61_ladder;
        }
        float _3546 = isnan(1.0) ? _1325 : (isnan(_1325) ? 1.0 : min(_1325, 1.0));
        _3352 = (_3546 * _3537) + _2864;
        _3354 = (_3546 * _3539) + _2866;
        _3356 = (_3546 * _3541) + _2868;
        _3358 = ((_3531 * _1309) * _3546) + _3202;
        _3360 = ((_3533 * _1311) * _3546) + _3204;
        _3362 = ((_3535 * _1312) * _3546) + _3206;
    }
    else
    {
        _3352 = _2864;
        _3354 = _2866;
        _3356 = _2868;
        _3358 = _3202;
        _3360 = _3204;
        _3362 = _3206;
    }
    float _5353 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    float _5364 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _5375 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    uint _3382 = _299 + 6u;
    float _3390 = _1247 / cbSceneParam._m0[86u].x;
    float _3391 = _1248 / cbSceneParam._m0[86u].y;
    vec4 _3405 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3390, _3391, (log2((isnan(cbSceneParam._m0[77u].w) ? _1182 : (isnan(_1182) ? cbSceneParam._m0[77u].w : min(_1182, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3407 = _3405.x;
    float _3408 = _3405.y;
    float _3409 = _3405.z;
    float _3410 = _3405.w;
    float _3481;
    float _3483;
    float _3485;
    float _3487;
    if (_1182 > cbSceneParam._m0[78u].w)
    {
        float _3444 = isnan(_1182) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1182 : min(cbSceneParam._m0[80u].w, _1182));
        float _3445 = _3444 / _1182;
        float _3456 = _3445 * _1232;
        float _3457 = _1233 * _3445;
        float _3458 = (-0.0) - _3457;
        float _3459 = _3445 * _1234;
        float _3461 = (cbSceneParam._m0[77u].w * _3458) / _3444;
        float _3462 = _3461 + cbSceneParam._m0[79u].w;
        float _3463 = cbSceneParam._m0[79u].w - _3457;
        float _3469 = sqrt(((_3456 * _3456) + (_3457 * _3457)) + (_3459 * _3459));
        float _3472 = (1.0 - (cbSceneParam._m0[77u].w / _3444)) * _3469;
        float _3477 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3479 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3632;
        if (abs((_3458 - _3461) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3632 = ((((_3462 > 0.0) ? exp2(_3477 * _3462) : (2.0 - exp2(_3479 * _3462))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3472;
        }
        else
        {
            float _3592 = 1.0 / cbSceneParam._m0[80u].x;
            float _3593 = isnan(_3463) ? _3462 : (isnan(_3462) ? _3463 : max(_3462, _3463));
            float _3594 = isnan(_3463) ? _3462 : (isnan(_3462) ? _3463 : min(_3462, _3463));
            float _3603 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : min(_3593, 0.0));
            float _3604 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : min(_3594, 0.0));
            _3632 = ((abs(_3469 / _3458) * cbSceneParam._m0[80u].y) * ((((_3603 - _3604) * 2.0) - ((exp2(_3477 * (isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0)))) - exp2(_3477 * (isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))))) * _3592)) - ((exp2(_3479 * _3603) - exp2(_3479 * _3604)) * _3592))) + (_3472 * cbSceneParam._m0[80u].z);
        }
        vec4 _3634 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3390, _3391, 1.0), 0.0);
        float _3643 = exp2((_3632 * (-1.44269502162933349609375)) * (1.0 - _3634.w));
        float _3644 = log2(_3643);
        float _3660 = log2(_3410);
        _3481 = (exp2(_3660 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3644 * cbSceneParam._m0[78u].x)) * _3634.x) / cbSceneParam._m0[78u].x)) + _3407;
        _3483 = (exp2(_3660 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3644 * cbSceneParam._m0[78u].y)) * _3634.y) / cbSceneParam._m0[78u].y)) + _3408;
        _3485 = (exp2(_3660 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3644 * cbSceneParam._m0[78u].z)) * _3634.z) / cbSceneParam._m0[78u].z)) + _3409;
        _3487 = _3643 * _3410;
    }
    else
    {
        _3481 = _3407;
        _3483 = _3408;
        _3485 = _3409;
        _3487 = _3410;
    }
    float _3499 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3500 = _3499 == 3.0;
    float _3501 = log2(_3487);
    float _3508 = exp2(_3501 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5353 : (isnan(_5353) ? 1.0 : min(_5353, 1.0))) * (_3352 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1325))) + ((_3358 + ((isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0))) * _2131)) * cbPerFrame._m0[3u].x));
    float _3509 = exp2(_3501 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5364 : (isnan(_5364) ? 1.0 : min(_5364, 1.0))) * (_3354 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1325))) + ((_3360 + ((isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0))) * _2131)) * cbPerFrame._m0[3u].x));
    float _3510 = exp2(_3501 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5375 : (isnan(_5375) ? 1.0 : min(_5375, 1.0))) * (_3356 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1325))) + ((_3362 + ((isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0))) * _2131)) * cbPerFrame._m0[3u].x));
    float _3519 = (_3499 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3519 * (_3500 ? _3508 : (_3508 + (cbSceneParam._m0[72u].w * _3481)));
    SV_Target.y = _3519 * (_3500 ? _3509 : (_3509 + (cbSceneParam._m0[72u].w * _3483)));
    SV_Target.z = _3519 * (_3500 ? _3510 : (_3510 + (cbSceneParam._m0[72u].w * _3485)));
    SV_Target.w = cbInstanceData._m0[_3382].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3382].w;
}


