#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1262;
float _3929;
float _3930;
float _3931;
float _3932;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3941 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3952 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3963 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _430 = _428.x;
    float _442 = dot(vec4(_430, _428.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _459 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_430 - _442) * cbMtdParam._m0[23u].w) + _442) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3974 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _470 = (_328.x * cbMtdParam._m0[9u].x) * ((_460 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359);
    float _471 = (_328.y * cbMtdParam._m0[9u].y) * ((_460 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360);
    float _472 = (_328.z * cbMtdParam._m0[9u].z) * ((_460 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361);
    float _476 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _470;
    float _479 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _471;
    float _482 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _472;
    float _490 = (((_470 - _476) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) + _476) * 4.55000019073486328125;
    float _492 = (((_471 - _479) * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) + _479) * 4.55000019073486328125;
    float _494 = (((_472 - _482) * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) + _482) * 4.55000019073486328125;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _562 = ((_532.z - _553) * _460) + _553;
    float _565 = ((((_532.x - _551) * _460) + _551) * 2.0) + (-1.0);
    float _566 = ((((_532.y - _552) * _460) + _552) * 2.0) + (-1.0);
    float _567 = dot(vec2(_565, _566), vec2(_565, _566));
    float _3985 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _572 = sqrt(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _606 = (_565 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_507.x * 2.0) + (-1.0)))) + (((_594.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _607 = (_566 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_507.y * 2.0) + (-1.0)))) + (((_594.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _635 = _633.x;
    float _652 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _635) * _460) + _635;
    float _656 = ((_619.x - _652) * cbMtdParam._m0[19u].z) + _652;
    float _661 = (((_507.z - _562) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _562;
    float _665 = ((_594.z - _661) * cbMtdParam._m0[19u].w) + _661;
    float _667 = cbMtdParam._m0[22u].x + _594.w;
    float _670 = fma(_572, _238 * NORMAL.x, fma(_607, _245 * TANGENT.x, (_231 * _223) * _606));
    float _673 = fma(_572, _238 * NORMAL.y, fma(_607, _245 * TANGENT.y, (_231 * _224) * _606));
    float _676 = fma(_572, _238 * NORMAL.z, fma(_607, _245 * TANGENT.z, (_231 * _225) * _606));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _3996 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _684 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _4018 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _4029 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4040 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _4051 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _689 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    vec4 _768 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _770 = _768.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _942 = sqrt(((_754 * _754) + (_755 * _755)) + (_756 * _756));
        float _948 = (cbMatDynParam._m0[5u].x * _942) + cbMatDynParam._m0[5u].y;
        float _4062 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _953 = (cbMatDynParam._m0[5u].z * _942) + cbMatDynParam._m0[5u].w;
        float _4073 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) - _949)) + _949) < ((_770 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _800 = fma(_683, cbSceneParam._m0[5u].z, fma(_682, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _681));
    float _803 = fma(_683, cbSceneParam._m0[6u].z, fma(_682, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _681));
    float _806 = fma(_683, cbSceneParam._m0[7u].z, fma(_682, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _681));
    uint _819 = _272 + 9u;
    uint _820 = _819 + uint(cbMatDynParam._m0[0u].w);
    float _826 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * cbInstanceData._m0[_820].x;
    float _827 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_820].y;
    float _828 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_820].z;
    float _4084 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _832 = 1.0 - _689;
    float _833 = _829 * _832;
    float _834 = _830 * _832;
    float _835 = _831 * _832;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _689;
    float _841 = (_830 + (-0.039999999105930328369140625)) * _689;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _689;
    float _843 = _840 + 0.039999999105930328369140625;
    float _845 = _841 + 0.039999999105930328369140625;
    float _846 = _842 + 0.039999999105930328369140625;
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _859 = ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * TEXCOORD_5.w) * _855.x;
    float _860 = dot(vec3(_681, _682, _683), vec3(_761, _762, _763));
    float _863 = _860 * 2.0;
    float _867 = (_863 * _681) - _761;
    float _868 = (_863 * _682) - _762;
    float _869 = (_863 * _683) - _763;
    float _873 = abs(dot(vec3(_761, _762, _763), vec3(_681, _682, _683)));
    float _4117 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _875 = sqrt(_684);
    float _888 = exp2((_875 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _894 = (1.0 - _888) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _895 = _888 * _875;
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _986 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _990 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _994 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _1019 = _923 + _681;
        float _1020 = _927 + _682;
        float _1021 = _931 + _683;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _986;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _990;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _994;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_986 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_990 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_994 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_681, _682, _683), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4165 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_681, _682, _683), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4198 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_681, _682, _683), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4231 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1308 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1312 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1335 = _923 + _681;
        float _1336 = _927 + _682;
        float _1337 = _931 + _683;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_681, _682, _683), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4294 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_681, _682, _683), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4327 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_681, _682, _683), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4360 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1262;
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = _1262;
        _1583 = _1262;
        _1584 = _1262;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1274)) + _1274;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1275)) + _1275;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _867 * 0.5;
    float _1642 = _868 * 0.5;
    float _1643 = _869 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _684);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_869, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _867));
        float _1773 = fma(_869, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _867));
        float _1776 = fma(_869, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _867));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1804 = frontier_phi_17_15_ladder;
        }
        float _1977;
        if (_1773 > 0.0)
        {
            _1977 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1977 = frontier_phi_26_22_ladder;
        }
        float _2272;
        if (_1776 > 0.0)
        {
            _2272 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2272 = frontier_phi_38_33_ladder;
        }
        float _2274 = isnan(_1977) ? _1804 : (isnan(_1804) ? _1977 : min(_1804, _1977));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1770) + _1759;
        float _2280 = (_2275 * _1773) + _1763;
        float _2281 = (_2275 * _1776) + _1767;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2284 = (-1.0) - _2282;
        float _2286 = _2282 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2281 > _2286) || ((_2281 < _2284) || ((_2280 > _2286) || ((_2280 < _2284) || ((_2279 < _2284) || (_2279 > _2286))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2281, cbModelParam._m0[9u].z, fma(_2280, cbModelParam._m0[9u].y, _2279 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2281, cbModelParam._m0[10u].z, fma(_2280, cbModelParam._m0[10u].y, _2279 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2281, cbModelParam._m0[11u].z, fma(_2280, cbModelParam._m0[11u].y, _2279 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_16_38_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_16_38_ladder_2;
        _1794 = frontier_phi_16_38_ladder_1;
        _1796 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_867, _868, _869), _1710);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _684);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_869, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _867));
        float _1870 = fma(_869, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _867));
        float _1873 = fma(_869, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _867));
        float _1982;
        if (_1867 > 0.0)
        {
            _1982 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1982 = frontier_phi_28_24_ladder;
        }
        float _2299;
        if (_1870 > 0.0)
        {
            _2299 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2299 = frontier_phi_40_35_ladder;
        }
        float _2637;
        if (_1873 > 0.0)
        {
            _2637 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2637 = frontier_phi_50_47_ladder;
        }
        float _2639 = isnan(_2299) ? _1982 : (isnan(_1982) ? _2299 : min(_1982, _2299));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _1867) + _1856;
        float _2645 = (_2640 * _1870) + _1860;
        float _2646 = (_2640 * _1873) + _1864;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2647;
        float _2650 = _2647 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2646 > _2650) || ((_2646 < _2648) || ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 < _2648) || (_2644 > _2650))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2646, cbModelParam._m0[17u].z, fma(_2645, cbModelParam._m0[17u].y, _2644 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2646, cbModelParam._m0[18u].z, fma(_2645, cbModelParam._m0[18u].y, _2644 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2646, cbModelParam._m0[19u].z, fma(_2645, cbModelParam._m0[19u].y, _2644 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_25_50_ladder = _2768.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2768.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2768.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_25_50_ladder_2;
        _1894 = frontier_phi_25_50_ladder_1;
        _1896 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_867, _868, _869), _1801);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1909 = (((_894 * _843) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1892 - _1792)) + _1792);
    float _1911 = (((_894 * _845) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1894 - _1794)) + _1794);
    float _1913 = (((_894 * _846) + _895) * _859) * ((cbModelParam._m0[1u].w * (_1896 - _1796)) + _1796);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1911, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1911, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1911, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1969 = _1956 / _1968;
    float _1970 = _1960 / _1968;
    float _1971 = _1964 / _1968;
    float _2118;
    float _2119;
    float _2120;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1998 = ((uint(_1971 > cbSceneParam._m0[59u].y) + uint(_1971 > cbSceneParam._m0[59u].x)) + uint(_1971 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1999 = _1998 + 43u;
        uint _2007 = _1998 + 44u;
        uint _2015 = _1998 + 45u;
        uint _2023 = _1998 + 46u;
        float _2034 = fma(_1968, cbSceneParam._m0[_1999].w, fma(_1964, cbSceneParam._m0[_1999].z, fma(_1960, cbSceneParam._m0[_1999].y, _1956 * cbSceneParam._m0[_1999].x)));
        float _2038 = fma(_1968, cbSceneParam._m0[_2007].w, fma(_1964, cbSceneParam._m0[_2007].z, fma(_1960, cbSceneParam._m0[_2007].y, _1956 * cbSceneParam._m0[_2007].x)));
        float _2046 = fma(_1968, cbSceneParam._m0[_2023].w, fma(_1964, cbSceneParam._m0[_2023].z, fma(_1960, cbSceneParam._m0[_2023].y, _1956 * cbSceneParam._m0[_2023].x)));
        float _2051 = cbSceneParam._m0[33u].z * _2046;
        float _2053 = cbSceneParam._m0[33u].w * _2046;
        float _2056 = fma(_1968, cbSceneParam._m0[_2015].w, fma(_1964, cbSceneParam._m0[_2015].z, fma(_1960, cbSceneParam._m0[_2015].y, _1956 * cbSceneParam._m0[_2015].x))) / _2046;
        float _2104 = (cbSceneParam._m0[33u].x - sqrt(((_1970 * _1970) + (_1969 * _1969)) + (_1971 * _1971))) * cbSceneParam._m0[33u].y;
        float _4486 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2111 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 + _2034) / _2046, (_2053 + _2038) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 + _2034) / _2046, (_2038 - _2051) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2034 - _2051) / _2046, (_2038 - _2053) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2034 - _2053) / _2046, (_2051 + _2038) / _2046), _2056), 0.0)).x), vec4(0.25)));
        _2118 = 1.0 - (_2111 * cbSceneParam._m0[34u].x);
        _2119 = 1.0 - (_2111 * cbSceneParam._m0[34u].y);
        _2120 = 1.0 - (_2111 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2118 = 1.0;
        _2119 = 1.0;
        _2120 = 1.0;
    }
    float _2184;
    float _2186;
    float _2188;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2172 = fma(_1968, cbSceneParam._m0[63u].w, fma(_1964, cbSceneParam._m0[63u].z, fma(_1960, cbSceneParam._m0[63u].y, _1956 * cbSceneParam._m0[63u].x)));
        float _2173 = fma(_1968, cbSceneParam._m0[60u].w, fma(_1964, cbSceneParam._m0[60u].z, fma(_1960, cbSceneParam._m0[60u].y, _1956 * cbSceneParam._m0[60u].x))) / _2172;
        float _2174 = fma(_1968, cbSceneParam._m0[61u].w, fma(_1964, cbSceneParam._m0[61u].z, fma(_1960, cbSceneParam._m0[61u].y, _1956 * cbSceneParam._m0[61u].x))) / _2172;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2173 >= cbSceneParam._m0[64u].x) && (_2174 >= cbSceneParam._m0[64u].y)) && (_2173 <= cbSceneParam._m0[64u].z)) && (_2174 <= cbSceneParam._m0[64u].w))
        {
            float _2312 = fma(_1968, cbSceneParam._m0[62u].w, fma(_1964, cbSceneParam._m0[62u].z, fma(_1960, cbSceneParam._m0[62u].y, _1956 * cbSceneParam._m0[62u].x))) / _2172;
            float _2316 = isnan(cbSceneParam._m0[41u].w) ? _2312 : (isnan(_2312) ? cbSceneParam._m0[41u].w : max(_2312, cbSceneParam._m0[41u].w));
            float _2359 = (cbSceneParam._m0[33u].x - sqrt(((_1970 * _1970) + (_1969 * _1969)) + (_1971 * _1971))) * cbSceneParam._m0[33u].y;
            float _4502 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
            float _2366 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2173, cbSceneParam._m0[33u].w + _2174), _2316), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2173, _2174 - cbSceneParam._m0[33u].z), _2316), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2173 - cbSceneParam._m0[33u].z, _2174 - cbSceneParam._m0[33u].w), _2316), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2173 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2174), _2316), 0.0)).x), vec4(0.25)));
            float _2370 = 1.0 - (_2366 * cbSceneParam._m0[34u].x);
            float _2371 = 1.0 - (_2366 * cbSceneParam._m0[34u].y);
            float _2372 = 1.0 - (_2366 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2372) ? _2120 : (isnan(_2120) ? _2372 : min(_2120, _2372));
            frontier_phi_37_36_ladder_1 = isnan(_2371) ? _2119 : (isnan(_2119) ? _2371 : min(_2119, _2371));
            frontier_phi_37_36_ladder_2 = isnan(_2370) ? _2118 : (isnan(_2118) ? _2370 : min(_2118, _2370));
        }
        else
        {
            frontier_phi_37_36_ladder = _2120;
            frontier_phi_37_36_ladder_1 = _2119;
            frontier_phi_37_36_ladder_2 = _2118;
        }
        _2184 = frontier_phi_37_36_ladder_2;
        _2186 = frontier_phi_37_36_ladder_1;
        _2188 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2184 = _2118;
        _2186 = _2119;
        _2188 = _2120;
    }
    uvec4 _2193 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2195 = _2193.x * 14u;
    uint _2196 = _2195 + 13u;
    float _2203 = _859 + (-1.0);
    float _2208 = (cbLight._m0[_2196].x * _2203) + 1.0;
    float _2209 = (cbLight._m0[_2196].y * _2203) + 1.0;
    float _2210 = (cbLight._m0[_2196].z * _2203) + 1.0;
    float _2211 = (cbLight._m0[_2196].w * _2203) + 1.0;
    uint _2212 = _2195 + 5u;
    float _2218 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2222 = _2195 + 4u;
    float _2231 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
    uint _2235 = _2195 | 1u;
    float _2246 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_681, _682, _683));
    float _2249 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_681, _682, _683));
    float _4538 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _4549 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2254 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2256 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2263 = ((cbLight._m0[_2212].x * _2218) * _2256) + (((cbLight._m0[_2222].x * _2184) * _2231) * _2254);
    float _2264 = ((_2218 * cbLight._m0[_2212].y) * _2256) + (((cbLight._m0[_2222].y * _2186) * _2231) * _2254);
    float _2265 = ((_2218 * cbLight._m0[_2212].z) * _2256) + (((cbLight._m0[_2222].z * _2188) * _2231) * _2254);
    uvec4 _2269 = floatBitsToUint(cbLight._m0[_2195 + 12u]);
    bool _2271 = _2269.x == 0u;
    float _2373;
    float _2375;
    float _2377;
    if (_2271)
    {
        _2373 = _2263;
        _2375 = _2264;
        _2377 = _2265;
    }
    else
    {
        uint _2381 = _2195 + 6u;
        float _2397 = (dot(vec3(cbLight._m0[_2195 + 2u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2398 = _2397 * _2397;
        float _4560 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2399 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2400 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2373 = (((cbLight._m0[_2381].x * 0.3183098733425140380859375) * _2399) * _2400) + _2263;
        _2375 = (((cbLight._m0[_2381].y * 0.3183098733425140380859375) * _2399) * _2400) + _2264;
        _2377 = (((cbLight._m0[_2381].z * 0.3183098733425140380859375) * _2399) * _2400) + _2265;
    }
    bool _2380 = _2269.y == 0u;
    float _2435;
    float _2437;
    float _2439;
    if (_2380)
    {
        _2435 = _2373;
        _2437 = _2375;
        _2439 = _2377;
    }
    else
    {
        uint _2608 = _2195 + 7u;
        float _2624 = (dot(vec3(cbLight._m0[_2195 + 3u].xyz), vec3(_681, _682, _683)) * 0.5) + 0.5;
        float _2625 = _2624 * _2624;
        float _4576 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2626 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2627 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2435 = (((cbLight._m0[_2608].x * 0.3183098733425140380859375) * _2626) * _2627) + _2373;
        _2437 = (((cbLight._m0[_2608].y * 0.3183098733425140380859375) * _2626) * _2627) + _2375;
        _2439 = (((cbLight._m0[_2608].z * 0.3183098733425140380859375) * _2626) * _2627) + _2377;
    }
    uint _2442 = _2195 + 8u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _684) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2195].x + _761;
    float _2458 = cbLight._m0[_2195].y + _762;
    float _2459 = cbLight._m0[_2195].z + _763;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2195].xyz));
    float _4592 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2471 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2472 = dot(vec3(_681, _682, _683), vec3(_2464, _2465, _2466));
    float _4614 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2464, _2465, _2466));
    float _4625 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2456 * _2456;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2493 = 0.959999978542327880859375 - _840;
    float _2495 = 0.959999978542327880859375 - _841;
    float _2496 = 0.959999978542327880859375 - _842;
    float _2503 = 1.0 - _2456;
    float _2514 = (0.5 / (((_2471 * ((_2470 * _2503) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2503) + _2456) * _2470))) * _2470;
    float _4636 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2516 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    uint _2530 = _2195 + 9u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _684) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2235].x + _761;
    float _2544 = cbLight._m0[_2235].y + _762;
    float _2545 = cbLight._m0[_2235].z + _763;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2235].xyz));
    float _4647 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2557 = dot(vec3(_681, _682, _683), vec3(_2550, _2551, _2552));
    float _4658 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2561 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2550, _2551, _2552));
    float _4669 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2565 = _2542 * _2542;
    float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
    float _2576 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2583 = 1.0 - _2542;
    float _2593 = (0.5 / (((_2471 * ((_2556 * _2583) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2583) + _2542) * _2556))) * _2556;
    float _4680 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2595 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
    float _2605 = (((((_2576 * _2493) + _843) * cbLight._m0[_2530].x) * _2595) * _2218) + ((((cbLight._m0[_2442].x * _2184) * ((_2492 * _2493) + _843)) * _2516) * _2231);
    float _2606 = (((((_2576 * _2495) + _845) * cbLight._m0[_2530].y) * _2595) * _2218) + ((((cbLight._m0[_2442].y * _2186) * ((_2492 * _2495) + _845)) * _2516) * _2231);
    float _2607 = (((((_2576 * _2496) + _846) * cbLight._m0[_2530].z) * _2595) * _2218) + ((((cbLight._m0[_2442].z * _2188) * ((_2492 * _2496) + _846)) * _2516) * _2231);
    float _2663;
    float _2665;
    float _2667;
    if (_2271)
    {
        _2663 = _2605;
        _2665 = _2606;
        _2667 = _2607;
    }
    else
    {
        uint _2669 = _2195 + 2u;
        uint _2673 = _2195 + 10u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _684) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _761;
        float _2690 = cbLight._m0[_2669].y + _762;
        float _2691 = cbLight._m0[_2669].z + _763;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2669].xyz));
        float _4691 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2703 = dot(vec3(_681, _682, _683), vec3(_2696, _2697, _2698));
        float _4702 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4713 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2722 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2729 = 1.0 - _2688;
        float _2739 = (0.5 / (((_2471 * ((_2702 * _2729) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2729) + _2688) * _2702))) * _2702;
        float _4724 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2663 = (((((_2722 * _2493) + _843) * cbLight._m0[_2673].x) * _2741) * _2742) + _2605;
        _2665 = (((((_2722 * _2495) + _845) * cbLight._m0[_2673].y) * _2741) * _2742) + _2606;
        _2667 = (((((_2722 * _2496) + _846) * cbLight._m0[_2673].z) * _2741) * _2742) + _2607;
    }
    float _2773;
    float _2775;
    float _2777;
    if (_2380)
    {
        _2773 = _2663;
        _2775 = _2665;
        _2777 = _2667;
    }
    else
    {
        uint _2784 = _2195 + 3u;
        uint _2788 = _2195 + 11u;
        float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2784].w)) * _684) * 0.949999988079071044921875);
        float _2803 = _2802 * _2802;
        float _2804 = cbLight._m0[_2784].x + _761;
        float _2805 = cbLight._m0[_2784].y + _762;
        float _2806 = cbLight._m0[_2784].z + _763;
        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
        float _2811 = _2810 * _2804;
        float _2812 = _2810 * _2805;
        float _2813 = _2810 * _2806;
        float _2814 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_2784].xyz));
        float _4740 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2818 = dot(vec3(_681, _682, _683), vec3(_2811, _2812, _2813));
        float _4751 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2822 = dot(vec3(cbLight._m0[_2784].xyz), vec3(_2811, _2812, _2813));
        float _4762 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2826 = _2803 * _2803;
        float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
        float _2837 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2844 = 1.0 - _2803;
        float _2854 = (0.5 / (((_2471 * ((_2817 * _2844) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2471 * _2844) + _2803) * _2817))) * _2817;
        float _4773 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2856 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
        float _2857 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2773 = (((((_2837 * _2493) + _843) * cbLight._m0[_2788].x) * _2856) * _2857) + _2663;
        _2775 = (((((_2837 * _2495) + _845) * cbLight._m0[_2788].y) * _2856) * _2857) + _2665;
        _2777 = (((((_2837 * _2496) + _846) * cbLight._m0[_2788].z) * _2856) * _2857) + _2667;
    }
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    float _2933;
    if (_2193.y == 0u)
    {
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.x;
        uint _2890 = uint((float(_2878.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2879))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2879)));
        float _2900 = (log2(_1971 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2901 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        uint _2904 = uint(isnan(14.0) ? _2901 : (isnan(_2901) ? 14.0 : min(_2901, 14.0)));
        uvec4 _2909 = texelFetch(g_lightClusterGridBuffer, int(((_2904 << 2u) + (_2890 << 6u)) >> 2u));
        uint _2910 = _2909.x;
        uint _2911 = _2878.z;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        if (((((1u << ((_2911 >> 4u) & 15u)) + 4294967295u) & _2910) == 0u) || ((_2911 & 240u) == 0u))
        {
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
        }
        else
        {
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            uint _3149 = 0u;
            uint _3158;
            bool _3159;
            for (;;)
            {
                _3158 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                _3159 = _3158 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3159)
                {
                    frontier_phi_71_pred = _3148;
                    frontier_phi_71_pred_1 = _3147;
                    frontier_phi_71_pred_2 = _3146;
                    frontier_phi_71_pred_3 = _3145;
                    frontier_phi_71_pred_4 = _3144;
                    frontier_phi_71_pred_5 = _3143;
                }
                else
                {
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3147;
                    _3293 = _3148;
                    _3294 = _3158;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3149 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3320 = (_3298 * 48u) + 4u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3339 = (_3298 * 48u) + 8u;
                        vec3 _3350 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x));
                        float _3354 = _3314.x - _1969;
                        float _3355 = _3314.y - _1970;
                        float _3356 = _3314.z - _1971;
                        float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                        float _3360 = inversesqrt(_3357);
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3364 = dot(vec3(_800, _803, _806), vec3(_3361, _3362, _3363));
                        float _3369 = 1.0 - (_3357 * _3314.w);
                        float _4799 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3371 = sqrt(_3357) * _3333.w;
                        float _3374 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3364) + _3375;
                        float _3381 = _3371 * _3371;
                        float _3385 = ((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3370) / ((_3381 * 0.699999988079071044921875) + 1.0);
                        float _3389 = (-0.0) - _1969;
                        float _3390 = (-0.0) - _1970;
                        float _3391 = (-0.0) - _1971;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3405 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                        float _3406 = 1.0 - _875;
                        float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                        float _3414 = _3413 * _3413;
                        float _3415 = _3414 * _3414;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3418 = _3398 + _3363;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3426 = dot(vec3(_800, _803, _806), vec3(_3396, _3397, _3398));
                        float _4815 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3430 = dot(vec3(_800, _803, _806), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                        float _4826 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                        float _3438 = _3374 * _3414;
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3364) + _3439;
                        float _4837 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3443 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3444 = 1.0 - _3414;
                        float _3454 = (0.5 / (((_3443 * ((_3429 * _3444) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3414) * _3429))) * _3443;
                        float _4848 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3465 = (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3437 * _3437) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125))) * _3370;
                        _3218 = (_3385 * _3333.x) + _3291;
                        _3219 = (_3385 * _3333.y) + _3292;
                        _3220 = (_3385 * _3333.z) + _3293;
                        _3215 = (_3465 * _3350.x) + _3288;
                        _3216 = (_3465 * _3350.y) + _3289;
                        _3217 = (_3465 * _3350.z) + _3290;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3219;
                            _3293 = _3220;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_71_pred = _3220;
                    frontier_phi_71_pred_1 = _3219;
                    frontier_phi_71_pred_2 = _3218;
                    frontier_phi_71_pred_3 = _3217;
                    frontier_phi_71_pred_4 = _3216;
                    frontier_phi_71_pred_5 = _3215;
                }
                _3001 = frontier_phi_71_pred;
                _2999 = frontier_phi_71_pred_1;
                _2997 = frontier_phi_71_pred_2;
                _2995 = frontier_phi_71_pred_3;
                _2993 = frontier_phi_71_pred_4;
                _2991 = frontier_phi_71_pred_5;
                uint _3150 = _3149 + 1u;
                if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3143 = _2991;
                    _3144 = _2993;
                    _3145 = _2995;
                    _3146 = _2997;
                    _3147 = _2999;
                    _3148 = _3001;
                    _3149 = _3150;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
        }
        uvec4 _3004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3005 = _3004.z;
        uint _3007 = (_3005 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((4294967295u << _3007) & _2910) == 0u)
        {
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
            _3121 = _3000;
        }
        else
        {
            float _3136 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
            float _3137 = _3136 * _1969;
            float _3138 = _3136 * _1970;
            float _3139 = _3136 * _1971;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3007 < ((_3005 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3271 = _2990;
                float _3272 = _2992;
                float _3273 = _2994;
                float _3274 = _2996;
                float _3275 = _2998;
                float _3276 = _3000;
                uint _3277 = _3007;
                uint _3286;
                bool _3287;
                for (;;)
                {
                    _3286 = texelFetch(g_lightClassification, int((((_2904 << 5u) + (_2890 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                    _3287 = _3286 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3287)
                    {
                        frontier_phi_82_pred = _3276;
                        frontier_phi_82_pred_1 = _3275;
                        frontier_phi_82_pred_2 = _3274;
                        frontier_phi_82_pred_3 = _3273;
                        frontier_phi_82_pred_4 = _3272;
                        frontier_phi_82_pred_5 = _3271;
                    }
                    else
                    {
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        float _3496 = _3275;
                        float _3497 = _3276;
                        uint _3498 = _3286;
                        uint _3499;
                        vec4 _3524;
                        float _3525;
                        vec4 _3540;
                        vec3 _3552;
                        vec4 _3567;
                        vec4 _3582;
                        float _3629;
                        bool _3630;
                        for (;;)
                        {
                            uint _3509 = ((_3277 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3498));
                            _3499 = (_3498 + 4294967295u) & _3498;
                            uint _3511 = _3509 * 40u;
                            _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3525 = _3524.w;
                            uint _3527 = (_3509 * 40u) + 4u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3509 * 40u) + 8u;
                            _3552 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x));
                            uint _3554 = (_3509 * 40u) + 16u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3509 * 40u) + 20u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3585 = (_3509 * 40u) + 24u;
                            vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3604 = (_3509 * 40u) + 28u;
                            vec4 _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            _3629 = fma(_1971, _3617.z, fma(_1970, _3617.y, _3617.x * _1969)) + _3617.w;
                            _3630 = !((fma(_1971, _3598.z, fma(_1970, _3598.y, _3598.x * _1969)) + _3598.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3630)
                            {
                                float _3657 = _3524.x - _1969;
                                float _3658 = _3524.y - _1970;
                                float _3659 = _3524.z - _1971;
                                float _3660 = dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659));
                                float _3663 = inversesqrt(_3660);
                                float _3664 = _3663 * _3657;
                                float _3665 = _3663 * _3658;
                                float _3666 = _3663 * _3659;
                                float _3670 = 1.0 - (_3660 / (_3525 * _3525));
                                float _4859 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3675 = sqrt(_3660) * _3540.w;
                                float _3677 = 1.39999997615814208984375 / (_3675 + 1.39999997615814208984375);
                                float _3678 = _3677 * _3677;
                                float _3681 = ((1.0 - _3678) * dot(vec3(_3664, _3665, _3666), vec3(_800, _803, _806))) + _3678;
                                float _3684 = _3675 * _3675;
                                float _3688 = (fma(_1971, _3567.z, fma(_1970, _3567.y, _3567.x * _1969)) + _3567.w) / _3629;
                                float _3689 = (fma(_1971, _3582.z, fma(_1970, _3582.y, _3582.x * _1969)) + _3582.w) / _3629;
                                float _3693 = 1.0 - dot(vec2(_3688, _3689), vec2(_3688, _3689));
                                float _4875 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3694 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3695 = _3694 * (((isnan(0.0) ? _3681 : (isnan(_3681) ? 0.0 : max(_3681, 0.0))) * _3671) / ((_3684 * 0.699999988079071044921875) + 1.0));
                                float _3707 = exp2(log2(1.0 / ((_3684 * 3.5) + 5.0)) * 0.25);
                                float _3708 = 1.0 - _875;
                                float _3715 = sqrt(1.0 - ((1.0 - (_3708 * _3708)) * (1.0 - (_3707 * _3707))));
                                float _3716 = _3715 * _3715;
                                float _3717 = _3716 * _3716;
                                float _3718 = _3664 - _3137;
                                float _3719 = _3665 - _3138;
                                float _3720 = _3666 - _3139;
                                float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                                float _3728 = dot(vec3(_800, _803, _806), vec3((-0.0) - _3137, (-0.0) - _3138, (-0.0) - _3139));
                                float _4886 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3732 = dot(vec3(_800, _803, _806), vec3(_3724 * _3718, _3724 * _3719, _3724 * _3720));
                                float _4897 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3735 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3739 = ((_3735 * _3735) * (_3717 + (-1.0))) + 1.0;
                                float _3740 = _3677 * _3716;
                                float _3741 = _3740 * _3740;
                                float _3747 = ((1.0 - _3741) * dot(vec3(_800, _803, _806), vec3(_3664, _3665, _3666))) + _3741;
                                float _4908 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3748 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3749 = 1.0 - _3716;
                                float _3759 = (0.5 / (((_3748 * ((_3731 * _3749) + _3716)) + 9.9999999392252902907785028219223e-09) + (((_3748 * _3749) + _3716) * _3731))) * _3748;
                                float _4919 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3769 = (_3694 * _3671) * (((_3717 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3739 * _3739) * ((_3684 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3695 * _3540.z;
                                frontier_phi_88_pred_1 = _3695 * _3540.y;
                                frontier_phi_88_pred_2 = _3695 * _3540.x;
                                frontier_phi_88_pred_3 = _3769 * _3552.z;
                                frontier_phi_88_pred_4 = _3769 * _3552.y;
                                frontier_phi_88_pred_5 = _3769 * _3552.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3778 = frontier_phi_88_pred;
                            _3777 = frontier_phi_88_pred_1;
                            _3776 = frontier_phi_88_pred_2;
                            _3775 = frontier_phi_88_pred_3;
                            _3774 = frontier_phi_88_pred_4;
                            _3773 = frontier_phi_88_pred_5;
                            _3482 = _3776 + _3495;
                            _3483 = _3777 + _3496;
                            _3484 = _3778 + _3497;
                            _3479 = _3773 + _3492;
                            _3480 = _3774 + _3493;
                            _3481 = _3775 + _3494;
                            if (_3499 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3499;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3484;
                        frontier_phi_82_pred_1 = _3483;
                        frontier_phi_82_pred_2 = _3482;
                        frontier_phi_82_pred_3 = _3481;
                        frontier_phi_82_pred_4 = _3480;
                        frontier_phi_82_pred_5 = _3479;
                    }
                    _3122 = frontier_phi_82_pred;
                    _3120 = frontier_phi_82_pred_1;
                    _3118 = frontier_phi_82_pred_2;
                    _3116 = frontier_phi_82_pred_3;
                    _3114 = frontier_phi_82_pred_4;
                    _3112 = frontier_phi_82_pred_5;
                    uint _3278 = _3277 + 1u;
                    if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3271 = _3112;
                        _3272 = _3114;
                        _3273 = _3116;
                        _3274 = _3118;
                        _3275 = _3120;
                        _3276 = _3122;
                        _3277 = _3278;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3118;
                frontier_phi_63_64_ladder_1 = _3122;
                frontier_phi_63_64_ladder_2 = _3120;
                frontier_phi_63_64_ladder_3 = _3116;
                frontier_phi_63_64_ladder_4 = _3114;
                frontier_phi_63_64_ladder_5 = _3112;
            }
            else
            {
                frontier_phi_63_64_ladder = _2996;
                frontier_phi_63_64_ladder_1 = _3000;
                frontier_phi_63_64_ladder_2 = _2998;
                frontier_phi_63_64_ladder_3 = _2994;
                frontier_phi_63_64_ladder_4 = _2992;
                frontier_phi_63_64_ladder_5 = _2990;
            }
            _3111 = frontier_phi_63_64_ladder_5;
            _3113 = frontier_phi_63_64_ladder_4;
            _3115 = frontier_phi_63_64_ladder_3;
            _3117 = frontier_phi_63_64_ladder;
            _3119 = frontier_phi_63_64_ladder_2;
            _3121 = frontier_phi_63_64_ladder_1;
        }
        float _3126 = isnan(1.0) ? _859 : (isnan(_859) ? 1.0 : min(_859, 1.0));
        _2923 = (_3126 * _3117) + _2435;
        _2925 = (_3126 * _3119) + _2437;
        _2927 = (_3126 * _3121) + _2439;
        _2929 = ((_3111 * _843) * _3126) + _2773;
        _2931 = ((_3113 * _845) * _3126) + _2775;
        _2933 = ((_3115 * _846) * _3126) + _2777;
    }
    else
    {
        _2923 = _2435;
        _2925 = _2437;
        _2927 = _2439;
        _2929 = _2773;
        _2931 = _2775;
        _2933 = _2777;
    }
    float _4935 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4946 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4957 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _2950 = ((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2923 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _859))) + ((_2929 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2951 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2925 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _859))) + ((_2931 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    float _2952 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2927 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _859))) + ((_2933 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1699)) * cbPerFrame._m0[3u].x);
    uint _2953 = _272 + 6u;
    float _2961 = _781 / cbSceneParam._m0[86u].x;
    float _2962 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2976 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2961, _2962, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2978 = _2976.x;
    float _2979 = _2976.y;
    float _2980 = _2976.z;
    float _2981 = _2976.w;
    float _3053;
    float _3055;
    float _3057;
    float _3059;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _3015 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _3016 = _3015 / _703;
        float _3027 = _3016 * _754;
        float _3028 = _755 * _3016;
        float _3029 = (-0.0) - _3028;
        float _3031 = _3016 * _756;
        float _3033 = (cbSceneParam._m0[77u].w * _3029) / _3015;
        float _3034 = _3033 + cbSceneParam._m0[79u].w;
        float _3035 = cbSceneParam._m0[79u].w - _3028;
        float _3041 = sqrt(((_3027 * _3027) + (_3028 * _3028)) + (_3031 * _3031));
        float _3044 = (1.0 - (cbSceneParam._m0[77u].w / _3015)) * _3041;
        float _3049 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3051 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3228;
        if (abs((_3029 - _3033) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3228 = ((((_3034 > 0.0) ? exp2(_3049 * _3034) : (2.0 - exp2(_3051 * _3034))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3044;
        }
        else
        {
            float _3172 = 1.0 / cbSceneParam._m0[80u].x;
            float _3173 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : max(_3034, _3035));
            float _3174 = isnan(_3035) ? _3034 : (isnan(_3034) ? _3035 : min(_3034, _3035));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            _3228 = ((abs(_3041 / _3029) * cbSceneParam._m0[80u].y) * ((((_3183 - _3184) * 2.0) - ((exp2(_3049 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)))) - exp2(_3049 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))))) * _3172)) - ((exp2(_3051 * _3183) - exp2(_3051 * _3184)) * _3172))) + (_3044 * cbSceneParam._m0[80u].z);
        }
        vec4 _3230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2961, _2962, 1.0), 0.0);
        float _3239 = exp2((_3228 * (-1.44269502162933349609375)) * (1.0 - _3230.w));
        float _3240 = log2(_3239);
        float _3256 = log2(_2981);
        _3053 = (exp2(_3256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].x)) * _3230.x) / cbSceneParam._m0[78u].x)) + _2978;
        _3055 = (exp2(_3256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].y)) * _3230.y) / cbSceneParam._m0[78u].y)) + _2979;
        _3057 = (exp2(_3256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3240 * cbSceneParam._m0[78u].z)) * _3230.z) / cbSceneParam._m0[78u].z)) + _2980;
        _3059 = _3239 * _2981;
    }
    else
    {
        _3053 = _2978;
        _3055 = _2979;
        _3057 = _2980;
        _3059 = _2981;
    }
    bool _3266;
    vec4 _3069;
    vec4 _3091;
    float _3093;
    float _3097;
    float _3098;
    float _3099;
    float _3100;
    bool _3110;
    for (;;)
    {
        _3069 = cbMatDynParam._m0[0u];
        float _3071 = roundEven(_3069.y);
        bool _3072 = _3071 == 3.0;
        float _3073 = log2(_3059);
        float _3080 = exp2(_3073 * cbSceneParam._m0[78u].x) * _2950;
        float _3081 = exp2(_3073 * cbSceneParam._m0[78u].y) * _2951;
        float _3082 = exp2(_3073 * cbSceneParam._m0[78u].z) * _2952;
        float _3089 = _770 + (-0.5);
        _3091 = cbMtdParam._m0[1u];
        _3093 = _3091.y * _3089;
        float _3096 = (_3071 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3097 = _3096 * (_3072 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3053)));
        _3098 = _3096 * (_3072 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3055)));
        _3099 = _3096 * (_3072 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3057)));
        _3100 = _3089 * 0.999000012874603271484375;
        _3110 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3110)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _3100) < 0.5)
            {
                _3266 = true;
                break;
            }
        }
        uint _3207 = _819 + uint(_3069.w);
        if ((cbInstanceData._m0[_3207].w < 1.0) && ((cbInstanceData._m0[_3207].w + _3100) < 0.5))
        {
            _3266 = true;
            break;
        }
        if ((_3093 + 1.0) < _3091.x)
        {
            _3266 = true;
            break;
        }
        _3266 = false;
        break;
    }
    float _3470;
    if (_3266)
    {
        discard_state = true;
        _3470 = 0.0;
    }
    else
    {
        _3470 = cbInstanceData._m0[_2953].w;
    }
    SV_Target.x = _3097;
    SV_Target.y = _3098;
    SV_Target.z = _3099;
    SV_Target.w = _3470;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2953].w;
    discard_exit();
}


