#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1452;
float _3856;
float _3857;
float _3858;
float _3859;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3868 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3879 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3890 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _344 = _339.x * cbMtdParam._m0[11u].x;
    float _345 = _339.y * cbMtdParam._m0[11u].y;
    float _346 = _339.z * cbMtdParam._m0[11u].z;
    vec4 _365 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _384.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3901 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _455 = (_448 * ((_365.x * cbMtdParam._m0[12u].x) - _344)) + _344;
    float _456 = (_448 * ((_365.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _457 = (_448 * ((_365.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _384.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3912 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    float _534 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _528;
    float _537 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _529;
    float _540 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _530;
    float _547 = ((_528 - _534) * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) + _534;
    float _548 = ((_529 - _537) * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) + _537;
    float _549 = ((_530 - _540) * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) + _540;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _608 = _606.x;
    float _609 = _606.y;
    float _610 = _606.z;
    float _617 = ((_589.x - _608) * _448) + _608;
    float _618 = ((_589.y - _609) * _448) + _609;
    float _619 = ((_589.z - _610) * _448) + _610;
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _644 = ((_631.z - _619) * _521) + _619;
    float _647 = ((((_631.x - _617) * _521) + _617) * 2.0) + (-1.0);
    float _648 = ((((_631.y - _618) * _521) + _618) * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3923 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _695 = _693.x;
    float _696 = 1.0 - _695;
    float _712 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_695 - _696) * cbMtdParam._m0[24u].z) + _696) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3934 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _713 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _720 = (_713 * (cbMtdParam._m0[17u].x - _547)) + _547;
    float _721 = (_713 * (cbMtdParam._m0[17u].y - _548)) + _548;
    float _722 = (_713 * (cbMtdParam._m0[17u].z - _549)) + _549;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _750 = _748.x;
    float _768 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _750) * _448) + _750;
    float _785 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _768) * _521) + _768;
    float _789 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _785) * cbMtdParam._m0[19u].z) + _785;
    float _791 = _789 - (_789 * _713);
    float _796 = (((_566.z - _644) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _644;
    float _800 = ((_668.z - _796) * cbMtdParam._m0[19u].w) + _796;
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _820 = (_813.x * 2.0) + (-1.0);
    float _821 = (_813.y * 2.0) + (-1.0);
    float _822 = dot(vec2(_820, _821), vec2(_820, _821));
    float _3945 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _830 = (_713 * (_813.z - _800)) + _800;
    float _839 = (_647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_566.x * 2.0) + (-1.0)))) + (((_668.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _840 = (_648 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_566.y * 2.0) + (-1.0)))) + (((_668.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _852 = (((_820 - _839) + (cbMtdParam._m0[21u].x * _839)) * _713) + _839;
    float _853 = (((_821 - _840) + (cbMtdParam._m0[21u].x * _840)) * _713) + _840;
    float _854 = (_713 * (sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) - _654)) + _654;
    float _858 = cbMtdParam._m0[22u].x + _668.w;
    float _861 = fma(_854, _248 * NORMAL.x, fma(_853, _255 * TANGENT.x, (_241 * _233) * _852));
    float _864 = fma(_854, _248 * NORMAL.y, fma(_853, _255 * TANGENT.y, (_241 * _234) * _852));
    float _867 = fma(_854, _248 * NORMAL.z, fma(_853, _255 * TANGENT.z, (_241 * _235) * _852));
    float _871 = inversesqrt(dot(vec3(_861, _864, _867), vec3(_861, _864, _867)));
    float _872 = _871 * _861;
    float _873 = _871 * _864;
    float _874 = _871 * _867;
    float _3956 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _875 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _3978 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3989 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4000 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4011 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _880 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _894 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _935 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _945 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _935);
    float _946 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _935);
    float _947 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _935);
    float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
    float _952 = _945 * _951;
    float _953 = _946 * _951;
    float _954 = _947 * _951;
    vec4 _959 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _961 = _959.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1133 = sqrt(((_945 * _945) + (_946 * _946)) + (_947 * _947));
        float _1139 = (cbMatDynParam._m0[5u].x * _1133) + cbMatDynParam._m0[5u].y;
        float _4022 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1144 = (cbMatDynParam._m0[5u].z * _1133) + cbMatDynParam._m0[5u].w;
        float _4033 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) - _1140)) + _1140) < ((_961 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _972 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _973 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _991 = fma(_874, cbSceneParam._m0[5u].z, fma(_873, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _872));
    float _994 = fma(_874, cbSceneParam._m0[6u].z, fma(_873, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _872));
    float _997 = fma(_874, cbSceneParam._m0[7u].z, fma(_873, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _872));
    uint _1010 = _282 + 9u;
    uint _1011 = _1010 + uint(cbMatDynParam._m0[0u].w);
    float _1017 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * cbInstanceData._m0[_1011].x;
    float _1018 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * cbInstanceData._m0[_1011].y;
    float _1019 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * cbInstanceData._m0[_1011].z;
    float _4044 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _1023 = 1.0 - _880;
    float _1024 = _1020 * _1023;
    float _1025 = _1021 * _1023;
    float _1026 = _1022 * _1023;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _880;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _880;
    float _1033 = (_1022 + (-0.039999999105930328369140625)) * _880;
    float _1034 = _1031 + 0.039999999105930328369140625;
    float _1036 = _1032 + 0.039999999105930328369140625;
    float _1037 = _1033 + 0.039999999105930328369140625;
    vec4 _1046 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _972, cbSceneParam._m0[86u].y * _973));
    float _1050 = ((isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * TEXCOORD_5.w) * _1046.x;
    float _1051 = dot(vec3(_872, _873, _874), vec3(_952, _953, _954));
    float _1054 = _1051 * 2.0;
    float _1058 = (_1054 * _872) - _952;
    float _1059 = (_1054 * _873) - _953;
    float _1060 = (_1054 * _874) - _954;
    float _1064 = abs(dot(vec3(_952, _953, _954), vec3(_872, _873, _874)));
    float _4077 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1066 = sqrt(_875);
    float _1079 = exp2((_1066 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1066 * 3.0));
    float _1085 = (1.0 - _1079) * ((_1066 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1086 = _1079 * _1066;
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1451;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1176 = fma(_1122, cbModelParam._m0[26u].z, fma(_1118, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114));
        float _1180 = fma(_1122, cbModelParam._m0[27u].z, fma(_1118, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114));
        float _1184 = fma(_1122, cbModelParam._m0[28u].z, fma(_1118, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114));
        float _1209 = _1114 + _872;
        float _1210 = _1118 + _873;
        float _1211 = _1122 + _874;
        float _1221 = fma(_1211, cbModelParam._m0[26u].z, fma(_1210, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1209)) - _1176;
        float _1222 = fma(_1211, cbModelParam._m0[27u].z, fma(_1210, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1209)) - _1180;
        float _1223 = fma(_1211, cbModelParam._m0[28u].z, fma(_1210, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1209)) - _1184;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1176 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1180 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[34u].z) + ((((((_1184 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1279 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1245.x + (-0.5));
        float _1281 = _1279 * (_1245.y + (-0.5));
        float _1282 = _1279 * (_1245.z + (-0.5));
        float _1289 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1252.x + (-0.5));
        float _1291 = _1289 * (_1252.y + (-0.5));
        float _1292 = _1289 * (_1252.z + (-0.5));
        float _1299 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1259.x + (-0.5));
        float _1301 = _1299 * (_1259.y + (-0.5));
        float _1302 = _1299 * (_1259.z + (-0.5));
        float _1309 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1266.x + (-0.5));
        float _1311 = _1309 * (_1266.y + (-0.5));
        float _1312 = _1309 * (_1266.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1333 = (dot(vec3(_872, _873, _874), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1343 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4125 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1345 + 1.0))) + _1350) * _1313;
        float _1360 = _1281 * 0.5;
        float _1361 = _1291 * 0.5;
        float _1362 = _1301 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_872, _873, _874), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4158 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1387 + 1.0))) + _1392) * _1314;
        float _1402 = _1282 * 0.5;
        float _1403 = _1292 * 0.5;
        float _1404 = _1302 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_872, _873, _874), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4191 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1429 + 1.0))) + _1434) * _1315;
        _1451 = _1282;
        _1453 = _1281;
        _1454 = _1280;
        _1455 = _1292;
        _1456 = _1291;
        _1457 = _1290;
        _1458 = _1302;
        _1459 = _1301;
        _1460 = _1300;
        _1461 = _1315;
        _1462 = _1314;
        _1463 = _1313;
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1452;
        _1453 = _1452;
        _1454 = _1452;
        _1455 = _1452;
        _1456 = _1452;
        _1457 = _1452;
        _1458 = _1452;
        _1459 = _1452;
        _1460 = _1452;
        _1461 = _1452;
        _1462 = _1452;
        _1463 = _1452;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1493 = fma(_1122, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1114));
        float _1497 = fma(_1122, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1114));
        float _1501 = fma(_1122, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1114));
        float _1524 = _1114 + _872;
        float _1525 = _1118 + _873;
        float _1526 = _1122 + _874;
        float _1536 = fma(_1526, cbModelParam._m0[30u].z, fma(_1525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1524)) - _1493;
        float _1537 = fma(_1526, cbModelParam._m0[31u].z, fma(_1525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1524)) - _1497;
        float _1538 = fma(_1526, cbModelParam._m0[32u].z, fma(_1525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1524)) - _1501;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1493 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1497 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[35u].z) + ((((((_1501 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1592 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1559.x + (-0.5));
        float _1594 = _1592 * (_1559.y + (-0.5));
        float _1595 = _1592 * (_1559.z + (-0.5));
        float _1602 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1566.x + (-0.5));
        float _1604 = _1602 * (_1566.y + (-0.5));
        float _1605 = _1602 * (_1566.z + (-0.5));
        float _1612 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1573.x + (-0.5));
        float _1614 = _1612 * (_1573.y + (-0.5));
        float _1615 = _1612 * (_1573.z + (-0.5));
        float _1622 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1580.x + (-0.5));
        float _1624 = _1622 * (_1580.y + (-0.5));
        float _1625 = _1622 * (_1580.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_872, _873, _874), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4254 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1656 + 1.0))) + _1661) * _1626;
        float _1671 = _1594 * 0.5;
        float _1672 = _1604 * 0.5;
        float _1673 = _1614 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_872, _873, _874), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4287 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1698 + 1.0))) + _1703) * _1627;
        float _1713 = _1595 * 0.5;
        float _1714 = _1605 * 0.5;
        float _1715 = _1615 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_872, _873, _874), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4320 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1740 + 1.0))) + _1745) * _1628;
        _1762 = _1595;
        _1763 = _1594;
        _1764 = _1593;
        _1765 = _1605;
        _1766 = _1604;
        _1767 = _1603;
        _1768 = _1615;
        _1769 = _1614;
        _1770 = _1613;
        _1771 = _1628;
        _1772 = _1627;
        _1773 = _1626;
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1452;
        _1763 = _1452;
        _1764 = _1452;
        _1765 = _1452;
        _1766 = _1452;
        _1767 = _1452;
        _1768 = _1452;
        _1769 = _1452;
        _1770 = _1452;
        _1771 = _1452;
        _1772 = _1452;
        _1773 = _1452;
        _1774 = 0.0;
        _1775 = 0.0;
        _1776 = 0.0;
    }
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1464)) + _1464;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1465)) + _1465;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1466)) + _1466;
    float _1809 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1786));
    float _1830 = _1058 * 0.5;
    float _1831 = _1059 * 0.5;
    float _1832 = _1060 * 0.5;
    float _1833 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1836 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1839 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1873;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1846 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1451, _1455, _1458, _1461));
        float _1850 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1854 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1454, _1457, _1460, _1463));
        float _1861 = dot(vec4(cbModelParam._m0[39u]), vec4(_1830, _1831, _1832, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1884;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1875 = dot(vec4(cbModelParam._m0[40u]), vec4(_1830, _1831, _1832, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1888 = (_1884 * cbModelParam._m0[1u].x) + (_1873 * (1.0 - cbModelParam._m0[1u].x));
    float _1898 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _875);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1898 : min(cbModelParam._m0[25u].z, _1898));
    float _1980;
    float _1982;
    float _1984;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1947 = fma(_1122, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114)) + cbModelParam._m0[13u].w;
        float _1951 = fma(_1122, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114)) + cbModelParam._m0[14u].w;
        float _1955 = fma(_1122, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114)) + cbModelParam._m0[15u].w;
        float _1958 = fma(_1060, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058));
        float _1961 = fma(_1060, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058));
        float _1964 = fma(_1060, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058));
        float _1992;
        if (_1958 > 0.0)
        {
            _1992 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1992 = frontier_phi_17_15_ladder;
        }
        float _2216;
        if (_1961 > 0.0)
        {
            _2216 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2216 = frontier_phi_26_22_ladder;
        }
        float _2473;
        if (_1964 > 0.0)
        {
            _2473 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2473 = frontier_phi_38_33_ladder;
        }
        float _2475 = isnan(_2216) ? _1992 : (isnan(_1992) ? _2216 : min(_1992, _2216));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1958) + _1947;
        float _2481 = (_2476 * _1961) + _1951;
        float _2482 = (_2476 * _1964) + _1955;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2483;
        float _2487 = _2483 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 > _2487) || ((_2481 < _2485) || ((_2480 < _2485) || (_2480 > _2487))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2482, cbModelParam._m0[9u].z, fma(_2481, cbModelParam._m0[9u].y, _2480 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2482, cbModelParam._m0[10u].z, fma(_2481, cbModelParam._m0[10u].y, _2480 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2482, cbModelParam._m0[11u].z, fma(_2481, cbModelParam._m0[11u].y, _2480 * cbModelParam._m0[11u].x))), _1899);
            frontier_phi_16_38_ladder = _2610.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2610.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2610.x * cbModelParam._m0[1u].y;
        }
        _1980 = frontier_phi_16_38_ladder_2;
        _1982 = frontier_phi_16_38_ladder_1;
        _1984 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1058, _1059, _1060), _1899);
        _1980 = _1968.x * cbModelParam._m0[1u].y;
        _1982 = _1968.y * cbModelParam._m0[1u].y;
        _1984 = _1968.z * cbModelParam._m0[1u].y;
    }
    float _1988 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _875);
    float _1989 = isnan(_1988) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1988 : min(cbModelParam._m0[25u].w, _1988));
    float _2079;
    float _2081;
    float _2083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2043 = fma(_1122, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114)) + cbModelParam._m0[21u].w;
        float _2047 = fma(_1122, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114)) + cbModelParam._m0[22u].w;
        float _2051 = fma(_1122, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114)) + cbModelParam._m0[23u].w;
        float _2054 = fma(_1060, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058));
        float _2057 = fma(_1060, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058));
        float _2060 = fma(_1060, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058));
        float _2221;
        if (_2054 > 0.0)
        {
            _2221 = abs((1.0 - _2043) / _2054);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2043 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2221 = frontier_phi_28_24_ladder;
        }
        float _2500;
        if (_2057 > 0.0)
        {
            _2500 = abs((1.0 - _2047) / _2057);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2047 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2500 = frontier_phi_40_35_ladder;
        }
        float _2713;
        if (_2060 > 0.0)
        {
            _2713 = abs((1.0 - _2051) / _2060);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2051 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2713 = frontier_phi_49_46_ladder;
        }
        float _2715 = isnan(_2500) ? _2221 : (isnan(_2221) ? _2500 : min(_2221, _2500));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _2054) + _2043;
        float _2721 = (_2716 * _2057) + _2047;
        float _2722 = (_2716 * _2060) + _2051;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1989);
            frontier_phi_25_49_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _2079 = frontier_phi_25_49_ladder_2;
        _2081 = frontier_phi_25_49_ladder_1;
        _2083 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1058, _1059, _1060), _1989);
        _2079 = _2063.x * cbModelParam._m0[1u].z;
        _2081 = _2063.y * cbModelParam._m0[1u].z;
        _2083 = _2063.z * cbModelParam._m0[1u].z;
    }
    float _2096 = (((_1085 * _1034) + _1086) * _1050) * ((cbModelParam._m0[1u].w * (_2079 - _1980)) + _1980);
    float _2098 = (((_1085 * _1036) + _1086) * _1050) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2100 = (((_1085 * _1037) + _1086) * _1050) * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2103 = fma(_2100, cbSceneParam._m0[89u].z, fma(_2098, cbSceneParam._m0[89u].y, _2096 * cbSceneParam._m0[89u].x));
    float _2106 = fma(_2100, cbSceneParam._m0[90u].z, fma(_2098, cbSceneParam._m0[90u].y, _2096 * cbSceneParam._m0[90u].x));
    float _2109 = fma(_2100, cbSceneParam._m0[91u].z, fma(_2098, cbSceneParam._m0[91u].y, _2096 * cbSceneParam._m0[91u].x));
    vec4 _2117 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_972, _973));
    float _2119 = _2117.w;
    float _2131 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2119);
    float _2132 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2119);
    float _2133 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2119);
    uvec4 _2137 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2139 = _2137.x * 14u;
    uint _2140 = _2139 + 13u;
    float _2147 = _1050 + (-1.0);
    float _2152 = (cbLight._m0[_2140].x * _2147) + 1.0;
    float _2153 = (cbLight._m0[_2140].y * _2147) + 1.0;
    float _2154 = (cbLight._m0[_2140].z * _2147) + 1.0;
    float _2155 = (cbLight._m0[_2140].w * _2147) + 1.0;
    uint _2156 = _2139 + 5u;
    float _2162 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
    uint _2166 = _2139 + 4u;
    float _2175 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2179 = _2139 | 1u;
    float _2190 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_872, _873, _874));
    float _2193 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_872, _873, _874));
    float _4456 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _4467 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2198 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * 0.3183098733425140380859375;
    float _2200 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2207 = ((cbLight._m0[_2156].x * _2162) * _2200) + (((cbLight._m0[_2166].x * _2131) * _2175) * _2198);
    float _2208 = ((_2162 * cbLight._m0[_2156].y) * _2200) + (((cbLight._m0[_2166].y * _2132) * _2175) * _2198);
    float _2209 = ((_2162 * cbLight._m0[_2156].z) * _2200) + (((cbLight._m0[_2166].z * _2133) * _2175) * _2198);
    uvec4 _2213 = floatBitsToUint(cbLight._m0[_2139 + 12u]);
    bool _2215 = _2213.x == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2215)
    {
        _2226 = _2207;
        _2228 = _2208;
        _2230 = _2209;
    }
    else
    {
        uint _2234 = _2139 + 6u;
        float _2250 = (dot(vec3(cbLight._m0[_2139 + 2u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2251 = _2250 * _2250;
        float _4478 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2252 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2253 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2226 = (((cbLight._m0[_2234].x * 0.3183098733425140380859375) * _2252) * _2253) + _2207;
        _2228 = (((cbLight._m0[_2234].y * 0.3183098733425140380859375) * _2252) * _2253) + _2208;
        _2230 = (((cbLight._m0[_2234].z * 0.3183098733425140380859375) * _2252) * _2253) + _2209;
    }
    bool _2233 = _2213.y == 0u;
    float _2271;
    float _2273;
    float _2275;
    if (_2233)
    {
        _2271 = _2226;
        _2273 = _2228;
        _2275 = _2230;
    }
    else
    {
        uint _2444 = _2139 + 7u;
        float _2460 = (dot(vec3(cbLight._m0[_2139 + 3u].xyz), vec3(_872, _873, _874)) * 0.5) + 0.5;
        float _2461 = _2460 * _2460;
        float _4494 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2462 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
        float _2463 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2271 = (((cbLight._m0[_2444].x * 0.3183098733425140380859375) * _2462) * _2463) + _2226;
        _2273 = (((cbLight._m0[_2444].y * 0.3183098733425140380859375) * _2462) * _2463) + _2228;
        _2275 = (((cbLight._m0[_2444].z * 0.3183098733425140380859375) * _2462) * _2463) + _2230;
    }
    uint _2278 = _2139 + 8u;
    float _2291 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _875) * 0.949999988079071044921875);
    float _2292 = _2291 * _2291;
    float _2293 = cbLight._m0[_2139].x + _952;
    float _2294 = cbLight._m0[_2139].y + _953;
    float _2295 = cbLight._m0[_2139].z + _954;
    float _2299 = inversesqrt(dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295)));
    float _2300 = _2299 * _2293;
    float _2301 = _2299 * _2294;
    float _2302 = _2299 * _2295;
    float _2303 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2139].xyz));
    float _4510 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2306 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _4521 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _2307 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2308 = dot(vec3(_872, _873, _874), vec3(_2300, _2301, _2302));
    float _4532 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2312 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2300, _2301, _2302));
    float _4543 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2316 = _2292 * _2292;
    float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
    float _2329 = 0.959999978542327880859375 - _1031;
    float _2331 = 0.959999978542327880859375 - _1032;
    float _2332 = 0.959999978542327880859375 - _1033;
    float _2339 = 1.0 - _2292;
    float _2350 = (0.5 / (((_2307 * ((_2306 * _2339) + _2292)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2339) + _2292) * _2306))) * _2306;
    float _4554 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2352 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
    uint _2366 = _2139 + 9u;
    float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2179].w)) * _875) * 0.949999988079071044921875);
    float _2378 = _2377 * _2377;
    float _2379 = cbLight._m0[_2179].x + _952;
    float _2380 = cbLight._m0[_2179].y + _953;
    float _2381 = cbLight._m0[_2179].z + _954;
    float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
    float _2386 = _2385 * _2379;
    float _2387 = _2385 * _2380;
    float _2388 = _2385 * _2381;
    float _2389 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2179].xyz));
    float _4565 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2392 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2393 = dot(vec3(_872, _873, _874), vec3(_2386, _2387, _2388));
    float _4576 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2179].xyz), vec3(_2386, _2387, _2388));
    float _4587 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2378 * _2378;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2412 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2419 = 1.0 - _2378;
    float _2429 = (0.5 / (((_2307 * ((_2392 * _2419) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2419) + _2378) * _2392))) * _2392;
    float _4598 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    float _2441 = (((((_2412 * _2329) + _1034) * cbLight._m0[_2366].x) * _2431) * _2162) + ((((cbLight._m0[_2278].x * _2131) * ((_2328 * _2329) + _1034)) * _2352) * _2175);
    float _2442 = (((((_2412 * _2331) + _1036) * cbLight._m0[_2366].y) * _2431) * _2162) + ((((cbLight._m0[_2278].y * _2132) * ((_2328 * _2331) + _1036)) * _2352) * _2175);
    float _2443 = (((((_2412 * _2332) + _1037) * cbLight._m0[_2366].z) * _2431) * _2162) + ((((cbLight._m0[_2278].z * _2133) * ((_2328 * _2332) + _1037)) * _2352) * _2175);
    float _2505;
    float _2507;
    float _2509;
    if (_2215)
    {
        _2505 = _2441;
        _2507 = _2442;
        _2509 = _2443;
    }
    else
    {
        uint _2511 = _2139 + 2u;
        uint _2515 = _2139 + 10u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _875) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _952;
        float _2532 = cbLight._m0[_2511].y + _953;
        float _2533 = cbLight._m0[_2511].z + _954;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2511].xyz));
        float _4609 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2545 = dot(vec3(_872, _873, _874), vec3(_2538, _2539, _2540));
        float _4620 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4631 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
        float _2571 = 1.0 - _2530;
        float _2581 = (0.5 / (((_2307 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2571) + _2530) * _2544))) * _2544;
        float _4642 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2583 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2584 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2505 = (((((_2564 * _2329) + _1034) * cbLight._m0[_2515].x) * _2583) * _2584) + _2441;
        _2507 = (((((_2564 * _2331) + _1036) * cbLight._m0[_2515].y) * _2583) * _2584) + _2442;
        _2509 = (((((_2564 * _2332) + _1037) * cbLight._m0[_2515].z) * _2583) * _2584) + _2443;
    }
    float _2619;
    float _2621;
    float _2623;
    if (_2233)
    {
        _2619 = _2505;
        _2621 = _2507;
        _2623 = _2509;
    }
    else
    {
        uint _2630 = _2139 + 3u;
        uint _2634 = _2139 + 11u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _875) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _952;
        float _2651 = cbLight._m0[_2630].y + _953;
        float _2652 = cbLight._m0[_2630].z + _954;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_872, _873, _874), vec3(cbLight._m0[_2630].xyz));
        float _4658 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2664 = dot(vec3(_872, _873, _874), vec3(_2657, _2658, _2659));
        float _4669 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4680 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2683 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2690 = 1.0 - _2649;
        float _2700 = (0.5 / (((_2307 * ((_2663 * _2690) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2307 * _2690) + _2649) * _2663))) * _2663;
        float _4691 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
        _2619 = (((((_2683 * _2329) + _1034) * cbLight._m0[_2634].x) * _2702) * _2703) + _2505;
        _2621 = (((((_2683 * _2331) + _1036) * cbLight._m0[_2634].y) * _2702) * _2703) + _2507;
        _2623 = (((((_2683 * _2332) + _1037) * cbLight._m0[_2634].z) * _2702) * _2703) + _2509;
    }
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    if (_2137.y == 0u)
    {
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2778;
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2778;
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2778;
        uvec4 _2793 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2794 = _2793.x;
        uint _2805 = uint((float(_2793.y) * floor(float(uint(cbSceneParam._m0[85u].y * _973) / _2794))) + floor(float(uint(cbSceneParam._m0[85u].x * _972) / _2794)));
        float _2815 = (log2(_2781 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2816 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        uint _2819 = uint(isnan(14.0) ? _2816 : (isnan(_2816) ? 14.0 : min(_2816, 14.0)));
        uvec4 _2824 = texelFetch(g_lightClusterGridBuffer, int(((_2819 << 2u) + (_2805 << 6u)) >> 2u));
        uint _2825 = _2824.x;
        uint _2826 = _2793.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2826 >> 4u) & 15u)) + 4294967295u) & _2825) == 0u) || ((_2826 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            uint _3085 = 0u;
            uint _3094;
            bool _3095;
            for (;;)
            {
                _3094 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                _3095 = _3094 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3095)
                {
                    frontier_phi_66_pred = _3079;
                    frontier_phi_66_pred_1 = _3084;
                    frontier_phi_66_pred_2 = _3083;
                    frontier_phi_66_pred_3 = _3082;
                    frontier_phi_66_pred_4 = _3081;
                    frontier_phi_66_pred_5 = _3080;
                }
                else
                {
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    uint _3230;
                    _3224 = _3079;
                    _3225 = _3080;
                    _3226 = _3081;
                    _3227 = _3082;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3094;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    for (;;)
                    {
                        uint _3234 = uint(findLSB(_3230)) + (_3085 << 5u);
                        uint _3231 = (_3230 + 4294967295u) & _3230;
                        uint _3236 = _3234 * 48u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3256 = (_3234 * 48u) + 4u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3275 = (_3234 * 48u) + 8u;
                        vec3 _3286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x));
                        float _3290 = _3250.x - _2779;
                        float _3291 = _3250.y - _2780;
                        float _3292 = _3250.z - _2781;
                        float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                        float _3296 = inversesqrt(_3293);
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3300 = dot(vec3(_991, _994, _997), vec3(_3297, _3298, _3299));
                        float _3305 = 1.0 - (_3293 * _3250.w);
                        float _4717 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3307 = sqrt(_3293) * _3269.w;
                        float _3310 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3300) + _3311;
                        float _3317 = _3307 * _3307;
                        float _3321 = ((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3306) / ((_3317 * 0.699999988079071044921875) + 1.0);
                        float _3325 = (-0.0) - _2779;
                        float _3326 = (-0.0) - _2780;
                        float _3327 = (-0.0) - _2781;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3342 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                        float _3343 = 1.0 - _1066;
                        float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                        float _3351 = _3350 * _3350;
                        float _3352 = _3351 * _3351;
                        float _3353 = _3332 + _3297;
                        float _3354 = _3333 + _3298;
                        float _3355 = _3334 + _3299;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3363 = dot(vec3(_991, _994, _997), vec3(_3332, _3333, _3334));
                        float _4733 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                        float _3367 = dot(vec3(_991, _994, _997), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                        float _4744 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                        float _3375 = _3310 * _3351;
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3300) + _3376;
                        float _4755 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3381 = 1.0 - _3351;
                        float _3391 = (0.5 / (((_3380 * ((_3366 * _3381) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3351) * _3366))) * _3380;
                        float _4766 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3402 = (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3374 * _3374) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125))) * _3306;
                        _3154 = (_3321 * _3269.x) + _3227;
                        _3155 = (_3321 * _3269.y) + _3228;
                        _3156 = (_3321 * _3269.z) + _3229;
                        _3151 = (_3402 * _3286.x) + _3224;
                        _3152 = (_3402 * _3286.y) + _3225;
                        _3153 = (_3402 * _3286.z) + _3226;
                        if (_3231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3224 = _3151;
                            _3225 = _3152;
                            _3226 = _3153;
                            _3227 = _3154;
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3231;
                        }
                    }
                    frontier_phi_66_pred = _3151;
                    frontier_phi_66_pred_1 = _3156;
                    frontier_phi_66_pred_2 = _3155;
                    frontier_phi_66_pred_3 = _3154;
                    frontier_phi_66_pred_4 = _3153;
                    frontier_phi_66_pred_5 = _3152;
                }
                _2927 = frontier_phi_66_pred;
                _2937 = frontier_phi_66_pred_1;
                _2935 = frontier_phi_66_pred_2;
                _2933 = frontier_phi_66_pred_3;
                _2931 = frontier_phi_66_pred_4;
                _2929 = frontier_phi_66_pred_5;
                uint _3086 = _3085 + 1u;
                if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2927;
                    _3080 = _2929;
                    _3081 = _2931;
                    _3082 = _2933;
                    _3083 = _2935;
                    _3084 = _2937;
                    _3085 = _3086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        if (((4294967295u << _2943) & _2825) == 0u)
        {
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
            float _3073 = _3072 * _2779;
            float _3074 = _3072 * _2780;
            float _3075 = _3072 * _2781;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3207 = _2926;
                float _3208 = _2928;
                float _3209 = _2930;
                float _3210 = _2932;
                float _3211 = _2934;
                float _3212 = _2936;
                uint _3213 = _2943;
                uint _3222;
                bool _3223;
                for (;;)
                {
                    _3222 = texelFetch(g_lightClassification, int((((_2819 << 5u) + (_2805 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                    _3223 = _3222 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3223)
                    {
                        frontier_phi_77_pred = _3212;
                        frontier_phi_77_pred_1 = _3211;
                        frontier_phi_77_pred_2 = _3210;
                        frontier_phi_77_pred_3 = _3209;
                        frontier_phi_77_pred_4 = _3208;
                        frontier_phi_77_pred_5 = _3207;
                    }
                    else
                    {
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3429 = _3207;
                        float _3430 = _3208;
                        float _3431 = _3209;
                        float _3432 = _3210;
                        float _3433 = _3211;
                        float _3434 = _3212;
                        uint _3435 = _3222;
                        uint _3436;
                        vec4 _3461;
                        float _3462;
                        vec4 _3477;
                        vec3 _3489;
                        vec4 _3504;
                        vec4 _3519;
                        float _3565;
                        bool _3566;
                        for (;;)
                        {
                            uint _3446 = ((_3213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3435));
                            _3436 = (_3435 + 4294967295u) & _3435;
                            uint _3448 = _3446 * 40u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            _3462 = _3461.w;
                            uint _3464 = (_3446 * 40u) + 4u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3446 * 40u) + 8u;
                            _3489 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x));
                            uint _3491 = (_3446 * 40u) + 16u;
                            _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3506 = (_3446 * 40u) + 20u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            uint _3521 = (_3446 * 40u) + 24u;
                            vec4 _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3540 = (_3446 * 40u) + 28u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            _3565 = fma(_2781, _3553.z, fma(_2780, _3553.y, _3553.x * _2779)) + _3553.w;
                            _3566 = !((fma(_2781, _3534.z, fma(_2780, _3534.y, _3534.x * _2779)) + _3534.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3566)
                            {
                                float _3593 = _3461.x - _2779;
                                float _3594 = _3461.y - _2780;
                                float _3595 = _3461.z - _2781;
                                float _3596 = dot(vec3(_3593, _3594, _3595), vec3(_3593, _3594, _3595));
                                float _3599 = inversesqrt(_3596);
                                float _3600 = _3599 * _3593;
                                float _3601 = _3599 * _3594;
                                float _3602 = _3599 * _3595;
                                float _3606 = 1.0 - (_3596 / (_3462 * _3462));
                                float _4777 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3611 = sqrt(_3596) * _3477.w;
                                float _3613 = 1.39999997615814208984375 / (_3611 + 1.39999997615814208984375);
                                float _3614 = _3613 * _3613;
                                float _3617 = ((1.0 - _3614) * dot(vec3(_3600, _3601, _3602), vec3(_991, _994, _997))) + _3614;
                                float _3620 = _3611 * _3611;
                                float _3624 = (fma(_2781, _3504.z, fma(_2780, _3504.y, _3504.x * _2779)) + _3504.w) / _3565;
                                float _3625 = (fma(_2781, _3519.z, fma(_2780, _3519.y, _3519.x * _2779)) + _3519.w) / _3565;
                                float _3629 = 1.0 - dot(vec2(_3624, _3625), vec2(_3624, _3625));
                                float _4793 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                                float _3630 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                                float _3631 = _3630 * (((isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0))) * _3607) / ((_3620 * 0.699999988079071044921875) + 1.0));
                                float _3643 = exp2(log2(1.0 / ((_3620 * 3.5) + 5.0)) * 0.25);
                                float _3644 = 1.0 - _1066;
                                float _3651 = sqrt(1.0 - ((1.0 - (_3644 * _3644)) * (1.0 - (_3643 * _3643))));
                                float _3652 = _3651 * _3651;
                                float _3653 = _3652 * _3652;
                                float _3654 = _3600 - _3073;
                                float _3655 = _3601 - _3074;
                                float _3656 = _3602 - _3075;
                                float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                                float _3664 = dot(vec3(_991, _994, _997), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4804 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3667 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3668 = dot(vec3(_991, _994, _997), vec3(_3660 * _3654, _3660 * _3655, _3660 * _3656));
                                float _4815 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3675 = ((_3671 * _3671) * (_3653 + (-1.0))) + 1.0;
                                float _3676 = _3613 * _3652;
                                float _3677 = _3676 * _3676;
                                float _3683 = ((1.0 - _3677) * dot(vec3(_991, _994, _997), vec3(_3600, _3601, _3602))) + _3677;
                                float _4826 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3685 = 1.0 - _3652;
                                float _3695 = (0.5 / (((_3684 * ((_3667 * _3685) + _3652)) + 9.9999999392252902907785028219223e-09) + (((_3684 * _3685) + _3652) * _3667))) * _3684;
                                float _4837 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3705 = (_3630 * _3607) * (((_3653 * 3.1415927410125732421875) * (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) / ((_3675 * _3675) * ((_3620 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3631 * _3477.y;
                                frontier_phi_83_pred_1 = _3631 * _3477.x;
                                frontier_phi_83_pred_2 = _3705 * _3489.z;
                                frontier_phi_83_pred_3 = _3705 * _3489.y;
                                frontier_phi_83_pred_4 = _3705 * _3489.x;
                                frontier_phi_83_pred_5 = _3631 * _3477.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3713 = frontier_phi_83_pred;
                            _3712 = frontier_phi_83_pred_1;
                            _3711 = frontier_phi_83_pred_2;
                            _3710 = frontier_phi_83_pred_3;
                            _3709 = frontier_phi_83_pred_4;
                            _3714 = frontier_phi_83_pred_5;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            _3418 = _3711 + _3431;
                            if (_3436 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3436;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3421;
                        frontier_phi_77_pred_1 = _3420;
                        frontier_phi_77_pred_2 = _3419;
                        frontier_phi_77_pred_3 = _3418;
                        frontier_phi_77_pred_4 = _3417;
                        frontier_phi_77_pred_5 = _3416;
                    }
                    _3058 = frontier_phi_77_pred;
                    _3056 = frontier_phi_77_pred_1;
                    _3054 = frontier_phi_77_pred_2;
                    _3052 = frontier_phi_77_pred_3;
                    _3050 = frontier_phi_77_pred_4;
                    _3048 = frontier_phi_77_pred_5;
                    uint _3214 = _3213 + 1u;
                    if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3207 = _3048;
                        _3208 = _3050;
                        _3209 = _3052;
                        _3210 = _3054;
                        _3211 = _3056;
                        _3212 = _3058;
                        _3213 = _3214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3052;
                frontier_phi_58_59_ladder_1 = _3058;
                frontier_phi_58_59_ladder_2 = _3056;
                frontier_phi_58_59_ladder_3 = _3054;
                frontier_phi_58_59_ladder_4 = _3050;
                frontier_phi_58_59_ladder_5 = _3048;
            }
            else
            {
                frontier_phi_58_59_ladder = _2930;
                frontier_phi_58_59_ladder_1 = _2936;
                frontier_phi_58_59_ladder_2 = _2934;
                frontier_phi_58_59_ladder_3 = _2932;
                frontier_phi_58_59_ladder_4 = _2928;
                frontier_phi_58_59_ladder_5 = _2926;
            }
            _3047 = frontier_phi_58_59_ladder_5;
            _3049 = frontier_phi_58_59_ladder_4;
            _3051 = frontier_phi_58_59_ladder;
            _3053 = frontier_phi_58_59_ladder_3;
            _3055 = frontier_phi_58_59_ladder_2;
            _3057 = frontier_phi_58_59_ladder_1;
        }
        float _3062 = isnan(1.0) ? _1050 : (isnan(_1050) ? 1.0 : min(_1050, 1.0));
        _2838 = (_3062 * _3053) + _2271;
        _2840 = (_3062 * _3055) + _2273;
        _2842 = (_3062 * _3057) + _2275;
        _2844 = ((_3047 * _1034) * _3062) + _2619;
        _2846 = ((_3049 * _1036) * _3062) + _2621;
        _2848 = ((_3051 * _1037) * _3062) + _2623;
    }
    else
    {
        _2838 = _2271;
        _2840 = _2273;
        _2842 = _2275;
        _2844 = _2619;
        _2846 = _2621;
        _2848 = _2623;
    }
    float _4853 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4864 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _4875 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _2865 = ((isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0))) * (_2838 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1050))) + ((_2844 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1888)) * cbPerFrame._m0[3u].x);
    float _2866 = ((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2840 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1050))) + ((_2846 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1888)) * cbPerFrame._m0[3u].x);
    float _2867 = ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2842 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1050))) + ((_2848 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1888)) * cbPerFrame._m0[3u].x);
    uint _2868 = _282 + 6u;
    float _2876 = _972 / cbSceneParam._m0[86u].x;
    float _2877 = _973 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _894 : (isnan(_894) ? cbSceneParam._m0[77u].w : min(_894, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    if (_894 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_894) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _894 : min(cbSceneParam._m0[80u].w, _894));
        float _2952 = _2951 / _894;
        float _2963 = _2952 * _945;
        float _2964 = _946 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2967 = _2952 * _947;
        float _2969 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2970 = _2969 + cbSceneParam._m0[79u].w;
        float _2971 = cbSceneParam._m0[79u].w - _2964;
        float _2977 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2967 * _2967));
        float _2980 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2977;
        float _2985 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2987 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3164;
        if (abs((_2965 - _2969) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3164 = ((((_2970 > 0.0) ? exp2(_2985 * _2970) : (2.0 - exp2(_2987 * _2970))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2980;
        }
        else
        {
            float _3108 = 1.0 / cbSceneParam._m0[80u].x;
            float _3109 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : max(_2970, _2971));
            float _3110 = isnan(_2971) ? _2970 : (isnan(_2970) ? _2971 : min(_2970, _2971));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            _3164 = ((abs(_2977 / _2965) * cbSceneParam._m0[80u].y) * ((((_3119 - _3120) * 2.0) - ((exp2(_2985 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)))) - exp2(_2985 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))))) * _3108)) - ((exp2(_2987 * _3119) - exp2(_2987 * _3120)) * _3108))) + (_2980 * cbSceneParam._m0[80u].z);
        }
        vec4 _3166 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3175 = exp2((_3164 * (-1.44269502162933349609375)) * (1.0 - _3166.w));
        float _3176 = log2(_3175);
        float _3192 = log2(_2896);
        _2989 = (exp2(_3192 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].x)) * _3166.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2991 = (exp2(_3192 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].y)) * _3166.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2993 = (exp2(_3192 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3176 * cbSceneParam._m0[78u].z)) * _3166.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2995 = _3175 * _2896;
    }
    else
    {
        _2989 = _2893;
        _2991 = _2894;
        _2993 = _2895;
        _2995 = _2896;
    }
    bool _3202;
    vec4 _3005;
    vec4 _3027;
    float _3029;
    float _3033;
    float _3034;
    float _3035;
    float _3036;
    bool _3046;
    for (;;)
    {
        _3005 = cbMatDynParam._m0[0u];
        float _3007 = roundEven(_3005.y);
        bool _3008 = _3007 == 3.0;
        float _3009 = log2(_2995);
        float _3016 = exp2(_3009 * cbSceneParam._m0[78u].x) * _2865;
        float _3017 = exp2(_3009 * cbSceneParam._m0[78u].y) * _2866;
        float _3018 = exp2(_3009 * cbSceneParam._m0[78u].z) * _2867;
        float _3025 = _961 + (-0.5);
        _3027 = cbMtdParam._m0[1u];
        _3029 = _3027.y * _3025;
        float _3032 = (_3007 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3033 = _3032 * (_3008 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2989)));
        _3034 = _3032 * (_3008 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2991)));
        _3035 = _3032 * (_3008 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2993)));
        _3036 = _3025 * 0.999000012874603271484375;
        _3046 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3046)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3036) < 0.5)
            {
                _3202 = true;
                break;
            }
        }
        uint _3143 = _1010 + uint(_3005.w);
        if ((cbInstanceData._m0[_3143].w < 1.0) && ((cbInstanceData._m0[_3143].w + _3036) < 0.5))
        {
            _3202 = true;
            break;
        }
        if ((_3029 + 1.0) < _3027.x)
        {
            _3202 = true;
            break;
        }
        _3202 = false;
        break;
    }
    float _3407;
    if (_3202)
    {
        discard_state = true;
        _3407 = 0.0;
    }
    else
    {
        _3407 = cbInstanceData._m0[_2868].w;
    }
    SV_Target.x = _3033;
    SV_Target.y = _3034;
    SV_Target.z = _3035;
    SV_Target.w = _3407;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
    discard_exit();
}


