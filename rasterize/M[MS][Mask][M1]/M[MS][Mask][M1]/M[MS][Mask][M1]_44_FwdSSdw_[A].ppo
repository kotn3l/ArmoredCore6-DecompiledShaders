#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1400;
float _3803;
float _3804;
float _3805;
float _3806;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3815 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3826 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _3837 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _434 = _432.x;
    float _446 = dot(vec4(_434, _432.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _463 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_434 - _446) * cbMtdParam._m0[23u].w) + _446) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3848 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _474 = (_332.x * cbMtdParam._m0[9u].x) * ((_464 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363);
    float _475 = (_332.y * cbMtdParam._m0[9u].y) * ((_464 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364);
    float _476 = (_332.z * cbMtdParam._m0[9u].z) * ((_464 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365);
    float _480 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _474;
    float _483 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _475;
    float _486 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _476;
    float _494 = (((_474 - _480) * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) + _480) * 4.55000019073486328125;
    float _496 = (((_475 - _483) * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) + _483) * 4.55000019073486328125;
    float _498 = (((_476 - _486) * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) + _486) * 4.55000019073486328125;
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = _581.x;
    float _584 = _581.y;
    float _585 = _581.z;
    float _594 = ((_564.z - _585) * _464) + _585;
    float _597 = ((((_564.x - _583) * _464) + _583) * 2.0) + (-1.0);
    float _598 = ((((_564.y - _584) * _464) + _584) * 2.0) + (-1.0);
    float _599 = dot(vec2(_597, _598), vec2(_597, _598));
    float _3859 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _636 = (_597 + ((((_537.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_624.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _637 = (_598 + ((((_537.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_624.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _640 = fma(_604, _243, fma(_637, _250, _636 * _236));
    float _643 = fma(_604, _244, fma(_637, _251, _636 * _237));
    float _646 = fma(_604, _245, fma(_637, _252, _636 * _238));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _679 = _677.x;
    float _680 = 1.0 - _679;
    float _689 = (cbMtdParam._m0[19u].x + dot(vec4(_650 * _640, _650 * _643, _650 * _646, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_679 - _680) * cbMtdParam._m0[24u].z) + _680) * cbMtdParam._m0[21u].z);
    float _3870 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _697 = (_690 * ((_517.x * cbMtdParam._m0[18u].x) - _494)) + _494;
    float _698 = (_690 * ((_517.y * cbMtdParam._m0[18u].y) - _496)) + _496;
    float _699 = (_690 * ((_517.z * cbMtdParam._m0[18u].z) - _498)) + _498;
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _727 = _725.x;
    float _744 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _727) * _464) + _727;
    float _748 = ((_711.x - _744) * cbMtdParam._m0[19u].z) + _744;
    float _750 = _748 - (_748 * _690);
    float _755 = (((_537.z - _594) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _594;
    float _759 = ((_624.z - _755) * cbMtdParam._m0[19u].w) + _755;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _779 = (_772.x * 2.0) + (-1.0);
    float _780 = (_772.y * 2.0) + (-1.0);
    float _781 = dot(vec2(_779, _780), vec2(_779, _780));
    float _3881 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _789 = ((_772.z - _759) * _690) + _759;
    float _799 = ((sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) - _604) * _690) + _604;
    float _802 = (((_779 - _636) * _690) + _636) + (cbMtdParam._m0[21u].x * _636);
    float _803 = (((_780 - _637) * _690) + _637) + (cbMtdParam._m0[21u].x * _637);
    float _805 = cbMtdParam._m0[22u].x + _624.w;
    float _808 = fma(_799, _243, fma(_803, _250, _802 * _236));
    float _811 = fma(_799, _244, fma(_803, _251, _802 * _237));
    float _814 = fma(_799, _245, fma(_803, _252, _802 * _238));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _3892 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _822 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _3903 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _3914 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _3925 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3936 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _3947 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _827 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    vec4 _906 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _908 = _906.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1080 = sqrt(((_892 * _892) + (_893 * _893)) + (_894 * _894));
        float _1086 = (cbMatDynParam._m0[5u].x * _1080) + cbMatDynParam._m0[5u].y;
        float _3958 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1091 = (cbMatDynParam._m0[5u].z * _1080) + cbMatDynParam._m0[5u].w;
        float _3969 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) - _1087)) + _1087) < ((_908 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _919 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _920 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _938 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _941 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _944 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _957 = _276 + 9u;
    uint _958 = _957 + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_958].z;
    float _3980 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _970 = 1.0 - _827;
    float _971 = _967 * _970;
    float _972 = _968 * _970;
    float _973 = _969 * _970;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _827;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _827;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _827;
    float _981 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _919, cbSceneParam._m0[86u].y * _920));
    float _997 = ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * TEXCOORD_5.w) * _993.x;
    float _998 = dot(vec3(_819, _820, _821), vec3(_899, _900, _901));
    float _1001 = _998 * 2.0;
    float _1005 = (_1001 * _819) - _899;
    float _1006 = (_1001 * _820) - _900;
    float _1007 = (_1001 * _821) - _901;
    float _1011 = abs(dot(vec3(_899, _900, _901), vec3(_819, _820, _821)));
    float _4013 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1013 = sqrt(_822);
    float _1026 = exp2((_1013 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1013 * 3.0));
    float _1032 = (1.0 - _1026) * ((_1013 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1033 = _1026 * _1013;
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1399;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1124 = fma(_1069, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061));
        float _1128 = fma(_1069, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061));
        float _1132 = fma(_1069, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061));
        float _1157 = _1061 + _819;
        float _1158 = _1065 + _820;
        float _1159 = _1069 + _821;
        float _1169 = fma(_1159, cbModelParam._m0[26u].z, fma(_1158, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1157)) - _1124;
        float _1170 = fma(_1159, cbModelParam._m0[27u].z, fma(_1158, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1157)) - _1128;
        float _1171 = fma(_1159, cbModelParam._m0[28u].z, fma(_1158, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1157)) - _1132;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1124 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1128 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[34u].z) + ((((((_1132 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1227 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1193.x + (-0.5));
        float _1229 = _1227 * (_1193.y + (-0.5));
        float _1230 = _1227 * (_1193.z + (-0.5));
        float _1237 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1200.x + (-0.5));
        float _1239 = _1237 * (_1200.y + (-0.5));
        float _1240 = _1237 * (_1200.z + (-0.5));
        float _1247 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1207.x + (-0.5));
        float _1249 = _1247 * (_1207.y + (-0.5));
        float _1250 = _1247 * (_1207.z + (-0.5));
        float _1257 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1214.x + (-0.5));
        float _1259 = _1257 * (_1214.y + (-0.5));
        float _1260 = _1257 * (_1214.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1281 = (dot(vec3(_819, _820, _821), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1291 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4061 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1293 + 1.0))) + _1298) * _1261;
        float _1308 = _1229 * 0.5;
        float _1309 = _1239 * 0.5;
        float _1310 = _1249 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_819, _820, _821), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4094 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1335 + 1.0))) + _1340) * _1262;
        float _1350 = _1230 * 0.5;
        float _1351 = _1240 * 0.5;
        float _1352 = _1250 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_819, _820, _821), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4127 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1377 + 1.0))) + _1382) * _1263;
        _1399 = _1230;
        _1401 = _1229;
        _1402 = _1228;
        _1403 = _1240;
        _1404 = _1239;
        _1405 = _1238;
        _1406 = _1250;
        _1407 = _1249;
        _1408 = _1248;
        _1409 = _1263;
        _1410 = _1262;
        _1411 = _1261;
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1400;
        _1401 = _1400;
        _1402 = _1400;
        _1403 = _1400;
        _1404 = _1400;
        _1405 = _1400;
        _1406 = _1400;
        _1407 = _1400;
        _1408 = _1400;
        _1409 = _1400;
        _1410 = _1400;
        _1411 = _1400;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1069, cbModelParam._m0[30u].z, fma(_1065, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061));
        float _1446 = fma(_1069, cbModelParam._m0[31u].z, fma(_1065, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061));
        float _1450 = fma(_1069, cbModelParam._m0[32u].z, fma(_1065, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061));
        float _1473 = _1061 + _819;
        float _1474 = _1065 + _820;
        float _1475 = _1069 + _821;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_819, _820, _821), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4190 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_819, _820, _821), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4223 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_819, _820, _821), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4256 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1400;
        _1712 = _1400;
        _1713 = _1400;
        _1714 = _1400;
        _1715 = _1400;
        _1716 = _1400;
        _1717 = _1400;
        _1718 = _1400;
        _1719 = _1400;
        _1720 = _1400;
        _1721 = _1400;
        _1722 = _1400;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1412)) + _1412;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1413)) + _1413;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1414)) + _1414;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1005 * 0.5;
    float _1780 = _1006 * 0.5;
    float _1781 = _1007 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1399, _1403, _1406, _1409));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1069, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1069, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1069, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1007, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005));
        float _1909 = fma(_1007, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005));
        float _1912 = fma(_1007, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1940 = frontier_phi_17_15_ladder;
        }
        float _2163;
        if (_1909 > 0.0)
        {
            _2163 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2163 = frontier_phi_26_22_ladder;
        }
        float _2420;
        if (_1912 > 0.0)
        {
            _2420 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2420 = frontier_phi_38_33_ladder;
        }
        float _2422 = isnan(_2163) ? _1940 : (isnan(_1940) ? _2163 : min(_1940, _2163));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1906) + _1895;
        float _2428 = (_2423 * _1909) + _1899;
        float _2429 = (_2423 * _1912) + _1903;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2430;
        float _2434 = _2430 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 > _2434) || ((_2428 < _2432) || ((_2427 < _2432) || (_2427 > _2434))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2429, cbModelParam._m0[9u].z, fma(_2428, cbModelParam._m0[9u].y, _2427 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2429, cbModelParam._m0[10u].z, fma(_2428, cbModelParam._m0[10u].y, _2427 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2429, cbModelParam._m0[11u].z, fma(_2428, cbModelParam._m0[11u].y, _2427 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_16_38_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_16_38_ladder_2;
        _1930 = frontier_phi_16_38_ladder_1;
        _1932 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1005, _1006, _1007), _1848);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1990 = fma(_1069, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061)) + cbModelParam._m0[21u].w;
        float _1994 = fma(_1069, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061)) + cbModelParam._m0[22u].w;
        float _1998 = fma(_1069, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061)) + cbModelParam._m0[23u].w;
        float _2001 = fma(_1007, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005));
        float _2004 = fma(_1007, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005));
        float _2007 = fma(_1007, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005));
        float _2168;
        if (_2001 > 0.0)
        {
            _2168 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2168 = frontier_phi_28_24_ladder;
        }
        float _2447;
        if (_2004 > 0.0)
        {
            _2447 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2447 = frontier_phi_40_35_ladder;
        }
        float _2660;
        if (_2007 > 0.0)
        {
            _2660 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2660 = frontier_phi_49_46_ladder;
        }
        float _2662 = isnan(_2447) ? _2168 : (isnan(_2168) ? _2447 : min(_2168, _2447));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _2001) + _1990;
        float _2668 = (_2663 * _2004) + _1994;
        float _2669 = (_2663 * _2007) + _1998;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_25_49_ladder = _2868.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2868.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2868.x * cbModelParam._m0[1u].z;
        }
        _2026 = frontier_phi_25_49_ladder_2;
        _2028 = frontier_phi_25_49_ladder_1;
        _2030 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1005, _1006, _1007), _1937);
        _2026 = _2010.x * cbModelParam._m0[1u].z;
        _2028 = _2010.y * cbModelParam._m0[1u].z;
        _2030 = _2010.z * cbModelParam._m0[1u].z;
    }
    float _2043 = (((_1032 * _981) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2026 - _1928)) + _1928);
    float _2045 = (((_1032 * _983) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2028 - _1930)) + _1930);
    float _2047 = (((_1032 * _984) + _1033) * _997) * ((cbModelParam._m0[1u].w * (_2030 - _1932)) + _1932);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2043 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2043 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2043 * cbSceneParam._m0[91u].x));
    vec4 _2064 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_919, _920));
    float _2066 = _2064.w;
    float _2078 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2066);
    float _2079 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2066);
    float _2080 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2066);
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _997 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2122 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2126 = _2086 | 1u;
    float _2137 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_819, _820, _821));
    float _2140 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_819, _820, _821));
    float _4392 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _4403 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2145 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2147 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.3183098733425140380859375;
    float _2154 = ((cbLight._m0[_2103].x * _2109) * _2147) + (((cbLight._m0[_2113].x * _2078) * _2122) * _2145);
    float _2155 = ((_2109 * cbLight._m0[_2103].y) * _2147) + (((cbLight._m0[_2113].y * _2079) * _2122) * _2145);
    float _2156 = ((_2109 * cbLight._m0[_2103].z) * _2147) + (((cbLight._m0[_2113].z * _2080) * _2122) * _2145);
    uvec4 _2160 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2162 = _2160.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2162)
    {
        _2173 = _2154;
        _2175 = _2155;
        _2177 = _2156;
    }
    else
    {
        uint _2181 = _2086 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4414 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2200 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2154;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2155;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2156;
    }
    bool _2180 = _2160.y == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2180)
    {
        _2218 = _2173;
        _2220 = _2175;
        _2222 = _2177;
    }
    else
    {
        uint _2391 = _2086 + 7u;
        float _2407 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4430 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2410 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2218 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2173;
        _2220 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2175;
        _2222 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2177;
    }
    uint _2225 = _2086 + 8u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _822) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_2086].x + _899;
    float _2241 = cbLight._m0[_2086].y + _900;
    float _2242 = cbLight._m0[_2086].z + _901;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2086].xyz));
    float _4446 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _4457 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _2254 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2255 = dot(vec3(_819, _820, _821), vec3(_2247, _2248, _2249));
    float _4468 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2247, _2248, _2249));
    float _4479 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2239 * _2239;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
    float _2276 = 0.959999978542327880859375 - _978;
    float _2278 = 0.959999978542327880859375 - _979;
    float _2279 = 0.959999978542327880859375 - _980;
    float _2286 = 1.0 - _2239;
    float _2297 = (0.5 / (((_2254 * ((_2253 * _2286) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2286) + _2239) * _2253))) * _2253;
    float _4490 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    uint _2313 = _2086 + 9u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _822) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2126].x + _899;
    float _2327 = cbLight._m0[_2126].y + _900;
    float _2328 = cbLight._m0[_2126].z + _901;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2126].xyz));
    float _4501 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2340 = dot(vec3(_819, _820, _821), vec3(_2333, _2334, _2335));
    float _4512 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2333, _2334, _2335));
    float _4523 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2325 * _2325;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
    float _2366 = 1.0 - _2325;
    float _2376 = (0.5 / (((_2254 * ((_2339 * _2366) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2366) + _2325) * _2339))) * _2339;
    float _4534 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    float _2388 = (((((_2359 * _2276) + _981) * cbLight._m0[_2313].x) * _2378) * _2109) + ((((cbLight._m0[_2225].x * _2078) * ((_2275 * _2276) + _981)) * _2299) * _2122);
    float _2389 = (((((_2359 * _2278) + _983) * cbLight._m0[_2313].y) * _2378) * _2109) + ((((cbLight._m0[_2225].y * _2079) * ((_2275 * _2278) + _983)) * _2299) * _2122);
    float _2390 = (((((_2359 * _2279) + _984) * cbLight._m0[_2313].z) * _2378) * _2109) + ((((cbLight._m0[_2225].z * _2080) * ((_2275 * _2279) + _984)) * _2299) * _2122);
    float _2452;
    float _2454;
    float _2456;
    if (_2162)
    {
        _2452 = _2388;
        _2454 = _2389;
        _2456 = _2390;
    }
    else
    {
        uint _2458 = _2086 + 2u;
        uint _2462 = _2086 + 10u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _822) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _899;
        float _2479 = cbLight._m0[_2458].y + _900;
        float _2480 = cbLight._m0[_2458].z + _901;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2458].xyz));
        float _4545 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2492 = dot(vec3(_819, _820, _821), vec3(_2485, _2486, _2487));
        float _4556 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4567 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
        float _2518 = 1.0 - _2477;
        float _2528 = (0.5 / (((_2254 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2518) + _2477) * _2491))) * _2491;
        float _4578 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2531 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2452 = (((((_2511 * _2276) + _981) * cbLight._m0[_2462].x) * _2530) * _2531) + _2388;
        _2454 = (((((_2511 * _2278) + _983) * cbLight._m0[_2462].y) * _2530) * _2531) + _2389;
        _2456 = (((((_2511 * _2279) + _984) * cbLight._m0[_2462].z) * _2530) * _2531) + _2390;
    }
    float _2566;
    float _2568;
    float _2570;
    if (_2180)
    {
        _2566 = _2452;
        _2568 = _2454;
        _2570 = _2456;
    }
    else
    {
        uint _2577 = _2086 + 3u;
        uint _2581 = _2086 + 11u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _822) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _899;
        float _2598 = cbLight._m0[_2577].y + _900;
        float _2599 = cbLight._m0[_2577].z + _901;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2577].xyz));
        float _4594 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2611 = dot(vec3(_819, _820, _821), vec3(_2604, _2605, _2606));
        float _4605 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
        float _2637 = 1.0 - _2596;
        float _2647 = (0.5 / (((_2254 * ((_2610 * _2637) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2637) + _2596) * _2610))) * _2610;
        float _4627 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2649 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2650 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2566 = (((((_2630 * _2276) + _981) * cbLight._m0[_2581].x) * _2649) * _2650) + _2452;
        _2568 = (((((_2630 * _2278) + _983) * cbLight._m0[_2581].y) * _2649) * _2650) + _2454;
        _2570 = (((((_2630 * _2279) + _984) * cbLight._m0[_2581].z) * _2649) * _2650) + _2456;
    }
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_2084.y == 0u)
    {
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2725;
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2725;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2725;
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.x;
        uint _2752 = uint((float(_2740.y) * floor(float(uint(cbSceneParam._m0[85u].y * _920) / _2741))) + floor(float(uint(cbSceneParam._m0[85u].x * _919) / _2741)));
        float _2762 = (log2(_2728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2763 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        uint _2766 = uint(isnan(14.0) ? _2763 : (isnan(_2763) ? 14.0 : min(_2763, 14.0)));
        uvec4 _2771 = texelFetch(g_lightClusterGridBuffer, int(((_2766 << 2u) + (_2752 << 6u)) >> 2u));
        uint _2772 = _2771.x;
        uint _2773 = _2740.z;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((((1u << ((_2773 >> 4u) & 15u)) + 4294967295u) & _2772) == 0u) || ((_2773 & 240u) == 0u))
        {
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
        }
        else
        {
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            uint _3032 = 0u;
            uint _3041;
            bool _3042;
            for (;;)
            {
                _3041 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3032 << 2u)) >> 2u)).x;
                _3042 = _3041 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3042)
                {
                    frontier_phi_66_pred = _3026;
                    frontier_phi_66_pred_1 = _3031;
                    frontier_phi_66_pred_2 = _3030;
                    frontier_phi_66_pred_3 = _3029;
                    frontier_phi_66_pred_4 = _3028;
                    frontier_phi_66_pred_5 = _3027;
                }
                else
                {
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    uint _3177;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3041;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    for (;;)
                    {
                        uint _3181 = uint(findLSB(_3177)) + (_3032 << 5u);
                        uint _3178 = (_3177 + 4294967295u) & _3177;
                        uint _3183 = _3181 * 48u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3203 = (_3181 * 48u) + 4u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3222 = (_3181 * 48u) + 8u;
                        vec3 _3233 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x));
                        float _3237 = _3197.x - _2726;
                        float _3238 = _3197.y - _2727;
                        float _3239 = _3197.z - _2728;
                        float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                        float _3243 = inversesqrt(_3240);
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3247 = dot(vec3(_938, _941, _944), vec3(_3244, _3245, _3246));
                        float _3252 = 1.0 - (_3240 * _3197.w);
                        float _4653 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3254 = sqrt(_3240) * _3216.w;
                        float _3257 = 1.39999997615814208984375 / (_3254 + 1.39999997615814208984375);
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3247) + _3258;
                        float _3264 = _3254 * _3254;
                        float _3268 = ((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3253) / ((_3264 * 0.699999988079071044921875) + 1.0);
                        float _3272 = (-0.0) - _2726;
                        float _3273 = (-0.0) - _2727;
                        float _3274 = (-0.0) - _2728;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3289 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                        float _3290 = 1.0 - _1013;
                        float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                        float _3298 = _3297 * _3297;
                        float _3299 = _3298 * _3298;
                        float _3300 = _3279 + _3244;
                        float _3301 = _3280 + _3245;
                        float _3302 = _3281 + _3246;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3310 = dot(vec3(_938, _941, _944), vec3(_3279, _3280, _3281));
                        float _4669 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3313 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3314 = dot(vec3(_938, _941, _944), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                        float _4680 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                        float _3322 = _3257 * _3298;
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3247) + _3323;
                        float _4691 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3328 = 1.0 - _3298;
                        float _3338 = (0.5 / (((_3327 * ((_3313 * _3328) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3327 * _3328) + _3298) * _3313))) * _3327;
                        float _4702 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3349 = (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3321 * _3321) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125))) * _3253;
                        _3101 = (_3268 * _3216.x) + _3174;
                        _3102 = (_3268 * _3216.y) + _3175;
                        _3103 = (_3268 * _3216.z) + _3176;
                        _3098 = (_3349 * _3233.x) + _3171;
                        _3099 = (_3349 * _3233.y) + _3172;
                        _3100 = (_3349 * _3233.z) + _3173;
                        if (_3178 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3178;
                        }
                    }
                    frontier_phi_66_pred = _3098;
                    frontier_phi_66_pred_1 = _3103;
                    frontier_phi_66_pred_2 = _3102;
                    frontier_phi_66_pred_3 = _3101;
                    frontier_phi_66_pred_4 = _3100;
                    frontier_phi_66_pred_5 = _3099;
                }
                _2874 = frontier_phi_66_pred;
                _2884 = frontier_phi_66_pred_1;
                _2882 = frontier_phi_66_pred_2;
                _2880 = frontier_phi_66_pred_3;
                _2878 = frontier_phi_66_pred_4;
                _2876 = frontier_phi_66_pred_5;
                uint _3033 = _3032 + 1u;
                if (_3033 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3026 = _2874;
                    _3027 = _2876;
                    _3028 = _2878;
                    _3029 = _2880;
                    _3030 = _2882;
                    _3031 = _2884;
                    _3032 = _3033;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
        }
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.z;
        uint _2890 = (_2888 >> 8u) & 15u;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((4294967295u << _2890) & _2772) == 0u)
        {
            _2994 = _2873;
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
        }
        else
        {
            float _3019 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
            float _3020 = _3019 * _2726;
            float _3021 = _3019 * _2727;
            float _3022 = _3019 * _2728;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2890 < ((_2888 >> 12u) & 15u))
            {
                float _2995;
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3154 = _2873;
                float _3155 = _2875;
                float _3156 = _2877;
                float _3157 = _2879;
                float _3158 = _2881;
                float _3159 = _2883;
                uint _3160 = _2890;
                uint _3169;
                bool _3170;
                for (;;)
                {
                    _3169 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3160 << 2u)) >> 2u)).x;
                    _3170 = _3169 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3170)
                    {
                        frontier_phi_77_pred = _3159;
                        frontier_phi_77_pred_1 = _3158;
                        frontier_phi_77_pred_2 = _3157;
                        frontier_phi_77_pred_3 = _3156;
                        frontier_phi_77_pred_4 = _3155;
                        frontier_phi_77_pred_5 = _3154;
                    }
                    else
                    {
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3376 = _3154;
                        float _3377 = _3155;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        uint _3382 = _3169;
                        uint _3383;
                        vec4 _3408;
                        float _3409;
                        vec4 _3424;
                        vec3 _3436;
                        vec4 _3451;
                        vec4 _3466;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3393 = ((_3160 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3382));
                            _3383 = (_3382 + 4294967295u) & _3382;
                            uint _3395 = _3393 * 40u;
                            _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            _3409 = _3408.w;
                            uint _3411 = (_3393 * 40u) + 4u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3426 = (_3393 * 40u) + 8u;
                            _3436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x));
                            uint _3438 = (_3393 * 40u) + 16u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3393 * 40u) + 20u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3393 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3393 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_2728, _3500.z, fma(_2727, _3500.y, _3500.x * _2726)) + _3500.w;
                            _3513 = !((fma(_2728, _3481.z, fma(_2727, _3481.y, _3481.x * _2726)) + _3481.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3408.x - _2726;
                                float _3541 = _3408.y - _2727;
                                float _3542 = _3408.z - _2728;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3409 * _3409));
                                float _4713 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3558 = sqrt(_3543) * _3424.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_938, _941, _944))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_2728, _3451.z, fma(_2727, _3451.y, _3451.x * _2726)) + _3451.w) / _3512;
                                float _3572 = (fma(_2728, _3466.z, fma(_2727, _3466.y, _3466.x * _2726)) + _3466.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4729 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _1013;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3020;
                                float _3602 = _3548 - _3021;
                                float _3603 = _3549 - _3022;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_938, _941, _944), vec3((-0.0) - _3020, (-0.0) - _3021, (-0.0) - _3022));
                                float _4740 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3615 = dot(vec3(_938, _941, _944), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4751 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_938, _941, _944), vec3(_3547, _3548, _3549))) + _3624;
                                float _4762 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4773 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3578 * _3424.y;
                                frontier_phi_83_pred_1 = _3578 * _3424.x;
                                frontier_phi_83_pred_2 = _3652 * _3436.z;
                                frontier_phi_83_pred_3 = _3652 * _3436.y;
                                frontier_phi_83_pred_4 = _3652 * _3436.x;
                                frontier_phi_83_pred_5 = _3578 * _3424.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3660 = frontier_phi_83_pred;
                            _3659 = frontier_phi_83_pred_1;
                            _3658 = frontier_phi_83_pred_2;
                            _3657 = frontier_phi_83_pred_3;
                            _3656 = frontier_phi_83_pred_4;
                            _3661 = frontier_phi_83_pred_5;
                            _3366 = _3659 + _3379;
                            _3367 = _3660 + _3380;
                            _3368 = _3661 + _3381;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            if (_3383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3383;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3368;
                        frontier_phi_77_pred_1 = _3367;
                        frontier_phi_77_pred_2 = _3366;
                        frontier_phi_77_pred_3 = _3365;
                        frontier_phi_77_pred_4 = _3364;
                        frontier_phi_77_pred_5 = _3363;
                    }
                    _3005 = frontier_phi_77_pred;
                    _3003 = frontier_phi_77_pred_1;
                    _3001 = frontier_phi_77_pred_2;
                    _2999 = frontier_phi_77_pred_3;
                    _2997 = frontier_phi_77_pred_4;
                    _2995 = frontier_phi_77_pred_5;
                    uint _3161 = _3160 + 1u;
                    if (_3161 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3154 = _2995;
                        _3155 = _2997;
                        _3156 = _2999;
                        _3157 = _3001;
                        _3158 = _3003;
                        _3159 = _3005;
                        _3160 = _3161;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2999;
                frontier_phi_58_59_ladder_1 = _3005;
                frontier_phi_58_59_ladder_2 = _3003;
                frontier_phi_58_59_ladder_3 = _3001;
                frontier_phi_58_59_ladder_4 = _2997;
                frontier_phi_58_59_ladder_5 = _2995;
            }
            else
            {
                frontier_phi_58_59_ladder = _2877;
                frontier_phi_58_59_ladder_1 = _2883;
                frontier_phi_58_59_ladder_2 = _2881;
                frontier_phi_58_59_ladder_3 = _2879;
                frontier_phi_58_59_ladder_4 = _2875;
                frontier_phi_58_59_ladder_5 = _2873;
            }
            _2994 = frontier_phi_58_59_ladder_5;
            _2996 = frontier_phi_58_59_ladder_4;
            _2998 = frontier_phi_58_59_ladder;
            _3000 = frontier_phi_58_59_ladder_3;
            _3002 = frontier_phi_58_59_ladder_2;
            _3004 = frontier_phi_58_59_ladder_1;
        }
        float _3009 = isnan(1.0) ? _997 : (isnan(_997) ? 1.0 : min(_997, 1.0));
        _2785 = (_3009 * _3000) + _2218;
        _2787 = (_3009 * _3002) + _2220;
        _2789 = (_3009 * _3004) + _2222;
        _2791 = ((_2994 * _981) * _3009) + _2566;
        _2793 = ((_2996 * _983) * _3009) + _2568;
        _2795 = ((_2998 * _984) * _3009) + _2570;
    }
    else
    {
        _2785 = _2218;
        _2787 = _2220;
        _2789 = _2222;
        _2791 = _2566;
        _2793 = _2568;
        _2795 = _2570;
    }
    float _4789 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4800 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4811 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2812 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2785 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _997))) + ((_2791 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _2813 = ((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2787 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _997))) + ((_2793 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _2814 = ((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2789 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _997))) + ((_2795 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    uint _2815 = _276 + 6u;
    float _2823 = _919 / cbSceneParam._m0[86u].x;
    float _2824 = _920 / cbSceneParam._m0[86u].y;
    vec4 _2838 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2840 = _2838.x;
    float _2841 = _2838.y;
    float _2842 = _2838.z;
    float _2843 = _2838.w;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _2898 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _2899 = _2898 / _841;
        float _2910 = _2899 * _892;
        float _2911 = _893 * _2899;
        float _2912 = (-0.0) - _2911;
        float _2914 = _2899 * _894;
        float _2916 = (cbSceneParam._m0[77u].w * _2912) / _2898;
        float _2917 = _2916 + cbSceneParam._m0[79u].w;
        float _2918 = cbSceneParam._m0[79u].w - _2911;
        float _2924 = sqrt(((_2910 * _2910) + (_2911 * _2911)) + (_2914 * _2914));
        float _2927 = (1.0 - (cbSceneParam._m0[77u].w / _2898)) * _2924;
        float _2932 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3111;
        if (abs((_2912 - _2916) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3111 = ((((_2917 > 0.0) ? exp2(_2932 * _2917) : (2.0 - exp2(_2934 * _2917))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2927;
        }
        else
        {
            float _3055 = 1.0 / cbSceneParam._m0[80u].x;
            float _3056 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : max(_2917, _2918));
            float _3057 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : min(_2917, _2918));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            float _3067 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : min(_3057, 0.0));
            _3111 = ((abs(_2924 / _2912) * cbSceneParam._m0[80u].y) * ((((_3066 - _3067) * 2.0) - ((exp2(_2932 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0)))) - exp2(_2932 * (isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))))) * _3055)) - ((exp2(_2934 * _3066) - exp2(_2934 * _3067)) * _3055))) + (_2927 * cbSceneParam._m0[80u].z);
        }
        vec4 _3113 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, 1.0), 0.0);
        float _3122 = exp2((_3111 * (-1.44269502162933349609375)) * (1.0 - _3113.w));
        float _3123 = log2(_3122);
        float _3139 = log2(_2843);
        _2936 = (exp2(_3139 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].x)) * _3113.x) / cbSceneParam._m0[78u].x)) + _2840;
        _2938 = (exp2(_3139 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].y)) * _3113.y) / cbSceneParam._m0[78u].y)) + _2841;
        _2940 = (exp2(_3139 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3123 * cbSceneParam._m0[78u].z)) * _3113.z) / cbSceneParam._m0[78u].z)) + _2842;
        _2942 = _3122 * _2843;
    }
    else
    {
        _2936 = _2840;
        _2938 = _2841;
        _2940 = _2842;
        _2942 = _2843;
    }
    bool _3149;
    vec4 _2952;
    vec4 _2974;
    float _2976;
    float _2980;
    float _2981;
    float _2982;
    float _2983;
    bool _2993;
    for (;;)
    {
        _2952 = cbMatDynParam._m0[0u];
        float _2954 = roundEven(_2952.y);
        bool _2955 = _2954 == 3.0;
        float _2956 = log2(_2942);
        float _2963 = exp2(_2956 * cbSceneParam._m0[78u].x) * _2812;
        float _2964 = exp2(_2956 * cbSceneParam._m0[78u].y) * _2813;
        float _2965 = exp2(_2956 * cbSceneParam._m0[78u].z) * _2814;
        float _2972 = _908 + (-0.5);
        _2974 = cbMtdParam._m0[1u];
        _2976 = _2974.y * _2972;
        float _2979 = (_2954 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2980 = _2979 * (_2955 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2936)));
        _2981 = _2979 * (_2955 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
        _2982 = _2979 * (_2955 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
        _2983 = _2972 * 0.999000012874603271484375;
        _2993 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2993)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _2983) < 0.5)
            {
                _3149 = true;
                break;
            }
        }
        uint _3090 = _957 + uint(_2952.w);
        if ((cbInstanceData._m0[_3090].w < 1.0) && ((cbInstanceData._m0[_3090].w + _2983) < 0.5))
        {
            _3149 = true;
            break;
        }
        if ((_2976 + 1.0) < _2974.x)
        {
            _3149 = true;
            break;
        }
        _3149 = false;
        break;
    }
    float _3354;
    if (_3149)
    {
        discard_state = true;
        _3354 = 0.0;
    }
    else
    {
        _3354 = cbInstanceData._m0[_2815].w;
    }
    SV_Target.x = _2980;
    SV_Target.y = _2981;
    SV_Target.z = _2982;
    SV_Target.w = _3354;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2815].w;
    discard_exit();
}


