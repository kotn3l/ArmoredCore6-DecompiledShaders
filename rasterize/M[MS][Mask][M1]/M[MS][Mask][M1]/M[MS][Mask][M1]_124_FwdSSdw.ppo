#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1577;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _246 = _245 * _237;
    float _247 = _245 * _238;
    float _248 = _245 * _239;
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = _252 * NORMAL.x;
    float _254 = _252 * NORMAL.y;
    float _255 = _252 * NORMAL.z;
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = _259 * TANGENT.x;
    float _261 = _259 * TANGENT.y;
    float _262 = _259 * TANGENT.z;
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3925 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3936 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3947 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _373 = _368.x * cbMtdParam._m0[11u].x;
    float _374 = _368.y * cbMtdParam._m0[11u].y;
    float _375 = _368.z * cbMtdParam._m0[11u].z;
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _462 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _479 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _413.x) * 2.0) - ((((_450 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3958 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _487 = (_480 * ((_394.x * cbMtdParam._m0[12u].x) - _373)) + _373;
    float _488 = (_480 * ((_394.y * cbMtdParam._m0[12u].y) - _374)) + _374;
    float _489 = (_480 * ((_394.z * cbMtdParam._m0[12u].z) - _375)) + _375;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _528 = _526.x;
    float _538 = dot(vec4(_528, _526.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _552 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _413.y) * 2.0) - ((((_528 - _538) * cbMtdParam._m0[23u].w) + _538) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3969 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _560 = (_553 * ((_506.x * cbMtdParam._m0[13u].x) - _487)) + _487;
    float _561 = (_553 * ((_506.y * cbMtdParam._m0[13u].y) - _488)) + _488;
    float _562 = (_553 * ((_506.z * cbMtdParam._m0[13u].z) - _489)) + _489;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _600 = _598.x;
    float _610 = dot(vec4(_600, _598.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _622 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _413.z) * 2.0) - ((((_600 - _610) * cbMtdParam._m0[23u].w) + _610) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3980 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _633 = (_342.x * cbMtdParam._m0[9u].x) * ((_623 * ((_581.x * cbMtdParam._m0[14u].x) - _560)) + _560);
    float _634 = (_342.y * cbMtdParam._m0[9u].y) * ((_623 * ((_581.y * cbMtdParam._m0[14u].y) - _561)) + _561);
    float _635 = (_342.z * cbMtdParam._m0[9u].z) * ((_623 * ((_581.z * cbMtdParam._m0[14u].z) - _562)) + _562);
    float _639 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _633;
    float _642 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _634;
    float _645 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _635;
    float _653 = (((_633 - _639) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) + _639) * 4.55000019073486328125;
    float _655 = (((_634 - _642) * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) + _642) * 4.55000019073486328125;
    float _657 = (((_635 - _645) * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) + _645) * 4.55000019073486328125;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = _716.x;
    float _719 = _716.y;
    float _720 = _716.z;
    float _727 = ((_699.x - _718) * _480) + _718;
    float _728 = ((_699.y - _719) * _480) + _719;
    float _729 = ((_699.z - _720) * _480) + _720;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _752 = ((_741.x - _727) * _553) + _727;
    float _753 = ((_741.y - _728) * _553) + _728;
    float _754 = ((_741.z - _729) * _553) + _729;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _779 = ((_766.z - _754) * _623) + _754;
    float _782 = ((((_766.x - _752) * _623) + _752) * 2.0) + (-1.0);
    float _783 = ((((_766.y - _753) * _623) + _753) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3991 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))));
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _819 = (_782 + ((((_674.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_807.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _820 = (_783 + ((((_674.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_807.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _823 = fma(_789, _253, fma(_820, _260, _819 * _246));
    float _826 = fma(_789, _254, fma(_820, _261, _819 * _247));
    float _829 = fma(_789, _255, fma(_820, _262, _819 * _248));
    float _833 = inversesqrt(dot(vec3(_823, _826, _829), vec3(_823, _826, _829)));
    vec4 _860 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _862 = _860.x;
    float _863 = 1.0 - _862;
    float _871 = (cbMtdParam._m0[19u].x + dot(vec4(_833 * _823, _833 * _826, _833 * _829, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_862 - _863) * cbMtdParam._m0[24u].z) + _863) * cbMtdParam._m0[21u].z);
    float _4002 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _872 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _879 = (_872 * (cbMtdParam._m0[17u].x - _653)) + _653;
    float _880 = (_872 * (cbMtdParam._m0[17u].y - _655)) + _655;
    float _881 = (_872 * (cbMtdParam._m0[17u].z - _657)) + _657;
    vec4 _907 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _909 = _907.x;
    float _926 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _909) * _480) + _909;
    float _943 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _926) * _553) + _926;
    float _961 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _943) * _623) + _943;
    float _965 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _961) * cbMtdParam._m0[19u].z) + _961;
    float _967 = _965 - (_965 * _872);
    float _972 = (((_674.z - _779) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _779;
    float _976 = ((_807.z - _972) * cbMtdParam._m0[19u].w) + _972;
    vec4 _989 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _996 = (_989.x * 2.0) + (-1.0);
    float _997 = (_989.y * 2.0) + (-1.0);
    float _998 = dot(vec2(_996, _997), vec2(_996, _997));
    float _4013 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1006 = ((_989.z - _976) * _872) + _976;
    float _1016 = ((sqrt(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) - _789) * _872) + _789;
    float _1019 = (((_996 - _819) * _872) + _819) + (cbMtdParam._m0[21u].x * _819);
    float _1020 = (((_997 - _820) * _872) + _820) + (cbMtdParam._m0[21u].x * _820);
    float _1024 = cbMtdParam._m0[22u].x + _807.w;
    float _1027 = fma(_1016, _253, fma(_1020, _260, _1019 * _246));
    float _1030 = fma(_1016, _254, fma(_1020, _261, _1019 * _247));
    float _1033 = fma(_1016, _255, fma(_1020, _262, _1019 * _248));
    float _1037 = inversesqrt(dot(vec3(_1027, _1030, _1033), vec3(_1027, _1030, _1033)));
    float _1038 = _1037 * _1027;
    float _1039 = _1037 * _1030;
    float _1040 = _1037 * _1033;
    float _4024 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1041 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _4046 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4057 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4068 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4079 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _1046 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _1060 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1100 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1110 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1100);
    float _1111 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1100);
    float _1112 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1100);
    float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
    float _1117 = _1110 * _1116;
    float _1118 = _1111 * _1116;
    float _1119 = _1112 * _1116;
    float _1125 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1126 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1144 = fma(_1040, cbSceneParam._m0[5u].z, fma(_1039, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1038));
    float _1147 = fma(_1040, cbSceneParam._m0[6u].z, fma(_1039, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1038));
    float _1150 = fma(_1040, cbSceneParam._m0[7u].z, fma(_1039, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1038));
    uint _1164 = (_286 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1170 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_1164].x;
    float _1171 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_1164].y;
    float _1172 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) * cbInstanceData._m0[_1164].z;
    float _4090 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _1176 = 1.0 - _1046;
    float _1177 = _1173 * _1176;
    float _1178 = _1174 * _1176;
    float _1179 = _1175 * _1176;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1046;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1046;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1046;
    float _1187 = _1184 + 0.039999999105930328369140625;
    float _1189 = _1185 + 0.039999999105930328369140625;
    float _1190 = _1186 + 0.039999999105930328369140625;
    vec4 _1199 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1125, cbSceneParam._m0[86u].y * _1126));
    float _1203 = ((isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * TEXCOORD_5.w) * _1199.x;
    float _1204 = dot(vec3(_1038, _1039, _1040), vec3(_1117, _1118, _1119));
    float _1207 = _1204 * 2.0;
    float _1211 = (_1207 * _1038) - _1117;
    float _1212 = (_1207 * _1039) - _1118;
    float _1213 = (_1207 * _1040) - _1119;
    float _1217 = abs(dot(vec3(_1117, _1118, _1119), vec3(_1038, _1039, _1040)));
    float _4123 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1219 = sqrt(_1041);
    float _1232 = exp2((_1219 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1219 * 3.0));
    float _1238 = (1.0 - _1232) * ((_1219 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1239 = _1232 * _1219;
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1275 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1576;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1301 = fma(_1275, cbModelParam._m0[26u].z, fma(_1271, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1267));
        float _1305 = fma(_1275, cbModelParam._m0[27u].z, fma(_1271, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1267));
        float _1309 = fma(_1275, cbModelParam._m0[28u].z, fma(_1271, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1267));
        float _1334 = _1267 + _1038;
        float _1335 = _1271 + _1039;
        float _1336 = _1275 + _1040;
        float _1346 = fma(_1336, cbModelParam._m0[26u].z, fma(_1335, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1334)) - _1301;
        float _1347 = fma(_1336, cbModelParam._m0[27u].z, fma(_1335, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1334)) - _1305;
        float _1348 = fma(_1336, cbModelParam._m0[28u].z, fma(_1335, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1334)) - _1309;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1301 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1305 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[34u].z) + ((((((_1309 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1404 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1370.x + (-0.5));
        float _1406 = _1404 * (_1370.y + (-0.5));
        float _1407 = _1404 * (_1370.z + (-0.5));
        float _1414 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1377.x + (-0.5));
        float _1416 = _1414 * (_1377.y + (-0.5));
        float _1417 = _1414 * (_1377.z + (-0.5));
        float _1424 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1384.x + (-0.5));
        float _1426 = _1424 * (_1384.y + (-0.5));
        float _1427 = _1424 * (_1384.z + (-0.5));
        float _1434 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1391.x + (-0.5));
        float _1436 = _1434 * (_1391.y + (-0.5));
        float _1437 = _1434 * (_1391.z + (-0.5));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = _1405 * 0.5;
        float _1442 = _1415 * 0.5;
        float _1443 = _1425 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1458 = (dot(vec3(_1038, _1039, _1040), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4149 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1468 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4160 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4171 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1470 + 1.0))) + _1475) * _1438;
        float _1485 = _1406 * 0.5;
        float _1486 = _1416 * 0.5;
        float _1487 = _1426 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_1038, _1039, _1040), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4182 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4193 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4204 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1512 + 1.0))) + _1517) * _1439;
        float _1527 = _1407 * 0.5;
        float _1528 = _1417 * 0.5;
        float _1529 = _1427 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_1038, _1039, _1040), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4215 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4226 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4237 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_1554 + 1.0))) + _1559) * _1440;
        _1576 = _1407;
        _1578 = _1406;
        _1579 = _1405;
        _1580 = _1417;
        _1581 = _1416;
        _1582 = _1415;
        _1583 = _1427;
        _1584 = _1426;
        _1585 = _1425;
        _1586 = _1440;
        _1587 = _1439;
        _1588 = _1438;
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
    }
    else
    {
        _1576 = _1577;
        _1578 = _1577;
        _1579 = _1577;
        _1580 = _1577;
        _1581 = _1577;
        _1582 = _1577;
        _1583 = _1577;
        _1584 = _1577;
        _1585 = _1577;
        _1586 = _1577;
        _1587 = _1577;
        _1588 = _1577;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1614 = fma(_1275, cbModelParam._m0[30u].z, fma(_1271, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1267));
        float _1618 = fma(_1275, cbModelParam._m0[31u].z, fma(_1271, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1267));
        float _1622 = fma(_1275, cbModelParam._m0[32u].z, fma(_1271, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1267));
        float _1645 = _1267 + _1038;
        float _1646 = _1271 + _1039;
        float _1647 = _1275 + _1040;
        float _1657 = fma(_1647, cbModelParam._m0[30u].z, fma(_1646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1645)) - _1614;
        float _1658 = fma(_1647, cbModelParam._m0[31u].z, fma(_1646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1645)) - _1618;
        float _1659 = fma(_1647, cbModelParam._m0[32u].z, fma(_1646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1645)) - _1622;
        float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
        float _1676 = ((_1663 * _1657) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1614 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1677 = ((_1663 * _1658) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1618 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1663 * _1659) / cbModelParam._m0[35u].z) + ((((((_1622 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1694 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1676, _1677, _1678), 0.0);
        float _1713 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1680.x + (-0.5));
        float _1715 = _1713 * (_1680.y + (-0.5));
        float _1716 = _1713 * (_1680.z + (-0.5));
        float _1723 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1687.x + (-0.5));
        float _1725 = _1723 * (_1687.y + (-0.5));
        float _1726 = _1723 * (_1687.z + (-0.5));
        float _1733 = exp2((_1694.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1694.x + (-0.5));
        float _1735 = _1733 * (_1694.y + (-0.5));
        float _1736 = _1733 * (_1694.z + (-0.5));
        float _1743 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1744 = _1743 * (_1701.x + (-0.5));
        float _1745 = _1743 * (_1701.y + (-0.5));
        float _1746 = _1743 * (_1701.z + (-0.5));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = _1714 * 0.5;
        float _1751 = _1724 * 0.5;
        float _1752 = _1734 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_1038, _1039, _1040), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4300 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1777 + 1.0))) + _1782) * _1747;
        float _1792 = _1715 * 0.5;
        float _1793 = _1725 * 0.5;
        float _1794 = _1735 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_1038, _1039, _1040), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4333 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1819 + 1.0))) + _1824) * _1748;
        float _1834 = _1716 * 0.5;
        float _1835 = _1726 * 0.5;
        float _1836 = _1736 * 0.5;
        float _1837 = dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836));
        float _1842 = (_1837 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1837);
        float _1850 = (dot(vec3(_1038, _1039, _1040), vec3(_1842 * _1834, _1842 * _1835, _1842 * _1836)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1859 = sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1861 = _1860 * 2.0;
        float _1865 = (1.0 - _1860) / (_1860 + 1.0);
        float _4366 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1875 = ((((1.0 - _1866) * (_1861 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1861 + 1.0))) + _1866) * _1749;
        _1883 = _1716;
        _1884 = _1715;
        _1885 = _1714;
        _1886 = _1726;
        _1887 = _1725;
        _1888 = _1724;
        _1889 = _1736;
        _1890 = _1735;
        _1891 = _1734;
        _1892 = _1749;
        _1893 = _1748;
        _1894 = _1747;
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)));
    }
    else
    {
        _1883 = _1577;
        _1884 = _1577;
        _1885 = _1577;
        _1886 = _1577;
        _1887 = _1577;
        _1888 = _1577;
        _1889 = _1577;
        _1890 = _1577;
        _1891 = _1577;
        _1892 = _1577;
        _1893 = _1577;
        _1894 = _1577;
        _1895 = 0.0;
        _1896 = 0.0;
        _1897 = 0.0;
    }
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1589)) + _1589;
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1590)) + _1590;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1591)) + _1591;
    float _1930 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1907));
    float _1951 = _1211 * 0.5;
    float _1952 = _1212 * 0.5;
    float _1953 = _1213 * 0.5;
    float _1954 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1957 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1960 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1994;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1967 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1576, _1580, _1583, _1586));
        float _1971 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1578, _1581, _1584, _1587));
        float _1975 = dot(vec4(_1951, _1952, _1953, 1.0), vec4(_1579, _1582, _1585, _1588));
        float _1982 = dot(vec4(cbModelParam._m0[39u]), vec4(_1951, _1952, _1953, 1.0));
        _1994 = dot(vec3(isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)), isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1994 = 1.0;
    }
    float _2005;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1996 = dot(vec4(cbModelParam._m0[40u]), vec4(_1951, _1952, _1953, 1.0));
        _2005 = dot(vec3(isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1996) ? 0.0 : (isnan(0.0) ? _1996 : max(0.0, _1996))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2005 = 1.0;
    }
    float _2009 = (_2005 * cbModelParam._m0[1u].x) + (_1994 * (1.0 - cbModelParam._m0[1u].x));
    float _2019 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1041);
    float _2020 = isnan(_2019) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2019 : min(cbModelParam._m0[25u].z, _2019));
    float _2100;
    float _2102;
    float _2104;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2067 = fma(_1275, cbModelParam._m0[13u].z, fma(_1271, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267)) + cbModelParam._m0[13u].w;
        float _2071 = fma(_1275, cbModelParam._m0[14u].z, fma(_1271, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267)) + cbModelParam._m0[14u].w;
        float _2075 = fma(_1275, cbModelParam._m0[15u].z, fma(_1271, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267)) + cbModelParam._m0[15u].w;
        float _2078 = fma(_1213, cbModelParam._m0[13u].z, fma(_1212, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1211));
        float _2081 = fma(_1213, cbModelParam._m0[14u].z, fma(_1212, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1211));
        float _2084 = fma(_1213, cbModelParam._m0[15u].z, fma(_1212, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1211));
        float _2112;
        if (_2078 > 0.0)
        {
            _2112 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2112 = frontier_phi_14_12_ladder;
        }
        float _2336;
        if (_2081 > 0.0)
        {
            _2336 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2336 = frontier_phi_23_19_ladder;
        }
        float _2593;
        if (_2084 > 0.0)
        {
            _2593 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2593 = frontier_phi_35_30_ladder;
        }
        float _2595 = isnan(_2336) ? _2112 : (isnan(_2112) ? _2336 : min(_2112, _2336));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _2078) + _2067;
        float _2601 = (_2596 * _2081) + _2071;
        float _2602 = (_2596 * _2084) + _2075;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2603;
        float _2607 = _2603 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 > _2607) || ((_2601 < _2605) || ((_2600 < _2605) || (_2600 > _2607))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2602, cbModelParam._m0[9u].z, fma(_2601, cbModelParam._m0[9u].y, _2600 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2602, cbModelParam._m0[10u].z, fma(_2601, cbModelParam._m0[10u].y, _2600 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2602, cbModelParam._m0[11u].z, fma(_2601, cbModelParam._m0[11u].y, _2600 * cbModelParam._m0[11u].x))), _2020);
            frontier_phi_13_35_ladder = _2730.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2730.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2730.x * cbModelParam._m0[1u].y;
        }
        _2100 = frontier_phi_13_35_ladder_2;
        _2102 = frontier_phi_13_35_ladder_1;
        _2104 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2088 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1211, _1212, _1213), _2020);
        _2100 = _2088.x * cbModelParam._m0[1u].y;
        _2102 = _2088.y * cbModelParam._m0[1u].y;
        _2104 = _2088.z * cbModelParam._m0[1u].y;
    }
    float _2108 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1041);
    float _2109 = isnan(_2108) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2108 : min(cbModelParam._m0[25u].w, _2108));
    float _2199;
    float _2201;
    float _2203;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2163 = fma(_1275, cbModelParam._m0[21u].z, fma(_1271, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267)) + cbModelParam._m0[21u].w;
        float _2167 = fma(_1275, cbModelParam._m0[22u].z, fma(_1271, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267)) + cbModelParam._m0[22u].w;
        float _2171 = fma(_1275, cbModelParam._m0[23u].z, fma(_1271, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267)) + cbModelParam._m0[23u].w;
        float _2174 = fma(_1213, cbModelParam._m0[21u].z, fma(_1212, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1211));
        float _2177 = fma(_1213, cbModelParam._m0[22u].z, fma(_1212, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1211));
        float _2180 = fma(_1213, cbModelParam._m0[23u].z, fma(_1212, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1211));
        float _2341;
        if (_2174 > 0.0)
        {
            _2341 = abs((1.0 - _2163) / _2174);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2163 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2341 = frontier_phi_25_21_ladder;
        }
        float _2620;
        if (_2177 > 0.0)
        {
            _2620 = abs((1.0 - _2167) / _2177);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2167 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2620 = frontier_phi_37_32_ladder;
        }
        float _2833;
        if (_2180 > 0.0)
        {
            _2833 = abs((1.0 - _2171) / _2180);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2171 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2833 = frontier_phi_46_43_ladder;
        }
        float _2835 = isnan(_2620) ? _2341 : (isnan(_2341) ? _2620 : min(_2341, _2620));
        float _2836 = isnan(_2833) ? _2835 : (isnan(_2835) ? _2833 : min(_2835, _2833));
        float _2840 = (_2836 * _2174) + _2163;
        float _2841 = (_2836 * _2177) + _2167;
        float _2842 = (_2836 * _2180) + _2171;
        float _2843 = _2836 * 9.9999997473787516355514526367188e-05;
        float _2844 = (-1.0) - _2843;
        float _2846 = _2843 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2842 > _2846) || ((_2842 < _2844) || ((_2841 > _2846) || ((_2841 < _2844) || ((_2840 < _2844) || (_2840 > _2846))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2842, cbModelParam._m0[17u].z, fma(_2841, cbModelParam._m0[17u].y, _2840 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2842, cbModelParam._m0[18u].z, fma(_2841, cbModelParam._m0[18u].y, _2840 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2842, cbModelParam._m0[19u].z, fma(_2841, cbModelParam._m0[19u].y, _2840 * cbModelParam._m0[19u].x))), _2109);
            frontier_phi_22_46_ladder = _3041.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3041.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3041.x * cbModelParam._m0[1u].z;
        }
        _2199 = frontier_phi_22_46_ladder_2;
        _2201 = frontier_phi_22_46_ladder_1;
        _2203 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2183 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1211, _1212, _1213), _2109);
        _2199 = _2183.x * cbModelParam._m0[1u].z;
        _2201 = _2183.y * cbModelParam._m0[1u].z;
        _2203 = _2183.z * cbModelParam._m0[1u].z;
    }
    float _2216 = (((_1238 * _1187) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2199 - _2100)) + _2100);
    float _2218 = (((_1238 * _1189) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2201 - _2102)) + _2102);
    float _2220 = (((_1238 * _1190) + _1239) * _1203) * ((cbModelParam._m0[1u].w * (_2203 - _2104)) + _2104);
    float _2223 = fma(_2220, cbSceneParam._m0[89u].z, fma(_2218, cbSceneParam._m0[89u].y, _2216 * cbSceneParam._m0[89u].x));
    float _2226 = fma(_2220, cbSceneParam._m0[90u].z, fma(_2218, cbSceneParam._m0[90u].y, _2216 * cbSceneParam._m0[90u].x));
    float _2229 = fma(_2220, cbSceneParam._m0[91u].z, fma(_2218, cbSceneParam._m0[91u].y, _2216 * cbSceneParam._m0[91u].x));
    vec4 _2237 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1125, _1126));
    float _2239 = _2237.w;
    float _2251 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2239);
    float _2252 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2239);
    float _2253 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2239);
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2267 = _1203 + (-1.0);
    float _2272 = (cbLight._m0[_2260].x * _2267) + 1.0;
    float _2273 = (cbLight._m0[_2260].y * _2267) + 1.0;
    float _2274 = (cbLight._m0[_2260].z * _2267) + 1.0;
    float _2275 = (cbLight._m0[_2260].w * _2267) + 1.0;
    uint _2276 = _2259 + 5u;
    float _2282 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2286 = _2259 + 4u;
    float _2295 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2299 = _2259 | 1u;
    float _2310 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_1038, _1039, _1040));
    float _2313 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_1038, _1039, _1040));
    float _4502 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _4513 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2318 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * 0.3183098733425140380859375;
    float _2320 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2327 = ((cbLight._m0[_2276].x * _2282) * _2320) + (((cbLight._m0[_2286].x * _2251) * _2295) * _2318);
    float _2328 = ((_2282 * cbLight._m0[_2276].y) * _2320) + (((cbLight._m0[_2286].y * _2252) * _2295) * _2318);
    float _2329 = ((_2282 * cbLight._m0[_2276].z) * _2320) + (((cbLight._m0[_2286].z * _2253) * _2295) * _2318);
    uvec4 _2333 = floatBitsToUint(cbLight._m0[_2259 + 12u]);
    bool _2335 = _2333.x == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2335)
    {
        _2346 = _2327;
        _2348 = _2328;
        _2350 = _2329;
    }
    else
    {
        uint _2354 = _2259 + 6u;
        float _2370 = (dot(vec3(cbLight._m0[_2259 + 2u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2371 = _2370 * _2370;
        float _4524 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2372 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2373 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2346 = (((cbLight._m0[_2354].x * 0.3183098733425140380859375) * _2372) * _2373) + _2327;
        _2348 = (((cbLight._m0[_2354].y * 0.3183098733425140380859375) * _2372) * _2373) + _2328;
        _2350 = (((cbLight._m0[_2354].z * 0.3183098733425140380859375) * _2372) * _2373) + _2329;
    }
    bool _2353 = _2333.y == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2353)
    {
        _2391 = _2346;
        _2393 = _2348;
        _2395 = _2350;
    }
    else
    {
        uint _2564 = _2259 + 7u;
        float _2580 = (dot(vec3(cbLight._m0[_2259 + 3u].xyz), vec3(_1038, _1039, _1040)) * 0.5) + 0.5;
        float _2581 = _2580 * _2580;
        float _4540 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2582 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2583 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2391 = (((cbLight._m0[_2564].x * 0.3183098733425140380859375) * _2582) * _2583) + _2346;
        _2393 = (((cbLight._m0[_2564].y * 0.3183098733425140380859375) * _2582) * _2583) + _2348;
        _2395 = (((cbLight._m0[_2564].z * 0.3183098733425140380859375) * _2582) * _2583) + _2350;
    }
    uint _2398 = _2259 + 8u;
    float _2411 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _1041) * 0.949999988079071044921875);
    float _2412 = _2411 * _2411;
    float _2413 = cbLight._m0[_2259].x + _1117;
    float _2414 = cbLight._m0[_2259].y + _1118;
    float _2415 = cbLight._m0[_2259].z + _1119;
    float _2419 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
    float _2420 = _2419 * _2413;
    float _2421 = _2419 * _2414;
    float _2422 = _2419 * _2415;
    float _2423 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2259].xyz));
    float _4556 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
    float _2426 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _4567 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _2427 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _2428 = dot(vec3(_1038, _1039, _1040), vec3(_2420, _2421, _2422));
    float _4578 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2431 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2432 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2420, _2421, _2422));
    float _4589 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2436 = _2412 * _2412;
    float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
    float _2448 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
    float _2449 = 0.959999978542327880859375 - _1184;
    float _2451 = 0.959999978542327880859375 - _1185;
    float _2452 = 0.959999978542327880859375 - _1186;
    float _2459 = 1.0 - _2412;
    float _2470 = (0.5 / (((_2427 * ((_2426 * _2459) + _2412)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2459) + _2412) * _2426))) * _2426;
    float _4600 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
    uint _2486 = _2259 + 9u;
    float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _1041) * 0.949999988079071044921875);
    float _2498 = _2497 * _2497;
    float _2499 = cbLight._m0[_2299].x + _1117;
    float _2500 = cbLight._m0[_2299].y + _1118;
    float _2501 = cbLight._m0[_2299].z + _1119;
    float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
    float _2506 = _2505 * _2499;
    float _2507 = _2505 * _2500;
    float _2508 = _2505 * _2501;
    float _2509 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2299].xyz));
    float _4611 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2513 = dot(vec3(_1038, _1039, _1040), vec3(_2506, _2507, _2508));
    float _4622 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2506, _2507, _2508));
    float _4633 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2498 * _2498;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2532 = exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0);
    float _2539 = 1.0 - _2498;
    float _2549 = (0.5 / (((_2427 * ((_2512 * _2539) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2539) + _2498) * _2512))) * _2512;
    float _4644 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2551 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    float _2561 = (((((_2532 * _2449) + _1187) * cbLight._m0[_2486].x) * _2551) * _2282) + ((((cbLight._m0[_2398].x * _2251) * ((_2448 * _2449) + _1187)) * _2472) * _2295);
    float _2562 = (((((_2532 * _2451) + _1189) * cbLight._m0[_2486].y) * _2551) * _2282) + ((((cbLight._m0[_2398].y * _2252) * ((_2448 * _2451) + _1189)) * _2472) * _2295);
    float _2563 = (((((_2532 * _2452) + _1190) * cbLight._m0[_2486].z) * _2551) * _2282) + ((((cbLight._m0[_2398].z * _2253) * ((_2448 * _2452) + _1190)) * _2472) * _2295);
    float _2625;
    float _2627;
    float _2629;
    if (_2335)
    {
        _2625 = _2561;
        _2627 = _2562;
        _2629 = _2563;
    }
    else
    {
        uint _2631 = _2259 + 2u;
        uint _2635 = _2259 + 10u;
        float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2631].w)) * _1041) * 0.949999988079071044921875);
        float _2650 = _2649 * _2649;
        float _2651 = cbLight._m0[_2631].x + _1117;
        float _2652 = cbLight._m0[_2631].y + _1118;
        float _2653 = cbLight._m0[_2631].z + _1119;
        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
        float _2658 = _2657 * _2651;
        float _2659 = _2657 * _2652;
        float _2660 = _2657 * _2653;
        float _2661 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2631].xyz));
        float _4655 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2664 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _2665 = dot(vec3(_1038, _1039, _1040), vec3(_2658, _2659, _2660));
        float _4666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2669 = dot(vec3(cbLight._m0[_2631].xyz), vec3(_2658, _2659, _2660));
        float _4677 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2673 = _2650 * _2650;
        float _2677 = ((_2668 * _2668) * (_2673 + (-1.0))) + 1.0;
        float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0);
        float _2691 = 1.0 - _2650;
        float _2701 = (0.5 / (((_2427 * ((_2664 * _2691) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2691) + _2650) * _2664))) * _2664;
        float _4688 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2703 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2673 / ((_2677 * _2677) * 3.141590118408203125));
        float _2704 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2625 = (((((_2684 * _2449) + _1187) * cbLight._m0[_2635].x) * _2703) * _2704) + _2561;
        _2627 = (((((_2684 * _2451) + _1189) * cbLight._m0[_2635].y) * _2703) * _2704) + _2562;
        _2629 = (((((_2684 * _2452) + _1190) * cbLight._m0[_2635].z) * _2703) * _2704) + _2563;
    }
    float _2739;
    float _2741;
    float _2743;
    if (_2353)
    {
        _2739 = _2625;
        _2741 = _2627;
        _2743 = _2629;
    }
    else
    {
        uint _2750 = _2259 + 3u;
        uint _2754 = _2259 + 11u;
        float _2768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2750].w)) * _1041) * 0.949999988079071044921875);
        float _2769 = _2768 * _2768;
        float _2770 = cbLight._m0[_2750].x + _1117;
        float _2771 = cbLight._m0[_2750].y + _1118;
        float _2772 = cbLight._m0[_2750].z + _1119;
        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
        float _2777 = _2776 * _2770;
        float _2778 = _2776 * _2771;
        float _2779 = _2776 * _2772;
        float _2780 = dot(vec3(_1038, _1039, _1040), vec3(cbLight._m0[_2750].xyz));
        float _4704 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2783 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2784 = dot(vec3(_1038, _1039, _1040), vec3(_2777, _2778, _2779));
        float _4715 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2787 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2788 = dot(vec3(cbLight._m0[_2750].xyz), vec3(_2777, _2778, _2779));
        float _4726 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2792 = _2769 * _2769;
        float _2796 = ((_2787 * _2787) * (_2792 + (-1.0))) + 1.0;
        float _2803 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
        float _2810 = 1.0 - _2769;
        float _2820 = (0.5 / (((_2427 * ((_2783 * _2810) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2427 * _2810) + _2769) * _2783))) * _2783;
        float _4737 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2822 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2792 / ((_2796 * _2796) * 3.141590118408203125));
        float _2823 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2739 = (((((_2803 * _2449) + _1187) * cbLight._m0[_2754].x) * _2822) * _2823) + _2625;
        _2741 = (((((_2803 * _2451) + _1189) * cbLight._m0[_2754].y) * _2822) * _2823) + _2627;
        _2743 = (((((_2803 * _2452) + _1190) * cbLight._m0[_2754].z) * _2822) * _2823) + _2629;
    }
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_2257.y == 0u)
    {
        float _2898 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2899 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2898;
        float _2900 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2898;
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2898;
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.x;
        uint _2925 = uint((float(_2913.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1126) / _2914))) + floor(float(uint(cbSceneParam._m0[85u].x * _1125) / _2914)));
        float _2935 = (log2(_2901 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2936 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        uint _2939 = uint(isnan(14.0) ? _2936 : (isnan(_2936) ? 14.0 : min(_2936, 14.0)));
        uvec4 _2944 = texelFetch(g_lightClusterGridBuffer, int(((_2939 << 2u) + (_2925 << 6u)) >> 2u));
        uint _2945 = _2944.x;
        uint _2946 = _2913.z;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        if (((((1u << ((_2946 >> 4u) & 15u)) + 4294967295u) & _2945) == 0u) || ((_2946 & 240u) == 0u))
        {
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
        }
        else
        {
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            uint _3197 = 0u;
            uint _3206;
            bool _3207;
            for (;;)
            {
                _3206 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3197 << 2u)) >> 2u)).x;
                _3207 = _3206 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3207)
                {
                    frontier_phi_61_pred = _3191;
                    frontier_phi_61_pred_1 = _3196;
                    frontier_phi_61_pred_2 = _3195;
                    frontier_phi_61_pred_3 = _3194;
                    frontier_phi_61_pred_4 = _3193;
                    frontier_phi_61_pred_5 = _3192;
                }
                else
                {
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    uint _3321;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3206;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    for (;;)
                    {
                        uint _3325 = uint(findLSB(_3321)) + (_3197 << 5u);
                        uint _3322 = (_3321 + 4294967295u) & _3321;
                        uint _3327 = _3325 * 48u;
                        vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3327)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3327 + 3u)).x));
                        uint _3347 = (_3325 * 48u) + 4u;
                        vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3347)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3347 + 3u)).x));
                        uint _3366 = (_3325 * 48u) + 8u;
                        vec3 _3377 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3366)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3366 + 2u)).x));
                        float _3381 = _3341.x - _2899;
                        float _3382 = _3341.y - _2900;
                        float _3383 = _3341.z - _2901;
                        float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                        float _3387 = inversesqrt(_3384);
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3391 = dot(vec3(_1144, _1147, _1150), vec3(_3388, _3389, _3390));
                        float _3396 = 1.0 - (_3384 * _3341.w);
                        float _4763 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3398 = sqrt(_3384) * _3360.w;
                        float _3401 = 1.39999997615814208984375 / (_3398 + 1.39999997615814208984375);
                        float _3402 = _3401 * _3401;
                        float _3405 = ((1.0 - _3402) * _3391) + _3402;
                        float _3408 = _3398 * _3398;
                        float _3412 = ((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3397) / ((_3408 * 0.699999988079071044921875) + 1.0);
                        float _3416 = (-0.0) - _2899;
                        float _3417 = (-0.0) - _2900;
                        float _3418 = (-0.0) - _2901;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3433 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                        float _3434 = 1.0 - _1219;
                        float _3441 = sqrt(1.0 - ((1.0 - (_3434 * _3434)) * (1.0 - (_3433 * _3433))));
                        float _3442 = _3441 * _3441;
                        float _3443 = _3442 * _3442;
                        float _3444 = _3423 + _3388;
                        float _3445 = _3424 + _3389;
                        float _3446 = _3425 + _3390;
                        float _3450 = inversesqrt(dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446)));
                        float _3454 = dot(vec3(_1144, _1147, _1150), vec3(_3423, _3424, _3425));
                        float _4779 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3457 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                        float _3458 = dot(vec3(_1144, _1147, _1150), vec3(_3450 * _3444, _3450 * _3445, _3450 * _3446));
                        float _4790 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3461 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3465 = ((_3461 * _3461) * (_3443 + (-1.0))) + 1.0;
                        float _3466 = _3401 * _3442;
                        float _3467 = _3466 * _3466;
                        float _3470 = ((1.0 - _3467) * _3391) + _3467;
                        float _4801 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3471 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3472 = 1.0 - _3442;
                        float _3482 = (0.5 / (((_3471 * ((_3457 * _3472) + _3442)) + 9.9999999392252902907785028219223e-09) + (((_3471 * _3472) + _3442) * _3457))) * _3471;
                        float _4812 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3493 = (((_3443 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3465 * _3465) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125))) * _3397;
                        _3250 = (_3412 * _3360.x) + _3318;
                        _3251 = (_3412 * _3360.y) + _3319;
                        _3252 = (_3412 * _3360.z) + _3320;
                        _3247 = (_3493 * _3377.x) + _3315;
                        _3248 = (_3493 * _3377.y) + _3316;
                        _3249 = (_3493 * _3377.z) + _3317;
                        if (_3322 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3322;
                        }
                    }
                    frontier_phi_61_pred = _3247;
                    frontier_phi_61_pred_1 = _3252;
                    frontier_phi_61_pred_2 = _3251;
                    frontier_phi_61_pred_3 = _3250;
                    frontier_phi_61_pred_4 = _3249;
                    frontier_phi_61_pred_5 = _3248;
                }
                _3047 = frontier_phi_61_pred;
                _3057 = frontier_phi_61_pred_1;
                _3055 = frontier_phi_61_pred_2;
                _3053 = frontier_phi_61_pred_3;
                _3051 = frontier_phi_61_pred_4;
                _3049 = frontier_phi_61_pred_5;
                uint _3198 = _3197 + 1u;
                if (_3198 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3191 = _3047;
                    _3192 = _3049;
                    _3193 = _3051;
                    _3194 = _3053;
                    _3195 = _3055;
                    _3196 = _3057;
                    _3197 = _3198;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
        }
        uvec4 _3060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3061 = _3060.z;
        uint _3063 = (_3061 >> 8u) & 15u;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((4294967295u << _3063) & _2945) == 0u)
        {
            _3159 = _3046;
            _3161 = _3048;
            _3163 = _3050;
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
        }
        else
        {
            float _3184 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
            float _3185 = _3184 * _2899;
            float _3186 = _3184 * _2900;
            float _3187 = _3184 * _2901;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3063 < ((_3061 >> 12u) & 15u))
            {
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3298 = _3046;
                float _3299 = _3048;
                float _3300 = _3050;
                float _3301 = _3052;
                float _3302 = _3054;
                float _3303 = _3056;
                uint _3304 = _3063;
                uint _3313;
                bool _3314;
                for (;;)
                {
                    _3313 = texelFetch(g_lightClassification, int((((_2939 << 5u) + (_2925 << 9u)) + (_3304 << 2u)) >> 2u)).x;
                    _3314 = _3313 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3314)
                    {
                        frontier_phi_67_pred = _3301;
                        frontier_phi_67_pred_1 = _3302;
                        frontier_phi_67_pred_2 = _3303;
                        frontier_phi_67_pred_3 = _3300;
                        frontier_phi_67_pred_4 = _3299;
                        frontier_phi_67_pred_5 = _3298;
                    }
                    else
                    {
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3511 = _3298;
                        float _3512 = _3299;
                        float _3513 = _3300;
                        float _3514 = _3301;
                        float _3515 = _3302;
                        float _3516 = _3303;
                        uint _3517 = _3313;
                        uint _3518;
                        vec4 _3543;
                        float _3544;
                        vec4 _3559;
                        vec3 _3571;
                        vec4 _3586;
                        vec4 _3601;
                        float _3647;
                        bool _3648;
                        for (;;)
                        {
                            uint _3528 = ((_3304 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3517));
                            _3518 = (_3517 + 4294967295u) & _3517;
                            uint _3530 = _3528 * 40u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            _3544 = _3543.w;
                            uint _3546 = (_3528 * 40u) + 4u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3528 * 40u) + 8u;
                            _3571 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x));
                            uint _3573 = (_3528 * 40u) + 16u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3588 = (_3528 * 40u) + 20u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3528 * 40u) + 24u;
                            vec4 _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            uint _3622 = (_3528 * 40u) + 28u;
                            vec4 _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            _3647 = fma(_2901, _3635.z, fma(_2900, _3635.y, _3635.x * _2899)) + _3635.w;
                            _3648 = !((fma(_2901, _3616.z, fma(_2900, _3616.y, _3616.x * _2899)) + _3616.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3648)
                            {
                                float _3675 = _3543.x - _2899;
                                float _3676 = _3543.y - _2900;
                                float _3677 = _3543.z - _2901;
                                float _3678 = dot(vec3(_3675, _3676, _3677), vec3(_3675, _3676, _3677));
                                float _3681 = inversesqrt(_3678);
                                float _3682 = _3681 * _3675;
                                float _3683 = _3681 * _3676;
                                float _3684 = _3681 * _3677;
                                float _3688 = 1.0 - (_3678 / (_3544 * _3544));
                                float _4823 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3693 = sqrt(_3678) * _3559.w;
                                float _3695 = 1.39999997615814208984375 / (_3693 + 1.39999997615814208984375);
                                float _3696 = _3695 * _3695;
                                float _3699 = ((1.0 - _3696) * dot(vec3(_3682, _3683, _3684), vec3(_1144, _1147, _1150))) + _3696;
                                float _3702 = _3693 * _3693;
                                float _3706 = (fma(_2901, _3586.z, fma(_2900, _3586.y, _3586.x * _2899)) + _3586.w) / _3647;
                                float _3707 = (fma(_2901, _3601.z, fma(_2900, _3601.y, _3601.x * _2899)) + _3601.w) / _3647;
                                float _3711 = 1.0 - dot(vec2(_3706, _3707), vec2(_3706, _3707));
                                float _4839 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                                float _3713 = _3712 * (((isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0))) * _3689) / ((_3702 * 0.699999988079071044921875) + 1.0));
                                float _3725 = exp2(log2(1.0 / ((_3702 * 3.5) + 5.0)) * 0.25);
                                float _3726 = 1.0 - _1219;
                                float _3733 = sqrt(1.0 - ((1.0 - (_3726 * _3726)) * (1.0 - (_3725 * _3725))));
                                float _3734 = _3733 * _3733;
                                float _3735 = _3734 * _3734;
                                float _3736 = _3682 - _3185;
                                float _3737 = _3683 - _3186;
                                float _3738 = _3684 - _3187;
                                float _3742 = inversesqrt(dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738)));
                                float _3746 = dot(vec3(_1144, _1147, _1150), vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187));
                                float _4850 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3749 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3750 = dot(vec3(_1144, _1147, _1150), vec3(_3742 * _3736, _3742 * _3737, _3742 * _3738));
                                float _4861 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3753 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3757 = ((_3753 * _3753) * (_3735 + (-1.0))) + 1.0;
                                float _3758 = _3695 * _3734;
                                float _3759 = _3758 * _3758;
                                float _3765 = ((1.0 - _3759) * dot(vec3(_1144, _1147, _1150), vec3(_3682, _3683, _3684))) + _3759;
                                float _4872 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3767 = 1.0 - _3734;
                                float _3777 = (0.5 / (((_3766 * ((_3749 * _3767) + _3734)) + 9.9999999392252902907785028219223e-09) + (((_3766 * _3767) + _3734) * _3749))) * _3766;
                                float _4883 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3787 = (_3712 * _3689) * (((_3735 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3757 * _3757) * ((_3702 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3787 * _3571.x;
                                frontier_phi_73_pred_1 = _3787 * _3571.y;
                                frontier_phi_73_pred_2 = _3713 * _3559.z;
                                frontier_phi_73_pred_3 = _3713 * _3559.y;
                                frontier_phi_73_pred_4 = _3713 * _3559.x;
                                frontier_phi_73_pred_5 = _3787 * _3571.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3791 = frontier_phi_73_pred;
                            _3792 = frontier_phi_73_pred_1;
                            _3796 = frontier_phi_73_pred_2;
                            _3795 = frontier_phi_73_pred_3;
                            _3794 = frontier_phi_73_pred_4;
                            _3793 = frontier_phi_73_pred_5;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            if (_3518 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3518;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3501;
                        frontier_phi_67_pred_1 = _3502;
                        frontier_phi_67_pred_2 = _3503;
                        frontier_phi_67_pred_3 = _3500;
                        frontier_phi_67_pred_4 = _3499;
                        frontier_phi_67_pred_5 = _3498;
                    }
                    _3166 = frontier_phi_67_pred;
                    _3168 = frontier_phi_67_pred_1;
                    _3170 = frontier_phi_67_pred_2;
                    _3164 = frontier_phi_67_pred_3;
                    _3162 = frontier_phi_67_pred_4;
                    _3160 = frontier_phi_67_pred_5;
                    uint _3305 = _3304 + 1u;
                    if (_3305 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3298 = _3160;
                        _3299 = _3162;
                        _3300 = _3164;
                        _3301 = _3166;
                        _3302 = _3168;
                        _3303 = _3170;
                        _3304 = _3305;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3168;
                frontier_phi_55_56_ladder_1 = _3170;
                frontier_phi_55_56_ladder_2 = _3166;
                frontier_phi_55_56_ladder_3 = _3164;
                frontier_phi_55_56_ladder_4 = _3162;
                frontier_phi_55_56_ladder_5 = _3160;
            }
            else
            {
                frontier_phi_55_56_ladder = _3054;
                frontier_phi_55_56_ladder_1 = _3056;
                frontier_phi_55_56_ladder_2 = _3052;
                frontier_phi_55_56_ladder_3 = _3050;
                frontier_phi_55_56_ladder_4 = _3048;
                frontier_phi_55_56_ladder_5 = _3046;
            }
            _3159 = frontier_phi_55_56_ladder_5;
            _3161 = frontier_phi_55_56_ladder_4;
            _3163 = frontier_phi_55_56_ladder_3;
            _3165 = frontier_phi_55_56_ladder_2;
            _3167 = frontier_phi_55_56_ladder;
            _3169 = frontier_phi_55_56_ladder_1;
        }
        float _3174 = isnan(1.0) ? _1203 : (isnan(_1203) ? 1.0 : min(_1203, 1.0));
        _2958 = (_3174 * _3165) + _2391;
        _2960 = (_3174 * _3167) + _2393;
        _2962 = (_3174 * _3169) + _2395;
        _2964 = ((_3159 * _1187) * _3174) + _2739;
        _2966 = ((_3161 * _1189) * _3174) + _2741;
        _2968 = ((_3163 * _1190) * _3174) + _2743;
    }
    else
    {
        _2958 = _2391;
        _2960 = _2393;
        _2962 = _2395;
        _2964 = _2739;
        _2966 = _2741;
        _2968 = _2743;
    }
    float _4899 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _4910 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _4921 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    uint _2988 = _286 + 6u;
    float _2996 = _1125 / cbSceneParam._m0[86u].x;
    float _2997 = _1126 / cbSceneParam._m0[86u].y;
    vec4 _3011 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, (log2((isnan(cbSceneParam._m0[77u].w) ? _1060 : (isnan(_1060) ? cbSceneParam._m0[77u].w : min(_1060, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3013 = _3011.x;
    float _3014 = _3011.y;
    float _3015 = _3011.z;
    float _3016 = _3011.w;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    if (_1060 > cbSceneParam._m0[78u].w)
    {
        float _3071 = isnan(_1060) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1060 : min(cbSceneParam._m0[80u].w, _1060));
        float _3072 = _3071 / _1060;
        float _3083 = _3072 * _1110;
        float _3084 = _1111 * _3072;
        float _3085 = (-0.0) - _3084;
        float _3087 = _3072 * _1112;
        float _3089 = (cbSceneParam._m0[77u].w * _3085) / _3071;
        float _3090 = _3089 + cbSceneParam._m0[79u].w;
        float _3091 = cbSceneParam._m0[79u].w - _3084;
        float _3097 = sqrt(((_3083 * _3083) + (_3084 * _3084)) + (_3087 * _3087));
        float _3100 = (1.0 - (cbSceneParam._m0[77u].w / _3071)) * _3097;
        float _3105 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3107 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3260;
        if (abs((_3085 - _3089) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3260 = ((((_3090 > 0.0) ? exp2(_3105 * _3090) : (2.0 - exp2(_3107 * _3090))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3100;
        }
        else
        {
            float _3220 = 1.0 / cbSceneParam._m0[80u].x;
            float _3221 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : max(_3090, _3091));
            float _3222 = isnan(_3091) ? _3090 : (isnan(_3090) ? _3091 : min(_3090, _3091));
            float _3231 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : min(_3221, 0.0));
            float _3232 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : min(_3222, 0.0));
            _3260 = ((abs(_3097 / _3085) * cbSceneParam._m0[80u].y) * ((((_3231 - _3232) * 2.0) - ((exp2(_3105 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)))) - exp2(_3105 * (isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))))) * _3220)) - ((exp2(_3107 * _3231) - exp2(_3107 * _3232)) * _3220))) + (_3100 * cbSceneParam._m0[80u].z);
        }
        vec4 _3262 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2996, _2997, 1.0), 0.0);
        float _3271 = exp2((_3260 * (-1.44269502162933349609375)) * (1.0 - _3262.w));
        float _3272 = log2(_3271);
        float _3288 = log2(_3016);
        _3109 = (exp2(_3288 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].x)) * _3262.x) / cbSceneParam._m0[78u].x)) + _3013;
        _3111 = (exp2(_3288 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].y)) * _3262.y) / cbSceneParam._m0[78u].y)) + _3014;
        _3113 = (exp2(_3288 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3272 * cbSceneParam._m0[78u].z)) * _3262.z) / cbSceneParam._m0[78u].z)) + _3015;
        _3115 = _3271 * _3016;
    }
    else
    {
        _3109 = _3013;
        _3111 = _3014;
        _3113 = _3015;
        _3115 = _3016;
    }
    float _3127 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3128 = _3127 == 3.0;
    float _3129 = log2(_3115);
    float _3136 = exp2(_3129 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0))) * (_2958 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1203))) + ((_2964 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3137 = exp2(_3129 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2960 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1203))) + ((_2966 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3138 = exp2(_3129 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2962 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1203))) + ((_2968 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2009)) * cbPerFrame._m0[3u].x));
    float _3147 = (_3127 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3147 * (_3128 ? _3136 : (_3136 + (cbSceneParam._m0[72u].w * _3109)));
    SV_Target.y = _3147 * (_3128 ? _3137 : (_3137 + (cbSceneParam._m0[72u].w * _3111)));
    SV_Target.z = _3147 * (_3128 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.w = cbInstanceData._m0[_2988].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2988].w;
}


