#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1478;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3826 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3837 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3848 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _367 = _362.x * cbMtdParam._m0[11u].x;
    float _368 = _362.y * cbMtdParam._m0[11u].y;
    float _369 = _362.z * cbMtdParam._m0[11u].z;
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _453 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _470 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _407.x) * 2.0) - ((((_441 - _453) * cbMtdParam._m0[23u].w) + _453) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3859 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _478 = (_471 * ((_388.x * cbMtdParam._m0[12u].x) - _367)) + _367;
    float _479 = (_471 * ((_388.y * cbMtdParam._m0[12u].y) - _368)) + _368;
    float _480 = (_471 * ((_388.z * cbMtdParam._m0[12u].z) - _369)) + _369;
    vec4 _497 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _519 = _517.x;
    float _529 = dot(vec4(_519, _517.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _543 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _407.y) * 2.0) - ((((_519 - _529) * cbMtdParam._m0[23u].w) + _529) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3870 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _554 = (_336.x * cbMtdParam._m0[9u].x) * ((_544 * ((_497.x * cbMtdParam._m0[13u].x) - _478)) + _478);
    float _555 = (_336.y * cbMtdParam._m0[9u].y) * ((_544 * ((_497.y * cbMtdParam._m0[13u].y) - _479)) + _479);
    float _556 = (_336.z * cbMtdParam._m0[9u].z) * ((_544 * ((_497.z * cbMtdParam._m0[13u].z) - _480)) + _480);
    float _560 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _554;
    float _563 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _555;
    float _566 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _556;
    float _574 = (((_554 - _560) * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) + _560) * 4.55000019073486328125;
    float _576 = (((_555 - _563) * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) + _563) * 4.55000019073486328125;
    float _578 = (((_556 - _566) * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) + _566) * 4.55000019073486328125;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _660 = _658.x;
    float _661 = _658.y;
    float _662 = _658.z;
    float _669 = ((_641.x - _660) * _471) + _660;
    float _670 = ((_641.y - _661) * _471) + _661;
    float _671 = ((_641.z - _662) * _471) + _662;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _696 = ((_683.z - _671) * _544) + _671;
    float _699 = ((((_683.x - _669) * _544) + _669) * 2.0) + (-1.0);
    float _700 = ((((_683.y - _670) * _544) + _670) * 2.0) + (-1.0);
    float _701 = dot(vec2(_699, _700), vec2(_699, _700));
    float _3881 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _706 = sqrt(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _736 = (_699 + ((((_616.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_724.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _737 = (_700 + ((((_616.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_724.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _740 = fma(_706, _247, fma(_737, _254, _736 * _240));
    float _743 = fma(_706, _248, fma(_737, _255, _736 * _241));
    float _746 = fma(_706, _249, fma(_737, _256, _736 * _242));
    float _750 = inversesqrt(dot(vec3(_740, _743, _746), vec3(_740, _743, _746)));
    vec4 _777 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _779 = _777.x;
    float _780 = 1.0 - _779;
    float _789 = (cbMtdParam._m0[19u].x + dot(vec4(_750 * _740, _750 * _743, _750 * _746, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_779 - _780) * cbMtdParam._m0[24u].z) + _780) * cbMtdParam._m0[21u].z);
    float _3892 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _797 = (_790 * ((_597.x * cbMtdParam._m0[18u].x) - _574)) + _574;
    float _798 = (_790 * ((_597.y * cbMtdParam._m0[18u].y) - _576)) + _576;
    float _799 = (_790 * ((_597.z * cbMtdParam._m0[18u].z) - _578)) + _578;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _827 = _825.x;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _827) * _471) + _827;
    float _861 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _844) * _544) + _844;
    float _865 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _861) * cbMtdParam._m0[19u].z) + _861;
    float _867 = _865 - (_865 * _790);
    float _872 = (((_616.z - _696) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _696;
    float _876 = ((_724.z - _872) * cbMtdParam._m0[19u].w) + _872;
    vec4 _889 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _896 = (_889.x * 2.0) + (-1.0);
    float _897 = (_889.y * 2.0) + (-1.0);
    float _898 = dot(vec2(_896, _897), vec2(_896, _897));
    float _3903 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _906 = ((_889.z - _876) * _790) + _876;
    float _916 = ((sqrt(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) - _706) * _790) + _706;
    float _919 = (((_896 - _736) * _790) + _736) + (cbMtdParam._m0[21u].x * _736);
    float _920 = (((_897 - _737) * _790) + _737) + (cbMtdParam._m0[21u].x * _737);
    float _924 = cbMtdParam._m0[22u].x + _724.w;
    float _927 = fma(_916, _247, fma(_920, _254, _919 * _240));
    float _930 = fma(_916, _248, fma(_920, _255, _919 * _241));
    float _933 = fma(_916, _249, fma(_920, _256, _919 * _242));
    float _937 = inversesqrt(dot(vec3(_927, _930, _933), vec3(_927, _930, _933)));
    float _938 = _937 * _927;
    float _939 = _937 * _930;
    float _940 = _937 * _933;
    float _3914 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _941 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _3936 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _3947 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _3958 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _3969 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _946 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _960 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1011 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1001);
    float _1012 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1001);
    float _1013 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1001);
    float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
    float _1018 = _1011 * _1017;
    float _1019 = _1012 * _1017;
    float _1020 = _1013 * _1017;
    float _1026 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1027 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1045 = fma(_940, cbSceneParam._m0[5u].z, fma(_939, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _938));
    float _1048 = fma(_940, cbSceneParam._m0[6u].z, fma(_939, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _938));
    float _1051 = fma(_940, cbSceneParam._m0[7u].z, fma(_939, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _938));
    uint _1065 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1071 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * cbInstanceData._m0[_1065].x;
    float _1072 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * cbInstanceData._m0[_1065].y;
    float _1073 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * cbInstanceData._m0[_1065].z;
    float _3980 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1075 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1077 = 1.0 - _946;
    float _1078 = _1074 * _1077;
    float _1079 = _1075 * _1077;
    float _1080 = _1076 * _1077;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _946;
    float _1086 = (_1075 + (-0.039999999105930328369140625)) * _946;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _946;
    float _1088 = _1085 + 0.039999999105930328369140625;
    float _1090 = _1086 + 0.039999999105930328369140625;
    float _1091 = _1087 + 0.039999999105930328369140625;
    vec4 _1100 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1026, cbSceneParam._m0[86u].y * _1027));
    float _1104 = ((isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * TEXCOORD_5.w) * _1100.x;
    float _1105 = dot(vec3(_938, _939, _940), vec3(_1018, _1019, _1020));
    float _1108 = _1105 * 2.0;
    float _1112 = (_1108 * _938) - _1018;
    float _1113 = (_1108 * _939) - _1019;
    float _1114 = (_1108 * _940) - _1020;
    float _1118 = abs(dot(vec3(_1018, _1019, _1020), vec3(_938, _939, _940)));
    float _4013 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1120 = sqrt(_941);
    float _1133 = exp2((_1120 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1120 * 3.0));
    float _1139 = (1.0 - _1133) * ((_1120 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1140 = _1133 * _1120;
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1172 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1477;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1202 = fma(_1176, cbModelParam._m0[26u].z, fma(_1172, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1168));
        float _1206 = fma(_1176, cbModelParam._m0[27u].z, fma(_1172, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1168));
        float _1210 = fma(_1176, cbModelParam._m0[28u].z, fma(_1172, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1168));
        float _1235 = _1168 + _938;
        float _1236 = _1172 + _939;
        float _1237 = _1176 + _940;
        float _1247 = fma(_1237, cbModelParam._m0[26u].z, fma(_1236, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235)) - _1202;
        float _1248 = fma(_1237, cbModelParam._m0[27u].z, fma(_1236, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235)) - _1206;
        float _1249 = fma(_1237, cbModelParam._m0[28u].z, fma(_1236, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235)) - _1210;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1202 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1206 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[34u].z) + ((((((_1210 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1305 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1271.x + (-0.5));
        float _1307 = _1305 * (_1271.y + (-0.5));
        float _1308 = _1305 * (_1271.z + (-0.5));
        float _1315 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1278.x + (-0.5));
        float _1317 = _1315 * (_1278.y + (-0.5));
        float _1318 = _1315 * (_1278.z + (-0.5));
        float _1325 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1285.x + (-0.5));
        float _1327 = _1325 * (_1285.y + (-0.5));
        float _1328 = _1325 * (_1285.z + (-0.5));
        float _1335 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1292.x + (-0.5));
        float _1337 = _1335 * (_1292.y + (-0.5));
        float _1338 = _1335 * (_1292.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1359 = (dot(vec3(_938, _939, _940), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1369 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4061 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1371 + 1.0))) + _1376) * _1339;
        float _1386 = _1307 * 0.5;
        float _1387 = _1317 * 0.5;
        float _1388 = _1327 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_938, _939, _940), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4094 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1413 + 1.0))) + _1418) * _1340;
        float _1428 = _1308 * 0.5;
        float _1429 = _1318 * 0.5;
        float _1430 = _1328 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_938, _939, _940), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4127 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1455 + 1.0))) + _1460) * _1341;
        _1477 = _1308;
        _1479 = _1307;
        _1480 = _1306;
        _1481 = _1318;
        _1482 = _1317;
        _1483 = _1316;
        _1484 = _1328;
        _1485 = _1327;
        _1486 = _1326;
        _1487 = _1341;
        _1488 = _1340;
        _1489 = _1339;
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1478;
        _1479 = _1478;
        _1480 = _1478;
        _1481 = _1478;
        _1482 = _1478;
        _1483 = _1478;
        _1484 = _1478;
        _1485 = _1478;
        _1486 = _1478;
        _1487 = _1478;
        _1488 = _1478;
        _1489 = _1478;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1516 = fma(_1176, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168));
        float _1520 = fma(_1176, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168));
        float _1524 = fma(_1176, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168));
        float _1547 = _1168 + _938;
        float _1548 = _1172 + _939;
        float _1549 = _1176 + _940;
        float _1559 = fma(_1549, cbModelParam._m0[30u].z, fma(_1548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1547)) - _1516;
        float _1560 = fma(_1549, cbModelParam._m0[31u].z, fma(_1548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1547)) - _1520;
        float _1561 = fma(_1549, cbModelParam._m0[32u].z, fma(_1548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1547)) - _1524;
        float _1565 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
        float _1578 = ((_1565 * _1559) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1516 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1579 = ((_1565 * _1560) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1520 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1565 * _1561) / cbModelParam._m0[35u].z) + ((((((_1524 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        vec4 _1603 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1578, _1579, _1580), 0.0);
        float _1615 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1582.x + (-0.5));
        float _1617 = _1615 * (_1582.y + (-0.5));
        float _1618 = _1615 * (_1582.z + (-0.5));
        float _1625 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1589.x + (-0.5));
        float _1627 = _1625 * (_1589.y + (-0.5));
        float _1628 = _1625 * (_1589.z + (-0.5));
        float _1635 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1596.x + (-0.5));
        float _1637 = _1635 * (_1596.y + (-0.5));
        float _1638 = _1635 * (_1596.z + (-0.5));
        float _1645 = exp2((_1603.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1603.x + (-0.5));
        float _1647 = _1645 * (_1603.y + (-0.5));
        float _1648 = _1645 * (_1603.z + (-0.5));
        float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = _1616 * 0.5;
        float _1653 = _1626 * 0.5;
        float _1654 = _1636 * 0.5;
        float _1655 = dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654));
        float _1660 = (_1655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1655);
        float _1668 = (dot(vec3(_938, _939, _940), vec3(_1660 * _1652, _1660 * _1653, _1660 * _1654)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1677 = sqrt(((_1653 * _1653) + (_1652 * _1652)) + (_1654 * _1654)) / (_1649 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1679 = _1678 * 2.0;
        float _1683 = (1.0 - _1678) / (_1678 + 1.0);
        float _4190 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1693 = ((((1.0 - _1684) * (_1679 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1679 + 1.0))) + _1684) * _1649;
        float _1694 = _1617 * 0.5;
        float _1695 = _1627 * 0.5;
        float _1696 = _1637 * 0.5;
        float _1697 = dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696));
        float _1702 = (_1697 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1697);
        float _1710 = (dot(vec3(_938, _939, _940), vec3(_1702 * _1694, _1702 * _1695, _1702 * _1696)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1719 = sqrt(((_1695 * _1695) + (_1694 * _1694)) + (_1696 * _1696)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1721 = _1720 * 2.0;
        float _1725 = (1.0 - _1720) / (_1720 + 1.0);
        float _4223 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1735 = ((((1.0 - _1726) * (_1721 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1721 + 1.0))) + _1726) * _1650;
        float _1736 = _1618 * 0.5;
        float _1737 = _1628 * 0.5;
        float _1738 = _1638 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_938, _939, _940), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4256 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1763 + 1.0))) + _1768) * _1651;
        _1785 = _1618;
        _1786 = _1617;
        _1787 = _1616;
        _1788 = _1628;
        _1789 = _1627;
        _1790 = _1626;
        _1791 = _1638;
        _1792 = _1637;
        _1793 = _1636;
        _1794 = _1651;
        _1795 = _1650;
        _1796 = _1649;
        _1797 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)));
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
    }
    else
    {
        _1785 = _1478;
        _1786 = _1478;
        _1787 = _1478;
        _1788 = _1478;
        _1789 = _1478;
        _1790 = _1478;
        _1791 = _1478;
        _1792 = _1478;
        _1793 = _1478;
        _1794 = _1478;
        _1795 = _1478;
        _1796 = _1478;
        _1797 = 0.0;
        _1798 = 0.0;
        _1799 = 0.0;
    }
    float _1809 = (cbModelParam._m0[1u].x * (_1797 - _1490)) + _1490;
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1491)) + _1491;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1492)) + _1492;
    float _1832 = fma(_1811, cbSceneParam._m0[89u].z, fma(_1810, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1811, cbSceneParam._m0[90u].z, fma(_1810, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1811, cbSceneParam._m0[91u].z, fma(_1810, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1809));
    float _1853 = _1112 * 0.5;
    float _1854 = _1113 * 0.5;
    float _1855 = _1114 * 0.5;
    float _1856 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1859 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1862 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1785, _1788, _1791, _1794));
    float _1896;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1869 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1477, _1481, _1484, _1487));
        float _1873 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1877 = dot(vec4(_1853, _1854, _1855, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1884 = dot(vec4(cbModelParam._m0[39u]), vec4(_1853, _1854, _1855, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)), isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1907;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1898 = dot(vec4(cbModelParam._m0[40u]), vec4(_1853, _1854, _1855, 1.0));
        _1907 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1898) ? 0.0 : (isnan(0.0) ? _1898 : max(0.0, _1898))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1907 = 1.0;
    }
    float _1911 = (_1907 * cbModelParam._m0[1u].x) + (_1896 * (1.0 - cbModelParam._m0[1u].x));
    float _1921 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _941);
    float _1922 = isnan(_1921) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1921 : min(cbModelParam._m0[25u].z, _1921));
    float _2002;
    float _2004;
    float _2006;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1969 = fma(_1176, cbModelParam._m0[13u].z, fma(_1172, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1168)) + cbModelParam._m0[13u].w;
        float _1973 = fma(_1176, cbModelParam._m0[14u].z, fma(_1172, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1168)) + cbModelParam._m0[14u].w;
        float _1977 = fma(_1176, cbModelParam._m0[15u].z, fma(_1172, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1168)) + cbModelParam._m0[15u].w;
        float _1980 = fma(_1114, cbModelParam._m0[13u].z, fma(_1113, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112));
        float _1983 = fma(_1114, cbModelParam._m0[14u].z, fma(_1113, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112));
        float _1986 = fma(_1114, cbModelParam._m0[15u].z, fma(_1113, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112));
        float _2014;
        if (_1980 > 0.0)
        {
            _2014 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2014 = frontier_phi_14_12_ladder;
        }
        float _2237;
        if (_1983 > 0.0)
        {
            _2237 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2237 = frontier_phi_23_19_ladder;
        }
        float _2494;
        if (_1986 > 0.0)
        {
            _2494 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2494 = frontier_phi_35_30_ladder;
        }
        float _2496 = isnan(_2237) ? _2014 : (isnan(_2014) ? _2237 : min(_2014, _2237));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1980) + _1969;
        float _2502 = (_2497 * _1983) + _1973;
        float _2503 = (_2497 * _1986) + _1977;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2506 = (-1.0) - _2504;
        float _2508 = _2504 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2503 > _2508) || ((_2503 < _2506) || ((_2502 > _2508) || ((_2502 < _2506) || ((_2501 < _2506) || (_2501 > _2508))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2503, cbModelParam._m0[9u].z, fma(_2502, cbModelParam._m0[9u].y, _2501 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2503, cbModelParam._m0[10u].z, fma(_2502, cbModelParam._m0[10u].y, _2501 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2503, cbModelParam._m0[11u].z, fma(_2502, cbModelParam._m0[11u].y, _2501 * cbModelParam._m0[11u].x))), _1922);
            frontier_phi_13_35_ladder = _2631.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2631.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2631.x * cbModelParam._m0[1u].y;
        }
        _2002 = frontier_phi_13_35_ladder_2;
        _2004 = frontier_phi_13_35_ladder_1;
        _2006 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1990 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1112, _1113, _1114), _1922);
        _2002 = _1990.x * cbModelParam._m0[1u].y;
        _2004 = _1990.y * cbModelParam._m0[1u].y;
        _2006 = _1990.z * cbModelParam._m0[1u].y;
    }
    float _2010 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _941);
    float _2011 = isnan(_2010) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2010 : min(cbModelParam._m0[25u].w, _2010));
    float _2100;
    float _2102;
    float _2104;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2064 = fma(_1176, cbModelParam._m0[21u].z, fma(_1172, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1168)) + cbModelParam._m0[21u].w;
        float _2068 = fma(_1176, cbModelParam._m0[22u].z, fma(_1172, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1168)) + cbModelParam._m0[22u].w;
        float _2072 = fma(_1176, cbModelParam._m0[23u].z, fma(_1172, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1168)) + cbModelParam._m0[23u].w;
        float _2075 = fma(_1114, cbModelParam._m0[21u].z, fma(_1113, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112));
        float _2078 = fma(_1114, cbModelParam._m0[22u].z, fma(_1113, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112));
        float _2081 = fma(_1114, cbModelParam._m0[23u].z, fma(_1113, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112));
        float _2242;
        if (_2075 > 0.0)
        {
            _2242 = abs((1.0 - _2064) / _2075);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2064 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2242 = frontier_phi_25_21_ladder;
        }
        float _2521;
        if (_2078 > 0.0)
        {
            _2521 = abs((1.0 - _2068) / _2078);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2068 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2521 = frontier_phi_37_32_ladder;
        }
        float _2734;
        if (_2081 > 0.0)
        {
            _2734 = abs((1.0 - _2072) / _2081);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2072 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2734 = frontier_phi_46_43_ladder;
        }
        float _2736 = isnan(_2521) ? _2242 : (isnan(_2242) ? _2521 : min(_2242, _2521));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _2075) + _2064;
        float _2742 = (_2737 * _2078) + _2068;
        float _2743 = (_2737 * _2081) + _2072;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2942 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _2011);
            frontier_phi_22_46_ladder = _2942.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2942.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2942.x * cbModelParam._m0[1u].z;
        }
        _2100 = frontier_phi_22_46_ladder_2;
        _2102 = frontier_phi_22_46_ladder_1;
        _2104 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1112, _1113, _1114), _2011);
        _2100 = _2084.x * cbModelParam._m0[1u].z;
        _2102 = _2084.y * cbModelParam._m0[1u].z;
        _2104 = _2084.z * cbModelParam._m0[1u].z;
    }
    float _2117 = (((_1139 * _1088) + _1140) * _1104) * ((cbModelParam._m0[1u].w * (_2100 - _2002)) + _2002);
    float _2119 = (((_1139 * _1090) + _1140) * _1104) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2121 = (((_1139 * _1091) + _1140) * _1104) * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2124 = fma(_2121, cbSceneParam._m0[89u].z, fma(_2119, cbSceneParam._m0[89u].y, _2117 * cbSceneParam._m0[89u].x));
    float _2127 = fma(_2121, cbSceneParam._m0[90u].z, fma(_2119, cbSceneParam._m0[90u].y, _2117 * cbSceneParam._m0[90u].x));
    float _2130 = fma(_2121, cbSceneParam._m0[91u].z, fma(_2119, cbSceneParam._m0[91u].y, _2117 * cbSceneParam._m0[91u].x));
    vec4 _2138 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1026, _1027));
    float _2140 = _2138.w;
    float _2152 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2140);
    float _2153 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2140);
    float _2154 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2140);
    uvec4 _2158 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2160 = _2158.x * 14u;
    uint _2161 = _2160 + 13u;
    float _2168 = _1104 + (-1.0);
    float _2173 = (cbLight._m0[_2161].x * _2168) + 1.0;
    float _2174 = (cbLight._m0[_2161].y * _2168) + 1.0;
    float _2175 = (cbLight._m0[_2161].z * _2168) + 1.0;
    float _2176 = (cbLight._m0[_2161].w * _2168) + 1.0;
    uint _2177 = _2160 + 5u;
    float _2183 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
    uint _2187 = _2160 + 4u;
    float _2196 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
    uint _2200 = _2160 | 1u;
    float _2211 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_938, _939, _940));
    float _2214 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_938, _939, _940));
    float _4392 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _4403 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2219 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2221 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.3183098733425140380859375;
    float _2228 = ((cbLight._m0[_2177].x * _2183) * _2221) + (((cbLight._m0[_2187].x * _2152) * _2196) * _2219);
    float _2229 = ((_2183 * cbLight._m0[_2177].y) * _2221) + (((cbLight._m0[_2187].y * _2153) * _2196) * _2219);
    float _2230 = ((_2183 * cbLight._m0[_2177].z) * _2221) + (((cbLight._m0[_2187].z * _2154) * _2196) * _2219);
    uvec4 _2234 = floatBitsToUint(cbLight._m0[_2160 + 12u]);
    bool _2236 = _2234.x == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2236)
    {
        _2247 = _2228;
        _2249 = _2229;
        _2251 = _2230;
    }
    else
    {
        uint _2255 = _2160 + 6u;
        float _2271 = (dot(vec3(cbLight._m0[_2160 + 2u].xyz), vec3(_938, _939, _940)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4414 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2274 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2247 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2228;
        _2249 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2229;
        _2251 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2230;
    }
    bool _2254 = _2234.y == 0u;
    float _2292;
    float _2294;
    float _2296;
    if (_2254)
    {
        _2292 = _2247;
        _2294 = _2249;
        _2296 = _2251;
    }
    else
    {
        uint _2465 = _2160 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2160 + 3u].xyz), vec3(_938, _939, _940)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4430 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2484 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2292 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2247;
        _2294 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2249;
        _2296 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2251;
    }
    uint _2299 = _2160 + 8u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _941) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2160].x + _1018;
    float _2315 = cbLight._m0[_2160].y + _1019;
    float _2316 = cbLight._m0[_2160].z + _1020;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2160].xyz));
    float _4446 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _4457 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _2328 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2329 = dot(vec3(_938, _939, _940), vec3(_2321, _2322, _2323));
    float _4468 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2321, _2322, _2323));
    float _4479 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2313 * _2313;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0);
    float _2350 = 0.959999978542327880859375 - _1085;
    float _2352 = 0.959999978542327880859375 - _1086;
    float _2353 = 0.959999978542327880859375 - _1087;
    float _2360 = 1.0 - _2313;
    float _2371 = (0.5 / (((_2328 * ((_2327 * _2360) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2360) + _2313) * _2327))) * _2327;
    float _4490 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    uint _2387 = _2160 + 9u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _941) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2200].x + _1018;
    float _2401 = cbLight._m0[_2200].y + _1019;
    float _2402 = cbLight._m0[_2200].z + _1020;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2200].xyz));
    float _4501 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2414 = dot(vec3(_938, _939, _940), vec3(_2407, _2408, _2409));
    float _4512 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2407, _2408, _2409));
    float _4523 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2399 * _2399;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0);
    float _2440 = 1.0 - _2399;
    float _2450 = (0.5 / (((_2328 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2440) + _2399) * _2413))) * _2413;
    float _4534 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2462 = (((((_2433 * _2350) + _1088) * cbLight._m0[_2387].x) * _2452) * _2183) + ((((cbLight._m0[_2299].x * _2152) * ((_2349 * _2350) + _1088)) * _2373) * _2196);
    float _2463 = (((((_2433 * _2352) + _1090) * cbLight._m0[_2387].y) * _2452) * _2183) + ((((cbLight._m0[_2299].y * _2153) * ((_2349 * _2352) + _1090)) * _2373) * _2196);
    float _2464 = (((((_2433 * _2353) + _1091) * cbLight._m0[_2387].z) * _2452) * _2183) + ((((cbLight._m0[_2299].z * _2154) * ((_2349 * _2353) + _1091)) * _2373) * _2196);
    float _2526;
    float _2528;
    float _2530;
    if (_2236)
    {
        _2526 = _2462;
        _2528 = _2463;
        _2530 = _2464;
    }
    else
    {
        uint _2532 = _2160 + 2u;
        uint _2536 = _2160 + 10u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _941) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _1018;
        float _2553 = cbLight._m0[_2532].y + _1019;
        float _2554 = cbLight._m0[_2532].z + _1020;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2532].xyz));
        float _4545 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2566 = dot(vec3(_938, _939, _940), vec3(_2559, _2560, _2561));
        float _4556 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4567 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0);
        float _2592 = 1.0 - _2551;
        float _2602 = (0.5 / (((_2328 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2592) + _2551) * _2565))) * _2565;
        float _4578 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2175 : (isnan(_2175) ? 1.0 : min(_2175, 1.0));
        _2526 = (((((_2585 * _2350) + _1088) * cbLight._m0[_2536].x) * _2604) * _2605) + _2462;
        _2528 = (((((_2585 * _2352) + _1090) * cbLight._m0[_2536].y) * _2604) * _2605) + _2463;
        _2530 = (((((_2585 * _2353) + _1091) * cbLight._m0[_2536].z) * _2604) * _2605) + _2464;
    }
    float _2640;
    float _2642;
    float _2644;
    if (_2254)
    {
        _2640 = _2526;
        _2642 = _2528;
        _2644 = _2530;
    }
    else
    {
        uint _2651 = _2160 + 3u;
        uint _2655 = _2160 + 11u;
        float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2651].w)) * _941) * 0.949999988079071044921875);
        float _2670 = _2669 * _2669;
        float _2671 = cbLight._m0[_2651].x + _1018;
        float _2672 = cbLight._m0[_2651].y + _1019;
        float _2673 = cbLight._m0[_2651].z + _1020;
        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
        float _2678 = _2677 * _2671;
        float _2679 = _2677 * _2672;
        float _2680 = _2677 * _2673;
        float _2681 = dot(vec3(_938, _939, _940), vec3(cbLight._m0[_2651].xyz));
        float _4594 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2685 = dot(vec3(_938, _939, _940), vec3(_2678, _2679, _2680));
        float _4605 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2689 = dot(vec3(cbLight._m0[_2651].xyz), vec3(_2678, _2679, _2680));
        float _4616 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2693 = _2670 * _2670;
        float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
        float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0);
        float _2711 = 1.0 - _2670;
        float _2721 = (0.5 / (((_2328 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2711) + _2670) * _2684))) * _2684;
        float _4627 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2723 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
        float _2724 = isnan(1.0) ? _2176 : (isnan(_2176) ? 1.0 : min(_2176, 1.0));
        _2640 = (((((_2704 * _2350) + _1088) * cbLight._m0[_2655].x) * _2723) * _2724) + _2526;
        _2642 = (((((_2704 * _2352) + _1090) * cbLight._m0[_2655].y) * _2723) * _2724) + _2528;
        _2644 = (((((_2704 * _2353) + _1091) * cbLight._m0[_2655].z) * _2723) * _2724) + _2530;
    }
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    if (_2158.y == 0u)
    {
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2799;
        float _2801 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2799;
        float _2802 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2799;
        uvec4 _2814 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2815 = _2814.x;
        uint _2826 = uint((float(_2814.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1027) / _2815))) + floor(float(uint(cbSceneParam._m0[85u].x * _1026) / _2815)));
        float _2836 = (log2(_2802 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2837 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        uint _2840 = uint(isnan(14.0) ? _2837 : (isnan(_2837) ? 14.0 : min(_2837, 14.0)));
        uvec4 _2845 = texelFetch(g_lightClusterGridBuffer, int(((_2840 << 2u) + (_2826 << 6u)) >> 2u));
        uint _2846 = _2845.x;
        uint _2847 = _2814.z;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((((1u << ((_2847 >> 4u) & 15u)) + 4294967295u) & _2846) == 0u) || ((_2847 & 240u) == 0u))
        {
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
        }
        else
        {
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _3092 = 0.0;
            float _3093 = 0.0;
            float _3094 = 0.0;
            float _3095 = 0.0;
            float _3096 = 0.0;
            float _3097 = 0.0;
            uint _3098 = 0u;
            uint _3107;
            bool _3108;
            for (;;)
            {
                _3107 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3098 << 2u)) >> 2u)).x;
                _3108 = _3107 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3108)
                {
                    frontier_phi_61_pred = _3092;
                    frontier_phi_61_pred_1 = _3097;
                    frontier_phi_61_pred_2 = _3096;
                    frontier_phi_61_pred_3 = _3095;
                    frontier_phi_61_pred_4 = _3094;
                    frontier_phi_61_pred_5 = _3093;
                }
                else
                {
                    float _3216;
                    float _3217;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    uint _3222;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3094;
                    _3219 = _3095;
                    _3220 = _3096;
                    _3221 = _3097;
                    _3222 = _3107;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    for (;;)
                    {
                        uint _3226 = uint(findLSB(_3222)) + (_3098 << 5u);
                        uint _3223 = (_3222 + 4294967295u) & _3222;
                        uint _3228 = _3226 * 48u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3248 = (_3226 * 48u) + 4u;
                        vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 3u)).x));
                        uint _3267 = (_3226 * 48u) + 8u;
                        vec3 _3278 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x));
                        float _3282 = _3242.x - _2800;
                        float _3283 = _3242.y - _2801;
                        float _3284 = _3242.z - _2802;
                        float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                        float _3288 = inversesqrt(_3285);
                        float _3289 = _3288 * _3282;
                        float _3290 = _3288 * _3283;
                        float _3291 = _3288 * _3284;
                        float _3292 = dot(vec3(_1045, _1048, _1051), vec3(_3289, _3290, _3291));
                        float _3297 = 1.0 - (_3285 * _3242.w);
                        float _4653 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3299 = sqrt(_3285) * _3261.w;
                        float _3302 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3292) + _3303;
                        float _3309 = _3299 * _3299;
                        float _3313 = ((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3298) / ((_3309 * 0.699999988079071044921875) + 1.0);
                        float _3317 = (-0.0) - _2800;
                        float _3318 = (-0.0) - _2801;
                        float _3319 = (-0.0) - _2802;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3324 = _3323 * _3317;
                        float _3325 = _3323 * _3318;
                        float _3326 = _3323 * _3319;
                        float _3334 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                        float _3335 = 1.0 - _1120;
                        float _3342 = sqrt(1.0 - ((1.0 - (_3335 * _3335)) * (1.0 - (_3334 * _3334))));
                        float _3343 = _3342 * _3342;
                        float _3344 = _3343 * _3343;
                        float _3345 = _3324 + _3289;
                        float _3346 = _3325 + _3290;
                        float _3347 = _3326 + _3291;
                        float _3351 = inversesqrt(dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347)));
                        float _3355 = dot(vec3(_1045, _1048, _1051), vec3(_3324, _3325, _3326));
                        float _4669 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3358 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3359 = dot(vec3(_1045, _1048, _1051), vec3(_3351 * _3345, _3351 * _3346, _3351 * _3347));
                        float _4680 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3362 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3366 = ((_3362 * _3362) * (_3344 + (-1.0))) + 1.0;
                        float _3367 = _3302 * _3343;
                        float _3368 = _3367 * _3367;
                        float _3371 = ((1.0 - _3368) * _3292) + _3368;
                        float _4691 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3372 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3373 = 1.0 - _3343;
                        float _3383 = (0.5 / (((_3372 * ((_3358 * _3373) + _3343)) + 9.9999999392252902907785028219223e-09) + (((_3372 * _3373) + _3343) * _3358))) * _3372;
                        float _4702 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3394 = (((_3344 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3366 * _3366) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125))) * _3298;
                        _3151 = (_3313 * _3261.x) + _3219;
                        _3152 = (_3313 * _3261.y) + _3220;
                        _3153 = (_3313 * _3261.z) + _3221;
                        _3148 = (_3394 * _3278.x) + _3216;
                        _3149 = (_3394 * _3278.y) + _3217;
                        _3150 = (_3394 * _3278.z) + _3218;
                        if (_3223 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3150;
                            _3219 = _3151;
                            _3220 = _3152;
                            _3221 = _3153;
                            _3222 = _3223;
                        }
                    }
                    frontier_phi_61_pred = _3148;
                    frontier_phi_61_pred_1 = _3153;
                    frontier_phi_61_pred_2 = _3152;
                    frontier_phi_61_pred_3 = _3151;
                    frontier_phi_61_pred_4 = _3150;
                    frontier_phi_61_pred_5 = _3149;
                }
                _2948 = frontier_phi_61_pred;
                _2958 = frontier_phi_61_pred_1;
                _2956 = frontier_phi_61_pred_2;
                _2954 = frontier_phi_61_pred_3;
                _2952 = frontier_phi_61_pred_4;
                _2950 = frontier_phi_61_pred_5;
                uint _3099 = _3098 + 1u;
                if (_3099 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3092 = _2948;
                    _3093 = _2950;
                    _3094 = _2952;
                    _3095 = _2954;
                    _3096 = _2956;
                    _3097 = _2958;
                    _3098 = _3099;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
        }
        uvec4 _2961 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2962 = _2961.z;
        uint _2964 = (_2962 >> 8u) & 15u;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        if (((4294967295u << _2964) & _2846) == 0u)
        {
            _3060 = _2947;
            _3062 = _2949;
            _3064 = _2951;
            _3066 = _2953;
            _3068 = _2955;
            _3070 = _2957;
        }
        else
        {
            float _3085 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
            float _3086 = _3085 * _2800;
            float _3087 = _3085 * _2801;
            float _3088 = _3085 * _2802;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2964 < ((_2962 >> 12u) & 15u))
            {
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3199 = _2947;
                float _3200 = _2949;
                float _3201 = _2951;
                float _3202 = _2953;
                float _3203 = _2955;
                float _3204 = _2957;
                uint _3205 = _2964;
                uint _3214;
                bool _3215;
                for (;;)
                {
                    _3214 = texelFetch(g_lightClassification, int((((_2840 << 5u) + (_2826 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                    _3215 = _3214 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3215)
                    {
                        frontier_phi_67_pred = _3202;
                        frontier_phi_67_pred_1 = _3203;
                        frontier_phi_67_pred_2 = _3204;
                        frontier_phi_67_pred_3 = _3201;
                        frontier_phi_67_pred_4 = _3200;
                        frontier_phi_67_pred_5 = _3199;
                    }
                    else
                    {
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3404;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3412 = _3199;
                        float _3413 = _3200;
                        float _3414 = _3201;
                        float _3415 = _3202;
                        float _3416 = _3203;
                        float _3417 = _3204;
                        uint _3418 = _3214;
                        uint _3419;
                        vec4 _3444;
                        float _3445;
                        vec4 _3460;
                        vec3 _3472;
                        vec4 _3487;
                        vec4 _3502;
                        float _3548;
                        bool _3549;
                        for (;;)
                        {
                            uint _3429 = ((_3205 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3418));
                            _3419 = (_3418 + 4294967295u) & _3418;
                            uint _3431 = _3429 * 40u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3445 = _3444.w;
                            uint _3447 = (_3429 * 40u) + 4u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3429 * 40u) + 8u;
                            _3472 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x));
                            uint _3474 = (_3429 * 40u) + 16u;
                            _3487 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3474)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3474 + 3u)).x));
                            uint _3489 = (_3429 * 40u) + 20u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            uint _3504 = (_3429 * 40u) + 24u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            uint _3523 = (_3429 * 40u) + 28u;
                            vec4 _3536 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3523)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3523 + 3u)).x));
                            _3548 = fma(_2802, _3536.z, fma(_2801, _3536.y, _3536.x * _2800)) + _3536.w;
                            _3549 = !((fma(_2802, _3517.z, fma(_2801, _3517.y, _3517.x * _2800)) + _3517.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3549)
                            {
                                float _3576 = _3444.x - _2800;
                                float _3577 = _3444.y - _2801;
                                float _3578 = _3444.z - _2802;
                                float _3579 = dot(vec3(_3576, _3577, _3578), vec3(_3576, _3577, _3578));
                                float _3582 = inversesqrt(_3579);
                                float _3583 = _3582 * _3576;
                                float _3584 = _3582 * _3577;
                                float _3585 = _3582 * _3578;
                                float _3589 = 1.0 - (_3579 / (_3445 * _3445));
                                float _4713 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3594 = sqrt(_3579) * _3460.w;
                                float _3596 = 1.39999997615814208984375 / (_3594 + 1.39999997615814208984375);
                                float _3597 = _3596 * _3596;
                                float _3600 = ((1.0 - _3597) * dot(vec3(_3583, _3584, _3585), vec3(_1045, _1048, _1051))) + _3597;
                                float _3603 = _3594 * _3594;
                                float _3607 = (fma(_2802, _3487.z, fma(_2801, _3487.y, _3487.x * _2800)) + _3487.w) / _3548;
                                float _3608 = (fma(_2802, _3502.z, fma(_2801, _3502.y, _3502.x * _2800)) + _3502.w) / _3548;
                                float _3612 = 1.0 - dot(vec2(_3607, _3608), vec2(_3607, _3608));
                                float _4729 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3613 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3614 = _3613 * (((isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0))) * _3590) / ((_3603 * 0.699999988079071044921875) + 1.0));
                                float _3626 = exp2(log2(1.0 / ((_3603 * 3.5) + 5.0)) * 0.25);
                                float _3627 = 1.0 - _1120;
                                float _3634 = sqrt(1.0 - ((1.0 - (_3627 * _3627)) * (1.0 - (_3626 * _3626))));
                                float _3635 = _3634 * _3634;
                                float _3636 = _3635 * _3635;
                                float _3637 = _3583 - _3086;
                                float _3638 = _3584 - _3087;
                                float _3639 = _3585 - _3088;
                                float _3643 = inversesqrt(dot(vec3(_3637, _3638, _3639), vec3(_3637, _3638, _3639)));
                                float _3647 = dot(vec3(_1045, _1048, _1051), vec3((-0.0) - _3086, (-0.0) - _3087, (-0.0) - _3088));
                                float _4740 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3650 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3651 = dot(vec3(_1045, _1048, _1051), vec3(_3643 * _3637, _3643 * _3638, _3643 * _3639));
                                float _4751 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3654 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3658 = ((_3654 * _3654) * (_3636 + (-1.0))) + 1.0;
                                float _3659 = _3596 * _3635;
                                float _3660 = _3659 * _3659;
                                float _3666 = ((1.0 - _3660) * dot(vec3(_1045, _1048, _1051), vec3(_3583, _3584, _3585))) + _3660;
                                float _4762 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3668 = 1.0 - _3635;
                                float _3678 = (0.5 / (((_3667 * ((_3650 * _3668) + _3635)) + 9.9999999392252902907785028219223e-09) + (((_3667 * _3668) + _3635) * _3650))) * _3667;
                                float _4773 = isnan(0.0) ? _3678 : (isnan(_3678) ? 0.0 : max(_3678, 0.0));
                                float _3688 = (_3613 * _3590) * (((_3636 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3658 * _3658) * ((_3603 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3688 * _3472.x;
                                frontier_phi_73_pred_1 = _3688 * _3472.y;
                                frontier_phi_73_pred_2 = _3614 * _3460.z;
                                frontier_phi_73_pred_3 = _3614 * _3460.y;
                                frontier_phi_73_pred_4 = _3614 * _3460.x;
                                frontier_phi_73_pred_5 = _3688 * _3472.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3692 = frontier_phi_73_pred;
                            _3693 = frontier_phi_73_pred_1;
                            _3697 = frontier_phi_73_pred_2;
                            _3696 = frontier_phi_73_pred_3;
                            _3695 = frontier_phi_73_pred_4;
                            _3694 = frontier_phi_73_pred_5;
                            _3402 = _3695 + _3415;
                            _3403 = _3696 + _3416;
                            _3404 = _3697 + _3417;
                            _3399 = _3692 + _3412;
                            _3400 = _3693 + _3413;
                            _3401 = _3694 + _3414;
                            if (_3419 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3412 = _3399;
                                _3413 = _3400;
                                _3414 = _3401;
                                _3415 = _3402;
                                _3416 = _3403;
                                _3417 = _3404;
                                _3418 = _3419;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3402;
                        frontier_phi_67_pred_1 = _3403;
                        frontier_phi_67_pred_2 = _3404;
                        frontier_phi_67_pred_3 = _3401;
                        frontier_phi_67_pred_4 = _3400;
                        frontier_phi_67_pred_5 = _3399;
                    }
                    _3067 = frontier_phi_67_pred;
                    _3069 = frontier_phi_67_pred_1;
                    _3071 = frontier_phi_67_pred_2;
                    _3065 = frontier_phi_67_pred_3;
                    _3063 = frontier_phi_67_pred_4;
                    _3061 = frontier_phi_67_pred_5;
                    uint _3206 = _3205 + 1u;
                    if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3199 = _3061;
                        _3200 = _3063;
                        _3201 = _3065;
                        _3202 = _3067;
                        _3203 = _3069;
                        _3204 = _3071;
                        _3205 = _3206;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3069;
                frontier_phi_55_56_ladder_1 = _3071;
                frontier_phi_55_56_ladder_2 = _3067;
                frontier_phi_55_56_ladder_3 = _3065;
                frontier_phi_55_56_ladder_4 = _3063;
                frontier_phi_55_56_ladder_5 = _3061;
            }
            else
            {
                frontier_phi_55_56_ladder = _2955;
                frontier_phi_55_56_ladder_1 = _2957;
                frontier_phi_55_56_ladder_2 = _2953;
                frontier_phi_55_56_ladder_3 = _2951;
                frontier_phi_55_56_ladder_4 = _2949;
                frontier_phi_55_56_ladder_5 = _2947;
            }
            _3060 = frontier_phi_55_56_ladder_5;
            _3062 = frontier_phi_55_56_ladder_4;
            _3064 = frontier_phi_55_56_ladder_3;
            _3066 = frontier_phi_55_56_ladder_2;
            _3068 = frontier_phi_55_56_ladder;
            _3070 = frontier_phi_55_56_ladder_1;
        }
        float _3075 = isnan(1.0) ? _1104 : (isnan(_1104) ? 1.0 : min(_1104, 1.0));
        _2859 = (_3075 * _3066) + _2292;
        _2861 = (_3075 * _3068) + _2294;
        _2863 = (_3075 * _3070) + _2296;
        _2865 = ((_3060 * _1088) * _3075) + _2640;
        _2867 = ((_3062 * _1090) * _3075) + _2642;
        _2869 = ((_3064 * _1091) * _3075) + _2644;
    }
    else
    {
        _2859 = _2292;
        _2861 = _2294;
        _2863 = _2296;
        _2865 = _2640;
        _2867 = _2642;
        _2869 = _2644;
    }
    float _4789 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _4800 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _4811 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    uint _2889 = _280 + 6u;
    float _2897 = _1026 / cbSceneParam._m0[86u].x;
    float _2898 = _1027 / cbSceneParam._m0[86u].y;
    vec4 _2912 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, (log2((isnan(cbSceneParam._m0[77u].w) ? _960 : (isnan(_960) ? cbSceneParam._m0[77u].w : min(_960, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2914 = _2912.x;
    float _2915 = _2912.y;
    float _2916 = _2912.z;
    float _2917 = _2912.w;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_960 > cbSceneParam._m0[78u].w)
    {
        float _2972 = isnan(_960) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _960 : min(cbSceneParam._m0[80u].w, _960));
        float _2973 = _2972 / _960;
        float _2984 = _2973 * _1011;
        float _2985 = _1012 * _2973;
        float _2986 = (-0.0) - _2985;
        float _2988 = _2973 * _1013;
        float _2990 = (cbSceneParam._m0[77u].w * _2986) / _2972;
        float _2991 = _2990 + cbSceneParam._m0[79u].w;
        float _2992 = cbSceneParam._m0[79u].w - _2985;
        float _2998 = sqrt(((_2984 * _2984) + (_2985 * _2985)) + (_2988 * _2988));
        float _3001 = (1.0 - (cbSceneParam._m0[77u].w / _2972)) * _2998;
        float _3006 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3008 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3161;
        if (abs((_2986 - _2990) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3161 = ((((_2991 > 0.0) ? exp2(_3006 * _2991) : (2.0 - exp2(_3008 * _2991))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3001;
        }
        else
        {
            float _3121 = 1.0 / cbSceneParam._m0[80u].x;
            float _3122 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : max(_2991, _2992));
            float _3123 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : min(_2991, _2992));
            float _3132 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : min(_3122, 0.0));
            float _3133 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : min(_3123, 0.0));
            _3161 = ((abs(_2998 / _2986) * cbSceneParam._m0[80u].y) * ((((_3132 - _3133) * 2.0) - ((exp2(_3006 * (isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0)))) - exp2(_3006 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))))) * _3121)) - ((exp2(_3008 * _3132) - exp2(_3008 * _3133)) * _3121))) + (_3001 * cbSceneParam._m0[80u].z);
        }
        vec4 _3163 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2897, _2898, 1.0), 0.0);
        float _3172 = exp2((_3161 * (-1.44269502162933349609375)) * (1.0 - _3163.w));
        float _3173 = log2(_3172);
        float _3189 = log2(_2917);
        _3010 = (exp2(_3189 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].x)) * _3163.x) / cbSceneParam._m0[78u].x)) + _2914;
        _3012 = (exp2(_3189 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].y)) * _3163.y) / cbSceneParam._m0[78u].y)) + _2915;
        _3014 = (exp2(_3189 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3173 * cbSceneParam._m0[78u].z)) * _3163.z) / cbSceneParam._m0[78u].z)) + _2916;
        _3016 = _3172 * _2917;
    }
    else
    {
        _3010 = _2914;
        _3012 = _2915;
        _3014 = _2916;
        _3016 = _2917;
    }
    float _3028 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3029 = _3028 == 3.0;
    float _3030 = log2(_3016);
    float _3037 = exp2(_3030 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2859 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1104))) + ((_2865 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1911)) * cbPerFrame._m0[3u].x));
    float _3038 = exp2(_3030 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2861 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1104))) + ((_2867 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1911)) * cbPerFrame._m0[3u].x));
    float _3039 = exp2(_3030 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2863 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1104))) + ((_2869 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1911)) * cbPerFrame._m0[3u].x));
    float _3048 = (_3028 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3048 * (_3029 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3010)));
    SV_Target.y = _3048 * (_3029 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3012)));
    SV_Target.z = _3048 * (_3029 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3014)));
    SV_Target.w = cbInstanceData._m0[_2889].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2889].w;
}


