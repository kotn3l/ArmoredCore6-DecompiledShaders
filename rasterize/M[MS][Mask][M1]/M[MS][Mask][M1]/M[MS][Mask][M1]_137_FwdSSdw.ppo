#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1615;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3962 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _459 = (_452 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _460 = (_452 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _461 = (_452 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[23u].w) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3973 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _572 = _570.x;
    float _582 = dot(vec4(_572, _570.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _594 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _381.z) * 2.0) - ((((_572 - _582) * cbMtdParam._m0[23u].w) + _582) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3984 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _608 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _312.x) * ((_595 * ((_553.x * cbMtdParam._m0[14u].x) - _532)) + _532);
    float _611 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _312.y) * ((_595 * ((_553.y * cbMtdParam._m0[14u].y) - _533)) + _533);
    float _614 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _312.z) * ((_595 * ((_553.z * cbMtdParam._m0[14u].z) - _534)) + _534);
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _671 = _669.x;
    float _672 = _669.y;
    float _673 = _669.z;
    float _680 = ((_652.x - _671) * _452) + _671;
    float _681 = ((_652.y - _672) * _452) + _672;
    float _682 = ((_652.z - _673) * _452) + _673;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _705 = ((_694.x - _680) * _525) + _680;
    float _706 = ((_694.y - _681) * _525) + _681;
    float _707 = ((_694.z - _682) * _525) + _682;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _732 = ((_719.z - _707) * _595) + _707;
    float _735 = ((((_719.x - _705) * _595) + _705) * 2.0) + (-1.0);
    float _737 = ((((_719.y - _706) * _595) + _706) * 2.0) + (-1.0);
    float _738 = dot(vec2(_735, _737), vec2(_735, _737));
    float _3995 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _743 = sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _782 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _784 = _782.x;
    float _785 = 1.0 - _784;
    float _793 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _796 = ((isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : min(_793, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _805 = (_796 - ((((((_784 - _785) * cbMtdParam._m0[24u].z) + _785) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _796))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4016 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _813 = (_806 * ((_632.x * cbMtdParam._m0[18u].x) - _608)) + _608;
    float _814 = (_806 * ((_632.y * cbMtdParam._m0[18u].y) - _611)) + _611;
    float _815 = (_806 * ((_632.z * cbMtdParam._m0[18u].z) - _614)) + _614;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _829 = _827.x;
    float _830 = 1.0 - _829;
    float _855 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_829 - _830) * cbMtdParam._m0[24u].w) + _830) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4027 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _856 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _864 = ((((cbMtdParam._m0[10u].x - _813) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _856) + _813;
    float _865 = ((((cbMtdParam._m0[10u].y - _814) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _856) + _814;
    float _866 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _815)) * _856) + _815;
    vec4 _892 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _894 = _892.x;
    float _911 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _894) * _452) + _894;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _911) * _525) + _911;
    float _945 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _928) * _595) + _928;
    float _949 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _945) * cbMtdParam._m0[19u].z) + _945;
    float _951 = _949 - (_949 * _806);
    float _953 = _951 - (_951 * _856);
    float _957 = (cbMtdParam._m0[19u].w * (_757.z - _732)) + _732;
    vec4 _973 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _980 = (_973.x * 2.0) + (-1.0);
    float _981 = (_973.y * 2.0) + (-1.0);
    float _982 = dot(vec2(_980, _981), vec2(_980, _981));
    float _4038 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _990 = (_806 * (_973.z - _957)) + _957;
    float _993 = ((cbMtdParam._m0[23u].x - _990) * _856) + _990;
    vec4 _1016 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1022 = (_1016.x * 2.0) + (-1.0);
    float _1023 = (_1016.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4049 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1032 = (((_757.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _735;
    float _1033 = (((_757.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _737;
    float _1045 = (((_980 - _1032) + (cbMtdParam._m0[21u].x * _1032)) * _806) + _1032;
    float _1046 = (((_981 - _1033) + (cbMtdParam._m0[21u].x * _1033)) * _806) + _1033;
    float _1047 = (_806 * (sqrt(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) - _743)) + _743;
    float _1058 = (((_1022 - _1045) + (_1045 * cbMtdParam._m0[22u].z)) * _856) + _1045;
    float _1059 = (((_1023 - _1046) + (_1046 * cbMtdParam._m0[22u].z)) * _856) + _1046;
    float _1060 = ((sqrt(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) - _1047) * _856) + _1047;
    float _1062 = cbMtdParam._m0[22u].x + _757.w;
    float _1065 = fma(_1060, _260 * NORMAL.x, fma(_1059, _267 * TANGENT.x, (_253 * _245) * _1058));
    float _1068 = fma(_1060, _260 * NORMAL.y, fma(_1059, _267 * TANGENT.y, (_253 * _246) * _1058));
    float _1071 = fma(_1060, _260 * NORMAL.z, fma(_1059, _267 * TANGENT.z, (_253 * _247) * _1058));
    float _1075 = inversesqrt(dot(vec3(_1065, _1068, _1071), vec3(_1065, _1068, _1071)));
    float _1076 = _1075 * _1065;
    float _1077 = _1075 * _1068;
    float _1078 = _1075 * _1071;
    float _4060 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1079 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4082 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4093 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4104 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4115 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _1084 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1098 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1148 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1138);
    float _1149 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1138);
    float _1150 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1138);
    float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
    float _1155 = _1148 * _1154;
    float _1156 = _1149 * _1154;
    float _1157 = _1150 * _1154;
    float _1163 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1164 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1182 = fma(_1078, cbSceneParam._m0[5u].z, fma(_1077, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1076));
    float _1185 = fma(_1078, cbSceneParam._m0[6u].z, fma(_1077, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1076));
    float _1188 = fma(_1078, cbSceneParam._m0[7u].z, fma(_1077, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1076));
    uint _1202 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1208 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * cbInstanceData._m0[_1202].x;
    float _1209 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_1202].y;
    float _1210 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * cbInstanceData._m0[_1202].z;
    float _4126 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1211 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _1212 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1213 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _1214 = 1.0 - _1084;
    float _1215 = _1211 * _1214;
    float _1216 = _1212 * _1214;
    float _1217 = _1213 * _1214;
    float _1222 = (_1211 + (-0.039999999105930328369140625)) * _1084;
    float _1223 = (_1212 + (-0.039999999105930328369140625)) * _1084;
    float _1224 = (_1213 + (-0.039999999105930328369140625)) * _1084;
    float _1225 = _1222 + 0.039999999105930328369140625;
    float _1227 = _1223 + 0.039999999105930328369140625;
    float _1228 = _1224 + 0.039999999105930328369140625;
    vec4 _1237 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1163, cbSceneParam._m0[86u].y * _1164));
    float _1241 = ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * TEXCOORD_5.w) * _1237.x;
    float _1242 = dot(vec3(_1076, _1077, _1078), vec3(_1155, _1156, _1157));
    float _1245 = _1242 * 2.0;
    float _1249 = (_1245 * _1076) - _1155;
    float _1250 = (_1245 * _1077) - _1156;
    float _1251 = (_1245 * _1078) - _1157;
    float _1255 = abs(dot(vec3(_1155, _1156, _1157), vec3(_1076, _1077, _1078)));
    float _4159 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    float _1257 = sqrt(_1079);
    float _1270 = exp2((_1257 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1257 * 3.0));
    float _1276 = (1.0 - _1270) * ((_1257 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1277 = _1270 * _1257;
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1309 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1614;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1339 = fma(_1313, cbModelParam._m0[26u].z, fma(_1309, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1305));
        float _1343 = fma(_1313, cbModelParam._m0[27u].z, fma(_1309, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1305));
        float _1347 = fma(_1313, cbModelParam._m0[28u].z, fma(_1309, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1305));
        float _1372 = _1305 + _1076;
        float _1373 = _1309 + _1077;
        float _1374 = _1313 + _1078;
        float _1384 = fma(_1374, cbModelParam._m0[26u].z, fma(_1373, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1372)) - _1339;
        float _1385 = fma(_1374, cbModelParam._m0[27u].z, fma(_1373, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1372)) - _1343;
        float _1386 = fma(_1374, cbModelParam._m0[28u].z, fma(_1373, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1372)) - _1347;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1339 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1343 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[34u].z) + ((((((_1347 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1442 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1408.x + (-0.5));
        float _1444 = _1442 * (_1408.y + (-0.5));
        float _1445 = _1442 * (_1408.z + (-0.5));
        float _1452 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1415.x + (-0.5));
        float _1454 = _1452 * (_1415.y + (-0.5));
        float _1455 = _1452 * (_1415.z + (-0.5));
        float _1462 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1422.x + (-0.5));
        float _1464 = _1462 * (_1422.y + (-0.5));
        float _1465 = _1462 * (_1422.z + (-0.5));
        float _1472 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1429.x + (-0.5));
        float _1474 = _1472 * (_1429.y + (-0.5));
        float _1475 = _1472 * (_1429.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1496 = (dot(vec3(_1076, _1077, _1078), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1506 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4207 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1508 + 1.0))) + _1513) * _1476;
        float _1523 = _1444 * 0.5;
        float _1524 = _1454 * 0.5;
        float _1525 = _1464 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_1076, _1077, _1078), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4240 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1550 + 1.0))) + _1555) * _1477;
        float _1565 = _1445 * 0.5;
        float _1566 = _1455 * 0.5;
        float _1567 = _1465 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_1076, _1077, _1078), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4273 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1592 + 1.0))) + _1597) * _1478;
        _1614 = _1445;
        _1616 = _1444;
        _1617 = _1443;
        _1618 = _1455;
        _1619 = _1454;
        _1620 = _1453;
        _1621 = _1465;
        _1622 = _1464;
        _1623 = _1463;
        _1624 = _1478;
        _1625 = _1477;
        _1626 = _1476;
        _1627 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1628 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1629 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1615;
        _1616 = _1615;
        _1617 = _1615;
        _1618 = _1615;
        _1619 = _1615;
        _1620 = _1615;
        _1621 = _1615;
        _1622 = _1615;
        _1623 = _1615;
        _1624 = _1615;
        _1625 = _1615;
        _1626 = _1615;
        _1627 = 0.0;
        _1628 = 0.0;
        _1629 = 0.0;
    }
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1652 = fma(_1313, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305));
        float _1656 = fma(_1313, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305));
        float _1660 = fma(_1313, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305));
        float _1683 = _1305 + _1076;
        float _1684 = _1309 + _1077;
        float _1685 = _1313 + _1078;
        float _1695 = fma(_1685, cbModelParam._m0[30u].z, fma(_1684, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1683)) - _1652;
        float _1696 = fma(_1685, cbModelParam._m0[31u].z, fma(_1684, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1683)) - _1656;
        float _1697 = fma(_1685, cbModelParam._m0[32u].z, fma(_1684, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1683)) - _1660;
        float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
        float _1714 = ((_1701 * _1695) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1652 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1715 = ((_1701 * _1696) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1656 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1716 = ((_1701 * _1697) / cbModelParam._m0[35u].z) + ((((((_1660 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        vec4 _1732 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        vec4 _1739 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1714, _1715, _1716), 0.0);
        float _1751 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1718.x + (-0.5));
        float _1753 = _1751 * (_1718.y + (-0.5));
        float _1754 = _1751 * (_1718.z + (-0.5));
        float _1761 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1725.x + (-0.5));
        float _1763 = _1761 * (_1725.y + (-0.5));
        float _1764 = _1761 * (_1725.z + (-0.5));
        float _1771 = exp2((_1732.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1732.x + (-0.5));
        float _1773 = _1771 * (_1732.y + (-0.5));
        float _1774 = _1771 * (_1732.z + (-0.5));
        float _1781 = exp2((_1739.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1739.x + (-0.5));
        float _1783 = _1781 * (_1739.y + (-0.5));
        float _1784 = _1781 * (_1739.z + (-0.5));
        float _1785 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = _1752 * 0.5;
        float _1789 = _1762 * 0.5;
        float _1790 = _1772 * 0.5;
        float _1791 = dot(vec3(_1788, _1789, _1790), vec3(_1788, _1789, _1790));
        float _1796 = (_1791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1791);
        float _1804 = (dot(vec3(_1076, _1077, _1078), vec3(_1796 * _1788, _1796 * _1789, _1796 * _1790)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1813 = sqrt(((_1789 * _1789) + (_1788 * _1788)) + (_1790 * _1790)) / (_1785 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1815 = _1814 * 2.0;
        float _1819 = (1.0 - _1814) / (_1814 + 1.0);
        float _4336 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1829 = ((((1.0 - _1820) * (_1815 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1815 + 1.0))) + _1820) * _1785;
        float _1830 = _1753 * 0.5;
        float _1831 = _1763 * 0.5;
        float _1832 = _1773 * 0.5;
        float _1833 = dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832));
        float _1838 = (_1833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1833);
        float _1846 = (dot(vec3(_1076, _1077, _1078), vec3(_1838 * _1830, _1838 * _1831, _1838 * _1832)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1855 = sqrt(((_1831 * _1831) + (_1830 * _1830)) + (_1832 * _1832)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1857 = _1856 * 2.0;
        float _1861 = (1.0 - _1856) / (_1856 + 1.0);
        float _4369 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1871 = ((((1.0 - _1862) * (_1857 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1857 + 1.0))) + _1862) * _1786;
        float _1872 = _1754 * 0.5;
        float _1873 = _1764 * 0.5;
        float _1874 = _1774 * 0.5;
        float _1875 = dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874));
        float _1880 = (_1875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1875);
        float _1888 = (dot(vec3(_1076, _1077, _1078), vec3(_1880 * _1872, _1880 * _1873, _1880 * _1874)) + 1.0) * 0.5;
        float _4380 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1897 = sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4391 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1899 = _1898 * 2.0;
        float _1903 = (1.0 - _1898) / (_1898 + 1.0);
        float _4402 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1913 = ((((1.0 - _1904) * (_1899 + 2.0)) * exp2(log2(isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_1899 + 1.0))) + _1904) * _1787;
        _1921 = _1754;
        _1922 = _1753;
        _1923 = _1752;
        _1924 = _1764;
        _1925 = _1763;
        _1926 = _1762;
        _1927 = _1774;
        _1928 = _1773;
        _1929 = _1772;
        _1930 = _1787;
        _1931 = _1786;
        _1932 = _1785;
        _1933 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)));
        _1934 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)));
        _1935 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)));
    }
    else
    {
        _1921 = _1615;
        _1922 = _1615;
        _1923 = _1615;
        _1924 = _1615;
        _1925 = _1615;
        _1926 = _1615;
        _1927 = _1615;
        _1928 = _1615;
        _1929 = _1615;
        _1930 = _1615;
        _1931 = _1615;
        _1932 = _1615;
        _1933 = 0.0;
        _1934 = 0.0;
        _1935 = 0.0;
    }
    float _1945 = (cbModelParam._m0[1u].x * (_1933 - _1627)) + _1627;
    float _1946 = (cbModelParam._m0[1u].x * (_1934 - _1628)) + _1628;
    float _1947 = (cbModelParam._m0[1u].x * (_1935 - _1629)) + _1629;
    float _1968 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1945));
    float _1989 = _1249 * 0.5;
    float _1990 = _1250 * 0.5;
    float _1991 = _1251 * 0.5;
    float _1992 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1923, _1926, _1929, _1932));
    float _1995 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1922, _1925, _1928, _1931));
    float _1998 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1921, _1924, _1927, _1930));
    float _2032;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2005 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1614, _1618, _1621, _1624));
        float _2009 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1616, _1619, _1622, _1625));
        float _2013 = dot(vec4(_1989, _1990, _1991, 1.0), vec4(_1617, _1620, _1623, _1626));
        float _2020 = dot(vec4(cbModelParam._m0[39u]), vec4(_1989, _1990, _1991, 1.0));
        _2032 = dot(vec3(isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)), isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2020) ? 0.0 : (isnan(0.0) ? _2020 : max(0.0, _2020))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2032 = 1.0;
    }
    float _2043;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2034 = dot(vec4(cbModelParam._m0[40u]), vec4(_1989, _1990, _1991, 1.0));
        _2043 = dot(vec3(isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2034) ? 0.0 : (isnan(0.0) ? _2034 : max(0.0, _2034))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2043 = 1.0;
    }
    float _2047 = (_2043 * cbModelParam._m0[1u].x) + (_2032 * (1.0 - cbModelParam._m0[1u].x));
    float _2057 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1079);
    float _2058 = isnan(_2057) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2057 : min(cbModelParam._m0[25u].z, _2057));
    float _2138;
    float _2140;
    float _2142;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2105 = fma(_1313, cbModelParam._m0[13u].z, fma(_1309, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1305)) + cbModelParam._m0[13u].w;
        float _2109 = fma(_1313, cbModelParam._m0[14u].z, fma(_1309, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1305)) + cbModelParam._m0[14u].w;
        float _2113 = fma(_1313, cbModelParam._m0[15u].z, fma(_1309, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1305)) + cbModelParam._m0[15u].w;
        float _2116 = fma(_1251, cbModelParam._m0[13u].z, fma(_1250, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1249));
        float _2119 = fma(_1251, cbModelParam._m0[14u].z, fma(_1250, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1249));
        float _2122 = fma(_1251, cbModelParam._m0[15u].z, fma(_1250, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1249));
        float _2150;
        if (_2116 > 0.0)
        {
            _2150 = abs((1.0 - _2105) / _2116);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2105 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2150 = frontier_phi_14_12_ladder;
        }
        float _2373;
        if (_2119 > 0.0)
        {
            _2373 = abs((1.0 - _2109) / _2119);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2109 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2373 = frontier_phi_23_19_ladder;
        }
        float _2630;
        if (_2122 > 0.0)
        {
            _2630 = abs((1.0 - _2113) / _2122);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2113 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2630 = frontier_phi_35_30_ladder;
        }
        float _2632 = isnan(_2373) ? _2150 : (isnan(_2150) ? _2373 : min(_2150, _2373));
        float _2633 = isnan(_2630) ? _2632 : (isnan(_2632) ? _2630 : min(_2632, _2630));
        float _2637 = (_2633 * _2116) + _2105;
        float _2638 = (_2633 * _2119) + _2109;
        float _2639 = (_2633 * _2122) + _2113;
        float _2640 = _2633 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2640;
        float _2644 = _2640 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 > _2644) || ((_2638 < _2642) || ((_2637 < _2642) || (_2637 > _2644))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2639, cbModelParam._m0[9u].z, fma(_2638, cbModelParam._m0[9u].y, _2637 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2639, cbModelParam._m0[10u].z, fma(_2638, cbModelParam._m0[10u].y, _2637 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2639, cbModelParam._m0[11u].z, fma(_2638, cbModelParam._m0[11u].y, _2637 * cbModelParam._m0[11u].x))), _2058);
            frontier_phi_13_35_ladder = _2767.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2767.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2767.x * cbModelParam._m0[1u].y;
        }
        _2138 = frontier_phi_13_35_ladder_2;
        _2140 = frontier_phi_13_35_ladder_1;
        _2142 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2126 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1249, _1250, _1251), _2058);
        _2138 = _2126.x * cbModelParam._m0[1u].y;
        _2140 = _2126.y * cbModelParam._m0[1u].y;
        _2142 = _2126.z * cbModelParam._m0[1u].y;
    }
    float _2146 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1079);
    float _2147 = isnan(_2146) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2146 : min(cbModelParam._m0[25u].w, _2146));
    float _2236;
    float _2238;
    float _2240;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2200 = fma(_1313, cbModelParam._m0[21u].z, fma(_1309, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1305)) + cbModelParam._m0[21u].w;
        float _2204 = fma(_1313, cbModelParam._m0[22u].z, fma(_1309, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1305)) + cbModelParam._m0[22u].w;
        float _2208 = fma(_1313, cbModelParam._m0[23u].z, fma(_1309, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1305)) + cbModelParam._m0[23u].w;
        float _2211 = fma(_1251, cbModelParam._m0[21u].z, fma(_1250, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1249));
        float _2214 = fma(_1251, cbModelParam._m0[22u].z, fma(_1250, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1249));
        float _2217 = fma(_1251, cbModelParam._m0[23u].z, fma(_1250, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1249));
        float _2378;
        if (_2211 > 0.0)
        {
            _2378 = abs((1.0 - _2200) / _2211);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2200 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2378 = frontier_phi_25_21_ladder;
        }
        float _2657;
        if (_2214 > 0.0)
        {
            _2657 = abs((1.0 - _2204) / _2214);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2214 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2204 + 1.0) / _2214);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2657 = frontier_phi_37_32_ladder;
        }
        float _2870;
        if (_2217 > 0.0)
        {
            _2870 = abs((1.0 - _2208) / _2217);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2217 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2208 + 1.0) / _2217);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2870 = frontier_phi_46_43_ladder;
        }
        float _2872 = isnan(_2657) ? _2378 : (isnan(_2378) ? _2657 : min(_2378, _2657));
        float _2873 = isnan(_2870) ? _2872 : (isnan(_2872) ? _2870 : min(_2872, _2870));
        float _2877 = (_2873 * _2211) + _2200;
        float _2878 = (_2873 * _2214) + _2204;
        float _2879 = (_2873 * _2217) + _2208;
        float _2880 = _2873 * 9.9999997473787516355514526367188e-05;
        float _2881 = (-1.0) - _2880;
        float _2883 = _2880 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2879 > _2883) || ((_2879 < _2881) || ((_2878 > _2883) || ((_2878 < _2881) || ((_2877 < _2881) || (_2877 > _2883))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3078 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2879, cbModelParam._m0[17u].z, fma(_2878, cbModelParam._m0[17u].y, _2877 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2879, cbModelParam._m0[18u].z, fma(_2878, cbModelParam._m0[18u].y, _2877 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2879, cbModelParam._m0[19u].z, fma(_2878, cbModelParam._m0[19u].y, _2877 * cbModelParam._m0[19u].x))), _2147);
            frontier_phi_22_46_ladder = _3078.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3078.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3078.x * cbModelParam._m0[1u].z;
        }
        _2236 = frontier_phi_22_46_ladder_2;
        _2238 = frontier_phi_22_46_ladder_1;
        _2240 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2220 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1249, _1250, _1251), _2147);
        _2236 = _2220.x * cbModelParam._m0[1u].z;
        _2238 = _2220.y * cbModelParam._m0[1u].z;
        _2240 = _2220.z * cbModelParam._m0[1u].z;
    }
    float _2253 = (((_1276 * _1225) + _1277) * _1241) * ((cbModelParam._m0[1u].w * (_2236 - _2138)) + _2138);
    float _2255 = (((_1276 * _1227) + _1277) * _1241) * ((cbModelParam._m0[1u].w * (_2238 - _2140)) + _2140);
    float _2257 = (((_1276 * _1228) + _1277) * _1241) * ((cbModelParam._m0[1u].w * (_2240 - _2142)) + _2142);
    float _2260 = fma(_2257, cbSceneParam._m0[89u].z, fma(_2255, cbSceneParam._m0[89u].y, _2253 * cbSceneParam._m0[89u].x));
    float _2263 = fma(_2257, cbSceneParam._m0[90u].z, fma(_2255, cbSceneParam._m0[90u].y, _2253 * cbSceneParam._m0[90u].x));
    float _2266 = fma(_2257, cbSceneParam._m0[91u].z, fma(_2255, cbSceneParam._m0[91u].y, _2253 * cbSceneParam._m0[91u].x));
    vec4 _2274 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1163, _1164));
    float _2276 = _2274.w;
    float _2288 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2276);
    float _2289 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2276);
    float _2290 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2276);
    uvec4 _2294 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2296 = _2294.x * 14u;
    uint _2297 = _2296 + 13u;
    float _2304 = _1241 + (-1.0);
    float _2309 = (cbLight._m0[_2297].x * _2304) + 1.0;
    float _2310 = (cbLight._m0[_2297].y * _2304) + 1.0;
    float _2311 = (cbLight._m0[_2297].z * _2304) + 1.0;
    float _2312 = (cbLight._m0[_2297].w * _2304) + 1.0;
    uint _2313 = _2296 + 5u;
    float _2319 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2323 = _2296 + 4u;
    float _2332 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2336 = _2296 | 1u;
    float _2347 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_1076, _1077, _1078));
    float _2350 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_1076, _1077, _1078));
    float _4538 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _4549 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2357 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2364 = ((cbLight._m0[_2313].x * _2319) * _2357) + (((cbLight._m0[_2323].x * _2288) * _2332) * _2355);
    float _2365 = ((_2319 * cbLight._m0[_2313].y) * _2357) + (((cbLight._m0[_2323].y * _2289) * _2332) * _2355);
    float _2366 = ((_2319 * cbLight._m0[_2313].z) * _2357) + (((cbLight._m0[_2323].z * _2290) * _2332) * _2355);
    uvec4 _2370 = floatBitsToUint(cbLight._m0[_2296 + 12u]);
    bool _2372 = _2370.x == 0u;
    float _2383;
    float _2385;
    float _2387;
    if (_2372)
    {
        _2383 = _2364;
        _2385 = _2365;
        _2387 = _2366;
    }
    else
    {
        uint _2391 = _2296 + 6u;
        float _2407 = (dot(vec3(cbLight._m0[_2296 + 2u].xyz), vec3(_1076, _1077, _1078)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4560 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2410 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2383 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2364;
        _2385 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2365;
        _2387 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2366;
    }
    bool _2390 = _2370.y == 0u;
    float _2428;
    float _2430;
    float _2432;
    if (_2390)
    {
        _2428 = _2383;
        _2430 = _2385;
        _2432 = _2387;
    }
    else
    {
        uint _2601 = _2296 + 7u;
        float _2617 = (dot(vec3(cbLight._m0[_2296 + 3u].xyz), vec3(_1076, _1077, _1078)) * 0.5) + 0.5;
        float _2618 = _2617 * _2617;
        float _4576 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2619 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2620 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2428 = (((cbLight._m0[_2601].x * 0.3183098733425140380859375) * _2619) * _2620) + _2383;
        _2430 = (((cbLight._m0[_2601].y * 0.3183098733425140380859375) * _2619) * _2620) + _2385;
        _2432 = (((cbLight._m0[_2601].z * 0.3183098733425140380859375) * _2619) * _2620) + _2387;
    }
    uint _2435 = _2296 + 8u;
    float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _1079) * 0.949999988079071044921875);
    float _2449 = _2448 * _2448;
    float _2450 = cbLight._m0[_2296].x + _1155;
    float _2451 = cbLight._m0[_2296].y + _1156;
    float _2452 = cbLight._m0[_2296].z + _1157;
    float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
    float _2457 = _2456 * _2450;
    float _2458 = _2456 * _2451;
    float _2459 = _2456 * _2452;
    float _2460 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_2296].xyz));
    float _4592 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _2464 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2465 = dot(vec3(_1076, _1077, _1078), vec3(_2457, _2458, _2459));
    float _4614 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2469 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2457, _2458, _2459));
    float _4625 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2473 = _2449 * _2449;
    float _2477 = ((_2468 * _2468) * (_2473 + (-1.0))) + 1.0;
    float _2485 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2486 = 0.959999978542327880859375 - _1222;
    float _2488 = 0.959999978542327880859375 - _1223;
    float _2489 = 0.959999978542327880859375 - _1224;
    float _2496 = 1.0 - _2449;
    float _2507 = (0.5 / (((_2464 * ((_2463 * _2496) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2496) + _2449) * _2463))) * _2463;
    float _4636 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2473 / ((_2477 * _2477) * 3.141590118408203125));
    uint _2523 = _2296 + 9u;
    float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _1079) * 0.949999988079071044921875);
    float _2535 = _2534 * _2534;
    float _2536 = cbLight._m0[_2336].x + _1155;
    float _2537 = cbLight._m0[_2336].y + _1156;
    float _2538 = cbLight._m0[_2336].z + _1157;
    float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
    float _2543 = _2542 * _2536;
    float _2544 = _2542 * _2537;
    float _2545 = _2542 * _2538;
    float _2546 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_2336].xyz));
    float _4647 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2550 = dot(vec3(_1076, _1077, _1078), vec3(_2543, _2544, _2545));
    float _4658 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2554 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2543, _2544, _2545));
    float _4669 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2558 = _2535 * _2535;
    float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
    float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2576 = 1.0 - _2535;
    float _2586 = (0.5 / (((_2464 * ((_2549 * _2576) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2576) + _2535) * _2549))) * _2549;
    float _4680 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
    float _2598 = (((((_2569 * _2486) + _1225) * cbLight._m0[_2523].x) * _2588) * _2319) + ((((cbLight._m0[_2435].x * _2288) * ((_2485 * _2486) + _1225)) * _2509) * _2332);
    float _2599 = (((((_2569 * _2488) + _1227) * cbLight._m0[_2523].y) * _2588) * _2319) + ((((cbLight._m0[_2435].y * _2289) * ((_2485 * _2488) + _1227)) * _2509) * _2332);
    float _2600 = (((((_2569 * _2489) + _1228) * cbLight._m0[_2523].z) * _2588) * _2319) + ((((cbLight._m0[_2435].z * _2290) * ((_2485 * _2489) + _1228)) * _2509) * _2332);
    float _2662;
    float _2664;
    float _2666;
    if (_2372)
    {
        _2662 = _2598;
        _2664 = _2599;
        _2666 = _2600;
    }
    else
    {
        uint _2668 = _2296 + 2u;
        uint _2672 = _2296 + 10u;
        float _2686 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2668].w)) * _1079) * 0.949999988079071044921875);
        float _2687 = _2686 * _2686;
        float _2688 = cbLight._m0[_2668].x + _1155;
        float _2689 = cbLight._m0[_2668].y + _1156;
        float _2690 = cbLight._m0[_2668].z + _1157;
        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
        float _2695 = _2694 * _2688;
        float _2696 = _2694 * _2689;
        float _2697 = _2694 * _2690;
        float _2698 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_2668].xyz));
        float _4691 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2701 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2702 = dot(vec3(_1076, _1077, _1078), vec3(_2695, _2696, _2697));
        float _4702 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2706 = dot(vec3(cbLight._m0[_2668].xyz), vec3(_2695, _2696, _2697));
        float _4713 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2710 = _2687 * _2687;
        float _2714 = ((_2705 * _2705) * (_2710 + (-1.0))) + 1.0;
        float _2721 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2728 = 1.0 - _2687;
        float _2738 = (0.5 / (((_2464 * ((_2701 * _2728) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2728) + _2687) * _2701))) * _2701;
        float _4724 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2740 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2710 / ((_2714 * _2714) * 3.141590118408203125));
        float _2741 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2662 = (((((_2721 * _2486) + _1225) * cbLight._m0[_2672].x) * _2740) * _2741) + _2598;
        _2664 = (((((_2721 * _2488) + _1227) * cbLight._m0[_2672].y) * _2740) * _2741) + _2599;
        _2666 = (((((_2721 * _2489) + _1228) * cbLight._m0[_2672].z) * _2740) * _2741) + _2600;
    }
    float _2776;
    float _2778;
    float _2780;
    if (_2390)
    {
        _2776 = _2662;
        _2778 = _2664;
        _2780 = _2666;
    }
    else
    {
        uint _2787 = _2296 + 3u;
        uint _2791 = _2296 + 11u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _1079) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _1155;
        float _2808 = cbLight._m0[_2787].y + _1156;
        float _2809 = cbLight._m0[_2787].z + _1157;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_1076, _1077, _1078), vec3(cbLight._m0[_2787].xyz));
        float _4740 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2821 = dot(vec3(_1076, _1077, _1078), vec3(_2814, _2815, _2816));
        float _4751 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4762 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2840 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2847 = 1.0 - _2806;
        float _2857 = (0.5 / (((_2464 * ((_2820 * _2847) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2464 * _2847) + _2806) * _2820))) * _2820;
        float _4773 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2859 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2860 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2776 = (((((_2840 * _2486) + _1225) * cbLight._m0[_2791].x) * _2859) * _2860) + _2662;
        _2778 = (((((_2840 * _2488) + _1227) * cbLight._m0[_2791].y) * _2859) * _2860) + _2664;
        _2780 = (((((_2840 * _2489) + _1228) * cbLight._m0[_2791].z) * _2859) * _2860) + _2666;
    }
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_2294.y == 0u)
    {
        float _2935 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2936 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2935;
        float _2937 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2935;
        float _2938 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2935;
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.x;
        uint _2962 = uint((float(_2950.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1164) / _2951))) + floor(float(uint(cbSceneParam._m0[85u].x * _1163) / _2951)));
        float _2972 = (log2(_2938 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2973 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        uint _2976 = uint(isnan(14.0) ? _2973 : (isnan(_2973) ? 14.0 : min(_2973, 14.0)));
        uvec4 _2981 = texelFetch(g_lightClusterGridBuffer, int(((_2976 << 2u) + (_2962 << 6u)) >> 2u));
        uint _2982 = _2981.x;
        uint _2983 = _2950.z;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((((1u << ((_2983 >> 4u) & 15u)) + 4294967295u) & _2982) == 0u) || ((_2983 & 240u) == 0u))
        {
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
        }
        else
        {
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            uint _3234 = 0u;
            uint _3243;
            bool _3244;
            for (;;)
            {
                _3243 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3234 << 2u)) >> 2u)).x;
                _3244 = _3243 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3244)
                {
                    frontier_phi_61_pred = _3228;
                    frontier_phi_61_pred_1 = _3233;
                    frontier_phi_61_pred_2 = _3232;
                    frontier_phi_61_pred_3 = _3231;
                    frontier_phi_61_pred_4 = _3230;
                    frontier_phi_61_pred_5 = _3229;
                }
                else
                {
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    uint _3358;
                    _3352 = _3228;
                    _3353 = _3229;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3243;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    for (;;)
                    {
                        uint _3362 = uint(findLSB(_3358)) + (_3234 << 5u);
                        uint _3359 = (_3358 + 4294967295u) & _3358;
                        uint _3364 = _3362 * 48u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3384 = (_3362 * 48u) + 4u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 3u)).x));
                        uint _3403 = (_3362 * 48u) + 8u;
                        vec3 _3414 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x));
                        float _3418 = _3378.x - _2936;
                        float _3419 = _3378.y - _2937;
                        float _3420 = _3378.z - _2938;
                        float _3421 = dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420));
                        float _3424 = inversesqrt(_3421);
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3428 = dot(vec3(_1182, _1185, _1188), vec3(_3425, _3426, _3427));
                        float _3433 = 1.0 - (_3421 * _3378.w);
                        float _4799 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3435 = sqrt(_3421) * _3397.w;
                        float _3438 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3428) + _3439;
                        float _3445 = _3435 * _3435;
                        float _3449 = ((isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))) * _3434) / ((_3445 * 0.699999988079071044921875) + 1.0);
                        float _3453 = (-0.0) - _2936;
                        float _3454 = (-0.0) - _2937;
                        float _3455 = (-0.0) - _2938;
                        float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3470 = exp2(log2(1.0 / ((_3445 * 3.5) + 5.0)) * 0.25);
                        float _3471 = 1.0 - _1257;
                        float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                        float _3479 = _3478 * _3478;
                        float _3480 = _3479 * _3479;
                        float _3481 = _3460 + _3425;
                        float _3482 = _3461 + _3426;
                        float _3483 = _3462 + _3427;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3491 = dot(vec3(_1182, _1185, _1188), vec3(_3460, _3461, _3462));
                        float _4815 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3495 = dot(vec3(_1182, _1185, _1188), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                        float _4826 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                        float _3503 = _3438 * _3479;
                        float _3504 = _3503 * _3503;
                        float _3507 = ((1.0 - _3504) * _3428) + _3504;
                        float _4837 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3508 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3509 = 1.0 - _3479;
                        float _3519 = (0.5 / (((_3508 * ((_3494 * _3509) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3479) * _3494))) * _3508;
                        float _4848 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3530 = (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3502 * _3502) * ((_3445 * 2.1991131305694580078125) + 3.141590118408203125))) * _3434;
                        _3287 = (_3449 * _3397.x) + _3355;
                        _3288 = (_3449 * _3397.y) + _3356;
                        _3289 = (_3449 * _3397.z) + _3357;
                        _3284 = (_3530 * _3414.x) + _3352;
                        _3285 = (_3530 * _3414.y) + _3353;
                        _3286 = (_3530 * _3414.z) + _3354;
                        if (_3359 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3352 = _3284;
                            _3353 = _3285;
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3359;
                        }
                    }
                    frontier_phi_61_pred = _3284;
                    frontier_phi_61_pred_1 = _3289;
                    frontier_phi_61_pred_2 = _3288;
                    frontier_phi_61_pred_3 = _3287;
                    frontier_phi_61_pred_4 = _3286;
                    frontier_phi_61_pred_5 = _3285;
                }
                _3084 = frontier_phi_61_pred;
                _3094 = frontier_phi_61_pred_1;
                _3092 = frontier_phi_61_pred_2;
                _3090 = frontier_phi_61_pred_3;
                _3088 = frontier_phi_61_pred_4;
                _3086 = frontier_phi_61_pred_5;
                uint _3235 = _3234 + 1u;
                if (_3235 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3228 = _3084;
                    _3229 = _3086;
                    _3230 = _3088;
                    _3231 = _3090;
                    _3232 = _3092;
                    _3233 = _3094;
                    _3234 = _3235;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
        }
        uvec4 _3097 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3098 = _3097.z;
        uint _3100 = (_3098 >> 8u) & 15u;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        if (((4294967295u << _3100) & _2982) == 0u)
        {
            _3196 = _3083;
            _3198 = _3085;
            _3200 = _3087;
            _3202 = _3089;
            _3204 = _3091;
            _3206 = _3093;
        }
        else
        {
            float _3221 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
            float _3222 = _3221 * _2936;
            float _3223 = _3221 * _2937;
            float _3224 = _3221 * _2938;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3100 < ((_3098 >> 12u) & 15u))
            {
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3335 = _3083;
                float _3336 = _3085;
                float _3337 = _3087;
                float _3338 = _3089;
                float _3339 = _3091;
                float _3340 = _3093;
                uint _3341 = _3100;
                uint _3350;
                bool _3351;
                for (;;)
                {
                    _3350 = texelFetch(g_lightClassification, int((((_2976 << 5u) + (_2962 << 9u)) + (_3341 << 2u)) >> 2u)).x;
                    _3351 = _3350 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3351)
                    {
                        frontier_phi_67_pred = _3338;
                        frontier_phi_67_pred_1 = _3339;
                        frontier_phi_67_pred_2 = _3340;
                        frontier_phi_67_pred_3 = _3337;
                        frontier_phi_67_pred_4 = _3336;
                        frontier_phi_67_pred_5 = _3335;
                    }
                    else
                    {
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3548 = _3335;
                        float _3549 = _3336;
                        float _3550 = _3337;
                        float _3551 = _3338;
                        float _3552 = _3339;
                        float _3553 = _3340;
                        uint _3554 = _3350;
                        uint _3555;
                        vec4 _3580;
                        float _3581;
                        vec4 _3596;
                        vec3 _3608;
                        vec4 _3623;
                        vec4 _3638;
                        float _3684;
                        bool _3685;
                        for (;;)
                        {
                            uint _3565 = ((_3341 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3554));
                            _3555 = (_3554 + 4294967295u) & _3554;
                            uint _3567 = _3565 * 40u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3581 = _3580.w;
                            uint _3583 = (_3565 * 40u) + 4u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3565 * 40u) + 8u;
                            _3608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x));
                            uint _3610 = (_3565 * 40u) + 16u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3565 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3565 * 40u) + 24u;
                            vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3659 = (_3565 * 40u) + 28u;
                            vec4 _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            _3684 = fma(_2938, _3672.z, fma(_2937, _3672.y, _3672.x * _2936)) + _3672.w;
                            _3685 = !((fma(_2938, _3653.z, fma(_2937, _3653.y, _3653.x * _2936)) + _3653.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3685)
                            {
                                float _3712 = _3580.x - _2936;
                                float _3713 = _3580.y - _2937;
                                float _3714 = _3580.z - _2938;
                                float _3715 = dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714));
                                float _3718 = inversesqrt(_3715);
                                float _3719 = _3718 * _3712;
                                float _3720 = _3718 * _3713;
                                float _3721 = _3718 * _3714;
                                float _3725 = 1.0 - (_3715 / (_3581 * _3581));
                                float _4859 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3726 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3730 = sqrt(_3715) * _3596.w;
                                float _3732 = 1.39999997615814208984375 / (_3730 + 1.39999997615814208984375);
                                float _3733 = _3732 * _3732;
                                float _3736 = ((1.0 - _3733) * dot(vec3(_3719, _3720, _3721), vec3(_1182, _1185, _1188))) + _3733;
                                float _3739 = _3730 * _3730;
                                float _3743 = (fma(_2938, _3623.z, fma(_2937, _3623.y, _3623.x * _2936)) + _3623.w) / _3684;
                                float _3744 = (fma(_2938, _3638.z, fma(_2937, _3638.y, _3638.x * _2936)) + _3638.w) / _3684;
                                float _3748 = 1.0 - dot(vec2(_3743, _3744), vec2(_3743, _3744));
                                float _4875 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3750 = _3749 * (((isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0))) * _3726) / ((_3739 * 0.699999988079071044921875) + 1.0));
                                float _3762 = exp2(log2(1.0 / ((_3739 * 3.5) + 5.0)) * 0.25);
                                float _3763 = 1.0 - _1257;
                                float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                                float _3771 = _3770 * _3770;
                                float _3772 = _3771 * _3771;
                                float _3773 = _3719 - _3222;
                                float _3774 = _3720 - _3223;
                                float _3775 = _3721 - _3224;
                                float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                                float _3783 = dot(vec3(_1182, _1185, _1188), vec3((-0.0) - _3222, (-0.0) - _3223, (-0.0) - _3224));
                                float _4886 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3787 = dot(vec3(_1182, _1185, _1188), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                                float _4897 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                                float _3795 = _3732 * _3771;
                                float _3796 = _3795 * _3795;
                                float _3802 = ((1.0 - _3796) * dot(vec3(_1182, _1185, _1188), vec3(_3719, _3720, _3721))) + _3796;
                                float _4908 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3803 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3804 = 1.0 - _3771;
                                float _3814 = (0.5 / (((_3803 * ((_3786 * _3804) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3803 * _3804) + _3771) * _3786))) * _3803;
                                float _4919 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3824 = (_3749 * _3726) * (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3794 * _3794) * ((_3739 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3824 * _3608.x;
                                frontier_phi_73_pred_1 = _3824 * _3608.y;
                                frontier_phi_73_pred_2 = _3750 * _3596.z;
                                frontier_phi_73_pred_3 = _3750 * _3596.y;
                                frontier_phi_73_pred_4 = _3750 * _3596.x;
                                frontier_phi_73_pred_5 = _3824 * _3608.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3828 = frontier_phi_73_pred;
                            _3829 = frontier_phi_73_pred_1;
                            _3833 = frontier_phi_73_pred_2;
                            _3832 = frontier_phi_73_pred_3;
                            _3831 = frontier_phi_73_pred_4;
                            _3830 = frontier_phi_73_pred_5;
                            _3538 = _3831 + _3551;
                            _3539 = _3832 + _3552;
                            _3540 = _3833 + _3553;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            if (_3555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3555;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3538;
                        frontier_phi_67_pred_1 = _3539;
                        frontier_phi_67_pred_2 = _3540;
                        frontier_phi_67_pred_3 = _3537;
                        frontier_phi_67_pred_4 = _3536;
                        frontier_phi_67_pred_5 = _3535;
                    }
                    _3203 = frontier_phi_67_pred;
                    _3205 = frontier_phi_67_pred_1;
                    _3207 = frontier_phi_67_pred_2;
                    _3201 = frontier_phi_67_pred_3;
                    _3199 = frontier_phi_67_pred_4;
                    _3197 = frontier_phi_67_pred_5;
                    uint _3342 = _3341 + 1u;
                    if (_3342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3335 = _3197;
                        _3336 = _3199;
                        _3337 = _3201;
                        _3338 = _3203;
                        _3339 = _3205;
                        _3340 = _3207;
                        _3341 = _3342;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3205;
                frontier_phi_55_56_ladder_1 = _3207;
                frontier_phi_55_56_ladder_2 = _3203;
                frontier_phi_55_56_ladder_3 = _3201;
                frontier_phi_55_56_ladder_4 = _3199;
                frontier_phi_55_56_ladder_5 = _3197;
            }
            else
            {
                frontier_phi_55_56_ladder = _3091;
                frontier_phi_55_56_ladder_1 = _3093;
                frontier_phi_55_56_ladder_2 = _3089;
                frontier_phi_55_56_ladder_3 = _3087;
                frontier_phi_55_56_ladder_4 = _3085;
                frontier_phi_55_56_ladder_5 = _3083;
            }
            _3196 = frontier_phi_55_56_ladder_5;
            _3198 = frontier_phi_55_56_ladder_4;
            _3200 = frontier_phi_55_56_ladder_3;
            _3202 = frontier_phi_55_56_ladder_2;
            _3204 = frontier_phi_55_56_ladder;
            _3206 = frontier_phi_55_56_ladder_1;
        }
        float _3211 = isnan(1.0) ? _1241 : (isnan(_1241) ? 1.0 : min(_1241, 1.0));
        _2995 = (_3211 * _3202) + _2428;
        _2997 = (_3211 * _3204) + _2430;
        _2999 = (_3211 * _3206) + _2432;
        _3001 = ((_3196 * _1225) * _3211) + _2776;
        _3003 = ((_3198 * _1227) * _3211) + _2778;
        _3005 = ((_3200 * _1228) * _3211) + _2780;
    }
    else
    {
        _2995 = _2428;
        _2997 = _2430;
        _2999 = _2432;
        _3001 = _2776;
        _3003 = _2778;
        _3005 = _2780;
    }
    float _4935 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _4946 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _4957 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    uint _3025 = _273 + 6u;
    float _3033 = _1163 / cbSceneParam._m0[86u].x;
    float _3034 = _1164 / cbSceneParam._m0[86u].y;
    vec4 _3048 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, (log2((isnan(cbSceneParam._m0[77u].w) ? _1098 : (isnan(_1098) ? cbSceneParam._m0[77u].w : min(_1098, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3050 = _3048.x;
    float _3051 = _3048.y;
    float _3052 = _3048.z;
    float _3053 = _3048.w;
    float _3146;
    float _3148;
    float _3150;
    float _3152;
    if (_1098 > cbSceneParam._m0[78u].w)
    {
        float _3108 = isnan(_1098) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1098 : min(cbSceneParam._m0[80u].w, _1098));
        float _3109 = _3108 / _1098;
        float _3120 = _3109 * _1148;
        float _3121 = _1149 * _3109;
        float _3122 = (-0.0) - _3121;
        float _3124 = _3109 * _1150;
        float _3126 = (cbSceneParam._m0[77u].w * _3122) / _3108;
        float _3127 = _3126 + cbSceneParam._m0[79u].w;
        float _3128 = cbSceneParam._m0[79u].w - _3121;
        float _3134 = sqrt(((_3120 * _3120) + (_3121 * _3121)) + (_3124 * _3124));
        float _3137 = (1.0 - (cbSceneParam._m0[77u].w / _3108)) * _3134;
        float _3142 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3144 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3297;
        if (abs((_3122 - _3126) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3297 = ((((_3127 > 0.0) ? exp2(_3142 * _3127) : (2.0 - exp2(_3144 * _3127))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3137;
        }
        else
        {
            float _3257 = 1.0 / cbSceneParam._m0[80u].x;
            float _3258 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : max(_3127, _3128));
            float _3259 = isnan(_3128) ? _3127 : (isnan(_3127) ? _3128 : min(_3127, _3128));
            float _3268 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : min(_3258, 0.0));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            _3297 = ((abs(_3134 / _3122) * cbSceneParam._m0[80u].y) * ((((_3268 - _3269) * 2.0) - ((exp2(_3142 * (isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0)))) - exp2(_3142 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))))) * _3257)) - ((exp2(_3144 * _3268) - exp2(_3144 * _3269)) * _3257))) + (_3137 * cbSceneParam._m0[80u].z);
        }
        vec4 _3299 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3033, _3034, 1.0), 0.0);
        float _3308 = exp2((_3297 * (-1.44269502162933349609375)) * (1.0 - _3299.w));
        float _3309 = log2(_3308);
        float _3325 = log2(_3053);
        _3146 = (exp2(_3325 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].x)) * _3299.x) / cbSceneParam._m0[78u].x)) + _3050;
        _3148 = (exp2(_3325 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].y)) * _3299.y) / cbSceneParam._m0[78u].y)) + _3051;
        _3150 = (exp2(_3325 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3309 * cbSceneParam._m0[78u].z)) * _3299.z) / cbSceneParam._m0[78u].z)) + _3052;
        _3152 = _3308 * _3053;
    }
    else
    {
        _3146 = _3050;
        _3148 = _3051;
        _3150 = _3052;
        _3152 = _3053;
    }
    float _3164 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3165 = _3164 == 3.0;
    float _3166 = log2(_3152);
    float _3173 = exp2(_3166 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2995 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1241))) + ((_3001 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _2047)) * cbPerFrame._m0[3u].x));
    float _3174 = exp2(_3166 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2997 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1241))) + ((_3003 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _2047)) * cbPerFrame._m0[3u].x));
    float _3175 = exp2(_3166 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2999 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1241))) + ((_3005 + ((isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))) * _2047)) * cbPerFrame._m0[3u].x));
    float _3184 = (_3164 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3184 * (_3165 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3146)));
    SV_Target.y = _3184 * (_3165 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3148)));
    SV_Target.z = _3184 * (_3165 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3150)));
    SV_Target.w = cbInstanceData._m0[_3025].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3025].w;
}


