#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1408;
float _3812;
float _3813;
float _3814;
float _3815;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[23u].w) + _416) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3824 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _447 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_434 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329);
    float _450 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_434 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330);
    float _453 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_434 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331);
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _280) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _281) + cbTextureTilingScale._m0[14u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _434) + _513;
    float _525 = ((((_492.x - _511) * _434) + _511) * 2.0) + (-1.0);
    float _527 = ((((_492.y - _512) * _434) + _512) * 2.0) + (-1.0);
    float _528 = dot(vec2(_525, _527), vec2(_525, _527));
    float _3835 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _586 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _589 = ((isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : min(_586, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _598 = (_589 - ((((((_576 - _577) * cbMtdParam._m0[24u].z) + _577) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _589))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3856 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _606 = (_599 * ((_472.x * cbMtdParam._m0[18u].x) - _447)) + _447;
    float _607 = (_599 * ((_472.y * cbMtdParam._m0[18u].y) - _450)) + _450;
    float _608 = (_599 * ((_472.z * cbMtdParam._m0[18u].z) - _453)) + _453;
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _648 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_622 - _623) * cbMtdParam._m0[24u].w) + _623) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3867 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _649 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _657 = ((((cbMtdParam._m0[10u].x - _606) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _649) + _606;
    float _658 = ((((cbMtdParam._m0[10u].y - _607) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _649) + _607;
    float _659 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _608)) * _649) + _608;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _687 = _685.x;
    float _704 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _687) * _434) + _687;
    float _708 = ((_671.x - _704) * cbMtdParam._m0[19u].z) + _704;
    float _710 = _708 - (_708 * _599);
    float _712 = _710 - (_710 * _649);
    float _716 = (cbMtdParam._m0[19u].w * (_549.z - _522)) + _522;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _737 = (_730.x * 2.0) + (-1.0);
    float _738 = (_730.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_737, _738), vec2(_737, _738));
    float _3878 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _747 = (_599 * (_730.z - _716)) + _716;
    float _750 = ((cbMtdParam._m0[23u].x - _747) * _649) + _747;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _775 = (_769.x * 2.0) + (-1.0);
    float _776 = (_769.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _3889 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _785 = (((_549.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _525;
    float _786 = (((_549.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _527;
    float _798 = (((_737 - _785) + (cbMtdParam._m0[21u].x * _785)) * _599) + _785;
    float _799 = (((_738 - _786) + (cbMtdParam._m0[21u].x * _786)) * _599) + _786;
    float _800 = (_599 * (sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) - _533)) + _533;
    float _811 = (((_775 - _798) + (_798 * cbMtdParam._m0[22u].z)) * _649) + _798;
    float _812 = (((_776 - _799) + (_799 * cbMtdParam._m0[22u].z)) * _649) + _799;
    float _813 = ((sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _800) * _649) + _800;
    float _815 = cbMtdParam._m0[22u].x + _549.w;
    float _818 = fma(_813, _248 * NORMAL.x, fma(_812, _255 * TANGENT.x, (_241 * _233) * _811));
    float _821 = fma(_813, _248 * NORMAL.y, fma(_812, _255 * TANGENT.y, (_241 * _234) * _811));
    float _824 = fma(_813, _248 * NORMAL.z, fma(_812, _255 * TANGENT.z, (_241 * _235) * _811));
    float _828 = inversesqrt(dot(vec3(_818, _821, _824), vec3(_818, _821, _824)));
    float _829 = _828 * _818;
    float _830 = _828 * _821;
    float _831 = _828 * _824;
    float _3900 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _832 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _3922 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3933 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3944 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3955 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _837 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _851 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _901 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _891);
    float _902 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _891);
    float _903 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _891);
    float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
    float _908 = _901 * _907;
    float _909 = _902 * _907;
    float _910 = _903 * _907;
    vec4 _915 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _917 = _915.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1089 = sqrt(((_901 * _901) + (_902 * _902)) + (_903 * _903));
        float _1095 = (cbMatDynParam._m0[5u].x * _1089) + cbMatDynParam._m0[5u].y;
        float _3966 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1100 = (cbMatDynParam._m0[5u].z * _1089) + cbMatDynParam._m0[5u].w;
        float _3977 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) - _1096)) + _1096) < ((_917 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _928 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _929 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _947 = fma(_831, cbSceneParam._m0[5u].z, fma(_830, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _829));
    float _950 = fma(_831, cbSceneParam._m0[6u].z, fma(_830, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _829));
    float _953 = fma(_831, cbSceneParam._m0[7u].z, fma(_830, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _829));
    uint _966 = _261 + 9u;
    uint _967 = _966 + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_967].z;
    float _3988 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _979 = 1.0 - _837;
    float _980 = _976 * _979;
    float _981 = _977 * _979;
    float _982 = _978 * _979;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _837;
    float _988 = (_977 + (-0.039999999105930328369140625)) * _837;
    float _989 = (_978 + (-0.039999999105930328369140625)) * _837;
    float _990 = _987 + 0.039999999105930328369140625;
    float _992 = _988 + 0.039999999105930328369140625;
    float _993 = _989 + 0.039999999105930328369140625;
    vec4 _1002 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _928, cbSceneParam._m0[86u].y * _929));
    float _1006 = ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * TEXCOORD_5.w) * _1002.x;
    float _1007 = dot(vec3(_829, _830, _831), vec3(_908, _909, _910));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _829) - _908;
    float _1015 = (_1010 * _830) - _909;
    float _1016 = (_1010 * _831) - _910;
    float _1020 = abs(dot(vec3(_908, _909, _910), vec3(_829, _830, _831)));
    float _4021 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_832);
    float _1035 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1041 = (1.0 - _1035) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1042 = _1035 * _1022;
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1074 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1078 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1407;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1132 = fma(_1078, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1070));
        float _1136 = fma(_1078, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1070));
        float _1140 = fma(_1078, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1070));
        float _1165 = _1070 + _829;
        float _1166 = _1074 + _830;
        float _1167 = _1078 + _831;
        float _1177 = fma(_1167, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1165)) - _1132;
        float _1178 = fma(_1167, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1165)) - _1136;
        float _1179 = fma(_1167, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1165)) - _1140;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1132 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1136 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[34u].z) + ((((((_1140 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1235 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1201.x + (-0.5));
        float _1237 = _1235 * (_1201.y + (-0.5));
        float _1238 = _1235 * (_1201.z + (-0.5));
        float _1245 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1208.x + (-0.5));
        float _1247 = _1245 * (_1208.y + (-0.5));
        float _1248 = _1245 * (_1208.z + (-0.5));
        float _1255 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1215.x + (-0.5));
        float _1257 = _1255 * (_1215.y + (-0.5));
        float _1258 = _1255 * (_1215.z + (-0.5));
        float _1265 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1222.x + (-0.5));
        float _1267 = _1265 * (_1222.y + (-0.5));
        float _1268 = _1265 * (_1222.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1289 = (dot(vec3(_829, _830, _831), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1299 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4069 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1301 + 1.0))) + _1306) * _1269;
        float _1316 = _1237 * 0.5;
        float _1317 = _1247 * 0.5;
        float _1318 = _1257 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_829, _830, _831), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4102 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1343 + 1.0))) + _1348) * _1270;
        float _1358 = _1238 * 0.5;
        float _1359 = _1248 * 0.5;
        float _1360 = _1258 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_829, _830, _831), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4113 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _4124 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4135 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_1385 + 1.0))) + _1390) * _1271;
        _1407 = _1238;
        _1409 = _1237;
        _1410 = _1236;
        _1411 = _1248;
        _1412 = _1247;
        _1413 = _1246;
        _1414 = _1258;
        _1415 = _1257;
        _1416 = _1256;
        _1417 = _1271;
        _1418 = _1270;
        _1419 = _1269;
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1422 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _1408;
        _1409 = _1408;
        _1410 = _1408;
        _1411 = _1408;
        _1412 = _1408;
        _1413 = _1408;
        _1414 = _1408;
        _1415 = _1408;
        _1416 = _1408;
        _1417 = _1408;
        _1418 = _1408;
        _1419 = _1408;
        _1420 = 0.0;
        _1421 = 0.0;
        _1422 = 0.0;
    }
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1450 = fma(_1078, cbModelParam._m0[30u].z, fma(_1074, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070));
        float _1454 = fma(_1078, cbModelParam._m0[31u].z, fma(_1074, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070));
        float _1458 = fma(_1078, cbModelParam._m0[32u].z, fma(_1074, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070));
        float _1481 = _1070 + _829;
        float _1482 = _1074 + _830;
        float _1483 = _1078 + _831;
        float _1493 = fma(_1483, cbModelParam._m0[30u].z, fma(_1482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1481)) - _1450;
        float _1494 = fma(_1483, cbModelParam._m0[31u].z, fma(_1482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1481)) - _1454;
        float _1495 = fma(_1483, cbModelParam._m0[32u].z, fma(_1482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1481)) - _1458;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1450 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1454 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[35u].z) + ((((((_1458 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1549 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1516.x + (-0.5));
        float _1551 = _1549 * (_1516.y + (-0.5));
        float _1552 = _1549 * (_1516.z + (-0.5));
        float _1559 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1523.x + (-0.5));
        float _1561 = _1559 * (_1523.y + (-0.5));
        float _1562 = _1559 * (_1523.z + (-0.5));
        float _1569 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1530.x + (-0.5));
        float _1571 = _1569 * (_1530.y + (-0.5));
        float _1572 = _1569 * (_1530.z + (-0.5));
        float _1579 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1537.x + (-0.5));
        float _1581 = _1579 * (_1537.y + (-0.5));
        float _1582 = _1579 * (_1537.z + (-0.5));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1550 * 0.5;
        float _1587 = _1560 * 0.5;
        float _1588 = _1570 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_829, _830, _831), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4198 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1613 + 1.0))) + _1618) * _1583;
        float _1628 = _1551 * 0.5;
        float _1629 = _1561 * 0.5;
        float _1630 = _1571 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_829, _830, _831), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4231 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1655 + 1.0))) + _1660) * _1584;
        float _1670 = _1552 * 0.5;
        float _1671 = _1562 * 0.5;
        float _1672 = _1572 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_829, _830, _831), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4264 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1697 + 1.0))) + _1702) * _1585;
        _1719 = _1552;
        _1720 = _1551;
        _1721 = _1550;
        _1722 = _1562;
        _1723 = _1561;
        _1724 = _1560;
        _1725 = _1572;
        _1726 = _1571;
        _1727 = _1570;
        _1728 = _1585;
        _1729 = _1584;
        _1730 = _1583;
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
    }
    else
    {
        _1719 = _1408;
        _1720 = _1408;
        _1721 = _1408;
        _1722 = _1408;
        _1723 = _1408;
        _1724 = _1408;
        _1725 = _1408;
        _1726 = _1408;
        _1727 = _1408;
        _1728 = _1408;
        _1729 = _1408;
        _1730 = _1408;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1420)) + _1420;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1421)) + _1421;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1422)) + _1422;
    float _1766 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1743));
    float _1787 = _1014 * 0.5;
    float _1788 = _1015 * 0.5;
    float _1789 = _1016 * 0.5;
    float _1790 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1793 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1796 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1803 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1407, _1411, _1414, _1417));
        float _1807 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1811 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1410, _1413, _1416, _1419));
        float _1818 = dot(vec4(cbModelParam._m0[39u]), vec4(_1787, _1788, _1789, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1787, _1788, _1789, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _832);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1078, cbModelParam._m0[13u].z, fma(_1074, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1070)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1078, cbModelParam._m0[14u].z, fma(_1074, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1070)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1078, cbModelParam._m0[15u].z, fma(_1074, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1070)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1917 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1920 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1948 = frontier_phi_17_15_ladder;
        }
        float _2171;
        if (_1917 > 0.0)
        {
            _2171 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2171 = frontier_phi_26_22_ladder;
        }
        float _2428;
        if (_1920 > 0.0)
        {
            _2428 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2428 = frontier_phi_38_33_ladder;
        }
        float _2430 = isnan(_2171) ? _1948 : (isnan(_1948) ? _2171 : min(_1948, _2171));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1914) + _1903;
        float _2436 = (_2431 * _1917) + _1907;
        float _2437 = (_2431 * _1920) + _1911;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2440 = (-1.0) - _2438;
        float _2442 = _2438 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2437 > _2442) || ((_2437 < _2440) || ((_2436 > _2442) || ((_2436 < _2440) || ((_2435 < _2440) || (_2435 > _2442))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2437, cbModelParam._m0[9u].z, fma(_2436, cbModelParam._m0[9u].y, _2435 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2437, cbModelParam._m0[10u].z, fma(_2436, cbModelParam._m0[10u].y, _2435 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2437, cbModelParam._m0[11u].z, fma(_2436, cbModelParam._m0[11u].y, _2435 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_16_38_ladder = _2565.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2565.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2565.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_16_38_ladder_2;
        _1938 = frontier_phi_16_38_ladder_1;
        _1940 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1856);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _832);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1078, cbModelParam._m0[21u].z, fma(_1074, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1070)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1078, cbModelParam._m0[22u].z, fma(_1074, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1070)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1078, cbModelParam._m0[23u].z, fma(_1074, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1070)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _2012 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _2015 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2176;
        if (_2009 > 0.0)
        {
            _2176 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2176 = frontier_phi_28_24_ladder;
        }
        float _2455;
        if (_2012 > 0.0)
        {
            _2455 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2455 = frontier_phi_40_35_ladder;
        }
        float _2668;
        if (_2015 > 0.0)
        {
            _2668 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2668 = frontier_phi_49_46_ladder;
        }
        float _2670 = isnan(_2455) ? _2176 : (isnan(_2176) ? _2455 : min(_2176, _2455));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _2009) + _1998;
        float _2676 = (_2671 * _2012) + _2002;
        float _2677 = (_2671 * _2015) + _2006;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_25_49_ladder = _2876.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2876.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2876.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_25_49_ladder_2;
        _2036 = frontier_phi_25_49_ladder_1;
        _2038 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1945);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2051 = (((_1041 * _990) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1041 * _992) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2055 = (((_1041 * _993) + _1042) * _1006) * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2058 = fma(_2055, cbSceneParam._m0[89u].z, fma(_2053, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2061 = fma(_2055, cbSceneParam._m0[90u].z, fma(_2053, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2064 = fma(_2055, cbSceneParam._m0[91u].z, fma(_2053, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    vec4 _2072 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_928, _929));
    float _2074 = _2072.w;
    float _2086 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2074);
    float _2087 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2074);
    float _2088 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2074);
    uvec4 _2092 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2094 = _2092.x * 14u;
    uint _2095 = _2094 + 13u;
    float _2102 = _1006 + (-1.0);
    float _2107 = (cbLight._m0[_2095].x * _2102) + 1.0;
    float _2108 = (cbLight._m0[_2095].y * _2102) + 1.0;
    float _2109 = (cbLight._m0[_2095].z * _2102) + 1.0;
    float _2110 = (cbLight._m0[_2095].w * _2102) + 1.0;
    uint _2111 = _2094 + 5u;
    float _2117 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
    uint _2121 = _2094 + 4u;
    float _2130 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
    uint _2134 = _2094 | 1u;
    float _2145 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_829, _830, _831));
    float _2148 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_829, _830, _831));
    float _4400 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _4411 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2153 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2155 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.3183098733425140380859375;
    float _2162 = ((cbLight._m0[_2111].x * _2117) * _2155) + (((cbLight._m0[_2121].x * _2086) * _2130) * _2153);
    float _2163 = ((_2117 * cbLight._m0[_2111].y) * _2155) + (((cbLight._m0[_2121].y * _2087) * _2130) * _2153);
    float _2164 = ((_2117 * cbLight._m0[_2111].z) * _2155) + (((cbLight._m0[_2121].z * _2088) * _2130) * _2153);
    uvec4 _2168 = floatBitsToUint(cbLight._m0[_2094 + 12u]);
    bool _2170 = _2168.x == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2170)
    {
        _2181 = _2162;
        _2183 = _2163;
        _2185 = _2164;
    }
    else
    {
        uint _2189 = _2094 + 6u;
        float _2205 = (dot(vec3(cbLight._m0[_2094 + 2u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4422 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2208 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2181 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _2162;
        _2183 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _2163;
        _2185 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _2164;
    }
    bool _2188 = _2168.y == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2188)
    {
        _2226 = _2181;
        _2228 = _2183;
        _2230 = _2185;
    }
    else
    {
        uint _2399 = _2094 + 7u;
        float _2415 = (dot(vec3(cbLight._m0[_2094 + 3u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4438 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2418 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2226 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2181;
        _2228 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2183;
        _2230 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2185;
    }
    uint _2233 = _2094 + 8u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _832) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2094].x + _908;
    float _2249 = cbLight._m0[_2094].y + _909;
    float _2250 = cbLight._m0[_2094].z + _910;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2094].xyz));
    float _4454 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _4465 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2262 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2263 = dot(vec3(_829, _830, _831), vec3(_2255, _2256, _2257));
    float _4476 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2255, _2256, _2257));
    float _4487 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2247 * _2247;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2283 = exp2(log2(1.0 - (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) * 5.0);
    float _2284 = 0.959999978542327880859375 - _987;
    float _2286 = 0.959999978542327880859375 - _988;
    float _2287 = 0.959999978542327880859375 - _989;
    float _2294 = 1.0 - _2247;
    float _2305 = (0.5 / (((_2262 * ((_2261 * _2294) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2294) + _2247) * _2261))) * _2261;
    float _4498 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    uint _2321 = _2094 + 9u;
    float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _832) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2134].x + _908;
    float _2335 = cbLight._m0[_2134].y + _909;
    float _2336 = cbLight._m0[_2134].z + _910;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2134].xyz));
    float _4509 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2348 = dot(vec3(_829, _830, _831), vec3(_2341, _2342, _2343));
    float _4520 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2352 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2341, _2342, _2343));
    float _4531 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2356 = _2333 * _2333;
    float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
    float _2367 = exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0);
    float _2374 = 1.0 - _2333;
    float _2384 = (0.5 / (((_2262 * ((_2347 * _2374) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2374) + _2333) * _2347))) * _2347;
    float _4542 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
    float _2396 = (((((_2367 * _2284) + _990) * cbLight._m0[_2321].x) * _2386) * _2117) + ((((cbLight._m0[_2233].x * _2086) * ((_2283 * _2284) + _990)) * _2307) * _2130);
    float _2397 = (((((_2367 * _2286) + _992) * cbLight._m0[_2321].y) * _2386) * _2117) + ((((cbLight._m0[_2233].y * _2087) * ((_2283 * _2286) + _992)) * _2307) * _2130);
    float _2398 = (((((_2367 * _2287) + _993) * cbLight._m0[_2321].z) * _2386) * _2117) + ((((cbLight._m0[_2233].z * _2088) * ((_2283 * _2287) + _993)) * _2307) * _2130);
    float _2460;
    float _2462;
    float _2464;
    if (_2170)
    {
        _2460 = _2396;
        _2462 = _2397;
        _2464 = _2398;
    }
    else
    {
        uint _2466 = _2094 + 2u;
        uint _2470 = _2094 + 10u;
        float _2484 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2466].w)) * _832) * 0.949999988079071044921875);
        float _2485 = _2484 * _2484;
        float _2486 = cbLight._m0[_2466].x + _908;
        float _2487 = cbLight._m0[_2466].y + _909;
        float _2488 = cbLight._m0[_2466].z + _910;
        float _2492 = inversesqrt(dot(vec3(_2486, _2487, _2488), vec3(_2486, _2487, _2488)));
        float _2493 = _2492 * _2486;
        float _2494 = _2492 * _2487;
        float _2495 = _2492 * _2488;
        float _2496 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2466].xyz));
        float _4553 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2499 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2500 = dot(vec3(_829, _830, _831), vec3(_2493, _2494, _2495));
        float _4564 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2503 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2504 = dot(vec3(cbLight._m0[_2466].xyz), vec3(_2493, _2494, _2495));
        float _4575 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2508 = _2485 * _2485;
        float _2512 = ((_2503 * _2503) * (_2508 + (-1.0))) + 1.0;
        float _2519 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
        float _2526 = 1.0 - _2485;
        float _2536 = (0.5 / (((_2262 * ((_2499 * _2526) + _2485)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2526) + _2485) * _2499))) * _2499;
        float _4586 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2538 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2508 / ((_2512 * _2512) * 3.141590118408203125));
        float _2539 = isnan(1.0) ? _2109 : (isnan(_2109) ? 1.0 : min(_2109, 1.0));
        _2460 = (((((_2519 * _2284) + _990) * cbLight._m0[_2470].x) * _2538) * _2539) + _2396;
        _2462 = (((((_2519 * _2286) + _992) * cbLight._m0[_2470].y) * _2538) * _2539) + _2397;
        _2464 = (((((_2519 * _2287) + _993) * cbLight._m0[_2470].z) * _2538) * _2539) + _2398;
    }
    float _2574;
    float _2576;
    float _2578;
    if (_2188)
    {
        _2574 = _2460;
        _2576 = _2462;
        _2578 = _2464;
    }
    else
    {
        uint _2585 = _2094 + 3u;
        uint _2589 = _2094 + 11u;
        float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _832) * 0.949999988079071044921875);
        float _2604 = _2603 * _2603;
        float _2605 = cbLight._m0[_2585].x + _908;
        float _2606 = cbLight._m0[_2585].y + _909;
        float _2607 = cbLight._m0[_2585].z + _910;
        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
        float _2612 = _2611 * _2605;
        float _2613 = _2611 * _2606;
        float _2614 = _2611 * _2607;
        float _2615 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2585].xyz));
        float _4602 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2618 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2619 = dot(vec3(_829, _830, _831), vec3(_2612, _2613, _2614));
        float _4613 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2623 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2612, _2613, _2614));
        float _4624 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2627 = _2604 * _2604;
        float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
        float _2638 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
        float _2645 = 1.0 - _2604;
        float _2655 = (0.5 / (((_2262 * ((_2618 * _2645) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2645) + _2604) * _2618))) * _2618;
        float _4635 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
        _2574 = (((((_2638 * _2284) + _990) * cbLight._m0[_2589].x) * _2657) * _2658) + _2460;
        _2576 = (((((_2638 * _2286) + _992) * cbLight._m0[_2589].y) * _2657) * _2658) + _2462;
        _2578 = (((((_2638 * _2287) + _993) * cbLight._m0[_2589].z) * _2657) * _2658) + _2464;
    }
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_2092.y == 0u)
    {
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2733;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2733;
        float _2736 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2733;
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.x;
        uint _2760 = uint((float(_2748.y) * floor(float(uint(cbSceneParam._m0[85u].y * _929) / _2749))) + floor(float(uint(cbSceneParam._m0[85u].x * _928) / _2749)));
        float _2770 = (log2(_2736 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2771 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        uint _2774 = uint(isnan(14.0) ? _2771 : (isnan(_2771) ? 14.0 : min(_2771, 14.0)));
        uvec4 _2779 = texelFetch(g_lightClusterGridBuffer, int(((_2774 << 2u) + (_2760 << 6u)) >> 2u));
        uint _2780 = _2779.x;
        uint _2781 = _2748.z;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((((1u << ((_2781 >> 4u) & 15u)) + 4294967295u) & _2780) == 0u) || ((_2781 & 240u) == 0u))
        {
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
        }
        else
        {
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            uint _3040 = 0u;
            uint _3049;
            bool _3050;
            for (;;)
            {
                _3049 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                _3050 = _3049 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3050)
                {
                    frontier_phi_66_pred = _3034;
                    frontier_phi_66_pred_1 = _3039;
                    frontier_phi_66_pred_2 = _3038;
                    frontier_phi_66_pred_3 = _3037;
                    frontier_phi_66_pred_4 = _3036;
                    frontier_phi_66_pred_5 = _3035;
                }
                else
                {
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    uint _3185;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3049;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    for (;;)
                    {
                        uint _3189 = uint(findLSB(_3185)) + (_3040 << 5u);
                        uint _3186 = (_3185 + 4294967295u) & _3185;
                        uint _3191 = _3189 * 48u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 3u)).x));
                        uint _3211 = (_3189 * 48u) + 4u;
                        vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 3u)).x));
                        uint _3230 = (_3189 * 48u) + 8u;
                        vec3 _3241 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x));
                        float _3245 = _3205.x - _2734;
                        float _3246 = _3205.y - _2735;
                        float _3247 = _3205.z - _2736;
                        float _3248 = dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247));
                        float _3251 = inversesqrt(_3248);
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3255 = dot(vec3(_947, _950, _953), vec3(_3252, _3253, _3254));
                        float _3260 = 1.0 - (_3248 * _3205.w);
                        float _4661 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3262 = sqrt(_3248) * _3224.w;
                        float _3265 = 1.39999997615814208984375 / (_3262 + 1.39999997615814208984375);
                        float _3266 = _3265 * _3265;
                        float _3269 = ((1.0 - _3266) * _3255) + _3266;
                        float _3272 = _3262 * _3262;
                        float _3276 = ((isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))) * _3261) / ((_3272 * 0.699999988079071044921875) + 1.0);
                        float _3280 = (-0.0) - _2734;
                        float _3281 = (-0.0) - _2735;
                        float _3282 = (-0.0) - _2736;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3287 = _3286 * _3280;
                        float _3288 = _3286 * _3281;
                        float _3289 = _3286 * _3282;
                        float _3297 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                        float _3298 = 1.0 - _1022;
                        float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                        float _3306 = _3305 * _3305;
                        float _3307 = _3306 * _3306;
                        float _3308 = _3287 + _3252;
                        float _3309 = _3288 + _3253;
                        float _3310 = _3289 + _3254;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3318 = dot(vec3(_947, _950, _953), vec3(_3287, _3288, _3289));
                        float _4677 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3322 = dot(vec3(_947, _950, _953), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                        float _4688 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                        float _3330 = _3265 * _3306;
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3255) + _3331;
                        float _4699 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3336 = 1.0 - _3306;
                        float _3346 = (0.5 / (((_3335 * ((_3321 * _3336) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3306) * _3321))) * _3335;
                        float _4710 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3357 = (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3329 * _3329) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125))) * _3261;
                        _3109 = (_3276 * _3224.x) + _3182;
                        _3110 = (_3276 * _3224.y) + _3183;
                        _3111 = (_3276 * _3224.z) + _3184;
                        _3106 = (_3357 * _3241.x) + _3179;
                        _3107 = (_3357 * _3241.y) + _3180;
                        _3108 = (_3357 * _3241.z) + _3181;
                        if (_3186 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3186;
                        }
                    }
                    frontier_phi_66_pred = _3106;
                    frontier_phi_66_pred_1 = _3111;
                    frontier_phi_66_pred_2 = _3110;
                    frontier_phi_66_pred_3 = _3109;
                    frontier_phi_66_pred_4 = _3108;
                    frontier_phi_66_pred_5 = _3107;
                }
                _2882 = frontier_phi_66_pred;
                _2892 = frontier_phi_66_pred_1;
                _2890 = frontier_phi_66_pred_2;
                _2888 = frontier_phi_66_pred_3;
                _2886 = frontier_phi_66_pred_4;
                _2884 = frontier_phi_66_pred_5;
                uint _3041 = _3040 + 1u;
                if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3034 = _2882;
                    _3035 = _2884;
                    _3036 = _2886;
                    _3037 = _2888;
                    _3038 = _2890;
                    _3039 = _2892;
                    _3040 = _3041;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
        }
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.z;
        uint _2898 = (_2896 >> 8u) & 15u;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((4294967295u << _2898) & _2780) == 0u)
        {
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
            _3008 = _2887;
            _3010 = _2889;
            _3012 = _2891;
        }
        else
        {
            float _3027 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
            float _3028 = _3027 * _2734;
            float _3029 = _3027 * _2735;
            float _3030 = _3027 * _2736;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2898 < ((_2896 >> 12u) & 15u))
            {
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3162 = _2881;
                float _3163 = _2883;
                float _3164 = _2885;
                float _3165 = _2887;
                float _3166 = _2889;
                float _3167 = _2891;
                uint _3168 = _2898;
                uint _3177;
                bool _3178;
                for (;;)
                {
                    _3177 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                    _3178 = _3177 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3178)
                    {
                        frontier_phi_77_pred = _3167;
                        frontier_phi_77_pred_1 = _3166;
                        frontier_phi_77_pred_2 = _3165;
                        frontier_phi_77_pred_3 = _3164;
                        frontier_phi_77_pred_4 = _3163;
                        frontier_phi_77_pred_5 = _3162;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        float _3388 = _3166;
                        float _3389 = _3167;
                        uint _3390 = _3177;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3459;
                        vec4 _3475;
                        float _3521;
                        bool _3522;
                        for (;;)
                        {
                            uint _3401 = ((_3168 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3446 = (_3401 * 40u) + 16u;
                            _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            uint _3462 = (_3401 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3401 * 40u) + 24u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3496 = (_3401 * 40u) + 28u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3521 = fma(_2736, _3509.z, fma(_2735, _3509.y, _3509.x * _2734)) + _3509.w;
                            _3522 = !((fma(_2736, _3490.z, fma(_2735, _3490.y, _3490.x * _2734)) + _3490.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3522)
                            {
                                float _3549 = _3416.x - _2734;
                                float _3550 = _3416.y - _2735;
                                float _3551 = _3416.z - _2736;
                                float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                                float _3555 = inversesqrt(_3552);
                                float _3556 = _3555 * _3549;
                                float _3557 = _3555 * _3550;
                                float _3558 = _3555 * _3551;
                                float _3562 = 1.0 - (_3552 / (_3417 * _3417));
                                float _4721 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3567 = sqrt(_3552) * _3432.w;
                                float _3569 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                                float _3570 = _3569 * _3569;
                                float _3573 = ((1.0 - _3570) * dot(vec3(_3556, _3557, _3558), vec3(_947, _950, _953))) + _3570;
                                float _3576 = _3567 * _3567;
                                float _3580 = (fma(_2736, _3459.z, fma(_2735, _3459.y, _3459.x * _2734)) + _3459.w) / _3521;
                                float _3581 = (fma(_2736, _3475.z, fma(_2735, _3475.y, _3475.x * _2734)) + _3475.w) / _3521;
                                float _3585 = 1.0 - dot(vec2(_3580, _3581), vec2(_3580, _3581));
                                float _4737 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3587 = _3586 * (((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3563) / ((_3576 * 0.699999988079071044921875) + 1.0));
                                float _3599 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                                float _3600 = 1.0 - _1022;
                                float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                                float _3608 = _3607 * _3607;
                                float _3609 = _3608 * _3608;
                                float _3610 = _3556 - _3028;
                                float _3611 = _3557 - _3029;
                                float _3612 = _3558 - _3030;
                                float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                                float _3620 = dot(vec3(_947, _950, _953), vec3((-0.0) - _3028, (-0.0) - _3029, (-0.0) - _3030));
                                float _4748 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3624 = dot(vec3(_947, _950, _953), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                                float _4759 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                                float _3632 = _3569 * _3608;
                                float _3633 = _3632 * _3632;
                                float _3639 = ((1.0 - _3633) * dot(vec3(_947, _950, _953), vec3(_3556, _3557, _3558))) + _3633;
                                float _4770 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3641 = 1.0 - _3608;
                                float _3651 = (0.5 / (((_3640 * ((_3623 * _3641) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3608) * _3623))) * _3640;
                                float _4781 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3661 = (_3586 * _3563) * (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) / ((_3631 * _3631) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3587 * _3432.y;
                                frontier_phi_83_pred_1 = _3587 * _3432.x;
                                frontier_phi_83_pred_2 = _3661 * _3444.z;
                                frontier_phi_83_pred_3 = _3661 * _3444.y;
                                frontier_phi_83_pred_4 = _3661 * _3444.x;
                                frontier_phi_83_pred_5 = _3587 * _3432.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3669 = frontier_phi_83_pred;
                            _3668 = frontier_phi_83_pred_1;
                            _3667 = frontier_phi_83_pred_2;
                            _3666 = frontier_phi_83_pred_3;
                            _3665 = frontier_phi_83_pred_4;
                            _3670 = frontier_phi_83_pred_5;
                            _3374 = _3668 + _3387;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            _3371 = _3665 + _3384;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3376;
                        frontier_phi_77_pred_1 = _3375;
                        frontier_phi_77_pred_2 = _3374;
                        frontier_phi_77_pred_3 = _3373;
                        frontier_phi_77_pred_4 = _3372;
                        frontier_phi_77_pred_5 = _3371;
                    }
                    _3013 = frontier_phi_77_pred;
                    _3011 = frontier_phi_77_pred_1;
                    _3009 = frontier_phi_77_pred_2;
                    _3007 = frontier_phi_77_pred_3;
                    _3005 = frontier_phi_77_pred_4;
                    _3003 = frontier_phi_77_pred_5;
                    uint _3169 = _3168 + 1u;
                    if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3162 = _3003;
                        _3163 = _3005;
                        _3164 = _3007;
                        _3165 = _3009;
                        _3166 = _3011;
                        _3167 = _3013;
                        _3168 = _3169;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3007;
                frontier_phi_58_59_ladder_1 = _3013;
                frontier_phi_58_59_ladder_2 = _3011;
                frontier_phi_58_59_ladder_3 = _3009;
                frontier_phi_58_59_ladder_4 = _3005;
                frontier_phi_58_59_ladder_5 = _3003;
            }
            else
            {
                frontier_phi_58_59_ladder = _2885;
                frontier_phi_58_59_ladder_1 = _2891;
                frontier_phi_58_59_ladder_2 = _2889;
                frontier_phi_58_59_ladder_3 = _2887;
                frontier_phi_58_59_ladder_4 = _2883;
                frontier_phi_58_59_ladder_5 = _2881;
            }
            _3002 = frontier_phi_58_59_ladder_5;
            _3004 = frontier_phi_58_59_ladder_4;
            _3006 = frontier_phi_58_59_ladder;
            _3008 = frontier_phi_58_59_ladder_3;
            _3010 = frontier_phi_58_59_ladder_2;
            _3012 = frontier_phi_58_59_ladder_1;
        }
        float _3017 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _2793 = (_3017 * _3008) + _2226;
        _2795 = (_3017 * _3010) + _2228;
        _2797 = (_3017 * _3012) + _2230;
        _2799 = ((_3002 * _990) * _3017) + _2574;
        _2801 = ((_3004 * _992) * _3017) + _2576;
        _2803 = ((_3006 * _993) * _3017) + _2578;
    }
    else
    {
        _2793 = _2226;
        _2795 = _2228;
        _2797 = _2230;
        _2799 = _2574;
        _2801 = _2576;
        _2803 = _2578;
    }
    float _4797 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _4808 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _4819 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2820 = ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2793 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1006))) + ((_2799 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _2821 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2795 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1006))) + ((_2801 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    float _2822 = ((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2797 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1006))) + ((_2803 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1845)) * cbPerFrame._m0[3u].x);
    uint _2823 = _261 + 6u;
    float _2831 = _928 / cbSceneParam._m0[86u].x;
    float _2832 = _929 / cbSceneParam._m0[86u].y;
    vec4 _2846 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, (log2((isnan(cbSceneParam._m0[77u].w) ? _851 : (isnan(_851) ? cbSceneParam._m0[77u].w : min(_851, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2848 = _2846.x;
    float _2849 = _2846.y;
    float _2850 = _2846.z;
    float _2851 = _2846.w;
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    if (_851 > cbSceneParam._m0[78u].w)
    {
        float _2906 = isnan(_851) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _851 : min(cbSceneParam._m0[80u].w, _851));
        float _2907 = _2906 / _851;
        float _2918 = _2907 * _901;
        float _2919 = _902 * _2907;
        float _2920 = (-0.0) - _2919;
        float _2922 = _2907 * _903;
        float _2924 = (cbSceneParam._m0[77u].w * _2920) / _2906;
        float _2925 = _2924 + cbSceneParam._m0[79u].w;
        float _2926 = cbSceneParam._m0[79u].w - _2919;
        float _2932 = sqrt(((_2918 * _2918) + (_2919 * _2919)) + (_2922 * _2922));
        float _2935 = (1.0 - (cbSceneParam._m0[77u].w / _2906)) * _2932;
        float _2940 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2942 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3119;
        if (abs((_2920 - _2924) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3119 = ((((_2925 > 0.0) ? exp2(_2940 * _2925) : (2.0 - exp2(_2942 * _2925))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2935;
        }
        else
        {
            float _3063 = 1.0 / cbSceneParam._m0[80u].x;
            float _3064 = isnan(_2926) ? _2925 : (isnan(_2925) ? _2926 : max(_2925, _2926));
            float _3065 = isnan(_2926) ? _2925 : (isnan(_2925) ? _2926 : min(_2925, _2926));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            _3119 = ((abs(_2932 / _2920) * cbSceneParam._m0[80u].y) * ((((_3074 - _3075) * 2.0) - ((exp2(_2940 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0)))) - exp2(_2940 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0))))) * _3063)) - ((exp2(_2942 * _3074) - exp2(_2942 * _3075)) * _3063))) + (_2935 * cbSceneParam._m0[80u].z);
        }
        vec4 _3121 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, 1.0), 0.0);
        float _3130 = exp2((_3119 * (-1.44269502162933349609375)) * (1.0 - _3121.w));
        float _3131 = log2(_3130);
        float _3147 = log2(_2851);
        _2944 = (exp2(_3147 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].x)) * _3121.x) / cbSceneParam._m0[78u].x)) + _2848;
        _2946 = (exp2(_3147 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].y)) * _3121.y) / cbSceneParam._m0[78u].y)) + _2849;
        _2948 = (exp2(_3147 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3131 * cbSceneParam._m0[78u].z)) * _3121.z) / cbSceneParam._m0[78u].z)) + _2850;
        _2950 = _3130 * _2851;
    }
    else
    {
        _2944 = _2848;
        _2946 = _2849;
        _2948 = _2850;
        _2950 = _2851;
    }
    bool _3157;
    vec4 _2960;
    vec4 _2982;
    float _2984;
    float _2988;
    float _2989;
    float _2990;
    float _2991;
    bool _3001;
    for (;;)
    {
        _2960 = cbMatDynParam._m0[0u];
        float _2962 = roundEven(_2960.y);
        bool _2963 = _2962 == 3.0;
        float _2964 = log2(_2950);
        float _2971 = exp2(_2964 * cbSceneParam._m0[78u].x) * _2820;
        float _2972 = exp2(_2964 * cbSceneParam._m0[78u].y) * _2821;
        float _2973 = exp2(_2964 * cbSceneParam._m0[78u].z) * _2822;
        float _2980 = _917 + (-0.5);
        _2982 = cbMtdParam._m0[1u];
        _2984 = _2982.y * _2980;
        float _2987 = (_2962 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2988 = _2987 * (_2963 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2944)));
        _2989 = _2987 * (_2963 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2946)));
        _2990 = _2987 * (_2963 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2948)));
        _2991 = _2980 * 0.999000012874603271484375;
        _3001 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3001)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _2991) < 0.5)
            {
                _3157 = true;
                break;
            }
        }
        uint _3098 = _966 + uint(_2960.w);
        if ((cbInstanceData._m0[_3098].w < 1.0) && ((cbInstanceData._m0[_3098].w + _2991) < 0.5))
        {
            _3157 = true;
            break;
        }
        if ((_2984 + 1.0) < _2982.x)
        {
            _3157 = true;
            break;
        }
        _3157 = false;
        break;
    }
    float _3362;
    if (_3157)
    {
        discard_state = true;
        _3362 = 0.0;
    }
    else
    {
        _3362 = cbInstanceData._m0[_2823].w;
    }
    SV_Target.x = _2988;
    SV_Target.y = _2989;
    SV_Target.z = _2990;
    SV_Target.w = _3362;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2823].w;
    discard_exit();
}


