#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1235;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _300.x * cbMtdParam._m0[11u].x;
    float _306 = _300.y * cbMtdParam._m0[11u].y;
    float _307 = _300.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[23u].w) + _393) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3563 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _424 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _276.x) * ((_411 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305);
    float _427 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _276.y) * ((_411 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306);
    float _430 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _276.z) * ((_411 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307);
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    float _478 = ((_448.z - _469) * _411) + _469;
    float _481 = ((((_448.x - _467) * _411) + _467) * 2.0) + (-1.0);
    float _483 = ((((_448.y - _468) * _411) + _468) * 2.0) + (-1.0);
    float _484 = dot(vec2(_481, _483), vec2(_481, _483));
    float _3574 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _517 = (((_505.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _481;
    float _518 = (((_505.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _483;
    float _521 = fma(_489, _224, fma(_518, _231, _517 * _217));
    float _524 = fma(_489, _225, fma(_518, _232, _517 * _218));
    float _527 = fma(_489, _226, fma(_518, _233, _517 * _219));
    float _531 = inversesqrt(dot(vec3(_521, _524, _527), vec3(_521, _524, _527)));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _560 = _558.x;
    float _561 = 1.0 - _560;
    float _570 = (cbMtdParam._m0[19u].x + dot(vec4(_531 * _521, _531 * _524, _531 * _527, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_560 - _561) * cbMtdParam._m0[24u].z) + _561) * cbMtdParam._m0[21u].z);
    float _3585 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _578 = (_571 * (cbMtdParam._m0[17u].x - _424)) + _424;
    float _579 = (_571 * (cbMtdParam._m0[17u].y - _427)) + _427;
    float _580 = (_571 * (cbMtdParam._m0[17u].z - _430)) + _430;
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _608 = _606.x;
    float _625 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _608) * _411) + _608;
    float _629 = ((_592.x - _625) * cbMtdParam._m0[19u].z) + _625;
    float _631 = _629 - (_629 * _571);
    float _635 = (cbMtdParam._m0[19u].w * (_505.z - _478)) + _478;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _655 = (_648.x * 2.0) + (-1.0);
    float _656 = (_648.y * 2.0) + (-1.0);
    float _657 = dot(vec2(_655, _656), vec2(_655, _656));
    float _3596 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _665 = ((_648.z - _635) * _571) + _635;
    float _675 = ((sqrt(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) - _489) * _571) + _489;
    float _678 = (((_655 - _517) * _571) + _517) + (cbMtdParam._m0[21u].x * _517);
    float _679 = (((_656 - _518) * _571) + _518) + (cbMtdParam._m0[21u].x * _518);
    float _681 = cbMtdParam._m0[22u].x + _505.w;
    float _684 = fma(_675, _224, fma(_679, _231, _678 * _217));
    float _687 = fma(_675, _225, fma(_679, _232, _678 * _218));
    float _690 = fma(_675, _226, fma(_679, _233, _678 * _219));
    float _694 = inversesqrt(dot(vec3(_684, _687, _690), vec3(_684, _687, _690)));
    float _695 = _694 * _684;
    float _696 = _694 * _687;
    float _697 = _694 * _690;
    float _3607 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _698 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _3618 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3629 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3640 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3651 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3662 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _703 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _717 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _768 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _770 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
    float _775 = _768 * _774;
    float _776 = _769 * _774;
    float _777 = _770 * _774;
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _802 = fma(_697, cbSceneParam._m0[5u].z, fma(_696, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _695));
    float _805 = fma(_697, cbSceneParam._m0[6u].z, fma(_696, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _695));
    float _808 = fma(_697, cbSceneParam._m0[7u].z, fma(_696, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _695));
    uint _822 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _828 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_822].x;
    float _829 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_822].y;
    float _830 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_822].z;
    float _3673 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _834 = 1.0 - _703;
    float _835 = _831 * _834;
    float _836 = _832 * _834;
    float _837 = _833 * _834;
    float _842 = (_831 + (-0.039999999105930328369140625)) * _703;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _703;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _703;
    float _845 = _842 + 0.039999999105930328369140625;
    float _847 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    vec4 _857 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _861 = ((isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * TEXCOORD_5.w) * _857.x;
    float _862 = dot(vec3(_695, _696, _697), vec3(_775, _776, _777));
    float _865 = _862 * 2.0;
    float _869 = (_865 * _695) - _775;
    float _870 = (_865 * _696) - _776;
    float _871 = (_865 * _697) - _777;
    float _875 = abs(dot(vec3(_775, _776, _777), vec3(_695, _696, _697)));
    float _3706 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _877 = sqrt(_698);
    float _890 = exp2((_877 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_877 * 3.0));
    float _896 = (1.0 - _890) * ((_877 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _897 = _890 * _877;
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_933, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925));
        float _963 = fma(_933, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925));
        float _967 = fma(_933, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925));
        float _992 = _925 + _695;
        float _993 = _929 + _696;
        float _994 = _933 + _697;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_695, _696, _697), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3754 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_695, _696, _697), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3787 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_695, _696, _697), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3820 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1274 = fma(_933, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _925));
        float _1278 = fma(_933, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _925));
        float _1282 = fma(_933, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _925));
        float _1305 = _925 + _695;
        float _1306 = _929 + _696;
        float _1307 = _933 + _697;
        float _1317 = fma(_1307, cbModelParam._m0[30u].z, fma(_1306, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305)) - _1274;
        float _1318 = fma(_1307, cbModelParam._m0[31u].z, fma(_1306, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305)) - _1278;
        float _1319 = fma(_1307, cbModelParam._m0[32u].z, fma(_1306, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305)) - _1282;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1274 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1278 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[35u].z) + ((((((_1282 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1373 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1340.x + (-0.5));
        float _1375 = _1373 * (_1340.y + (-0.5));
        float _1376 = _1373 * (_1340.z + (-0.5));
        float _1383 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1347.x + (-0.5));
        float _1385 = _1383 * (_1347.y + (-0.5));
        float _1386 = _1383 * (_1347.z + (-0.5));
        float _1393 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1354.x + (-0.5));
        float _1395 = _1393 * (_1354.y + (-0.5));
        float _1396 = _1393 * (_1354.z + (-0.5));
        float _1403 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1361.x + (-0.5));
        float _1405 = _1403 * (_1361.y + (-0.5));
        float _1406 = _1403 * (_1361.z + (-0.5));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = _1374 * 0.5;
        float _1411 = _1384 * 0.5;
        float _1412 = _1394 * 0.5;
        float _1413 = dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412));
        float _1418 = (_1413 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1413);
        float _1426 = (dot(vec3(_695, _696, _697), vec3(_1418 * _1410, _1418 * _1411, _1418 * _1412)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1435 = sqrt(((_1411 * _1411) + (_1410 * _1410)) + (_1412 * _1412)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1437 = _1436 * 2.0;
        float _1441 = (1.0 - _1436) / (_1436 + 1.0);
        float _3883 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1451 = ((((1.0 - _1442) * (_1437 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1437 + 1.0))) + _1442) * _1407;
        float _1452 = _1375 * 0.5;
        float _1453 = _1385 * 0.5;
        float _1454 = _1395 * 0.5;
        float _1455 = dot(vec3(_1452, _1453, _1454), vec3(_1452, _1453, _1454));
        float _1460 = (_1455 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1455);
        float _1468 = (dot(vec3(_695, _696, _697), vec3(_1460 * _1452, _1460 * _1453, _1460 * _1454)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1477 = sqrt(((_1453 * _1453) + (_1452 * _1452)) + (_1454 * _1454)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1479 = _1478 * 2.0;
        float _1483 = (1.0 - _1478) / (_1478 + 1.0);
        float _3916 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1493 = ((((1.0 - _1484) * (_1479 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1479 + 1.0))) + _1484) * _1408;
        float _1494 = _1376 * 0.5;
        float _1495 = _1386 * 0.5;
        float _1496 = _1396 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_695, _696, _697), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3949 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1521 + 1.0))) + _1526) * _1409;
        _1543 = _1376;
        _1544 = _1375;
        _1545 = _1374;
        _1546 = _1386;
        _1547 = _1385;
        _1548 = _1384;
        _1549 = _1396;
        _1550 = _1395;
        _1551 = _1394;
        _1552 = _1409;
        _1553 = _1408;
        _1554 = _1407;
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
    }
    else
    {
        _1543 = _1235;
        _1544 = _1235;
        _1545 = _1235;
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = _1235;
        _1555 = 0.0;
        _1556 = 0.0;
        _1557 = 0.0;
    }
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1247)) + _1247;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1248)) + _1248;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1249)) + _1249;
    float _1590 = fma(_1569, cbSceneParam._m0[89u].z, fma(_1568, cbSceneParam._m0[89u].y, _1567 * cbSceneParam._m0[89u].x));
    float _1593 = fma(_1569, cbSceneParam._m0[90u].z, fma(_1568, cbSceneParam._m0[90u].y, _1567 * cbSceneParam._m0[90u].x));
    float _1596 = fma(_1569, cbSceneParam._m0[91u].z, fma(_1568, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1567));
    float _1611 = _869 * 0.5;
    float _1612 = _870 * 0.5;
    float _1613 = _871 * 0.5;
    float _1614 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1617 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1620 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1654;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1627 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1631 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1635 = dot(vec4(_1611, _1612, _1613, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1642 = dot(vec4(cbModelParam._m0[39u]), vec4(_1611, _1612, _1613, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1665;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1656 = dot(vec4(cbModelParam._m0[40u]), vec4(_1611, _1612, _1613, 1.0));
        _1665 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1665 = 1.0;
    }
    float _1669 = (_1665 * cbModelParam._m0[1u].x) + (_1654 * (1.0 - cbModelParam._m0[1u].x));
    float _1679 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _698);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1679 : min(cbModelParam._m0[25u].z, _1679));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1728 = fma(_933, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925)) + cbModelParam._m0[13u].w;
        float _1732 = fma(_933, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925)) + cbModelParam._m0[14u].w;
        float _1736 = fma(_933, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925)) + cbModelParam._m0[15u].w;
        float _1739 = fma(_871, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _869));
        float _1742 = fma(_871, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _869));
        float _1745 = fma(_871, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _869));
        float _1773;
        if (_1739 > 0.0)
        {
            _1773 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1773 = frontier_phi_14_12_ladder;
        }
        float _1976;
        if (_1742 > 0.0)
        {
            _1976 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1976 = frontier_phi_23_19_ladder;
        }
        float _2230;
        if (_1745 > 0.0)
        {
            _2230 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2230 = frontier_phi_35_30_ladder;
        }
        float _2232 = isnan(_1976) ? _1773 : (isnan(_1773) ? _1976 : min(_1773, _1976));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1739) + _1728;
        float _2238 = (_2233 * _1742) + _1732;
        float _2239 = (_2233 * _1745) + _1736;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1680);
            frontier_phi_13_35_ladder = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2367.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2367.x * cbModelParam._m0[1u].y;
        }
        _1761 = frontier_phi_13_35_ladder_2;
        _1763 = frontier_phi_13_35_ladder_1;
        _1765 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1749 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_869, _870, _871), _1680);
        _1761 = _1749.x * cbModelParam._m0[1u].y;
        _1763 = _1749.y * cbModelParam._m0[1u].y;
        _1765 = _1749.z * cbModelParam._m0[1u].y;
    }
    float _1769 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _698);
    float _1770 = isnan(_1769) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1769 : min(cbModelParam._m0[25u].w, _1769));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1824 = fma(_933, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925)) + cbModelParam._m0[21u].w;
        float _1828 = fma(_933, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925)) + cbModelParam._m0[22u].w;
        float _1832 = fma(_933, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925)) + cbModelParam._m0[23u].w;
        float _1835 = fma(_871, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _869));
        float _1838 = fma(_871, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _869));
        float _1841 = fma(_871, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _869));
        float _1981;
        if (_1835 > 0.0)
        {
            _1981 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1981 = frontier_phi_25_21_ladder;
        }
        float _2257;
        if (_1838 > 0.0)
        {
            _2257 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2257 = frontier_phi_37_32_ladder;
        }
        float _2470;
        if (_1841 > 0.0)
        {
            _2470 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2470 = frontier_phi_46_43_ladder;
        }
        float _2472 = isnan(_2257) ? _1981 : (isnan(_1981) ? _2257 : min(_1981, _2257));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1835) + _1824;
        float _2478 = (_2473 * _1838) + _1828;
        float _2479 = (_2473 * _1841) + _1832;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1770);
            frontier_phi_22_46_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1860 = frontier_phi_22_46_ladder_2;
        _1862 = frontier_phi_22_46_ladder_1;
        _1864 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_869, _870, _871), _1770);
        _1860 = _1844.x * cbModelParam._m0[1u].z;
        _1862 = _1844.y * cbModelParam._m0[1u].z;
        _1864 = _1844.z * cbModelParam._m0[1u].z;
    }
    float _1877 = (((_896 * _845) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1879 = (((_896 * _847) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1862 - _1763)) + _1763);
    float _1881 = (((_896 * _848) + _897) * _861) * ((cbModelParam._m0[1u].w * (_1864 - _1765)) + _1765);
    float _1884 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1879, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1879, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1879, cbSceneParam._m0[91u].y, _1877 * cbSceneParam._m0[91u].x));
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1910 = _861 + (-1.0);
    float _1915 = (cbLight._m0[_1903].x * _1910) + 1.0;
    float _1916 = (cbLight._m0[_1903].y * _1910) + 1.0;
    float _1917 = (cbLight._m0[_1903].z * _1910) + 1.0;
    float _1918 = (cbLight._m0[_1903].w * _1910) + 1.0;
    uint _1919 = _1902 + 5u;
    float _1925 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1929 = _1902 + 4u;
    float _1935 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1939 = _1902 | 1u;
    float _1950 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_695, _696, _697));
    float _1953 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_695, _696, _697));
    float _4085 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _4096 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1958 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.3183098733425140380859375;
    float _1960 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1967 = ((cbLight._m0[_1919].x * _1925) * _1960) + ((cbLight._m0[_1929].x * _1935) * _1958);
    float _1968 = ((_1925 * cbLight._m0[_1919].y) * _1960) + ((_1935 * cbLight._m0[_1929].y) * _1958);
    float _1969 = ((_1925 * cbLight._m0[_1919].z) * _1960) + ((_1935 * cbLight._m0[_1929].z) * _1958);
    uvec4 _1973 = floatBitsToUint(cbLight._m0[_1902 + 12u]);
    bool _1975 = _1973.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1975)
    {
        _1986 = _1967;
        _1988 = _1968;
        _1990 = _1969;
    }
    else
    {
        uint _1994 = _1902 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1902 + 2u].xyz), vec3(_695, _696, _697)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4107 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2013 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1967;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1968;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1969;
    }
    bool _1993 = _1973.y == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1993)
    {
        _2031 = _1986;
        _2033 = _1988;
        _2035 = _1990;
    }
    else
    {
        uint _2201 = _1902 + 7u;
        float _2217 = (dot(vec3(cbLight._m0[_1902 + 3u].xyz), vec3(_695, _696, _697)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4123 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2220 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2031 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _1986;
        _2033 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _1988;
        _2035 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _1990;
    }
    uint _2038 = _1902 + 8u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _698) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1902].x + _775;
    float _2054 = cbLight._m0[_1902].y + _776;
    float _2055 = cbLight._m0[_1902].z + _777;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_1902].xyz));
    float _4139 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _2067 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2068 = dot(vec3(_695, _696, _697), vec3(_2060, _2061, _2062));
    float _4161 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2060, _2061, _2062));
    float _4172 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2052 * _2052;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
    float _2089 = 0.959999978542327880859375 - _842;
    float _2091 = 0.959999978542327880859375 - _843;
    float _2092 = 0.959999978542327880859375 - _844;
    float _2099 = 1.0 - _2052;
    float _2110 = (0.5 / (((_2067 * ((_2066 * _2099) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2099) + _2052) * _2066))) * _2066;
    float _4183 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    uint _2123 = _1902 + 9u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _698) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1939].x + _775;
    float _2137 = cbLight._m0[_1939].y + _776;
    float _2138 = cbLight._m0[_1939].z + _777;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_1939].xyz));
    float _4194 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2150 = dot(vec3(_695, _696, _697), vec3(_2143, _2144, _2145));
    float _4205 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2143, _2144, _2145));
    float _4216 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2135 * _2135;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0);
    float _2176 = 1.0 - _2135;
    float _2186 = (0.5 / (((_2067 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2176) + _2135) * _2149))) * _2149;
    float _4227 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    float _2198 = (((((_2169 * _2089) + _845) * cbLight._m0[_2123].x) * _2188) * _1925) + (((((_2088 * _2089) + _845) * cbLight._m0[_2038].x) * _2112) * _1935);
    float _2199 = (((((_2169 * _2091) + _847) * cbLight._m0[_2123].y) * _2188) * _1925) + (((((_2088 * _2091) + _847) * cbLight._m0[_2038].y) * _2112) * _1935);
    float _2200 = (((((_2169 * _2092) + _848) * cbLight._m0[_2123].z) * _2188) * _1925) + (((((_2088 * _2092) + _848) * cbLight._m0[_2038].z) * _2112) * _1935);
    float _2262;
    float _2264;
    float _2266;
    if (_1975)
    {
        _2262 = _2198;
        _2264 = _2199;
        _2266 = _2200;
    }
    else
    {
        uint _2268 = _1902 + 2u;
        uint _2272 = _1902 + 10u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _698) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _775;
        float _2289 = cbLight._m0[_2268].y + _776;
        float _2290 = cbLight._m0[_2268].z + _777;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2268].xyz));
        float _4238 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2302 = dot(vec3(_695, _696, _697), vec3(_2295, _2296, _2297));
        float _4249 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4260 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_2067 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2328) + _2287) * _2301))) * _2301;
        float _4271 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2262 = (((((_2321 * _2089) + _845) * cbLight._m0[_2272].x) * _2340) * _2341) + _2198;
        _2264 = (((((_2321 * _2091) + _847) * cbLight._m0[_2272].y) * _2340) * _2341) + _2199;
        _2266 = (((((_2321 * _2092) + _848) * cbLight._m0[_2272].z) * _2340) * _2341) + _2200;
    }
    float _2376;
    float _2378;
    float _2380;
    if (_1993)
    {
        _2376 = _2262;
        _2378 = _2264;
        _2380 = _2266;
    }
    else
    {
        uint _2387 = _1902 + 3u;
        uint _2391 = _1902 + 11u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _698) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _775;
        float _2408 = cbLight._m0[_2387].y + _776;
        float _2409 = cbLight._m0[_2387].z + _777;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_695, _696, _697), vec3(cbLight._m0[_2387].xyz));
        float _4287 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2421 = dot(vec3(_695, _696, _697), vec3(_2414, _2415, _2416));
        float _4298 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4309 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0);
        float _2447 = 1.0 - _2406;
        float _2457 = (0.5 / (((_2067 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2447) + _2406) * _2420))) * _2420;
        float _4320 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2376 = (((((_2440 * _2089) + _845) * cbLight._m0[_2391].x) * _2459) * _2460) + _2262;
        _2378 = (((((_2440 * _2091) + _847) * cbLight._m0[_2391].y) * _2459) * _2460) + _2264;
        _2380 = (((((_2440 * _2092) + _848) * cbLight._m0[_2391].z) * _2459) * _2460) + _2266;
    }
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_1900.y == 0u)
    {
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2535;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2535;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2535;
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.x;
        uint _2562 = uint((float(_2550.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2551))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2551)));
        float _2572 = (log2(_2538 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2573 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        uint _2576 = uint(isnan(14.0) ? _2573 : (isnan(_2573) ? 14.0 : min(_2573, 14.0)));
        uvec4 _2581 = texelFetch(g_lightClusterGridBuffer, int(((_2576 << 2u) + (_2562 << 6u)) >> 2u));
        uint _2582 = _2581.x;
        uint _2583 = _2550.z;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((((1u << ((_2583 >> 4u) & 15u)) + 4294967295u) & _2582) == 0u) || ((_2583 & 240u) == 0u))
        {
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
        }
        else
        {
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2828 = 0.0;
            float _2829 = 0.0;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            uint _2834 = 0u;
            uint _2843;
            bool _2844;
            for (;;)
            {
                _2843 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2834 << 2u)) >> 2u)).x;
                _2844 = _2843 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2844)
                {
                    frontier_phi_61_pred = _2828;
                    frontier_phi_61_pred_1 = _2833;
                    frontier_phi_61_pred_2 = _2832;
                    frontier_phi_61_pred_3 = _2831;
                    frontier_phi_61_pred_4 = _2830;
                    frontier_phi_61_pred_5 = _2829;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2828;
                    _2953 = _2829;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2843;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2834 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        float _3018 = _2978.x - _2536;
                        float _3019 = _2978.y - _2537;
                        float _3020 = _2978.z - _2538;
                        float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                        float _3024 = inversesqrt(_3021);
                        float _3025 = _3024 * _3018;
                        float _3026 = _3024 * _3019;
                        float _3027 = _3024 * _3020;
                        float _3028 = dot(vec3(_802, _805, _808), vec3(_3025, _3026, _3027));
                        float _3033 = 1.0 - (_3021 * _2978.w);
                        float _4346 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3034 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3035 = sqrt(_3021) * _2997.w;
                        float _3038 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _3028) + _3039;
                        float _3045 = _3035 * _3035;
                        float _3049 = ((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3034) / ((_3045 * 0.699999988079071044921875) + 1.0);
                        float _3053 = (-0.0) - _2536;
                        float _3054 = (-0.0) - _2537;
                        float _3055 = (-0.0) - _2538;
                        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
                        float _3060 = _3059 * _3053;
                        float _3061 = _3059 * _3054;
                        float _3062 = _3059 * _3055;
                        float _3070 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                        float _3071 = 1.0 - _877;
                        float _3078 = sqrt(1.0 - ((1.0 - (_3071 * _3071)) * (1.0 - (_3070 * _3070))));
                        float _3079 = _3078 * _3078;
                        float _3080 = _3079 * _3079;
                        float _3081 = _3060 + _3025;
                        float _3082 = _3061 + _3026;
                        float _3083 = _3062 + _3027;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3091 = dot(vec3(_802, _805, _808), vec3(_3060, _3061, _3062));
                        float _4362 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3094 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3095 = dot(vec3(_802, _805, _808), vec3(_3087 * _3081, _3087 * _3082, _3087 * _3083));
                        float _4373 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3098 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3102 = ((_3098 * _3098) * (_3080 + (-1.0))) + 1.0;
                        float _3103 = _3038 * _3079;
                        float _3104 = _3103 * _3103;
                        float _3107 = ((1.0 - _3104) * _3028) + _3104;
                        float _4384 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3108 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3109 = 1.0 - _3079;
                        float _3119 = (0.5 / (((_3108 * ((_3094 * _3109) + _3079)) + 9.9999999392252902907785028219223e-09) + (((_3108 * _3109) + _3079) * _3094))) * _3108;
                        float _4395 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3130 = (((_3080 * 3.1415927410125732421875) * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) / ((_3102 * _3102) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125))) * _3034;
                        _2887 = (_3049 * _2997.x) + _2955;
                        _2888 = (_3049 * _2997.y) + _2956;
                        _2889 = (_3049 * _2997.z) + _2957;
                        _2884 = (_3130 * _3014.x) + _2952;
                        _2885 = (_3130 * _3014.y) + _2953;
                        _2886 = (_3130 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2884;
                            _2953 = _2885;
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_61_pred = _2884;
                    frontier_phi_61_pred_1 = _2889;
                    frontier_phi_61_pred_2 = _2888;
                    frontier_phi_61_pred_3 = _2887;
                    frontier_phi_61_pred_4 = _2886;
                    frontier_phi_61_pred_5 = _2885;
                }
                _2684 = frontier_phi_61_pred;
                _2694 = frontier_phi_61_pred_1;
                _2692 = frontier_phi_61_pred_2;
                _2690 = frontier_phi_61_pred_3;
                _2688 = frontier_phi_61_pred_4;
                _2686 = frontier_phi_61_pred_5;
                uint _2835 = _2834 + 1u;
                if (_2835 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2828 = _2684;
                    _2829 = _2686;
                    _2830 = _2688;
                    _2831 = _2690;
                    _2832 = _2692;
                    _2833 = _2694;
                    _2834 = _2835;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
        }
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.z;
        uint _2700 = (_2698 >> 8u) & 15u;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        if (((4294967295u << _2700) & _2582) == 0u)
        {
            _2796 = _2683;
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
            _2806 = _2693;
        }
        else
        {
            float _2821 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
            float _2822 = _2821 * _2536;
            float _2823 = _2821 * _2537;
            float _2824 = _2821 * _2538;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2700 < ((_2698 >> 12u) & 15u))
            {
                float _2797;
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2935 = _2683;
                float _2936 = _2685;
                float _2937 = _2687;
                float _2938 = _2689;
                float _2939 = _2691;
                float _2940 = _2693;
                uint _2941 = _2700;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2951)
                    {
                        frontier_phi_67_pred = _2938;
                        frontier_phi_67_pred_1 = _2939;
                        frontier_phi_67_pred_2 = _2940;
                        frontier_phi_67_pred_3 = _2937;
                        frontier_phi_67_pred_4 = _2936;
                        frontier_phi_67_pred_5 = _2935;
                    }
                    else
                    {
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3148 = _2935;
                        float _3149 = _2936;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        uint _3154 = _2950;
                        uint _3155;
                        vec4 _3180;
                        float _3181;
                        vec4 _3196;
                        vec3 _3208;
                        vec4 _3223;
                        vec4 _3239;
                        float _3285;
                        bool _3286;
                        for (;;)
                        {
                            uint _3165 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3154));
                            _3155 = (_3154 + 4294967295u) & _3154;
                            uint _3167 = _3165 * 40u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3181 = _3180.w;
                            uint _3183 = (_3165 * 40u) + 4u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3165 * 40u) + 8u;
                            _3208 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x));
                            uint _3210 = (_3165 * 40u) + 16u;
                            _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3226 = (_3165 * 40u) + 20u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3241 = (_3165 * 40u) + 24u;
                            vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3260 = (_3165 * 40u) + 28u;
                            vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3285 = fma(_2538, _3273.z, fma(_2537, _3273.y, _3273.x * _2536)) + _3273.w;
                            _3286 = !((fma(_2538, _3254.z, fma(_2537, _3254.y, _3254.x * _2536)) + _3254.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3286)
                            {
                                float _3313 = _3180.x - _2536;
                                float _3314 = _3180.y - _2537;
                                float _3315 = _3180.z - _2538;
                                float _3316 = dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315));
                                float _3319 = inversesqrt(_3316);
                                float _3320 = _3319 * _3313;
                                float _3321 = _3319 * _3314;
                                float _3322 = _3319 * _3315;
                                float _3326 = 1.0 - (_3316 / (_3181 * _3181));
                                float _4406 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3331 = sqrt(_3316) * _3196.w;
                                float _3333 = 1.39999997615814208984375 / (_3331 + 1.39999997615814208984375);
                                float _3334 = _3333 * _3333;
                                float _3337 = ((1.0 - _3334) * dot(vec3(_3320, _3321, _3322), vec3(_802, _805, _808))) + _3334;
                                float _3340 = _3331 * _3331;
                                float _3344 = (fma(_2538, _3223.z, fma(_2537, _3223.y, _3223.x * _2536)) + _3223.w) / _3285;
                                float _3345 = (fma(_2538, _3239.z, fma(_2537, _3239.y, _3239.x * _2536)) + _3239.w) / _3285;
                                float _3349 = 1.0 - dot(vec2(_3344, _3345), vec2(_3344, _3345));
                                float _4422 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3351 = _3350 * (((isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0))) * _3327) / ((_3340 * 0.699999988079071044921875) + 1.0));
                                float _3363 = exp2(log2(1.0 / ((_3340 * 3.5) + 5.0)) * 0.25);
                                float _3364 = 1.0 - _877;
                                float _3371 = sqrt(1.0 - ((1.0 - (_3364 * _3364)) * (1.0 - (_3363 * _3363))));
                                float _3372 = _3371 * _3371;
                                float _3373 = _3372 * _3372;
                                float _3374 = _3320 - _2822;
                                float _3375 = _3321 - _2823;
                                float _3376 = _3322 - _2824;
                                float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                                float _3384 = dot(vec3(_802, _805, _808), vec3((-0.0) - _2822, (-0.0) - _2823, (-0.0) - _2824));
                                float _4433 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3387 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3388 = dot(vec3(_802, _805, _808), vec3(_3380 * _3374, _3380 * _3375, _3380 * _3376));
                                float _4444 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3391 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3395 = ((_3391 * _3391) * (_3373 + (-1.0))) + 1.0;
                                float _3396 = _3333 * _3372;
                                float _3397 = _3396 * _3396;
                                float _3403 = ((1.0 - _3397) * dot(vec3(_802, _805, _808), vec3(_3320, _3321, _3322))) + _3397;
                                float _4455 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3404 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3405 = 1.0 - _3372;
                                float _3415 = (0.5 / (((_3404 * ((_3387 * _3405) + _3372)) + 9.9999999392252902907785028219223e-09) + (((_3404 * _3405) + _3372) * _3387))) * _3404;
                                float _4466 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3425 = (_3350 * _3327) * (((_3373 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3395 * _3395) * ((_3340 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3425 * _3208.x;
                                frontier_phi_73_pred_1 = _3425 * _3208.y;
                                frontier_phi_73_pred_2 = _3351 * _3196.z;
                                frontier_phi_73_pred_3 = _3351 * _3196.y;
                                frontier_phi_73_pred_4 = _3351 * _3196.x;
                                frontier_phi_73_pred_5 = _3425 * _3208.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3429 = frontier_phi_73_pred;
                            _3430 = frontier_phi_73_pred_1;
                            _3434 = frontier_phi_73_pred_2;
                            _3433 = frontier_phi_73_pred_3;
                            _3432 = frontier_phi_73_pred_4;
                            _3431 = frontier_phi_73_pred_5;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            _3140 = _3434 + _3153;
                            _3135 = _3429 + _3148;
                            _3136 = _3430 + _3149;
                            _3137 = _3431 + _3150;
                            if (_3155 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3155;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3138;
                        frontier_phi_67_pred_1 = _3139;
                        frontier_phi_67_pred_2 = _3140;
                        frontier_phi_67_pred_3 = _3137;
                        frontier_phi_67_pred_4 = _3136;
                        frontier_phi_67_pred_5 = _3135;
                    }
                    _2803 = frontier_phi_67_pred;
                    _2805 = frontier_phi_67_pred_1;
                    _2807 = frontier_phi_67_pred_2;
                    _2801 = frontier_phi_67_pred_3;
                    _2799 = frontier_phi_67_pred_4;
                    _2797 = frontier_phi_67_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2797;
                        _2936 = _2799;
                        _2937 = _2801;
                        _2938 = _2803;
                        _2939 = _2805;
                        _2940 = _2807;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2805;
                frontier_phi_55_56_ladder_1 = _2807;
                frontier_phi_55_56_ladder_2 = _2803;
                frontier_phi_55_56_ladder_3 = _2801;
                frontier_phi_55_56_ladder_4 = _2799;
                frontier_phi_55_56_ladder_5 = _2797;
            }
            else
            {
                frontier_phi_55_56_ladder = _2691;
                frontier_phi_55_56_ladder_1 = _2693;
                frontier_phi_55_56_ladder_2 = _2689;
                frontier_phi_55_56_ladder_3 = _2687;
                frontier_phi_55_56_ladder_4 = _2685;
                frontier_phi_55_56_ladder_5 = _2683;
            }
            _2796 = frontier_phi_55_56_ladder_5;
            _2798 = frontier_phi_55_56_ladder_4;
            _2800 = frontier_phi_55_56_ladder_3;
            _2802 = frontier_phi_55_56_ladder_2;
            _2804 = frontier_phi_55_56_ladder;
            _2806 = frontier_phi_55_56_ladder_1;
        }
        float _2811 = isnan(1.0) ? _861 : (isnan(_861) ? 1.0 : min(_861, 1.0));
        _2595 = (_2811 * _2802) + _2031;
        _2597 = (_2811 * _2804) + _2033;
        _2599 = (_2811 * _2806) + _2035;
        _2601 = ((_2796 * _845) * _2811) + _2376;
        _2603 = ((_2798 * _847) * _2811) + _2378;
        _2605 = ((_2800 * _848) * _2811) + _2380;
    }
    else
    {
        _2595 = _2031;
        _2597 = _2033;
        _2599 = _2035;
        _2601 = _2376;
        _2603 = _2378;
        _2605 = _2380;
    }
    float _4482 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4493 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4504 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    uint _2625 = _236 + 6u;
    float _2633 = _783 / cbSceneParam._m0[86u].x;
    float _2634 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2648 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, (log2((isnan(cbSceneParam._m0[77u].w) ? _717 : (isnan(_717) ? cbSceneParam._m0[77u].w : min(_717, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2650 = _2648.x;
    float _2651 = _2648.y;
    float _2652 = _2648.z;
    float _2653 = _2648.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_717 > cbSceneParam._m0[78u].w)
    {
        float _2708 = isnan(_717) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _717 : min(cbSceneParam._m0[80u].w, _717));
        float _2709 = _2708 / _717;
        float _2720 = _2709 * _768;
        float _2721 = _769 * _2709;
        float _2722 = (-0.0) - _2721;
        float _2724 = _2709 * _770;
        float _2726 = (cbSceneParam._m0[77u].w * _2722) / _2708;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2721;
        float _2734 = sqrt(((_2720 * _2720) + (_2721 * _2721)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2708)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2897;
        if (abs((_2722 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2897 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2857 = 1.0 / cbSceneParam._m0[80u].x;
            float _2858 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2859 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2868 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : min(_2858, 0.0));
            float _2869 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : min(_2859, 0.0));
            _2897 = ((abs(_2734 / _2722) * cbSceneParam._m0[80u].y) * ((((_2868 - _2869) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))))) * _2857)) - ((exp2(_2744 * _2868) - exp2(_2744 * _2869)) * _2857))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2899 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, 1.0), 0.0);
        float _2908 = exp2((_2897 * (-1.44269502162933349609375)) * (1.0 - _2899.w));
        float _2909 = log2(_2908);
        float _2925 = log2(_2653);
        _2746 = (exp2(_2925 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].x)) * _2899.x) / cbSceneParam._m0[78u].x)) + _2650;
        _2748 = (exp2(_2925 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].y)) * _2899.y) / cbSceneParam._m0[78u].y)) + _2651;
        _2750 = (exp2(_2925 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].z)) * _2899.z) / cbSceneParam._m0[78u].z)) + _2652;
        _2752 = _2908 * _2653;
    }
    else
    {
        _2746 = _2650;
        _2748 = _2651;
        _2750 = _2652;
        _2752 = _2653;
    }
    float _2764 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2765 = _2764 == 3.0;
    float _2766 = log2(_2752);
    float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2595 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _861))) + ((_2601 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2597 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _861))) + ((_2603 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2599 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _861))) + ((_2605 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1669)) * cbPerFrame._m0[3u].x));
    float _2784 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2784 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.y = _2784 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.z = _2784 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.w = cbInstanceData._m0[_2625].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2625].w;
}


