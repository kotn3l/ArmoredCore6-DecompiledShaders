#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1488;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3836 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _448 = (_441 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _449 = (_441 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _450 = (_441 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3847 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _527 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448);
    float _530 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449);
    float _533 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450);
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = _589.x;
    float _592 = _589.y;
    float _593 = _589.z;
    float _600 = ((_572.x - _591) * _441) + _591;
    float _601 = ((_572.y - _592) * _441) + _592;
    float _602 = ((_572.z - _593) * _441) + _593;
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _627 = ((_614.z - _602) * _514) + _602;
    float _630 = ((((_614.x - _600) * _514) + _600) * 2.0) + (-1.0);
    float _632 = ((((_614.y - _601) * _514) + _601) * 2.0) + (-1.0);
    float _633 = dot(vec2(_630, _632), vec2(_630, _632));
    float _3858 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))));
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _679 = _677.x;
    float _680 = 1.0 - _679;
    float _689 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _692 = ((isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : min(_689, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _701 = (_692 - ((((((_679 - _680) * cbMtdParam._m0[24u].z) + _680) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _692))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3879 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _709 = (_702 * ((_552.x * cbMtdParam._m0[18u].x) - _527)) + _527;
    float _710 = (_702 * ((_552.y * cbMtdParam._m0[18u].y) - _530)) + _530;
    float _711 = (_702 * ((_552.z * cbMtdParam._m0[18u].z) - _533)) + _533;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _751 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_725 - _726) * cbMtdParam._m0[24u].w) + _726) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3890 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _760 = ((((cbMtdParam._m0[10u].x - _709) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _752) + _709;
    float _761 = ((((cbMtdParam._m0[10u].y - _710) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _752) + _710;
    float _762 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _711)) * _752) + _711;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _790 = _788.x;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _790) * _441) + _790;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _807) * _514) + _807;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _824) * cbMtdParam._m0[19u].z) + _824;
    float _830 = _828 - (_828 * _702);
    float _832 = _830 - (_830 * _752);
    float _836 = (cbMtdParam._m0[19u].w * (_652.z - _627)) + _627;
    vec4 _850 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _857 = (_850.x * 2.0) + (-1.0);
    float _858 = (_850.y * 2.0) + (-1.0);
    float _859 = dot(vec2(_857, _858), vec2(_857, _858));
    float _3901 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _867 = (_702 * (_850.z - _836)) + _836;
    float _870 = ((cbMtdParam._m0[23u].x - _867) * _752) + _867;
    vec4 _889 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _895 = (_889.x * 2.0) + (-1.0);
    float _896 = (_889.y * 2.0) + (-1.0);
    float _897 = dot(vec2(_895, _896), vec2(_895, _896));
    float _3912 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _905 = (((_652.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _630;
    float _906 = (((_652.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _632;
    float _918 = (((_857 - _905) + (cbMtdParam._m0[21u].x * _905)) * _702) + _905;
    float _919 = (((_858 - _906) + (cbMtdParam._m0[21u].x * _906)) * _702) + _906;
    float _920 = (_702 * (sqrt(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) - _638)) + _638;
    float _931 = (((_895 - _918) + (_918 * cbMtdParam._m0[22u].z)) * _752) + _918;
    float _932 = (((_896 - _919) + (_919 * cbMtdParam._m0[22u].z)) * _752) + _919;
    float _933 = ((sqrt(1.0 - (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) - _920) * _752) + _920;
    float _935 = cbMtdParam._m0[22u].x + _652.w;
    float _938 = fma(_933, _252 * NORMAL.x, fma(_932, _259 * TANGENT.x, (_245 * _237) * _931));
    float _941 = fma(_933, _252 * NORMAL.y, fma(_932, _259 * TANGENT.y, (_245 * _238) * _931));
    float _944 = fma(_933, _252 * NORMAL.z, fma(_932, _259 * TANGENT.z, (_245 * _239) * _931));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _3923 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _952 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _3945 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3956 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3967 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3978 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _957 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _971 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1021 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1011);
    float _1022 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1011);
    float _1023 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1011);
    float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
    float _1028 = _1021 * _1027;
    float _1029 = _1022 * _1027;
    float _1030 = _1023 * _1027;
    float _1036 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1037 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1055 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1058 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1061 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1075 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1081 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * cbInstanceData._m0[_1075].x;
    float _1082 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) * cbInstanceData._m0[_1075].y;
    float _1083 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * cbInstanceData._m0[_1075].z;
    float _3989 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _4011 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1087 = 1.0 - _957;
    float _1088 = _1084 * _1087;
    float _1089 = _1085 * _1087;
    float _1090 = _1086 * _1087;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _957;
    float _1096 = (_1085 + (-0.039999999105930328369140625)) * _957;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _957;
    float _1098 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    float _1101 = _1097 + 0.039999999105930328369140625;
    vec4 _1110 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1036, cbSceneParam._m0[86u].y * _1037));
    float _1114 = ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * TEXCOORD_5.w) * _1110.x;
    float _1115 = dot(vec3(_949, _950, _951), vec3(_1028, _1029, _1030));
    float _1118 = _1115 * 2.0;
    float _1122 = (_1118 * _949) - _1028;
    float _1123 = (_1118 * _950) - _1029;
    float _1124 = (_1118 * _951) - _1030;
    float _1128 = abs(dot(vec3(_1028, _1029, _1030), vec3(_949, _950, _951)));
    float _4022 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1130 = sqrt(_952);
    float _1143 = exp2((_1130 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1130 * 3.0));
    float _1149 = (1.0 - _1143) * ((_1130 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1150 = _1143 * _1130;
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1487;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1212 = fma(_1186, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178));
        float _1216 = fma(_1186, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178));
        float _1220 = fma(_1186, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178));
        float _1245 = _1178 + _949;
        float _1246 = _1182 + _950;
        float _1247 = _1186 + _951;
        float _1257 = fma(_1247, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1245)) - _1212;
        float _1258 = fma(_1247, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1245)) - _1216;
        float _1259 = fma(_1247, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1245)) - _1220;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1212 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1216 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[34u].z) + ((((((_1220 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1315 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1281.x + (-0.5));
        float _1317 = _1315 * (_1281.y + (-0.5));
        float _1318 = _1315 * (_1281.z + (-0.5));
        float _1325 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1288.x + (-0.5));
        float _1327 = _1325 * (_1288.y + (-0.5));
        float _1328 = _1325 * (_1288.z + (-0.5));
        float _1335 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1295.x + (-0.5));
        float _1337 = _1335 * (_1295.y + (-0.5));
        float _1338 = _1335 * (_1295.z + (-0.5));
        float _1345 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1302.x + (-0.5));
        float _1347 = _1345 * (_1302.y + (-0.5));
        float _1348 = _1345 * (_1302.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1369 = (dot(vec3(_949, _950, _951), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1379 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4070 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1381 + 1.0))) + _1386) * _1349;
        float _1396 = _1317 * 0.5;
        float _1397 = _1327 * 0.5;
        float _1398 = _1337 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_949, _950, _951), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4103 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1423 + 1.0))) + _1428) * _1350;
        float _1438 = _1318 * 0.5;
        float _1439 = _1328 * 0.5;
        float _1440 = _1338 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_949, _950, _951), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4114 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4125 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4136 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_1465 + 1.0))) + _1470) * _1351;
        _1487 = _1318;
        _1489 = _1317;
        _1490 = _1316;
        _1491 = _1328;
        _1492 = _1327;
        _1493 = _1326;
        _1494 = _1338;
        _1495 = _1337;
        _1496 = _1336;
        _1497 = _1351;
        _1498 = _1350;
        _1499 = _1349;
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1488;
        _1489 = _1488;
        _1490 = _1488;
        _1491 = _1488;
        _1492 = _1488;
        _1493 = _1488;
        _1494 = _1488;
        _1495 = _1488;
        _1496 = _1488;
        _1497 = _1488;
        _1498 = _1488;
        _1499 = _1488;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1526 = fma(_1186, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178));
        float _1530 = fma(_1186, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178));
        float _1534 = fma(_1186, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178));
        float _1557 = _1178 + _949;
        float _1558 = _1182 + _950;
        float _1559 = _1186 + _951;
        float _1569 = fma(_1559, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1557)) - _1526;
        float _1570 = fma(_1559, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1557)) - _1530;
        float _1571 = fma(_1559, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1557)) - _1534;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1588 = ((_1575 * _1569) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1526 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1575 * _1570) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1530 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1575 * _1571) / cbModelParam._m0[35u].z) + ((((((_1534 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        float _1625 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1592.x + (-0.5));
        float _1627 = _1625 * (_1592.y + (-0.5));
        float _1628 = _1625 * (_1592.z + (-0.5));
        float _1635 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1599.x + (-0.5));
        float _1637 = _1635 * (_1599.y + (-0.5));
        float _1638 = _1635 * (_1599.z + (-0.5));
        float _1645 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1606.x + (-0.5));
        float _1647 = _1645 * (_1606.y + (-0.5));
        float _1648 = _1645 * (_1606.z + (-0.5));
        float _1655 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1613.x + (-0.5));
        float _1657 = _1655 * (_1613.y + (-0.5));
        float _1658 = _1655 * (_1613.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_949, _950, _951), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4199 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1689 + 1.0))) + _1694) * _1659;
        float _1704 = _1627 * 0.5;
        float _1705 = _1637 * 0.5;
        float _1706 = _1647 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_949, _950, _951), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4232 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1731 + 1.0))) + _1736) * _1660;
        float _1746 = _1628 * 0.5;
        float _1747 = _1638 * 0.5;
        float _1748 = _1648 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_949, _950, _951), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4265 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1773 + 1.0))) + _1778) * _1661;
        _1795 = _1628;
        _1796 = _1627;
        _1797 = _1626;
        _1798 = _1638;
        _1799 = _1637;
        _1800 = _1636;
        _1801 = _1648;
        _1802 = _1647;
        _1803 = _1646;
        _1804 = _1661;
        _1805 = _1660;
        _1806 = _1659;
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
    }
    else
    {
        _1795 = _1488;
        _1796 = _1488;
        _1797 = _1488;
        _1798 = _1488;
        _1799 = _1488;
        _1800 = _1488;
        _1801 = _1488;
        _1802 = _1488;
        _1803 = _1488;
        _1804 = _1488;
        _1805 = _1488;
        _1806 = _1488;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1500)) + _1500;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1501)) + _1501;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1502)) + _1502;
    float _1842 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1819));
    float _1863 = _1122 * 0.5;
    float _1864 = _1123 * 0.5;
    float _1865 = _1124 * 0.5;
    float _1866 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1869 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1872 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1906;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1879 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1487, _1491, _1494, _1497));
        float _1883 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1887 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1894 = dot(vec4(cbModelParam._m0[39u]), vec4(_1863, _1864, _1865, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1917;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1908 = dot(vec4(cbModelParam._m0[40u]), vec4(_1863, _1864, _1865, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1921 = (_1917 * cbModelParam._m0[1u].x) + (_1906 * (1.0 - cbModelParam._m0[1u].x));
    float _1931 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _952);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1931 : min(cbModelParam._m0[25u].z, _1931));
    float _2012;
    float _2014;
    float _2016;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1979 = fma(_1186, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178)) + cbModelParam._m0[13u].w;
        float _1983 = fma(_1186, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178)) + cbModelParam._m0[14u].w;
        float _1987 = fma(_1186, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178)) + cbModelParam._m0[15u].w;
        float _1990 = fma(_1124, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122));
        float _1993 = fma(_1124, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122));
        float _1996 = fma(_1124, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122));
        float _2024;
        if (_1990 > 0.0)
        {
            _2024 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2024 = frontier_phi_14_12_ladder;
        }
        float _2247;
        if (_1993 > 0.0)
        {
            _2247 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2247 = frontier_phi_23_19_ladder;
        }
        float _2504;
        if (_1996 > 0.0)
        {
            _2504 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2504 = frontier_phi_35_30_ladder;
        }
        float _2506 = isnan(_2247) ? _2024 : (isnan(_2024) ? _2247 : min(_2024, _2247));
        float _2507 = isnan(_2504) ? _2506 : (isnan(_2506) ? _2504 : min(_2506, _2504));
        float _2511 = (_2507 * _1990) + _1979;
        float _2512 = (_2507 * _1993) + _1983;
        float _2513 = (_2507 * _1996) + _1987;
        float _2514 = _2507 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2514;
        float _2518 = _2514 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 > _2518) || ((_2512 < _2516) || ((_2511 < _2516) || (_2511 > _2518))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2513, cbModelParam._m0[9u].z, fma(_2512, cbModelParam._m0[9u].y, _2511 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2513, cbModelParam._m0[10u].z, fma(_2512, cbModelParam._m0[10u].y, _2511 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2513, cbModelParam._m0[11u].z, fma(_2512, cbModelParam._m0[11u].y, _2511 * cbModelParam._m0[11u].x))), _1932);
            frontier_phi_13_35_ladder = _2641.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2641.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2641.x * cbModelParam._m0[1u].y;
        }
        _2012 = frontier_phi_13_35_ladder_2;
        _2014 = frontier_phi_13_35_ladder_1;
        _2016 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2000 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1122, _1123, _1124), _1932);
        _2012 = _2000.x * cbModelParam._m0[1u].y;
        _2014 = _2000.y * cbModelParam._m0[1u].y;
        _2016 = _2000.z * cbModelParam._m0[1u].y;
    }
    float _2020 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _952);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2020 : min(cbModelParam._m0[25u].w, _2020));
    float _2110;
    float _2112;
    float _2114;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2074 = fma(_1186, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178)) + cbModelParam._m0[21u].w;
        float _2078 = fma(_1186, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178)) + cbModelParam._m0[22u].w;
        float _2082 = fma(_1186, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178)) + cbModelParam._m0[23u].w;
        float _2085 = fma(_1124, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122));
        float _2088 = fma(_1124, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122));
        float _2091 = fma(_1124, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122));
        float _2252;
        if (_2085 > 0.0)
        {
            _2252 = abs((1.0 - _2074) / _2085);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2074 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2252 = frontier_phi_25_21_ladder;
        }
        float _2531;
        if (_2088 > 0.0)
        {
            _2531 = abs((1.0 - _2078) / _2088);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2088 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2078 + 1.0) / _2088);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2531 = frontier_phi_37_32_ladder;
        }
        float _2744;
        if (_2091 > 0.0)
        {
            _2744 = abs((1.0 - _2082) / _2091);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2091 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2082 + 1.0) / _2091);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2744 = frontier_phi_46_43_ladder;
        }
        float _2746 = isnan(_2531) ? _2252 : (isnan(_2252) ? _2531 : min(_2252, _2531));
        float _2747 = isnan(_2744) ? _2746 : (isnan(_2746) ? _2744 : min(_2746, _2744));
        float _2751 = (_2747 * _2085) + _2074;
        float _2752 = (_2747 * _2088) + _2078;
        float _2753 = (_2747 * _2091) + _2082;
        float _2754 = _2747 * 9.9999997473787516355514526367188e-05;
        float _2755 = (-1.0) - _2754;
        float _2757 = _2754 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2753 > _2757) || ((_2753 < _2755) || ((_2752 > _2757) || ((_2752 < _2755) || ((_2751 < _2755) || (_2751 > _2757))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2952 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2753, cbModelParam._m0[17u].z, fma(_2752, cbModelParam._m0[17u].y, _2751 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2753, cbModelParam._m0[18u].z, fma(_2752, cbModelParam._m0[18u].y, _2751 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2753, cbModelParam._m0[19u].z, fma(_2752, cbModelParam._m0[19u].y, _2751 * cbModelParam._m0[19u].x))), _2021);
            frontier_phi_22_46_ladder = _2952.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2952.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2952.x * cbModelParam._m0[1u].z;
        }
        _2110 = frontier_phi_22_46_ladder_2;
        _2112 = frontier_phi_22_46_ladder_1;
        _2114 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1122, _1123, _1124), _2021);
        _2110 = _2094.x * cbModelParam._m0[1u].z;
        _2112 = _2094.y * cbModelParam._m0[1u].z;
        _2114 = _2094.z * cbModelParam._m0[1u].z;
    }
    float _2127 = (((_1149 * _1098) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2129 = (((_1149 * _1100) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2131 = (((_1149 * _1101) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2114 - _2016)) + _2016);
    float _2134 = fma(_2131, cbSceneParam._m0[89u].z, fma(_2129, cbSceneParam._m0[89u].y, _2127 * cbSceneParam._m0[89u].x));
    float _2137 = fma(_2131, cbSceneParam._m0[90u].z, fma(_2129, cbSceneParam._m0[90u].y, _2127 * cbSceneParam._m0[90u].x));
    float _2140 = fma(_2131, cbSceneParam._m0[91u].z, fma(_2129, cbSceneParam._m0[91u].y, _2127 * cbSceneParam._m0[91u].x));
    vec4 _2148 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1036, _1037));
    float _2150 = _2148.w;
    float _2162 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2150);
    float _2163 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2150);
    float _2164 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2150);
    uvec4 _2168 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2170 = _2168.x * 14u;
    uint _2171 = _2170 + 13u;
    float _2178 = _1114 + (-1.0);
    float _2183 = (cbLight._m0[_2171].x * _2178) + 1.0;
    float _2184 = (cbLight._m0[_2171].y * _2178) + 1.0;
    float _2185 = (cbLight._m0[_2171].z * _2178) + 1.0;
    float _2186 = (cbLight._m0[_2171].w * _2178) + 1.0;
    uint _2187 = _2170 + 5u;
    float _2193 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2197 = _2170 + 4u;
    float _2206 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2210 = _2170 | 1u;
    float _2221 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_949, _950, _951));
    float _2224 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_949, _950, _951));
    float _4401 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _4412 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2229 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2231 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2238 = ((cbLight._m0[_2187].x * _2193) * _2231) + (((cbLight._m0[_2197].x * _2162) * _2206) * _2229);
    float _2239 = ((_2193 * cbLight._m0[_2187].y) * _2231) + (((cbLight._m0[_2197].y * _2163) * _2206) * _2229);
    float _2240 = ((_2193 * cbLight._m0[_2187].z) * _2231) + (((cbLight._m0[_2197].z * _2164) * _2206) * _2229);
    uvec4 _2244 = floatBitsToUint(cbLight._m0[_2170 + 12u]);
    bool _2246 = _2244.x == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2246)
    {
        _2257 = _2238;
        _2259 = _2239;
        _2261 = _2240;
    }
    else
    {
        uint _2265 = _2170 + 6u;
        float _2281 = (dot(vec3(cbLight._m0[_2170 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4423 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2284 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2257 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2238;
        _2259 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2239;
        _2261 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2240;
    }
    bool _2264 = _2244.y == 0u;
    float _2302;
    float _2304;
    float _2306;
    if (_2264)
    {
        _2302 = _2257;
        _2304 = _2259;
        _2306 = _2261;
    }
    else
    {
        uint _2475 = _2170 + 7u;
        float _2491 = (dot(vec3(cbLight._m0[_2170 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4439 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2494 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2302 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2257;
        _2304 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2259;
        _2306 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2261;
    }
    uint _2309 = _2170 + 8u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _952) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2170].x + _1028;
    float _2325 = cbLight._m0[_2170].y + _1029;
    float _2326 = cbLight._m0[_2170].z + _1030;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2170].xyz));
    float _4455 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2338 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2339 = dot(vec3(_949, _950, _951), vec3(_2331, _2332, _2333));
    float _4477 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2331, _2332, _2333));
    float _4488 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2323 * _2323;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0);
    float _2360 = 0.959999978542327880859375 - _1095;
    float _2362 = 0.959999978542327880859375 - _1096;
    float _2363 = 0.959999978542327880859375 - _1097;
    float _2370 = 1.0 - _2323;
    float _2381 = (0.5 / (((_2338 * ((_2337 * _2370) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2370) + _2323) * _2337))) * _2337;
    float _4499 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    uint _2397 = _2170 + 9u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _952) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2210].x + _1028;
    float _2411 = cbLight._m0[_2210].y + _1029;
    float _2412 = cbLight._m0[_2210].z + _1030;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2210].xyz));
    float _4510 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2424 = dot(vec3(_949, _950, _951), vec3(_2417, _2418, _2419));
    float _4521 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2428 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2417, _2418, _2419));
    float _4532 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2432 = _2409 * _2409;
    float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
    float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0);
    float _2450 = 1.0 - _2409;
    float _2460 = (0.5 / (((_2338 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2450) + _2409) * _2423))) * _2423;
    float _4543 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2462 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
    float _2472 = (((((_2443 * _2360) + _1098) * cbLight._m0[_2397].x) * _2462) * _2193) + ((((cbLight._m0[_2309].x * _2162) * ((_2359 * _2360) + _1098)) * _2383) * _2206);
    float _2473 = (((((_2443 * _2362) + _1100) * cbLight._m0[_2397].y) * _2462) * _2193) + ((((cbLight._m0[_2309].y * _2163) * ((_2359 * _2362) + _1100)) * _2383) * _2206);
    float _2474 = (((((_2443 * _2363) + _1101) * cbLight._m0[_2397].z) * _2462) * _2193) + ((((cbLight._m0[_2309].z * _2164) * ((_2359 * _2363) + _1101)) * _2383) * _2206);
    float _2536;
    float _2538;
    float _2540;
    if (_2246)
    {
        _2536 = _2472;
        _2538 = _2473;
        _2540 = _2474;
    }
    else
    {
        uint _2542 = _2170 + 2u;
        uint _2546 = _2170 + 10u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _952) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _1028;
        float _2563 = cbLight._m0[_2542].y + _1029;
        float _2564 = cbLight._m0[_2542].z + _1030;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2542].xyz));
        float _4554 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2576 = dot(vec3(_949, _950, _951), vec3(_2569, _2570, _2571));
        float _4565 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4576 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0);
        float _2602 = 1.0 - _2561;
        float _2612 = (0.5 / (((_2338 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2602) + _2561) * _2575))) * _2575;
        float _4587 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2185 : (isnan(_2185) ? 1.0 : min(_2185, 1.0));
        _2536 = (((((_2595 * _2360) + _1098) * cbLight._m0[_2546].x) * _2614) * _2615) + _2472;
        _2538 = (((((_2595 * _2362) + _1100) * cbLight._m0[_2546].y) * _2614) * _2615) + _2473;
        _2540 = (((((_2595 * _2363) + _1101) * cbLight._m0[_2546].z) * _2614) * _2615) + _2474;
    }
    float _2650;
    float _2652;
    float _2654;
    if (_2264)
    {
        _2650 = _2536;
        _2652 = _2538;
        _2654 = _2540;
    }
    else
    {
        uint _2661 = _2170 + 3u;
        uint _2665 = _2170 + 11u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _952) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _1028;
        float _2682 = cbLight._m0[_2661].y + _1029;
        float _2683 = cbLight._m0[_2661].z + _1030;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2661].xyz));
        float _4603 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2695 = dot(vec3(_949, _950, _951), vec3(_2688, _2689, _2690));
        float _4614 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4625 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2721 = 1.0 - _2680;
        float _2731 = (0.5 / (((_2338 * ((_2694 * _2721) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2721) + _2680) * _2694))) * _2694;
        float _4636 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2733 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2734 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
        _2650 = (((((_2714 * _2360) + _1098) * cbLight._m0[_2665].x) * _2733) * _2734) + _2536;
        _2652 = (((((_2714 * _2362) + _1100) * cbLight._m0[_2665].y) * _2733) * _2734) + _2538;
        _2654 = (((((_2714 * _2363) + _1101) * cbLight._m0[_2665].z) * _2733) * _2734) + _2540;
    }
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    float _2879;
    if (_2168.y == 0u)
    {
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2809;
        float _2811 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2809;
        float _2812 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2809;
        uvec4 _2824 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2825 = _2824.x;
        uint _2836 = uint((float(_2824.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1037) / _2825))) + floor(float(uint(cbSceneParam._m0[85u].x * _1036) / _2825)));
        float _2846 = (log2(_2812 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2847 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        uint _2850 = uint(isnan(14.0) ? _2847 : (isnan(_2847) ? 14.0 : min(_2847, 14.0)));
        uvec4 _2855 = texelFetch(g_lightClusterGridBuffer, int(((_2850 << 2u) + (_2836 << 6u)) >> 2u));
        uint _2856 = _2855.x;
        uint _2857 = _2824.z;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        if (((((1u << ((_2857 >> 4u) & 15u)) + 4294967295u) & _2856) == 0u) || ((_2857 & 240u) == 0u))
        {
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
        }
        else
        {
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            uint _3108 = 0u;
            uint _3117;
            bool _3118;
            for (;;)
            {
                _3117 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                _3118 = _3117 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3118)
                {
                    frontier_phi_61_pred = _3102;
                    frontier_phi_61_pred_1 = _3107;
                    frontier_phi_61_pred_2 = _3106;
                    frontier_phi_61_pred_3 = _3105;
                    frontier_phi_61_pred_4 = _3104;
                    frontier_phi_61_pred_5 = _3103;
                }
                else
                {
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    uint _3232;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3106;
                    _3231 = _3107;
                    _3232 = _3117;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    for (;;)
                    {
                        uint _3236 = uint(findLSB(_3232)) + (_3108 << 5u);
                        uint _3233 = (_3232 + 4294967295u) & _3232;
                        uint _3238 = _3236 * 48u;
                        vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 3u)).x));
                        uint _3258 = (_3236 * 48u) + 4u;
                        vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3258)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3258 + 3u)).x));
                        uint _3277 = (_3236 * 48u) + 8u;
                        vec3 _3288 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x));
                        float _3292 = _3252.x - _2810;
                        float _3293 = _3252.y - _2811;
                        float _3294 = _3252.z - _2812;
                        float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                        float _3298 = inversesqrt(_3295);
                        float _3299 = _3298 * _3292;
                        float _3300 = _3298 * _3293;
                        float _3301 = _3298 * _3294;
                        float _3302 = dot(vec3(_1055, _1058, _1061), vec3(_3299, _3300, _3301));
                        float _3307 = 1.0 - (_3295 * _3252.w);
                        float _4662 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3309 = sqrt(_3295) * _3271.w;
                        float _3312 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3302) + _3313;
                        float _3319 = _3309 * _3309;
                        float _3323 = ((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3308) / ((_3319 * 0.699999988079071044921875) + 1.0);
                        float _3327 = (-0.0) - _2810;
                        float _3328 = (-0.0) - _2811;
                        float _3329 = (-0.0) - _2812;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3334 = _3333 * _3327;
                        float _3335 = _3333 * _3328;
                        float _3336 = _3333 * _3329;
                        float _3344 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                        float _3345 = 1.0 - _1130;
                        float _3352 = sqrt(1.0 - ((1.0 - (_3345 * _3345)) * (1.0 - (_3344 * _3344))));
                        float _3353 = _3352 * _3352;
                        float _3354 = _3353 * _3353;
                        float _3355 = _3334 + _3299;
                        float _3356 = _3335 + _3300;
                        float _3357 = _3336 + _3301;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3365 = dot(vec3(_1055, _1058, _1061), vec3(_3334, _3335, _3336));
                        float _4678 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3368 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3369 = dot(vec3(_1055, _1058, _1061), vec3(_3361 * _3355, _3361 * _3356, _3361 * _3357));
                        float _4689 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3372 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3376 = ((_3372 * _3372) * (_3354 + (-1.0))) + 1.0;
                        float _3377 = _3312 * _3353;
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3302) + _3378;
                        float _4700 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3383 = 1.0 - _3353;
                        float _3393 = (0.5 / (((_3382 * ((_3368 * _3383) + _3353)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3353) * _3368))) * _3382;
                        float _4711 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3404 = (((_3354 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3376 * _3376) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125))) * _3308;
                        _3161 = (_3323 * _3271.x) + _3229;
                        _3162 = (_3323 * _3271.y) + _3230;
                        _3163 = (_3323 * _3271.z) + _3231;
                        _3158 = (_3404 * _3288.x) + _3226;
                        _3159 = (_3404 * _3288.y) + _3227;
                        _3160 = (_3404 * _3288.z) + _3228;
                        if (_3233 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3162;
                            _3231 = _3163;
                            _3232 = _3233;
                        }
                    }
                    frontier_phi_61_pred = _3158;
                    frontier_phi_61_pred_1 = _3163;
                    frontier_phi_61_pred_2 = _3162;
                    frontier_phi_61_pred_3 = _3161;
                    frontier_phi_61_pred_4 = _3160;
                    frontier_phi_61_pred_5 = _3159;
                }
                _2958 = frontier_phi_61_pred;
                _2968 = frontier_phi_61_pred_1;
                _2966 = frontier_phi_61_pred_2;
                _2964 = frontier_phi_61_pred_3;
                _2962 = frontier_phi_61_pred_4;
                _2960 = frontier_phi_61_pred_5;
                uint _3109 = _3108 + 1u;
                if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3102 = _2958;
                    _3103 = _2960;
                    _3104 = _2962;
                    _3105 = _2964;
                    _3106 = _2966;
                    _3107 = _2968;
                    _3108 = _3109;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
        }
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.z;
        uint _2974 = (_2972 >> 8u) & 15u;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((4294967295u << _2974) & _2856) == 0u)
        {
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
            _3078 = _2965;
            _3080 = _2967;
        }
        else
        {
            float _3095 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
            float _3096 = _3095 * _2810;
            float _3097 = _3095 * _2811;
            float _3098 = _3095 * _2812;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2974 < ((_2972 >> 12u) & 15u))
            {
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3209 = _2957;
                float _3210 = _2959;
                float _3211 = _2961;
                float _3212 = _2963;
                float _3213 = _2965;
                float _3214 = _2967;
                uint _3215 = _2974;
                uint _3224;
                bool _3225;
                for (;;)
                {
                    _3224 = texelFetch(g_lightClassification, int((((_2850 << 5u) + (_2836 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                    _3225 = _3224 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3225)
                    {
                        frontier_phi_67_pred = _3212;
                        frontier_phi_67_pred_1 = _3213;
                        frontier_phi_67_pred_2 = _3214;
                        frontier_phi_67_pred_3 = _3211;
                        frontier_phi_67_pred_4 = _3210;
                        frontier_phi_67_pred_5 = _3209;
                    }
                    else
                    {
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3706;
                        float _3707;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        float _3426 = _3213;
                        float _3427 = _3214;
                        uint _3428 = _3224;
                        uint _3429;
                        vec4 _3454;
                        float _3455;
                        vec4 _3470;
                        vec3 _3482;
                        vec4 _3497;
                        vec4 _3512;
                        float _3558;
                        bool _3559;
                        for (;;)
                        {
                            uint _3439 = ((_3215 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3428));
                            _3429 = (_3428 + 4294967295u) & _3428;
                            uint _3441 = _3439 * 40u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3455 = _3454.w;
                            uint _3457 = (_3439 * 40u) + 4u;
                            _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3472 = (_3439 * 40u) + 8u;
                            _3482 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x));
                            uint _3484 = (_3439 * 40u) + 16u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3439 * 40u) + 20u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3439 * 40u) + 24u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3533 = (_3439 * 40u) + 28u;
                            vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3558 = fma(_2812, _3546.z, fma(_2811, _3546.y, _3546.x * _2810)) + _3546.w;
                            _3559 = !((fma(_2812, _3527.z, fma(_2811, _3527.y, _3527.x * _2810)) + _3527.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3559)
                            {
                                float _3586 = _3454.x - _2810;
                                float _3587 = _3454.y - _2811;
                                float _3588 = _3454.z - _2812;
                                float _3589 = dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588));
                                float _3592 = inversesqrt(_3589);
                                float _3593 = _3592 * _3586;
                                float _3594 = _3592 * _3587;
                                float _3595 = _3592 * _3588;
                                float _3599 = 1.0 - (_3589 / (_3455 * _3455));
                                float _4722 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3604 = sqrt(_3589) * _3470.w;
                                float _3606 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                                float _3607 = _3606 * _3606;
                                float _3610 = ((1.0 - _3607) * dot(vec3(_3593, _3594, _3595), vec3(_1055, _1058, _1061))) + _3607;
                                float _3613 = _3604 * _3604;
                                float _3617 = (fma(_2812, _3497.z, fma(_2811, _3497.y, _3497.x * _2810)) + _3497.w) / _3558;
                                float _3618 = (fma(_2812, _3512.z, fma(_2811, _3512.y, _3512.x * _2810)) + _3512.w) / _3558;
                                float _3622 = 1.0 - dot(vec2(_3617, _3618), vec2(_3617, _3618));
                                float _4738 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3624 = _3623 * (((isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0))) * _3600) / ((_3613 * 0.699999988079071044921875) + 1.0));
                                float _3636 = exp2(log2(1.0 / ((_3613 * 3.5) + 5.0)) * 0.25);
                                float _3637 = 1.0 - _1130;
                                float _3644 = sqrt(1.0 - ((1.0 - (_3637 * _3637)) * (1.0 - (_3636 * _3636))));
                                float _3645 = _3644 * _3644;
                                float _3646 = _3645 * _3645;
                                float _3647 = _3593 - _3096;
                                float _3648 = _3594 - _3097;
                                float _3649 = _3595 - _3098;
                                float _3653 = inversesqrt(dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649)));
                                float _3657 = dot(vec3(_1055, _1058, _1061), vec3((-0.0) - _3096, (-0.0) - _3097, (-0.0) - _3098));
                                float _4749 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3660 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3661 = dot(vec3(_1055, _1058, _1061), vec3(_3653 * _3647, _3653 * _3648, _3653 * _3649));
                                float _4760 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3664 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3668 = ((_3664 * _3664) * (_3646 + (-1.0))) + 1.0;
                                float _3669 = _3606 * _3645;
                                float _3670 = _3669 * _3669;
                                float _3676 = ((1.0 - _3670) * dot(vec3(_1055, _1058, _1061), vec3(_3593, _3594, _3595))) + _3670;
                                float _4771 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3678 = 1.0 - _3645;
                                float _3688 = (0.5 / (((_3677 * ((_3660 * _3678) + _3645)) + 9.9999999392252902907785028219223e-09) + (((_3677 * _3678) + _3645) * _3660))) * _3677;
                                float _4782 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3698 = (_3623 * _3600) * (((_3646 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3668 * _3668) * ((_3613 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3698 * _3482.x;
                                frontier_phi_73_pred_1 = _3698 * _3482.y;
                                frontier_phi_73_pred_2 = _3624 * _3470.z;
                                frontier_phi_73_pred_3 = _3624 * _3470.y;
                                frontier_phi_73_pred_4 = _3624 * _3470.x;
                                frontier_phi_73_pred_5 = _3698 * _3482.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3702 = frontier_phi_73_pred;
                            _3703 = frontier_phi_73_pred_1;
                            _3707 = frontier_phi_73_pred_2;
                            _3706 = frontier_phi_73_pred_3;
                            _3705 = frontier_phi_73_pred_4;
                            _3704 = frontier_phi_73_pred_5;
                            _3412 = _3705 + _3425;
                            _3413 = _3706 + _3426;
                            _3414 = _3707 + _3427;
                            _3409 = _3702 + _3422;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            if (_3429 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3413;
                                _3427 = _3414;
                                _3428 = _3429;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3412;
                        frontier_phi_67_pred_1 = _3413;
                        frontier_phi_67_pred_2 = _3414;
                        frontier_phi_67_pred_3 = _3411;
                        frontier_phi_67_pred_4 = _3410;
                        frontier_phi_67_pred_5 = _3409;
                    }
                    _3077 = frontier_phi_67_pred;
                    _3079 = frontier_phi_67_pred_1;
                    _3081 = frontier_phi_67_pred_2;
                    _3075 = frontier_phi_67_pred_3;
                    _3073 = frontier_phi_67_pred_4;
                    _3071 = frontier_phi_67_pred_5;
                    uint _3216 = _3215 + 1u;
                    if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3209 = _3071;
                        _3210 = _3073;
                        _3211 = _3075;
                        _3212 = _3077;
                        _3213 = _3079;
                        _3214 = _3081;
                        _3215 = _3216;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3079;
                frontier_phi_55_56_ladder_1 = _3081;
                frontier_phi_55_56_ladder_2 = _3077;
                frontier_phi_55_56_ladder_3 = _3075;
                frontier_phi_55_56_ladder_4 = _3073;
                frontier_phi_55_56_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_55_56_ladder = _2965;
                frontier_phi_55_56_ladder_1 = _2967;
                frontier_phi_55_56_ladder_2 = _2963;
                frontier_phi_55_56_ladder_3 = _2961;
                frontier_phi_55_56_ladder_4 = _2959;
                frontier_phi_55_56_ladder_5 = _2957;
            }
            _3070 = frontier_phi_55_56_ladder_5;
            _3072 = frontier_phi_55_56_ladder_4;
            _3074 = frontier_phi_55_56_ladder_3;
            _3076 = frontier_phi_55_56_ladder_2;
            _3078 = frontier_phi_55_56_ladder;
            _3080 = frontier_phi_55_56_ladder_1;
        }
        float _3085 = isnan(1.0) ? _1114 : (isnan(_1114) ? 1.0 : min(_1114, 1.0));
        _2869 = (_3085 * _3076) + _2302;
        _2871 = (_3085 * _3078) + _2304;
        _2873 = (_3085 * _3080) + _2306;
        _2875 = ((_3070 * _1098) * _3085) + _2650;
        _2877 = ((_3072 * _1100) * _3085) + _2652;
        _2879 = ((_3074 * _1101) * _3085) + _2654;
    }
    else
    {
        _2869 = _2302;
        _2871 = _2304;
        _2873 = _2306;
        _2875 = _2650;
        _2877 = _2652;
        _2879 = _2654;
    }
    float _4798 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _4809 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _4820 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    uint _2899 = _265 + 6u;
    float _2907 = _1036 / cbSceneParam._m0[86u].x;
    float _2908 = _1037 / cbSceneParam._m0[86u].y;
    vec4 _2922 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, (log2((isnan(cbSceneParam._m0[77u].w) ? _971 : (isnan(_971) ? cbSceneParam._m0[77u].w : min(_971, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2924 = _2922.x;
    float _2925 = _2922.y;
    float _2926 = _2922.z;
    float _2927 = _2922.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_971 > cbSceneParam._m0[78u].w)
    {
        float _2982 = isnan(_971) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _971 : min(cbSceneParam._m0[80u].w, _971));
        float _2983 = _2982 / _971;
        float _2994 = _2983 * _1021;
        float _2995 = _1022 * _2983;
        float _2996 = (-0.0) - _2995;
        float _2998 = _2983 * _1023;
        float _3000 = (cbSceneParam._m0[77u].w * _2996) / _2982;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2995;
        float _3008 = sqrt(((_2994 * _2994) + (_2995 * _2995)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2982)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3171;
        if (abs((_2996 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3171 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3131 = 1.0 / cbSceneParam._m0[80u].x;
            float _3132 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3133 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            _3171 = ((abs(_3008 / _2996) * cbSceneParam._m0[80u].y) * ((((_3142 - _3143) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))))) * _3131)) - ((exp2(_3018 * _3142) - exp2(_3018 * _3143)) * _3131))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2907, _2908, 1.0), 0.0);
        float _3182 = exp2((_3171 * (-1.44269502162933349609375)) * (1.0 - _3173.w));
        float _3183 = log2(_3182);
        float _3199 = log2(_2927);
        _3020 = (exp2(_3199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].x)) * _3173.x) / cbSceneParam._m0[78u].x)) + _2924;
        _3022 = (exp2(_3199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].y)) * _3173.y) / cbSceneParam._m0[78u].y)) + _2925;
        _3024 = (exp2(_3199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3183 * cbSceneParam._m0[78u].z)) * _3173.z) / cbSceneParam._m0[78u].z)) + _2926;
        _3026 = _3182 * _2927;
    }
    else
    {
        _3020 = _2924;
        _3022 = _2925;
        _3024 = _2926;
        _3026 = _2927;
    }
    float _3038 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3039 = _3038 == 3.0;
    float _3040 = log2(_3026);
    float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2869 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1114))) + ((_2875 + ((isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2871 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1114))) + ((_2877 + ((isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2873 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1114))) + ((_2879 + ((isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3058 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3058 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.y = _3058 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.z = _3058 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
    SV_Target.w = cbInstanceData._m0[_2899].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2899].w;
}


