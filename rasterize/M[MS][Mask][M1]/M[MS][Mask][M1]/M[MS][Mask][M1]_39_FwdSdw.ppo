#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1463;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4071 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4082 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4093 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[23u].w) + _459) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4104 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _487 = (_345.x * cbMtdParam._m0[9u].x) * ((_477 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376);
    float _488 = (_345.y * cbMtdParam._m0[9u].y) * ((_477 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377);
    float _489 = (_345.z * cbMtdParam._m0[9u].z) * ((_477 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378);
    float _493 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _487;
    float _496 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _488;
    float _499 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _489;
    float _507 = (((_487 - _493) * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) + _493) * 4.55000019073486328125;
    float _509 = (((_488 - _496) * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) + _496) * 4.55000019073486328125;
    float _511 = (((_489 - _499) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) + _499) * 4.55000019073486328125;
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _594 = _592.x;
    float _595 = _592.y;
    float _596 = _592.z;
    float _605 = ((_575.z - _596) * _477) + _596;
    float _608 = ((((_575.x - _594) * _477) + _594) * 2.0) + (-1.0);
    float _609 = ((((_575.y - _595) * _477) + _595) * 2.0) + (-1.0);
    float _610 = dot(vec2(_608, _609), vec2(_608, _609));
    float _4115 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _668 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _671 = ((isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : min(_668, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _680 = (_671 - ((((((_658 - _659) * cbMtdParam._m0[24u].z) + _659) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _671))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4136 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _688 = (_681 * ((_530.x * cbMtdParam._m0[18u].x) - _507)) + _507;
    float _689 = (_681 * ((_530.y * cbMtdParam._m0[18u].y) - _509)) + _509;
    float _690 = (_681 * ((_530.z * cbMtdParam._m0[18u].z) - _511)) + _511;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _704 = _702.x;
    float _705 = 1.0 - _704;
    float _730 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_704 - _705) * cbMtdParam._m0[24u].w) + _705) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4147 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _739 = ((((cbMtdParam._m0[10u].x - _688) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _731) + _688;
    float _740 = ((((cbMtdParam._m0[10u].y - _689) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _731) + _689;
    float _741 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _690)) * _731) + _690;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _769 = _767.x;
    float _786 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _769) * _477) + _769;
    float _790 = ((_753.x - _786) * cbMtdParam._m0[19u].z) + _786;
    float _792 = _790 - (_790 * _681);
    float _794 = _792 - (_792 * _731);
    float _799 = (((_550.z - _605) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _605;
    float _803 = ((_631.z - _799) * cbMtdParam._m0[19u].w) + _799;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _824 = (_817.x * 2.0) + (-1.0);
    float _825 = (_817.y * 2.0) + (-1.0);
    float _826 = dot(vec2(_824, _825), vec2(_824, _825));
    float _4158 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _834 = (_681 * (_817.z - _803)) + _803;
    float _837 = ((cbMtdParam._m0[23u].x - _834) * _731) + _834;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _864 = (_858.x * 2.0) + (-1.0);
    float _865 = (_858.y * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _4169 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _880 = (_608 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_550.x * 2.0) + (-1.0)))) + (((_631.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _881 = (_609 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_550.y * 2.0) + (-1.0)))) + (((_631.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _893 = (((_824 - _880) + (cbMtdParam._m0[21u].x * _880)) * _681) + _880;
    float _894 = (((_825 - _881) + (cbMtdParam._m0[21u].x * _881)) * _681) + _881;
    float _895 = (_681 * (sqrt(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) - _615)) + _615;
    float _906 = (((_864 - _893) + (_893 * cbMtdParam._m0[22u].z)) * _731) + _893;
    float _907 = (((_865 - _894) + (_894 * cbMtdParam._m0[22u].z)) * _731) + _894;
    float _908 = ((sqrt(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) - _895) * _731) + _895;
    float _910 = cbMtdParam._m0[22u].x + _631.w;
    float _913 = fma(_908, _257 * NORMAL.x, fma(_907, _264 * TANGENT.x, (_250 * _242) * _906));
    float _916 = fma(_908, _257 * NORMAL.y, fma(_907, _264 * TANGENT.y, (_250 * _243) * _906));
    float _919 = fma(_908, _257 * NORMAL.z, fma(_907, _264 * TANGENT.z, (_250 * _244) * _906));
    float _923 = inversesqrt(dot(vec3(_913, _916, _919), vec3(_913, _916, _919)));
    float _924 = _923 * _913;
    float _925 = _923 * _916;
    float _926 = _923 * _919;
    float _4180 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _927 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _4191 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _4202 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4213 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4224 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4235 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _932 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _946 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _996 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _986);
    float _997 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _986);
    float _998 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _986);
    float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
    float _1003 = _996 * _1002;
    float _1004 = _997 * _1002;
    float _1005 = _998 * _1002;
    float _1011 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1012 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1030 = fma(_926, cbSceneParam._m0[5u].z, fma(_925, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _924));
    float _1033 = fma(_926, cbSceneParam._m0[6u].z, fma(_925, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _924));
    float _1036 = fma(_926, cbSceneParam._m0[7u].z, fma(_925, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _924));
    uint _1050 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1056 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) * cbInstanceData._m0[_1050].x;
    float _1057 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * cbInstanceData._m0[_1050].y;
    float _1058 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * cbInstanceData._m0[_1050].z;
    float _4246 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _1060 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _1062 = 1.0 - _932;
    float _1063 = _1059 * _1062;
    float _1064 = _1060 * _1062;
    float _1065 = _1061 * _1062;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _932;
    float _1071 = (_1060 + (-0.039999999105930328369140625)) * _932;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _932;
    float _1073 = _1070 + 0.039999999105930328369140625;
    float _1075 = _1071 + 0.039999999105930328369140625;
    float _1076 = _1072 + 0.039999999105930328369140625;
    vec4 _1085 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1011, cbSceneParam._m0[86u].y * _1012));
    float _1089 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * TEXCOORD_5.w) * _1085.x;
    float _1090 = dot(vec3(_924, _925, _926), vec3(_1003, _1004, _1005));
    float _1093 = _1090 * 2.0;
    float _1097 = (_1093 * _924) - _1003;
    float _1098 = (_1093 * _925) - _1004;
    float _1099 = (_1093 * _926) - _1005;
    float _1103 = abs(dot(vec3(_1003, _1004, _1005), vec3(_924, _925, _926)));
    float _4279 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1105 = sqrt(_927);
    float _1118 = exp2((_1105 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1105 * 3.0));
    float _1124 = (1.0 - _1118) * ((_1105 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1125 = _1118 * _1105;
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1462;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1187 = fma(_1161, cbModelParam._m0[26u].z, fma(_1157, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153));
        float _1191 = fma(_1161, cbModelParam._m0[27u].z, fma(_1157, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153));
        float _1195 = fma(_1161, cbModelParam._m0[28u].z, fma(_1157, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153));
        float _1220 = _1153 + _924;
        float _1221 = _1157 + _925;
        float _1222 = _1161 + _926;
        float _1232 = fma(_1222, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1220)) - _1187;
        float _1233 = fma(_1222, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1220)) - _1191;
        float _1234 = fma(_1222, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1220)) - _1195;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1187 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1191 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[34u].z) + ((((((_1195 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1290 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1256.x + (-0.5));
        float _1292 = _1290 * (_1256.y + (-0.5));
        float _1293 = _1290 * (_1256.z + (-0.5));
        float _1300 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1263.x + (-0.5));
        float _1302 = _1300 * (_1263.y + (-0.5));
        float _1303 = _1300 * (_1263.z + (-0.5));
        float _1310 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1270.x + (-0.5));
        float _1312 = _1310 * (_1270.y + (-0.5));
        float _1313 = _1310 * (_1270.z + (-0.5));
        float _1320 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1277.x + (-0.5));
        float _1322 = _1320 * (_1277.y + (-0.5));
        float _1323 = _1320 * (_1277.z + (-0.5));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = _1291 * 0.5;
        float _1328 = _1301 * 0.5;
        float _1329 = _1311 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1344 = (dot(vec3(_924, _925, _926), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1354 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4327 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1356 + 1.0))) + _1361) * _1324;
        float _1371 = _1292 * 0.5;
        float _1372 = _1302 * 0.5;
        float _1373 = _1312 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_924, _925, _926), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1325 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4360 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1398 + 1.0))) + _1403) * _1325;
        float _1413 = _1293 * 0.5;
        float _1414 = _1303 * 0.5;
        float _1415 = _1313 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_924, _925, _926), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4393 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1440 + 1.0))) + _1445) * _1326;
        _1462 = _1293;
        _1464 = _1292;
        _1465 = _1291;
        _1466 = _1303;
        _1467 = _1302;
        _1468 = _1301;
        _1469 = _1313;
        _1470 = _1312;
        _1471 = _1311;
        _1472 = _1326;
        _1473 = _1325;
        _1474 = _1324;
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1476 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1463;
        _1464 = _1463;
        _1465 = _1463;
        _1466 = _1463;
        _1467 = _1463;
        _1468 = _1463;
        _1469 = _1463;
        _1470 = _1463;
        _1471 = _1463;
        _1472 = _1463;
        _1473 = _1463;
        _1474 = _1463;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1502 = fma(_1161, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1153));
        float _1506 = fma(_1161, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1153));
        float _1510 = fma(_1161, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1153));
        float _1533 = _1153 + _924;
        float _1534 = _1157 + _925;
        float _1535 = _1161 + _926;
        float _1545 = fma(_1535, cbModelParam._m0[30u].z, fma(_1534, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1533)) - _1502;
        float _1546 = fma(_1535, cbModelParam._m0[31u].z, fma(_1534, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1533)) - _1506;
        float _1547 = fma(_1535, cbModelParam._m0[32u].z, fma(_1534, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1533)) - _1510;
        float _1551 = inversesqrt(dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547)));
        float _1564 = ((_1551 * _1545) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1502 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1565 = ((_1551 * _1546) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1506 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1551 * _1547) / cbModelParam._m0[35u].z) + ((((((_1510 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1564, _1565, _1566), 0.0);
        float _1601 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1568.x + (-0.5));
        float _1603 = _1601 * (_1568.y + (-0.5));
        float _1604 = _1601 * (_1568.z + (-0.5));
        float _1611 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1575.x + (-0.5));
        float _1613 = _1611 * (_1575.y + (-0.5));
        float _1614 = _1611 * (_1575.z + (-0.5));
        float _1621 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1582.x + (-0.5));
        float _1623 = _1621 * (_1582.y + (-0.5));
        float _1624 = _1621 * (_1582.z + (-0.5));
        float _1631 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1589.x + (-0.5));
        float _1633 = _1631 * (_1589.y + (-0.5));
        float _1634 = _1631 * (_1589.z + (-0.5));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = _1602 * 0.5;
        float _1639 = _1612 * 0.5;
        float _1640 = _1622 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_924, _925, _926), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4456 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1665 + 1.0))) + _1670) * _1635;
        float _1680 = _1603 * 0.5;
        float _1681 = _1613 * 0.5;
        float _1682 = _1623 * 0.5;
        float _1683 = dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682));
        float _1688 = (_1683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1683);
        float _1696 = (dot(vec3(_924, _925, _926), vec3(_1688 * _1680, _1688 * _1681, _1688 * _1682)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1705 = sqrt(((_1681 * _1681) + (_1680 * _1680)) + (_1682 * _1682)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1707 = _1706 * 2.0;
        float _1711 = (1.0 - _1706) / (_1706 + 1.0);
        float _4489 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1721 = ((((1.0 - _1712) * (_1707 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1707 + 1.0))) + _1712) * _1636;
        float _1722 = _1604 * 0.5;
        float _1723 = _1614 * 0.5;
        float _1724 = _1624 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_924, _925, _926), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4500 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4511 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4522 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_1749 + 1.0))) + _1754) * _1637;
        _1771 = _1604;
        _1772 = _1603;
        _1773 = _1602;
        _1774 = _1614;
        _1775 = _1613;
        _1776 = _1612;
        _1777 = _1624;
        _1778 = _1623;
        _1779 = _1622;
        _1780 = _1637;
        _1781 = _1636;
        _1782 = _1635;
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
    }
    else
    {
        _1771 = _1463;
        _1772 = _1463;
        _1773 = _1463;
        _1774 = _1463;
        _1775 = _1463;
        _1776 = _1463;
        _1777 = _1463;
        _1778 = _1463;
        _1779 = _1463;
        _1780 = _1463;
        _1781 = _1463;
        _1782 = _1463;
        _1783 = 0.0;
        _1784 = 0.0;
        _1785 = 0.0;
    }
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1475)) + _1475;
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1476)) + _1476;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1477)) + _1477;
    float _1818 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1795));
    float _1839 = _1097 * 0.5;
    float _1840 = _1098 * 0.5;
    float _1841 = _1099 * 0.5;
    float _1842 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1845 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1848 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1882;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1855 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1462, _1466, _1469, _1472));
        float _1859 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1464, _1467, _1470, _1473));
        float _1863 = dot(vec4(_1839, _1840, _1841, 1.0), vec4(_1465, _1468, _1471, _1474));
        float _1870 = dot(vec4(cbModelParam._m0[39u]), vec4(_1839, _1840, _1841, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)), isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1870) ? 0.0 : (isnan(0.0) ? _1870 : max(0.0, _1870))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1893;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1884 = dot(vec4(cbModelParam._m0[40u]), vec4(_1839, _1840, _1841, 1.0));
        _1893 = dot(vec3(isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1884) ? 0.0 : (isnan(0.0) ? _1884 : max(0.0, _1884))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1893 = 1.0;
    }
    float _1897 = (_1893 * cbModelParam._m0[1u].x) + (_1882 * (1.0 - cbModelParam._m0[1u].x));
    float _1907 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _927);
    float _1908 = isnan(_1907) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1907 : min(cbModelParam._m0[25u].z, _1907));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1955 = fma(_1161, cbModelParam._m0[13u].z, fma(_1157, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1153)) + cbModelParam._m0[13u].w;
        float _1959 = fma(_1161, cbModelParam._m0[14u].z, fma(_1157, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1153)) + cbModelParam._m0[14u].w;
        float _1963 = fma(_1161, cbModelParam._m0[15u].z, fma(_1157, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1153)) + cbModelParam._m0[15u].w;
        float _1966 = fma(_1099, cbModelParam._m0[13u].z, fma(_1098, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1097));
        float _1969 = fma(_1099, cbModelParam._m0[14u].z, fma(_1098, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1097));
        float _1972 = fma(_1099, cbModelParam._m0[15u].z, fma(_1098, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1097));
        float _2000;
        if (_1966 > 0.0)
        {
            _2000 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2000 = frontier_phi_14_12_ladder;
        }
        float _2171;
        if (_1969 > 0.0)
        {
            _2171 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2171 = frontier_phi_23_19_ladder;
        }
        float _2466;
        if (_1972 > 0.0)
        {
            _2466 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2466 = frontier_phi_35_30_ladder;
        }
        float _2468 = isnan(_2171) ? _2000 : (isnan(_2000) ? _2171 : min(_2000, _2171));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1966) + _1955;
        float _2474 = (_2469 * _1969) + _1959;
        float _2475 = (_2469 * _1972) + _1963;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2476;
        float _2480 = _2476 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 > _2480) || ((_2474 < _2478) || ((_2473 < _2478) || (_2473 > _2480))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2475, cbModelParam._m0[9u].z, fma(_2474, cbModelParam._m0[9u].y, _2473 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2475, cbModelParam._m0[10u].z, fma(_2474, cbModelParam._m0[10u].y, _2473 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2475, cbModelParam._m0[11u].z, fma(_2474, cbModelParam._m0[11u].y, _2473 * cbModelParam._m0[11u].x))), _1908);
            frontier_phi_13_35_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _1988 = frontier_phi_13_35_ladder_2;
        _1990 = frontier_phi_13_35_ladder_1;
        _1992 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1097, _1098, _1099), _1908);
        _1988 = _1976.x * cbModelParam._m0[1u].y;
        _1990 = _1976.y * cbModelParam._m0[1u].y;
        _1992 = _1976.z * cbModelParam._m0[1u].y;
    }
    float _1996 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _927);
    float _1997 = isnan(_1996) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1996 : min(cbModelParam._m0[25u].w, _1996));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1161, cbModelParam._m0[21u].z, fma(_1157, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1153)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1161, cbModelParam._m0[22u].z, fma(_1157, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1153)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1161, cbModelParam._m0[23u].z, fma(_1157, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1153)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1099, cbModelParam._m0[21u].z, fma(_1098, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1097));
        float _2064 = fma(_1099, cbModelParam._m0[22u].z, fma(_1098, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1097));
        float _2067 = fma(_1099, cbModelParam._m0[23u].z, fma(_1098, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1097));
        float _2176;
        if (_2061 > 0.0)
        {
            _2176 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2176 = frontier_phi_25_21_ladder;
        }
        float _2493;
        if (_2064 > 0.0)
        {
            _2493 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2493 = frontier_phi_37_32_ladder;
        }
        float _2831;
        if (_2067 > 0.0)
        {
            _2831 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2831 = frontier_phi_47_44_ladder;
        }
        float _2833 = isnan(_2493) ? _2176 : (isnan(_2176) ? _2493 : min(_2176, _2493));
        float _2834 = isnan(_2831) ? _2833 : (isnan(_2833) ? _2831 : min(_2833, _2831));
        float _2838 = (_2834 * _2061) + _2050;
        float _2839 = (_2834 * _2064) + _2054;
        float _2840 = (_2834 * _2067) + _2058;
        float _2841 = _2834 * 9.9999997473787516355514526367188e-05;
        float _2842 = (-1.0) - _2841;
        float _2844 = _2841 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2840 > _2844) || ((_2840 < _2842) || ((_2839 > _2844) || ((_2839 < _2842) || ((_2838 < _2842) || (_2838 > _2844))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2840, cbModelParam._m0[17u].z, fma(_2839, cbModelParam._m0[17u].y, _2838 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2840, cbModelParam._m0[18u].z, fma(_2839, cbModelParam._m0[18u].y, _2838 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2840, cbModelParam._m0[19u].z, fma(_2839, cbModelParam._m0[19u].y, _2838 * cbModelParam._m0[19u].x))), _1997);
            frontier_phi_22_47_ladder = _2962.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2962.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2962.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_22_47_ladder_2;
        _2088 = frontier_phi_22_47_ladder_1;
        _2090 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1097, _1098, _1099), _1997);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2103 = (((_1124 * _1073) + _1125) * _1089) * ((cbModelParam._m0[1u].w * (_2086 - _1988)) + _1988);
    float _2105 = (((_1124 * _1075) + _1125) * _1089) * ((cbModelParam._m0[1u].w * (_2088 - _1990)) + _1990);
    float _2107 = (((_1124 * _1076) + _1125) * _1089) * ((cbModelParam._m0[1u].w * (_2090 - _1992)) + _1992);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    float _2150 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2154 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2158 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2162 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2163 = _2150 / _2162;
    float _2164 = _2154 / _2162;
    float _2165 = _2158 / _2162;
    float _2312;
    float _2313;
    float _2314;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2192 = ((uint(_2165 > cbSceneParam._m0[59u].y) + uint(_2165 > cbSceneParam._m0[59u].x)) + uint(_2165 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2193 = _2192 + 43u;
        uint _2201 = _2192 + 44u;
        uint _2209 = _2192 + 45u;
        uint _2217 = _2192 + 46u;
        float _2228 = fma(_2162, cbSceneParam._m0[_2193].w, fma(_2158, cbSceneParam._m0[_2193].z, fma(_2154, cbSceneParam._m0[_2193].y, _2150 * cbSceneParam._m0[_2193].x)));
        float _2232 = fma(_2162, cbSceneParam._m0[_2201].w, fma(_2158, cbSceneParam._m0[_2201].z, fma(_2154, cbSceneParam._m0[_2201].y, _2150 * cbSceneParam._m0[_2201].x)));
        float _2240 = fma(_2162, cbSceneParam._m0[_2217].w, fma(_2158, cbSceneParam._m0[_2217].z, fma(_2154, cbSceneParam._m0[_2217].y, _2150 * cbSceneParam._m0[_2217].x)));
        float _2245 = cbSceneParam._m0[33u].z * _2240;
        float _2247 = cbSceneParam._m0[33u].w * _2240;
        float _2250 = fma(_2162, cbSceneParam._m0[_2209].w, fma(_2158, cbSceneParam._m0[_2209].z, fma(_2154, cbSceneParam._m0[_2209].y, _2150 * cbSceneParam._m0[_2209].x))) / _2240;
        float _2298 = (cbSceneParam._m0[33u].x - sqrt(((_2164 * _2164) + (_2163 * _2163)) + (_2165 * _2165))) * cbSceneParam._m0[33u].y;
        float _4648 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2305 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 + _2228) / _2240, (_2247 + _2232) / _2240), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 + _2228) / _2240, (_2232 - _2245) / _2240), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 - _2245) / _2240, (_2232 - _2247) / _2240), _2250), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2228 - _2247) / _2240, (_2245 + _2232) / _2240), _2250), 0.0)).x), vec4(0.25)));
        _2312 = 1.0 - (_2305 * cbSceneParam._m0[34u].x);
        _2313 = 1.0 - (_2305 * cbSceneParam._m0[34u].y);
        _2314 = 1.0 - (_2305 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2312 = 1.0;
        _2313 = 1.0;
        _2314 = 1.0;
    }
    float _2378;
    float _2380;
    float _2382;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2366 = fma(_2162, cbSceneParam._m0[63u].w, fma(_2158, cbSceneParam._m0[63u].z, fma(_2154, cbSceneParam._m0[63u].y, _2150 * cbSceneParam._m0[63u].x)));
        float _2367 = fma(_2162, cbSceneParam._m0[60u].w, fma(_2158, cbSceneParam._m0[60u].z, fma(_2154, cbSceneParam._m0[60u].y, _2150 * cbSceneParam._m0[60u].x))) / _2366;
        float _2368 = fma(_2162, cbSceneParam._m0[61u].w, fma(_2158, cbSceneParam._m0[61u].z, fma(_2154, cbSceneParam._m0[61u].y, _2150 * cbSceneParam._m0[61u].x))) / _2366;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2367 >= cbSceneParam._m0[64u].x) && (_2368 >= cbSceneParam._m0[64u].y)) && (_2367 <= cbSceneParam._m0[64u].z)) && (_2368 <= cbSceneParam._m0[64u].w))
        {
            float _2506 = fma(_2162, cbSceneParam._m0[62u].w, fma(_2158, cbSceneParam._m0[62u].z, fma(_2154, cbSceneParam._m0[62u].y, _2150 * cbSceneParam._m0[62u].x))) / _2366;
            float _2510 = isnan(cbSceneParam._m0[41u].w) ? _2506 : (isnan(_2506) ? cbSceneParam._m0[41u].w : max(_2506, cbSceneParam._m0[41u].w));
            float _2553 = (cbSceneParam._m0[33u].x - sqrt(((_2164 * _2164) + (_2163 * _2163)) + (_2165 * _2165))) * cbSceneParam._m0[33u].y;
            float _4664 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
            float _2560 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2367, cbSceneParam._m0[33u].w + _2368), _2510), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2367, _2368 - cbSceneParam._m0[33u].z), _2510), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2367 - cbSceneParam._m0[33u].z, _2368 - cbSceneParam._m0[33u].w), _2510), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2367 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2368), _2510), 0.0)).x), vec4(0.25)));
            float _2564 = 1.0 - (_2560 * cbSceneParam._m0[34u].x);
            float _2565 = 1.0 - (_2560 * cbSceneParam._m0[34u].y);
            float _2566 = 1.0 - (_2560 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2566) ? _2314 : (isnan(_2314) ? _2566 : min(_2314, _2566));
            frontier_phi_34_33_ladder_1 = isnan(_2565) ? _2313 : (isnan(_2313) ? _2565 : min(_2313, _2565));
            frontier_phi_34_33_ladder_2 = isnan(_2564) ? _2312 : (isnan(_2312) ? _2564 : min(_2312, _2564));
        }
        else
        {
            frontier_phi_34_33_ladder = _2314;
            frontier_phi_34_33_ladder_1 = _2313;
            frontier_phi_34_33_ladder_2 = _2312;
        }
        _2378 = frontier_phi_34_33_ladder_2;
        _2380 = frontier_phi_34_33_ladder_1;
        _2382 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2378 = _2312;
        _2380 = _2313;
        _2382 = _2314;
    }
    uvec4 _2387 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2389 = _2387.x * 14u;
    uint _2390 = _2389 + 13u;
    float _2397 = _1089 + (-1.0);
    float _2402 = (cbLight._m0[_2390].x * _2397) + 1.0;
    float _2403 = (cbLight._m0[_2390].y * _2397) + 1.0;
    float _2404 = (cbLight._m0[_2390].z * _2397) + 1.0;
    float _2405 = (cbLight._m0[_2390].w * _2397) + 1.0;
    uint _2406 = _2389 + 5u;
    float _2412 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
    uint _2416 = _2389 + 4u;
    float _2425 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
    uint _2429 = _2389 | 1u;
    float _2440 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_924, _925, _926));
    float _2443 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_924, _925, _926));
    float _4700 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _4711 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2448 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * 0.3183098733425140380859375;
    float _2450 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * 0.3183098733425140380859375;
    float _2457 = ((cbLight._m0[_2406].x * _2412) * _2450) + (((cbLight._m0[_2416].x * _2378) * _2425) * _2448);
    float _2458 = ((_2412 * cbLight._m0[_2406].y) * _2450) + (((cbLight._m0[_2416].y * _2380) * _2425) * _2448);
    float _2459 = ((_2412 * cbLight._m0[_2406].z) * _2450) + (((cbLight._m0[_2416].z * _2382) * _2425) * _2448);
    uvec4 _2463 = floatBitsToUint(cbLight._m0[_2389 + 12u]);
    bool _2465 = _2463.x == 0u;
    float _2567;
    float _2569;
    float _2571;
    if (_2465)
    {
        _2567 = _2457;
        _2569 = _2458;
        _2571 = _2459;
    }
    else
    {
        uint _2575 = _2389 + 6u;
        float _2591 = (dot(vec3(cbLight._m0[_2389 + 2u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2592 = _2591 * _2591;
        float _4722 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2593 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2594 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2567 = (((cbLight._m0[_2575].x * 0.3183098733425140380859375) * _2593) * _2594) + _2457;
        _2569 = (((cbLight._m0[_2575].y * 0.3183098733425140380859375) * _2593) * _2594) + _2458;
        _2571 = (((cbLight._m0[_2575].z * 0.3183098733425140380859375) * _2593) * _2594) + _2459;
    }
    bool _2574 = _2463.y == 0u;
    float _2629;
    float _2631;
    float _2633;
    if (_2574)
    {
        _2629 = _2567;
        _2631 = _2569;
        _2633 = _2571;
    }
    else
    {
        uint _2802 = _2389 + 7u;
        float _2818 = (dot(vec3(cbLight._m0[_2389 + 3u].xyz), vec3(_924, _925, _926)) * 0.5) + 0.5;
        float _2819 = _2818 * _2818;
        float _4738 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2820 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
        float _2821 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
        _2629 = (((cbLight._m0[_2802].x * 0.3183098733425140380859375) * _2820) * _2821) + _2567;
        _2631 = (((cbLight._m0[_2802].y * 0.3183098733425140380859375) * _2820) * _2821) + _2569;
        _2633 = (((cbLight._m0[_2802].z * 0.3183098733425140380859375) * _2820) * _2821) + _2571;
    }
    uint _2636 = _2389 + 8u;
    float _2649 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _927) * 0.949999988079071044921875);
    float _2650 = _2649 * _2649;
    float _2651 = cbLight._m0[_2389].x + _1003;
    float _2652 = cbLight._m0[_2389].y + _1004;
    float _2653 = cbLight._m0[_2389].z + _1005;
    float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
    float _2658 = _2657 * _2651;
    float _2659 = _2657 * _2652;
    float _2660 = _2657 * _2653;
    float _2661 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2389].xyz));
    float _4754 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2664 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
    float _4765 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _2665 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2666 = dot(vec3(_924, _925, _926), vec3(_2658, _2659, _2660));
    float _4776 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2669 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2670 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2658, _2659, _2660));
    float _4787 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2674 = _2650 * _2650;
    float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
    float _2686 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2687 = 0.959999978542327880859375 - _1070;
    float _2689 = 0.959999978542327880859375 - _1071;
    float _2690 = 0.959999978542327880859375 - _1072;
    float _2697 = 1.0 - _2650;
    float _2708 = (0.5 / (((_2665 * ((_2664 * _2697) + _2650)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2697) + _2650) * _2664))) * _2664;
    float _4798 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2710 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
    uint _2724 = _2389 + 9u;
    float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _927) * 0.949999988079071044921875);
    float _2736 = _2735 * _2735;
    float _2737 = cbLight._m0[_2429].x + _1003;
    float _2738 = cbLight._m0[_2429].y + _1004;
    float _2739 = cbLight._m0[_2429].z + _1005;
    float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
    float _2744 = _2743 * _2737;
    float _2745 = _2743 * _2738;
    float _2746 = _2743 * _2739;
    float _2747 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2429].xyz));
    float _4809 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2750 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
    float _2751 = dot(vec3(_924, _925, _926), vec3(_2744, _2745, _2746));
    float _4820 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2754 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
    float _2755 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2744, _2745, _2746));
    float _4831 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
    float _2759 = _2736 * _2736;
    float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
    float _2770 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
    float _2777 = 1.0 - _2736;
    float _2787 = (0.5 / (((_2665 * ((_2750 * _2777) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2777) + _2736) * _2750))) * _2750;
    float _4842 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2789 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
    float _2799 = (((((_2770 * _2687) + _1073) * cbLight._m0[_2724].x) * _2789) * _2412) + ((((cbLight._m0[_2636].x * _2378) * ((_2686 * _2687) + _1073)) * _2710) * _2425);
    float _2800 = (((((_2770 * _2689) + _1075) * cbLight._m0[_2724].y) * _2789) * _2412) + ((((cbLight._m0[_2636].y * _2380) * ((_2686 * _2689) + _1075)) * _2710) * _2425);
    float _2801 = (((((_2770 * _2690) + _1076) * cbLight._m0[_2724].z) * _2789) * _2412) + ((((cbLight._m0[_2636].z * _2382) * ((_2686 * _2690) + _1076)) * _2710) * _2425);
    float _2857;
    float _2859;
    float _2861;
    if (_2465)
    {
        _2857 = _2799;
        _2859 = _2800;
        _2861 = _2801;
    }
    else
    {
        uint _2863 = _2389 + 2u;
        uint _2867 = _2389 + 10u;
        float _2881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2863].w)) * _927) * 0.949999988079071044921875);
        float _2882 = _2881 * _2881;
        float _2883 = cbLight._m0[_2863].x + _1003;
        float _2884 = cbLight._m0[_2863].y + _1004;
        float _2885 = cbLight._m0[_2863].z + _1005;
        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
        float _2890 = _2889 * _2883;
        float _2891 = _2889 * _2884;
        float _2892 = _2889 * _2885;
        float _2893 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2863].xyz));
        float _4853 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2896 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2897 = dot(vec3(_924, _925, _926), vec3(_2890, _2891, _2892));
        float _4864 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
        float _2901 = dot(vec3(cbLight._m0[_2863].xyz), vec3(_2890, _2891, _2892));
        float _4875 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2905 = _2882 * _2882;
        float _2909 = ((_2900 * _2900) * (_2905 + (-1.0))) + 1.0;
        float _2916 = exp2(log2(1.0 - (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) * 5.0);
        float _2923 = 1.0 - _2882;
        float _2933 = (0.5 / (((_2665 * ((_2896 * _2923) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2923) + _2882) * _2896))) * _2896;
        float _4886 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2935 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2905 / ((_2909 * _2909) * 3.141590118408203125));
        float _2936 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2857 = (((((_2916 * _2687) + _1073) * cbLight._m0[_2867].x) * _2935) * _2936) + _2799;
        _2859 = (((((_2916 * _2689) + _1075) * cbLight._m0[_2867].y) * _2935) * _2936) + _2800;
        _2861 = (((((_2916 * _2690) + _1076) * cbLight._m0[_2867].z) * _2935) * _2936) + _2801;
    }
    float _2967;
    float _2969;
    float _2971;
    if (_2574)
    {
        _2967 = _2857;
        _2969 = _2859;
        _2971 = _2861;
    }
    else
    {
        uint _2978 = _2389 + 3u;
        uint _2982 = _2389 + 11u;
        float _2996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2978].w)) * _927) * 0.949999988079071044921875);
        float _2997 = _2996 * _2996;
        float _2998 = cbLight._m0[_2978].x + _1003;
        float _2999 = cbLight._m0[_2978].y + _1004;
        float _3000 = cbLight._m0[_2978].z + _1005;
        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
        float _3005 = _3004 * _2998;
        float _3006 = _3004 * _2999;
        float _3007 = _3004 * _3000;
        float _3008 = dot(vec3(_924, _925, _926), vec3(cbLight._m0[_2978].xyz));
        float _4902 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
        float _3011 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
        float _3012 = dot(vec3(_924, _925, _926), vec3(_3005, _3006, _3007));
        float _4913 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        float _3015 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _3016 = dot(vec3(cbLight._m0[_2978].xyz), vec3(_3005, _3006, _3007));
        float _4924 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        float _3020 = _2997 * _2997;
        float _3024 = ((_3015 * _3015) * (_3020 + (-1.0))) + 1.0;
        float _3031 = exp2(log2(1.0 - (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0)))) * 5.0);
        float _3038 = 1.0 - _2997;
        float _3048 = (0.5 / (((_2665 * ((_3011 * _3038) + _2997)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _3038) + _2997) * _3011))) * _3011;
        float _4935 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3050 = (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_3020 / ((_3024 * _3024) * 3.141590118408203125));
        float _3051 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
        _2967 = (((((_3031 * _2687) + _1073) * cbLight._m0[_2982].x) * _3050) * _3051) + _2857;
        _2969 = (((((_3031 * _2689) + _1075) * cbLight._m0[_2982].y) * _3050) * _3051) + _2859;
        _2971 = (((((_3031 * _2690) + _1076) * cbLight._m0[_2982].z) * _3050) * _3051) + _2861;
    }
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_2387.y == 0u)
    {
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.x;
        uint _3084 = uint((float(_3072.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1012) / _3073))) + floor(float(uint(cbSceneParam._m0[85u].x * _1011) / _3073)));
        float _3094 = (log2(_2165 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3095 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
        uint _3098 = uint(isnan(14.0) ? _3095 : (isnan(_3095) ? 14.0 : min(_3095, 14.0)));
        uvec4 _3103 = texelFetch(g_lightClusterGridBuffer, int(((_3098 << 2u) + (_3084 << 6u)) >> 2u));
        uint _3104 = _3103.x;
        uint _3105 = _3072.z;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        float _3194;
        if (((((1u << ((_3105 >> 4u) & 15u)) + 4294967295u) & _3104) == 0u) || ((_3105 & 240u) == 0u))
        {
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
        }
        else
        {
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3195;
            float _3329 = 0.0;
            float _3330 = 0.0;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            uint _3335 = 0u;
            uint _3344;
            bool _3345;
            for (;;)
            {
                _3344 = texelFetch(g_lightClassification, int((((_3098 << 5u) + (_3084 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                _3345 = _3344 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3345)
                {
                    frontier_phi_66_pred = _3334;
                    frontier_phi_66_pred_1 = _3333;
                    frontier_phi_66_pred_2 = _3332;
                    frontier_phi_66_pred_3 = _3331;
                    frontier_phi_66_pred_4 = _3330;
                    frontier_phi_66_pred_5 = _3329;
                }
                else
                {
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    uint _3459;
                    _3453 = _3329;
                    _3454 = _3330;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3344;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    for (;;)
                    {
                        uint _3463 = uint(findLSB(_3459)) + (_3335 << 5u);
                        uint _3460 = (_3459 + 4294967295u) & _3459;
                        uint _3465 = _3463 * 48u;
                        vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3485 = (_3463 * 48u) + 4u;
                        vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3485)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 3u)).x));
                        uint _3504 = (_3463 * 48u) + 8u;
                        vec3 _3515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3504)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 2u)).x));
                        float _3519 = _3479.x - _2163;
                        float _3520 = _3479.y - _2164;
                        float _3521 = _3479.z - _2165;
                        float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                        float _3525 = inversesqrt(_3522);
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3529 = dot(vec3(_1030, _1033, _1036), vec3(_3526, _3527, _3528));
                        float _3534 = 1.0 - (_3522 * _3479.w);
                        float _4961 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3536 = sqrt(_3522) * _3498.w;
                        float _3539 = 1.39999997615814208984375 / (_3536 + 1.39999997615814208984375);
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3529) + _3540;
                        float _3546 = _3536 * _3536;
                        float _3550 = ((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3535) / ((_3546 * 0.699999988079071044921875) + 1.0);
                        float _3554 = (-0.0) - _2163;
                        float _3555 = (-0.0) - _2164;
                        float _3556 = (-0.0) - _2165;
                        float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                        float _3561 = _3560 * _3554;
                        float _3562 = _3560 * _3555;
                        float _3563 = _3560 * _3556;
                        float _3570 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                        float _3571 = 1.0 - _1105;
                        float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                        float _3579 = _3578 * _3578;
                        float _3580 = _3579 * _3579;
                        float _3581 = _3561 + _3526;
                        float _3582 = _3562 + _3527;
                        float _3583 = _3563 + _3528;
                        float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                        float _3591 = dot(vec3(_1030, _1033, _1036), vec3(_3561, _3562, _3563));
                        float _4977 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3594 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                        float _3595 = dot(vec3(_1030, _1033, _1036), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                        float _4988 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3598 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                        float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                        float _3603 = _3539 * _3579;
                        float _3604 = _3603 * _3603;
                        float _3607 = ((1.0 - _3604) * _3529) + _3604;
                        float _4999 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3608 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                        float _3609 = 1.0 - _3579;
                        float _3619 = (0.5 / (((_3608 * ((_3594 * _3609) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3579) * _3594))) * _3608;
                        float _5010 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3630 = (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) / ((_3602 * _3602) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125))) * _3535;
                        _3388 = (_3550 * _3498.x) + _3456;
                        _3389 = (_3550 * _3498.y) + _3457;
                        _3390 = (_3550 * _3498.z) + _3458;
                        _3385 = (_3630 * _3515.x) + _3453;
                        _3386 = (_3630 * _3515.y) + _3454;
                        _3387 = (_3630 * _3515.z) + _3455;
                        if (_3460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3453 = _3385;
                            _3454 = _3386;
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3460;
                        }
                    }
                    frontier_phi_66_pred = _3390;
                    frontier_phi_66_pred_1 = _3389;
                    frontier_phi_66_pred_2 = _3388;
                    frontier_phi_66_pred_3 = _3387;
                    frontier_phi_66_pred_4 = _3386;
                    frontier_phi_66_pred_5 = _3385;
                }
                _3195 = frontier_phi_66_pred;
                _3193 = frontier_phi_66_pred_1;
                _3191 = frontier_phi_66_pred_2;
                _3189 = frontier_phi_66_pred_3;
                _3187 = frontier_phi_66_pred_4;
                _3185 = frontier_phi_66_pred_5;
                uint _3336 = _3335 + 1u;
                if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3329 = _3185;
                    _3330 = _3187;
                    _3331 = _3189;
                    _3332 = _3191;
                    _3333 = _3193;
                    _3334 = _3195;
                    _3335 = _3336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
        }
        uvec4 _3198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3199 = _3198.z;
        uint _3201 = (_3199 >> 8u) & 15u;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        if (((4294967295u << _3201) & _3104) == 0u)
        {
            _3297 = _3184;
            _3299 = _3186;
            _3301 = _3188;
            _3303 = _3190;
            _3305 = _3192;
            _3307 = _3194;
        }
        else
        {
            float _3322 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
            float _3323 = _3322 * _2163;
            float _3324 = _3322 * _2164;
            float _3325 = _3322 * _2165;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3201 < ((_3199 >> 12u) & 15u))
            {
                float _3298;
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3436 = _3184;
                float _3437 = _3186;
                float _3438 = _3188;
                float _3439 = _3190;
                float _3440 = _3192;
                float _3441 = _3194;
                uint _3442 = _3201;
                uint _3451;
                bool _3452;
                for (;;)
                {
                    _3451 = texelFetch(g_lightClassification, int((((_3098 << 5u) + (_3084 << 9u)) + (_3442 << 2u)) >> 2u)).x;
                    _3452 = _3451 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3452)
                    {
                        frontier_phi_72_pred = _3441;
                        frontier_phi_72_pred_1 = _3440;
                        frontier_phi_72_pred_2 = _3439;
                        frontier_phi_72_pred_3 = _3438;
                        frontier_phi_72_pred_4 = _3437;
                        frontier_phi_72_pred_5 = _3436;
                    }
                    else
                    {
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3648 = _3436;
                        float _3649 = _3437;
                        float _3650 = _3438;
                        float _3651 = _3439;
                        float _3652 = _3440;
                        float _3653 = _3441;
                        uint _3654 = _3451;
                        uint _3655;
                        vec4 _3680;
                        float _3681;
                        vec4 _3696;
                        vec3 _3708;
                        vec4 _3723;
                        vec4 _3738;
                        float _3784;
                        bool _3785;
                        for (;;)
                        {
                            uint _3665 = ((_3442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3654));
                            _3655 = (_3654 + 4294967295u) & _3654;
                            uint _3667 = _3665 * 40u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            _3681 = _3680.w;
                            uint _3683 = (_3665 * 40u) + 4u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3665 * 40u) + 8u;
                            _3708 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x));
                            uint _3710 = (_3665 * 40u) + 16u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3725 = (_3665 * 40u) + 20u;
                            _3738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3725 + 3u)).x));
                            uint _3740 = (_3665 * 40u) + 24u;
                            vec4 _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            uint _3759 = (_3665 * 40u) + 28u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            _3784 = fma(_2165, _3772.z, fma(_2164, _3772.y, _3772.x * _2163)) + _3772.w;
                            _3785 = !((fma(_2165, _3753.z, fma(_2164, _3753.y, _3753.x * _2163)) + _3753.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3785)
                            {
                                float _3812 = _3680.x - _2163;
                                float _3813 = _3680.y - _2164;
                                float _3814 = _3680.z - _2165;
                                float _3815 = dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814));
                                float _3818 = inversesqrt(_3815);
                                float _3819 = _3818 * _3812;
                                float _3820 = _3818 * _3813;
                                float _3821 = _3818 * _3814;
                                float _3825 = 1.0 - (_3815 / (_3681 * _3681));
                                float _5021 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3830 = sqrt(_3815) * _3696.w;
                                float _3832 = 1.39999997615814208984375 / (_3830 + 1.39999997615814208984375);
                                float _3833 = _3832 * _3832;
                                float _3836 = ((1.0 - _3833) * dot(vec3(_3819, _3820, _3821), vec3(_1030, _1033, _1036))) + _3833;
                                float _3839 = _3830 * _3830;
                                float _3843 = (fma(_2165, _3723.z, fma(_2164, _3723.y, _3723.x * _2163)) + _3723.w) / _3784;
                                float _3844 = (fma(_2165, _3738.z, fma(_2164, _3738.y, _3738.x * _2163)) + _3738.w) / _3784;
                                float _3848 = 1.0 - dot(vec2(_3843, _3844), vec2(_3843, _3844));
                                float _5037 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3849 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                                float _3850 = _3849 * (((isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0))) * _3826) / ((_3839 * 0.699999988079071044921875) + 1.0));
                                float _3862 = exp2(log2(1.0 / ((_3839 * 3.5) + 5.0)) * 0.25);
                                float _3863 = 1.0 - _1105;
                                float _3870 = sqrt(1.0 - ((1.0 - (_3863 * _3863)) * (1.0 - (_3862 * _3862))));
                                float _3871 = _3870 * _3870;
                                float _3872 = _3871 * _3871;
                                float _3873 = _3819 - _3323;
                                float _3874 = _3820 - _3324;
                                float _3875 = _3821 - _3325;
                                float _3879 = inversesqrt(dot(vec3(_3873, _3874, _3875), vec3(_3873, _3874, _3875)));
                                float _3883 = dot(vec3(_1030, _1033, _1036), vec3((-0.0) - _3323, (-0.0) - _3324, (-0.0) - _3325));
                                float _5048 = isnan(0.0) ? _3883 : (isnan(_3883) ? 0.0 : max(_3883, 0.0));
                                float _3886 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                                float _3887 = dot(vec3(_1030, _1033, _1036), vec3(_3879 * _3873, _3879 * _3874, _3879 * _3875));
                                float _5059 = isnan(0.0) ? _3887 : (isnan(_3887) ? 0.0 : max(_3887, 0.0));
                                float _3890 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                                float _3894 = ((_3890 * _3890) * (_3872 + (-1.0))) + 1.0;
                                float _3895 = _3832 * _3871;
                                float _3896 = _3895 * _3895;
                                float _3902 = ((1.0 - _3896) * dot(vec3(_1030, _1033, _1036), vec3(_3819, _3820, _3821))) + _3896;
                                float _5070 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3903 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                                float _3904 = 1.0 - _3871;
                                float _3914 = (0.5 / (((_3903 * ((_3886 * _3904) + _3871)) + 9.9999999392252902907785028219223e-09) + (((_3903 * _3904) + _3871) * _3886))) * _3903;
                                float _5081 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3924 = (_3849 * _3826) * (((_3872 * 3.1415927410125732421875) * (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) / ((_3894 * _3894) * ((_3839 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3850 * _3696.y;
                                frontier_phi_78_pred_1 = _3850 * _3696.x;
                                frontier_phi_78_pred_2 = _3924 * _3708.z;
                                frontier_phi_78_pred_3 = _3924 * _3708.y;
                                frontier_phi_78_pred_4 = _3924 * _3708.x;
                                frontier_phi_78_pred_5 = _3850 * _3696.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3932 = frontier_phi_78_pred;
                            _3931 = frontier_phi_78_pred_1;
                            _3930 = frontier_phi_78_pred_2;
                            _3929 = frontier_phi_78_pred_3;
                            _3928 = frontier_phi_78_pred_4;
                            _3933 = frontier_phi_78_pred_5;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            _3637 = _3930 + _3650;
                            if (_3655 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3655;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3640;
                        frontier_phi_72_pred_1 = _3639;
                        frontier_phi_72_pred_2 = _3638;
                        frontier_phi_72_pred_3 = _3637;
                        frontier_phi_72_pred_4 = _3636;
                        frontier_phi_72_pred_5 = _3635;
                    }
                    _3308 = frontier_phi_72_pred;
                    _3306 = frontier_phi_72_pred_1;
                    _3304 = frontier_phi_72_pred_2;
                    _3302 = frontier_phi_72_pred_3;
                    _3300 = frontier_phi_72_pred_4;
                    _3298 = frontier_phi_72_pred_5;
                    uint _3443 = _3442 + 1u;
                    if (_3443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3436 = _3298;
                        _3437 = _3300;
                        _3438 = _3302;
                        _3439 = _3304;
                        _3440 = _3306;
                        _3441 = _3308;
                        _3442 = _3443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3308;
                frontier_phi_60_61_ladder_1 = _3306;
                frontier_phi_60_61_ladder_2 = _3302;
                frontier_phi_60_61_ladder_3 = _3300;
                frontier_phi_60_61_ladder_4 = _3298;
                frontier_phi_60_61_ladder_5 = _3304;
            }
            else
            {
                frontier_phi_60_61_ladder = _3194;
                frontier_phi_60_61_ladder_1 = _3192;
                frontier_phi_60_61_ladder_2 = _3188;
                frontier_phi_60_61_ladder_3 = _3186;
                frontier_phi_60_61_ladder_4 = _3184;
                frontier_phi_60_61_ladder_5 = _3190;
            }
            _3297 = frontier_phi_60_61_ladder_4;
            _3299 = frontier_phi_60_61_ladder_3;
            _3301 = frontier_phi_60_61_ladder_2;
            _3303 = frontier_phi_60_61_ladder_5;
            _3305 = frontier_phi_60_61_ladder_1;
            _3307 = frontier_phi_60_61_ladder;
        }
        float _3312 = isnan(1.0) ? _1089 : (isnan(_1089) ? 1.0 : min(_1089, 1.0));
        _3117 = (_3312 * _3303) + _2629;
        _3119 = (_3312 * _3305) + _2631;
        _3121 = (_3312 * _3307) + _2633;
        _3123 = ((_3297 * _1073) * _3312) + _2967;
        _3125 = ((_3299 * _1075) * _3312) + _2969;
        _3127 = ((_3301 * _1076) * _3312) + _2971;
    }
    else
    {
        _3117 = _2629;
        _3119 = _2631;
        _3121 = _2633;
        _3123 = _2967;
        _3125 = _2969;
        _3127 = _2971;
    }
    float _5097 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _5108 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _5119 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    uint _3147 = _289 + 6u;
    float _3155 = _1011 / cbSceneParam._m0[86u].x;
    float _3156 = _1012 / cbSceneParam._m0[86u].y;
    vec4 _3170 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, (log2((isnan(cbSceneParam._m0[77u].w) ? _946 : (isnan(_946) ? cbSceneParam._m0[77u].w : min(_946, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3172 = _3170.x;
    float _3173 = _3170.y;
    float _3174 = _3170.z;
    float _3175 = _3170.w;
    float _3247;
    float _3249;
    float _3251;
    float _3253;
    if (_946 > cbSceneParam._m0[78u].w)
    {
        float _3209 = isnan(_946) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _946 : min(cbSceneParam._m0[80u].w, _946));
        float _3210 = _3209 / _946;
        float _3221 = _3210 * _996;
        float _3222 = _997 * _3210;
        float _3223 = (-0.0) - _3222;
        float _3225 = _3210 * _998;
        float _3227 = (cbSceneParam._m0[77u].w * _3223) / _3209;
        float _3228 = _3227 + cbSceneParam._m0[79u].w;
        float _3229 = cbSceneParam._m0[79u].w - _3222;
        float _3235 = sqrt(((_3221 * _3221) + (_3222 * _3222)) + (_3225 * _3225));
        float _3238 = (1.0 - (cbSceneParam._m0[77u].w / _3209)) * _3235;
        float _3243 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3245 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3398;
        if (abs((_3223 - _3227) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3398 = ((((_3228 > 0.0) ? exp2(_3243 * _3228) : (2.0 - exp2(_3245 * _3228))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3238;
        }
        else
        {
            float _3358 = 1.0 / cbSceneParam._m0[80u].x;
            float _3359 = isnan(_3229) ? _3228 : (isnan(_3228) ? _3229 : max(_3228, _3229));
            float _3360 = isnan(_3229) ? _3228 : (isnan(_3228) ? _3229 : min(_3228, _3229));
            float _3369 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : min(_3359, 0.0));
            float _3370 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : min(_3360, 0.0));
            _3398 = ((abs(_3235 / _3223) * cbSceneParam._m0[80u].y) * ((((_3369 - _3370) * 2.0) - ((exp2(_3243 * (isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0)))) - exp2(_3243 * (isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))))) * _3358)) - ((exp2(_3245 * _3369) - exp2(_3245 * _3370)) * _3358))) + (_3238 * cbSceneParam._m0[80u].z);
        }
        vec4 _3400 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, 1.0), 0.0);
        float _3409 = exp2((_3398 * (-1.44269502162933349609375)) * (1.0 - _3400.w));
        float _3410 = log2(_3409);
        float _3426 = log2(_3175);
        _3247 = (exp2(_3426 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].x)) * _3400.x) / cbSceneParam._m0[78u].x)) + _3172;
        _3249 = (exp2(_3426 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].y)) * _3400.y) / cbSceneParam._m0[78u].y)) + _3173;
        _3251 = (exp2(_3426 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].z)) * _3400.z) / cbSceneParam._m0[78u].z)) + _3174;
        _3253 = _3409 * _3175;
    }
    else
    {
        _3247 = _3172;
        _3249 = _3173;
        _3251 = _3174;
        _3253 = _3175;
    }
    float _3265 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3266 = _3265 == 3.0;
    float _3267 = log2(_3253);
    float _3274 = exp2(_3267 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3117 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1089))) + ((_3123 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1897)) * cbPerFrame._m0[3u].x));
    float _3275 = exp2(_3267 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_3119 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1089))) + ((_3125 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1897)) * cbPerFrame._m0[3u].x));
    float _3276 = exp2(_3267 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0))) * (_3121 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1089))) + ((_3127 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1897)) * cbPerFrame._m0[3u].x));
    float _3285 = (_3265 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3285 * (_3266 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3247)));
    SV_Target.y = _3285 * (_3266 ? _3275 : (_3275 + (cbSceneParam._m0[72u].w * _3249)));
    SV_Target.z = _3285 * (_3266 ? _3276 : (_3276 + (cbSceneParam._m0[72u].w * _3251)));
    SV_Target.w = cbInstanceData._m0[_3147].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3147].w;
}


