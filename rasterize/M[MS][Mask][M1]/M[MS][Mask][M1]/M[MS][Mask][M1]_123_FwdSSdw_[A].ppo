#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1590;
float _3992;
float _3993;
float _3994;
float _3995;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4004 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4015 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4026 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = _345.x * cbMtdParam._m0[11u].x;
    float _351 = _345.y * cbMtdParam._m0[11u].y;
    float _352 = _345.z * cbMtdParam._m0[11u].z;
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _390.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4037 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _464 = (_457 * ((_371.x * cbMtdParam._m0[12u].x) - _350)) + _350;
    float _465 = (_457 * ((_371.y * cbMtdParam._m0[12u].y) - _351)) + _351;
    float _466 = (_457 * ((_371.z * cbMtdParam._m0[12u].z) - _352)) + _352;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _390.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4048 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _577 = _575.x;
    float _587 = dot(vec4(_577, _575.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _599 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _390.z) * 2.0) - ((((_577 - _587) * cbMtdParam._m0[23u].w) + _587) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4059 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _607 = (_600 * ((_558.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _608 = (_600 * ((_558.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _609 = (_600 * ((_558.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _613 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _607;
    float _616 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _608;
    float _619 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _609;
    float _626 = ((_607 - _613) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) + _613;
    float _627 = ((_608 - _616) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) + _616;
    float _628 = ((_609 - _619) * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) + _619;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _689 = _687.x;
    float _690 = _687.y;
    float _691 = _687.z;
    float _698 = ((_670.x - _689) * _457) + _689;
    float _699 = ((_670.y - _690) * _457) + _690;
    float _700 = ((_670.z - _691) * _457) + _691;
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _723 = ((_712.x - _698) * _530) + _698;
    float _724 = ((_712.y - _699) * _530) + _699;
    float _725 = ((_712.z - _700) * _530) + _700;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _750 = ((_737.z - _725) * _600) + _725;
    float _753 = ((((_737.x - _723) * _600) + _723) * 2.0) + (-1.0);
    float _754 = ((((_737.y - _724) * _600) + _724) * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _4070 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _760 = sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))));
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _790 = (_753 + ((((_645.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_778.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _791 = (_754 + ((((_645.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_778.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _794 = fma(_760, _255, fma(_791, _262, _790 * _248));
    float _797 = fma(_760, _256, fma(_791, _263, _790 * _249));
    float _800 = fma(_760, _257, fma(_791, _264, _790 * _250));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _833 = _831.x;
    float _834 = 1.0 - _833;
    float _842 = (cbMtdParam._m0[19u].x + dot(vec4(_804 * _794, _804 * _797, _804 * _800, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_833 - _834) * cbMtdParam._m0[24u].z) + _834) * cbMtdParam._m0[21u].z);
    float _4081 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _843 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _850 = (_843 * (cbMtdParam._m0[17u].x - _626)) + _626;
    float _851 = (_843 * (cbMtdParam._m0[17u].y - _627)) + _627;
    float _852 = (_843 * (cbMtdParam._m0[17u].z - _628)) + _628;
    vec4 _878 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _880 = _878.x;
    float _898 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _880) * _457) + _880;
    float _915 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _898) * _530) + _898;
    float _933 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _915) * _600) + _915;
    float _937 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _933) * cbMtdParam._m0[19u].z) + _933;
    float _939 = _937 - (_937 * _843);
    float _944 = (((_645.z - _750) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _750;
    float _948 = ((_778.z - _944) * cbMtdParam._m0[19u].w) + _944;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _968 = (_961.x * 2.0) + (-1.0);
    float _969 = (_961.y * 2.0) + (-1.0);
    float _970 = dot(vec2(_968, _969), vec2(_968, _969));
    float _4092 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _978 = ((_961.z - _948) * _843) + _948;
    float _988 = ((sqrt(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) - _760) * _843) + _760;
    float _991 = (((_968 - _790) * _843) + _790) + (cbMtdParam._m0[21u].x * _790);
    float _992 = (((_969 - _791) * _843) + _791) + (cbMtdParam._m0[21u].x * _791);
    float _996 = cbMtdParam._m0[22u].x + _778.w;
    float _999 = fma(_988, _255, fma(_992, _262, _991 * _248));
    float _1002 = fma(_988, _256, fma(_992, _263, _991 * _249));
    float _1005 = fma(_988, _257, fma(_992, _264, _991 * _250));
    float _1009 = inversesqrt(dot(vec3(_999, _1002, _1005), vec3(_999, _1002, _1005)));
    float _1010 = _1009 * _999;
    float _1011 = _1009 * _1002;
    float _1012 = _1009 * _1005;
    float _4103 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _1013 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _4125 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4136 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4147 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4158 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _1018 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _1032 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1082 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1072);
    float _1083 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1072);
    float _1084 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1072);
    float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
    float _1089 = _1082 * _1088;
    float _1090 = _1083 * _1088;
    float _1091 = _1084 * _1088;
    vec4 _1096 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1098 = _1096.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1270 = sqrt(((_1082 * _1082) + (_1083 * _1083)) + (_1084 * _1084));
        float _1276 = (cbMatDynParam._m0[5u].x * _1270) + cbMatDynParam._m0[5u].y;
        float _4169 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1281 = (cbMatDynParam._m0[5u].z * _1270) + cbMatDynParam._m0[5u].w;
        float _4180 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) - _1277)) + _1277) < ((_1098 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1109 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1110 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1128 = fma(_1012, cbSceneParam._m0[5u].z, fma(_1011, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1010));
    float _1131 = fma(_1012, cbSceneParam._m0[6u].z, fma(_1011, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1010));
    float _1134 = fma(_1012, cbSceneParam._m0[7u].z, fma(_1011, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1010));
    uint _1147 = _288 + 9u;
    uint _1148 = _1147 + uint(cbMatDynParam._m0[0u].w);
    float _1154 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_1148].x;
    float _1155 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * cbInstanceData._m0[_1148].y;
    float _1156 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * cbInstanceData._m0[_1148].z;
    float _4191 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1157 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _4202 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _1159 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _1160 = 1.0 - _1018;
    float _1161 = _1157 * _1160;
    float _1162 = _1158 * _1160;
    float _1163 = _1159 * _1160;
    float _1168 = (_1157 + (-0.039999999105930328369140625)) * _1018;
    float _1169 = (_1158 + (-0.039999999105930328369140625)) * _1018;
    float _1170 = (_1159 + (-0.039999999105930328369140625)) * _1018;
    float _1171 = _1168 + 0.039999999105930328369140625;
    float _1173 = _1169 + 0.039999999105930328369140625;
    float _1174 = _1170 + 0.039999999105930328369140625;
    vec4 _1183 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1109, cbSceneParam._m0[86u].y * _1110));
    float _1187 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * TEXCOORD_5.w) * _1183.x;
    float _1188 = dot(vec3(_1010, _1011, _1012), vec3(_1089, _1090, _1091));
    float _1191 = _1188 * 2.0;
    float _1195 = (_1191 * _1010) - _1089;
    float _1196 = (_1191 * _1011) - _1090;
    float _1197 = (_1191 * _1012) - _1091;
    float _1201 = abs(dot(vec3(_1089, _1090, _1091), vec3(_1010, _1011, _1012)));
    float _4224 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1203 = sqrt(_1013);
    float _1216 = exp2((_1203 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1203 * 3.0));
    float _1222 = (1.0 - _1216) * ((_1203 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1223 = _1216 * _1203;
    float _1251 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1255 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1259 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1589;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1314 = fma(_1259, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1251));
        float _1318 = fma(_1259, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1251));
        float _1322 = fma(_1259, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1251));
        float _1347 = _1251 + _1010;
        float _1348 = _1255 + _1011;
        float _1349 = _1259 + _1012;
        float _1359 = fma(_1349, cbModelParam._m0[26u].z, fma(_1348, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1347)) - _1314;
        float _1360 = fma(_1349, cbModelParam._m0[27u].z, fma(_1348, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1347)) - _1318;
        float _1361 = fma(_1349, cbModelParam._m0[28u].z, fma(_1348, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1347)) - _1322;
        float _1365 = inversesqrt(dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361)));
        float _1378 = ((_1365 * _1359) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1314 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1379 = ((_1365 * _1360) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1318 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1380 = ((_1365 * _1361) / cbModelParam._m0[34u].z) + ((((((_1322 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1378, _1379, _1380), 0.0);
        float _1417 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1383.x + (-0.5));
        float _1419 = _1417 * (_1383.y + (-0.5));
        float _1420 = _1417 * (_1383.z + (-0.5));
        float _1427 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1390.x + (-0.5));
        float _1429 = _1427 * (_1390.y + (-0.5));
        float _1430 = _1427 * (_1390.z + (-0.5));
        float _1437 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1397.x + (-0.5));
        float _1439 = _1437 * (_1397.y + (-0.5));
        float _1440 = _1437 * (_1397.z + (-0.5));
        float _1447 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1404.x + (-0.5));
        float _1449 = _1447 * (_1404.y + (-0.5));
        float _1450 = _1447 * (_1404.z + (-0.5));
        float _1451 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = _1418 * 0.5;
        float _1455 = _1428 * 0.5;
        float _1456 = _1438 * 0.5;
        float _1457 = dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456));
        float _1462 = (_1457 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1457);
        float _1471 = (dot(vec3(_1010, _1011, _1012), vec3(_1462 * _1454, _1462 * _1455, _1462 * _1456)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1481 = sqrt(((_1455 * _1455) + (_1454 * _1454)) + (_1456 * _1456)) / (_1451 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4272 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1483 + 1.0))) + _1488) * _1451;
        float _1498 = _1419 * 0.5;
        float _1499 = _1429 * 0.5;
        float _1500 = _1439 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_1010, _1011, _1012), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4305 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1525 + 1.0))) + _1530) * _1452;
        float _1540 = _1420 * 0.5;
        float _1541 = _1430 * 0.5;
        float _1542 = _1440 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_1010, _1011, _1012), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4338 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1567 + 1.0))) + _1572) * _1453;
        _1589 = _1420;
        _1591 = _1419;
        _1592 = _1418;
        _1593 = _1430;
        _1594 = _1429;
        _1595 = _1428;
        _1596 = _1440;
        _1597 = _1439;
        _1598 = _1438;
        _1599 = _1453;
        _1600 = _1452;
        _1601 = _1451;
        _1602 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1603 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1604 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
    }
    else
    {
        _1589 = _1590;
        _1591 = _1590;
        _1592 = _1590;
        _1593 = _1590;
        _1594 = _1590;
        _1595 = _1590;
        _1596 = _1590;
        _1597 = _1590;
        _1598 = _1590;
        _1599 = _1590;
        _1600 = _1590;
        _1601 = _1590;
        _1602 = 0.0;
        _1603 = 0.0;
        _1604 = 0.0;
    }
    float _1899;
    float _1900;
    float _1901;
    float _1902;
    float _1903;
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1630 = fma(_1259, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251));
        float _1634 = fma(_1259, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251));
        float _1638 = fma(_1259, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251));
        float _1661 = _1251 + _1010;
        float _1662 = _1255 + _1011;
        float _1663 = _1259 + _1012;
        float _1673 = fma(_1663, cbModelParam._m0[30u].z, fma(_1662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1661)) - _1630;
        float _1674 = fma(_1663, cbModelParam._m0[31u].z, fma(_1662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1661)) - _1634;
        float _1675 = fma(_1663, cbModelParam._m0[32u].z, fma(_1662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1661)) - _1638;
        float _1679 = inversesqrt(dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675)));
        float _1692 = ((_1679 * _1673) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1630 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1693 = ((_1679 * _1674) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1634 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1694 = ((_1679 * _1675) / cbModelParam._m0[35u].z) + ((((((_1638 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1692, _1693, _1694), 0.0);
        float _1729 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1696.x + (-0.5));
        float _1731 = _1729 * (_1696.y + (-0.5));
        float _1732 = _1729 * (_1696.z + (-0.5));
        float _1739 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1740 = _1739 * (_1703.x + (-0.5));
        float _1741 = _1739 * (_1703.y + (-0.5));
        float _1742 = _1739 * (_1703.z + (-0.5));
        float _1749 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1750 = _1749 * (_1710.x + (-0.5));
        float _1751 = _1749 * (_1710.y + (-0.5));
        float _1752 = _1749 * (_1710.z + (-0.5));
        float _1759 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1717.x + (-0.5));
        float _1761 = _1759 * (_1717.y + (-0.5));
        float _1762 = _1759 * (_1717.z + (-0.5));
        float _1763 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1764 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1765 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1766 = _1730 * 0.5;
        float _1767 = _1740 * 0.5;
        float _1768 = _1750 * 0.5;
        float _1769 = dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768));
        float _1774 = (_1769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1769);
        float _1782 = (dot(vec3(_1010, _1011, _1012), vec3(_1774 * _1766, _1774 * _1767, _1774 * _1768)) + 1.0) * 0.5;
        float _4379 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1791 = sqrt(((_1767 * _1767) + (_1766 * _1766)) + (_1768 * _1768)) / (_1763 + 9.9999997473787516355514526367188e-06);
        float _4390 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1792 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1793 = _1792 * 2.0;
        float _1797 = (1.0 - _1792) / (_1792 + 1.0);
        float _4401 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1807 = ((((1.0 - _1798) * (_1793 + 2.0)) * exp2(log2(isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_1793 + 1.0))) + _1798) * _1763;
        float _1808 = _1731 * 0.5;
        float _1809 = _1741 * 0.5;
        float _1810 = _1751 * 0.5;
        float _1811 = dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810));
        float _1816 = (_1811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1811);
        float _1824 = (dot(vec3(_1010, _1011, _1012), vec3(_1816 * _1808, _1816 * _1809, _1816 * _1810)) + 1.0) * 0.5;
        float _4412 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1833 = sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810)) / (_1764 + 9.9999997473787516355514526367188e-06);
        float _4423 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _1835 = _1834 * 2.0;
        float _1839 = (1.0 - _1834) / (_1834 + 1.0);
        float _4434 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1849 = ((((1.0 - _1840) * (_1835 + 2.0)) * exp2(log2(isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_1835 + 1.0))) + _1840) * _1764;
        float _1850 = _1732 * 0.5;
        float _1851 = _1742 * 0.5;
        float _1852 = _1752 * 0.5;
        float _1853 = dot(vec3(_1850, _1851, _1852), vec3(_1850, _1851, _1852));
        float _1858 = (_1853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1853);
        float _1866 = (dot(vec3(_1010, _1011, _1012), vec3(_1858 * _1850, _1858 * _1851, _1858 * _1852)) + 1.0) * 0.5;
        float _4445 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1875 = sqrt(((_1851 * _1851) + (_1850 * _1850)) + (_1852 * _1852)) / (_1765 + 9.9999997473787516355514526367188e-06);
        float _4456 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1877 = _1876 * 2.0;
        float _1881 = (1.0 - _1876) / (_1876 + 1.0);
        float _4467 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1891 = ((((1.0 - _1882) * (_1877 + 2.0)) * exp2(log2(isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_1877 + 1.0))) + _1882) * _1765;
        _1899 = _1732;
        _1900 = _1731;
        _1901 = _1730;
        _1902 = _1742;
        _1903 = _1741;
        _1904 = _1740;
        _1905 = _1752;
        _1906 = _1751;
        _1907 = _1750;
        _1908 = _1765;
        _1909 = _1764;
        _1910 = _1763;
        _1911 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
        _1912 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)));
        _1913 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)));
    }
    else
    {
        _1899 = _1590;
        _1900 = _1590;
        _1901 = _1590;
        _1902 = _1590;
        _1903 = _1590;
        _1904 = _1590;
        _1905 = _1590;
        _1906 = _1590;
        _1907 = _1590;
        _1908 = _1590;
        _1909 = _1590;
        _1910 = _1590;
        _1911 = 0.0;
        _1912 = 0.0;
        _1913 = 0.0;
    }
    float _1923 = (cbModelParam._m0[1u].x * (_1911 - _1602)) + _1602;
    float _1924 = (cbModelParam._m0[1u].x * (_1912 - _1603)) + _1603;
    float _1925 = (cbModelParam._m0[1u].x * (_1913 - _1604)) + _1604;
    float _1946 = fma(_1925, cbSceneParam._m0[89u].z, fma(_1924, cbSceneParam._m0[89u].y, _1923 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1925, cbSceneParam._m0[90u].z, fma(_1924, cbSceneParam._m0[90u].y, _1923 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1925, cbSceneParam._m0[91u].z, fma(_1924, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1923));
    float _1967 = _1195 * 0.5;
    float _1968 = _1196 * 0.5;
    float _1969 = _1197 * 0.5;
    float _1970 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1901, _1904, _1907, _1910));
    float _1973 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1900, _1903, _1906, _1909));
    float _1976 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1899, _1902, _1905, _1908));
    float _2010;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1983 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1589, _1593, _1596, _1599));
        float _1987 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1591, _1594, _1597, _1600));
        float _1991 = dot(vec4(_1967, _1968, _1969, 1.0), vec4(_1592, _1595, _1598, _1601));
        float _1998 = dot(vec4(cbModelParam._m0[39u]), vec4(_1967, _1968, _1969, 1.0));
        _2010 = dot(vec3(isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)), isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1998) ? 0.0 : (isnan(0.0) ? _1998 : max(0.0, _1998))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2010 = 1.0;
    }
    float _2021;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2012 = dot(vec4(cbModelParam._m0[40u]), vec4(_1967, _1968, _1969, 1.0));
        _2021 = dot(vec3(isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2012) ? 0.0 : (isnan(0.0) ? _2012 : max(0.0, _2012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2021 = 1.0;
    }
    float _2025 = (_2021 * cbModelParam._m0[1u].x) + (_2010 * (1.0 - cbModelParam._m0[1u].x));
    float _2035 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1013);
    float _2036 = isnan(_2035) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2035 : min(cbModelParam._m0[25u].z, _2035));
    float _2116;
    float _2118;
    float _2120;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2083 = fma(_1259, cbModelParam._m0[13u].z, fma(_1255, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251)) + cbModelParam._m0[13u].w;
        float _2087 = fma(_1259, cbModelParam._m0[14u].z, fma(_1255, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251)) + cbModelParam._m0[14u].w;
        float _2091 = fma(_1259, cbModelParam._m0[15u].z, fma(_1255, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251)) + cbModelParam._m0[15u].w;
        float _2094 = fma(_1197, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1195));
        float _2097 = fma(_1197, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1195));
        float _2100 = fma(_1197, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1195));
        float _2128;
        if (_2094 > 0.0)
        {
            _2128 = abs((1.0 - _2083) / _2094);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2094 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2083 + 1.0) / _2094);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2128 = frontier_phi_17_15_ladder;
        }
        float _2352;
        if (_2097 > 0.0)
        {
            _2352 = abs((1.0 - _2087) / _2097);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2087 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2352 = frontier_phi_26_22_ladder;
        }
        float _2609;
        if (_2100 > 0.0)
        {
            _2609 = abs((1.0 - _2091) / _2100);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2091 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2609 = frontier_phi_38_33_ladder;
        }
        float _2611 = isnan(_2352) ? _2128 : (isnan(_2128) ? _2352 : min(_2128, _2352));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _2094) + _2083;
        float _2617 = (_2612 * _2097) + _2087;
        float _2618 = (_2612 * _2100) + _2091;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2619;
        float _2623 = _2619 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 > _2623) || ((_2617 < _2621) || ((_2616 < _2621) || (_2616 > _2623))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2618, cbModelParam._m0[9u].z, fma(_2617, cbModelParam._m0[9u].y, _2616 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2618, cbModelParam._m0[10u].z, fma(_2617, cbModelParam._m0[10u].y, _2616 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2618, cbModelParam._m0[11u].z, fma(_2617, cbModelParam._m0[11u].y, _2616 * cbModelParam._m0[11u].x))), _2036);
            frontier_phi_16_38_ladder = _2746.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2746.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2746.x * cbModelParam._m0[1u].y;
        }
        _2116 = frontier_phi_16_38_ladder_2;
        _2118 = frontier_phi_16_38_ladder_1;
        _2120 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2104 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1195, _1196, _1197), _2036);
        _2116 = _2104.x * cbModelParam._m0[1u].y;
        _2118 = _2104.y * cbModelParam._m0[1u].y;
        _2120 = _2104.z * cbModelParam._m0[1u].y;
    }
    float _2124 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1013);
    float _2125 = isnan(_2124) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2124 : min(cbModelParam._m0[25u].w, _2124));
    float _2215;
    float _2217;
    float _2219;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2179 = fma(_1259, cbModelParam._m0[21u].z, fma(_1255, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251)) + cbModelParam._m0[21u].w;
        float _2183 = fma(_1259, cbModelParam._m0[22u].z, fma(_1255, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251)) + cbModelParam._m0[22u].w;
        float _2187 = fma(_1259, cbModelParam._m0[23u].z, fma(_1255, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251)) + cbModelParam._m0[23u].w;
        float _2190 = fma(_1197, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1195));
        float _2193 = fma(_1197, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1195));
        float _2196 = fma(_1197, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1195));
        float _2357;
        if (_2190 > 0.0)
        {
            _2357 = abs((1.0 - _2179) / _2190);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2190 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2179 + 1.0) / _2190);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2357 = frontier_phi_28_24_ladder;
        }
        float _2636;
        if (_2193 > 0.0)
        {
            _2636 = abs((1.0 - _2183) / _2193);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2193 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2183 + 1.0) / _2193);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2636 = frontier_phi_40_35_ladder;
        }
        float _2849;
        if (_2196 > 0.0)
        {
            _2849 = abs((1.0 - _2187) / _2196);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2187 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2849 = frontier_phi_49_46_ladder;
        }
        float _2851 = isnan(_2636) ? _2357 : (isnan(_2357) ? _2636 : min(_2357, _2636));
        float _2852 = isnan(_2849) ? _2851 : (isnan(_2851) ? _2849 : min(_2851, _2849));
        float _2856 = (_2852 * _2190) + _2179;
        float _2857 = (_2852 * _2193) + _2183;
        float _2858 = (_2852 * _2196) + _2187;
        float _2859 = _2852 * 9.9999997473787516355514526367188e-05;
        float _2860 = (-1.0) - _2859;
        float _2862 = _2859 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2858 > _2862) || ((_2858 < _2860) || ((_2857 > _2862) || ((_2857 < _2860) || ((_2856 < _2860) || (_2856 > _2862))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3057 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2858, cbModelParam._m0[17u].z, fma(_2857, cbModelParam._m0[17u].y, _2856 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2858, cbModelParam._m0[18u].z, fma(_2857, cbModelParam._m0[18u].y, _2856 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2858, cbModelParam._m0[19u].z, fma(_2857, cbModelParam._m0[19u].y, _2856 * cbModelParam._m0[19u].x))), _2125);
            frontier_phi_25_49_ladder = _3057.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3057.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3057.x * cbModelParam._m0[1u].z;
        }
        _2215 = frontier_phi_25_49_ladder_2;
        _2217 = frontier_phi_25_49_ladder_1;
        _2219 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2199 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1195, _1196, _1197), _2125);
        _2215 = _2199.x * cbModelParam._m0[1u].z;
        _2217 = _2199.y * cbModelParam._m0[1u].z;
        _2219 = _2199.z * cbModelParam._m0[1u].z;
    }
    float _2232 = (((_1222 * _1171) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2215 - _2116)) + _2116);
    float _2234 = (((_1222 * _1173) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2217 - _2118)) + _2118);
    float _2236 = (((_1222 * _1174) + _1223) * _1187) * ((cbModelParam._m0[1u].w * (_2219 - _2120)) + _2120);
    float _2239 = fma(_2236, cbSceneParam._m0[89u].z, fma(_2234, cbSceneParam._m0[89u].y, _2232 * cbSceneParam._m0[89u].x));
    float _2242 = fma(_2236, cbSceneParam._m0[90u].z, fma(_2234, cbSceneParam._m0[90u].y, _2232 * cbSceneParam._m0[90u].x));
    float _2245 = fma(_2236, cbSceneParam._m0[91u].z, fma(_2234, cbSceneParam._m0[91u].y, _2232 * cbSceneParam._m0[91u].x));
    vec4 _2253 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1109, _1110));
    float _2255 = _2253.w;
    float _2267 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2255);
    float _2268 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2255);
    float _2269 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2255);
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _1187 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2311 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2315 = _2275 | 1u;
    float _2326 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_1010, _1011, _1012));
    float _2329 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_1010, _1011, _1012));
    float _4603 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _4614 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2334 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * 0.3183098733425140380859375;
    float _2336 = (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * 0.3183098733425140380859375;
    float _2343 = ((cbLight._m0[_2292].x * _2298) * _2336) + (((cbLight._m0[_2302].x * _2267) * _2311) * _2334);
    float _2344 = ((_2298 * cbLight._m0[_2292].y) * _2336) + (((cbLight._m0[_2302].y * _2268) * _2311) * _2334);
    float _2345 = ((_2298 * cbLight._m0[_2292].z) * _2336) + (((cbLight._m0[_2302].z * _2269) * _2311) * _2334);
    uvec4 _2349 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2351 = _2349.x == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2351)
    {
        _2362 = _2343;
        _2364 = _2344;
        _2366 = _2345;
    }
    else
    {
        uint _2370 = _2275 + 6u;
        float _2386 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_1010, _1011, _1012)) * 0.5) + 0.5;
        float _2387 = _2386 * _2386;
        float _4625 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2388 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _2389 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2362 = (((cbLight._m0[_2370].x * 0.3183098733425140380859375) * _2388) * _2389) + _2343;
        _2364 = (((cbLight._m0[_2370].y * 0.3183098733425140380859375) * _2388) * _2389) + _2344;
        _2366 = (((cbLight._m0[_2370].z * 0.3183098733425140380859375) * _2388) * _2389) + _2345;
    }
    bool _2369 = _2349.y == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2369)
    {
        _2407 = _2362;
        _2409 = _2364;
        _2411 = _2366;
    }
    else
    {
        uint _2580 = _2275 + 7u;
        float _2596 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_1010, _1011, _1012)) * 0.5) + 0.5;
        float _2597 = _2596 * _2596;
        float _4641 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2598 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2599 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2407 = (((cbLight._m0[_2580].x * 0.3183098733425140380859375) * _2598) * _2599) + _2362;
        _2409 = (((cbLight._m0[_2580].y * 0.3183098733425140380859375) * _2598) * _2599) + _2364;
        _2411 = (((cbLight._m0[_2580].z * 0.3183098733425140380859375) * _2598) * _2599) + _2366;
    }
    uint _2414 = _2275 + 8u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _1013) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2275].x + _1089;
    float _2430 = cbLight._m0[_2275].y + _1090;
    float _2431 = cbLight._m0[_2275].z + _1091;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2275].xyz));
    float _4657 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _4668 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _2443 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
    float _2444 = dot(vec3(_1010, _1011, _1012), vec3(_2436, _2437, _2438));
    float _4679 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2436, _2437, _2438));
    float _4690 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2428 * _2428;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) * 5.0);
    float _2465 = 0.959999978542327880859375 - _1168;
    float _2467 = 0.959999978542327880859375 - _1169;
    float _2468 = 0.959999978542327880859375 - _1170;
    float _2475 = 1.0 - _2428;
    float _2486 = (0.5 / (((_2443 * ((_2442 * _2475) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2475) + _2428) * _2442))) * _2442;
    float _4701 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    uint _2502 = _2275 + 9u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _1013) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2315].x + _1089;
    float _2516 = cbLight._m0[_2315].y + _1090;
    float _2517 = cbLight._m0[_2315].z + _1091;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2315].xyz));
    float _4712 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2529 = dot(vec3(_1010, _1011, _1012), vec3(_2522, _2523, _2524));
    float _4723 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2533 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2522, _2523, _2524));
    float _4734 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2537 = _2514 * _2514;
    float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
    float _2555 = 1.0 - _2514;
    float _2565 = (0.5 / (((_2443 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2555) + _2514) * _2528))) * _2528;
    float _4745 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
    float _2577 = (((((_2548 * _2465) + _1171) * cbLight._m0[_2502].x) * _2567) * _2298) + ((((cbLight._m0[_2414].x * _2267) * ((_2464 * _2465) + _1171)) * _2488) * _2311);
    float _2578 = (((((_2548 * _2467) + _1173) * cbLight._m0[_2502].y) * _2567) * _2298) + ((((cbLight._m0[_2414].y * _2268) * ((_2464 * _2467) + _1173)) * _2488) * _2311);
    float _2579 = (((((_2548 * _2468) + _1174) * cbLight._m0[_2502].z) * _2567) * _2298) + ((((cbLight._m0[_2414].z * _2269) * ((_2464 * _2468) + _1174)) * _2488) * _2311);
    float _2641;
    float _2643;
    float _2645;
    if (_2351)
    {
        _2641 = _2577;
        _2643 = _2578;
        _2645 = _2579;
    }
    else
    {
        uint _2647 = _2275 + 2u;
        uint _2651 = _2275 + 10u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _1013) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _1089;
        float _2668 = cbLight._m0[_2647].y + _1090;
        float _2669 = cbLight._m0[_2647].z + _1091;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2647].xyz));
        float _4756 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
        float _2681 = dot(vec3(_1010, _1011, _1012), vec3(_2674, _2675, _2676));
        float _4767 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4778 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2700 = exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0);
        float _2707 = 1.0 - _2666;
        float _2717 = (0.5 / (((_2443 * ((_2680 * _2707) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2707) + _2666) * _2680))) * _2680;
        float _4789 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2719 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2720 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2641 = (((((_2700 * _2465) + _1171) * cbLight._m0[_2651].x) * _2719) * _2720) + _2577;
        _2643 = (((((_2700 * _2467) + _1173) * cbLight._m0[_2651].y) * _2719) * _2720) + _2578;
        _2645 = (((((_2700 * _2468) + _1174) * cbLight._m0[_2651].z) * _2719) * _2720) + _2579;
    }
    float _2755;
    float _2757;
    float _2759;
    if (_2369)
    {
        _2755 = _2641;
        _2757 = _2643;
        _2759 = _2645;
    }
    else
    {
        uint _2766 = _2275 + 3u;
        uint _2770 = _2275 + 11u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _1013) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _1089;
        float _2787 = cbLight._m0[_2766].y + _1090;
        float _2788 = cbLight._m0[_2766].z + _1091;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_1010, _1011, _1012), vec3(cbLight._m0[_2766].xyz));
        float _4805 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _2800 = dot(vec3(_1010, _1011, _1012), vec3(_2793, _2794, _2795));
        float _4816 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4827 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2819 = exp2(log2(1.0 - (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) * 5.0);
        float _2826 = 1.0 - _2785;
        float _2836 = (0.5 / (((_2443 * ((_2799 * _2826) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2826) + _2785) * _2799))) * _2799;
        float _4838 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2838 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2839 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2755 = (((((_2819 * _2465) + _1171) * cbLight._m0[_2770].x) * _2838) * _2839) + _2641;
        _2757 = (((((_2819 * _2467) + _1173) * cbLight._m0[_2770].y) * _2838) * _2839) + _2643;
        _2759 = (((((_2819 * _2468) + _1174) * cbLight._m0[_2770].z) * _2838) * _2839) + _2645;
    }
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    if (_2273.y == 0u)
    {
        float _2914 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2915 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2914;
        float _2916 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2914;
        float _2917 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2914;
        uvec4 _2929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2930 = _2929.x;
        uint _2941 = uint((float(_2929.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1110) / _2930))) + floor(float(uint(cbSceneParam._m0[85u].x * _1109) / _2930)));
        float _2951 = (log2(_2917 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2952 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        uint _2955 = uint(isnan(14.0) ? _2952 : (isnan(_2952) ? 14.0 : min(_2952, 14.0)));
        uvec4 _2960 = texelFetch(g_lightClusterGridBuffer, int(((_2955 << 2u) + (_2941 << 6u)) >> 2u));
        uint _2961 = _2960.x;
        uint _2962 = _2929.z;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        if (((((1u << ((_2962 >> 4u) & 15u)) + 4294967295u) & _2961) == 0u) || ((_2962 & 240u) == 0u))
        {
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
        }
        else
        {
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            float _3220 = 0.0;
            uint _3221 = 0u;
            uint _3230;
            bool _3231;
            for (;;)
            {
                _3230 = texelFetch(g_lightClassification, int((((_2955 << 5u) + (_2941 << 9u)) + (_3221 << 2u)) >> 2u)).x;
                _3231 = _3230 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3231)
                {
                    frontier_phi_66_pred = _3215;
                    frontier_phi_66_pred_1 = _3220;
                    frontier_phi_66_pred_2 = _3219;
                    frontier_phi_66_pred_3 = _3218;
                    frontier_phi_66_pred_4 = _3217;
                    frontier_phi_66_pred_5 = _3216;
                }
                else
                {
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    uint _3366;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3230;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    for (;;)
                    {
                        uint _3370 = uint(findLSB(_3366)) + (_3221 << 5u);
                        uint _3367 = (_3366 + 4294967295u) & _3366;
                        uint _3372 = _3370 * 48u;
                        vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3392 = (_3370 * 48u) + 4u;
                        vec4 _3405 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 3u)).x));
                        uint _3411 = (_3370 * 48u) + 8u;
                        vec3 _3422 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3411)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3411 + 2u)).x));
                        float _3426 = _3386.x - _2915;
                        float _3427 = _3386.y - _2916;
                        float _3428 = _3386.z - _2917;
                        float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                        float _3432 = inversesqrt(_3429);
                        float _3433 = _3432 * _3426;
                        float _3434 = _3432 * _3427;
                        float _3435 = _3432 * _3428;
                        float _3436 = dot(vec3(_1128, _1131, _1134), vec3(_3433, _3434, _3435));
                        float _3441 = 1.0 - (_3429 * _3386.w);
                        float _4864 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                        float _3443 = sqrt(_3429) * _3405.w;
                        float _3446 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                        float _3447 = _3446 * _3446;
                        float _3450 = ((1.0 - _3447) * _3436) + _3447;
                        float _3453 = _3443 * _3443;
                        float _3457 = ((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3442) / ((_3453 * 0.699999988079071044921875) + 1.0);
                        float _3461 = (-0.0) - _2915;
                        float _3462 = (-0.0) - _2916;
                        float _3463 = (-0.0) - _2917;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3468 = _3467 * _3461;
                        float _3469 = _3467 * _3462;
                        float _3470 = _3467 * _3463;
                        float _3478 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                        float _3479 = 1.0 - _1203;
                        float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                        float _3487 = _3486 * _3486;
                        float _3488 = _3487 * _3487;
                        float _3489 = _3468 + _3433;
                        float _3490 = _3469 + _3434;
                        float _3491 = _3470 + _3435;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3499 = dot(vec3(_1128, _1131, _1134), vec3(_3468, _3469, _3470));
                        float _4880 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                        float _3503 = dot(vec3(_1128, _1131, _1134), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                        float _4891 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                        float _3511 = _3446 * _3487;
                        float _3512 = _3511 * _3511;
                        float _3515 = ((1.0 - _3512) * _3436) + _3512;
                        float _4902 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3516 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                        float _3517 = 1.0 - _3487;
                        float _3527 = (0.5 / (((_3516 * ((_3502 * _3517) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3487) * _3502))) * _3516;
                        float _4913 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3538 = (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) / ((_3510 * _3510) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125))) * _3442;
                        _3290 = (_3457 * _3405.x) + _3363;
                        _3291 = (_3457 * _3405.y) + _3364;
                        _3292 = (_3457 * _3405.z) + _3365;
                        _3287 = (_3538 * _3422.x) + _3360;
                        _3288 = (_3538 * _3422.y) + _3361;
                        _3289 = (_3538 * _3422.z) + _3362;
                        if (_3367 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3367;
                        }
                    }
                    frontier_phi_66_pred = _3287;
                    frontier_phi_66_pred_1 = _3292;
                    frontier_phi_66_pred_2 = _3291;
                    frontier_phi_66_pred_3 = _3290;
                    frontier_phi_66_pred_4 = _3289;
                    frontier_phi_66_pred_5 = _3288;
                }
                _3063 = frontier_phi_66_pred;
                _3073 = frontier_phi_66_pred_1;
                _3071 = frontier_phi_66_pred_2;
                _3069 = frontier_phi_66_pred_3;
                _3067 = frontier_phi_66_pred_4;
                _3065 = frontier_phi_66_pred_5;
                uint _3222 = _3221 + 1u;
                if (_3222 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3215 = _3063;
                    _3216 = _3065;
                    _3217 = _3067;
                    _3218 = _3069;
                    _3219 = _3071;
                    _3220 = _3073;
                    _3221 = _3222;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
        }
        uvec4 _3076 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3077 = _3076.z;
        uint _3079 = (_3077 >> 8u) & 15u;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        if (((4294967295u << _3079) & _2961) == 0u)
        {
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
        }
        else
        {
            float _3208 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
            float _3209 = _3208 * _2915;
            float _3210 = _3208 * _2916;
            float _3211 = _3208 * _2917;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3079 < ((_3077 >> 12u) & 15u))
            {
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3343 = _3062;
                float _3344 = _3064;
                float _3345 = _3066;
                float _3346 = _3068;
                float _3347 = _3070;
                float _3348 = _3072;
                uint _3349 = _3079;
                uint _3358;
                bool _3359;
                for (;;)
                {
                    _3358 = texelFetch(g_lightClassification, int((((_2955 << 5u) + (_2941 << 9u)) + (_3349 << 2u)) >> 2u)).x;
                    _3359 = _3358 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3359)
                    {
                        frontier_phi_77_pred = _3348;
                        frontier_phi_77_pred_1 = _3347;
                        frontier_phi_77_pred_2 = _3346;
                        frontier_phi_77_pred_3 = _3345;
                        frontier_phi_77_pred_4 = _3344;
                        frontier_phi_77_pred_5 = _3343;
                    }
                    else
                    {
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3849;
                        float _3850;
                        float _3565 = _3343;
                        float _3566 = _3344;
                        float _3567 = _3345;
                        float _3568 = _3346;
                        float _3569 = _3347;
                        float _3570 = _3348;
                        uint _3571 = _3358;
                        uint _3572;
                        vec4 _3597;
                        float _3598;
                        vec4 _3613;
                        vec3 _3625;
                        vec4 _3640;
                        vec4 _3655;
                        float _3701;
                        bool _3702;
                        for (;;)
                        {
                            uint _3582 = ((_3349 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3571));
                            _3572 = (_3571 + 4294967295u) & _3571;
                            uint _3584 = _3582 * 40u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            _3598 = _3597.w;
                            uint _3600 = (_3582 * 40u) + 4u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3615 = (_3582 * 40u) + 8u;
                            _3625 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x));
                            uint _3627 = (_3582 * 40u) + 16u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3582 * 40u) + 20u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3582 * 40u) + 24u;
                            vec4 _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3676 = (_3582 * 40u) + 28u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            _3701 = fma(_2917, _3689.z, fma(_2916, _3689.y, _3689.x * _2915)) + _3689.w;
                            _3702 = !((fma(_2917, _3670.z, fma(_2916, _3670.y, _3670.x * _2915)) + _3670.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3702)
                            {
                                float _3729 = _3597.x - _2915;
                                float _3730 = _3597.y - _2916;
                                float _3731 = _3597.z - _2917;
                                float _3732 = dot(vec3(_3729, _3730, _3731), vec3(_3729, _3730, _3731));
                                float _3735 = inversesqrt(_3732);
                                float _3736 = _3735 * _3729;
                                float _3737 = _3735 * _3730;
                                float _3738 = _3735 * _3731;
                                float _3742 = 1.0 - (_3732 / (_3598 * _3598));
                                float _4924 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                                float _3747 = sqrt(_3732) * _3613.w;
                                float _3749 = 1.39999997615814208984375 / (_3747 + 1.39999997615814208984375);
                                float _3750 = _3749 * _3749;
                                float _3753 = ((1.0 - _3750) * dot(vec3(_3736, _3737, _3738), vec3(_1128, _1131, _1134))) + _3750;
                                float _3756 = _3747 * _3747;
                                float _3760 = (fma(_2917, _3640.z, fma(_2916, _3640.y, _3640.x * _2915)) + _3640.w) / _3701;
                                float _3761 = (fma(_2917, _3655.z, fma(_2916, _3655.y, _3655.x * _2915)) + _3655.w) / _3701;
                                float _3765 = 1.0 - dot(vec2(_3760, _3761), vec2(_3760, _3761));
                                float _4940 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                                float _3766 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3767 = _3766 * (((isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0))) * _3743) / ((_3756 * 0.699999988079071044921875) + 1.0));
                                float _3779 = exp2(log2(1.0 / ((_3756 * 3.5) + 5.0)) * 0.25);
                                float _3780 = 1.0 - _1203;
                                float _3787 = sqrt(1.0 - ((1.0 - (_3780 * _3780)) * (1.0 - (_3779 * _3779))));
                                float _3788 = _3787 * _3787;
                                float _3789 = _3788 * _3788;
                                float _3790 = _3736 - _3209;
                                float _3791 = _3737 - _3210;
                                float _3792 = _3738 - _3211;
                                float _3796 = inversesqrt(dot(vec3(_3790, _3791, _3792), vec3(_3790, _3791, _3792)));
                                float _3800 = dot(vec3(_1128, _1131, _1134), vec3((-0.0) - _3209, (-0.0) - _3210, (-0.0) - _3211));
                                float _4951 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3804 = dot(vec3(_1128, _1131, _1134), vec3(_3796 * _3790, _3796 * _3791, _3796 * _3792));
                                float _4962 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3807 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                                float _3811 = ((_3807 * _3807) * (_3789 + (-1.0))) + 1.0;
                                float _3812 = _3749 * _3788;
                                float _3813 = _3812 * _3812;
                                float _3819 = ((1.0 - _3813) * dot(vec3(_1128, _1131, _1134), vec3(_3736, _3737, _3738))) + _3813;
                                float _4973 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3821 = 1.0 - _3788;
                                float _3831 = (0.5 / (((_3820 * ((_3803 * _3821) + _3788)) + 9.9999999392252902907785028219223e-09) + (((_3820 * _3821) + _3788) * _3803))) * _3820;
                                float _4984 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3841 = (_3766 * _3743) * (((_3789 * 3.1415927410125732421875) * (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) / ((_3811 * _3811) * ((_3756 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3767 * _3613.y;
                                frontier_phi_83_pred_1 = _3767 * _3613.x;
                                frontier_phi_83_pred_2 = _3841 * _3625.z;
                                frontier_phi_83_pred_3 = _3841 * _3625.y;
                                frontier_phi_83_pred_4 = _3841 * _3625.x;
                                frontier_phi_83_pred_5 = _3767 * _3613.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3849 = frontier_phi_83_pred;
                            _3848 = frontier_phi_83_pred_1;
                            _3847 = frontier_phi_83_pred_2;
                            _3846 = frontier_phi_83_pred_3;
                            _3845 = frontier_phi_83_pred_4;
                            _3850 = frontier_phi_83_pred_5;
                            _3555 = _3848 + _3568;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            _3552 = _3845 + _3565;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            if (_3572 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3572;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3557;
                        frontier_phi_77_pred_1 = _3556;
                        frontier_phi_77_pred_2 = _3555;
                        frontier_phi_77_pred_3 = _3554;
                        frontier_phi_77_pred_4 = _3553;
                        frontier_phi_77_pred_5 = _3552;
                    }
                    _3194 = frontier_phi_77_pred;
                    _3192 = frontier_phi_77_pred_1;
                    _3190 = frontier_phi_77_pred_2;
                    _3188 = frontier_phi_77_pred_3;
                    _3186 = frontier_phi_77_pred_4;
                    _3184 = frontier_phi_77_pred_5;
                    uint _3350 = _3349 + 1u;
                    if (_3350 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3343 = _3184;
                        _3344 = _3186;
                        _3345 = _3188;
                        _3346 = _3190;
                        _3347 = _3192;
                        _3348 = _3194;
                        _3349 = _3350;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3188;
                frontier_phi_58_59_ladder_1 = _3194;
                frontier_phi_58_59_ladder_2 = _3192;
                frontier_phi_58_59_ladder_3 = _3190;
                frontier_phi_58_59_ladder_4 = _3186;
                frontier_phi_58_59_ladder_5 = _3184;
            }
            else
            {
                frontier_phi_58_59_ladder = _3066;
                frontier_phi_58_59_ladder_1 = _3072;
                frontier_phi_58_59_ladder_2 = _3070;
                frontier_phi_58_59_ladder_3 = _3068;
                frontier_phi_58_59_ladder_4 = _3064;
                frontier_phi_58_59_ladder_5 = _3062;
            }
            _3183 = frontier_phi_58_59_ladder_5;
            _3185 = frontier_phi_58_59_ladder_4;
            _3187 = frontier_phi_58_59_ladder;
            _3189 = frontier_phi_58_59_ladder_3;
            _3191 = frontier_phi_58_59_ladder_2;
            _3193 = frontier_phi_58_59_ladder_1;
        }
        float _3198 = isnan(1.0) ? _1187 : (isnan(_1187) ? 1.0 : min(_1187, 1.0));
        _2974 = (_3198 * _3189) + _2407;
        _2976 = (_3198 * _3191) + _2409;
        _2978 = (_3198 * _3193) + _2411;
        _2980 = ((_3183 * _1171) * _3198) + _2755;
        _2982 = ((_3185 * _1173) * _3198) + _2757;
        _2984 = ((_3187 * _1174) * _3198) + _2759;
    }
    else
    {
        _2974 = _2407;
        _2976 = _2409;
        _2978 = _2411;
        _2980 = _2755;
        _2982 = _2757;
        _2984 = _2759;
    }
    float _5000 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _5011 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _5022 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _3001 = ((isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_2974 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1187))) + ((_2980 + ((isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0))) * _2025)) * cbPerFrame._m0[3u].x);
    float _3002 = ((isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0))) * (_2976 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1187))) + ((_2982 + ((isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0))) * _2025)) * cbPerFrame._m0[3u].x);
    float _3003 = ((isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0))) * (_2978 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1187))) + ((_2984 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2025)) * cbPerFrame._m0[3u].x);
    uint _3004 = _288 + 6u;
    float _3012 = _1109 / cbSceneParam._m0[86u].x;
    float _3013 = _1110 / cbSceneParam._m0[86u].y;
    vec4 _3027 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, (log2((isnan(cbSceneParam._m0[77u].w) ? _1032 : (isnan(_1032) ? cbSceneParam._m0[77u].w : min(_1032, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3029 = _3027.x;
    float _3030 = _3027.y;
    float _3031 = _3027.z;
    float _3032 = _3027.w;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    if (_1032 > cbSceneParam._m0[78u].w)
    {
        float _3087 = isnan(_1032) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1032 : min(cbSceneParam._m0[80u].w, _1032));
        float _3088 = _3087 / _1032;
        float _3099 = _3088 * _1082;
        float _3100 = _1083 * _3088;
        float _3101 = (-0.0) - _3100;
        float _3103 = _3088 * _1084;
        float _3105 = (cbSceneParam._m0[77u].w * _3101) / _3087;
        float _3106 = _3105 + cbSceneParam._m0[79u].w;
        float _3107 = cbSceneParam._m0[79u].w - _3100;
        float _3113 = sqrt(((_3099 * _3099) + (_3100 * _3100)) + (_3103 * _3103));
        float _3116 = (1.0 - (cbSceneParam._m0[77u].w / _3087)) * _3113;
        float _3121 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3123 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3300;
        if (abs((_3101 - _3105) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3300 = ((((_3106 > 0.0) ? exp2(_3121 * _3106) : (2.0 - exp2(_3123 * _3106))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3116;
        }
        else
        {
            float _3244 = 1.0 / cbSceneParam._m0[80u].x;
            float _3245 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : max(_3106, _3107));
            float _3246 = isnan(_3107) ? _3106 : (isnan(_3106) ? _3107 : min(_3106, _3107));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            float _3256 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : min(_3246, 0.0));
            _3300 = ((abs(_3113 / _3101) * cbSceneParam._m0[80u].y) * ((((_3255 - _3256) * 2.0) - ((exp2(_3121 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0)))) - exp2(_3121 * (isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))))) * _3244)) - ((exp2(_3123 * _3255) - exp2(_3123 * _3256)) * _3244))) + (_3116 * cbSceneParam._m0[80u].z);
        }
        vec4 _3302 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3012, _3013, 1.0), 0.0);
        float _3311 = exp2((_3300 * (-1.44269502162933349609375)) * (1.0 - _3302.w));
        float _3312 = log2(_3311);
        float _3328 = log2(_3032);
        _3125 = (exp2(_3328 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].x)) * _3302.x) / cbSceneParam._m0[78u].x)) + _3029;
        _3127 = (exp2(_3328 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].y)) * _3302.y) / cbSceneParam._m0[78u].y)) + _3030;
        _3129 = (exp2(_3328 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3312 * cbSceneParam._m0[78u].z)) * _3302.z) / cbSceneParam._m0[78u].z)) + _3031;
        _3131 = _3311 * _3032;
    }
    else
    {
        _3125 = _3029;
        _3127 = _3030;
        _3129 = _3031;
        _3131 = _3032;
    }
    bool _3338;
    vec4 _3141;
    vec4 _3163;
    float _3165;
    float _3169;
    float _3170;
    float _3171;
    float _3172;
    bool _3182;
    for (;;)
    {
        _3141 = cbMatDynParam._m0[0u];
        float _3143 = roundEven(_3141.y);
        bool _3144 = _3143 == 3.0;
        float _3145 = log2(_3131);
        float _3152 = exp2(_3145 * cbSceneParam._m0[78u].x) * _3001;
        float _3153 = exp2(_3145 * cbSceneParam._m0[78u].y) * _3002;
        float _3154 = exp2(_3145 * cbSceneParam._m0[78u].z) * _3003;
        float _3161 = _1098 + (-0.5);
        _3163 = cbMtdParam._m0[1u];
        _3165 = _3163.y * _3161;
        float _3168 = (_3143 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3169 = _3168 * (_3144 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3125)));
        _3170 = _3168 * (_3144 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3127)));
        _3171 = _3168 * (_3144 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3129)));
        _3172 = _3161 * 0.999000012874603271484375;
        _3182 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3182)
        {
            if ((cbInstanceData._m0[_288 + 7u].x + _3172) < 0.5)
            {
                _3338 = true;
                break;
            }
        }
        uint _3279 = _1147 + uint(_3141.w);
        if ((cbInstanceData._m0[_3279].w < 1.0) && ((cbInstanceData._m0[_3279].w + _3172) < 0.5))
        {
            _3338 = true;
            break;
        }
        if ((_3165 + 1.0) < _3163.x)
        {
            _3338 = true;
            break;
        }
        _3338 = false;
        break;
    }
    float _3543;
    if (_3338)
    {
        discard_state = true;
        _3543 = 0.0;
    }
    else
    {
        _3543 = cbInstanceData._m0[_3004].w;
    }
    SV_Target.x = _3169;
    SV_Target.y = _3170;
    SV_Target.z = _3171;
    SV_Target.w = _3543;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3004].w;
    discard_exit();
}


