#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1621;
float _4281;
float _4282;
float _4283;
float _4284;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _259 = _258 * _250;
    float _260 = _258 * _251;
    float _261 = _258 * _252;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4293 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4304 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4315 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[23u].w) + _445) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4326 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _470 = (_463 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _471 = (_463 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _472 = (_463 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[23u].w) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4337 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    float _549 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _543;
    float _552 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _544;
    float _555 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _545;
    float _562 = ((_543 - _549) * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) + _549;
    float _563 = ((_544 - _552) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) + _552;
    float _564 = ((_545 - _555) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) + _555;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _646 = _644.x;
    float _647 = _644.y;
    float _648 = _644.z;
    float _655 = ((_627.x - _646) * _463) + _646;
    float _656 = ((_627.y - _647) * _463) + _647;
    float _657 = ((_627.z - _648) * _463) + _648;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _682 = ((_669.z - _657) * _536) + _657;
    float _685 = ((((_669.x - _655) * _536) + _655) * 2.0) + (-1.0);
    float _686 = ((((_669.y - _656) * _536) + _656) * 2.0) + (-1.0);
    float _687 = dot(vec2(_685, _686), vec2(_685, _686));
    float _4348 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _692 = sqrt(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))));
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _722 = (_685 + ((((_602.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_710.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _723 = (_686 + ((((_602.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_710.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _726 = fma(_692, _266, fma(_723, _273, _722 * _259));
    float _729 = fma(_692, _267, fma(_723, _274, _722 * _260));
    float _732 = fma(_692, _268, fma(_723, _275, _722 * _261));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _765 = _763.x;
    float _766 = 1.0 - _765;
    float _775 = (cbMtdParam._m0[19u].x + dot(vec4(_736 * _726, _736 * _729, _736 * _732, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_765 - _766) * cbMtdParam._m0[24u].z) + _766) * cbMtdParam._m0[21u].z);
    float _4359 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _778 = (-0.0) - cbMtdParam._m0[24u].x;
    float _780 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _780 : (isnan(_780) ? 1.0 : min(_780, 1.0));
    float _788 = _776 - ((_776 * TEXCOORD_8.x) * _781);
    float _789 = _776 - ((_776 * TEXCOORD_8.y) * _781);
    float _790 = _776 - ((_776 * TEXCOORD_8.z) * _781);
    float _797 = (_788 * ((_583.x * cbMtdParam._m0[18u].x) - _562)) + _562;
    float _798 = (_789 * ((_583.y * cbMtdParam._m0[18u].y) - _563)) + _563;
    float _799 = (_790 * ((_583.z * cbMtdParam._m0[18u].z) - _564)) + _564;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _813 = _811.x;
    float _814 = 1.0 - _813;
    float _840 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_813 - _814) * cbMtdParam._m0[24u].w) + _814) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4380 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _841 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _849 = ((((cbMtdParam._m0[10u].x - _797) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _841) + _797;
    float _850 = ((((cbMtdParam._m0[10u].y - _798) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _841) + _798;
    float _851 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _799)) * _841) + _799;
    vec4 _877 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _879 = _877.x;
    float _897 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _879) * _463) + _879;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _897) * _536) + _897;
    float _918 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _914) * cbMtdParam._m0[19u].z) + _914;
    float _920 = _918 - (_918 * _788);
    float _922 = _920 - (_920 * _841);
    float _927 = (((_602.z - _682) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _682;
    float _931 = ((_710.z - _927) * cbMtdParam._m0[19u].w) + _927;
    vec4 _945 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _952 = (_945.x * 2.0) + (-1.0);
    float _953 = (_945.y * 2.0) + (-1.0);
    float _954 = dot(vec2(_952, _953), vec2(_952, _953));
    float _4391 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _962 = ((_945.z - _931) * _788) + _931;
    float _965 = ((cbMtdParam._m0[23u].x - _962) * _841) + _962;
    vec4 _986 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _992 = (_986.x * 2.0) + (-1.0);
    float _993 = (_986.y * 2.0) + (-1.0);
    float _994 = dot(vec2(_992, _993), vec2(_992, _993));
    float _4402 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _1009 = ((sqrt(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) - _692) * _790) + _692;
    float _1012 = (((_952 - _722) * _788) + _722) + (cbMtdParam._m0[21u].x * _722);
    float _1013 = (((_953 - _723) * _789) + _723) + (cbMtdParam._m0[21u].x * _723);
    float _1024 = (((_992 - _1012) + (_1012 * cbMtdParam._m0[22u].z)) * _841) + _1012;
    float _1025 = (((_993 - _1013) + (_1013 * cbMtdParam._m0[22u].z)) * _841) + _1013;
    float _1026 = (_841 * (sqrt(1.0 - (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) - _1009)) + _1009;
    float _1028 = cbMtdParam._m0[22u].x + _710.w;
    float _1031 = fma(_1026, _266, fma(_1025, _273, _1024 * _259));
    float _1034 = fma(_1026, _267, fma(_1025, _274, _1024 * _260));
    float _1037 = fma(_1026, _268, fma(_1025, _275, _1024 * _261));
    float _1041 = inversesqrt(dot(vec3(_1031, _1034, _1037), vec3(_1031, _1034, _1037)));
    float _1042 = _1041 * _1031;
    float _1043 = _1041 * _1034;
    float _1044 = _1041 * _1037;
    float _4413 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _1045 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _4424 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4435 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4446 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4457 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4468 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _1050 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _1064 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1104 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1114 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1104);
    float _1115 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1104);
    float _1116 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1104);
    float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
    float _1121 = _1114 * _1120;
    float _1122 = _1115 * _1120;
    float _1123 = _1116 * _1120;
    vec4 _1128 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1130 = _1128.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1302 = sqrt(((_1114 * _1114) + (_1115 * _1115)) + (_1116 * _1116));
        float _1308 = (cbMatDynParam._m0[5u].x * _1302) + cbMatDynParam._m0[5u].y;
        float _4479 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1313 = (cbMatDynParam._m0[5u].z * _1302) + cbMatDynParam._m0[5u].w;
        float _4490 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) - _1309)) + _1309) < ((_1130 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1141 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1142 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1160 = fma(_1044, cbSceneParam._m0[5u].z, fma(_1043, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1042));
    float _1163 = fma(_1044, cbSceneParam._m0[6u].z, fma(_1043, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1042));
    float _1166 = fma(_1044, cbSceneParam._m0[7u].z, fma(_1043, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1042));
    uint _1179 = _297 + 9u;
    uint _1180 = _1179 + uint(cbMatDynParam._m0[0u].w);
    float _1186 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * cbInstanceData._m0[_1180].x;
    float _1187 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) * cbInstanceData._m0[_1180].y;
    float _1188 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * cbInstanceData._m0[_1180].z;
    float _4501 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _4512 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _4523 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _1192 = 1.0 - _1050;
    float _1193 = _1189 * _1192;
    float _1194 = _1190 * _1192;
    float _1195 = _1191 * _1192;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1050;
    float _1201 = (_1190 + (-0.039999999105930328369140625)) * _1050;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1050;
    float _1203 = _1200 + 0.039999999105930328369140625;
    float _1205 = _1201 + 0.039999999105930328369140625;
    float _1206 = _1202 + 0.039999999105930328369140625;
    vec4 _1215 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1141, cbSceneParam._m0[86u].y * _1142));
    float _1219 = ((isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * TEXCOORD_5.w) * _1215.x;
    float _1220 = dot(vec3(_1042, _1043, _1044), vec3(_1121, _1122, _1123));
    float _1223 = _1220 * 2.0;
    float _1227 = (_1223 * _1042) - _1121;
    float _1228 = (_1223 * _1043) - _1122;
    float _1229 = (_1223 * _1044) - _1123;
    float _1233 = abs(dot(vec3(_1121, _1122, _1123), vec3(_1042, _1043, _1044)));
    float _4534 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _1235 = sqrt(_1045);
    float _1248 = exp2((_1235 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1235 * 3.0));
    float _1254 = (1.0 - _1248) * ((_1235 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1255 = _1248 * _1235;
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1620;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1345 = fma(_1291, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1283));
        float _1349 = fma(_1291, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1283));
        float _1353 = fma(_1291, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1283));
        float _1378 = _1283 + _1042;
        float _1379 = _1287 + _1043;
        float _1380 = _1291 + _1044;
        float _1390 = fma(_1380, cbModelParam._m0[26u].z, fma(_1379, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1378)) - _1345;
        float _1391 = fma(_1380, cbModelParam._m0[27u].z, fma(_1379, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1378)) - _1349;
        float _1392 = fma(_1380, cbModelParam._m0[28u].z, fma(_1379, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1378)) - _1353;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1345 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1349 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[34u].z) + ((((((_1353 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1448 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1414.x + (-0.5));
        float _1450 = _1448 * (_1414.y + (-0.5));
        float _1451 = _1448 * (_1414.z + (-0.5));
        float _1458 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1421.x + (-0.5));
        float _1460 = _1458 * (_1421.y + (-0.5));
        float _1461 = _1458 * (_1421.z + (-0.5));
        float _1468 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1428.x + (-0.5));
        float _1470 = _1468 * (_1428.y + (-0.5));
        float _1471 = _1468 * (_1428.z + (-0.5));
        float _1478 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1435.x + (-0.5));
        float _1480 = _1478 * (_1435.y + (-0.5));
        float _1481 = _1478 * (_1435.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1502 = (dot(vec3(_1042, _1043, _1044), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1512 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4582 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1514 + 1.0))) + _1519) * _1482;
        float _1529 = _1450 * 0.5;
        float _1530 = _1460 * 0.5;
        float _1531 = _1470 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_1042, _1043, _1044), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4615 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1556 + 1.0))) + _1561) * _1483;
        float _1571 = _1451 * 0.5;
        float _1572 = _1461 * 0.5;
        float _1573 = _1471 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_1042, _1043, _1044), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4626 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4637 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4648 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_1598 + 1.0))) + _1603) * _1484;
        _1620 = _1451;
        _1622 = _1450;
        _1623 = _1449;
        _1624 = _1461;
        _1625 = _1460;
        _1626 = _1459;
        _1627 = _1471;
        _1628 = _1470;
        _1629 = _1469;
        _1630 = _1484;
        _1631 = _1483;
        _1632 = _1482;
        _1633 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1634 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1635 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1621;
        _1622 = _1621;
        _1623 = _1621;
        _1624 = _1621;
        _1625 = _1621;
        _1626 = _1621;
        _1627 = _1621;
        _1628 = _1621;
        _1629 = _1621;
        _1630 = _1621;
        _1631 = _1621;
        _1632 = _1621;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1662 = fma(_1291, cbModelParam._m0[30u].z, fma(_1287, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1283));
        float _1666 = fma(_1291, cbModelParam._m0[31u].z, fma(_1287, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1283));
        float _1670 = fma(_1291, cbModelParam._m0[32u].z, fma(_1287, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1283));
        float _1693 = _1283 + _1042;
        float _1694 = _1287 + _1043;
        float _1695 = _1291 + _1044;
        float _1705 = fma(_1695, cbModelParam._m0[30u].z, fma(_1694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1693)) - _1662;
        float _1706 = fma(_1695, cbModelParam._m0[31u].z, fma(_1694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1693)) - _1666;
        float _1707 = fma(_1695, cbModelParam._m0[32u].z, fma(_1694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1693)) - _1670;
        float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
        float _1724 = ((_1711 * _1705) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1662 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1725 = ((_1711 * _1706) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1666 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1726 = ((_1711 * _1707) / cbModelParam._m0[35u].z) + ((((((_1670 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1742 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        vec4 _1749 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1724, _1725, _1726), 0.0);
        float _1761 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1728.x + (-0.5));
        float _1763 = _1761 * (_1728.y + (-0.5));
        float _1764 = _1761 * (_1728.z + (-0.5));
        float _1771 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1735.x + (-0.5));
        float _1773 = _1771 * (_1735.y + (-0.5));
        float _1774 = _1771 * (_1735.z + (-0.5));
        float _1781 = exp2((_1742.w + (-0.5)) * 20.0) * 2.0;
        float _1782 = _1781 * (_1742.x + (-0.5));
        float _1783 = _1781 * (_1742.y + (-0.5));
        float _1784 = _1781 * (_1742.z + (-0.5));
        float _1791 = exp2((_1749.w + (-0.5)) * 20.0) * 2.0;
        float _1792 = _1791 * (_1749.x + (-0.5));
        float _1793 = _1791 * (_1749.y + (-0.5));
        float _1794 = _1791 * (_1749.z + (-0.5));
        float _1795 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1796 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = _1762 * 0.5;
        float _1799 = _1772 * 0.5;
        float _1800 = _1782 * 0.5;
        float _1801 = dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800));
        float _1806 = (_1801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1801);
        float _1814 = (dot(vec3(_1042, _1043, _1044), vec3(_1806 * _1798, _1806 * _1799, _1806 * _1800)) + 1.0) * 0.5;
        float _4689 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1823 = sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800)) / (_1795 + 9.9999997473787516355514526367188e-06);
        float _4700 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _1825 = _1824 * 2.0;
        float _1829 = (1.0 - _1824) / (_1824 + 1.0);
        float _4711 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _1839 = ((((1.0 - _1830) * (_1825 + 2.0)) * exp2(log2(isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_1825 + 1.0))) + _1830) * _1795;
        float _1840 = _1763 * 0.5;
        float _1841 = _1773 * 0.5;
        float _1842 = _1783 * 0.5;
        float _1843 = dot(vec3(_1840, _1841, _1842), vec3(_1840, _1841, _1842));
        float _1848 = (_1843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1843);
        float _1856 = (dot(vec3(_1042, _1043, _1044), vec3(_1848 * _1840, _1848 * _1841, _1848 * _1842)) + 1.0) * 0.5;
        float _4722 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1865 = sqrt(((_1841 * _1841) + (_1840 * _1840)) + (_1842 * _1842)) / (_1796 + 9.9999997473787516355514526367188e-06);
        float _4733 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _1867 = _1866 * 2.0;
        float _1871 = (1.0 - _1866) / (_1866 + 1.0);
        float _4744 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1872 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _1881 = ((((1.0 - _1872) * (_1867 + 2.0)) * exp2(log2(isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_1867 + 1.0))) + _1872) * _1796;
        float _1882 = _1764 * 0.5;
        float _1883 = _1774 * 0.5;
        float _1884 = _1784 * 0.5;
        float _1885 = dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884));
        float _1890 = (_1885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1885);
        float _1898 = (dot(vec3(_1042, _1043, _1044), vec3(_1890 * _1882, _1890 * _1883, _1890 * _1884)) + 1.0) * 0.5;
        float _4755 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1907 = sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4766 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _1909 = _1908 * 2.0;
        float _1913 = (1.0 - _1908) / (_1908 + 1.0);
        float _4777 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _1923 = ((((1.0 - _1914) * (_1909 + 2.0)) * exp2(log2(isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_1909 + 1.0))) + _1914) * _1797;
        _1931 = _1764;
        _1932 = _1763;
        _1933 = _1762;
        _1934 = _1774;
        _1935 = _1773;
        _1936 = _1772;
        _1937 = _1784;
        _1938 = _1783;
        _1939 = _1782;
        _1940 = _1797;
        _1941 = _1796;
        _1942 = _1795;
        _1943 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)));
        _1944 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)));
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)));
    }
    else
    {
        _1931 = _1621;
        _1932 = _1621;
        _1933 = _1621;
        _1934 = _1621;
        _1935 = _1621;
        _1936 = _1621;
        _1937 = _1621;
        _1938 = _1621;
        _1939 = _1621;
        _1940 = _1621;
        _1941 = _1621;
        _1942 = _1621;
        _1943 = 0.0;
        _1944 = 0.0;
        _1945 = 0.0;
    }
    float _1955 = (cbModelParam._m0[1u].x * (_1943 - _1633)) + _1633;
    float _1956 = (cbModelParam._m0[1u].x * (_1944 - _1634)) + _1634;
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1635)) + _1635;
    float _1978 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1981 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1984 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1955));
    float _1999 = _1227 * 0.5;
    float _2000 = _1228 * 0.5;
    float _2001 = _1229 * 0.5;
    float _2002 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2005 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1932, _1935, _1938, _1941));
    float _2008 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1931, _1934, _1937, _1940));
    float _2042;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2015 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1620, _1624, _1627, _1630));
        float _2019 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1622, _1625, _1628, _1631));
        float _2023 = dot(vec4(_1999, _2000, _2001, 1.0), vec4(_1623, _1626, _1629, _1632));
        float _2030 = dot(vec4(cbModelParam._m0[39u]), vec4(_1999, _2000, _2001, 1.0));
        _2042 = dot(vec3(isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)), isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)), isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2030) ? 0.0 : (isnan(0.0) ? _2030 : max(0.0, _2030))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2042 = 1.0;
    }
    float _2053;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2044 = dot(vec4(cbModelParam._m0[40u]), vec4(_1999, _2000, _2001, 1.0));
        _2053 = dot(vec3(isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2044) ? 0.0 : (isnan(0.0) ? _2044 : max(0.0, _2044))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2053 = 1.0;
    }
    float _2057 = (_2053 * cbModelParam._m0[1u].x) + (_2042 * (1.0 - cbModelParam._m0[1u].x));
    float _2067 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1045);
    float _2068 = isnan(_2067) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2067 : min(cbModelParam._m0[25u].z, _2067));
    float _2148;
    float _2150;
    float _2152;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2115 = fma(_1291, cbModelParam._m0[13u].z, fma(_1287, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1283)) + cbModelParam._m0[13u].w;
        float _2119 = fma(_1291, cbModelParam._m0[14u].z, fma(_1287, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1283)) + cbModelParam._m0[14u].w;
        float _2123 = fma(_1291, cbModelParam._m0[15u].z, fma(_1287, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1283)) + cbModelParam._m0[15u].w;
        float _2126 = fma(_1229, cbModelParam._m0[13u].z, fma(_1228, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1227));
        float _2129 = fma(_1229, cbModelParam._m0[14u].z, fma(_1228, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1227));
        float _2132 = fma(_1229, cbModelParam._m0[15u].z, fma(_1228, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1227));
        float _2160;
        if (_2126 > 0.0)
        {
            _2160 = abs((1.0 - _2115) / _2126);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2115 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2160 = frontier_phi_17_15_ladder;
        }
        float _2331;
        if (_2129 > 0.0)
        {
            _2331 = abs((1.0 - _2119) / _2129);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2119 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2331 = frontier_phi_26_22_ladder;
        }
        float _2626;
        if (_2132 > 0.0)
        {
            _2626 = abs((1.0 - _2123) / _2132);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2123 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2626 = frontier_phi_38_33_ladder;
        }
        float _2628 = isnan(_2331) ? _2160 : (isnan(_2160) ? _2331 : min(_2160, _2331));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _2126) + _2115;
        float _2634 = (_2629 * _2129) + _2119;
        float _2635 = (_2629 * _2132) + _2123;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2638 = (-1.0) - _2636;
        float _2640 = _2636 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2635 > _2640) || ((_2635 < _2638) || ((_2634 > _2640) || ((_2634 < _2638) || ((_2633 < _2638) || (_2633 > _2640))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2635, cbModelParam._m0[9u].z, fma(_2634, cbModelParam._m0[9u].y, _2633 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2635, cbModelParam._m0[10u].z, fma(_2634, cbModelParam._m0[10u].y, _2633 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2635, cbModelParam._m0[11u].z, fma(_2634, cbModelParam._m0[11u].y, _2633 * cbModelParam._m0[11u].x))), _2068);
            frontier_phi_16_38_ladder = _2780.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2780.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2780.x * cbModelParam._m0[1u].y;
        }
        _2148 = frontier_phi_16_38_ladder_2;
        _2150 = frontier_phi_16_38_ladder_1;
        _2152 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2136 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1227, _1228, _1229), _2068);
        _2148 = _2136.x * cbModelParam._m0[1u].y;
        _2150 = _2136.y * cbModelParam._m0[1u].y;
        _2152 = _2136.z * cbModelParam._m0[1u].y;
    }
    float _2156 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1045);
    float _2157 = isnan(_2156) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2156 : min(cbModelParam._m0[25u].w, _2156));
    float _2246;
    float _2248;
    float _2250;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2210 = fma(_1291, cbModelParam._m0[21u].z, fma(_1287, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1283)) + cbModelParam._m0[21u].w;
        float _2214 = fma(_1291, cbModelParam._m0[22u].z, fma(_1287, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1283)) + cbModelParam._m0[22u].w;
        float _2218 = fma(_1291, cbModelParam._m0[23u].z, fma(_1287, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1283)) + cbModelParam._m0[23u].w;
        float _2221 = fma(_1229, cbModelParam._m0[21u].z, fma(_1228, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1227));
        float _2224 = fma(_1229, cbModelParam._m0[22u].z, fma(_1228, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1227));
        float _2227 = fma(_1229, cbModelParam._m0[23u].z, fma(_1228, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1227));
        float _2336;
        if (_2221 > 0.0)
        {
            _2336 = abs((1.0 - _2210) / _2221);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2221 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2210 + 1.0) / _2221);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2336 = frontier_phi_28_24_ladder;
        }
        float _2653;
        if (_2224 > 0.0)
        {
            _2653 = abs((1.0 - _2214) / _2224);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2214 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2653 = frontier_phi_40_35_ladder;
        }
        float _2991;
        if (_2227 > 0.0)
        {
            _2991 = abs((1.0 - _2218) / _2227);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2218 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2991 = frontier_phi_50_47_ladder;
        }
        float _2993 = isnan(_2653) ? _2336 : (isnan(_2336) ? _2653 : min(_2336, _2653));
        float _2994 = isnan(_2991) ? _2993 : (isnan(_2993) ? _2991 : min(_2993, _2991));
        float _2998 = (_2994 * _2221) + _2210;
        float _2999 = (_2994 * _2224) + _2214;
        float _3000 = (_2994 * _2227) + _2218;
        float _3001 = _2994 * 9.9999997473787516355514526367188e-05;
        float _3002 = (-1.0) - _3001;
        float _3004 = _3001 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3000 > _3004) || ((_3000 < _3002) || ((_2999 > _3004) || ((_2999 < _3002) || ((_2998 < _3002) || (_2998 > _3004))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3122 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3000, cbModelParam._m0[17u].z, fma(_2999, cbModelParam._m0[17u].y, _2998 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3000, cbModelParam._m0[18u].z, fma(_2999, cbModelParam._m0[18u].y, _2998 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3000, cbModelParam._m0[19u].z, fma(_2999, cbModelParam._m0[19u].y, _2998 * cbModelParam._m0[19u].x))), _2157);
            frontier_phi_25_50_ladder = _3122.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3122.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3122.x * cbModelParam._m0[1u].z;
        }
        _2246 = frontier_phi_25_50_ladder_2;
        _2248 = frontier_phi_25_50_ladder_1;
        _2250 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2230 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1227, _1228, _1229), _2157);
        _2246 = _2230.x * cbModelParam._m0[1u].z;
        _2248 = _2230.y * cbModelParam._m0[1u].z;
        _2250 = _2230.z * cbModelParam._m0[1u].z;
    }
    float _2263 = (((_1254 * _1203) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2246 - _2148)) + _2148);
    float _2265 = (((_1254 * _1205) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2248 - _2150)) + _2150);
    float _2267 = (((_1254 * _1206) + _1255) * _1219) * ((cbModelParam._m0[1u].w * (_2250 - _2152)) + _2152);
    float _2270 = fma(_2267, cbSceneParam._m0[89u].z, fma(_2265, cbSceneParam._m0[89u].y, _2263 * cbSceneParam._m0[89u].x));
    float _2273 = fma(_2267, cbSceneParam._m0[90u].z, fma(_2265, cbSceneParam._m0[90u].y, _2263 * cbSceneParam._m0[90u].x));
    float _2276 = fma(_2267, cbSceneParam._m0[91u].z, fma(_2265, cbSceneParam._m0[91u].y, _2263 * cbSceneParam._m0[91u].x));
    float _2310 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2314 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2318 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2322 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2323 = _2310 / _2322;
    float _2324 = _2314 / _2322;
    float _2325 = _2318 / _2322;
    float _2472;
    float _2473;
    float _2474;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2352 = ((uint(_2325 > cbSceneParam._m0[59u].y) + uint(_2325 > cbSceneParam._m0[59u].x)) + uint(_2325 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2353 = _2352 + 43u;
        uint _2361 = _2352 + 44u;
        uint _2369 = _2352 + 45u;
        uint _2377 = _2352 + 46u;
        float _2388 = fma(_2322, cbSceneParam._m0[_2353].w, fma(_2318, cbSceneParam._m0[_2353].z, fma(_2314, cbSceneParam._m0[_2353].y, _2310 * cbSceneParam._m0[_2353].x)));
        float _2392 = fma(_2322, cbSceneParam._m0[_2361].w, fma(_2318, cbSceneParam._m0[_2361].z, fma(_2314, cbSceneParam._m0[_2361].y, _2310 * cbSceneParam._m0[_2361].x)));
        float _2400 = fma(_2322, cbSceneParam._m0[_2377].w, fma(_2318, cbSceneParam._m0[_2377].z, fma(_2314, cbSceneParam._m0[_2377].y, _2310 * cbSceneParam._m0[_2377].x)));
        float _2405 = cbSceneParam._m0[33u].z * _2400;
        float _2407 = cbSceneParam._m0[33u].w * _2400;
        float _2410 = fma(_2322, cbSceneParam._m0[_2369].w, fma(_2318, cbSceneParam._m0[_2369].z, fma(_2314, cbSceneParam._m0[_2369].y, _2310 * cbSceneParam._m0[_2369].x))) / _2400;
        float _2458 = (cbSceneParam._m0[33u].x - sqrt(((_2324 * _2324) + (_2323 * _2323)) + (_2325 * _2325))) * cbSceneParam._m0[33u].y;
        float _4903 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2465 = (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2405 + _2388) / _2400, (_2407 + _2392) / _2400), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2407 + _2388) / _2400, (_2392 - _2405) / _2400), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2388 - _2405) / _2400, (_2392 - _2407) / _2400), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2388 - _2407) / _2400, (_2405 + _2392) / _2400), _2410), 0.0)).x), vec4(0.25)));
        _2472 = 1.0 - (_2465 * cbSceneParam._m0[34u].x);
        _2473 = 1.0 - (_2465 * cbSceneParam._m0[34u].y);
        _2474 = 1.0 - (_2465 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2472 = 1.0;
        _2473 = 1.0;
        _2474 = 1.0;
    }
    float _2538;
    float _2540;
    float _2542;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2526 = fma(_2322, cbSceneParam._m0[63u].w, fma(_2318, cbSceneParam._m0[63u].z, fma(_2314, cbSceneParam._m0[63u].y, _2310 * cbSceneParam._m0[63u].x)));
        float _2527 = fma(_2322, cbSceneParam._m0[60u].w, fma(_2318, cbSceneParam._m0[60u].z, fma(_2314, cbSceneParam._m0[60u].y, _2310 * cbSceneParam._m0[60u].x))) / _2526;
        float _2528 = fma(_2322, cbSceneParam._m0[61u].w, fma(_2318, cbSceneParam._m0[61u].z, fma(_2314, cbSceneParam._m0[61u].y, _2310 * cbSceneParam._m0[61u].x))) / _2526;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2527 >= cbSceneParam._m0[64u].x) && (_2528 >= cbSceneParam._m0[64u].y)) && (_2527 <= cbSceneParam._m0[64u].z)) && (_2528 <= cbSceneParam._m0[64u].w))
        {
            float _2666 = fma(_2322, cbSceneParam._m0[62u].w, fma(_2318, cbSceneParam._m0[62u].z, fma(_2314, cbSceneParam._m0[62u].y, _2310 * cbSceneParam._m0[62u].x))) / _2526;
            float _2670 = isnan(cbSceneParam._m0[41u].w) ? _2666 : (isnan(_2666) ? cbSceneParam._m0[41u].w : max(_2666, cbSceneParam._m0[41u].w));
            float _2713 = (cbSceneParam._m0[33u].x - sqrt(((_2324 * _2324) + (_2323 * _2323)) + (_2325 * _2325))) * cbSceneParam._m0[33u].y;
            float _4919 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
            float _2720 = (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2527, cbSceneParam._m0[33u].w + _2528), _2670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2527, _2528 - cbSceneParam._m0[33u].z), _2670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2527 - cbSceneParam._m0[33u].z, _2528 - cbSceneParam._m0[33u].w), _2670), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2527 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2528), _2670), 0.0)).x), vec4(0.25)));
            float _2724 = 1.0 - (_2720 * cbSceneParam._m0[34u].x);
            float _2725 = 1.0 - (_2720 * cbSceneParam._m0[34u].y);
            float _2726 = 1.0 - (_2720 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2726) ? _2474 : (isnan(_2474) ? _2726 : min(_2474, _2726));
            frontier_phi_37_36_ladder_1 = isnan(_2725) ? _2473 : (isnan(_2473) ? _2725 : min(_2473, _2725));
            frontier_phi_37_36_ladder_2 = isnan(_2724) ? _2472 : (isnan(_2472) ? _2724 : min(_2472, _2724));
        }
        else
        {
            frontier_phi_37_36_ladder = _2474;
            frontier_phi_37_36_ladder_1 = _2473;
            frontier_phi_37_36_ladder_2 = _2472;
        }
        _2538 = frontier_phi_37_36_ladder_2;
        _2540 = frontier_phi_37_36_ladder_1;
        _2542 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2538 = _2472;
        _2540 = _2473;
        _2542 = _2474;
    }
    uvec4 _2547 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2549 = _2547.x * 14u;
    uint _2550 = _2549 + 13u;
    float _2557 = _1219 + (-1.0);
    float _2562 = (cbLight._m0[_2550].x * _2557) + 1.0;
    float _2563 = (cbLight._m0[_2550].y * _2557) + 1.0;
    float _2564 = (cbLight._m0[_2550].z * _2557) + 1.0;
    float _2565 = (cbLight._m0[_2550].w * _2557) + 1.0;
    uint _2566 = _2549 + 5u;
    float _2572 = isnan(1.0) ? _2563 : (isnan(_2563) ? 1.0 : min(_2563, 1.0));
    uint _2576 = _2549 + 4u;
    float _2585 = isnan(1.0) ? _2562 : (isnan(_2562) ? 1.0 : min(_2562, 1.0));
    uint _2589 = _2549 | 1u;
    float _2600 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_1042, _1043, _1044));
    float _2603 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_1042, _1043, _1044));
    float _4955 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _4966 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2608 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * 0.3183098733425140380859375;
    float _2610 = (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * 0.3183098733425140380859375;
    float _2617 = ((cbLight._m0[_2566].x * _2572) * _2610) + (((cbLight._m0[_2576].x * _2538) * _2585) * _2608);
    float _2618 = ((_2572 * cbLight._m0[_2566].y) * _2610) + (((cbLight._m0[_2576].y * _2540) * _2585) * _2608);
    float _2619 = ((_2572 * cbLight._m0[_2566].z) * _2610) + (((cbLight._m0[_2576].z * _2542) * _2585) * _2608);
    uvec4 _2623 = floatBitsToUint(cbLight._m0[_2549 + 12u]);
    bool _2625 = _2623.x == 0u;
    float _2727;
    float _2729;
    float _2731;
    if (_2625)
    {
        _2727 = _2617;
        _2729 = _2618;
        _2731 = _2619;
    }
    else
    {
        uint _2735 = _2549 + 6u;
        float _2751 = (dot(vec3(cbLight._m0[_2549 + 2u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2752 = _2751 * _2751;
        float _4977 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2753 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
        float _2754 = isnan(1.0) ? _2564 : (isnan(_2564) ? 1.0 : min(_2564, 1.0));
        _2727 = (((cbLight._m0[_2735].x * 0.3183098733425140380859375) * _2753) * _2754) + _2617;
        _2729 = (((cbLight._m0[_2735].y * 0.3183098733425140380859375) * _2753) * _2754) + _2618;
        _2731 = (((cbLight._m0[_2735].z * 0.3183098733425140380859375) * _2753) * _2754) + _2619;
    }
    bool _2734 = _2623.y == 0u;
    float _2789;
    float _2791;
    float _2793;
    if (_2734)
    {
        _2789 = _2727;
        _2791 = _2729;
        _2793 = _2731;
    }
    else
    {
        uint _2962 = _2549 + 7u;
        float _2978 = (dot(vec3(cbLight._m0[_2549 + 3u].xyz), vec3(_1042, _1043, _1044)) * 0.5) + 0.5;
        float _2979 = _2978 * _2978;
        float _4993 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2980 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
        float _2981 = isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0));
        _2789 = (((cbLight._m0[_2962].x * 0.3183098733425140380859375) * _2980) * _2981) + _2727;
        _2791 = (((cbLight._m0[_2962].y * 0.3183098733425140380859375) * _2980) * _2981) + _2729;
        _2793 = (((cbLight._m0[_2962].z * 0.3183098733425140380859375) * _2980) * _2981) + _2731;
    }
    uint _2796 = _2549 + 8u;
    float _2809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2549].w)) * _1045) * 0.949999988079071044921875);
    float _2810 = _2809 * _2809;
    float _2811 = cbLight._m0[_2549].x + _1121;
    float _2812 = cbLight._m0[_2549].y + _1122;
    float _2813 = cbLight._m0[_2549].z + _1123;
    float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
    float _2818 = _2817 * _2811;
    float _2819 = _2817 * _2812;
    float _2820 = _2817 * _2813;
    float _2821 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2549].xyz));
    float _5009 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
    float _2824 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
    float _5020 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _2825 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
    float _2826 = dot(vec3(_1042, _1043, _1044), vec3(_2818, _2819, _2820));
    float _5031 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2829 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
    float _2830 = dot(vec3(cbLight._m0[_2549].xyz), vec3(_2818, _2819, _2820));
    float _5042 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
    float _2834 = _2810 * _2810;
    float _2838 = ((_2829 * _2829) * (_2834 + (-1.0))) + 1.0;
    float _2846 = exp2(log2(1.0 - (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0)))) * 5.0);
    float _2847 = 0.959999978542327880859375 - _1200;
    float _2849 = 0.959999978542327880859375 - _1201;
    float _2850 = 0.959999978542327880859375 - _1202;
    float _2857 = 1.0 - _2810;
    float _2868 = (0.5 / (((_2825 * ((_2824 * _2857) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2857) + _2810) * _2824))) * _2824;
    float _5053 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
    float _2870 = (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_2834 / ((_2838 * _2838) * 3.141590118408203125));
    uint _2884 = _2549 + 9u;
    float _2895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _1045) * 0.949999988079071044921875);
    float _2896 = _2895 * _2895;
    float _2897 = cbLight._m0[_2589].x + _1121;
    float _2898 = cbLight._m0[_2589].y + _1122;
    float _2899 = cbLight._m0[_2589].z + _1123;
    float _2903 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
    float _2904 = _2903 * _2897;
    float _2905 = _2903 * _2898;
    float _2906 = _2903 * _2899;
    float _2907 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_2589].xyz));
    float _5064 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2910 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
    float _2911 = dot(vec3(_1042, _1043, _1044), vec3(_2904, _2905, _2906));
    float _5075 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2914 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
    float _2915 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2904, _2905, _2906));
    float _5086 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
    float _2919 = _2896 * _2896;
    float _2923 = ((_2914 * _2914) * (_2919 + (-1.0))) + 1.0;
    float _2930 = exp2(log2(1.0 - (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0)))) * 5.0);
    float _2937 = 1.0 - _2896;
    float _2947 = (0.5 / (((_2825 * ((_2910 * _2937) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2937) + _2896) * _2910))) * _2910;
    float _5097 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
    float _2949 = (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_2919 / ((_2923 * _2923) * 3.141590118408203125));
    float _2959 = (((((_2930 * _2847) + _1203) * cbLight._m0[_2884].x) * _2949) * _2572) + ((((cbLight._m0[_2796].x * _2538) * ((_2846 * _2847) + _1203)) * _2870) * _2585);
    float _2960 = (((((_2930 * _2849) + _1205) * cbLight._m0[_2884].y) * _2949) * _2572) + ((((cbLight._m0[_2796].y * _2540) * ((_2846 * _2849) + _1205)) * _2870) * _2585);
    float _2961 = (((((_2930 * _2850) + _1206) * cbLight._m0[_2884].z) * _2949) * _2572) + ((((cbLight._m0[_2796].z * _2542) * ((_2846 * _2850) + _1206)) * _2870) * _2585);
    float _3017;
    float _3019;
    float _3021;
    if (_2625)
    {
        _3017 = _2959;
        _3019 = _2960;
        _3021 = _2961;
    }
    else
    {
        uint _3023 = _2549 + 2u;
        uint _3027 = _2549 + 10u;
        float _3041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3023].w)) * _1045) * 0.949999988079071044921875);
        float _3042 = _3041 * _3041;
        float _3043 = cbLight._m0[_3023].x + _1121;
        float _3044 = cbLight._m0[_3023].y + _1122;
        float _3045 = cbLight._m0[_3023].z + _1123;
        float _3049 = inversesqrt(dot(vec3(_3043, _3044, _3045), vec3(_3043, _3044, _3045)));
        float _3050 = _3049 * _3043;
        float _3051 = _3049 * _3044;
        float _3052 = _3049 * _3045;
        float _3053 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_3023].xyz));
        float _5108 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3056 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
        float _3057 = dot(vec3(_1042, _1043, _1044), vec3(_3050, _3051, _3052));
        float _5119 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3060 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
        float _3061 = dot(vec3(cbLight._m0[_3023].xyz), vec3(_3050, _3051, _3052));
        float _5130 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3065 = _3042 * _3042;
        float _3069 = ((_3060 * _3060) * (_3065 + (-1.0))) + 1.0;
        float _3076 = exp2(log2(1.0 - (isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0)))) * 5.0);
        float _3083 = 1.0 - _3042;
        float _3093 = (0.5 / (((_2825 * ((_3056 * _3083) + _3042)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _3083) + _3042) * _3056))) * _3056;
        float _5141 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3095 = (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0))) * (_3065 / ((_3069 * _3069) * 3.141590118408203125));
        float _3096 = isnan(1.0) ? _2564 : (isnan(_2564) ? 1.0 : min(_2564, 1.0));
        _3017 = (((((_3076 * _2847) + _1203) * cbLight._m0[_3027].x) * _3095) * _3096) + _2959;
        _3019 = (((((_3076 * _2849) + _1205) * cbLight._m0[_3027].y) * _3095) * _3096) + _2960;
        _3021 = (((((_3076 * _2850) + _1206) * cbLight._m0[_3027].z) * _3095) * _3096) + _2961;
    }
    float _3127;
    float _3129;
    float _3131;
    if (_2734)
    {
        _3127 = _3017;
        _3129 = _3019;
        _3131 = _3021;
    }
    else
    {
        uint _3138 = _2549 + 3u;
        uint _3142 = _2549 + 11u;
        float _3156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3138].w)) * _1045) * 0.949999988079071044921875);
        float _3157 = _3156 * _3156;
        float _3158 = cbLight._m0[_3138].x + _1121;
        float _3159 = cbLight._m0[_3138].y + _1122;
        float _3160 = cbLight._m0[_3138].z + _1123;
        float _3164 = inversesqrt(dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160)));
        float _3165 = _3164 * _3158;
        float _3166 = _3164 * _3159;
        float _3167 = _3164 * _3160;
        float _3168 = dot(vec3(_1042, _1043, _1044), vec3(cbLight._m0[_3138].xyz));
        float _5157 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        float _3171 = isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0));
        float _3172 = dot(vec3(_1042, _1043, _1044), vec3(_3165, _3166, _3167));
        float _5168 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
        float _3175 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
        float _3176 = dot(vec3(cbLight._m0[_3138].xyz), vec3(_3165, _3166, _3167));
        float _5179 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
        float _3180 = _3157 * _3157;
        float _3184 = ((_3175 * _3175) * (_3180 + (-1.0))) + 1.0;
        float _3191 = exp2(log2(1.0 - (isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0)))) * 5.0);
        float _3198 = 1.0 - _3157;
        float _3208 = (0.5 / (((_2825 * ((_3171 * _3198) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _3198) + _3157) * _3171))) * _3171;
        float _5190 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
        float _3210 = (isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0))) * (_3180 / ((_3184 * _3184) * 3.141590118408203125));
        float _3211 = isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0));
        _3127 = (((((_3191 * _2847) + _1203) * cbLight._m0[_3142].x) * _3210) * _3211) + _3017;
        _3129 = (((((_3191 * _2849) + _1205) * cbLight._m0[_3142].y) * _3210) * _3211) + _3019;
        _3131 = (((((_3191 * _2850) + _1206) * cbLight._m0[_3142].z) * _3210) * _3211) + _3021;
    }
    float _3277;
    float _3279;
    float _3281;
    float _3283;
    float _3285;
    float _3287;
    if (_2547.y == 0u)
    {
        uvec4 _3232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3233 = _3232.x;
        uint _3244 = uint((float(_3232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1142) / _3233))) + floor(float(uint(cbSceneParam._m0[85u].x * _1141) / _3233)));
        float _3254 = (log2(_2325 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3255 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
        uint _3258 = uint(isnan(14.0) ? _3255 : (isnan(_3255) ? 14.0 : min(_3255, 14.0)));
        uvec4 _3263 = texelFetch(g_lightClusterGridBuffer, int(((_3258 << 2u) + (_3244 << 6u)) >> 2u));
        uint _3264 = _3263.x;
        uint _3265 = _3232.z;
        float _3344;
        float _3346;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        if (((((1u << ((_3265 >> 4u) & 15u)) + 4294967295u) & _3264) == 0u) || ((_3265 & 240u) == 0u))
        {
            _3344 = 0.0;
            _3346 = 0.0;
            _3348 = 0.0;
            _3350 = 0.0;
            _3352 = 0.0;
            _3354 = 0.0;
        }
        else
        {
            float _3345;
            float _3347;
            float _3349;
            float _3351;
            float _3353;
            float _3355;
            float _3496 = 0.0;
            float _3497 = 0.0;
            float _3498 = 0.0;
            float _3499 = 0.0;
            float _3500 = 0.0;
            float _3501 = 0.0;
            uint _3502 = 0u;
            uint _3511;
            bool _3512;
            for (;;)
            {
                _3511 = texelFetch(g_lightClassification, int((((_3258 << 5u) + (_3244 << 9u)) + (_3502 << 2u)) >> 2u)).x;
                _3512 = _3511 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3512)
                {
                    frontier_phi_71_pred = _3501;
                    frontier_phi_71_pred_1 = _3500;
                    frontier_phi_71_pred_2 = _3499;
                    frontier_phi_71_pred_3 = _3498;
                    frontier_phi_71_pred_4 = _3497;
                    frontier_phi_71_pred_5 = _3496;
                }
                else
                {
                    float _3641;
                    float _3642;
                    float _3643;
                    float _3644;
                    float _3645;
                    float _3646;
                    uint _3647;
                    _3641 = _3496;
                    _3642 = _3497;
                    _3643 = _3498;
                    _3644 = _3499;
                    _3645 = _3500;
                    _3646 = _3501;
                    _3647 = _3511;
                    float _3568;
                    float _3569;
                    float _3570;
                    float _3571;
                    float _3572;
                    float _3573;
                    for (;;)
                    {
                        uint _3651 = uint(findLSB(_3647)) + (_3502 << 5u);
                        uint _3648 = (_3647 + 4294967295u) & _3647;
                        uint _3653 = _3651 * 48u;
                        vec4 _3667 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3653)).x, texelFetch(g_PointLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3653 + 3u)).x));
                        uint _3673 = (_3651 * 48u) + 4u;
                        vec4 _3686 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3673)).x, texelFetch(g_PointLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3673 + 3u)).x));
                        uint _3692 = (_3651 * 48u) + 8u;
                        vec3 _3703 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3692)).x, texelFetch(g_PointLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3692 + 2u)).x));
                        float _3707 = _3667.x - _2323;
                        float _3708 = _3667.y - _2324;
                        float _3709 = _3667.z - _2325;
                        float _3710 = dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709));
                        float _3713 = inversesqrt(_3710);
                        float _3714 = _3713 * _3707;
                        float _3715 = _3713 * _3708;
                        float _3716 = _3713 * _3709;
                        float _3717 = dot(vec3(_1160, _1163, _1166), vec3(_3714, _3715, _3716));
                        float _3722 = 1.0 - (_3710 * _3667.w);
                        float _5216 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                        float _3723 = isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0));
                        float _3724 = sqrt(_3710) * _3686.w;
                        float _3727 = 1.39999997615814208984375 / (_3724 + 1.39999997615814208984375);
                        float _3728 = _3727 * _3727;
                        float _3731 = ((1.0 - _3728) * _3717) + _3728;
                        float _3734 = _3724 * _3724;
                        float _3738 = ((isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0))) * _3723) / ((_3734 * 0.699999988079071044921875) + 1.0);
                        float _3742 = (-0.0) - _2323;
                        float _3743 = (-0.0) - _2324;
                        float _3744 = (-0.0) - _2325;
                        float _3748 = inversesqrt(dot(vec3(_3742, _3743, _3744), vec3(_3742, _3743, _3744)));
                        float _3749 = _3748 * _3742;
                        float _3750 = _3748 * _3743;
                        float _3751 = _3748 * _3744;
                        float _3758 = exp2(log2(1.0 / ((_3734 * 3.5) + 5.0)) * 0.25);
                        float _3759 = 1.0 - _1235;
                        float _3766 = sqrt(1.0 - ((1.0 - (_3759 * _3759)) * (1.0 - (_3758 * _3758))));
                        float _3767 = _3766 * _3766;
                        float _3768 = _3767 * _3767;
                        float _3769 = _3749 + _3714;
                        float _3770 = _3750 + _3715;
                        float _3771 = _3751 + _3716;
                        float _3775 = inversesqrt(dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771)));
                        float _3779 = dot(vec3(_1160, _1163, _1166), vec3(_3749, _3750, _3751));
                        float _5232 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                        float _3782 = isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0));
                        float _3783 = dot(vec3(_1160, _1163, _1166), vec3(_3775 * _3769, _3775 * _3770, _3775 * _3771));
                        float _5243 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                        float _3786 = isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0));
                        float _3790 = ((_3786 * _3786) * (_3768 + (-1.0))) + 1.0;
                        float _3791 = _3727 * _3767;
                        float _3792 = _3791 * _3791;
                        float _3795 = ((1.0 - _3792) * _3717) + _3792;
                        float _5254 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                        float _3796 = isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0));
                        float _3797 = 1.0 - _3767;
                        float _3807 = (0.5 / (((_3796 * ((_3782 * _3797) + _3767)) + 9.9999999392252902907785028219223e-09) + (((_3796 * _3797) + _3767) * _3782))) * _3796;
                        float _5265 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                        float _3818 = (((_3768 * 3.1415927410125732421875) * (isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0)))) / ((_3790 * _3790) * ((_3734 * 2.1991131305694580078125) + 3.141590118408203125))) * _3723;
                        _3571 = (_3738 * _3686.x) + _3644;
                        _3572 = (_3738 * _3686.y) + _3645;
                        _3573 = (_3738 * _3686.z) + _3646;
                        _3568 = (_3818 * _3703.x) + _3641;
                        _3569 = (_3818 * _3703.y) + _3642;
                        _3570 = (_3818 * _3703.z) + _3643;
                        if (_3648 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3641 = _3568;
                            _3642 = _3569;
                            _3643 = _3570;
                            _3644 = _3571;
                            _3645 = _3572;
                            _3646 = _3573;
                            _3647 = _3648;
                        }
                    }
                    frontier_phi_71_pred = _3573;
                    frontier_phi_71_pred_1 = _3572;
                    frontier_phi_71_pred_2 = _3571;
                    frontier_phi_71_pred_3 = _3570;
                    frontier_phi_71_pred_4 = _3569;
                    frontier_phi_71_pred_5 = _3568;
                }
                _3355 = frontier_phi_71_pred;
                _3353 = frontier_phi_71_pred_1;
                _3351 = frontier_phi_71_pred_2;
                _3349 = frontier_phi_71_pred_3;
                _3347 = frontier_phi_71_pred_4;
                _3345 = frontier_phi_71_pred_5;
                uint _3503 = _3502 + 1u;
                if (_3503 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3496 = _3345;
                    _3497 = _3347;
                    _3498 = _3349;
                    _3499 = _3351;
                    _3500 = _3353;
                    _3501 = _3355;
                    _3502 = _3503;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3344 = _3345;
            _3346 = _3347;
            _3348 = _3349;
            _3350 = _3351;
            _3352 = _3353;
            _3354 = _3355;
        }
        uvec4 _3358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3359 = _3358.z;
        uint _3361 = (_3359 >> 8u) & 15u;
        float _3464;
        float _3466;
        float _3468;
        float _3470;
        float _3472;
        float _3474;
        if (((4294967295u << _3361) & _3264) == 0u)
        {
            _3464 = _3344;
            _3466 = _3346;
            _3468 = _3348;
            _3470 = _3350;
            _3472 = _3352;
            _3474 = _3354;
        }
        else
        {
            float _3489 = inversesqrt(dot(vec3(_2323, _2324, _2325), vec3(_2323, _2324, _2325)));
            float _3490 = _3489 * _2323;
            float _3491 = _3489 * _2324;
            float _3492 = _3489 * _2325;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3361 < ((_3359 >> 12u) & 15u))
            {
                float _3465;
                float _3467;
                float _3469;
                float _3471;
                float _3473;
                float _3475;
                float _3624 = _3344;
                float _3625 = _3346;
                float _3626 = _3348;
                float _3627 = _3350;
                float _3628 = _3352;
                float _3629 = _3354;
                uint _3630 = _3361;
                uint _3639;
                bool _3640;
                for (;;)
                {
                    _3639 = texelFetch(g_lightClassification, int((((_3258 << 5u) + (_3244 << 9u)) + (_3630 << 2u)) >> 2u)).x;
                    _3640 = _3639 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3640)
                    {
                        frontier_phi_82_pred = _3629;
                        frontier_phi_82_pred_1 = _3628;
                        frontier_phi_82_pred_2 = _3627;
                        frontier_phi_82_pred_3 = _3626;
                        frontier_phi_82_pred_4 = _3625;
                        frontier_phi_82_pred_5 = _3624;
                    }
                    else
                    {
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _4125;
                        float _4126;
                        float _4127;
                        float _4128;
                        float _4129;
                        float _4130;
                        float _3845 = _3624;
                        float _3846 = _3625;
                        float _3847 = _3626;
                        float _3848 = _3627;
                        float _3849 = _3628;
                        float _3850 = _3629;
                        uint _3851 = _3639;
                        uint _3852;
                        vec4 _3877;
                        float _3878;
                        vec4 _3893;
                        vec3 _3905;
                        vec4 _3920;
                        vec4 _3935;
                        float _3981;
                        bool _3982;
                        for (;;)
                        {
                            uint _3862 = ((_3630 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3851));
                            _3852 = (_3851 + 4294967295u) & _3851;
                            uint _3864 = _3862 * 40u;
                            _3877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3864 + 3u)).x));
                            _3878 = _3877.w;
                            uint _3880 = (_3862 * 40u) + 4u;
                            _3893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 3u)).x));
                            uint _3895 = (_3862 * 40u) + 8u;
                            _3905 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x));
                            uint _3907 = (_3862 * 40u) + 16u;
                            _3920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3907 + 3u)).x));
                            uint _3922 = (_3862 * 40u) + 20u;
                            _3935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3922 + 3u)).x));
                            uint _3937 = (_3862 * 40u) + 24u;
                            vec4 _3950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3937 + 3u)).x));
                            uint _3956 = (_3862 * 40u) + 28u;
                            vec4 _3969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3956 + 3u)).x));
                            _3981 = fma(_2325, _3969.z, fma(_2324, _3969.y, _3969.x * _2323)) + _3969.w;
                            _3982 = !((fma(_2325, _3950.z, fma(_2324, _3950.y, _3950.x * _2323)) + _3950.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3982)
                            {
                                float _4009 = _3877.x - _2323;
                                float _4010 = _3877.y - _2324;
                                float _4011 = _3877.z - _2325;
                                float _4012 = dot(vec3(_4009, _4010, _4011), vec3(_4009, _4010, _4011));
                                float _4015 = inversesqrt(_4012);
                                float _4016 = _4015 * _4009;
                                float _4017 = _4015 * _4010;
                                float _4018 = _4015 * _4011;
                                float _4022 = 1.0 - (_4012 / (_3878 * _3878));
                                float _5276 = isnan(0.0) ? _4022 : (isnan(_4022) ? 0.0 : max(_4022, 0.0));
                                float _4023 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
                                float _4027 = sqrt(_4012) * _3893.w;
                                float _4029 = 1.39999997615814208984375 / (_4027 + 1.39999997615814208984375);
                                float _4030 = _4029 * _4029;
                                float _4033 = ((1.0 - _4030) * dot(vec3(_4016, _4017, _4018), vec3(_1160, _1163, _1166))) + _4030;
                                float _4036 = _4027 * _4027;
                                float _4040 = (fma(_2325, _3920.z, fma(_2324, _3920.y, _3920.x * _2323)) + _3920.w) / _3981;
                                float _4041 = (fma(_2325, _3935.z, fma(_2324, _3935.y, _3935.x * _2323)) + _3935.w) / _3981;
                                float _4045 = 1.0 - dot(vec2(_4040, _4041), vec2(_4040, _4041));
                                float _5292 = isnan(0.0) ? _4045 : (isnan(_4045) ? 0.0 : max(_4045, 0.0));
                                float _4046 = isnan(1.0) ? _5292 : (isnan(_5292) ? 1.0 : min(_5292, 1.0));
                                float _4047 = _4046 * (((isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0))) * _4023) / ((_4036 * 0.699999988079071044921875) + 1.0));
                                float _4059 = exp2(log2(1.0 / ((_4036 * 3.5) + 5.0)) * 0.25);
                                float _4060 = 1.0 - _1235;
                                float _4067 = sqrt(1.0 - ((1.0 - (_4060 * _4060)) * (1.0 - (_4059 * _4059))));
                                float _4068 = _4067 * _4067;
                                float _4069 = _4068 * _4068;
                                float _4070 = _4016 - _3490;
                                float _4071 = _4017 - _3491;
                                float _4072 = _4018 - _3492;
                                float _4076 = inversesqrt(dot(vec3(_4070, _4071, _4072), vec3(_4070, _4071, _4072)));
                                float _4080 = dot(vec3(_1160, _1163, _1166), vec3((-0.0) - _3490, (-0.0) - _3491, (-0.0) - _3492));
                                float _5303 = isnan(0.0) ? _4080 : (isnan(_4080) ? 0.0 : max(_4080, 0.0));
                                float _4083 = isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0));
                                float _4084 = dot(vec3(_1160, _1163, _1166), vec3(_4076 * _4070, _4076 * _4071, _4076 * _4072));
                                float _5314 = isnan(0.0) ? _4084 : (isnan(_4084) ? 0.0 : max(_4084, 0.0));
                                float _4087 = isnan(1.0) ? _5314 : (isnan(_5314) ? 1.0 : min(_5314, 1.0));
                                float _4091 = ((_4087 * _4087) * (_4069 + (-1.0))) + 1.0;
                                float _4092 = _4029 * _4068;
                                float _4093 = _4092 * _4092;
                                float _4099 = ((1.0 - _4093) * dot(vec3(_1160, _1163, _1166), vec3(_4016, _4017, _4018))) + _4093;
                                float _5325 = isnan(0.0) ? _4099 : (isnan(_4099) ? 0.0 : max(_4099, 0.0));
                                float _4100 = isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0));
                                float _4101 = 1.0 - _4068;
                                float _4111 = (0.5 / (((_4100 * ((_4083 * _4101) + _4068)) + 9.9999999392252902907785028219223e-09) + (((_4100 * _4101) + _4068) * _4083))) * _4100;
                                float _5336 = isnan(0.0) ? _4111 : (isnan(_4111) ? 0.0 : max(_4111, 0.0));
                                float _4121 = (_4046 * _4023) * (((_4069 * 3.1415927410125732421875) * (isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0)))) / ((_4091 * _4091) * ((_4036 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4047 * _3893.z;
                                frontier_phi_88_pred_1 = _4047 * _3893.y;
                                frontier_phi_88_pred_2 = _4047 * _3893.x;
                                frontier_phi_88_pred_3 = _4121 * _3905.z;
                                frontier_phi_88_pred_4 = _4121 * _3905.y;
                                frontier_phi_88_pred_5 = _4121 * _3905.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4130 = frontier_phi_88_pred;
                            _4129 = frontier_phi_88_pred_1;
                            _4128 = frontier_phi_88_pred_2;
                            _4127 = frontier_phi_88_pred_3;
                            _4126 = frontier_phi_88_pred_4;
                            _4125 = frontier_phi_88_pred_5;
                            _3835 = _4128 + _3848;
                            _3836 = _4129 + _3849;
                            _3837 = _4130 + _3850;
                            _3832 = _4125 + _3845;
                            _3833 = _4126 + _3846;
                            _3834 = _4127 + _3847;
                            if (_3852 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3845 = _3832;
                                _3846 = _3833;
                                _3847 = _3834;
                                _3848 = _3835;
                                _3849 = _3836;
                                _3850 = _3837;
                                _3851 = _3852;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3837;
                        frontier_phi_82_pred_1 = _3836;
                        frontier_phi_82_pred_2 = _3835;
                        frontier_phi_82_pred_3 = _3834;
                        frontier_phi_82_pred_4 = _3833;
                        frontier_phi_82_pred_5 = _3832;
                    }
                    _3475 = frontier_phi_82_pred;
                    _3473 = frontier_phi_82_pred_1;
                    _3471 = frontier_phi_82_pred_2;
                    _3469 = frontier_phi_82_pred_3;
                    _3467 = frontier_phi_82_pred_4;
                    _3465 = frontier_phi_82_pred_5;
                    uint _3631 = _3630 + 1u;
                    if (_3631 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3624 = _3465;
                        _3625 = _3467;
                        _3626 = _3469;
                        _3627 = _3471;
                        _3628 = _3473;
                        _3629 = _3475;
                        _3630 = _3631;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3471;
                frontier_phi_63_64_ladder_1 = _3475;
                frontier_phi_63_64_ladder_2 = _3473;
                frontier_phi_63_64_ladder_3 = _3469;
                frontier_phi_63_64_ladder_4 = _3467;
                frontier_phi_63_64_ladder_5 = _3465;
            }
            else
            {
                frontier_phi_63_64_ladder = _3350;
                frontier_phi_63_64_ladder_1 = _3354;
                frontier_phi_63_64_ladder_2 = _3352;
                frontier_phi_63_64_ladder_3 = _3348;
                frontier_phi_63_64_ladder_4 = _3346;
                frontier_phi_63_64_ladder_5 = _3344;
            }
            _3464 = frontier_phi_63_64_ladder_5;
            _3466 = frontier_phi_63_64_ladder_4;
            _3468 = frontier_phi_63_64_ladder_3;
            _3470 = frontier_phi_63_64_ladder;
            _3472 = frontier_phi_63_64_ladder_2;
            _3474 = frontier_phi_63_64_ladder_1;
        }
        float _3479 = isnan(1.0) ? _1219 : (isnan(_1219) ? 1.0 : min(_1219, 1.0));
        _3277 = (_3479 * _3470) + _2789;
        _3279 = (_3479 * _3472) + _2791;
        _3281 = (_3479 * _3474) + _2793;
        _3283 = ((_3464 * _1203) * _3479) + _3127;
        _3285 = ((_3466 * _1205) * _3479) + _3129;
        _3287 = ((_3468 * _1206) * _3479) + _3131;
    }
    else
    {
        _3277 = _2789;
        _3279 = _2791;
        _3281 = _2793;
        _3283 = _3127;
        _3285 = _3129;
        _3287 = _3131;
    }
    float _5352 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _5363 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _5374 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _3304 = ((isnan(1.0) ? _5352 : (isnan(_5352) ? 1.0 : min(_5352, 1.0))) * (_3277 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1219))) + ((_3283 + ((isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    float _3305 = ((isnan(1.0) ? _5363 : (isnan(_5363) ? 1.0 : min(_5363, 1.0))) * (_3279 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1219))) + ((_3285 + ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    float _3306 = ((isnan(1.0) ? _5374 : (isnan(_5374) ? 1.0 : min(_5374, 1.0))) * (_3281 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1219))) + ((_3287 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2057)) * cbPerFrame._m0[3u].x);
    uint _3307 = _297 + 6u;
    float _3315 = _1141 / cbSceneParam._m0[86u].x;
    float _3316 = _1142 / cbSceneParam._m0[86u].y;
    vec4 _3330 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3315, _3316, (log2((isnan(cbSceneParam._m0[77u].w) ? _1064 : (isnan(_1064) ? cbSceneParam._m0[77u].w : min(_1064, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3332 = _3330.x;
    float _3333 = _3330.y;
    float _3334 = _3330.z;
    float _3335 = _3330.w;
    float _3406;
    float _3408;
    float _3410;
    float _3412;
    if (_1064 > cbSceneParam._m0[78u].w)
    {
        float _3369 = isnan(_1064) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1064 : min(cbSceneParam._m0[80u].w, _1064));
        float _3370 = _3369 / _1064;
        float _3381 = _3370 * _1114;
        float _3382 = _1115 * _3370;
        float _3383 = (-0.0) - _3382;
        float _3384 = _3370 * _1116;
        float _3386 = (cbSceneParam._m0[77u].w * _3383) / _3369;
        float _3387 = _3386 + cbSceneParam._m0[79u].w;
        float _3388 = cbSceneParam._m0[79u].w - _3382;
        float _3394 = sqrt(((_3381 * _3381) + (_3382 * _3382)) + (_3384 * _3384));
        float _3397 = (1.0 - (cbSceneParam._m0[77u].w / _3369)) * _3394;
        float _3402 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3404 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3581;
        if (abs((_3383 - _3386) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3581 = ((((_3387 > 0.0) ? exp2(_3402 * _3387) : (2.0 - exp2(_3404 * _3387))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3397;
        }
        else
        {
            float _3525 = 1.0 / cbSceneParam._m0[80u].x;
            float _3526 = isnan(_3388) ? _3387 : (isnan(_3387) ? _3388 : max(_3387, _3388));
            float _3527 = isnan(_3388) ? _3387 : (isnan(_3387) ? _3388 : min(_3387, _3388));
            float _3536 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : min(_3526, 0.0));
            float _3537 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : min(_3527, 0.0));
            _3581 = ((abs(_3394 / _3383) * cbSceneParam._m0[80u].y) * ((((_3536 - _3537) * 2.0) - ((exp2(_3402 * (isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0)))) - exp2(_3402 * (isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))))) * _3525)) - ((exp2(_3404 * _3536) - exp2(_3404 * _3537)) * _3525))) + (_3397 * cbSceneParam._m0[80u].z);
        }
        vec4 _3583 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3315, _3316, 1.0), 0.0);
        float _3592 = exp2((_3581 * (-1.44269502162933349609375)) * (1.0 - _3583.w));
        float _3593 = log2(_3592);
        float _3609 = log2(_3335);
        _3406 = (exp2(_3609 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3593 * cbSceneParam._m0[78u].x)) * _3583.x) / cbSceneParam._m0[78u].x)) + _3332;
        _3408 = (exp2(_3609 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3593 * cbSceneParam._m0[78u].y)) * _3583.y) / cbSceneParam._m0[78u].y)) + _3333;
        _3410 = (exp2(_3609 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3593 * cbSceneParam._m0[78u].z)) * _3583.z) / cbSceneParam._m0[78u].z)) + _3334;
        _3412 = _3592 * _3335;
    }
    else
    {
        _3406 = _3332;
        _3408 = _3333;
        _3410 = _3334;
        _3412 = _3335;
    }
    bool _3619;
    vec4 _3422;
    vec4 _3444;
    float _3446;
    float _3450;
    float _3451;
    float _3452;
    float _3453;
    bool _3463;
    for (;;)
    {
        _3422 = cbMatDynParam._m0[0u];
        float _3424 = roundEven(_3422.y);
        bool _3425 = _3424 == 3.0;
        float _3426 = log2(_3412);
        float _3433 = exp2(_3426 * cbSceneParam._m0[78u].x) * _3304;
        float _3434 = exp2(_3426 * cbSceneParam._m0[78u].y) * _3305;
        float _3435 = exp2(_3426 * cbSceneParam._m0[78u].z) * _3306;
        float _3442 = _1130 + (-0.5);
        _3444 = cbMtdParam._m0[1u];
        _3446 = _3444.y * _3442;
        float _3449 = (_3424 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3450 = _3449 * (_3425 ? _3433 : (_3433 + (cbSceneParam._m0[72u].w * _3406)));
        _3451 = _3449 * (_3425 ? _3434 : (_3434 + (cbSceneParam._m0[72u].w * _3408)));
        _3452 = _3449 * (_3425 ? _3435 : (_3435 + (cbSceneParam._m0[72u].w * _3410)));
        _3453 = _3442 * 0.999000012874603271484375;
        _3463 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3463)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3453) < 0.5)
            {
                _3619 = true;
                break;
            }
        }
        uint _3560 = _1179 + uint(_3422.w);
        if ((cbInstanceData._m0[_3560].w < 1.0) && ((cbInstanceData._m0[_3560].w + _3453) < 0.5))
        {
            _3619 = true;
            break;
        }
        if ((_3446 + 1.0) < _3444.x)
        {
            _3619 = true;
            break;
        }
        _3619 = false;
        break;
    }
    float _3823;
    if (_3619)
    {
        discard_state = true;
        _3823 = 0.0;
    }
    else
    {
        _3823 = cbInstanceData._m0[_3307].w;
    }
    SV_Target.x = _3450;
    SV_Target.y = _3451;
    SV_Target.z = _3452;
    SV_Target.w = _3823;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3307].w;
    discard_exit();
}


