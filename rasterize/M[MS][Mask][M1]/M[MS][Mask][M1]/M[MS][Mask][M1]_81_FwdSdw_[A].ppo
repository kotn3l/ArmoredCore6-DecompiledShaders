#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1382;
float _4043;
float _4044;
float _4045;
float _4046;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _380 = _378.x;
    float _392 = dot(vec4(_380, _378.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _409 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _342.x) * 2.0) - ((((_380 - _392) * cbMtdParam._m0[23u].w) + _392) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4055 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _417 = (_410 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _418 = (_410 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _419 = (_410 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _468 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _482 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _342.y) * 2.0) - ((((_458 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4066 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _490 = (_483 * ((_436.x * cbMtdParam._m0[13u].x) - _417)) + _417;
    float _491 = (_483 * ((_436.y * cbMtdParam._m0[13u].y) - _418)) + _418;
    float _492 = (_483 * ((_436.z * cbMtdParam._m0[13u].z) - _419)) + _419;
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _550 = _548.x;
    float _551 = _548.y;
    float _552 = _548.z;
    float _559 = ((_531.x - _550) * _410) + _550;
    float _560 = ((_531.y - _551) * _410) + _551;
    float _561 = ((_531.z - _552) * _410) + _552;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _586 = ((_573.z - _561) * _483) + _561;
    float _589 = ((((_573.x - _559) * _483) + _559) * 2.0) + (-1.0);
    float _591 = ((((_573.y - _560) * _483) + _560) * 2.0) + (-1.0);
    float _592 = dot(vec2(_589, _591), vec2(_589, _591));
    float _4077 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _597 = sqrt(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _638 = _636.x;
    float _639 = 1.0 - _638;
    float _655 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_638 - _639) * cbMtdParam._m0[24u].z) + _639) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4088 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _656 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _663 = (_656 * ((_511.x * cbMtdParam._m0[18u].x) - _490)) + _490;
    float _664 = (_656 * ((_511.y * cbMtdParam._m0[18u].y) - _491)) + _491;
    float _665 = (_656 * ((_511.z * cbMtdParam._m0[18u].z) - _492)) + _492;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _693 = _691.x;
    float _711 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _693) * _410) + _693;
    float _728 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _711) * _483) + _711;
    float _732 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _728) * cbMtdParam._m0[19u].z) + _728;
    float _734 = _732 - (_732 * _656);
    float _738 = (cbMtdParam._m0[19u].w * (_611.z - _586)) + _586;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _758 = (_751.x * 2.0) + (-1.0);
    float _759 = (_751.y * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _4099 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _768 = (_656 * (_751.z - _738)) + _738;
    float _771 = (((_611.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _589;
    float _772 = (((_611.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _591;
    float _784 = (((_758 - _771) + (cbMtdParam._m0[21u].x * _771)) * _656) + _771;
    float _785 = (((_759 - _772) + (cbMtdParam._m0[21u].x * _772)) * _656) + _772;
    float _786 = (_656 * (sqrt(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) - _597)) + _597;
    float _788 = cbMtdParam._m0[22u].x + _611.w;
    float _791 = fma(_786, _241 * NORMAL.x, fma(_785, _248 * TANGENT.x, (_234 * _226) * _784));
    float _794 = fma(_786, _241 * NORMAL.y, fma(_785, _248 * TANGENT.y, (_234 * _227) * _784));
    float _797 = fma(_786, _241 * NORMAL.z, fma(_785, _248 * TANGENT.z, (_234 * _228) * _784));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _4110 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _805 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4132 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4143 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4154 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4165 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _810 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _824 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _875 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _865);
    float _876 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _865);
    float _877 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _865);
    float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
    float _882 = _875 * _881;
    float _883 = _876 * _881;
    float _884 = _877 * _881;
    vec4 _889 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _891 = _889.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1063 = sqrt(((_875 * _875) + (_876 * _876)) + (_877 * _877));
        float _1069 = (cbMatDynParam._m0[5u].x * _1063) + cbMatDynParam._m0[5u].y;
        float _4176 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1074 = (cbMatDynParam._m0[5u].z * _1063) + cbMatDynParam._m0[5u].w;
        float _4187 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) - _1070)) + _1070) < ((_891 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _921 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _924 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _927 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _940 = _254 + 9u;
    uint _941 = _940 + uint(cbMatDynParam._m0[0u].w);
    float _947 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_941].x;
    float _948 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_941].y;
    float _949 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_941].z;
    float _4198 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _953 = 1.0 - _810;
    float _954 = _950 * _953;
    float _955 = _951 * _953;
    float _956 = _952 * _953;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _810;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _810;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _810;
    float _964 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    vec4 _976 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _980 = ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * TEXCOORD_5.w) * _976.x;
    float _981 = dot(vec3(_802, _803, _804), vec3(_882, _883, _884));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _802) - _882;
    float _989 = (_984 * _803) - _883;
    float _990 = (_984 * _804) - _884;
    float _994 = abs(dot(vec3(_882, _883, _884), vec3(_802, _803, _804)));
    float _4231 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_805);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1015 = (1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1016 = _1009 * _996;
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1052, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044));
        float _1110 = fma(_1052, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044));
        float _1114 = fma(_1052, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044));
        float _1139 = _1044 + _802;
        float _1140 = _1048 + _803;
        float _1141 = _1052 + _804;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_802, _803, _804), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4279 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_802, _803, _804), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4312 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_802, _803, _804), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4345 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1423 = fma(_1052, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044));
        float _1427 = fma(_1052, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044));
        float _1431 = fma(_1052, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044));
        float _1454 = _1044 + _802;
        float _1455 = _1048 + _803;
        float _1456 = _1052 + _804;
        float _1466 = fma(_1456, cbModelParam._m0[30u].z, fma(_1455, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1454)) - _1423;
        float _1467 = fma(_1456, cbModelParam._m0[31u].z, fma(_1455, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1454)) - _1427;
        float _1468 = fma(_1456, cbModelParam._m0[32u].z, fma(_1455, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1454)) - _1431;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1423 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1427 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[35u].z) + ((((((_1431 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1522 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1489.x + (-0.5));
        float _1524 = _1522 * (_1489.y + (-0.5));
        float _1525 = _1522 * (_1489.z + (-0.5));
        float _1532 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1496.x + (-0.5));
        float _1534 = _1532 * (_1496.y + (-0.5));
        float _1535 = _1532 * (_1496.z + (-0.5));
        float _1542 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1543 = _1542 * (_1503.x + (-0.5));
        float _1544 = _1542 * (_1503.y + (-0.5));
        float _1545 = _1542 * (_1503.z + (-0.5));
        float _1552 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1553 = _1552 * (_1510.x + (-0.5));
        float _1554 = _1552 * (_1510.y + (-0.5));
        float _1555 = _1552 * (_1510.z + (-0.5));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = _1523 * 0.5;
        float _1560 = _1533 * 0.5;
        float _1561 = _1543 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_802, _803, _804), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4408 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1586 + 1.0))) + _1591) * _1556;
        float _1601 = _1524 * 0.5;
        float _1602 = _1534 * 0.5;
        float _1603 = _1544 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_802, _803, _804), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4419 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4430 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4441 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_1628 + 1.0))) + _1633) * _1557;
        float _1643 = _1525 * 0.5;
        float _1644 = _1535 * 0.5;
        float _1645 = _1545 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_802, _803, _804), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4452 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4463 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4474 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_1670 + 1.0))) + _1675) * _1558;
        _1692 = _1525;
        _1693 = _1524;
        _1694 = _1523;
        _1695 = _1535;
        _1696 = _1534;
        _1697 = _1533;
        _1698 = _1545;
        _1699 = _1544;
        _1700 = _1543;
        _1701 = _1558;
        _1702 = _1557;
        _1703 = _1556;
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1706 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
    }
    else
    {
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = _1382;
        _1703 = _1382;
        _1704 = 0.0;
        _1705 = 0.0;
        _1706 = 0.0;
    }
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1394)) + _1394;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1395)) + _1395;
    float _1718 = (cbModelParam._m0[1u].x * (_1706 - _1396)) + _1396;
    float _1739 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1742 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1745 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1716));
    float _1760 = _988 * 0.5;
    float _1761 = _989 * 0.5;
    float _1762 = _990 * 0.5;
    float _1763 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1694, _1697, _1700, _1703));
    float _1766 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1769 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1803;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1776 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1780 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1784 = dot(vec4(_1760, _1761, _1762, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1791 = dot(vec4(cbModelParam._m0[39u]), vec4(_1760, _1761, _1762, 1.0));
        _1803 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1791) ? 0.0 : (isnan(0.0) ? _1791 : max(0.0, _1791))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1803 = 1.0;
    }
    float _1814;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1805 = dot(vec4(cbModelParam._m0[40u]), vec4(_1760, _1761, _1762, 1.0));
        _1814 = dot(vec3(isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1814 = 1.0;
    }
    float _1818 = (_1814 * cbModelParam._m0[1u].x) + (_1803 * (1.0 - cbModelParam._m0[1u].x));
    float _1828 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1828 : min(cbModelParam._m0[25u].z, _1828));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1052, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1052, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1052, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1890 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1893 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2092;
        if (_1890 > 0.0)
        {
            _2092 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2092 = frontier_phi_26_22_ladder;
        }
        float _2387;
        if (_1893 > 0.0)
        {
            _2387 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2387 = frontier_phi_38_33_ladder;
        }
        float _2389 = isnan(_2092) ? _1921 : (isnan(_1921) ? _2092 : min(_1921, _2092));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1887) + _1876;
        float _2395 = (_2390 * _1890) + _1880;
        float _2396 = (_2390 * _1893) + _1884;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1829);
            frontier_phi_16_38_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1829);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1971 = fma(_1052, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044)) + cbModelParam._m0[21u].w;
        float _1975 = fma(_1052, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044)) + cbModelParam._m0[22u].w;
        float _1979 = fma(_1052, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044)) + cbModelParam._m0[23u].w;
        float _1982 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1985 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1988 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2097;
        if (_1982 > 0.0)
        {
            _2097 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2097 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1985 > 0.0)
        {
            _2414 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2752;
        if (_1988 > 0.0)
        {
            _2752 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2752 = frontier_phi_50_47_ladder;
        }
        float _2754 = isnan(_2414) ? _2097 : (isnan(_2097) ? _2414 : min(_2097, _2414));
        float _2755 = isnan(_2752) ? _2754 : (isnan(_2754) ? _2752 : min(_2754, _2752));
        float _2759 = (_2755 * _1982) + _1971;
        float _2760 = (_2755 * _1985) + _1975;
        float _2761 = (_2755 * _1988) + _1979;
        float _2762 = _2755 * 9.9999997473787516355514526367188e-05;
        float _2763 = (-1.0) - _2762;
        float _2765 = _2762 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2761 > _2765) || ((_2761 < _2763) || ((_2760 > _2765) || ((_2760 < _2763) || ((_2759 < _2763) || (_2759 > _2765))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2761, cbModelParam._m0[17u].z, fma(_2760, cbModelParam._m0[17u].y, _2759 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2761, cbModelParam._m0[18u].z, fma(_2760, cbModelParam._m0[18u].y, _2759 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2761, cbModelParam._m0[19u].z, fma(_2760, cbModelParam._m0[19u].y, _2759 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_50_ladder = _2883.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2883.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2883.x * cbModelParam._m0[1u].z;
        }
        _2007 = frontier_phi_25_50_ladder_2;
        _2009 = frontier_phi_25_50_ladder_1;
        _2011 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1918);
        _2007 = _1991.x * cbModelParam._m0[1u].z;
        _2009 = _1991.y * cbModelParam._m0[1u].z;
        _2011 = _1991.z * cbModelParam._m0[1u].z;
    }
    float _2024 = (((_1015 * _964) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2026 = (((_1015 * _966) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_2009 - _1911)) + _1911);
    float _2028 = (((_1015 * _967) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_2011 - _1913)) + _1913);
    float _2031 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2024 * cbSceneParam._m0[91u].x));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2084 = _2071 / _2083;
    float _2085 = _2075 / _2083;
    float _2086 = _2079 / _2083;
    float _2233;
    float _2234;
    float _2235;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2113 = ((uint(_2086 > cbSceneParam._m0[59u].y) + uint(_2086 > cbSceneParam._m0[59u].x)) + uint(_2086 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2114 = _2113 + 43u;
        uint _2122 = _2113 + 44u;
        uint _2130 = _2113 + 45u;
        uint _2138 = _2113 + 46u;
        float _2149 = fma(_2083, cbSceneParam._m0[_2114].w, fma(_2079, cbSceneParam._m0[_2114].z, fma(_2075, cbSceneParam._m0[_2114].y, _2071 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2083, cbSceneParam._m0[_2122].w, fma(_2079, cbSceneParam._m0[_2122].z, fma(_2075, cbSceneParam._m0[_2122].y, _2071 * cbSceneParam._m0[_2122].x)));
        float _2161 = fma(_2083, cbSceneParam._m0[_2138].w, fma(_2079, cbSceneParam._m0[_2138].z, fma(_2075, cbSceneParam._m0[_2138].y, _2071 * cbSceneParam._m0[_2138].x)));
        float _2166 = cbSceneParam._m0[33u].z * _2161;
        float _2168 = cbSceneParam._m0[33u].w * _2161;
        float _2171 = fma(_2083, cbSceneParam._m0[_2130].w, fma(_2079, cbSceneParam._m0[_2130].z, fma(_2075, cbSceneParam._m0[_2130].y, _2071 * cbSceneParam._m0[_2130].x))) / _2161;
        float _2219 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
        float _4600 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2226 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2166 + _2149) / _2161, (_2168 + _2153) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2149) / _2161, (_2153 - _2166) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2166) / _2161, (_2153 - _2168) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2168) / _2161, (_2166 + _2153) / _2161), _2171), 0.0)).x), vec4(0.25)));
        _2233 = 1.0 - (_2226 * cbSceneParam._m0[34u].x);
        _2234 = 1.0 - (_2226 * cbSceneParam._m0[34u].y);
        _2235 = 1.0 - (_2226 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2233 = 1.0;
        _2234 = 1.0;
        _2235 = 1.0;
    }
    float _2299;
    float _2301;
    float _2303;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2287 = fma(_2083, cbSceneParam._m0[63u].w, fma(_2079, cbSceneParam._m0[63u].z, fma(_2075, cbSceneParam._m0[63u].y, _2071 * cbSceneParam._m0[63u].x)));
        float _2288 = fma(_2083, cbSceneParam._m0[60u].w, fma(_2079, cbSceneParam._m0[60u].z, fma(_2075, cbSceneParam._m0[60u].y, _2071 * cbSceneParam._m0[60u].x))) / _2287;
        float _2289 = fma(_2083, cbSceneParam._m0[61u].w, fma(_2079, cbSceneParam._m0[61u].z, fma(_2075, cbSceneParam._m0[61u].y, _2071 * cbSceneParam._m0[61u].x))) / _2287;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2288 >= cbSceneParam._m0[64u].x) && (_2289 >= cbSceneParam._m0[64u].y)) && (_2288 <= cbSceneParam._m0[64u].z)) && (_2289 <= cbSceneParam._m0[64u].w))
        {
            float _2427 = fma(_2083, cbSceneParam._m0[62u].w, fma(_2079, cbSceneParam._m0[62u].z, fma(_2075, cbSceneParam._m0[62u].y, _2071 * cbSceneParam._m0[62u].x))) / _2287;
            float _2431 = isnan(cbSceneParam._m0[41u].w) ? _2427 : (isnan(_2427) ? cbSceneParam._m0[41u].w : max(_2427, cbSceneParam._m0[41u].w));
            float _2474 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
            float _4616 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
            float _2481 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2288, cbSceneParam._m0[33u].w + _2289), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2288, _2289 - cbSceneParam._m0[33u].z), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].z, _2289 - cbSceneParam._m0[33u].w), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2289), _2431), 0.0)).x), vec4(0.25)));
            float _2485 = 1.0 - (_2481 * cbSceneParam._m0[34u].x);
            float _2486 = 1.0 - (_2481 * cbSceneParam._m0[34u].y);
            float _2487 = 1.0 - (_2481 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_37_36_ladder_1 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_37_36_ladder_2 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
        }
        else
        {
            frontier_phi_37_36_ladder = _2235;
            frontier_phi_37_36_ladder_1 = _2234;
            frontier_phi_37_36_ladder_2 = _2233;
        }
        _2299 = frontier_phi_37_36_ladder_2;
        _2301 = frontier_phi_37_36_ladder_1;
        _2303 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2299 = _2233;
        _2301 = _2234;
        _2303 = _2235;
    }
    uvec4 _2308 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2310 = _2308.x * 14u;
    uint _2311 = _2310 + 13u;
    float _2318 = _980 + (-1.0);
    float _2323 = (cbLight._m0[_2311].x * _2318) + 1.0;
    float _2324 = (cbLight._m0[_2311].y * _2318) + 1.0;
    float _2325 = (cbLight._m0[_2311].z * _2318) + 1.0;
    float _2326 = (cbLight._m0[_2311].w * _2318) + 1.0;
    uint _2327 = _2310 + 5u;
    float _2333 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2337 = _2310 + 4u;
    float _2346 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2350 = _2310 | 1u;
    float _2361 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_802, _803, _804));
    float _2364 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_802, _803, _804));
    float _4652 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _4663 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2369 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * 0.3183098733425140380859375;
    float _2371 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * 0.3183098733425140380859375;
    float _2378 = ((cbLight._m0[_2327].x * _2333) * _2371) + (((cbLight._m0[_2337].x * _2299) * _2346) * _2369);
    float _2379 = ((_2333 * cbLight._m0[_2327].y) * _2371) + (((cbLight._m0[_2337].y * _2301) * _2346) * _2369);
    float _2380 = ((_2333 * cbLight._m0[_2327].z) * _2371) + (((cbLight._m0[_2337].z * _2303) * _2346) * _2369);
    uvec4 _2384 = floatBitsToUint(cbLight._m0[_2310 + 12u]);
    bool _2386 = _2384.x == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2386)
    {
        _2488 = _2378;
        _2490 = _2379;
        _2492 = _2380;
    }
    else
    {
        uint _2496 = _2310 + 6u;
        float _2512 = (dot(vec3(cbLight._m0[_2310 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2513 = _2512 * _2512;
        float _4674 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2514 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2515 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2488 = (((cbLight._m0[_2496].x * 0.3183098733425140380859375) * _2514) * _2515) + _2378;
        _2490 = (((cbLight._m0[_2496].y * 0.3183098733425140380859375) * _2514) * _2515) + _2379;
        _2492 = (((cbLight._m0[_2496].z * 0.3183098733425140380859375) * _2514) * _2515) + _2380;
    }
    bool _2495 = _2384.y == 0u;
    float _2550;
    float _2552;
    float _2554;
    if (_2495)
    {
        _2550 = _2488;
        _2552 = _2490;
        _2554 = _2492;
    }
    else
    {
        uint _2723 = _2310 + 7u;
        float _2739 = (dot(vec3(cbLight._m0[_2310 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2740 = _2739 * _2739;
        float _4690 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2741 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2742 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2550 = (((cbLight._m0[_2723].x * 0.3183098733425140380859375) * _2741) * _2742) + _2488;
        _2552 = (((cbLight._m0[_2723].y * 0.3183098733425140380859375) * _2741) * _2742) + _2490;
        _2554 = (((cbLight._m0[_2723].z * 0.3183098733425140380859375) * _2741) * _2742) + _2492;
    }
    uint _2557 = _2310 + 8u;
    float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _805) * 0.949999988079071044921875);
    float _2571 = _2570 * _2570;
    float _2572 = cbLight._m0[_2310].x + _882;
    float _2573 = cbLight._m0[_2310].y + _883;
    float _2574 = cbLight._m0[_2310].z + _884;
    float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
    float _2579 = _2578 * _2572;
    float _2580 = _2578 * _2573;
    float _2581 = _2578 * _2574;
    float _2582 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2310].xyz));
    float _4706 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _4717 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2586 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _2587 = dot(vec3(_802, _803, _804), vec3(_2579, _2580, _2581));
    float _4728 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2579, _2580, _2581));
    float _4739 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2571 * _2571;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) * 5.0);
    float _2608 = 0.959999978542327880859375 - _961;
    float _2610 = 0.959999978542327880859375 - _962;
    float _2611 = 0.959999978542327880859375 - _963;
    float _2618 = 1.0 - _2571;
    float _2629 = (0.5 / (((_2586 * ((_2585 * _2618) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2618) + _2571) * _2585))) * _2585;
    float _4750 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2631 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    uint _2645 = _2310 + 9u;
    float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _805) * 0.949999988079071044921875);
    float _2657 = _2656 * _2656;
    float _2658 = cbLight._m0[_2350].x + _882;
    float _2659 = cbLight._m0[_2350].y + _883;
    float _2660 = cbLight._m0[_2350].z + _884;
    float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
    float _2665 = _2664 * _2658;
    float _2666 = _2664 * _2659;
    float _2667 = _2664 * _2660;
    float _2668 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2350].xyz));
    float _4761 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
    float _2672 = dot(vec3(_802, _803, _804), vec3(_2665, _2666, _2667));
    float _4772 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2676 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2665, _2666, _2667));
    float _4783 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2680 = _2657 * _2657;
    float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
    float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) * 5.0);
    float _2698 = 1.0 - _2657;
    float _2708 = (0.5 / (((_2586 * ((_2671 * _2698) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2698) + _2657) * _2671))) * _2671;
    float _4794 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2710 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
    float _2720 = (((((_2691 * _2608) + _964) * cbLight._m0[_2645].x) * _2710) * _2333) + ((((cbLight._m0[_2557].x * _2299) * ((_2607 * _2608) + _964)) * _2631) * _2346);
    float _2721 = (((((_2691 * _2610) + _966) * cbLight._m0[_2645].y) * _2710) * _2333) + ((((cbLight._m0[_2557].y * _2301) * ((_2607 * _2610) + _966)) * _2631) * _2346);
    float _2722 = (((((_2691 * _2611) + _967) * cbLight._m0[_2645].z) * _2710) * _2333) + ((((cbLight._m0[_2557].z * _2303) * ((_2607 * _2611) + _967)) * _2631) * _2346);
    float _2778;
    float _2780;
    float _2782;
    if (_2386)
    {
        _2778 = _2720;
        _2780 = _2721;
        _2782 = _2722;
    }
    else
    {
        uint _2784 = _2310 + 2u;
        uint _2788 = _2310 + 10u;
        float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2784].w)) * _805) * 0.949999988079071044921875);
        float _2803 = _2802 * _2802;
        float _2804 = cbLight._m0[_2784].x + _882;
        float _2805 = cbLight._m0[_2784].y + _883;
        float _2806 = cbLight._m0[_2784].z + _884;
        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
        float _2811 = _2810 * _2804;
        float _2812 = _2810 * _2805;
        float _2813 = _2810 * _2806;
        float _2814 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2784].xyz));
        float _4805 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _2818 = dot(vec3(_802, _803, _804), vec3(_2811, _2812, _2813));
        float _4816 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2822 = dot(vec3(cbLight._m0[_2784].xyz), vec3(_2811, _2812, _2813));
        float _4827 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2826 = _2803 * _2803;
        float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
        float _2837 = exp2(log2(1.0 - (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0)))) * 5.0);
        float _2844 = 1.0 - _2803;
        float _2854 = (0.5 / (((_2586 * ((_2817 * _2844) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2844) + _2803) * _2817))) * _2817;
        float _4838 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2856 = (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
        float _2857 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2778 = (((((_2837 * _2608) + _964) * cbLight._m0[_2788].x) * _2856) * _2857) + _2720;
        _2780 = (((((_2837 * _2610) + _966) * cbLight._m0[_2788].y) * _2856) * _2857) + _2721;
        _2782 = (((((_2837 * _2611) + _967) * cbLight._m0[_2788].z) * _2856) * _2857) + _2722;
    }
    float _2888;
    float _2890;
    float _2892;
    if (_2495)
    {
        _2888 = _2778;
        _2890 = _2780;
        _2892 = _2782;
    }
    else
    {
        uint _2899 = _2310 + 3u;
        uint _2903 = _2310 + 11u;
        float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _805) * 0.949999988079071044921875);
        float _2918 = _2917 * _2917;
        float _2919 = cbLight._m0[_2899].x + _882;
        float _2920 = cbLight._m0[_2899].y + _883;
        float _2921 = cbLight._m0[_2899].z + _884;
        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
        float _2926 = _2925 * _2919;
        float _2927 = _2925 * _2920;
        float _2928 = _2925 * _2921;
        float _2929 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2899].xyz));
        float _4854 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2933 = dot(vec3(_802, _803, _804), vec3(_2926, _2927, _2928));
        float _4865 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2937 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_2926, _2927, _2928));
        float _4876 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2941 = _2918 * _2918;
        float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
        float _2952 = exp2(log2(1.0 - (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) * 5.0);
        float _2959 = 1.0 - _2918;
        float _2969 = (0.5 / (((_2586 * ((_2932 * _2959) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2959) + _2918) * _2932))) * _2932;
        float _4887 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2971 = (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
        float _2972 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2888 = (((((_2952 * _2608) + _964) * cbLight._m0[_2903].x) * _2971) * _2972) + _2778;
        _2890 = (((((_2952 * _2610) + _966) * cbLight._m0[_2903].y) * _2971) * _2972) + _2780;
        _2892 = (((((_2952 * _2611) + _967) * cbLight._m0[_2903].z) * _2971) * _2972) + _2782;
    }
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_2308.y == 0u)
    {
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.x;
        uint _3005 = uint((float(_2993.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2994))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2994)));
        float _3015 = (log2(_2086 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3016 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        uint _3019 = uint(isnan(14.0) ? _3016 : (isnan(_3016) ? 14.0 : min(_3016, 14.0)));
        uvec4 _3024 = texelFetch(g_lightClusterGridBuffer, int(((_3019 << 2u) + (_3005 << 6u)) >> 2u));
        uint _3025 = _3024.x;
        uint _3026 = _2993.z;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        if (((((1u << ((_3026 >> 4u) & 15u)) + 4294967295u) & _3025) == 0u) || ((_3026 & 240u) == 0u))
        {
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
        }
        else
        {
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            uint _3264 = 0u;
            uint _3273;
            bool _3274;
            for (;;)
            {
                _3273 = texelFetch(g_lightClassification, int((((_3019 << 5u) + (_3005 << 9u)) + (_3264 << 2u)) >> 2u)).x;
                _3274 = _3273 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3274)
                {
                    frontier_phi_71_pred = _3263;
                    frontier_phi_71_pred_1 = _3262;
                    frontier_phi_71_pred_2 = _3261;
                    frontier_phi_71_pred_3 = _3260;
                    frontier_phi_71_pred_4 = _3259;
                    frontier_phi_71_pred_5 = _3258;
                }
                else
                {
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    uint _3409;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3273;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    for (;;)
                    {
                        uint _3413 = uint(findLSB(_3409)) + (_3264 << 5u);
                        uint _3410 = (_3409 + 4294967295u) & _3409;
                        uint _3415 = _3413 * 48u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3435 = (_3413 * 48u) + 4u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3454 = (_3413 * 48u) + 8u;
                        vec3 _3465 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x));
                        float _3469 = _3429.x - _2084;
                        float _3470 = _3429.y - _2085;
                        float _3471 = _3429.z - _2086;
                        float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                        float _3475 = inversesqrt(_3472);
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3479 = dot(vec3(_921, _924, _927), vec3(_3476, _3477, _3478));
                        float _3484 = 1.0 - (_3472 * _3429.w);
                        float _4913 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
                        float _3486 = sqrt(_3472) * _3448.w;
                        float _3489 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3479) + _3490;
                        float _3496 = _3486 * _3486;
                        float _3500 = ((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3485) / ((_3496 * 0.699999988079071044921875) + 1.0);
                        float _3504 = (-0.0) - _2084;
                        float _3505 = (-0.0) - _2085;
                        float _3506 = (-0.0) - _2086;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3511 = _3510 * _3504;
                        float _3512 = _3510 * _3505;
                        float _3513 = _3510 * _3506;
                        float _3520 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                        float _3521 = 1.0 - _996;
                        float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                        float _3529 = _3528 * _3528;
                        float _3530 = _3529 * _3529;
                        float _3531 = _3511 + _3476;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3541 = dot(vec3(_921, _924, _927), vec3(_3511, _3512, _3513));
                        float _4929 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3545 = dot(vec3(_921, _924, _927), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                        float _4940 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                        float _3553 = _3489 * _3529;
                        float _3554 = _3553 * _3553;
                        float _3557 = ((1.0 - _3554) * _3479) + _3554;
                        float _4951 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3559 = 1.0 - _3529;
                        float _3569 = (0.5 / (((_3558 * ((_3544 * _3559) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3529) * _3544))) * _3558;
                        float _4962 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3580 = (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) / ((_3552 * _3552) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125))) * _3485;
                        _3333 = (_3500 * _3448.x) + _3406;
                        _3334 = (_3500 * _3448.y) + _3407;
                        _3335 = (_3500 * _3448.z) + _3408;
                        _3330 = (_3580 * _3465.x) + _3403;
                        _3331 = (_3580 * _3465.y) + _3404;
                        _3332 = (_3580 * _3465.z) + _3405;
                        if (_3410 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3410;
                        }
                    }
                    frontier_phi_71_pred = _3335;
                    frontier_phi_71_pred_1 = _3334;
                    frontier_phi_71_pred_2 = _3333;
                    frontier_phi_71_pred_3 = _3332;
                    frontier_phi_71_pred_4 = _3331;
                    frontier_phi_71_pred_5 = _3330;
                }
                _3116 = frontier_phi_71_pred;
                _3114 = frontier_phi_71_pred_1;
                _3112 = frontier_phi_71_pred_2;
                _3110 = frontier_phi_71_pred_3;
                _3108 = frontier_phi_71_pred_4;
                _3106 = frontier_phi_71_pred_5;
                uint _3265 = _3264 + 1u;
                if (_3265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3258 = _3106;
                    _3259 = _3108;
                    _3260 = _3110;
                    _3261 = _3112;
                    _3262 = _3114;
                    _3263 = _3116;
                    _3264 = _3265;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
        }
        uvec4 _3119 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3120 = _3119.z;
        uint _3122 = (_3120 >> 8u) & 15u;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        if (((4294967295u << _3122) & _3025) == 0u)
        {
            _3226 = _3105;
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
        }
        else
        {
            float _3251 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
            float _3252 = _3251 * _2084;
            float _3253 = _3251 * _2085;
            float _3254 = _3251 * _2086;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3122 < ((_3120 >> 12u) & 15u))
            {
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3386 = _3105;
                float _3387 = _3107;
                float _3388 = _3109;
                float _3389 = _3111;
                float _3390 = _3113;
                float _3391 = _3115;
                uint _3392 = _3122;
                uint _3401;
                bool _3402;
                for (;;)
                {
                    _3401 = texelFetch(g_lightClassification, int((((_3019 << 5u) + (_3005 << 9u)) + (_3392 << 2u)) >> 2u)).x;
                    _3402 = _3401 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3402)
                    {
                        frontier_phi_82_pred = _3391;
                        frontier_phi_82_pred_1 = _3390;
                        frontier_phi_82_pred_2 = _3389;
                        frontier_phi_82_pred_3 = _3388;
                        frontier_phi_82_pred_4 = _3387;
                        frontier_phi_82_pred_5 = _3386;
                    }
                    else
                    {
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        uint _3613 = _3401;
                        uint _3614;
                        vec4 _3639;
                        float _3640;
                        vec4 _3655;
                        vec3 _3667;
                        vec4 _3682;
                        vec4 _3697;
                        float _3743;
                        bool _3744;
                        for (;;)
                        {
                            uint _3624 = ((_3392 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3613));
                            _3614 = (_3613 + 4294967295u) & _3613;
                            uint _3626 = _3624 * 40u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3640 = _3639.w;
                            uint _3642 = (_3624 * 40u) + 4u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3624 * 40u) + 8u;
                            _3667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x));
                            uint _3669 = (_3624 * 40u) + 16u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3624 * 40u) + 20u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3624 * 40u) + 24u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3718 = (_3624 * 40u) + 28u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            _3743 = fma(_2086, _3731.z, fma(_2085, _3731.y, _3731.x * _2084)) + _3731.w;
                            _3744 = !((fma(_2086, _3712.z, fma(_2085, _3712.y, _3712.x * _2084)) + _3712.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3744)
                            {
                                float _3771 = _3639.x - _2084;
                                float _3772 = _3639.y - _2085;
                                float _3773 = _3639.z - _2086;
                                float _3774 = dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773));
                                float _3777 = inversesqrt(_3774);
                                float _3778 = _3777 * _3771;
                                float _3779 = _3777 * _3772;
                                float _3780 = _3777 * _3773;
                                float _3784 = 1.0 - (_3774 / (_3640 * _3640));
                                float _4973 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                                float _3789 = sqrt(_3774) * _3655.w;
                                float _3791 = 1.39999997615814208984375 / (_3789 + 1.39999997615814208984375);
                                float _3792 = _3791 * _3791;
                                float _3795 = ((1.0 - _3792) * dot(vec3(_3778, _3779, _3780), vec3(_921, _924, _927))) + _3792;
                                float _3798 = _3789 * _3789;
                                float _3802 = (fma(_2086, _3682.z, fma(_2085, _3682.y, _3682.x * _2084)) + _3682.w) / _3743;
                                float _3803 = (fma(_2086, _3697.z, fma(_2085, _3697.y, _3697.x * _2084)) + _3697.w) / _3743;
                                float _3807 = 1.0 - dot(vec2(_3802, _3803), vec2(_3802, _3803));
                                float _4989 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3809 = _3808 * (((isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0))) * _3785) / ((_3798 * 0.699999988079071044921875) + 1.0));
                                float _3821 = exp2(log2(1.0 / ((_3798 * 3.5) + 5.0)) * 0.25);
                                float _3822 = 1.0 - _996;
                                float _3829 = sqrt(1.0 - ((1.0 - (_3822 * _3822)) * (1.0 - (_3821 * _3821))));
                                float _3830 = _3829 * _3829;
                                float _3831 = _3830 * _3830;
                                float _3832 = _3778 - _3252;
                                float _3833 = _3779 - _3253;
                                float _3834 = _3780 - _3254;
                                float _3838 = inversesqrt(dot(vec3(_3832, _3833, _3834), vec3(_3832, _3833, _3834)));
                                float _3842 = dot(vec3(_921, _924, _927), vec3((-0.0) - _3252, (-0.0) - _3253, (-0.0) - _3254));
                                float _5000 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3846 = dot(vec3(_921, _924, _927), vec3(_3838 * _3832, _3838 * _3833, _3838 * _3834));
                                float _5011 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3853 = ((_3849 * _3849) * (_3831 + (-1.0))) + 1.0;
                                float _3854 = _3791 * _3830;
                                float _3855 = _3854 * _3854;
                                float _3861 = ((1.0 - _3855) * dot(vec3(_921, _924, _927), vec3(_3778, _3779, _3780))) + _3855;
                                float _5022 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3863 = 1.0 - _3830;
                                float _3873 = (0.5 / (((_3862 * ((_3845 * _3863) + _3830)) + 9.9999999392252902907785028219223e-09) + (((_3862 * _3863) + _3830) * _3845))) * _3862;
                                float _5033 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3883 = (_3808 * _3785) * (((_3831 * 3.1415927410125732421875) * (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0)))) / ((_3853 * _3853) * ((_3798 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3809 * _3655.z;
                                frontier_phi_88_pred_1 = _3809 * _3655.y;
                                frontier_phi_88_pred_2 = _3809 * _3655.x;
                                frontier_phi_88_pred_3 = _3883 * _3667.z;
                                frontier_phi_88_pred_4 = _3883 * _3667.y;
                                frontier_phi_88_pred_5 = _3883 * _3667.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3892 = frontier_phi_88_pred;
                            _3891 = frontier_phi_88_pred_1;
                            _3890 = frontier_phi_88_pred_2;
                            _3889 = frontier_phi_88_pred_3;
                            _3888 = frontier_phi_88_pred_4;
                            _3887 = frontier_phi_88_pred_5;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            if (_3614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3614;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3599;
                        frontier_phi_82_pred_1 = _3598;
                        frontier_phi_82_pred_2 = _3597;
                        frontier_phi_82_pred_3 = _3596;
                        frontier_phi_82_pred_4 = _3595;
                        frontier_phi_82_pred_5 = _3594;
                    }
                    _3237 = frontier_phi_82_pred;
                    _3235 = frontier_phi_82_pred_1;
                    _3233 = frontier_phi_82_pred_2;
                    _3231 = frontier_phi_82_pred_3;
                    _3229 = frontier_phi_82_pred_4;
                    _3227 = frontier_phi_82_pred_5;
                    uint _3393 = _3392 + 1u;
                    if (_3393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3386 = _3227;
                        _3387 = _3229;
                        _3388 = _3231;
                        _3389 = _3233;
                        _3390 = _3235;
                        _3391 = _3237;
                        _3392 = _3393;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3233;
                frontier_phi_63_64_ladder_1 = _3237;
                frontier_phi_63_64_ladder_2 = _3235;
                frontier_phi_63_64_ladder_3 = _3231;
                frontier_phi_63_64_ladder_4 = _3229;
                frontier_phi_63_64_ladder_5 = _3227;
            }
            else
            {
                frontier_phi_63_64_ladder = _3111;
                frontier_phi_63_64_ladder_1 = _3115;
                frontier_phi_63_64_ladder_2 = _3113;
                frontier_phi_63_64_ladder_3 = _3109;
                frontier_phi_63_64_ladder_4 = _3107;
                frontier_phi_63_64_ladder_5 = _3105;
            }
            _3226 = frontier_phi_63_64_ladder_5;
            _3228 = frontier_phi_63_64_ladder_4;
            _3230 = frontier_phi_63_64_ladder_3;
            _3232 = frontier_phi_63_64_ladder;
            _3234 = frontier_phi_63_64_ladder_2;
            _3236 = frontier_phi_63_64_ladder_1;
        }
        float _3241 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _3038 = (_3241 * _3232) + _2550;
        _3040 = (_3241 * _3234) + _2552;
        _3042 = (_3241 * _3236) + _2554;
        _3044 = ((_3226 * _964) * _3241) + _2888;
        _3046 = ((_3228 * _966) * _3241) + _2890;
        _3048 = ((_3230 * _967) * _3241) + _2892;
    }
    else
    {
        _3038 = _2550;
        _3040 = _2552;
        _3042 = _2554;
        _3044 = _2888;
        _3046 = _2890;
        _3048 = _2892;
    }
    float _5049 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _5060 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _5071 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _3065 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_3038 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _980))) + ((_3044 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _3066 = ((isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3040 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _980))) + ((_3046 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    float _3067 = ((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3042 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _980))) + ((_3048 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1818)) * cbPerFrame._m0[3u].x);
    uint _3068 = _254 + 6u;
    float _3076 = _902 / cbSceneParam._m0[86u].x;
    float _3077 = _903 / cbSceneParam._m0[86u].y;
    vec4 _3091 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3076, _3077, (log2((isnan(cbSceneParam._m0[77u].w) ? _824 : (isnan(_824) ? cbSceneParam._m0[77u].w : min(_824, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3093 = _3091.x;
    float _3094 = _3091.y;
    float _3095 = _3091.z;
    float _3096 = _3091.w;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    if (_824 > cbSceneParam._m0[78u].w)
    {
        float _3130 = isnan(_824) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _824 : min(cbSceneParam._m0[80u].w, _824));
        float _3131 = _3130 / _824;
        float _3142 = _3131 * _875;
        float _3143 = _876 * _3131;
        float _3144 = (-0.0) - _3143;
        float _3146 = _3131 * _877;
        float _3148 = (cbSceneParam._m0[77u].w * _3144) / _3130;
        float _3149 = _3148 + cbSceneParam._m0[79u].w;
        float _3150 = cbSceneParam._m0[79u].w - _3143;
        float _3156 = sqrt(((_3142 * _3142) + (_3143 * _3143)) + (_3146 * _3146));
        float _3159 = (1.0 - (cbSceneParam._m0[77u].w / _3130)) * _3156;
        float _3164 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3166 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3343;
        if (abs((_3144 - _3148) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3343 = ((((_3149 > 0.0) ? exp2(_3164 * _3149) : (2.0 - exp2(_3166 * _3149))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3159;
        }
        else
        {
            float _3287 = 1.0 / cbSceneParam._m0[80u].x;
            float _3288 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : max(_3149, _3150));
            float _3289 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : min(_3149, _3150));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            _3343 = ((abs(_3156 / _3144) * cbSceneParam._m0[80u].y) * ((((_3298 - _3299) * 2.0) - ((exp2(_3164 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0)))) - exp2(_3164 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))))) * _3287)) - ((exp2(_3166 * _3298) - exp2(_3166 * _3299)) * _3287))) + (_3159 * cbSceneParam._m0[80u].z);
        }
        vec4 _3345 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3076, _3077, 1.0), 0.0);
        float _3354 = exp2((_3343 * (-1.44269502162933349609375)) * (1.0 - _3345.w));
        float _3355 = log2(_3354);
        float _3371 = log2(_3096);
        _3168 = (exp2(_3371 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].x)) * _3345.x) / cbSceneParam._m0[78u].x)) + _3093;
        _3170 = (exp2(_3371 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].y)) * _3345.y) / cbSceneParam._m0[78u].y)) + _3094;
        _3172 = (exp2(_3371 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].z)) * _3345.z) / cbSceneParam._m0[78u].z)) + _3095;
        _3174 = _3354 * _3096;
    }
    else
    {
        _3168 = _3093;
        _3170 = _3094;
        _3172 = _3095;
        _3174 = _3096;
    }
    bool _3381;
    vec4 _3184;
    vec4 _3206;
    float _3208;
    float _3212;
    float _3213;
    float _3214;
    float _3215;
    bool _3225;
    for (;;)
    {
        _3184 = cbMatDynParam._m0[0u];
        float _3186 = roundEven(_3184.y);
        bool _3187 = _3186 == 3.0;
        float _3188 = log2(_3174);
        float _3195 = exp2(_3188 * cbSceneParam._m0[78u].x) * _3065;
        float _3196 = exp2(_3188 * cbSceneParam._m0[78u].y) * _3066;
        float _3197 = exp2(_3188 * cbSceneParam._m0[78u].z) * _3067;
        float _3204 = _891 + (-0.5);
        _3206 = cbMtdParam._m0[1u];
        _3208 = _3206.y * _3204;
        float _3211 = (_3186 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3212 = _3211 * (_3187 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3168)));
        _3213 = _3211 * (_3187 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3170)));
        _3214 = _3211 * (_3187 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3172)));
        _3215 = _3204 * 0.999000012874603271484375;
        _3225 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3225)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _3215) < 0.5)
            {
                _3381 = true;
                break;
            }
        }
        uint _3322 = _940 + uint(_3184.w);
        if ((cbInstanceData._m0[_3322].w < 1.0) && ((cbInstanceData._m0[_3322].w + _3215) < 0.5))
        {
            _3381 = true;
            break;
        }
        if ((_3208 + 1.0) < _3206.x)
        {
            _3381 = true;
            break;
        }
        _3381 = false;
        break;
    }
    float _3585;
    if (_3381)
    {
        discard_state = true;
        _3585 = 0.0;
    }
    else
    {
        _3585 = cbInstanceData._m0[_3068].w;
    }
    SV_Target.x = _3212;
    SV_Target.y = _3213;
    SV_Target.z = _3214;
    SV_Target.w = _3585;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3068].w;
    discard_exit();
}


