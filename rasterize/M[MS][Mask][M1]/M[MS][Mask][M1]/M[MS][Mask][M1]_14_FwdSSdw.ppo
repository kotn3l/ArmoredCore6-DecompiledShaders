#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1317;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3668 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3679 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3690 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _428 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _430 = _428.x;
    float _442 = dot(vec4(_430, _428.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _459 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_430 - _442) * cbMtdParam._m0[23u].w) + _442) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3701 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _470 = (_328.x * cbMtdParam._m0[9u].x) * ((_460 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359);
    float _471 = (_328.y * cbMtdParam._m0[9u].y) * ((_460 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360);
    float _472 = (_328.z * cbMtdParam._m0[9u].z) * ((_460 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361);
    float _476 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _470;
    float _479 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _471;
    float _482 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _472;
    float _490 = (((_470 - _476) * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) + _476) * 4.55000019073486328125;
    float _492 = (((_471 - _479) * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) + _479) * 4.55000019073486328125;
    float _494 = (((_472 - _482) * (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0)))) + _482) * 4.55000019073486328125;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _537 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _554 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _556 = _554.x;
    float _557 = _554.y;
    float _558 = _554.z;
    float _567 = ((_537.z - _558) * _460) + _558;
    float _570 = ((((_537.x - _556) * _460) + _556) * 2.0) + (-1.0);
    float _571 = ((((_537.y - _557) * _460) + _557) * 2.0) + (-1.0);
    float _572 = dot(vec2(_570, _571), vec2(_570, _571));
    float _3712 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _577 = sqrt(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _637 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_620 - _621) * cbMtdParam._m0[24u].z) + _621) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3723 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _645 = (_638 * (cbMtdParam._m0[17u].x - _490)) + _490;
    float _646 = (_638 * (cbMtdParam._m0[17u].y - _492)) + _492;
    float _647 = (_638 * (cbMtdParam._m0[17u].z - _494)) + _494;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _675 = _673.x;
    float _692 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _291) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _292) + cbTextureTilingScale._m0[9u].w)).x - _675) * _460) + _675;
    float _696 = ((_659.x - _692) * cbMtdParam._m0[19u].z) + _692;
    float _698 = _696 - (_696 * _638);
    float _703 = (((_512.z - _567) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _567;
    float _707 = ((_593.z - _703) * cbMtdParam._m0[19u].w) + _703;
    vec4 _720 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _727 = (_720.x * 2.0) + (-1.0);
    float _728 = (_720.y * 2.0) + (-1.0);
    float _729 = dot(vec2(_727, _728), vec2(_727, _728));
    float _3734 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _737 = (_638 * (_720.z - _707)) + _707;
    float _746 = (_570 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_512.x * 2.0) + (-1.0)))) + (((_593.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _747 = (_571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_512.y * 2.0) + (-1.0)))) + (((_593.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _759 = (((_727 - _746) + (cbMtdParam._m0[21u].x * _746)) * _638) + _746;
    float _760 = (((_728 - _747) + (cbMtdParam._m0[21u].x * _747)) * _638) + _747;
    float _761 = (_638 * (sqrt(1.0 - (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) - _577)) + _577;
    float _763 = cbMtdParam._m0[22u].x + _593.w;
    float _766 = fma(_761, _238 * NORMAL.x, fma(_760, _245 * TANGENT.x, (_231 * _223) * _759));
    float _769 = fma(_761, _238 * NORMAL.y, fma(_760, _245 * TANGENT.y, (_231 * _224) * _759));
    float _772 = fma(_761, _238 * NORMAL.z, fma(_760, _245 * TANGENT.z, (_231 * _225) * _759));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _777 = _776 * _766;
    float _778 = _776 * _769;
    float _779 = _776 * _772;
    float _3745 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _780 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3767 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3778 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3789 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3800 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _785 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _799 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _850 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _840);
    float _851 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _840);
    float _852 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _840);
    float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
    float _857 = _850 * _856;
    float _858 = _851 * _856;
    float _859 = _852 * _856;
    float _865 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _866 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _884 = fma(_779, cbSceneParam._m0[5u].z, fma(_778, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _777));
    float _887 = fma(_779, cbSceneParam._m0[6u].z, fma(_778, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _777));
    float _890 = fma(_779, cbSceneParam._m0[7u].z, fma(_778, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _777));
    uint _904 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _910 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_904].x;
    float _911 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_904].y;
    float _912 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_904].z;
    float _3811 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _916 = 1.0 - _785;
    float _917 = _913 * _916;
    float _918 = _914 * _916;
    float _919 = _915 * _916;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _785;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _785;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _785;
    float _927 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _865, cbSceneParam._m0[86u].y * _866));
    float _943 = ((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * TEXCOORD_5.w) * _939.x;
    float _944 = dot(vec3(_777, _778, _779), vec3(_857, _858, _859));
    float _947 = _944 * 2.0;
    float _951 = (_947 * _777) - _857;
    float _952 = (_947 * _778) - _858;
    float _953 = (_947 * _779) - _859;
    float _957 = abs(dot(vec3(_857, _858, _859), vec3(_777, _778, _779)));
    float _3844 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_780);
    float _972 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _978 = (1.0 - _972) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _979 = _972 * _959;
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_1015, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007));
        float _1045 = fma(_1015, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007));
        float _1049 = fma(_1015, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007));
        float _1074 = _1007 + _777;
        float _1075 = _1011 + _778;
        float _1076 = _1015 + _779;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1041;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1045;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1049;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_777, _778, _779), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3892 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_777, _778, _779), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3925 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_777, _778, _779), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3958 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1356 = fma(_1015, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007));
        float _1360 = fma(_1015, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007));
        float _1364 = fma(_1015, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007));
        float _1387 = _1007 + _777;
        float _1388 = _1011 + _778;
        float _1389 = _1015 + _779;
        float _1399 = fma(_1389, cbModelParam._m0[30u].z, fma(_1388, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387)) - _1356;
        float _1400 = fma(_1389, cbModelParam._m0[31u].z, fma(_1388, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387)) - _1360;
        float _1401 = fma(_1389, cbModelParam._m0[32u].z, fma(_1388, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387)) - _1364;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1356 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1360 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[35u].z) + ((((((_1364 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1455 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1422.x + (-0.5));
        float _1457 = _1455 * (_1422.y + (-0.5));
        float _1458 = _1455 * (_1422.z + (-0.5));
        float _1465 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1429.x + (-0.5));
        float _1467 = _1465 * (_1429.y + (-0.5));
        float _1468 = _1465 * (_1429.z + (-0.5));
        float _1475 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1436.x + (-0.5));
        float _1477 = _1475 * (_1436.y + (-0.5));
        float _1478 = _1475 * (_1436.z + (-0.5));
        float _1485 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1443.x + (-0.5));
        float _1487 = _1485 * (_1443.y + (-0.5));
        float _1488 = _1485 * (_1443.z + (-0.5));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = _1456 * 0.5;
        float _1493 = _1466 * 0.5;
        float _1494 = _1476 * 0.5;
        float _1495 = dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494));
        float _1500 = (_1495 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1495);
        float _1508 = (dot(vec3(_777, _778, _779), vec3(_1500 * _1492, _1500 * _1493, _1500 * _1494)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1517 = sqrt(((_1493 * _1493) + (_1492 * _1492)) + (_1494 * _1494)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1519 = _1518 * 2.0;
        float _1523 = (1.0 - _1518) / (_1518 + 1.0);
        float _4021 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1533 = ((((1.0 - _1524) * (_1519 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1519 + 1.0))) + _1524) * _1489;
        float _1534 = _1457 * 0.5;
        float _1535 = _1467 * 0.5;
        float _1536 = _1477 * 0.5;
        float _1537 = dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536));
        float _1542 = (_1537 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1537);
        float _1550 = (dot(vec3(_777, _778, _779), vec3(_1542 * _1534, _1542 * _1535, _1542 * _1536)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1559 = sqrt(((_1535 * _1535) + (_1534 * _1534)) + (_1536 * _1536)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1561 = _1560 * 2.0;
        float _1565 = (1.0 - _1560) / (_1560 + 1.0);
        float _4054 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1575 = ((((1.0 - _1566) * (_1561 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1561 + 1.0))) + _1566) * _1490;
        float _1576 = _1458 * 0.5;
        float _1577 = _1468 * 0.5;
        float _1578 = _1478 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_777, _778, _779), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4087 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1603 + 1.0))) + _1608) * _1491;
        _1625 = _1458;
        _1626 = _1457;
        _1627 = _1456;
        _1628 = _1468;
        _1629 = _1467;
        _1630 = _1466;
        _1631 = _1478;
        _1632 = _1477;
        _1633 = _1476;
        _1634 = _1491;
        _1635 = _1490;
        _1636 = _1489;
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)));
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    }
    else
    {
        _1625 = _1317;
        _1626 = _1317;
        _1627 = _1317;
        _1628 = _1317;
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = _1317;
        _1637 = 0.0;
        _1638 = 0.0;
        _1639 = 0.0;
    }
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1329)) + _1329;
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1330)) + _1330;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1331)) + _1331;
    float _1672 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1649));
    float _1693 = _951 * 0.5;
    float _1694 = _952 * 0.5;
    float _1695 = _953 * 0.5;
    float _1696 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1699 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1702 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1709 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1713 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1717 = dot(vec4(_1693, _1694, _1695, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1724 = dot(vec4(cbModelParam._m0[39u]), vec4(_1693, _1694, _1695, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1738 = dot(vec4(cbModelParam._m0[40u]), vec4(_1693, _1694, _1695, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1751 = (_1747 * cbModelParam._m0[1u].x) + (_1736 * (1.0 - cbModelParam._m0[1u].x));
    float _1761 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1761 : min(cbModelParam._m0[25u].z, _1761));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1810 = fma(_1015, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007)) + cbModelParam._m0[13u].w;
        float _1814 = fma(_1015, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007)) + cbModelParam._m0[14u].w;
        float _1818 = fma(_1015, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007)) + cbModelParam._m0[15u].w;
        float _1821 = fma(_953, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951));
        float _1824 = fma(_953, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951));
        float _1827 = fma(_953, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951));
        float _1855;
        if (_1821 > 0.0)
        {
            _1855 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1855 = frontier_phi_14_12_ladder;
        }
        float _2079;
        if (_1824 > 0.0)
        {
            _2079 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2079 = frontier_phi_23_19_ladder;
        }
        float _2336;
        if (_1827 > 0.0)
        {
            _2336 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2336 = frontier_phi_35_30_ladder;
        }
        float _2338 = isnan(_2079) ? _1855 : (isnan(_1855) ? _2079 : min(_1855, _2079));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1821) + _1810;
        float _2344 = (_2339 * _1824) + _1814;
        float _2345 = (_2339 * _1827) + _1818;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1762);
            frontier_phi_13_35_ladder = _2473.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2473.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2473.x * cbModelParam._m0[1u].y;
        }
        _1843 = frontier_phi_13_35_ladder_2;
        _1845 = frontier_phi_13_35_ladder_1;
        _1847 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1831 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_951, _952, _953), _1762);
        _1843 = _1831.x * cbModelParam._m0[1u].y;
        _1845 = _1831.y * cbModelParam._m0[1u].y;
        _1847 = _1831.z * cbModelParam._m0[1u].y;
    }
    float _1851 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1852 = isnan(_1851) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1851 : min(cbModelParam._m0[25u].w, _1851));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_1015, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_1015, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_1015, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_953, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951));
        float _1920 = fma(_953, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951));
        float _1923 = fma(_953, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951));
        float _2084;
        if (_1917 > 0.0)
        {
            _2084 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2084 = frontier_phi_25_21_ladder;
        }
        float _2363;
        if (_1920 > 0.0)
        {
            _2363 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2363 = frontier_phi_37_32_ladder;
        }
        float _2576;
        if (_1923 > 0.0)
        {
            _2576 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2576 = frontier_phi_46_43_ladder;
        }
        float _2578 = isnan(_2363) ? _2084 : (isnan(_2084) ? _2363 : min(_2084, _2363));
        float _2579 = isnan(_2576) ? _2578 : (isnan(_2578) ? _2576 : min(_2578, _2576));
        float _2583 = (_2579 * _1917) + _1906;
        float _2584 = (_2579 * _1920) + _1910;
        float _2585 = (_2579 * _1923) + _1914;
        float _2586 = _2579 * 9.9999997473787516355514526367188e-05;
        float _2587 = (-1.0) - _2586;
        float _2589 = _2586 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2585 > _2589) || ((_2585 < _2587) || ((_2584 > _2589) || ((_2584 < _2587) || ((_2583 < _2587) || (_2583 > _2589))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2585, cbModelParam._m0[17u].z, fma(_2584, cbModelParam._m0[17u].y, _2583 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2585, cbModelParam._m0[18u].z, fma(_2584, cbModelParam._m0[18u].y, _2583 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2585, cbModelParam._m0[19u].z, fma(_2584, cbModelParam._m0[19u].y, _2583 * cbModelParam._m0[19u].x))), _1852);
            frontier_phi_22_46_ladder = _2784.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2784.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2784.x * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_22_46_ladder_2;
        _1944 = frontier_phi_22_46_ladder_1;
        _1946 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_951, _952, _953), _1852);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1959 = (((_978 * _927) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1961 = (((_978 * _929) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1944 - _1845)) + _1845);
    float _1963 = (((_978 * _930) + _979) * _943) * ((cbModelParam._m0[1u].w * (_1946 - _1847)) + _1847);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    vec4 _1980 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_865, _866));
    float _1982 = _1980.w;
    float _1994 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1982);
    float _1995 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1982);
    float _1996 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1982);
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2010 = _943 + (-1.0);
    float _2015 = (cbLight._m0[_2003].x * _2010) + 1.0;
    float _2016 = (cbLight._m0[_2003].y * _2010) + 1.0;
    float _2017 = (cbLight._m0[_2003].z * _2010) + 1.0;
    float _2018 = (cbLight._m0[_2003].w * _2010) + 1.0;
    uint _2019 = _2002 + 5u;
    float _2025 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2029 = _2002 + 4u;
    float _2038 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2042 = _2002 | 1u;
    float _2053 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_777, _778, _779));
    float _2056 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_777, _778, _779));
    float _4223 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _4234 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2061 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _2063 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2070 = ((cbLight._m0[_2019].x * _2025) * _2063) + (((cbLight._m0[_2029].x * _1994) * _2038) * _2061);
    float _2071 = ((_2025 * cbLight._m0[_2019].y) * _2063) + (((cbLight._m0[_2029].y * _1995) * _2038) * _2061);
    float _2072 = ((_2025 * cbLight._m0[_2019].z) * _2063) + (((cbLight._m0[_2029].z * _1996) * _2038) * _2061);
    uvec4 _2076 = floatBitsToUint(cbLight._m0[_2002 + 12u]);
    bool _2078 = _2076.x == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_2078)
    {
        _2089 = _2070;
        _2091 = _2071;
        _2093 = _2072;
    }
    else
    {
        uint _2097 = _2002 + 6u;
        float _2113 = (dot(vec3(cbLight._m0[_2002 + 2u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4245 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2116 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2089 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _2070;
        _2091 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _2071;
        _2093 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _2072;
    }
    bool _2096 = _2076.y == 0u;
    float _2134;
    float _2136;
    float _2138;
    if (_2096)
    {
        _2134 = _2089;
        _2136 = _2091;
        _2138 = _2093;
    }
    else
    {
        uint _2307 = _2002 + 7u;
        float _2323 = (dot(vec3(cbLight._m0[_2002 + 3u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2324 = _2323 * _2323;
        float _4261 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2325 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2326 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2134 = (((cbLight._m0[_2307].x * 0.3183098733425140380859375) * _2325) * _2326) + _2089;
        _2136 = (((cbLight._m0[_2307].y * 0.3183098733425140380859375) * _2325) * _2326) + _2091;
        _2138 = (((cbLight._m0[_2307].z * 0.3183098733425140380859375) * _2325) * _2326) + _2093;
    }
    uint _2141 = _2002 + 8u;
    float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _780) * 0.949999988079071044921875);
    float _2155 = _2154 * _2154;
    float _2156 = cbLight._m0[_2002].x + _857;
    float _2157 = cbLight._m0[_2002].y + _858;
    float _2158 = cbLight._m0[_2002].z + _859;
    float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
    float _2163 = _2162 * _2156;
    float _2164 = _2162 * _2157;
    float _2165 = _2162 * _2158;
    float _2166 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2002].xyz));
    float _4277 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2169 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _4288 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2170 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2171 = dot(vec3(_777, _778, _779), vec3(_2163, _2164, _2165));
    float _4299 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2175 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2163, _2164, _2165));
    float _4310 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2179 = _2155 * _2155;
    float _2183 = ((_2174 * _2174) * (_2179 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
    float _2192 = 0.959999978542327880859375 - _924;
    float _2194 = 0.959999978542327880859375 - _925;
    float _2195 = 0.959999978542327880859375 - _926;
    float _2202 = 1.0 - _2155;
    float _2213 = (0.5 / (((_2170 * ((_2169 * _2202) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2202) + _2155) * _2169))) * _2169;
    float _4321 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2215 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2179 / ((_2183 * _2183) * 3.141590118408203125));
    uint _2229 = _2002 + 9u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _780) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2042].x + _857;
    float _2243 = cbLight._m0[_2042].y + _858;
    float _2244 = cbLight._m0[_2042].z + _859;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2042].xyz));
    float _4332 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2256 = dot(vec3(_777, _778, _779), vec3(_2249, _2250, _2251));
    float _4343 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2259 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2260 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2249, _2250, _2251));
    float _4354 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2264 = _2241 * _2241;
    float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
    float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
    float _2282 = 1.0 - _2241;
    float _2292 = (0.5 / (((_2170 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2282) + _2241) * _2255))) * _2255;
    float _4365 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
    float _2304 = (((((_2275 * _2192) + _927) * cbLight._m0[_2229].x) * _2294) * _2025) + ((((cbLight._m0[_2141].x * _1994) * ((_2191 * _2192) + _927)) * _2215) * _2038);
    float _2305 = (((((_2275 * _2194) + _929) * cbLight._m0[_2229].y) * _2294) * _2025) + ((((cbLight._m0[_2141].y * _1995) * ((_2191 * _2194) + _929)) * _2215) * _2038);
    float _2306 = (((((_2275 * _2195) + _930) * cbLight._m0[_2229].z) * _2294) * _2025) + ((((cbLight._m0[_2141].z * _1996) * ((_2191 * _2195) + _930)) * _2215) * _2038);
    float _2368;
    float _2370;
    float _2372;
    if (_2078)
    {
        _2368 = _2304;
        _2370 = _2305;
        _2372 = _2306;
    }
    else
    {
        uint _2374 = _2002 + 2u;
        uint _2378 = _2002 + 10u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _780) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _857;
        float _2395 = cbLight._m0[_2374].y + _858;
        float _2396 = cbLight._m0[_2374].z + _859;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2374].xyz));
        float _4376 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2408 = dot(vec3(_777, _778, _779), vec3(_2401, _2402, _2403));
        float _4387 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4398 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2434 = 1.0 - _2393;
        float _2444 = (0.5 / (((_2170 * ((_2407 * _2434) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2434) + _2393) * _2407))) * _2407;
        float _4409 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
        _2368 = (((((_2427 * _2192) + _927) * cbLight._m0[_2378].x) * _2446) * _2447) + _2304;
        _2370 = (((((_2427 * _2194) + _929) * cbLight._m0[_2378].y) * _2446) * _2447) + _2305;
        _2372 = (((((_2427 * _2195) + _930) * cbLight._m0[_2378].z) * _2446) * _2447) + _2306;
    }
    float _2482;
    float _2484;
    float _2486;
    if (_2096)
    {
        _2482 = _2368;
        _2484 = _2370;
        _2486 = _2372;
    }
    else
    {
        uint _2493 = _2002 + 3u;
        uint _2497 = _2002 + 11u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _780) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _857;
        float _2514 = cbLight._m0[_2493].y + _858;
        float _2515 = cbLight._m0[_2493].z + _859;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2493].xyz));
        float _4425 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2527 = dot(vec3(_777, _778, _779), vec3(_2520, _2521, _2522));
        float _4436 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4447 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
        float _2553 = 1.0 - _2512;
        float _2563 = (0.5 / (((_2170 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2170 * _2553) + _2512) * _2526))) * _2526;
        float _4458 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2482 = (((((_2546 * _2192) + _927) * cbLight._m0[_2497].x) * _2565) * _2566) + _2368;
        _2484 = (((((_2546 * _2194) + _929) * cbLight._m0[_2497].y) * _2565) * _2566) + _2370;
        _2486 = (((((_2546 * _2195) + _930) * cbLight._m0[_2497].z) * _2565) * _2566) + _2372;
    }
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_2000.y == 0u)
    {
        float _2641 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2642 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2641;
        float _2643 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2641;
        float _2644 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2641;
        uvec4 _2656 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2657 = _2656.x;
        uint _2668 = uint((float(_2656.y) * floor(float(uint(cbSceneParam._m0[85u].y * _866) / _2657))) + floor(float(uint(cbSceneParam._m0[85u].x * _865) / _2657)));
        float _2678 = (log2(_2644 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2679 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        uint _2682 = uint(isnan(14.0) ? _2679 : (isnan(_2679) ? 14.0 : min(_2679, 14.0)));
        uvec4 _2687 = texelFetch(g_lightClusterGridBuffer, int(((_2682 << 2u) + (_2668 << 6u)) >> 2u));
        uint _2688 = _2687.x;
        uint _2689 = _2656.z;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((((1u << ((_2689 >> 4u) & 15u)) + 4294967295u) & _2688) == 0u) || ((_2689 & 240u) == 0u))
        {
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
        }
        else
        {
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            uint _2940 = 0u;
            uint _2949;
            bool _2950;
            for (;;)
            {
                _2949 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_2940 << 2u)) >> 2u)).x;
                _2950 = _2949 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2950)
                {
                    frontier_phi_61_pred = _2934;
                    frontier_phi_61_pred_1 = _2939;
                    frontier_phi_61_pred_2 = _2938;
                    frontier_phi_61_pred_3 = _2937;
                    frontier_phi_61_pred_4 = _2936;
                    frontier_phi_61_pred_5 = _2935;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2949;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2940 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2642;
                        float _3125 = _3084.y - _2643;
                        float _3126 = _3084.z - _2644;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_884, _887, _890), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4484 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _2642;
                        float _3160 = (-0.0) - _2643;
                        float _3161 = (-0.0) - _2644;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3176 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _959;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_884, _887, _890), vec3(_3166, _3167, _3168));
                        float _4500 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3201 = dot(vec3(_884, _887, _890), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4511 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3144 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3134) + _3210;
                        float _4522 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4533 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3236 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) / ((_3208 * _3208) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2993 = (_3155 * _3103.x) + _3061;
                        _2994 = (_3155 * _3103.y) + _3062;
                        _2995 = (_3155 * _3103.z) + _3063;
                        _2990 = (_3236 * _3120.x) + _3058;
                        _2991 = (_3236 * _3120.y) + _3059;
                        _2992 = (_3236 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_61_pred = _2990;
                    frontier_phi_61_pred_1 = _2995;
                    frontier_phi_61_pred_2 = _2994;
                    frontier_phi_61_pred_3 = _2993;
                    frontier_phi_61_pred_4 = _2992;
                    frontier_phi_61_pred_5 = _2991;
                }
                _2790 = frontier_phi_61_pred;
                _2800 = frontier_phi_61_pred_1;
                _2798 = frontier_phi_61_pred_2;
                _2796 = frontier_phi_61_pred_3;
                _2794 = frontier_phi_61_pred_4;
                _2792 = frontier_phi_61_pred_5;
                uint _2941 = _2940 + 1u;
                if (_2941 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2934 = _2790;
                    _2935 = _2792;
                    _2936 = _2794;
                    _2937 = _2796;
                    _2938 = _2798;
                    _2939 = _2800;
                    _2940 = _2941;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
        }
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.z;
        uint _2806 = (_2804 >> 8u) & 15u;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((4294967295u << _2806) & _2688) == 0u)
        {
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
            _2908 = _2795;
            _2910 = _2797;
            _2912 = _2799;
        }
        else
        {
            float _2927 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
            float _2928 = _2927 * _2642;
            float _2929 = _2927 * _2643;
            float _2930 = _2927 * _2644;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2806 < ((_2804 >> 12u) & 15u))
            {
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _3041 = _2789;
                float _3042 = _2791;
                float _3043 = _2793;
                float _3044 = _2795;
                float _3045 = _2797;
                float _3046 = _2799;
                uint _3047 = _2806;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2682 << 5u) + (_2668 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3057)
                    {
                        frontier_phi_67_pred = _3044;
                        frontier_phi_67_pred_1 = _3045;
                        frontier_phi_67_pred_2 = _3046;
                        frontier_phi_67_pred_3 = _3043;
                        frontier_phi_67_pred_4 = _3042;
                        frontier_phi_67_pred_5 = _3041;
                    }
                    else
                    {
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3254 = _3041;
                        float _3255 = _3042;
                        float _3256 = _3043;
                        float _3257 = _3044;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        uint _3260 = _3056;
                        uint _3261;
                        vec4 _3286;
                        float _3287;
                        vec4 _3302;
                        vec3 _3314;
                        vec4 _3329;
                        vec4 _3344;
                        float _3390;
                        bool _3391;
                        for (;;)
                        {
                            uint _3271 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3260));
                            _3261 = (_3260 + 4294967295u) & _3260;
                            uint _3273 = _3271 * 40u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3287 = _3286.w;
                            uint _3289 = (_3271 * 40u) + 4u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3271 * 40u) + 8u;
                            _3314 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x));
                            uint _3316 = (_3271 * 40u) + 16u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3271 * 40u) + 20u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3271 * 40u) + 24u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3365 = (_3271 * 40u) + 28u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            _3390 = fma(_2644, _3378.z, fma(_2643, _3378.y, _3378.x * _2642)) + _3378.w;
                            _3391 = !((fma(_2644, _3359.z, fma(_2643, _3359.y, _3359.x * _2642)) + _3359.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3391)
                            {
                                float _3418 = _3286.x - _2642;
                                float _3419 = _3286.y - _2643;
                                float _3420 = _3286.z - _2644;
                                float _3421 = dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420));
                                float _3424 = inversesqrt(_3421);
                                float _3425 = _3424 * _3418;
                                float _3426 = _3424 * _3419;
                                float _3427 = _3424 * _3420;
                                float _3431 = 1.0 - (_3421 / (_3287 * _3287));
                                float _4544 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3432 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3436 = sqrt(_3421) * _3302.w;
                                float _3438 = 1.39999997615814208984375 / (_3436 + 1.39999997615814208984375);
                                float _3439 = _3438 * _3438;
                                float _3442 = ((1.0 - _3439) * dot(vec3(_3425, _3426, _3427), vec3(_884, _887, _890))) + _3439;
                                float _3445 = _3436 * _3436;
                                float _3449 = (fma(_2644, _3329.z, fma(_2643, _3329.y, _3329.x * _2642)) + _3329.w) / _3390;
                                float _3450 = (fma(_2644, _3344.z, fma(_2643, _3344.y, _3344.x * _2642)) + _3344.w) / _3390;
                                float _3454 = 1.0 - dot(vec2(_3449, _3450), vec2(_3449, _3450));
                                float _4560 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3455 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3456 = _3455 * (((isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))) * _3432) / ((_3445 * 0.699999988079071044921875) + 1.0));
                                float _3468 = exp2(log2(1.0 / ((_3445 * 3.5) + 5.0)) * 0.25);
                                float _3469 = 1.0 - _959;
                                float _3476 = sqrt(1.0 - ((1.0 - (_3469 * _3469)) * (1.0 - (_3468 * _3468))));
                                float _3477 = _3476 * _3476;
                                float _3478 = _3477 * _3477;
                                float _3479 = _3425 - _2928;
                                float _3480 = _3426 - _2929;
                                float _3481 = _3427 - _2930;
                                float _3485 = inversesqrt(dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481)));
                                float _3489 = dot(vec3(_884, _887, _890), vec3((-0.0) - _2928, (-0.0) - _2929, (-0.0) - _2930));
                                float _4571 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3493 = dot(vec3(_884, _887, _890), vec3(_3485 * _3479, _3485 * _3480, _3485 * _3481));
                                float _4582 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3496 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3500 = ((_3496 * _3496) * (_3478 + (-1.0))) + 1.0;
                                float _3501 = _3438 * _3477;
                                float _3502 = _3501 * _3501;
                                float _3508 = ((1.0 - _3502) * dot(vec3(_884, _887, _890), vec3(_3425, _3426, _3427))) + _3502;
                                float _4593 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3510 = 1.0 - _3477;
                                float _3520 = (0.5 / (((_3509 * ((_3492 * _3510) + _3477)) + 9.9999999392252902907785028219223e-09) + (((_3509 * _3510) + _3477) * _3492))) * _3509;
                                float _4604 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3530 = (_3455 * _3432) * (((_3478 * 3.1415927410125732421875) * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) / ((_3500 * _3500) * ((_3445 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3530 * _3314.x;
                                frontier_phi_73_pred_1 = _3530 * _3314.y;
                                frontier_phi_73_pred_2 = _3456 * _3302.z;
                                frontier_phi_73_pred_3 = _3456 * _3302.y;
                                frontier_phi_73_pred_4 = _3456 * _3302.x;
                                frontier_phi_73_pred_5 = _3530 * _3314.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3534 = frontier_phi_73_pred;
                            _3535 = frontier_phi_73_pred_1;
                            _3539 = frontier_phi_73_pred_2;
                            _3538 = frontier_phi_73_pred_3;
                            _3537 = frontier_phi_73_pred_4;
                            _3536 = frontier_phi_73_pred_5;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            _3243 = _3536 + _3256;
                            if (_3261 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3261;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3244;
                        frontier_phi_67_pred_1 = _3245;
                        frontier_phi_67_pred_2 = _3246;
                        frontier_phi_67_pred_3 = _3243;
                        frontier_phi_67_pred_4 = _3242;
                        frontier_phi_67_pred_5 = _3241;
                    }
                    _2909 = frontier_phi_67_pred;
                    _2911 = frontier_phi_67_pred_1;
                    _2913 = frontier_phi_67_pred_2;
                    _2907 = frontier_phi_67_pred_3;
                    _2905 = frontier_phi_67_pred_4;
                    _2903 = frontier_phi_67_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2903;
                        _3042 = _2905;
                        _3043 = _2907;
                        _3044 = _2909;
                        _3045 = _2911;
                        _3046 = _2913;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2911;
                frontier_phi_55_56_ladder_1 = _2913;
                frontier_phi_55_56_ladder_2 = _2909;
                frontier_phi_55_56_ladder_3 = _2907;
                frontier_phi_55_56_ladder_4 = _2905;
                frontier_phi_55_56_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_55_56_ladder = _2797;
                frontier_phi_55_56_ladder_1 = _2799;
                frontier_phi_55_56_ladder_2 = _2795;
                frontier_phi_55_56_ladder_3 = _2793;
                frontier_phi_55_56_ladder_4 = _2791;
                frontier_phi_55_56_ladder_5 = _2789;
            }
            _2902 = frontier_phi_55_56_ladder_5;
            _2904 = frontier_phi_55_56_ladder_4;
            _2906 = frontier_phi_55_56_ladder_3;
            _2908 = frontier_phi_55_56_ladder_2;
            _2910 = frontier_phi_55_56_ladder;
            _2912 = frontier_phi_55_56_ladder_1;
        }
        float _2917 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2701 = (_2917 * _2908) + _2134;
        _2703 = (_2917 * _2910) + _2136;
        _2705 = (_2917 * _2912) + _2138;
        _2707 = ((_2902 * _927) * _2917) + _2482;
        _2709 = ((_2904 * _929) * _2917) + _2484;
        _2711 = ((_2906 * _930) * _2917) + _2486;
    }
    else
    {
        _2701 = _2134;
        _2703 = _2136;
        _2705 = _2138;
        _2707 = _2482;
        _2709 = _2484;
        _2711 = _2486;
    }
    float _4620 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4631 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4642 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    uint _2731 = _272 + 6u;
    float _2739 = _865 / cbSceneParam._m0[86u].x;
    float _2740 = _866 / cbSceneParam._m0[86u].y;
    vec4 _2754 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2739, _2740, (log2((isnan(cbSceneParam._m0[77u].w) ? _799 : (isnan(_799) ? cbSceneParam._m0[77u].w : min(_799, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2756 = _2754.x;
    float _2757 = _2754.y;
    float _2758 = _2754.z;
    float _2759 = _2754.w;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_799 > cbSceneParam._m0[78u].w)
    {
        float _2814 = isnan(_799) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _799 : min(cbSceneParam._m0[80u].w, _799));
        float _2815 = _2814 / _799;
        float _2826 = _2815 * _850;
        float _2827 = _851 * _2815;
        float _2828 = (-0.0) - _2827;
        float _2830 = _2815 * _852;
        float _2832 = (cbSceneParam._m0[77u].w * _2828) / _2814;
        float _2833 = _2832 + cbSceneParam._m0[79u].w;
        float _2834 = cbSceneParam._m0[79u].w - _2827;
        float _2840 = sqrt(((_2826 * _2826) + (_2827 * _2827)) + (_2830 * _2830));
        float _2843 = (1.0 - (cbSceneParam._m0[77u].w / _2814)) * _2840;
        float _2848 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2850 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3003;
        if (abs((_2828 - _2832) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3003 = ((((_2833 > 0.0) ? exp2(_2848 * _2833) : (2.0 - exp2(_2850 * _2833))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2843;
        }
        else
        {
            float _2963 = 1.0 / cbSceneParam._m0[80u].x;
            float _2964 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : max(_2833, _2834));
            float _2965 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : min(_2833, _2834));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            _3003 = ((abs(_2840 / _2828) * cbSceneParam._m0[80u].y) * ((((_2974 - _2975) * 2.0) - ((exp2(_2848 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0)))) - exp2(_2848 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))))) * _2963)) - ((exp2(_2850 * _2974) - exp2(_2850 * _2975)) * _2963))) + (_2843 * cbSceneParam._m0[80u].z);
        }
        vec4 _3005 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2739, _2740, 1.0), 0.0);
        float _3014 = exp2((_3003 * (-1.44269502162933349609375)) * (1.0 - _3005.w));
        float _3015 = log2(_3014);
        float _3031 = log2(_2759);
        _2852 = (exp2(_3031 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].x)) * _3005.x) / cbSceneParam._m0[78u].x)) + _2756;
        _2854 = (exp2(_3031 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].y)) * _3005.y) / cbSceneParam._m0[78u].y)) + _2757;
        _2856 = (exp2(_3031 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].z)) * _3005.z) / cbSceneParam._m0[78u].z)) + _2758;
        _2858 = _3014 * _2759;
    }
    else
    {
        _2852 = _2756;
        _2854 = _2757;
        _2856 = _2758;
        _2858 = _2759;
    }
    float _2870 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2871 = _2870 == 3.0;
    float _2872 = log2(_2858);
    float _2879 = exp2(_2872 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2701 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _943))) + ((_2707 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _2880 = exp2(_2872 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2703 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _943))) + ((_2709 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _2881 = exp2(_2872 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2705 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _943))) + ((_2711 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1751)) * cbPerFrame._m0[3u].x));
    float _2890 = (_2870 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2890 * (_2871 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.y = _2890 * (_2871 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.z = _2890 * (_2871 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.w = cbInstanceData._m0[_2731].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2731].w;
}


