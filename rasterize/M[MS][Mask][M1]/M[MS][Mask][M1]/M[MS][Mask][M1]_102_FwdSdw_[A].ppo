#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1415;
float _4077;
float _4078;
float _4079;
float _4080;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _405 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _407 = _405.x;
    float _419 = dot(vec4(_407, _405.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _366.x) * 2.0) - ((((_407 - _419) * cbMtdParam._m0[23u].w) + _419) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4089 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _444 = (_437 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325;
    float _445 = (_437 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326;
    float _446 = (_437 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327;
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _366.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[23u].w) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4100 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _557 = _555.x;
    float _567 = dot(vec4(_557, _555.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _579 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _366.z) * 2.0) - ((((_557 - _567) * cbMtdParam._m0[23u].w) + _567) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4111 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _593 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_580 * ((_538.x * cbMtdParam._m0[14u].x) - _517)) + _517);
    float _596 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_580 * ((_538.y * cbMtdParam._m0[14u].y) - _518)) + _518);
    float _599 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_580 * ((_538.z * cbMtdParam._m0[14u].z) - _519)) + _519);
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _633 = _629.z;
    float _640 = ((_612.x - _631) * _437) + _631;
    float _641 = ((_612.y - _632) * _437) + _632;
    float _642 = ((_612.z - _633) * _437) + _633;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _665 = ((_654.x - _640) * _510) + _640;
    float _666 = ((_654.y - _641) * _510) + _641;
    float _667 = ((_654.z - _642) * _510) + _642;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _692 = ((_679.z - _667) * _580) + _667;
    float _695 = ((((_679.x - _665) * _580) + _665) * 2.0) + (-1.0);
    float _697 = ((((_679.y - _666) * _580) + _666) * 2.0) + (-1.0);
    float _698 = dot(vec2(_695, _697), vec2(_695, _697));
    float _4122 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _703 = sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))));
    vec4 _717 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _729 = (((_717.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _695;
    float _730 = (((_717.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _697;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _758 = _756.x;
    float _775 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _758) * _437) + _758;
    float _793 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _775) * _510) + _775;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _793) * _580) + _793;
    float _815 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _811) * cbMtdParam._m0[19u].z) + _811;
    float _819 = (cbMtdParam._m0[19u].w * (_717.z - _692)) + _692;
    float _821 = cbMtdParam._m0[22u].x + _717.w;
    float _824 = fma(_703, _243 * NORMAL.x, fma(_730, _250 * TANGENT.x, (_236 * _228) * _729));
    float _827 = fma(_703, _243 * NORMAL.y, fma(_730, _250 * TANGENT.y, (_236 * _229) * _729));
    float _830 = fma(_703, _243 * NORMAL.z, fma(_730, _250 * TANGENT.z, (_236 * _230) * _729));
    float _834 = inversesqrt(dot(vec3(_824, _827, _830), vec3(_824, _827, _830)));
    float _835 = _834 * _824;
    float _836 = _834 * _827;
    float _837 = _834 * _830;
    float _4133 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _838 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4155 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4166 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4177 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4188 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _843 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _857 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _907 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _897);
    float _908 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _897);
    float _909 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _897);
    float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
    float _914 = _907 * _913;
    float _915 = _908 * _913;
    float _916 = _909 * _913;
    vec4 _921 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _923 = _921.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1095 = sqrt(((_907 * _907) + (_908 * _908)) + (_909 * _909));
        float _1101 = (cbMatDynParam._m0[5u].x * _1095) + cbMatDynParam._m0[5u].y;
        float _4199 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1106 = (cbMatDynParam._m0[5u].z * _1095) + cbMatDynParam._m0[5u].w;
        float _4210 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) - _1102)) + _1102) < ((_923 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _934 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _935 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _953 = fma(_837, cbSceneParam._m0[5u].z, fma(_836, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _835));
    float _956 = fma(_837, cbSceneParam._m0[6u].z, fma(_836, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _835));
    float _959 = fma(_837, cbSceneParam._m0[7u].z, fma(_836, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _835));
    uint _972 = _256 + 9u;
    uint _973 = _972 + uint(cbMatDynParam._m0[0u].w);
    float _979 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_973].x;
    float _980 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_973].y;
    float _981 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * cbInstanceData._m0[_973].z;
    float _4221 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _982 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _4243 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _985 = 1.0 - _843;
    float _986 = _982 * _985;
    float _987 = _983 * _985;
    float _988 = _984 * _985;
    float _993 = (_982 + (-0.039999999105930328369140625)) * _843;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _843;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _843;
    float _996 = _993 + 0.039999999105930328369140625;
    float _998 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    vec4 _1008 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _934, cbSceneParam._m0[86u].y * _935));
    float _1012 = ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * TEXCOORD_5.w) * _1008.x;
    float _1013 = dot(vec3(_835, _836, _837), vec3(_914, _915, _916));
    float _1016 = _1013 * 2.0;
    float _1020 = (_1016 * _835) - _914;
    float _1021 = (_1016 * _836) - _915;
    float _1022 = (_1016 * _837) - _916;
    float _1026 = abs(dot(vec3(_914, _915, _916), vec3(_835, _836, _837)));
    float _4254 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1028 = sqrt(_838);
    float _1041 = exp2((_1028 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1028 * 3.0));
    float _1047 = (1.0 - _1041) * ((_1028 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1048 = _1041 * _1028;
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1080 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1414;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1139 = fma(_1084, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076));
        float _1143 = fma(_1084, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076));
        float _1147 = fma(_1084, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076));
        float _1172 = _1076 + _835;
        float _1173 = _1080 + _836;
        float _1174 = _1084 + _837;
        float _1184 = fma(_1174, cbModelParam._m0[26u].z, fma(_1173, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1172)) - _1139;
        float _1185 = fma(_1174, cbModelParam._m0[27u].z, fma(_1173, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1172)) - _1143;
        float _1186 = fma(_1174, cbModelParam._m0[28u].z, fma(_1173, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1172)) - _1147;
        float _1190 = inversesqrt(dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186)));
        float _1203 = ((_1190 * _1184) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1139 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1190 * _1185) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1143 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1190 * _1186) / cbModelParam._m0[34u].z) + ((((((_1147 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1203, _1204, _1205), 0.0);
        float _1242 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1208.x + (-0.5));
        float _1244 = _1242 * (_1208.y + (-0.5));
        float _1245 = _1242 * (_1208.z + (-0.5));
        float _1252 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1215.x + (-0.5));
        float _1254 = _1252 * (_1215.y + (-0.5));
        float _1255 = _1252 * (_1215.z + (-0.5));
        float _1262 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1222.x + (-0.5));
        float _1264 = _1262 * (_1222.y + (-0.5));
        float _1265 = _1262 * (_1222.z + (-0.5));
        float _1272 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1229.x + (-0.5));
        float _1274 = _1272 * (_1229.y + (-0.5));
        float _1275 = _1272 * (_1229.z + (-0.5));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = _1243 * 0.5;
        float _1280 = _1253 * 0.5;
        float _1281 = _1263 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1296 = (dot(vec3(_835, _836, _837), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1306 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4302 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1308 + 1.0))) + _1313) * _1276;
        float _1323 = _1244 * 0.5;
        float _1324 = _1254 * 0.5;
        float _1325 = _1264 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_835, _836, _837), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4335 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1350 + 1.0))) + _1355) * _1277;
        float _1365 = _1245 * 0.5;
        float _1366 = _1255 * 0.5;
        float _1367 = _1265 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_835, _836, _837), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4368 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1392 + 1.0))) + _1397) * _1278;
        _1414 = _1245;
        _1416 = _1244;
        _1417 = _1243;
        _1418 = _1255;
        _1419 = _1254;
        _1420 = _1253;
        _1421 = _1265;
        _1422 = _1264;
        _1423 = _1263;
        _1424 = _1278;
        _1425 = _1277;
        _1426 = _1276;
        _1427 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1428 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1429 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
    }
    else
    {
        _1414 = _1415;
        _1416 = _1415;
        _1417 = _1415;
        _1418 = _1415;
        _1419 = _1415;
        _1420 = _1415;
        _1421 = _1415;
        _1422 = _1415;
        _1423 = _1415;
        _1424 = _1415;
        _1425 = _1415;
        _1426 = _1415;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1455 = fma(_1084, cbModelParam._m0[30u].z, fma(_1080, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076));
        float _1459 = fma(_1084, cbModelParam._m0[31u].z, fma(_1080, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076));
        float _1463 = fma(_1084, cbModelParam._m0[32u].z, fma(_1080, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076));
        float _1486 = _1076 + _835;
        float _1487 = _1080 + _836;
        float _1488 = _1084 + _837;
        float _1498 = fma(_1488, cbModelParam._m0[30u].z, fma(_1487, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1486)) - _1455;
        float _1499 = fma(_1488, cbModelParam._m0[31u].z, fma(_1487, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1486)) - _1459;
        float _1500 = fma(_1488, cbModelParam._m0[32u].z, fma(_1487, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1486)) - _1463;
        float _1504 = inversesqrt(dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500)));
        float _1517 = ((_1504 * _1498) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1455 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1518 = ((_1504 * _1499) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1459 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1519 = ((_1504 * _1500) / cbModelParam._m0[35u].z) + ((((((_1463 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        vec4 _1542 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1517, _1518, _1519), 0.0);
        float _1554 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1521.x + (-0.5));
        float _1556 = _1554 * (_1521.y + (-0.5));
        float _1557 = _1554 * (_1521.z + (-0.5));
        float _1564 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1528.x + (-0.5));
        float _1566 = _1564 * (_1528.y + (-0.5));
        float _1567 = _1564 * (_1528.z + (-0.5));
        float _1574 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1535.x + (-0.5));
        float _1576 = _1574 * (_1535.y + (-0.5));
        float _1577 = _1574 * (_1535.z + (-0.5));
        float _1584 = exp2((_1542.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1542.x + (-0.5));
        float _1586 = _1584 * (_1542.y + (-0.5));
        float _1587 = _1584 * (_1542.z + (-0.5));
        float _1588 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1589 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1590 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1591 = _1555 * 0.5;
        float _1592 = _1565 * 0.5;
        float _1593 = _1575 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_835, _836, _837), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1588 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4431 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1618 + 1.0))) + _1623) * _1588;
        float _1633 = _1556 * 0.5;
        float _1634 = _1566 * 0.5;
        float _1635 = _1576 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_835, _836, _837), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1589 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4464 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1660 + 1.0))) + _1665) * _1589;
        float _1675 = _1557 * 0.5;
        float _1676 = _1567 * 0.5;
        float _1677 = _1577 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_835, _836, _837), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4475 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1590 + 9.9999997473787516355514526367188e-06);
        float _4486 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4497 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_1702 + 1.0))) + _1707) * _1590;
        _1724 = _1557;
        _1725 = _1556;
        _1726 = _1555;
        _1727 = _1567;
        _1728 = _1566;
        _1729 = _1565;
        _1730 = _1577;
        _1731 = _1576;
        _1732 = _1575;
        _1733 = _1590;
        _1734 = _1589;
        _1735 = _1588;
        _1736 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
        _1737 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1738 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
    }
    else
    {
        _1724 = _1415;
        _1725 = _1415;
        _1726 = _1415;
        _1727 = _1415;
        _1728 = _1415;
        _1729 = _1415;
        _1730 = _1415;
        _1731 = _1415;
        _1732 = _1415;
        _1733 = _1415;
        _1734 = _1415;
        _1735 = _1415;
        _1736 = 0.0;
        _1737 = 0.0;
        _1738 = 0.0;
    }
    float _1748 = (cbModelParam._m0[1u].x * (_1736 - _1427)) + _1427;
    float _1749 = (cbModelParam._m0[1u].x * (_1737 - _1428)) + _1428;
    float _1750 = (cbModelParam._m0[1u].x * (_1738 - _1429)) + _1429;
    float _1771 = fma(_1750, cbSceneParam._m0[89u].z, fma(_1749, cbSceneParam._m0[89u].y, _1748 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1750, cbSceneParam._m0[90u].z, fma(_1749, cbSceneParam._m0[90u].y, _1748 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1750, cbSceneParam._m0[91u].z, fma(_1749, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1748));
    float _1792 = _1020 * 0.5;
    float _1793 = _1021 * 0.5;
    float _1794 = _1022 * 0.5;
    float _1795 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1726, _1729, _1732, _1735));
    float _1798 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1725, _1728, _1731, _1734));
    float _1801 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1724, _1727, _1730, _1733));
    float _1835;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1808 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1414, _1418, _1421, _1424));
        float _1812 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1416, _1419, _1422, _1425));
        float _1816 = dot(vec4(_1792, _1793, _1794, 1.0), vec4(_1417, _1420, _1423, _1426));
        float _1823 = dot(vec4(cbModelParam._m0[39u]), vec4(_1792, _1793, _1794, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1823) ? 0.0 : (isnan(0.0) ? _1823 : max(0.0, _1823))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1846;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1837 = dot(vec4(cbModelParam._m0[40u]), vec4(_1792, _1793, _1794, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0)), isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1837) ? 0.0 : (isnan(0.0) ? _1837 : max(0.0, _1837))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1850 = (_1846 * cbModelParam._m0[1u].x) + (_1835 * (1.0 - cbModelParam._m0[1u].x));
    float _1860 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _838);
    float _1861 = isnan(_1860) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1860 : min(cbModelParam._m0[25u].z, _1860));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1909 = fma(_1084, cbModelParam._m0[13u].z, fma(_1080, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1076)) + cbModelParam._m0[13u].w;
        float _1913 = fma(_1084, cbModelParam._m0[14u].z, fma(_1080, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1076)) + cbModelParam._m0[14u].w;
        float _1917 = fma(_1084, cbModelParam._m0[15u].z, fma(_1080, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1076)) + cbModelParam._m0[15u].w;
        float _1920 = fma(_1022, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1020));
        float _1923 = fma(_1022, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1020));
        float _1926 = fma(_1022, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1020));
        float _1954;
        if (_1920 > 0.0)
        {
            _1954 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1954 = frontier_phi_17_15_ladder;
        }
        float _2126;
        if (_1923 > 0.0)
        {
            _2126 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2126 = frontier_phi_26_22_ladder;
        }
        float _2421;
        if (_1926 > 0.0)
        {
            _2421 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2421 = frontier_phi_38_33_ladder;
        }
        float _2423 = isnan(_2126) ? _1954 : (isnan(_1954) ? _2126 : min(_1954, _2126));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1920) + _1909;
        float _2429 = (_2424 * _1923) + _1913;
        float _2430 = (_2424 * _1926) + _1917;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2431;
        float _2435 = _2431 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 > _2435) || ((_2429 < _2433) || ((_2428 < _2433) || (_2428 > _2435))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1861);
            frontier_phi_16_38_ladder = _2575.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2575.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2575.x * cbModelParam._m0[1u].y;
        }
        _1942 = frontier_phi_16_38_ladder_2;
        _1944 = frontier_phi_16_38_ladder_1;
        _1946 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1020, _1021, _1022), _1861);
        _1942 = _1930.x * cbModelParam._m0[1u].y;
        _1944 = _1930.y * cbModelParam._m0[1u].y;
        _1946 = _1930.z * cbModelParam._m0[1u].y;
    }
    float _1950 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _838);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1950 : min(cbModelParam._m0[25u].w, _1950));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2005 = fma(_1084, cbModelParam._m0[21u].z, fma(_1080, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1076)) + cbModelParam._m0[21u].w;
        float _2009 = fma(_1084, cbModelParam._m0[22u].z, fma(_1080, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1076)) + cbModelParam._m0[22u].w;
        float _2013 = fma(_1084, cbModelParam._m0[23u].z, fma(_1080, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1076)) + cbModelParam._m0[23u].w;
        float _2016 = fma(_1022, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1020));
        float _2019 = fma(_1022, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1020));
        float _2022 = fma(_1022, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1020));
        float _2131;
        if (_2016 > 0.0)
        {
            _2131 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2131 = frontier_phi_28_24_ladder;
        }
        float _2448;
        if (_2019 > 0.0)
        {
            _2448 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2448 = frontier_phi_40_35_ladder;
        }
        float _2786;
        if (_2022 > 0.0)
        {
            _2786 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2786 = frontier_phi_50_47_ladder;
        }
        float _2788 = isnan(_2448) ? _2131 : (isnan(_2131) ? _2448 : min(_2131, _2448));
        float _2789 = isnan(_2786) ? _2788 : (isnan(_2788) ? _2786 : min(_2788, _2786));
        float _2793 = (_2789 * _2016) + _2005;
        float _2794 = (_2789 * _2019) + _2009;
        float _2795 = (_2789 * _2022) + _2013;
        float _2796 = _2789 * 9.9999997473787516355514526367188e-05;
        float _2797 = (-1.0) - _2796;
        float _2799 = _2796 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2795 > _2799) || ((_2795 < _2797) || ((_2794 > _2799) || ((_2794 < _2797) || ((_2793 < _2797) || (_2793 > _2799))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2795, cbModelParam._m0[17u].z, fma(_2794, cbModelParam._m0[17u].y, _2793 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2795, cbModelParam._m0[18u].z, fma(_2794, cbModelParam._m0[18u].y, _2793 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2795, cbModelParam._m0[19u].z, fma(_2794, cbModelParam._m0[19u].y, _2793 * cbModelParam._m0[19u].x))), _1951);
            frontier_phi_25_50_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _2041 = frontier_phi_25_50_ladder_2;
        _2043 = frontier_phi_25_50_ladder_1;
        _2045 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2025 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1020, _1021, _1022), _1951);
        _2041 = _2025.x * cbModelParam._m0[1u].z;
        _2043 = _2025.y * cbModelParam._m0[1u].z;
        _2045 = _2025.z * cbModelParam._m0[1u].z;
    }
    float _2058 = (((_1047 * _996) + _1048) * _1012) * ((cbModelParam._m0[1u].w * (_2041 - _1942)) + _1942);
    float _2060 = (((_1047 * _998) + _1048) * _1012) * ((cbModelParam._m0[1u].w * (_2043 - _1944)) + _1944);
    float _2062 = (((_1047 * _999) + _1048) * _1012) * ((cbModelParam._m0[1u].w * (_2045 - _1946)) + _1946);
    float _2065 = fma(_2062, cbSceneParam._m0[89u].z, fma(_2060, cbSceneParam._m0[89u].y, _2058 * cbSceneParam._m0[89u].x));
    float _2068 = fma(_2062, cbSceneParam._m0[90u].z, fma(_2060, cbSceneParam._m0[90u].y, _2058 * cbSceneParam._m0[90u].x));
    float _2071 = fma(_2062, cbSceneParam._m0[91u].z, fma(_2060, cbSceneParam._m0[91u].y, _2058 * cbSceneParam._m0[91u].x));
    float _2105 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2109 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2117 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2118 = _2105 / _2117;
    float _2119 = _2109 / _2117;
    float _2120 = _2113 / _2117;
    float _2267;
    float _2268;
    float _2269;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2147 = ((uint(_2120 > cbSceneParam._m0[59u].y) + uint(_2120 > cbSceneParam._m0[59u].x)) + uint(_2120 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2148 = _2147 + 43u;
        uint _2156 = _2147 + 44u;
        uint _2164 = _2147 + 45u;
        uint _2172 = _2147 + 46u;
        float _2183 = fma(_2117, cbSceneParam._m0[_2148].w, fma(_2113, cbSceneParam._m0[_2148].z, fma(_2109, cbSceneParam._m0[_2148].y, _2105 * cbSceneParam._m0[_2148].x)));
        float _2187 = fma(_2117, cbSceneParam._m0[_2156].w, fma(_2113, cbSceneParam._m0[_2156].z, fma(_2109, cbSceneParam._m0[_2156].y, _2105 * cbSceneParam._m0[_2156].x)));
        float _2195 = fma(_2117, cbSceneParam._m0[_2172].w, fma(_2113, cbSceneParam._m0[_2172].z, fma(_2109, cbSceneParam._m0[_2172].y, _2105 * cbSceneParam._m0[_2172].x)));
        float _2200 = cbSceneParam._m0[33u].z * _2195;
        float _2202 = cbSceneParam._m0[33u].w * _2195;
        float _2205 = fma(_2117, cbSceneParam._m0[_2164].w, fma(_2113, cbSceneParam._m0[_2164].z, fma(_2109, cbSceneParam._m0[_2164].y, _2105 * cbSceneParam._m0[_2164].x))) / _2195;
        float _2253 = (cbSceneParam._m0[33u].x - sqrt(((_2119 * _2119) + (_2118 * _2118)) + (_2120 * _2120))) * cbSceneParam._m0[33u].y;
        float _4623 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2260 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2200 + _2183) / _2195, (_2202 + _2187) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2202 + _2183) / _2195, (_2187 - _2200) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2183 - _2200) / _2195, (_2187 - _2202) / _2195), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2183 - _2202) / _2195, (_2200 + _2187) / _2195), _2205), 0.0)).x), vec4(0.25)));
        _2267 = 1.0 - (_2260 * cbSceneParam._m0[34u].x);
        _2268 = 1.0 - (_2260 * cbSceneParam._m0[34u].y);
        _2269 = 1.0 - (_2260 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2267 = 1.0;
        _2268 = 1.0;
        _2269 = 1.0;
    }
    float _2333;
    float _2335;
    float _2337;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2321 = fma(_2117, cbSceneParam._m0[63u].w, fma(_2113, cbSceneParam._m0[63u].z, fma(_2109, cbSceneParam._m0[63u].y, _2105 * cbSceneParam._m0[63u].x)));
        float _2322 = fma(_2117, cbSceneParam._m0[60u].w, fma(_2113, cbSceneParam._m0[60u].z, fma(_2109, cbSceneParam._m0[60u].y, _2105 * cbSceneParam._m0[60u].x))) / _2321;
        float _2323 = fma(_2117, cbSceneParam._m0[61u].w, fma(_2113, cbSceneParam._m0[61u].z, fma(_2109, cbSceneParam._m0[61u].y, _2105 * cbSceneParam._m0[61u].x))) / _2321;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2322 >= cbSceneParam._m0[64u].x) && (_2323 >= cbSceneParam._m0[64u].y)) && (_2322 <= cbSceneParam._m0[64u].z)) && (_2323 <= cbSceneParam._m0[64u].w))
        {
            float _2461 = fma(_2117, cbSceneParam._m0[62u].w, fma(_2113, cbSceneParam._m0[62u].z, fma(_2109, cbSceneParam._m0[62u].y, _2105 * cbSceneParam._m0[62u].x))) / _2321;
            float _2465 = isnan(cbSceneParam._m0[41u].w) ? _2461 : (isnan(_2461) ? cbSceneParam._m0[41u].w : max(_2461, cbSceneParam._m0[41u].w));
            float _2508 = (cbSceneParam._m0[33u].x - sqrt(((_2119 * _2119) + (_2118 * _2118)) + (_2120 * _2120))) * cbSceneParam._m0[33u].y;
            float _4639 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
            float _2515 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2322, cbSceneParam._m0[33u].w + _2323), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2322, _2323 - cbSceneParam._m0[33u].z), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2322 - cbSceneParam._m0[33u].z, _2323 - cbSceneParam._m0[33u].w), _2465), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2322 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2323), _2465), 0.0)).x), vec4(0.25)));
            float _2519 = 1.0 - (_2515 * cbSceneParam._m0[34u].x);
            float _2520 = 1.0 - (_2515 * cbSceneParam._m0[34u].y);
            float _2521 = 1.0 - (_2515 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2521) ? _2269 : (isnan(_2269) ? _2521 : min(_2269, _2521));
            frontier_phi_37_36_ladder_1 = isnan(_2520) ? _2268 : (isnan(_2268) ? _2520 : min(_2268, _2520));
            frontier_phi_37_36_ladder_2 = isnan(_2519) ? _2267 : (isnan(_2267) ? _2519 : min(_2267, _2519));
        }
        else
        {
            frontier_phi_37_36_ladder = _2269;
            frontier_phi_37_36_ladder_1 = _2268;
            frontier_phi_37_36_ladder_2 = _2267;
        }
        _2333 = frontier_phi_37_36_ladder_2;
        _2335 = frontier_phi_37_36_ladder_1;
        _2337 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2333 = _2267;
        _2335 = _2268;
        _2337 = _2269;
    }
    uvec4 _2342 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2344 = _2342.x * 14u;
    uint _2345 = _2344 + 13u;
    float _2352 = _1012 + (-1.0);
    float _2357 = (cbLight._m0[_2345].x * _2352) + 1.0;
    float _2358 = (cbLight._m0[_2345].y * _2352) + 1.0;
    float _2359 = (cbLight._m0[_2345].z * _2352) + 1.0;
    float _2360 = (cbLight._m0[_2345].w * _2352) + 1.0;
    uint _2361 = _2344 + 5u;
    float _2367 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
    uint _2371 = _2344 + 4u;
    float _2380 = isnan(1.0) ? _2357 : (isnan(_2357) ? 1.0 : min(_2357, 1.0));
    uint _2384 = _2344 | 1u;
    float _2395 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_835, _836, _837));
    float _2398 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_835, _836, _837));
    float _4675 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _4686 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2403 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * 0.3183098733425140380859375;
    float _2405 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2412 = ((cbLight._m0[_2361].x * _2367) * _2405) + (((cbLight._m0[_2371].x * _2333) * _2380) * _2403);
    float _2413 = ((_2367 * cbLight._m0[_2361].y) * _2405) + (((cbLight._m0[_2371].y * _2335) * _2380) * _2403);
    float _2414 = ((_2367 * cbLight._m0[_2361].z) * _2405) + (((cbLight._m0[_2371].z * _2337) * _2380) * _2403);
    uvec4 _2418 = floatBitsToUint(cbLight._m0[_2344 + 12u]);
    bool _2420 = _2418.x == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2420)
    {
        _2522 = _2412;
        _2524 = _2413;
        _2526 = _2414;
    }
    else
    {
        uint _2530 = _2344 + 6u;
        float _2546 = (dot(vec3(cbLight._m0[_2344 + 2u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2547 = _2546 * _2546;
        float _4697 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2548 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2549 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2522 = (((cbLight._m0[_2530].x * 0.3183098733425140380859375) * _2548) * _2549) + _2412;
        _2524 = (((cbLight._m0[_2530].y * 0.3183098733425140380859375) * _2548) * _2549) + _2413;
        _2526 = (((cbLight._m0[_2530].z * 0.3183098733425140380859375) * _2548) * _2549) + _2414;
    }
    bool _2529 = _2418.y == 0u;
    float _2584;
    float _2586;
    float _2588;
    if (_2529)
    {
        _2584 = _2522;
        _2586 = _2524;
        _2588 = _2526;
    }
    else
    {
        uint _2757 = _2344 + 7u;
        float _2773 = (dot(vec3(cbLight._m0[_2344 + 3u].xyz), vec3(_835, _836, _837)) * 0.5) + 0.5;
        float _2774 = _2773 * _2773;
        float _4713 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2775 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2776 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
        _2584 = (((cbLight._m0[_2757].x * 0.3183098733425140380859375) * _2775) * _2776) + _2522;
        _2586 = (((cbLight._m0[_2757].y * 0.3183098733425140380859375) * _2775) * _2776) + _2524;
        _2588 = (((cbLight._m0[_2757].z * 0.3183098733425140380859375) * _2775) * _2776) + _2526;
    }
    uint _2591 = _2344 + 8u;
    float _2604 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2344].w)) * _838) * 0.949999988079071044921875);
    float _2605 = _2604 * _2604;
    float _2606 = cbLight._m0[_2344].x + _914;
    float _2607 = cbLight._m0[_2344].y + _915;
    float _2608 = cbLight._m0[_2344].z + _916;
    float _2612 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
    float _2613 = _2612 * _2606;
    float _2614 = _2612 * _2607;
    float _2615 = _2612 * _2608;
    float _2616 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2344].xyz));
    float _4729 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2619 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _4740 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _2620 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2621 = dot(vec3(_835, _836, _837), vec3(_2613, _2614, _2615));
    float _4751 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2625 = dot(vec3(cbLight._m0[_2344].xyz), vec3(_2613, _2614, _2615));
    float _4762 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2629 = _2605 * _2605;
    float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
    float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2642 = 0.959999978542327880859375 - _993;
    float _2644 = 0.959999978542327880859375 - _994;
    float _2645 = 0.959999978542327880859375 - _995;
    float _2652 = 1.0 - _2605;
    float _2663 = (0.5 / (((_2620 * ((_2619 * _2652) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2652) + _2605) * _2619))) * _2619;
    float _4773 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
    float _2665 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
    uint _2679 = _2344 + 9u;
    float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2384].w)) * _838) * 0.949999988079071044921875);
    float _2691 = _2690 * _2690;
    float _2692 = cbLight._m0[_2384].x + _914;
    float _2693 = cbLight._m0[_2384].y + _915;
    float _2694 = cbLight._m0[_2384].z + _916;
    float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
    float _2699 = _2698 * _2692;
    float _2700 = _2698 * _2693;
    float _2701 = _2698 * _2694;
    float _2702 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2384].xyz));
    float _4784 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
    float _2705 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
    float _2706 = dot(vec3(_835, _836, _837), vec3(_2699, _2700, _2701));
    float _4795 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2710 = dot(vec3(cbLight._m0[_2384].xyz), vec3(_2699, _2700, _2701));
    float _4806 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2714 = _2691 * _2691;
    float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
    float _2725 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
    float _2732 = 1.0 - _2691;
    float _2742 = (0.5 / (((_2620 * ((_2705 * _2732) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2732) + _2691) * _2705))) * _2705;
    float _4817 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2744 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
    float _2754 = (((((_2725 * _2642) + _996) * cbLight._m0[_2679].x) * _2744) * _2367) + ((((cbLight._m0[_2591].x * _2333) * ((_2641 * _2642) + _996)) * _2665) * _2380);
    float _2755 = (((((_2725 * _2644) + _998) * cbLight._m0[_2679].y) * _2744) * _2367) + ((((cbLight._m0[_2591].y * _2335) * ((_2641 * _2644) + _998)) * _2665) * _2380);
    float _2756 = (((((_2725 * _2645) + _999) * cbLight._m0[_2679].z) * _2744) * _2367) + ((((cbLight._m0[_2591].z * _2337) * ((_2641 * _2645) + _999)) * _2665) * _2380);
    float _2812;
    float _2814;
    float _2816;
    if (_2420)
    {
        _2812 = _2754;
        _2814 = _2755;
        _2816 = _2756;
    }
    else
    {
        uint _2818 = _2344 + 2u;
        uint _2822 = _2344 + 10u;
        float _2836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2818].w)) * _838) * 0.949999988079071044921875);
        float _2837 = _2836 * _2836;
        float _2838 = cbLight._m0[_2818].x + _914;
        float _2839 = cbLight._m0[_2818].y + _915;
        float _2840 = cbLight._m0[_2818].z + _916;
        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
        float _2845 = _2844 * _2838;
        float _2846 = _2844 * _2839;
        float _2847 = _2844 * _2840;
        float _2848 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2818].xyz));
        float _4828 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2852 = dot(vec3(_835, _836, _837), vec3(_2845, _2846, _2847));
        float _4839 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2856 = dot(vec3(cbLight._m0[_2818].xyz), vec3(_2845, _2846, _2847));
        float _4850 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2860 = _2837 * _2837;
        float _2864 = ((_2855 * _2855) * (_2860 + (-1.0))) + 1.0;
        float _2871 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
        float _2878 = 1.0 - _2837;
        float _2888 = (0.5 / (((_2620 * ((_2851 * _2878) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2878) + _2837) * _2851))) * _2851;
        float _4861 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2890 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2860 / ((_2864 * _2864) * 3.141590118408203125));
        float _2891 = isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0));
        _2812 = (((((_2871 * _2642) + _996) * cbLight._m0[_2822].x) * _2890) * _2891) + _2754;
        _2814 = (((((_2871 * _2644) + _998) * cbLight._m0[_2822].y) * _2890) * _2891) + _2755;
        _2816 = (((((_2871 * _2645) + _999) * cbLight._m0[_2822].z) * _2890) * _2891) + _2756;
    }
    float _2922;
    float _2924;
    float _2926;
    if (_2529)
    {
        _2922 = _2812;
        _2924 = _2814;
        _2926 = _2816;
    }
    else
    {
        uint _2933 = _2344 + 3u;
        uint _2937 = _2344 + 11u;
        float _2951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2933].w)) * _838) * 0.949999988079071044921875);
        float _2952 = _2951 * _2951;
        float _2953 = cbLight._m0[_2933].x + _914;
        float _2954 = cbLight._m0[_2933].y + _915;
        float _2955 = cbLight._m0[_2933].z + _916;
        float _2959 = inversesqrt(dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955)));
        float _2960 = _2959 * _2953;
        float _2961 = _2959 * _2954;
        float _2962 = _2959 * _2955;
        float _2963 = dot(vec3(_835, _836, _837), vec3(cbLight._m0[_2933].xyz));
        float _4877 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2966 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
        float _2967 = dot(vec3(_835, _836, _837), vec3(_2960, _2961, _2962));
        float _4888 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        float _2970 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2971 = dot(vec3(cbLight._m0[_2933].xyz), vec3(_2960, _2961, _2962));
        float _4899 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2975 = _2952 * _2952;
        float _2979 = ((_2970 * _2970) * (_2975 + (-1.0))) + 1.0;
        float _2986 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
        float _2993 = 1.0 - _2952;
        float _3003 = (0.5 / (((_2620 * ((_2966 * _2993) + _2952)) + 9.9999999392252902907785028219223e-09) + (((_2620 * _2993) + _2952) * _2966))) * _2966;
        float _4910 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3005 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2975 / ((_2979 * _2979) * 3.141590118408203125));
        float _3006 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
        _2922 = (((((_2986 * _2642) + _996) * cbLight._m0[_2937].x) * _3005) * _3006) + _2812;
        _2924 = (((((_2986 * _2644) + _998) * cbLight._m0[_2937].y) * _3005) * _3006) + _2814;
        _2926 = (((((_2986 * _2645) + _999) * cbLight._m0[_2937].z) * _3005) * _3006) + _2816;
    }
    float _3072;
    float _3074;
    float _3076;
    float _3078;
    float _3080;
    float _3082;
    if (_2342.y == 0u)
    {
        uvec4 _3027 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3028 = _3027.x;
        uint _3039 = uint((float(_3027.y) * floor(float(uint(cbSceneParam._m0[85u].y * _935) / _3028))) + floor(float(uint(cbSceneParam._m0[85u].x * _934) / _3028)));
        float _3049 = (log2(_2120 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3050 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        uint _3053 = uint(isnan(14.0) ? _3050 : (isnan(_3050) ? 14.0 : min(_3050, 14.0)));
        uvec4 _3058 = texelFetch(g_lightClusterGridBuffer, int(((_3053 << 2u) + (_3039 << 6u)) >> 2u));
        uint _3059 = _3058.x;
        uint _3060 = _3027.z;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        if (((((1u << ((_3060 >> 4u) & 15u)) + 4294967295u) & _3059) == 0u) || ((_3060 & 240u) == 0u))
        {
            _3139 = 0.0;
            _3141 = 0.0;
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
        }
        else
        {
            float _3140;
            float _3142;
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            uint _3298 = 0u;
            uint _3307;
            bool _3308;
            for (;;)
            {
                _3307 = texelFetch(g_lightClassification, int((((_3053 << 5u) + (_3039 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                _3308 = _3307 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3308)
                {
                    frontier_phi_71_pred = _3297;
                    frontier_phi_71_pred_1 = _3296;
                    frontier_phi_71_pred_2 = _3295;
                    frontier_phi_71_pred_3 = _3294;
                    frontier_phi_71_pred_4 = _3293;
                    frontier_phi_71_pred_5 = _3292;
                }
                else
                {
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    uint _3443;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3297;
                    _3443 = _3307;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    for (;;)
                    {
                        uint _3447 = uint(findLSB(_3443)) + (_3298 << 5u);
                        uint _3444 = (_3443 + 4294967295u) & _3443;
                        uint _3449 = _3447 * 48u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 3u)).x));
                        uint _3469 = (_3447 * 48u) + 4u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3488 = (_3447 * 48u) + 8u;
                        vec3 _3499 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x));
                        float _3503 = _3463.x - _2118;
                        float _3504 = _3463.y - _2119;
                        float _3505 = _3463.z - _2120;
                        float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                        float _3509 = inversesqrt(_3506);
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3513 = dot(vec3(_953, _956, _959), vec3(_3510, _3511, _3512));
                        float _3518 = 1.0 - (_3506 * _3463.w);
                        float _4936 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3520 = sqrt(_3506) * _3482.w;
                        float _3523 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3513) + _3524;
                        float _3530 = _3520 * _3520;
                        float _3534 = ((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3519) / ((_3530 * 0.699999988079071044921875) + 1.0);
                        float _3538 = (-0.0) - _2118;
                        float _3539 = (-0.0) - _2119;
                        float _3540 = (-0.0) - _2120;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3545 = _3544 * _3538;
                        float _3546 = _3544 * _3539;
                        float _3547 = _3544 * _3540;
                        float _3554 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                        float _3555 = 1.0 - _1028;
                        float _3562 = sqrt(1.0 - ((1.0 - (_3555 * _3555)) * (1.0 - (_3554 * _3554))));
                        float _3563 = _3562 * _3562;
                        float _3564 = _3563 * _3563;
                        float _3565 = _3545 + _3510;
                        float _3566 = _3546 + _3511;
                        float _3567 = _3547 + _3512;
                        float _3571 = inversesqrt(dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567)));
                        float _3575 = dot(vec3(_953, _956, _959), vec3(_3545, _3546, _3547));
                        float _4952 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3578 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3579 = dot(vec3(_953, _956, _959), vec3(_3571 * _3565, _3571 * _3566, _3571 * _3567));
                        float _4963 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3582 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3586 = ((_3582 * _3582) * (_3564 + (-1.0))) + 1.0;
                        float _3587 = _3523 * _3563;
                        float _3588 = _3587 * _3587;
                        float _3591 = ((1.0 - _3588) * _3513) + _3588;
                        float _4974 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3592 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3593 = 1.0 - _3563;
                        float _3603 = (0.5 / (((_3592 * ((_3578 * _3593) + _3563)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3563) * _3578))) * _3592;
                        float _4985 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3614 = (((_3564 * 3.1415927410125732421875) * (isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0)))) / ((_3586 * _3586) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125))) * _3519;
                        _3367 = (_3534 * _3482.x) + _3440;
                        _3368 = (_3534 * _3482.y) + _3441;
                        _3369 = (_3534 * _3482.z) + _3442;
                        _3364 = (_3614 * _3499.x) + _3437;
                        _3365 = (_3614 * _3499.y) + _3438;
                        _3366 = (_3614 * _3499.z) + _3439;
                        if (_3444 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3369;
                            _3443 = _3444;
                        }
                    }
                    frontier_phi_71_pred = _3369;
                    frontier_phi_71_pred_1 = _3368;
                    frontier_phi_71_pred_2 = _3367;
                    frontier_phi_71_pred_3 = _3366;
                    frontier_phi_71_pred_4 = _3365;
                    frontier_phi_71_pred_5 = _3364;
                }
                _3150 = frontier_phi_71_pred;
                _3148 = frontier_phi_71_pred_1;
                _3146 = frontier_phi_71_pred_2;
                _3144 = frontier_phi_71_pred_3;
                _3142 = frontier_phi_71_pred_4;
                _3140 = frontier_phi_71_pred_5;
                uint _3299 = _3298 + 1u;
                if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3292 = _3140;
                    _3293 = _3142;
                    _3294 = _3144;
                    _3295 = _3146;
                    _3296 = _3148;
                    _3297 = _3150;
                    _3298 = _3299;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3139 = _3140;
            _3141 = _3142;
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
        }
        uvec4 _3153 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3154 = _3153.z;
        uint _3156 = (_3154 >> 8u) & 15u;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        if (((4294967295u << _3156) & _3059) == 0u)
        {
            _3260 = _3139;
            _3262 = _3141;
            _3264 = _3143;
            _3266 = _3145;
            _3268 = _3147;
            _3270 = _3149;
        }
        else
        {
            float _3285 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
            float _3286 = _3285 * _2118;
            float _3287 = _3285 * _2119;
            float _3288 = _3285 * _2120;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3156 < ((_3154 >> 12u) & 15u))
            {
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3420 = _3139;
                float _3421 = _3141;
                float _3422 = _3143;
                float _3423 = _3145;
                float _3424 = _3147;
                float _3425 = _3149;
                uint _3426 = _3156;
                uint _3435;
                bool _3436;
                for (;;)
                {
                    _3435 = texelFetch(g_lightClassification, int((((_3053 << 5u) + (_3039 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                    _3436 = _3435 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3436)
                    {
                        frontier_phi_82_pred = _3425;
                        frontier_phi_82_pred_1 = _3424;
                        frontier_phi_82_pred_2 = _3423;
                        frontier_phi_82_pred_3 = _3422;
                        frontier_phi_82_pred_4 = _3421;
                        frontier_phi_82_pred_5 = _3420;
                    }
                    else
                    {
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3641 = _3420;
                        float _3642 = _3421;
                        float _3643 = _3422;
                        float _3644 = _3423;
                        float _3645 = _3424;
                        float _3646 = _3425;
                        uint _3647 = _3435;
                        uint _3648;
                        vec4 _3673;
                        float _3674;
                        vec4 _3689;
                        vec3 _3701;
                        vec4 _3716;
                        vec4 _3731;
                        float _3777;
                        bool _3778;
                        for (;;)
                        {
                            uint _3658 = ((_3426 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3647));
                            _3648 = (_3647 + 4294967295u) & _3647;
                            uint _3660 = _3658 * 40u;
                            _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3674 = _3673.w;
                            uint _3676 = (_3658 * 40u) + 4u;
                            _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3691 = (_3658 * 40u) + 8u;
                            _3701 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x));
                            uint _3703 = (_3658 * 40u) + 16u;
                            _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3718 = (_3658 * 40u) + 20u;
                            _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            uint _3733 = (_3658 * 40u) + 24u;
                            vec4 _3746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3733 + 3u)).x));
                            uint _3752 = (_3658 * 40u) + 28u;
                            vec4 _3765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 3u)).x));
                            _3777 = fma(_2120, _3765.z, fma(_2119, _3765.y, _3765.x * _2118)) + _3765.w;
                            _3778 = !((fma(_2120, _3746.z, fma(_2119, _3746.y, _3746.x * _2118)) + _3746.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3778)
                            {
                                float _3805 = _3673.x - _2118;
                                float _3806 = _3673.y - _2119;
                                float _3807 = _3673.z - _2120;
                                float _3808 = dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807));
                                float _3811 = inversesqrt(_3808);
                                float _3812 = _3811 * _3805;
                                float _3813 = _3811 * _3806;
                                float _3814 = _3811 * _3807;
                                float _3818 = 1.0 - (_3808 / (_3674 * _3674));
                                float _4996 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3819 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3823 = sqrt(_3808) * _3689.w;
                                float _3825 = 1.39999997615814208984375 / (_3823 + 1.39999997615814208984375);
                                float _3826 = _3825 * _3825;
                                float _3829 = ((1.0 - _3826) * dot(vec3(_3812, _3813, _3814), vec3(_953, _956, _959))) + _3826;
                                float _3832 = _3823 * _3823;
                                float _3836 = (fma(_2120, _3716.z, fma(_2119, _3716.y, _3716.x * _2118)) + _3716.w) / _3777;
                                float _3837 = (fma(_2120, _3731.z, fma(_2119, _3731.y, _3731.x * _2118)) + _3731.w) / _3777;
                                float _3841 = 1.0 - dot(vec2(_3836, _3837), vec2(_3836, _3837));
                                float _5012 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3843 = _3842 * (((isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0))) * _3819) / ((_3832 * 0.699999988079071044921875) + 1.0));
                                float _3855 = exp2(log2(1.0 / ((_3832 * 3.5) + 5.0)) * 0.25);
                                float _3856 = 1.0 - _1028;
                                float _3863 = sqrt(1.0 - ((1.0 - (_3856 * _3856)) * (1.0 - (_3855 * _3855))));
                                float _3864 = _3863 * _3863;
                                float _3865 = _3864 * _3864;
                                float _3866 = _3812 - _3286;
                                float _3867 = _3813 - _3287;
                                float _3868 = _3814 - _3288;
                                float _3872 = inversesqrt(dot(vec3(_3866, _3867, _3868), vec3(_3866, _3867, _3868)));
                                float _3876 = dot(vec3(_953, _956, _959), vec3((-0.0) - _3286, (-0.0) - _3287, (-0.0) - _3288));
                                float _5023 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3879 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3880 = dot(vec3(_953, _956, _959), vec3(_3872 * _3866, _3872 * _3867, _3872 * _3868));
                                float _5034 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3883 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3887 = ((_3883 * _3883) * (_3865 + (-1.0))) + 1.0;
                                float _3888 = _3825 * _3864;
                                float _3889 = _3888 * _3888;
                                float _3895 = ((1.0 - _3889) * dot(vec3(_953, _956, _959), vec3(_3812, _3813, _3814))) + _3889;
                                float _5045 = isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0));
                                float _3896 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3897 = 1.0 - _3864;
                                float _3907 = (0.5 / (((_3896 * ((_3879 * _3897) + _3864)) + 9.9999999392252902907785028219223e-09) + (((_3896 * _3897) + _3864) * _3879))) * _3896;
                                float _5056 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3917 = (_3842 * _3819) * (((_3865 * 3.1415927410125732421875) * (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0)))) / ((_3887 * _3887) * ((_3832 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3843 * _3689.z;
                                frontier_phi_88_pred_1 = _3843 * _3689.y;
                                frontier_phi_88_pred_2 = _3843 * _3689.x;
                                frontier_phi_88_pred_3 = _3917 * _3701.z;
                                frontier_phi_88_pred_4 = _3917 * _3701.y;
                                frontier_phi_88_pred_5 = _3917 * _3701.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3926 = frontier_phi_88_pred;
                            _3925 = frontier_phi_88_pred_1;
                            _3924 = frontier_phi_88_pred_2;
                            _3923 = frontier_phi_88_pred_3;
                            _3922 = frontier_phi_88_pred_4;
                            _3921 = frontier_phi_88_pred_5;
                            _3631 = _3924 + _3644;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            if (_3648 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3648;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3633;
                        frontier_phi_82_pred_1 = _3632;
                        frontier_phi_82_pred_2 = _3631;
                        frontier_phi_82_pred_3 = _3630;
                        frontier_phi_82_pred_4 = _3629;
                        frontier_phi_82_pred_5 = _3628;
                    }
                    _3271 = frontier_phi_82_pred;
                    _3269 = frontier_phi_82_pred_1;
                    _3267 = frontier_phi_82_pred_2;
                    _3265 = frontier_phi_82_pred_3;
                    _3263 = frontier_phi_82_pred_4;
                    _3261 = frontier_phi_82_pred_5;
                    uint _3427 = _3426 + 1u;
                    if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3420 = _3261;
                        _3421 = _3263;
                        _3422 = _3265;
                        _3423 = _3267;
                        _3424 = _3269;
                        _3425 = _3271;
                        _3426 = _3427;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3267;
                frontier_phi_63_64_ladder_1 = _3271;
                frontier_phi_63_64_ladder_2 = _3269;
                frontier_phi_63_64_ladder_3 = _3265;
                frontier_phi_63_64_ladder_4 = _3263;
                frontier_phi_63_64_ladder_5 = _3261;
            }
            else
            {
                frontier_phi_63_64_ladder = _3145;
                frontier_phi_63_64_ladder_1 = _3149;
                frontier_phi_63_64_ladder_2 = _3147;
                frontier_phi_63_64_ladder_3 = _3143;
                frontier_phi_63_64_ladder_4 = _3141;
                frontier_phi_63_64_ladder_5 = _3139;
            }
            _3260 = frontier_phi_63_64_ladder_5;
            _3262 = frontier_phi_63_64_ladder_4;
            _3264 = frontier_phi_63_64_ladder_3;
            _3266 = frontier_phi_63_64_ladder;
            _3268 = frontier_phi_63_64_ladder_2;
            _3270 = frontier_phi_63_64_ladder_1;
        }
        float _3275 = isnan(1.0) ? _1012 : (isnan(_1012) ? 1.0 : min(_1012, 1.0));
        _3072 = (_3275 * _3266) + _2584;
        _3074 = (_3275 * _3268) + _2586;
        _3076 = (_3275 * _3270) + _2588;
        _3078 = ((_3260 * _996) * _3275) + _2922;
        _3080 = ((_3262 * _998) * _3275) + _2924;
        _3082 = ((_3264 * _999) * _3275) + _2926;
    }
    else
    {
        _3072 = _2584;
        _3074 = _2586;
        _3076 = _2588;
        _3078 = _2922;
        _3080 = _2924;
        _3082 = _2926;
    }
    float _5072 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _5083 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _5094 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _3099 = ((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3072 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1012))) + ((_3078 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    float _3100 = ((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3074 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1012))) + ((_3080 + ((isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    float _3101 = ((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3076 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1012))) + ((_3082 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1850)) * cbPerFrame._m0[3u].x);
    uint _3102 = _256 + 6u;
    float _3110 = _934 / cbSceneParam._m0[86u].x;
    float _3111 = _935 / cbSceneParam._m0[86u].y;
    vec4 _3125 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3110, _3111, (log2((isnan(cbSceneParam._m0[77u].w) ? _857 : (isnan(_857) ? cbSceneParam._m0[77u].w : min(_857, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3127 = _3125.x;
    float _3128 = _3125.y;
    float _3129 = _3125.z;
    float _3130 = _3125.w;
    float _3202;
    float _3204;
    float _3206;
    float _3208;
    if (_857 > cbSceneParam._m0[78u].w)
    {
        float _3164 = isnan(_857) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _857 : min(cbSceneParam._m0[80u].w, _857));
        float _3165 = _3164 / _857;
        float _3176 = _3165 * _907;
        float _3177 = _908 * _3165;
        float _3178 = (-0.0) - _3177;
        float _3180 = _3165 * _909;
        float _3182 = (cbSceneParam._m0[77u].w * _3178) / _3164;
        float _3183 = _3182 + cbSceneParam._m0[79u].w;
        float _3184 = cbSceneParam._m0[79u].w - _3177;
        float _3190 = sqrt(((_3176 * _3176) + (_3177 * _3177)) + (_3180 * _3180));
        float _3193 = (1.0 - (cbSceneParam._m0[77u].w / _3164)) * _3190;
        float _3198 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3200 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3377;
        if (abs((_3178 - _3182) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3377 = ((((_3183 > 0.0) ? exp2(_3198 * _3183) : (2.0 - exp2(_3200 * _3183))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3193;
        }
        else
        {
            float _3321 = 1.0 / cbSceneParam._m0[80u].x;
            float _3322 = isnan(_3184) ? _3183 : (isnan(_3183) ? _3184 : max(_3183, _3184));
            float _3323 = isnan(_3184) ? _3183 : (isnan(_3183) ? _3184 : min(_3183, _3184));
            float _3332 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : min(_3322, 0.0));
            float _3333 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : min(_3323, 0.0));
            _3377 = ((abs(_3190 / _3178) * cbSceneParam._m0[80u].y) * ((((_3332 - _3333) * 2.0) - ((exp2(_3198 * (isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0)))) - exp2(_3198 * (isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))))) * _3321)) - ((exp2(_3200 * _3332) - exp2(_3200 * _3333)) * _3321))) + (_3193 * cbSceneParam._m0[80u].z);
        }
        vec4 _3379 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3110, _3111, 1.0), 0.0);
        float _3388 = exp2((_3377 * (-1.44269502162933349609375)) * (1.0 - _3379.w));
        float _3389 = log2(_3388);
        float _3405 = log2(_3130);
        _3202 = (exp2(_3405 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].x)) * _3379.x) / cbSceneParam._m0[78u].x)) + _3127;
        _3204 = (exp2(_3405 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].y)) * _3379.y) / cbSceneParam._m0[78u].y)) + _3128;
        _3206 = (exp2(_3405 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].z)) * _3379.z) / cbSceneParam._m0[78u].z)) + _3129;
        _3208 = _3388 * _3130;
    }
    else
    {
        _3202 = _3127;
        _3204 = _3128;
        _3206 = _3129;
        _3208 = _3130;
    }
    bool _3415;
    vec4 _3218;
    vec4 _3240;
    float _3242;
    float _3246;
    float _3247;
    float _3248;
    float _3249;
    bool _3259;
    for (;;)
    {
        _3218 = cbMatDynParam._m0[0u];
        float _3220 = roundEven(_3218.y);
        bool _3221 = _3220 == 3.0;
        float _3222 = log2(_3208);
        float _3229 = exp2(_3222 * cbSceneParam._m0[78u].x) * _3099;
        float _3230 = exp2(_3222 * cbSceneParam._m0[78u].y) * _3100;
        float _3231 = exp2(_3222 * cbSceneParam._m0[78u].z) * _3101;
        float _3238 = _923 + (-0.5);
        _3240 = cbMtdParam._m0[1u];
        _3242 = _3240.y * _3238;
        float _3245 = (_3220 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3246 = _3245 * (_3221 ? _3229 : (_3229 + (cbSceneParam._m0[72u].w * _3202)));
        _3247 = _3245 * (_3221 ? _3230 : (_3230 + (cbSceneParam._m0[72u].w * _3204)));
        _3248 = _3245 * (_3221 ? _3231 : (_3231 + (cbSceneParam._m0[72u].w * _3206)));
        _3249 = _3238 * 0.999000012874603271484375;
        _3259 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3259)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3249) < 0.5)
            {
                _3415 = true;
                break;
            }
        }
        uint _3356 = _972 + uint(_3218.w);
        if ((cbInstanceData._m0[_3356].w < 1.0) && ((cbInstanceData._m0[_3356].w + _3249) < 0.5))
        {
            _3415 = true;
            break;
        }
        if ((_3242 + 1.0) < _3240.x)
        {
            _3415 = true;
            break;
        }
        _3415 = false;
        break;
    }
    float _3619;
    if (_3415)
    {
        discard_state = true;
        _3619 = 0.0;
    }
    else
    {
        _3619 = cbInstanceData._m0[_3102].w;
    }
    SV_Target.x = _3246;
    SV_Target.y = _3247;
    SV_Target.z = _3248;
    SV_Target.w = _3619;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3102].w;
    discard_exit();
}


