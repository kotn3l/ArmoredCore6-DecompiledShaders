#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1341;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3693 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _441 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_428 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323);
    float _444 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_428 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324);
    float _447 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_428 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325);
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _428) + _486;
    float _498 = ((((_465.x - _484) * _428) + _484) * 2.0) + (-1.0);
    float _500 = ((((_465.y - _485) * _428) + _485) * 2.0) + (-1.0);
    float _501 = dot(vec2(_498, _500), vec2(_498, _500));
    float _3704 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _506 = sqrt(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))));
    vec4 _522 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _549 = _547.x;
    float _550 = 1.0 - _549;
    float _559 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _562 = ((isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : min(_559, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _571 = (_562 - ((((((_549 - _550) * cbMtdParam._m0[24u].z) + _550) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _562))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3725 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _579 = (_572 * (cbMtdParam._m0[17u].x - _441)) + _441;
    float _580 = (_572 * (cbMtdParam._m0[17u].y - _444)) + _444;
    float _581 = (_572 * (cbMtdParam._m0[17u].z - _447)) + _447;
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _595 = _593.x;
    float _596 = 1.0 - _595;
    float _621 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_595 - _596) * cbMtdParam._m0[24u].w) + _596) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3736 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _622 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _630 = ((((cbMtdParam._m0[10u].x - _579) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _622) + _579;
    float _631 = ((((cbMtdParam._m0[10u].y - _580) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _622) + _580;
    float _632 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _581)) * _622) + _581;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _660 = _658.x;
    float _677 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _660) * _428) + _660;
    float _681 = ((_644.x - _677) * cbMtdParam._m0[19u].z) + _677;
    float _683 = _681 - (_681 * _572);
    float _685 = _683 - (_683 * _622);
    float _689 = (cbMtdParam._m0[19u].w * (_522.z - _495)) + _495;
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _710 = (_703.x * 2.0) + (-1.0);
    float _711 = (_703.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3747 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _720 = (_572 * (_703.z - _689)) + _689;
    float _723 = ((cbMtdParam._m0[23u].x - _720) * _622) + _720;
    vec4 _742 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _748 = (_742.x * 2.0) + (-1.0);
    float _749 = (_742.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3758 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _758 = (((_522.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _498;
    float _759 = (((_522.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _500;
    float _771 = (((_710 - _758) + (cbMtdParam._m0[21u].x * _758)) * _572) + _758;
    float _772 = (((_711 - _759) + (cbMtdParam._m0[21u].x * _759)) * _572) + _759;
    float _773 = (_572 * (sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) - _506)) + _506;
    float _784 = (((_748 - _771) + (_771 * cbMtdParam._m0[22u].z)) * _622) + _771;
    float _785 = (((_749 - _772) + (_772 * cbMtdParam._m0[22u].z)) * _622) + _772;
    float _786 = ((sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) - _773) * _622) + _773;
    float _788 = cbMtdParam._m0[22u].x + _522.w;
    float _791 = fma(_786, _242 * NORMAL.x, fma(_785, _249 * TANGENT.x, (_235 * _227) * _784));
    float _794 = fma(_786, _242 * NORMAL.y, fma(_785, _249 * TANGENT.y, (_235 * _228) * _784));
    float _797 = fma(_786, _242 * NORMAL.z, fma(_785, _249 * TANGENT.z, (_235 * _229) * _784));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _3769 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _805 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _3791 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3802 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3813 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3824 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _810 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _824 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _911 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _914 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _928 = (_255 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _934 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_928].x;
    float _935 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_928].y;
    float _936 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_928].z;
    float _3835 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _940 = 1.0 - _810;
    float _941 = _937 * _940;
    float _942 = _938 * _940;
    float _943 = _939 * _940;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _810;
    float _949 = (_938 + (-0.039999999105930328369140625)) * _810;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _810;
    float _951 = _948 + 0.039999999105930328369140625;
    float _953 = _949 + 0.039999999105930328369140625;
    float _954 = _950 + 0.039999999105930328369140625;
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _967 = ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * TEXCOORD_5.w) * _963.x;
    float _968 = dot(vec3(_802, _803, _804), vec3(_881, _882, _883));
    float _971 = _968 * 2.0;
    float _975 = (_971 * _802) - _881;
    float _976 = (_971 * _803) - _882;
    float _977 = (_971 * _804) - _883;
    float _981 = abs(dot(vec3(_881, _882, _883), vec3(_802, _803, _804)));
    float _3868 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _983 = sqrt(_805);
    float _996 = exp2((_983 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_983 * 3.0));
    float _1002 = (1.0 - _996) * ((_983 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1003 = _996 * _983;
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1065 = fma(_1039, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1031));
        float _1069 = fma(_1039, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1031));
        float _1073 = fma(_1039, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1031));
        float _1098 = _1031 + _802;
        float _1099 = _1035 + _803;
        float _1100 = _1039 + _804;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1065;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1069;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1073;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1065 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1069 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1073 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_802, _803, _804), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3916 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_802, _803, _804), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3949 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_802, _803, _804), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3982 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1380 = fma(_1039, cbModelParam._m0[30u].z, fma(_1035, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031));
        float _1384 = fma(_1039, cbModelParam._m0[31u].z, fma(_1035, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031));
        float _1388 = fma(_1039, cbModelParam._m0[32u].z, fma(_1035, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031));
        float _1411 = _1031 + _802;
        float _1412 = _1035 + _803;
        float _1413 = _1039 + _804;
        float _1423 = fma(_1413, cbModelParam._m0[30u].z, fma(_1412, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1411)) - _1380;
        float _1424 = fma(_1413, cbModelParam._m0[31u].z, fma(_1412, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1411)) - _1384;
        float _1425 = fma(_1413, cbModelParam._m0[32u].z, fma(_1412, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1411)) - _1388;
        float _1429 = inversesqrt(dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425)));
        float _1442 = ((_1429 * _1423) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1380 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1429 * _1424) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1384 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1429 * _1425) / cbModelParam._m0[35u].z) + ((((((_1388 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1442, _1443, _1444), 0.0);
        float _1479 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1446.x + (-0.5));
        float _1481 = _1479 * (_1446.y + (-0.5));
        float _1482 = _1479 * (_1446.z + (-0.5));
        float _1489 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1453.x + (-0.5));
        float _1491 = _1489 * (_1453.y + (-0.5));
        float _1492 = _1489 * (_1453.z + (-0.5));
        float _1499 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1460.x + (-0.5));
        float _1501 = _1499 * (_1460.y + (-0.5));
        float _1502 = _1499 * (_1460.z + (-0.5));
        float _1509 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1467.x + (-0.5));
        float _1511 = _1509 * (_1467.y + (-0.5));
        float _1512 = _1509 * (_1467.z + (-0.5));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = _1480 * 0.5;
        float _1517 = _1490 * 0.5;
        float _1518 = _1500 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_802, _803, _804), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4045 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1543 + 1.0))) + _1548) * _1513;
        float _1558 = _1481 * 0.5;
        float _1559 = _1491 * 0.5;
        float _1560 = _1501 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_802, _803, _804), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4078 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1585 + 1.0))) + _1590) * _1514;
        float _1600 = _1482 * 0.5;
        float _1601 = _1492 * 0.5;
        float _1602 = _1502 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_802, _803, _804), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4111 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1627 + 1.0))) + _1632) * _1515;
        _1649 = _1482;
        _1650 = _1481;
        _1651 = _1480;
        _1652 = _1492;
        _1653 = _1491;
        _1654 = _1490;
        _1655 = _1502;
        _1656 = _1501;
        _1657 = _1500;
        _1658 = _1515;
        _1659 = _1514;
        _1660 = _1513;
        _1661 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1662 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1663 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
    }
    else
    {
        _1649 = _1341;
        _1650 = _1341;
        _1651 = _1341;
        _1652 = _1341;
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = _1341;
        _1660 = _1341;
        _1661 = 0.0;
        _1662 = 0.0;
        _1663 = 0.0;
    }
    float _1673 = (cbModelParam._m0[1u].x * (_1661 - _1353)) + _1353;
    float _1674 = (cbModelParam._m0[1u].x * (_1662 - _1354)) + _1354;
    float _1675 = (cbModelParam._m0[1u].x * (_1663 - _1355)) + _1355;
    float _1696 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1673));
    float _1717 = _975 * 0.5;
    float _1718 = _976 * 0.5;
    float _1719 = _977 * 0.5;
    float _1720 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1651, _1654, _1657, _1660));
    float _1723 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1650, _1653, _1656, _1659));
    float _1726 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1649, _1652, _1655, _1658));
    float _1760;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1733 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1737 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1741 = dot(vec4(_1717, _1718, _1719, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1748 = dot(vec4(cbModelParam._m0[39u]), vec4(_1717, _1718, _1719, 1.0));
        _1760 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1760 = 1.0;
    }
    float _1771;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1762 = dot(vec4(cbModelParam._m0[40u]), vec4(_1717, _1718, _1719, 1.0));
        _1771 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1771 = 1.0;
    }
    float _1775 = (_1771 * cbModelParam._m0[1u].x) + (_1760 * (1.0 - cbModelParam._m0[1u].x));
    float _1785 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1786 = isnan(_1785) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1785 : min(cbModelParam._m0[25u].z, _1785));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1834 = fma(_1039, cbModelParam._m0[13u].z, fma(_1035, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1031)) + cbModelParam._m0[13u].w;
        float _1838 = fma(_1039, cbModelParam._m0[14u].z, fma(_1035, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1031)) + cbModelParam._m0[14u].w;
        float _1842 = fma(_1039, cbModelParam._m0[15u].z, fma(_1035, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1031)) + cbModelParam._m0[15u].w;
        float _1845 = fma(_977, cbModelParam._m0[13u].z, fma(_976, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _975));
        float _1848 = fma(_977, cbModelParam._m0[14u].z, fma(_976, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _975));
        float _1851 = fma(_977, cbModelParam._m0[15u].z, fma(_976, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _975));
        float _1879;
        if (_1845 > 0.0)
        {
            _1879 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1879 = frontier_phi_14_12_ladder;
        }
        float _2103;
        if (_1848 > 0.0)
        {
            _2103 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2103 = frontier_phi_23_19_ladder;
        }
        float _2360;
        if (_1851 > 0.0)
        {
            _2360 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2360 = frontier_phi_35_30_ladder;
        }
        float _2362 = isnan(_2103) ? _1879 : (isnan(_1879) ? _2103 : min(_1879, _2103));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1845) + _1834;
        float _2368 = (_2363 * _1848) + _1838;
        float _2369 = (_2363 * _1851) + _1842;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1786);
            frontier_phi_13_35_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1867 = frontier_phi_13_35_ladder_2;
        _1869 = frontier_phi_13_35_ladder_1;
        _1871 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_975, _976, _977), _1786);
        _1867 = _1855.x * cbModelParam._m0[1u].y;
        _1869 = _1855.y * cbModelParam._m0[1u].y;
        _1871 = _1855.z * cbModelParam._m0[1u].y;
    }
    float _1875 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1875 : min(cbModelParam._m0[25u].w, _1875));
    float _1966;
    float _1968;
    float _1970;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1930 = fma(_1039, cbModelParam._m0[21u].z, fma(_1035, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1031)) + cbModelParam._m0[21u].w;
        float _1934 = fma(_1039, cbModelParam._m0[22u].z, fma(_1035, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1031)) + cbModelParam._m0[22u].w;
        float _1938 = fma(_1039, cbModelParam._m0[23u].z, fma(_1035, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1031)) + cbModelParam._m0[23u].w;
        float _1941 = fma(_977, cbModelParam._m0[21u].z, fma(_976, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _975));
        float _1944 = fma(_977, cbModelParam._m0[22u].z, fma(_976, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _975));
        float _1947 = fma(_977, cbModelParam._m0[23u].z, fma(_976, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _975));
        float _2108;
        if (_1941 > 0.0)
        {
            _2108 = abs((1.0 - _1930) / _1941);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1930 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2108 = frontier_phi_25_21_ladder;
        }
        float _2387;
        if (_1944 > 0.0)
        {
            _2387 = abs((1.0 - _1934) / _1944);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1934 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2387 = frontier_phi_37_32_ladder;
        }
        float _2600;
        if (_1947 > 0.0)
        {
            _2600 = abs((1.0 - _1938) / _1947);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1938 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2600 = frontier_phi_46_43_ladder;
        }
        float _2602 = isnan(_2387) ? _2108 : (isnan(_2108) ? _2387 : min(_2108, _2387));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1941) + _1930;
        float _2608 = (_2603 * _1944) + _1934;
        float _2609 = (_2603 * _1947) + _1938;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1876);
            frontier_phi_22_46_ladder = _2808.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2808.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2808.x * cbModelParam._m0[1u].z;
        }
        _1966 = frontier_phi_22_46_ladder_2;
        _1968 = frontier_phi_22_46_ladder_1;
        _1970 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_975, _976, _977), _1876);
        _1966 = _1950.x * cbModelParam._m0[1u].z;
        _1968 = _1950.y * cbModelParam._m0[1u].z;
        _1970 = _1950.z * cbModelParam._m0[1u].z;
    }
    float _1983 = (((_1002 * _951) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1966 - _1867)) + _1867);
    float _1985 = (((_1002 * _953) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1968 - _1869)) + _1869);
    float _1987 = (((_1002 * _954) + _1003) * _967) * ((cbModelParam._m0[1u].w * (_1970 - _1871)) + _1871);
    float _1990 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _1993 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _1996 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, _1983 * cbSceneParam._m0[91u].x));
    vec4 _2004 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_889, _890));
    float _2006 = _2004.w;
    float _2018 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2006);
    float _2019 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2006);
    float _2020 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2006);
    uvec4 _2024 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2026 = _2024.x * 14u;
    uint _2027 = _2026 + 13u;
    float _2034 = _967 + (-1.0);
    float _2039 = (cbLight._m0[_2027].x * _2034) + 1.0;
    float _2040 = (cbLight._m0[_2027].y * _2034) + 1.0;
    float _2041 = (cbLight._m0[_2027].z * _2034) + 1.0;
    float _2042 = (cbLight._m0[_2027].w * _2034) + 1.0;
    uint _2043 = _2026 + 5u;
    float _2049 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2053 = _2026 + 4u;
    float _2062 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2066 = _2026 | 1u;
    float _2077 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_802, _803, _804));
    float _2080 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_802, _803, _804));
    float _4247 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _4258 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2085 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2087 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * 0.3183098733425140380859375;
    float _2094 = ((cbLight._m0[_2043].x * _2049) * _2087) + (((cbLight._m0[_2053].x * _2018) * _2062) * _2085);
    float _2095 = ((_2049 * cbLight._m0[_2043].y) * _2087) + (((cbLight._m0[_2053].y * _2019) * _2062) * _2085);
    float _2096 = ((_2049 * cbLight._m0[_2043].z) * _2087) + (((cbLight._m0[_2053].z * _2020) * _2062) * _2085);
    uvec4 _2100 = floatBitsToUint(cbLight._m0[_2026 + 12u]);
    bool _2102 = _2100.x == 0u;
    float _2113;
    float _2115;
    float _2117;
    if (_2102)
    {
        _2113 = _2094;
        _2115 = _2095;
        _2117 = _2096;
    }
    else
    {
        uint _2121 = _2026 + 6u;
        float _2137 = (dot(vec3(cbLight._m0[_2026 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2138 = _2137 * _2137;
        float _4269 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2139 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2140 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2113 = (((cbLight._m0[_2121].x * 0.3183098733425140380859375) * _2139) * _2140) + _2094;
        _2115 = (((cbLight._m0[_2121].y * 0.3183098733425140380859375) * _2139) * _2140) + _2095;
        _2117 = (((cbLight._m0[_2121].z * 0.3183098733425140380859375) * _2139) * _2140) + _2096;
    }
    bool _2120 = _2100.y == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2120)
    {
        _2158 = _2113;
        _2160 = _2115;
        _2162 = _2117;
    }
    else
    {
        uint _2331 = _2026 + 7u;
        float _2347 = (dot(vec3(cbLight._m0[_2026 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4285 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _2350 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2158 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2113;
        _2160 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2115;
        _2162 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2117;
    }
    uint _2165 = _2026 + 8u;
    float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _805) * 0.949999988079071044921875);
    float _2179 = _2178 * _2178;
    float _2180 = cbLight._m0[_2026].x + _881;
    float _2181 = cbLight._m0[_2026].y + _882;
    float _2182 = cbLight._m0[_2026].z + _883;
    float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
    float _2187 = _2186 * _2180;
    float _2188 = _2186 * _2181;
    float _2189 = _2186 * _2182;
    float _2190 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2026].xyz));
    float _4301 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2193 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _4312 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _2194 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2195 = dot(vec3(_802, _803, _804), vec3(_2187, _2188, _2189));
    float _4323 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2187, _2188, _2189));
    float _4334 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2179 * _2179;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2215 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
    float _2216 = 0.959999978542327880859375 - _948;
    float _2218 = 0.959999978542327880859375 - _949;
    float _2219 = 0.959999978542327880859375 - _950;
    float _2226 = 1.0 - _2179;
    float _2237 = (0.5 / (((_2194 * ((_2193 * _2226) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2226) + _2179) * _2193))) * _2193;
    float _4345 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2239 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    uint _2253 = _2026 + 9u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2066].w)) * _805) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2066].x + _881;
    float _2267 = cbLight._m0[_2066].y + _882;
    float _2268 = cbLight._m0[_2066].z + _883;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2066].xyz));
    float _4356 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2280 = dot(vec3(_802, _803, _804), vec3(_2273, _2274, _2275));
    float _4367 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2284 = dot(vec3(cbLight._m0[_2066].xyz), vec3(_2273, _2274, _2275));
    float _4378 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2288 = _2265 * _2265;
    float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0);
    float _2306 = 1.0 - _2265;
    float _2316 = (0.5 / (((_2194 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2306) + _2265) * _2279))) * _2279;
    float _4389 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
    float _2328 = (((((_2299 * _2216) + _951) * cbLight._m0[_2253].x) * _2318) * _2049) + ((((cbLight._m0[_2165].x * _2018) * ((_2215 * _2216) + _951)) * _2239) * _2062);
    float _2329 = (((((_2299 * _2218) + _953) * cbLight._m0[_2253].y) * _2318) * _2049) + ((((cbLight._m0[_2165].y * _2019) * ((_2215 * _2218) + _953)) * _2239) * _2062);
    float _2330 = (((((_2299 * _2219) + _954) * cbLight._m0[_2253].z) * _2318) * _2049) + ((((cbLight._m0[_2165].z * _2020) * ((_2215 * _2219) + _954)) * _2239) * _2062);
    float _2392;
    float _2394;
    float _2396;
    if (_2102)
    {
        _2392 = _2328;
        _2394 = _2329;
        _2396 = _2330;
    }
    else
    {
        uint _2398 = _2026 + 2u;
        uint _2402 = _2026 + 10u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _805) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _881;
        float _2419 = cbLight._m0[_2398].y + _882;
        float _2420 = cbLight._m0[_2398].z + _883;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2398].xyz));
        float _4400 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2432 = dot(vec3(_802, _803, _804), vec3(_2425, _2426, _2427));
        float _4411 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4422 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2451 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
        float _2458 = 1.0 - _2417;
        float _2468 = (0.5 / (((_2194 * ((_2431 * _2458) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2458) + _2417) * _2431))) * _2431;
        float _4433 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2470 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2471 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2392 = (((((_2451 * _2216) + _951) * cbLight._m0[_2402].x) * _2470) * _2471) + _2328;
        _2394 = (((((_2451 * _2218) + _953) * cbLight._m0[_2402].y) * _2470) * _2471) + _2329;
        _2396 = (((((_2451 * _2219) + _954) * cbLight._m0[_2402].z) * _2470) * _2471) + _2330;
    }
    float _2506;
    float _2508;
    float _2510;
    if (_2120)
    {
        _2506 = _2392;
        _2508 = _2394;
        _2510 = _2396;
    }
    else
    {
        uint _2517 = _2026 + 3u;
        uint _2521 = _2026 + 11u;
        float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2517].w)) * _805) * 0.949999988079071044921875);
        float _2536 = _2535 * _2535;
        float _2537 = cbLight._m0[_2517].x + _881;
        float _2538 = cbLight._m0[_2517].y + _882;
        float _2539 = cbLight._m0[_2517].z + _883;
        float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
        float _2544 = _2543 * _2537;
        float _2545 = _2543 * _2538;
        float _2546 = _2543 * _2539;
        float _2547 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2517].xyz));
        float _4449 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2551 = dot(vec3(_802, _803, _804), vec3(_2544, _2545, _2546));
        float _4460 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2555 = dot(vec3(cbLight._m0[_2517].xyz), vec3(_2544, _2545, _2546));
        float _4471 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2559 = _2536 * _2536;
        float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
        float _2570 = exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0);
        float _2577 = 1.0 - _2536;
        float _2587 = (0.5 / (((_2194 * ((_2550 * _2577) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2194 * _2577) + _2536) * _2550))) * _2550;
        float _4482 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2506 = (((((_2570 * _2216) + _951) * cbLight._m0[_2521].x) * _2589) * _2590) + _2392;
        _2508 = (((((_2570 * _2218) + _953) * cbLight._m0[_2521].y) * _2589) * _2590) + _2394;
        _2510 = (((((_2570 * _2219) + _954) * cbLight._m0[_2521].z) * _2589) * _2590) + _2396;
    }
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    if (_2024.y == 0u)
    {
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2665;
        float _2667 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2665;
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2665;
        uvec4 _2680 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2681 = _2680.x;
        uint _2692 = uint((float(_2680.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2681))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2681)));
        float _2702 = (log2(_2668 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2703 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        uint _2706 = uint(isnan(14.0) ? _2703 : (isnan(_2703) ? 14.0 : min(_2703, 14.0)));
        uvec4 _2711 = texelFetch(g_lightClusterGridBuffer, int(((_2706 << 2u) + (_2692 << 6u)) >> 2u));
        uint _2712 = _2711.x;
        uint _2713 = _2680.z;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((((1u << ((_2713 >> 4u) & 15u)) + 4294967295u) & _2712) == 0u) || ((_2713 & 240u) == 0u))
        {
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
        }
        else
        {
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2706 << 5u) + (_2692 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2974)
                {
                    frontier_phi_61_pred = _2958;
                    frontier_phi_61_pred_1 = _2963;
                    frontier_phi_61_pred_2 = _2962;
                    frontier_phi_61_pred_3 = _2961;
                    frontier_phi_61_pred_4 = _2960;
                    frontier_phi_61_pred_5 = _2959;
                }
                else
                {
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    uint _3088;
                    _3082 = _2958;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2973;
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    for (;;)
                    {
                        uint _3092 = uint(findLSB(_3088)) + (_2964 << 5u);
                        uint _3089 = (_3088 + 4294967295u) & _3088;
                        uint _3094 = _3092 * 48u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 3u)).x));
                        uint _3114 = (_3092 * 48u) + 4u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 3u)).x));
                        uint _3133 = (_3092 * 48u) + 8u;
                        vec3 _3144 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x));
                        float _3148 = _3108.x - _2666;
                        float _3149 = _3108.y - _2667;
                        float _3150 = _3108.z - _2668;
                        float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                        float _3154 = inversesqrt(_3151);
                        float _3155 = _3154 * _3148;
                        float _3156 = _3154 * _3149;
                        float _3157 = _3154 * _3150;
                        float _3158 = dot(vec3(_908, _911, _914), vec3(_3155, _3156, _3157));
                        float _3163 = 1.0 - (_3151 * _3108.w);
                        float _4508 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3164 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3165 = sqrt(_3151) * _3127.w;
                        float _3168 = 1.39999997615814208984375 / (_3165 + 1.39999997615814208984375);
                        float _3169 = _3168 * _3168;
                        float _3172 = ((1.0 - _3169) * _3158) + _3169;
                        float _3175 = _3165 * _3165;
                        float _3179 = ((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3164) / ((_3175 * 0.699999988079071044921875) + 1.0);
                        float _3183 = (-0.0) - _2666;
                        float _3184 = (-0.0) - _2667;
                        float _3185 = (-0.0) - _2668;
                        float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                        float _3190 = _3189 * _3183;
                        float _3191 = _3189 * _3184;
                        float _3192 = _3189 * _3185;
                        float _3200 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                        float _3201 = 1.0 - _983;
                        float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                        float _3209 = _3208 * _3208;
                        float _3210 = _3209 * _3209;
                        float _3211 = _3190 + _3155;
                        float _3212 = _3191 + _3156;
                        float _3213 = _3192 + _3157;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3221 = dot(vec3(_908, _911, _914), vec3(_3190, _3191, _3192));
                        float _4524 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3225 = dot(vec3(_908, _911, _914), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                        float _4535 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                        float _3233 = _3168 * _3209;
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3158) + _3234;
                        float _4546 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                        float _3239 = 1.0 - _3209;
                        float _3249 = (0.5 / (((_3238 * ((_3224 * _3239) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3209) * _3224))) * _3238;
                        float _4557 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3260 = (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3232 * _3232) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125))) * _3164;
                        _3017 = (_3179 * _3127.x) + _3085;
                        _3018 = (_3179 * _3127.y) + _3086;
                        _3019 = (_3179 * _3127.z) + _3087;
                        _3014 = (_3260 * _3144.x) + _3082;
                        _3015 = (_3260 * _3144.y) + _3083;
                        _3016 = (_3260 * _3144.z) + _3084;
                        if (_3089 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3082 = _3014;
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3089;
                        }
                    }
                    frontier_phi_61_pred = _3014;
                    frontier_phi_61_pred_1 = _3019;
                    frontier_phi_61_pred_2 = _3018;
                    frontier_phi_61_pred_3 = _3017;
                    frontier_phi_61_pred_4 = _3016;
                    frontier_phi_61_pred_5 = _3015;
                }
                _2814 = frontier_phi_61_pred;
                _2824 = frontier_phi_61_pred_1;
                _2822 = frontier_phi_61_pred_2;
                _2820 = frontier_phi_61_pred_3;
                _2818 = frontier_phi_61_pred_4;
                _2816 = frontier_phi_61_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2814;
                    _2959 = _2816;
                    _2960 = _2818;
                    _2961 = _2820;
                    _2962 = _2822;
                    _2963 = _2824;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
        }
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.z;
        uint _2830 = (_2828 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2830) & _2712) == 0u)
        {
            _2926 = _2813;
            _2928 = _2815;
            _2930 = _2817;
            _2932 = _2819;
            _2934 = _2821;
            _2936 = _2823;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
            float _2952 = _2951 * _2666;
            float _2953 = _2951 * _2667;
            float _2954 = _2951 * _2668;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2830 < ((_2828 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3065 = _2813;
                float _3066 = _2815;
                float _3067 = _2817;
                float _3068 = _2819;
                float _3069 = _2821;
                float _3070 = _2823;
                uint _3071 = _2830;
                uint _3080;
                bool _3081;
                for (;;)
                {
                    _3080 = texelFetch(g_lightClassification, int((((_2706 << 5u) + (_2692 << 9u)) + (_3071 << 2u)) >> 2u)).x;
                    _3081 = _3080 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3081)
                    {
                        frontier_phi_67_pred = _3068;
                        frontier_phi_67_pred_1 = _3069;
                        frontier_phi_67_pred_2 = _3070;
                        frontier_phi_67_pred_3 = _3067;
                        frontier_phi_67_pred_4 = _3066;
                        frontier_phi_67_pred_5 = _3065;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3278 = _3065;
                        float _3279 = _3066;
                        float _3280 = _3067;
                        float _3281 = _3068;
                        float _3282 = _3069;
                        float _3283 = _3070;
                        uint _3284 = _3080;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3369;
                        float _3415;
                        bool _3416;
                        for (;;)
                        {
                            uint _3295 = ((_3071 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3356 = (_3295 * 40u) + 20u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3295 * 40u) + 24u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3390 = (_3295 * 40u) + 28u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3415 = fma(_2668, _3403.z, fma(_2667, _3403.y, _3403.x * _2666)) + _3403.w;
                            _3416 = !((fma(_2668, _3384.z, fma(_2667, _3384.y, _3384.x * _2666)) + _3384.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3416)
                            {
                                float _3443 = _3310.x - _2666;
                                float _3444 = _3310.y - _2667;
                                float _3445 = _3310.z - _2668;
                                float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                                float _3449 = inversesqrt(_3446);
                                float _3450 = _3449 * _3443;
                                float _3451 = _3449 * _3444;
                                float _3452 = _3449 * _3445;
                                float _3456 = 1.0 - (_3446 / (_3311 * _3311));
                                float _4568 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3461 = sqrt(_3446) * _3326.w;
                                float _3463 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                                float _3464 = _3463 * _3463;
                                float _3467 = ((1.0 - _3464) * dot(vec3(_3450, _3451, _3452), vec3(_908, _911, _914))) + _3464;
                                float _3470 = _3461 * _3461;
                                float _3474 = (fma(_2668, _3353.z, fma(_2667, _3353.y, _3353.x * _2666)) + _3353.w) / _3415;
                                float _3475 = (fma(_2668, _3369.z, fma(_2667, _3369.y, _3369.x * _2666)) + _3369.w) / _3415;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4584 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3457) / ((_3470 * 0.699999988079071044921875) + 1.0));
                                float _3493 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3494 = 1.0 - _983;
                                float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                                float _3502 = _3501 * _3501;
                                float _3503 = _3502 * _3502;
                                float _3504 = _3450 - _2952;
                                float _3505 = _3451 - _2953;
                                float _3506 = _3452 - _2954;
                                float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                                float _3514 = dot(vec3(_908, _911, _914), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4595 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3518 = dot(vec3(_908, _911, _914), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                                float _4606 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                                float _3526 = _3463 * _3502;
                                float _3527 = _3526 * _3526;
                                float _3533 = ((1.0 - _3527) * dot(vec3(_908, _911, _914), vec3(_3450, _3451, _3452))) + _3527;
                                float _4617 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3535 = 1.0 - _3502;
                                float _3545 = (0.5 / (((_3534 * ((_3517 * _3535) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3534 * _3535) + _3502) * _3517))) * _3534;
                                float _4628 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3555 = (_3480 * _3457) * (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3525 * _3525) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3555 * _3338.x;
                                frontier_phi_73_pred_1 = _3555 * _3338.y;
                                frontier_phi_73_pred_2 = _3481 * _3326.z;
                                frontier_phi_73_pred_3 = _3481 * _3326.y;
                                frontier_phi_73_pred_4 = _3481 * _3326.x;
                                frontier_phi_73_pred_5 = _3555 * _3338.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3559 = frontier_phi_73_pred;
                            _3560 = frontier_phi_73_pred_1;
                            _3564 = frontier_phi_73_pred_2;
                            _3563 = frontier_phi_73_pred_3;
                            _3562 = frontier_phi_73_pred_4;
                            _3561 = frontier_phi_73_pred_5;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3268;
                        frontier_phi_67_pred_1 = _3269;
                        frontier_phi_67_pred_2 = _3270;
                        frontier_phi_67_pred_3 = _3267;
                        frontier_phi_67_pred_4 = _3266;
                        frontier_phi_67_pred_5 = _3265;
                    }
                    _2933 = frontier_phi_67_pred;
                    _2935 = frontier_phi_67_pred_1;
                    _2937 = frontier_phi_67_pred_2;
                    _2931 = frontier_phi_67_pred_3;
                    _2929 = frontier_phi_67_pred_4;
                    _2927 = frontier_phi_67_pred_5;
                    uint _3072 = _3071 + 1u;
                    if (_3072 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3065 = _2927;
                        _3066 = _2929;
                        _3067 = _2931;
                        _3068 = _2933;
                        _3069 = _2935;
                        _3070 = _2937;
                        _3071 = _3072;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2935;
                frontier_phi_55_56_ladder_1 = _2937;
                frontier_phi_55_56_ladder_2 = _2933;
                frontier_phi_55_56_ladder_3 = _2931;
                frontier_phi_55_56_ladder_4 = _2929;
                frontier_phi_55_56_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_55_56_ladder = _2821;
                frontier_phi_55_56_ladder_1 = _2823;
                frontier_phi_55_56_ladder_2 = _2819;
                frontier_phi_55_56_ladder_3 = _2817;
                frontier_phi_55_56_ladder_4 = _2815;
                frontier_phi_55_56_ladder_5 = _2813;
            }
            _2926 = frontier_phi_55_56_ladder_5;
            _2928 = frontier_phi_55_56_ladder_4;
            _2930 = frontier_phi_55_56_ladder_3;
            _2932 = frontier_phi_55_56_ladder_2;
            _2934 = frontier_phi_55_56_ladder;
            _2936 = frontier_phi_55_56_ladder_1;
        }
        float _2941 = isnan(1.0) ? _967 : (isnan(_967) ? 1.0 : min(_967, 1.0));
        _2725 = (_2941 * _2932) + _2158;
        _2727 = (_2941 * _2934) + _2160;
        _2729 = (_2941 * _2936) + _2162;
        _2731 = ((_2926 * _951) * _2941) + _2506;
        _2733 = ((_2928 * _953) * _2941) + _2508;
        _2735 = ((_2930 * _954) * _2941) + _2510;
    }
    else
    {
        _2725 = _2158;
        _2727 = _2160;
        _2729 = _2162;
        _2731 = _2506;
        _2733 = _2508;
        _2735 = _2510;
    }
    float _4644 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4655 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4666 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    uint _2755 = _255 + 6u;
    float _2763 = _889 / cbSceneParam._m0[86u].x;
    float _2764 = _890 / cbSceneParam._m0[86u].y;
    vec4 _2778 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, (log2((isnan(cbSceneParam._m0[77u].w) ? _824 : (isnan(_824) ? cbSceneParam._m0[77u].w : min(_824, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2780 = _2778.x;
    float _2781 = _2778.y;
    float _2782 = _2778.z;
    float _2783 = _2778.w;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_824 > cbSceneParam._m0[78u].w)
    {
        float _2838 = isnan(_824) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _824 : min(cbSceneParam._m0[80u].w, _824));
        float _2839 = _2838 / _824;
        float _2850 = _2839 * _874;
        float _2851 = _875 * _2839;
        float _2852 = (-0.0) - _2851;
        float _2854 = _2839 * _876;
        float _2856 = (cbSceneParam._m0[77u].w * _2852) / _2838;
        float _2857 = _2856 + cbSceneParam._m0[79u].w;
        float _2858 = cbSceneParam._m0[79u].w - _2851;
        float _2864 = sqrt(((_2850 * _2850) + (_2851 * _2851)) + (_2854 * _2854));
        float _2867 = (1.0 - (cbSceneParam._m0[77u].w / _2838)) * _2864;
        float _2872 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2874 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3027;
        if (abs((_2852 - _2856) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3027 = ((((_2857 > 0.0) ? exp2(_2872 * _2857) : (2.0 - exp2(_2874 * _2857))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2867;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : max(_2857, _2858));
            float _2989 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : min(_2857, _2858));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3027 = ((abs(_2864 / _2852) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2872 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2872 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2874 * _2998) - exp2(_2874 * _2999)) * _2987))) + (_2867 * cbSceneParam._m0[80u].z);
        }
        vec4 _3029 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2763, _2764, 1.0), 0.0);
        float _3038 = exp2((_3027 * (-1.44269502162933349609375)) * (1.0 - _3029.w));
        float _3039 = log2(_3038);
        float _3055 = log2(_2783);
        _2876 = (exp2(_3055 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].x)) * _3029.x) / cbSceneParam._m0[78u].x)) + _2780;
        _2878 = (exp2(_3055 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].y)) * _3029.y) / cbSceneParam._m0[78u].y)) + _2781;
        _2880 = (exp2(_3055 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3039 * cbSceneParam._m0[78u].z)) * _3029.z) / cbSceneParam._m0[78u].z)) + _2782;
        _2882 = _3038 * _2783;
    }
    else
    {
        _2876 = _2780;
        _2878 = _2781;
        _2880 = _2782;
        _2882 = _2783;
    }
    float _2894 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2895 = _2894 == 3.0;
    float _2896 = log2(_2882);
    float _2903 = exp2(_2896 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2725 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _967))) + ((_2731 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1775)) * cbPerFrame._m0[3u].x));
    float _2904 = exp2(_2896 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2727 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _967))) + ((_2733 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1775)) * cbPerFrame._m0[3u].x));
    float _2905 = exp2(_2896 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2729 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _967))) + ((_2735 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1775)) * cbPerFrame._m0[3u].x));
    float _2914 = (_2894 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2914 * (_2895 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2876)));
    SV_Target.y = _2914 * (_2895 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2878)));
    SV_Target.z = _2914 * (_2895 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2880)));
    SV_Target.w = cbInstanceData._m0[_2755].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2755].w;
}


