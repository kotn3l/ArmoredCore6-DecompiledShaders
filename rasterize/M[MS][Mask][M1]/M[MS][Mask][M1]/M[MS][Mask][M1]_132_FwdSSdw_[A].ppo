#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1534;
float _3935;
float _3936;
float _3937;
float _3938;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _262 + 1u;
    uint _272 = _262 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _413 = _411.x;
    float _425 = dot(vec4(_413, _411.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _442 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _372.x) * 2.0) - ((((_413 - _425) * cbMtdParam._m0[23u].w) + _425) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3947 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _450 = (_443 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _451 = (_443 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _452 = (_443 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _491 = _489.x;
    float _501 = dot(vec4(_491, _489.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _515 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _372.y) * 2.0) - ((((_491 - _501) * cbMtdParam._m0[23u].w) + _501) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3958 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _523 = (_516 * ((_469.x * cbMtdParam._m0[13u].x) - _450)) + _450;
    float _524 = (_516 * ((_469.y * cbMtdParam._m0[13u].y) - _451)) + _451;
    float _525 = (_516 * ((_469.z * cbMtdParam._m0[13u].z) - _452)) + _452;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _282) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _283) + cbTextureTilingScale._m0[24u].w));
    vec4 _561 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _563 = _561.x;
    float _573 = dot(vec4(_563, _561.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _585 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _372.z) * 2.0) - ((((_563 - _573) * cbMtdParam._m0[23u].w) + _573) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3969 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _599 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_586 * ((_544.x * cbMtdParam._m0[14u].x) - _523)) + _523);
    float _602 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_586 * ((_544.y * cbMtdParam._m0[14u].y) - _524)) + _524);
    float _605 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_586 * ((_544.z * cbMtdParam._m0[14u].z) - _525)) + _525);
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _664 = _660.z;
    float _671 = ((_643.x - _662) * _443) + _662;
    float _672 = ((_643.y - _663) * _443) + _663;
    float _673 = ((_643.z - _664) * _443) + _664;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _696 = ((_685.x - _671) * _516) + _671;
    float _697 = ((_685.y - _672) * _516) + _672;
    float _698 = ((_685.z - _673) * _516) + _673;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _282) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _283) + cbTextureTilingScale._m0[23u].w));
    float _723 = ((_710.z - _698) * _586) + _698;
    float _726 = ((((_710.x - _696) * _586) + _696) * 2.0) + (-1.0);
    float _728 = ((((_710.y - _697) * _586) + _697) * 2.0) + (-1.0);
    float _729 = dot(vec2(_726, _728), vec2(_726, _728));
    float _3980 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _734 = sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))));
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _791 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_775 - _776) * cbMtdParam._m0[24u].z) + _776) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3991 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _792 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _799 = (_792 * ((_623.x * cbMtdParam._m0[18u].x) - _599)) + _599;
    float _800 = (_792 * ((_623.y * cbMtdParam._m0[18u].y) - _602)) + _602;
    float _801 = (_792 * ((_623.z * cbMtdParam._m0[18u].z) - _605)) + _605;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _829 = _827.x;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _829) * _443) + _829;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _846) * _516) + _846;
    float _881 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _282) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _283) + cbTextureTilingScale._m0[10u].w)).x - _863) * _586) + _863;
    float _885 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _881) * cbMtdParam._m0[19u].z) + _881;
    float _887 = _885 - (_885 * _792);
    float _891 = (cbMtdParam._m0[19u].w * (_748.z - _723)) + _723;
    vec4 _904 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _911 = (_904.x * 2.0) + (-1.0);
    float _912 = (_904.y * 2.0) + (-1.0);
    float _913 = dot(vec2(_911, _912), vec2(_911, _912));
    float _4002 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _921 = (_792 * (_904.z - _891)) + _891;
    float _924 = (((_748.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _726;
    float _925 = (((_748.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _728;
    float _937 = (((_911 - _924) + (cbMtdParam._m0[21u].x * _924)) * _792) + _924;
    float _938 = (((_912 - _925) + (cbMtdParam._m0[21u].x * _925)) * _792) + _925;
    float _939 = (_792 * (sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) - _734)) + _734;
    float _941 = cbMtdParam._m0[22u].x + _748.w;
    float _944 = fma(_939, _249 * NORMAL.x, fma(_938, _256 * TANGENT.x, (_242 * _234) * _937));
    float _947 = fma(_939, _249 * NORMAL.y, fma(_938, _256 * TANGENT.y, (_242 * _235) * _937));
    float _950 = fma(_939, _249 * NORMAL.z, fma(_938, _256 * TANGENT.z, (_242 * _236) * _937));
    float _954 = inversesqrt(dot(vec3(_944, _947, _950), vec3(_944, _947, _950)));
    float _955 = _954 * _944;
    float _956 = _954 * _947;
    float _957 = _954 * _950;
    float _4013 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _958 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _4035 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4046 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4057 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4068 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _963 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1027 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1017);
    float _1028 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1017);
    float _1029 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1017);
    float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
    float _1034 = _1027 * _1033;
    float _1035 = _1028 * _1033;
    float _1036 = _1029 * _1033;
    vec4 _1041 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1043 = _1041.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1215 = sqrt(((_1027 * _1027) + (_1028 * _1028)) + (_1029 * _1029));
        float _1221 = (cbMatDynParam._m0[5u].x * _1215) + cbMatDynParam._m0[5u].y;
        float _4079 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1226 = (cbMatDynParam._m0[5u].z * _1215) + cbMatDynParam._m0[5u].w;
        float _4090 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) - _1222)) + _1222) < ((_1043 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1054 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1055 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1073 = fma(_957, cbSceneParam._m0[5u].z, fma(_956, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _955));
    float _1076 = fma(_957, cbSceneParam._m0[6u].z, fma(_956, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _955));
    float _1079 = fma(_957, cbSceneParam._m0[7u].z, fma(_956, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _955));
    uint _1092 = _262 + 9u;
    uint _1093 = _1092 + uint(cbMatDynParam._m0[0u].w);
    float _1099 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_1093].x;
    float _1100 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_1093].y;
    float _1101 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_1093].z;
    float _4101 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _1103 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1105 = 1.0 - _963;
    float _1106 = _1102 * _1105;
    float _1107 = _1103 * _1105;
    float _1108 = _1104 * _1105;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _963;
    float _1114 = (_1103 + (-0.039999999105930328369140625)) * _963;
    float _1115 = (_1104 + (-0.039999999105930328369140625)) * _963;
    float _1116 = _1113 + 0.039999999105930328369140625;
    float _1118 = _1114 + 0.039999999105930328369140625;
    float _1119 = _1115 + 0.039999999105930328369140625;
    vec4 _1128 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1054, cbSceneParam._m0[86u].y * _1055));
    float _1132 = ((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * TEXCOORD_5.w) * _1128.x;
    float _1133 = dot(vec3(_955, _956, _957), vec3(_1034, _1035, _1036));
    float _1136 = _1133 * 2.0;
    float _1140 = (_1136 * _955) - _1034;
    float _1141 = (_1136 * _956) - _1035;
    float _1142 = (_1136 * _957) - _1036;
    float _1146 = abs(dot(vec3(_1034, _1035, _1036), vec3(_955, _956, _957)));
    float _4134 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1148 = sqrt(_958);
    float _1161 = exp2((_1148 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1148 * 3.0));
    float _1167 = (1.0 - _1161) * ((_1148 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1168 = _1161 * _1148;
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1204 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1533;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1258 = fma(_1204, cbModelParam._m0[26u].z, fma(_1200, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1196));
        float _1262 = fma(_1204, cbModelParam._m0[27u].z, fma(_1200, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1196));
        float _1266 = fma(_1204, cbModelParam._m0[28u].z, fma(_1200, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1196));
        float _1291 = _1196 + _955;
        float _1292 = _1200 + _956;
        float _1293 = _1204 + _957;
        float _1303 = fma(_1293, cbModelParam._m0[26u].z, fma(_1292, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1291)) - _1258;
        float _1304 = fma(_1293, cbModelParam._m0[27u].z, fma(_1292, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1291)) - _1262;
        float _1305 = fma(_1293, cbModelParam._m0[28u].z, fma(_1292, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1291)) - _1266;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1258 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1262 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[34u].z) + ((((((_1266 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1361 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1327.x + (-0.5));
        float _1363 = _1361 * (_1327.y + (-0.5));
        float _1364 = _1361 * (_1327.z + (-0.5));
        float _1371 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1334.x + (-0.5));
        float _1373 = _1371 * (_1334.y + (-0.5));
        float _1374 = _1371 * (_1334.z + (-0.5));
        float _1381 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1341.x + (-0.5));
        float _1383 = _1381 * (_1341.y + (-0.5));
        float _1384 = _1381 * (_1341.z + (-0.5));
        float _1391 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1348.x + (-0.5));
        float _1393 = _1391 * (_1348.y + (-0.5));
        float _1394 = _1391 * (_1348.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1415 = (dot(vec3(_955, _956, _957), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4160 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1425 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4171 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4182 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_1427 + 1.0))) + _1432) * _1395;
        float _1442 = _1363 * 0.5;
        float _1443 = _1373 * 0.5;
        float _1444 = _1383 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_955, _956, _957), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4193 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _4204 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4215 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_1469 + 1.0))) + _1474) * _1396;
        float _1484 = _1364 * 0.5;
        float _1485 = _1374 * 0.5;
        float _1486 = _1384 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_955, _956, _957), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4248 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1511 + 1.0))) + _1516) * _1397;
        _1533 = _1364;
        _1535 = _1363;
        _1536 = _1362;
        _1537 = _1374;
        _1538 = _1373;
        _1539 = _1372;
        _1540 = _1384;
        _1541 = _1383;
        _1542 = _1382;
        _1543 = _1397;
        _1544 = _1396;
        _1545 = _1395;
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1547 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1548 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
    }
    else
    {
        _1533 = _1534;
        _1535 = _1534;
        _1536 = _1534;
        _1537 = _1534;
        _1538 = _1534;
        _1539 = _1534;
        _1540 = _1534;
        _1541 = _1534;
        _1542 = _1534;
        _1543 = _1534;
        _1544 = _1534;
        _1545 = _1534;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1574 = fma(_1204, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196));
        float _1578 = fma(_1204, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196));
        float _1582 = fma(_1204, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196));
        float _1605 = _1196 + _955;
        float _1606 = _1200 + _956;
        float _1607 = _1204 + _957;
        float _1617 = fma(_1607, cbModelParam._m0[30u].z, fma(_1606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1605)) - _1574;
        float _1618 = fma(_1607, cbModelParam._m0[31u].z, fma(_1606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1605)) - _1578;
        float _1619 = fma(_1607, cbModelParam._m0[32u].z, fma(_1606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1605)) - _1582;
        float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
        float _1636 = ((_1623 * _1617) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1574 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1623 * _1618) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1578 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1623 * _1619) / cbModelParam._m0[35u].z) + ((((((_1582 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        float _1673 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1640.x + (-0.5));
        float _1675 = _1673 * (_1640.y + (-0.5));
        float _1676 = _1673 * (_1640.z + (-0.5));
        float _1683 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1647.x + (-0.5));
        float _1685 = _1683 * (_1647.y + (-0.5));
        float _1686 = _1683 * (_1647.z + (-0.5));
        float _1693 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1654.x + (-0.5));
        float _1695 = _1693 * (_1654.y + (-0.5));
        float _1696 = _1693 * (_1654.z + (-0.5));
        float _1703 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1661.x + (-0.5));
        float _1705 = _1703 * (_1661.y + (-0.5));
        float _1706 = _1703 * (_1661.z + (-0.5));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = _1674 * 0.5;
        float _1711 = _1684 * 0.5;
        float _1712 = _1694 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_955, _956, _957), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4311 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1737 + 1.0))) + _1742) * _1707;
        float _1752 = _1675 * 0.5;
        float _1753 = _1685 * 0.5;
        float _1754 = _1695 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_955, _956, _957), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4344 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1779 + 1.0))) + _1784) * _1708;
        float _1794 = _1676 * 0.5;
        float _1795 = _1686 * 0.5;
        float _1796 = _1696 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_955, _956, _957), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4355 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4366 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4377 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_1821 + 1.0))) + _1826) * _1709;
        _1843 = _1676;
        _1844 = _1675;
        _1845 = _1674;
        _1846 = _1686;
        _1847 = _1685;
        _1848 = _1684;
        _1849 = _1696;
        _1850 = _1695;
        _1851 = _1694;
        _1852 = _1709;
        _1853 = _1708;
        _1854 = _1707;
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
    }
    else
    {
        _1843 = _1534;
        _1844 = _1534;
        _1845 = _1534;
        _1846 = _1534;
        _1847 = _1534;
        _1848 = _1534;
        _1849 = _1534;
        _1850 = _1534;
        _1851 = _1534;
        _1852 = _1534;
        _1853 = _1534;
        _1854 = _1534;
        _1855 = 0.0;
        _1856 = 0.0;
        _1857 = 0.0;
    }
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1546)) + _1546;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1547)) + _1547;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1548)) + _1548;
    float _1890 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1867));
    float _1911 = _1140 * 0.5;
    float _1912 = _1141 * 0.5;
    float _1913 = _1142 * 0.5;
    float _1914 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1917 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1920 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1954;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1927 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1533, _1537, _1540, _1543));
        float _1931 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1535, _1538, _1541, _1544));
        float _1935 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1536, _1539, _1542, _1545));
        float _1942 = dot(vec4(cbModelParam._m0[39u]), vec4(_1911, _1912, _1913, 1.0));
        _1954 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1942) ? 0.0 : (isnan(0.0) ? _1942 : max(0.0, _1942))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1954 = 1.0;
    }
    float _1965;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1956 = dot(vec4(cbModelParam._m0[40u]), vec4(_1911, _1912, _1913, 1.0));
        _1965 = dot(vec3(isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1956) ? 0.0 : (isnan(0.0) ? _1956 : max(0.0, _1956))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1965 = 1.0;
    }
    float _1969 = (_1965 * cbModelParam._m0[1u].x) + (_1954 * (1.0 - cbModelParam._m0[1u].x));
    float _1979 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _958);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1979 : min(cbModelParam._m0[25u].z, _1979));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2027 = fma(_1204, cbModelParam._m0[13u].z, fma(_1200, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1196)) + cbModelParam._m0[13u].w;
        float _2031 = fma(_1204, cbModelParam._m0[14u].z, fma(_1200, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1196)) + cbModelParam._m0[14u].w;
        float _2035 = fma(_1204, cbModelParam._m0[15u].z, fma(_1200, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1196)) + cbModelParam._m0[15u].w;
        float _2038 = fma(_1142, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140));
        float _2041 = fma(_1142, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140));
        float _2044 = fma(_1142, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140));
        float _2072;
        if (_2038 > 0.0)
        {
            _2072 = abs((1.0 - _2027) / _2038);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2027 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2072 = frontier_phi_17_15_ladder;
        }
        float _2295;
        if (_2041 > 0.0)
        {
            _2295 = abs((1.0 - _2031) / _2041);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2031 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2295 = frontier_phi_26_22_ladder;
        }
        float _2552;
        if (_2044 > 0.0)
        {
            _2552 = abs((1.0 - _2035) / _2044);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2035 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2552 = frontier_phi_38_33_ladder;
        }
        float _2554 = isnan(_2295) ? _2072 : (isnan(_2072) ? _2295 : min(_2072, _2295));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _2038) + _2027;
        float _2560 = (_2555 * _2041) + _2031;
        float _2561 = (_2555 * _2044) + _2035;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2564 = (-1.0) - _2562;
        float _2566 = _2562 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2561 > _2566) || ((_2561 < _2564) || ((_2560 > _2566) || ((_2560 < _2564) || ((_2559 < _2564) || (_2559 > _2566))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _1980);
            frontier_phi_16_38_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _2060 = frontier_phi_16_38_ladder_2;
        _2062 = frontier_phi_16_38_ladder_1;
        _2064 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1140, _1141, _1142), _1980);
        _2060 = _2048.x * cbModelParam._m0[1u].y;
        _2062 = _2048.y * cbModelParam._m0[1u].y;
        _2064 = _2048.z * cbModelParam._m0[1u].y;
    }
    float _2068 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _958);
    float _2069 = isnan(_2068) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2068 : min(cbModelParam._m0[25u].w, _2068));
    float _2158;
    float _2160;
    float _2162;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2122 = fma(_1204, cbModelParam._m0[21u].z, fma(_1200, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1196)) + cbModelParam._m0[21u].w;
        float _2126 = fma(_1204, cbModelParam._m0[22u].z, fma(_1200, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1196)) + cbModelParam._m0[22u].w;
        float _2130 = fma(_1204, cbModelParam._m0[23u].z, fma(_1200, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1196)) + cbModelParam._m0[23u].w;
        float _2133 = fma(_1142, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140));
        float _2136 = fma(_1142, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140));
        float _2139 = fma(_1142, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140));
        float _2300;
        if (_2133 > 0.0)
        {
            _2300 = abs((1.0 - _2122) / _2133);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2122 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2300 = frontier_phi_28_24_ladder;
        }
        float _2579;
        if (_2136 > 0.0)
        {
            _2579 = abs((1.0 - _2126) / _2136);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2126 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2579 = frontier_phi_40_35_ladder;
        }
        float _2792;
        if (_2139 > 0.0)
        {
            _2792 = abs((1.0 - _2130) / _2139);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2130 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2792 = frontier_phi_49_46_ladder;
        }
        float _2794 = isnan(_2579) ? _2300 : (isnan(_2300) ? _2579 : min(_2300, _2579));
        float _2795 = isnan(_2792) ? _2794 : (isnan(_2794) ? _2792 : min(_2794, _2792));
        float _2799 = (_2795 * _2133) + _2122;
        float _2800 = (_2795 * _2136) + _2126;
        float _2801 = (_2795 * _2139) + _2130;
        float _2802 = _2795 * 9.9999997473787516355514526367188e-05;
        float _2803 = (-1.0) - _2802;
        float _2805 = _2802 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2801 > _2805) || ((_2801 < _2803) || ((_2800 > _2805) || ((_2800 < _2803) || ((_2799 < _2803) || (_2799 > _2805))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2801, cbModelParam._m0[17u].z, fma(_2800, cbModelParam._m0[17u].y, _2799 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2801, cbModelParam._m0[18u].z, fma(_2800, cbModelParam._m0[18u].y, _2799 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2801, cbModelParam._m0[19u].z, fma(_2800, cbModelParam._m0[19u].y, _2799 * cbModelParam._m0[19u].x))), _2069);
            frontier_phi_25_49_ladder = _3000.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3000.x * cbModelParam._m0[1u].z;
        }
        _2158 = frontier_phi_25_49_ladder_2;
        _2160 = frontier_phi_25_49_ladder_1;
        _2162 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1140, _1141, _1142), _2069);
        _2158 = _2142.x * cbModelParam._m0[1u].z;
        _2160 = _2142.y * cbModelParam._m0[1u].z;
        _2162 = _2142.z * cbModelParam._m0[1u].z;
    }
    float _2175 = (((_1167 * _1116) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2177 = (((_1167 * _1118) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2179 = (((_1167 * _1119) + _1168) * _1132) * ((cbModelParam._m0[1u].w * (_2162 - _2064)) + _2064);
    float _2182 = fma(_2179, cbSceneParam._m0[89u].z, fma(_2177, cbSceneParam._m0[89u].y, _2175 * cbSceneParam._m0[89u].x));
    float _2185 = fma(_2179, cbSceneParam._m0[90u].z, fma(_2177, cbSceneParam._m0[90u].y, _2175 * cbSceneParam._m0[90u].x));
    float _2188 = fma(_2179, cbSceneParam._m0[91u].z, fma(_2177, cbSceneParam._m0[91u].y, _2175 * cbSceneParam._m0[91u].x));
    vec4 _2196 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1054, _1055));
    float _2198 = _2196.w;
    float _2210 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2198);
    float _2211 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2198);
    float _2212 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2198);
    uvec4 _2216 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _2218 = _2216.x * 14u;
    uint _2219 = _2218 + 13u;
    float _2226 = _1132 + (-1.0);
    float _2231 = (cbLight._m0[_2219].x * _2226) + 1.0;
    float _2232 = (cbLight._m0[_2219].y * _2226) + 1.0;
    float _2233 = (cbLight._m0[_2219].z * _2226) + 1.0;
    float _2234 = (cbLight._m0[_2219].w * _2226) + 1.0;
    uint _2235 = _2218 + 5u;
    float _2241 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2245 = _2218 + 4u;
    float _2254 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2258 = _2218 | 1u;
    float _2269 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_955, _956, _957));
    float _2272 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_955, _956, _957));
    float _4513 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _4524 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2277 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * 0.3183098733425140380859375;
    float _2279 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2286 = ((cbLight._m0[_2235].x * _2241) * _2279) + (((cbLight._m0[_2245].x * _2210) * _2254) * _2277);
    float _2287 = ((_2241 * cbLight._m0[_2235].y) * _2279) + (((cbLight._m0[_2245].y * _2211) * _2254) * _2277);
    float _2288 = ((_2241 * cbLight._m0[_2235].z) * _2279) + (((cbLight._m0[_2245].z * _2212) * _2254) * _2277);
    uvec4 _2292 = floatBitsToUint(cbLight._m0[_2218 + 12u]);
    bool _2294 = _2292.x == 0u;
    float _2305;
    float _2307;
    float _2309;
    if (_2294)
    {
        _2305 = _2286;
        _2307 = _2287;
        _2309 = _2288;
    }
    else
    {
        uint _2313 = _2218 + 6u;
        float _2329 = (dot(vec3(cbLight._m0[_2218 + 2u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4535 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2332 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2305 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2286;
        _2307 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2287;
        _2309 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2288;
    }
    bool _2312 = _2292.y == 0u;
    float _2350;
    float _2352;
    float _2354;
    if (_2312)
    {
        _2350 = _2305;
        _2352 = _2307;
        _2354 = _2309;
    }
    else
    {
        uint _2523 = _2218 + 7u;
        float _2539 = (dot(vec3(cbLight._m0[_2218 + 3u].xyz), vec3(_955, _956, _957)) * 0.5) + 0.5;
        float _2540 = _2539 * _2539;
        float _4551 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2541 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2542 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2350 = (((cbLight._m0[_2523].x * 0.3183098733425140380859375) * _2541) * _2542) + _2305;
        _2352 = (((cbLight._m0[_2523].y * 0.3183098733425140380859375) * _2541) * _2542) + _2307;
        _2354 = (((cbLight._m0[_2523].z * 0.3183098733425140380859375) * _2541) * _2542) + _2309;
    }
    uint _2357 = _2218 + 8u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _958) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2218].x + _1034;
    float _2373 = cbLight._m0[_2218].y + _1035;
    float _2374 = cbLight._m0[_2218].z + _1036;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2218].xyz));
    float _4567 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
    float _4578 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _2386 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _2387 = dot(vec3(_955, _956, _957), vec3(_2379, _2380, _2381));
    float _4589 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2391 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2379, _2380, _2381));
    float _4600 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2395 = _2371 * _2371;
    float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
    float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0);
    float _2408 = 0.959999978542327880859375 - _1113;
    float _2410 = 0.959999978542327880859375 - _1114;
    float _2411 = 0.959999978542327880859375 - _1115;
    float _2418 = 1.0 - _2371;
    float _2429 = (0.5 / (((_2386 * ((_2385 * _2418) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2418) + _2371) * _2385))) * _2385;
    float _4611 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2431 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
    uint _2445 = _2218 + 9u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _958) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2258].x + _1034;
    float _2459 = cbLight._m0[_2258].y + _1035;
    float _2460 = cbLight._m0[_2258].z + _1036;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2258].xyz));
    float _4622 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2472 = dot(vec3(_955, _956, _957), vec3(_2465, _2466, _2467));
    float _4633 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2476 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2465, _2466, _2467));
    float _4644 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2480 = _2457 * _2457;
    float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
    float _2491 = exp2(log2(1.0 - (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) * 5.0);
    float _2498 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2386 * ((_2471 * _2498) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2498) + _2457) * _2471))) * _2471;
    float _4655 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
    float _2520 = (((((_2491 * _2408) + _1116) * cbLight._m0[_2445].x) * _2510) * _2241) + ((((cbLight._m0[_2357].x * _2210) * ((_2407 * _2408) + _1116)) * _2431) * _2254);
    float _2521 = (((((_2491 * _2410) + _1118) * cbLight._m0[_2445].y) * _2510) * _2241) + ((((cbLight._m0[_2357].y * _2211) * ((_2407 * _2410) + _1118)) * _2431) * _2254);
    float _2522 = (((((_2491 * _2411) + _1119) * cbLight._m0[_2445].z) * _2510) * _2241) + ((((cbLight._m0[_2357].z * _2212) * ((_2407 * _2411) + _1119)) * _2431) * _2254);
    float _2584;
    float _2586;
    float _2588;
    if (_2294)
    {
        _2584 = _2520;
        _2586 = _2521;
        _2588 = _2522;
    }
    else
    {
        uint _2590 = _2218 + 2u;
        uint _2594 = _2218 + 10u;
        float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2590].w)) * _958) * 0.949999988079071044921875);
        float _2609 = _2608 * _2608;
        float _2610 = cbLight._m0[_2590].x + _1034;
        float _2611 = cbLight._m0[_2590].y + _1035;
        float _2612 = cbLight._m0[_2590].z + _1036;
        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
        float _2617 = _2616 * _2610;
        float _2618 = _2616 * _2611;
        float _2619 = _2616 * _2612;
        float _2620 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2590].xyz));
        float _4666 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2623 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2624 = dot(vec3(_955, _956, _957), vec3(_2617, _2618, _2619));
        float _4677 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        float _2627 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2628 = dot(vec3(cbLight._m0[_2590].xyz), vec3(_2617, _2618, _2619));
        float _4688 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2632 = _2609 * _2609;
        float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
        float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
        float _2650 = 1.0 - _2609;
        float _2660 = (0.5 / (((_2386 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2650) + _2609) * _2623))) * _2623;
        float _4699 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2662 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
        float _2663 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2584 = (((((_2643 * _2408) + _1116) * cbLight._m0[_2594].x) * _2662) * _2663) + _2520;
        _2586 = (((((_2643 * _2410) + _1118) * cbLight._m0[_2594].y) * _2662) * _2663) + _2521;
        _2588 = (((((_2643 * _2411) + _1119) * cbLight._m0[_2594].z) * _2662) * _2663) + _2522;
    }
    float _2698;
    float _2700;
    float _2702;
    if (_2312)
    {
        _2698 = _2584;
        _2700 = _2586;
        _2702 = _2588;
    }
    else
    {
        uint _2709 = _2218 + 3u;
        uint _2713 = _2218 + 11u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _958) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _1034;
        float _2730 = cbLight._m0[_2709].y + _1035;
        float _2731 = cbLight._m0[_2709].z + _1036;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_955, _956, _957), vec3(cbLight._m0[_2709].xyz));
        float _4715 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2743 = dot(vec3(_955, _956, _957), vec3(_2736, _2737, _2738));
        float _4726 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4737 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2386 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2386 * _2769) + _2728) * _2742))) * _2742;
        float _4748 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
        _2698 = (((((_2762 * _2408) + _1116) * cbLight._m0[_2713].x) * _2781) * _2782) + _2584;
        _2700 = (((((_2762 * _2410) + _1118) * cbLight._m0[_2713].y) * _2781) * _2782) + _2586;
        _2702 = (((((_2762 * _2411) + _1119) * cbLight._m0[_2713].z) * _2781) * _2782) + _2588;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2216.y == 0u)
    {
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2857;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2857;
        float _2860 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2857;
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1055) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _1054) / _2873)));
        float _2894 = (log2(_2860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            float _3163 = 0.0;
            uint _3164 = 0u;
            uint _3173;
            bool _3174;
            for (;;)
            {
                _3173 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                _3174 = _3173 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3174)
                {
                    frontier_phi_66_pred = _3158;
                    frontier_phi_66_pred_1 = _3163;
                    frontier_phi_66_pred_2 = _3162;
                    frontier_phi_66_pred_3 = _3161;
                    frontier_phi_66_pred_4 = _3160;
                    frontier_phi_66_pred_5 = _3159;
                }
                else
                {
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    float _3308;
                    uint _3309;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3163;
                    _3309 = _3173;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3313 = uint(findLSB(_3309)) + (_3164 << 5u);
                        uint _3310 = (_3309 + 4294967295u) & _3309;
                        uint _3315 = _3313 * 48u;
                        vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3335 = (_3313 * 48u) + 4u;
                        vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3354 = (_3313 * 48u) + 8u;
                        vec3 _3365 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3354)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3354 + 2u)).x));
                        float _3369 = _3329.x - _2858;
                        float _3370 = _3329.y - _2859;
                        float _3371 = _3329.z - _2860;
                        float _3372 = dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371));
                        float _3375 = inversesqrt(_3372);
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3379 = dot(vec3(_1073, _1076, _1079), vec3(_3376, _3377, _3378));
                        float _3384 = 1.0 - (_3372 * _3329.w);
                        float _4774 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3385 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3386 = sqrt(_3372) * _3348.w;
                        float _3389 = 1.39999997615814208984375 / (_3386 + 1.39999997615814208984375);
                        float _3390 = _3389 * _3389;
                        float _3393 = ((1.0 - _3390) * _3379) + _3390;
                        float _3396 = _3386 * _3386;
                        float _3400 = ((isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0))) * _3385) / ((_3396 * 0.699999988079071044921875) + 1.0);
                        float _3404 = (-0.0) - _2858;
                        float _3405 = (-0.0) - _2859;
                        float _3406 = (-0.0) - _2860;
                        float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3421 = exp2(log2(1.0 / ((_3396 * 3.5) + 5.0)) * 0.25);
                        float _3422 = 1.0 - _1148;
                        float _3429 = sqrt(1.0 - ((1.0 - (_3422 * _3422)) * (1.0 - (_3421 * _3421))));
                        float _3430 = _3429 * _3429;
                        float _3431 = _3430 * _3430;
                        float _3432 = _3411 + _3376;
                        float _3433 = _3412 + _3377;
                        float _3434 = _3413 + _3378;
                        float _3438 = inversesqrt(dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434)));
                        float _3442 = dot(vec3(_1073, _1076, _1079), vec3(_3411, _3412, _3413));
                        float _4790 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3445 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                        float _3446 = dot(vec3(_1073, _1076, _1079), vec3(_3438 * _3432, _3438 * _3433, _3438 * _3434));
                        float _4801 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3453 = ((_3449 * _3449) * (_3431 + (-1.0))) + 1.0;
                        float _3454 = _3389 * _3430;
                        float _3455 = _3454 * _3454;
                        float _3458 = ((1.0 - _3455) * _3379) + _3455;
                        float _4812 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3459 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3460 = 1.0 - _3430;
                        float _3470 = (0.5 / (((_3459 * ((_3445 * _3460) + _3430)) + 9.9999999392252902907785028219223e-09) + (((_3459 * _3460) + _3430) * _3445))) * _3459;
                        float _4823 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3481 = (((_3431 * 3.1415927410125732421875) * (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) / ((_3453 * _3453) * ((_3396 * 2.1991131305694580078125) + 3.141590118408203125))) * _3385;
                        _3233 = (_3400 * _3348.x) + _3306;
                        _3234 = (_3400 * _3348.y) + _3307;
                        _3235 = (_3400 * _3348.z) + _3308;
                        _3230 = (_3481 * _3365.x) + _3303;
                        _3231 = (_3481 * _3365.y) + _3304;
                        _3232 = (_3481 * _3365.z) + _3305;
                        if (_3310 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3235;
                            _3309 = _3310;
                        }
                    }
                    frontier_phi_66_pred = _3230;
                    frontier_phi_66_pred_1 = _3235;
                    frontier_phi_66_pred_2 = _3234;
                    frontier_phi_66_pred_3 = _3233;
                    frontier_phi_66_pred_4 = _3232;
                    frontier_phi_66_pred_5 = _3231;
                }
                _3006 = frontier_phi_66_pred;
                _3016 = frontier_phi_66_pred_1;
                _3014 = frontier_phi_66_pred_2;
                _3012 = frontier_phi_66_pred_3;
                _3010 = frontier_phi_66_pred_4;
                _3008 = frontier_phi_66_pred_5;
                uint _3165 = _3164 + 1u;
                if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3158 = _3006;
                    _3159 = _3008;
                    _3160 = _3010;
                    _3161 = _3012;
                    _3162 = _3014;
                    _3163 = _3016;
                    _3164 = _3165;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        if (((4294967295u << _3022) & _2904) == 0u)
        {
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
            _3134 = _3013;
            _3136 = _3015;
        }
        else
        {
            float _3151 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
            float _3152 = _3151 * _2858;
            float _3153 = _3151 * _2859;
            float _3154 = _3151 * _2860;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3286 = _3005;
                float _3287 = _3007;
                float _3288 = _3009;
                float _3289 = _3011;
                float _3290 = _3013;
                float _3291 = _3015;
                uint _3292 = _3022;
                uint _3301;
                bool _3302;
                for (;;)
                {
                    _3301 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                    _3302 = _3301 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3302)
                    {
                        frontier_phi_77_pred = _3291;
                        frontier_phi_77_pred_1 = _3290;
                        frontier_phi_77_pred_2 = _3289;
                        frontier_phi_77_pred_3 = _3288;
                        frontier_phi_77_pred_4 = _3287;
                        frontier_phi_77_pred_5 = _3286;
                    }
                    else
                    {
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        float _3513 = _3291;
                        uint _3514 = _3301;
                        uint _3515;
                        vec4 _3540;
                        float _3541;
                        vec4 _3556;
                        vec3 _3568;
                        vec4 _3583;
                        vec4 _3598;
                        float _3644;
                        bool _3645;
                        for (;;)
                        {
                            uint _3525 = ((_3292 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3514));
                            _3515 = (_3514 + 4294967295u) & _3514;
                            uint _3527 = _3525 * 40u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            _3541 = _3540.w;
                            uint _3543 = (_3525 * 40u) + 4u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3525 * 40u) + 8u;
                            _3568 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x));
                            uint _3570 = (_3525 * 40u) + 16u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3525 * 40u) + 20u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3525 * 40u) + 24u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3619 = (_3525 * 40u) + 28u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3644 = fma(_2860, _3632.z, fma(_2859, _3632.y, _3632.x * _2858)) + _3632.w;
                            _3645 = !((fma(_2860, _3613.z, fma(_2859, _3613.y, _3613.x * _2858)) + _3613.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3645)
                            {
                                float _3672 = _3540.x - _2858;
                                float _3673 = _3540.y - _2859;
                                float _3674 = _3540.z - _2860;
                                float _3675 = dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674));
                                float _3678 = inversesqrt(_3675);
                                float _3679 = _3678 * _3672;
                                float _3680 = _3678 * _3673;
                                float _3681 = _3678 * _3674;
                                float _3685 = 1.0 - (_3675 / (_3541 * _3541));
                                float _4834 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3690 = sqrt(_3675) * _3556.w;
                                float _3692 = 1.39999997615814208984375 / (_3690 + 1.39999997615814208984375);
                                float _3693 = _3692 * _3692;
                                float _3696 = ((1.0 - _3693) * dot(vec3(_3679, _3680, _3681), vec3(_1073, _1076, _1079))) + _3693;
                                float _3699 = _3690 * _3690;
                                float _3703 = (fma(_2860, _3583.z, fma(_2859, _3583.y, _3583.x * _2858)) + _3583.w) / _3644;
                                float _3704 = (fma(_2860, _3598.z, fma(_2859, _3598.y, _3598.x * _2858)) + _3598.w) / _3644;
                                float _3708 = 1.0 - dot(vec2(_3703, _3704), vec2(_3703, _3704));
                                float _4850 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                                float _3710 = _3709 * (((isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0))) * _3686) / ((_3699 * 0.699999988079071044921875) + 1.0));
                                float _3722 = exp2(log2(1.0 / ((_3699 * 3.5) + 5.0)) * 0.25);
                                float _3723 = 1.0 - _1148;
                                float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                                float _3731 = _3730 * _3730;
                                float _3732 = _3731 * _3731;
                                float _3733 = _3679 - _3152;
                                float _3734 = _3680 - _3153;
                                float _3735 = _3681 - _3154;
                                float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                                float _3743 = dot(vec3(_1073, _1076, _1079), vec3((-0.0) - _3152, (-0.0) - _3153, (-0.0) - _3154));
                                float _4861 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3747 = dot(vec3(_1073, _1076, _1079), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                                float _4872 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                                float _3755 = _3692 * _3731;
                                float _3756 = _3755 * _3755;
                                float _3762 = ((1.0 - _3756) * dot(vec3(_1073, _1076, _1079), vec3(_3679, _3680, _3681))) + _3756;
                                float _4883 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3764 = 1.0 - _3731;
                                float _3774 = (0.5 / (((_3763 * ((_3746 * _3764) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3731) * _3746))) * _3763;
                                float _4894 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3784 = (_3709 * _3686) * (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0)))) / ((_3754 * _3754) * ((_3699 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3710 * _3556.y;
                                frontier_phi_83_pred_1 = _3710 * _3556.x;
                                frontier_phi_83_pred_2 = _3784 * _3568.z;
                                frontier_phi_83_pred_3 = _3784 * _3568.y;
                                frontier_phi_83_pred_4 = _3784 * _3568.x;
                                frontier_phi_83_pred_5 = _3710 * _3556.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3792 = frontier_phi_83_pred;
                            _3791 = frontier_phi_83_pred_1;
                            _3790 = frontier_phi_83_pred_2;
                            _3789 = frontier_phi_83_pred_3;
                            _3788 = frontier_phi_83_pred_4;
                            _3793 = frontier_phi_83_pred_5;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            if (_3515 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3515;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3500;
                        frontier_phi_77_pred_1 = _3499;
                        frontier_phi_77_pred_2 = _3498;
                        frontier_phi_77_pred_3 = _3497;
                        frontier_phi_77_pred_4 = _3496;
                        frontier_phi_77_pred_5 = _3495;
                    }
                    _3137 = frontier_phi_77_pred;
                    _3135 = frontier_phi_77_pred_1;
                    _3133 = frontier_phi_77_pred_2;
                    _3131 = frontier_phi_77_pred_3;
                    _3129 = frontier_phi_77_pred_4;
                    _3127 = frontier_phi_77_pred_5;
                    uint _3293 = _3292 + 1u;
                    if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3286 = _3127;
                        _3287 = _3129;
                        _3288 = _3131;
                        _3289 = _3133;
                        _3290 = _3135;
                        _3291 = _3137;
                        _3292 = _3293;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3131;
                frontier_phi_58_59_ladder_1 = _3137;
                frontier_phi_58_59_ladder_2 = _3135;
                frontier_phi_58_59_ladder_3 = _3133;
                frontier_phi_58_59_ladder_4 = _3129;
                frontier_phi_58_59_ladder_5 = _3127;
            }
            else
            {
                frontier_phi_58_59_ladder = _3009;
                frontier_phi_58_59_ladder_1 = _3015;
                frontier_phi_58_59_ladder_2 = _3013;
                frontier_phi_58_59_ladder_3 = _3011;
                frontier_phi_58_59_ladder_4 = _3007;
                frontier_phi_58_59_ladder_5 = _3005;
            }
            _3126 = frontier_phi_58_59_ladder_5;
            _3128 = frontier_phi_58_59_ladder_4;
            _3130 = frontier_phi_58_59_ladder;
            _3132 = frontier_phi_58_59_ladder_3;
            _3134 = frontier_phi_58_59_ladder_2;
            _3136 = frontier_phi_58_59_ladder_1;
        }
        float _3141 = isnan(1.0) ? _1132 : (isnan(_1132) ? 1.0 : min(_1132, 1.0));
        _2917 = (_3141 * _3132) + _2350;
        _2919 = (_3141 * _3134) + _2352;
        _2921 = (_3141 * _3136) + _2354;
        _2923 = ((_3126 * _1116) * _3141) + _2698;
        _2925 = ((_3128 * _1118) * _3141) + _2700;
        _2927 = ((_3130 * _1119) * _3141) + _2702;
    }
    else
    {
        _2917 = _2350;
        _2919 = _2352;
        _2921 = _2354;
        _2923 = _2698;
        _2925 = _2700;
        _2927 = _2702;
    }
    float _4910 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _4921 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _4932 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _2944 = ((isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2917 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1132))) + ((_2923 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2919 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1132))) + ((_2925 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    float _2946 = ((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2921 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1132))) + ((_2927 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    uint _2947 = _262 + 6u;
    float _2955 = _1054 / cbSceneParam._m0[86u].x;
    float _2956 = _1055 / cbSceneParam._m0[86u].y;
    vec4 _2970 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2972 = _2970.x;
    float _2973 = _2970.y;
    float _2974 = _2970.z;
    float _2975 = _2970.w;
    float _3068;
    float _3070;
    float _3072;
    float _3074;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3031 = _3030 / _977;
        float _3042 = _3031 * _1027;
        float _3043 = _1028 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3046 = _3031 * _1029;
        float _3048 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3049 = _3048 + cbSceneParam._m0[79u].w;
        float _3050 = cbSceneParam._m0[79u].w - _3043;
        float _3056 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3046 * _3046));
        float _3059 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3056;
        float _3064 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3066 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3044 - _3048) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3049 > 0.0) ? exp2(_3064 * _3049) : (2.0 - exp2(_3066 * _3049))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3059;
        }
        else
        {
            float _3187 = 1.0 / cbSceneParam._m0[80u].x;
            float _3188 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : max(_3049, _3050));
            float _3189 = isnan(_3050) ? _3049 : (isnan(_3049) ? _3050 : min(_3049, _3050));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            float _3199 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : min(_3189, 0.0));
            _3243 = ((abs(_3056 / _3044) * cbSceneParam._m0[80u].y) * ((((_3198 - _3199) * 2.0) - ((exp2(_3064 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0)))) - exp2(_3064 * (isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))))) * _3187)) - ((exp2(_3066 * _3198) - exp2(_3066 * _3199)) * _3187))) + (_3059 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2955, _2956, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_2975);
        _3068 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _2972;
        _3070 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _2973;
        _3072 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _2974;
        _3074 = _3254 * _2975;
    }
    else
    {
        _3068 = _2972;
        _3070 = _2973;
        _3072 = _2974;
        _3074 = _2975;
    }
    bool _3281;
    vec4 _3084;
    vec4 _3106;
    float _3108;
    float _3112;
    float _3113;
    float _3114;
    float _3115;
    bool _3125;
    for (;;)
    {
        _3084 = cbMatDynParam._m0[0u];
        float _3086 = roundEven(_3084.y);
        bool _3087 = _3086 == 3.0;
        float _3088 = log2(_3074);
        float _3095 = exp2(_3088 * cbSceneParam._m0[78u].x) * _2944;
        float _3096 = exp2(_3088 * cbSceneParam._m0[78u].y) * _2945;
        float _3097 = exp2(_3088 * cbSceneParam._m0[78u].z) * _2946;
        float _3104 = _1043 + (-0.5);
        _3106 = cbMtdParam._m0[1u];
        _3108 = _3106.y * _3104;
        float _3111 = (_3086 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3112 = _3111 * (_3087 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3068)));
        _3113 = _3111 * (_3087 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3070)));
        _3114 = _3111 * (_3087 ? _3097 : (_3097 + (cbSceneParam._m0[72u].w * _3072)));
        _3115 = _3104 * 0.999000012874603271484375;
        _3125 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3125)
        {
            if ((cbInstanceData._m0[_262 + 7u].x + _3115) < 0.5)
            {
                _3281 = true;
                break;
            }
        }
        uint _3222 = _1092 + uint(_3084.w);
        if ((cbInstanceData._m0[_3222].w < 1.0) && ((cbInstanceData._m0[_3222].w + _3115) < 0.5))
        {
            _3281 = true;
            break;
        }
        if ((_3108 + 1.0) < _3106.x)
        {
            _3281 = true;
            break;
        }
        _3281 = false;
        break;
    }
    float _3486;
    if (_3281)
    {
        discard_state = true;
        _3486 = 0.0;
    }
    else
    {
        _3486 = cbInstanceData._m0[_2947].w;
    }
    SV_Target.x = _3112;
    SV_Target.y = _3113;
    SV_Target.z = _3114;
    SV_Target.w = _3486;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2947].w;
    discard_exit();
}


