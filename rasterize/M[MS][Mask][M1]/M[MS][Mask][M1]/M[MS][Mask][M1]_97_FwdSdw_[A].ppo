#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1561;
float _4221;
float _4222;
float _4223;
float _4224;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[23u].w) + _427) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4233 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _452 = (_445 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _453 = (_445 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _454 = (_445 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[23u].w) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4244 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _531 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452);
    float _534 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453);
    float _537 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454);
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    float _604 = ((_576.x - _595) * _445) + _595;
    float _605 = ((_576.y - _596) * _445) + _596;
    float _606 = ((_576.z - _597) * _445) + _597;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _631 = ((_618.z - _606) * _518) + _606;
    float _634 = ((((_618.x - _604) * _518) + _604) * 2.0) + (-1.0);
    float _636 = ((((_618.y - _605) * _518) + _605) * 2.0) + (-1.0);
    float _637 = dot(vec2(_634, _636), vec2(_634, _636));
    float _4255 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _668 = (((_656.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _634;
    float _669 = (((_656.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _636;
    float _672 = fma(_642, _257, fma(_669, _264, _668 * _250));
    float _675 = fma(_642, _258, fma(_669, _265, _668 * _251));
    float _678 = fma(_642, _259, fma(_669, _266, _668 * _252));
    float _682 = inversesqrt(dot(vec3(_672, _675, _678), vec3(_672, _675, _678)));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _721 = (cbMtdParam._m0[19u].x + dot(vec4(_682 * _672, _682 * _675, _682 * _678, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_711 - _712) * cbMtdParam._m0[24u].z) + _712) * cbMtdParam._m0[21u].z);
    float _4266 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _722 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _724 = (-0.0) - cbMtdParam._m0[24u].x;
    float _726 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _726 : (isnan(_726) ? 1.0 : min(_726, 1.0));
    float _734 = _722 - ((_722 * TEXCOORD_8.x) * _727);
    float _735 = _722 - ((_722 * TEXCOORD_8.y) * _727);
    float _736 = _722 - ((_722 * TEXCOORD_8.z) * _727);
    float _743 = (_734 * ((_556.x * cbMtdParam._m0[18u].x) - _531)) + _531;
    float _744 = (_735 * ((_556.y * cbMtdParam._m0[18u].y) - _534)) + _534;
    float _745 = (_736 * ((_556.z * cbMtdParam._m0[18u].z) - _537)) + _537;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _759 = _757.x;
    float _760 = 1.0 - _759;
    float _786 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_759 - _760) * cbMtdParam._m0[24u].w) + _760) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4287 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _787 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _795 = ((((cbMtdParam._m0[10u].x - _743) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _787) + _743;
    float _796 = ((((cbMtdParam._m0[10u].y - _744) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _787) + _744;
    float _797 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _745)) * _787) + _745;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _825 = _823.x;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _825) * _445) + _825;
    float _859 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _842) * _518) + _842;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _859) * cbMtdParam._m0[19u].z) + _859;
    float _865 = _863 - (_863 * _734);
    float _867 = _865 - (_865 * _787);
    float _871 = (cbMtdParam._m0[19u].w * (_656.z - _631)) + _631;
    vec4 _885 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _892 = (_885.x * 2.0) + (-1.0);
    float _893 = (_885.y * 2.0) + (-1.0);
    float _894 = dot(vec2(_892, _893), vec2(_892, _893));
    float _4298 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _902 = ((_885.z - _871) * _734) + _871;
    float _905 = ((cbMtdParam._m0[23u].x - _902) * _787) + _902;
    vec4 _924 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _930 = (_924.x * 2.0) + (-1.0);
    float _931 = (_924.y * 2.0) + (-1.0);
    float _932 = dot(vec2(_930, _931), vec2(_930, _931));
    float _4309 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _947 = ((sqrt(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) - _642) * _736) + _642;
    float _950 = (((_892 - _668) * _734) + _668) + (cbMtdParam._m0[21u].x * _668);
    float _951 = (((_893 - _669) * _735) + _669) + (cbMtdParam._m0[21u].x * _669);
    float _962 = (((_930 - _950) + (_950 * cbMtdParam._m0[22u].z)) * _787) + _950;
    float _963 = (((_931 - _951) + (_951 * cbMtdParam._m0[22u].z)) * _787) + _951;
    float _964 = (_787 * (sqrt(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) - _947)) + _947;
    float _968 = cbMtdParam._m0[22u].x + _656.w;
    float _971 = fma(_964, _257, fma(_963, _264, _962 * _250));
    float _974 = fma(_964, _258, fma(_963, _265, _962 * _251));
    float _977 = fma(_964, _259, fma(_963, _266, _962 * _252));
    float _981 = inversesqrt(dot(vec3(_971, _974, _977), vec3(_971, _974, _977)));
    float _982 = _981 * _971;
    float _983 = _981 * _974;
    float _984 = _981 * _977;
    float _4320 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _985 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _4331 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4342 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4353 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4364 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4375 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _990 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _1004 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1054 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1044);
    float _1055 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1044);
    float _1056 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1044);
    float _1060 = inversesqrt(dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056)));
    float _1061 = _1054 * _1060;
    float _1062 = _1055 * _1060;
    float _1063 = _1056 * _1060;
    vec4 _1068 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1070 = _1068.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1242 = sqrt(((_1054 * _1054) + (_1055 * _1055)) + (_1056 * _1056));
        float _1248 = (cbMatDynParam._m0[5u].x * _1242) + cbMatDynParam._m0[5u].y;
        float _4386 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1253 = (cbMatDynParam._m0[5u].z * _1242) + cbMatDynParam._m0[5u].w;
        float _4397 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) - _1249)) + _1249) < ((_1070 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1081 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1082 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1100 = fma(_984, cbSceneParam._m0[5u].z, fma(_983, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _982));
    float _1103 = fma(_984, cbSceneParam._m0[6u].z, fma(_983, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _982));
    float _1106 = fma(_984, cbSceneParam._m0[7u].z, fma(_983, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _982));
    uint _1119 = _269 + 9u;
    uint _1120 = _1119 + uint(cbMatDynParam._m0[0u].w);
    float _1126 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * cbInstanceData._m0[_1120].x;
    float _1127 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * cbInstanceData._m0[_1120].y;
    float _1128 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * cbInstanceData._m0[_1120].z;
    float _4408 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1129 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _4419 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1130 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _4430 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1131 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _1132 = 1.0 - _990;
    float _1133 = _1129 * _1132;
    float _1134 = _1130 * _1132;
    float _1135 = _1131 * _1132;
    float _1140 = (_1129 + (-0.039999999105930328369140625)) * _990;
    float _1141 = (_1130 + (-0.039999999105930328369140625)) * _990;
    float _1142 = (_1131 + (-0.039999999105930328369140625)) * _990;
    float _1143 = _1140 + 0.039999999105930328369140625;
    float _1145 = _1141 + 0.039999999105930328369140625;
    float _1146 = _1142 + 0.039999999105930328369140625;
    vec4 _1155 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1081, cbSceneParam._m0[86u].y * _1082));
    float _1159 = ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * TEXCOORD_5.w) * _1155.x;
    float _1160 = dot(vec3(_982, _983, _984), vec3(_1061, _1062, _1063));
    float _1163 = _1160 * 2.0;
    float _1167 = (_1163 * _982) - _1061;
    float _1168 = (_1163 * _983) - _1062;
    float _1169 = (_1163 * _984) - _1063;
    float _1173 = abs(dot(vec3(_1061, _1062, _1063), vec3(_982, _983, _984)));
    float _4441 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1175 = sqrt(_985);
    float _1188 = exp2((_1175 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1175 * 3.0));
    float _1194 = (1.0 - _1188) * ((_1175 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1195 = _1188 * _1175;
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1560;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1285 = fma(_1231, cbModelParam._m0[26u].z, fma(_1227, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1223));
        float _1289 = fma(_1231, cbModelParam._m0[27u].z, fma(_1227, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1223));
        float _1293 = fma(_1231, cbModelParam._m0[28u].z, fma(_1227, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1223));
        float _1318 = _1223 + _982;
        float _1319 = _1227 + _983;
        float _1320 = _1231 + _984;
        float _1330 = fma(_1320, cbModelParam._m0[26u].z, fma(_1319, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1318)) - _1285;
        float _1331 = fma(_1320, cbModelParam._m0[27u].z, fma(_1319, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1318)) - _1289;
        float _1332 = fma(_1320, cbModelParam._m0[28u].z, fma(_1319, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1318)) - _1293;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1285 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1289 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[34u].z) + ((((((_1293 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1388 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1354.x + (-0.5));
        float _1390 = _1388 * (_1354.y + (-0.5));
        float _1391 = _1388 * (_1354.z + (-0.5));
        float _1398 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1361.x + (-0.5));
        float _1400 = _1398 * (_1361.y + (-0.5));
        float _1401 = _1398 * (_1361.z + (-0.5));
        float _1408 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1368.x + (-0.5));
        float _1410 = _1408 * (_1368.y + (-0.5));
        float _1411 = _1408 * (_1368.z + (-0.5));
        float _1418 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1375.x + (-0.5));
        float _1420 = _1418 * (_1375.y + (-0.5));
        float _1421 = _1418 * (_1375.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1442 = (dot(vec3(_982, _983, _984), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1452 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4489 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1454 + 1.0))) + _1459) * _1422;
        float _1469 = _1390 * 0.5;
        float _1470 = _1400 * 0.5;
        float _1471 = _1410 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_982, _983, _984), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4500 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4511 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4522 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_1496 + 1.0))) + _1501) * _1423;
        float _1511 = _1391 * 0.5;
        float _1512 = _1401 * 0.5;
        float _1513 = _1411 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_982, _983, _984), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4533 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4544 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4555 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * (_1538 + 1.0))) + _1543) * _1424;
        _1560 = _1391;
        _1562 = _1390;
        _1563 = _1389;
        _1564 = _1401;
        _1565 = _1400;
        _1566 = _1399;
        _1567 = _1411;
        _1568 = _1410;
        _1569 = _1409;
        _1570 = _1424;
        _1571 = _1423;
        _1572 = _1422;
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
    }
    else
    {
        _1560 = _1561;
        _1562 = _1561;
        _1563 = _1561;
        _1564 = _1561;
        _1565 = _1561;
        _1566 = _1561;
        _1567 = _1561;
        _1568 = _1561;
        _1569 = _1561;
        _1570 = _1561;
        _1571 = _1561;
        _1572 = _1561;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1602 = fma(_1231, cbModelParam._m0[30u].z, fma(_1227, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1223));
        float _1606 = fma(_1231, cbModelParam._m0[31u].z, fma(_1227, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1223));
        float _1610 = fma(_1231, cbModelParam._m0[32u].z, fma(_1227, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1223));
        float _1633 = _1223 + _982;
        float _1634 = _1227 + _983;
        float _1635 = _1231 + _984;
        float _1645 = fma(_1635, cbModelParam._m0[30u].z, fma(_1634, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1633)) - _1602;
        float _1646 = fma(_1635, cbModelParam._m0[31u].z, fma(_1634, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1633)) - _1606;
        float _1647 = fma(_1635, cbModelParam._m0[32u].z, fma(_1634, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1633)) - _1610;
        float _1651 = inversesqrt(dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647)));
        float _1664 = ((_1651 * _1645) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1602 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1665 = ((_1651 * _1646) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1606 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1666 = ((_1651 * _1647) / cbModelParam._m0[35u].z) + ((((((_1610 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        float _1701 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1668.x + (-0.5));
        float _1703 = _1701 * (_1668.y + (-0.5));
        float _1704 = _1701 * (_1668.z + (-0.5));
        float _1711 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1675.x + (-0.5));
        float _1713 = _1711 * (_1675.y + (-0.5));
        float _1714 = _1711 * (_1675.z + (-0.5));
        float _1721 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1682.x + (-0.5));
        float _1723 = _1721 * (_1682.y + (-0.5));
        float _1724 = _1721 * (_1682.z + (-0.5));
        float _1731 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1689.x + (-0.5));
        float _1733 = _1731 * (_1689.y + (-0.5));
        float _1734 = _1731 * (_1689.z + (-0.5));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = _1702 * 0.5;
        float _1739 = _1712 * 0.5;
        float _1740 = _1722 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_982, _983, _984), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4596 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4607 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4618 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_1765 + 1.0))) + _1770) * _1735;
        float _1780 = _1703 * 0.5;
        float _1781 = _1713 * 0.5;
        float _1782 = _1723 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_982, _983, _984), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4629 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1736 + 9.9999997473787516355514526367188e-06);
        float _4640 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4651 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_1807 + 1.0))) + _1812) * _1736;
        float _1822 = _1704 * 0.5;
        float _1823 = _1714 * 0.5;
        float _1824 = _1724 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_982, _983, _984), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4662 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4673 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4684 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_1849 + 1.0))) + _1854) * _1737;
        _1871 = _1704;
        _1872 = _1703;
        _1873 = _1702;
        _1874 = _1714;
        _1875 = _1713;
        _1876 = _1712;
        _1877 = _1724;
        _1878 = _1723;
        _1879 = _1722;
        _1880 = _1737;
        _1881 = _1736;
        _1882 = _1735;
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
        _1884 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
    }
    else
    {
        _1871 = _1561;
        _1872 = _1561;
        _1873 = _1561;
        _1874 = _1561;
        _1875 = _1561;
        _1876 = _1561;
        _1877 = _1561;
        _1878 = _1561;
        _1879 = _1561;
        _1880 = _1561;
        _1881 = _1561;
        _1882 = _1561;
        _1883 = 0.0;
        _1884 = 0.0;
        _1885 = 0.0;
    }
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1573)) + _1573;
    float _1896 = (cbModelParam._m0[1u].x * (_1884 - _1574)) + _1574;
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1575)) + _1575;
    float _1918 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1895));
    float _1939 = _1167 * 0.5;
    float _1940 = _1168 * 0.5;
    float _1941 = _1169 * 0.5;
    float _1942 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1945 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1872, _1875, _1878, _1881));
    float _1948 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1982;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1955 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1560, _1564, _1567, _1570));
        float _1959 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1562, _1565, _1568, _1571));
        float _1963 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1563, _1566, _1569, _1572));
        float _1970 = dot(vec4(cbModelParam._m0[39u]), vec4(_1939, _1940, _1941, 1.0));
        _1982 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1982 = 1.0;
    }
    float _1993;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1984 = dot(vec4(cbModelParam._m0[40u]), vec4(_1939, _1940, _1941, 1.0));
        _1993 = dot(vec3(isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1993 = 1.0;
    }
    float _1997 = (_1993 * cbModelParam._m0[1u].x) + (_1982 * (1.0 - cbModelParam._m0[1u].x));
    float _2007 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _985);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2007 : min(cbModelParam._m0[25u].z, _2007));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2055 = fma(_1231, cbModelParam._m0[13u].z, fma(_1227, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1223)) + cbModelParam._m0[13u].w;
        float _2059 = fma(_1231, cbModelParam._m0[14u].z, fma(_1227, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1223)) + cbModelParam._m0[14u].w;
        float _2063 = fma(_1231, cbModelParam._m0[15u].z, fma(_1227, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1223)) + cbModelParam._m0[15u].w;
        float _2066 = fma(_1169, cbModelParam._m0[13u].z, fma(_1168, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1167));
        float _2069 = fma(_1169, cbModelParam._m0[14u].z, fma(_1168, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1167));
        float _2072 = fma(_1169, cbModelParam._m0[15u].z, fma(_1168, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1167));
        float _2100;
        if (_2066 > 0.0)
        {
            _2100 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2100 = frontier_phi_17_15_ladder;
        }
        float _2271;
        if (_2069 > 0.0)
        {
            _2271 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2271 = frontier_phi_26_22_ladder;
        }
        float _2566;
        if (_2072 > 0.0)
        {
            _2566 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2566 = frontier_phi_38_33_ladder;
        }
        float _2568 = isnan(_2271) ? _2100 : (isnan(_2100) ? _2271 : min(_2100, _2271));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _2066) + _2055;
        float _2574 = (_2569 * _2069) + _2059;
        float _2575 = (_2569 * _2072) + _2063;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2576;
        float _2580 = _2576 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 > _2580) || ((_2574 < _2578) || ((_2573 < _2578) || (_2573 > _2580))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2575, cbModelParam._m0[9u].z, fma(_2574, cbModelParam._m0[9u].y, _2573 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2575, cbModelParam._m0[10u].z, fma(_2574, cbModelParam._m0[10u].y, _2573 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2575, cbModelParam._m0[11u].z, fma(_2574, cbModelParam._m0[11u].y, _2573 * cbModelParam._m0[11u].x))), _2008);
            frontier_phi_16_38_ladder = _2720.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2720.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2720.x * cbModelParam._m0[1u].y;
        }
        _2088 = frontier_phi_16_38_ladder_2;
        _2090 = frontier_phi_16_38_ladder_1;
        _2092 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1167, _1168, _1169), _2008);
        _2088 = _2076.x * cbModelParam._m0[1u].y;
        _2090 = _2076.y * cbModelParam._m0[1u].y;
        _2092 = _2076.z * cbModelParam._m0[1u].y;
    }
    float _2096 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _985);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2096 : min(cbModelParam._m0[25u].w, _2096));
    float _2186;
    float _2188;
    float _2190;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2150 = fma(_1231, cbModelParam._m0[21u].z, fma(_1227, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1223)) + cbModelParam._m0[21u].w;
        float _2154 = fma(_1231, cbModelParam._m0[22u].z, fma(_1227, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1223)) + cbModelParam._m0[22u].w;
        float _2158 = fma(_1231, cbModelParam._m0[23u].z, fma(_1227, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1223)) + cbModelParam._m0[23u].w;
        float _2161 = fma(_1169, cbModelParam._m0[21u].z, fma(_1168, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1167));
        float _2164 = fma(_1169, cbModelParam._m0[22u].z, fma(_1168, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1167));
        float _2167 = fma(_1169, cbModelParam._m0[23u].z, fma(_1168, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1167));
        float _2276;
        if (_2161 > 0.0)
        {
            _2276 = abs((1.0 - _2150) / _2161);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2150 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2276 = frontier_phi_28_24_ladder;
        }
        float _2593;
        if (_2164 > 0.0)
        {
            _2593 = abs((1.0 - _2154) / _2164);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2154 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2593 = frontier_phi_40_35_ladder;
        }
        float _2931;
        if (_2167 > 0.0)
        {
            _2931 = abs((1.0 - _2158) / _2167);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2158 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2931 = frontier_phi_50_47_ladder;
        }
        float _2933 = isnan(_2593) ? _2276 : (isnan(_2276) ? _2593 : min(_2276, _2593));
        float _2934 = isnan(_2931) ? _2933 : (isnan(_2933) ? _2931 : min(_2933, _2931));
        float _2938 = (_2934 * _2161) + _2150;
        float _2939 = (_2934 * _2164) + _2154;
        float _2940 = (_2934 * _2167) + _2158;
        float _2941 = _2934 * 9.9999997473787516355514526367188e-05;
        float _2942 = (-1.0) - _2941;
        float _2944 = _2941 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2940 > _2944) || ((_2940 < _2942) || ((_2939 > _2944) || ((_2939 < _2942) || ((_2938 < _2942) || (_2938 > _2944))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2940, cbModelParam._m0[17u].z, fma(_2939, cbModelParam._m0[17u].y, _2938 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2940, cbModelParam._m0[18u].z, fma(_2939, cbModelParam._m0[18u].y, _2938 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2940, cbModelParam._m0[19u].z, fma(_2939, cbModelParam._m0[19u].y, _2938 * cbModelParam._m0[19u].x))), _2097);
            frontier_phi_25_50_ladder = _3062.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3062.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3062.x * cbModelParam._m0[1u].z;
        }
        _2186 = frontier_phi_25_50_ladder_2;
        _2188 = frontier_phi_25_50_ladder_1;
        _2190 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1167, _1168, _1169), _2097);
        _2186 = _2170.x * cbModelParam._m0[1u].z;
        _2188 = _2170.y * cbModelParam._m0[1u].z;
        _2190 = _2170.z * cbModelParam._m0[1u].z;
    }
    float _2203 = (((_1194 * _1143) + _1195) * _1159) * ((cbModelParam._m0[1u].w * (_2186 - _2088)) + _2088);
    float _2205 = (((_1194 * _1145) + _1195) * _1159) * ((cbModelParam._m0[1u].w * (_2188 - _2090)) + _2090);
    float _2207 = (((_1194 * _1146) + _1195) * _1159) * ((cbModelParam._m0[1u].w * (_2190 - _2092)) + _2092);
    float _2210 = fma(_2207, cbSceneParam._m0[89u].z, fma(_2205, cbSceneParam._m0[89u].y, _2203 * cbSceneParam._m0[89u].x));
    float _2213 = fma(_2207, cbSceneParam._m0[90u].z, fma(_2205, cbSceneParam._m0[90u].y, _2203 * cbSceneParam._m0[90u].x));
    float _2216 = fma(_2207, cbSceneParam._m0[91u].z, fma(_2205, cbSceneParam._m0[91u].y, _2203 * cbSceneParam._m0[91u].x));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2258 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2262 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2263 = _2250 / _2262;
    float _2264 = _2254 / _2262;
    float _2265 = _2258 / _2262;
    float _2412;
    float _2413;
    float _2414;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2292 = ((uint(_2265 > cbSceneParam._m0[59u].y) + uint(_2265 > cbSceneParam._m0[59u].x)) + uint(_2265 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2293 = _2292 + 43u;
        uint _2301 = _2292 + 44u;
        uint _2309 = _2292 + 45u;
        uint _2317 = _2292 + 46u;
        float _2328 = fma(_2262, cbSceneParam._m0[_2293].w, fma(_2258, cbSceneParam._m0[_2293].z, fma(_2254, cbSceneParam._m0[_2293].y, _2250 * cbSceneParam._m0[_2293].x)));
        float _2332 = fma(_2262, cbSceneParam._m0[_2301].w, fma(_2258, cbSceneParam._m0[_2301].z, fma(_2254, cbSceneParam._m0[_2301].y, _2250 * cbSceneParam._m0[_2301].x)));
        float _2340 = fma(_2262, cbSceneParam._m0[_2317].w, fma(_2258, cbSceneParam._m0[_2317].z, fma(_2254, cbSceneParam._m0[_2317].y, _2250 * cbSceneParam._m0[_2317].x)));
        float _2345 = cbSceneParam._m0[33u].z * _2340;
        float _2347 = cbSceneParam._m0[33u].w * _2340;
        float _2350 = fma(_2262, cbSceneParam._m0[_2309].w, fma(_2258, cbSceneParam._m0[_2309].z, fma(_2254, cbSceneParam._m0[_2309].y, _2250 * cbSceneParam._m0[_2309].x))) / _2340;
        float _2398 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
        float _4810 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2405 = (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2345 + _2328) / _2340, (_2347 + _2332) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2347 + _2328) / _2340, (_2332 - _2345) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2345) / _2340, (_2332 - _2347) / _2340), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2328 - _2347) / _2340, (_2345 + _2332) / _2340), _2350), 0.0)).x), vec4(0.25)));
        _2412 = 1.0 - (_2405 * cbSceneParam._m0[34u].x);
        _2413 = 1.0 - (_2405 * cbSceneParam._m0[34u].y);
        _2414 = 1.0 - (_2405 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2412 = 1.0;
        _2413 = 1.0;
        _2414 = 1.0;
    }
    float _2478;
    float _2480;
    float _2482;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2466 = fma(_2262, cbSceneParam._m0[63u].w, fma(_2258, cbSceneParam._m0[63u].z, fma(_2254, cbSceneParam._m0[63u].y, _2250 * cbSceneParam._m0[63u].x)));
        float _2467 = fma(_2262, cbSceneParam._m0[60u].w, fma(_2258, cbSceneParam._m0[60u].z, fma(_2254, cbSceneParam._m0[60u].y, _2250 * cbSceneParam._m0[60u].x))) / _2466;
        float _2468 = fma(_2262, cbSceneParam._m0[61u].w, fma(_2258, cbSceneParam._m0[61u].z, fma(_2254, cbSceneParam._m0[61u].y, _2250 * cbSceneParam._m0[61u].x))) / _2466;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2467 >= cbSceneParam._m0[64u].x) && (_2468 >= cbSceneParam._m0[64u].y)) && (_2467 <= cbSceneParam._m0[64u].z)) && (_2468 <= cbSceneParam._m0[64u].w))
        {
            float _2606 = fma(_2262, cbSceneParam._m0[62u].w, fma(_2258, cbSceneParam._m0[62u].z, fma(_2254, cbSceneParam._m0[62u].y, _2250 * cbSceneParam._m0[62u].x))) / _2466;
            float _2610 = isnan(cbSceneParam._m0[41u].w) ? _2606 : (isnan(_2606) ? cbSceneParam._m0[41u].w : max(_2606, cbSceneParam._m0[41u].w));
            float _2653 = (cbSceneParam._m0[33u].x - sqrt(((_2264 * _2264) + (_2263 * _2263)) + (_2265 * _2265))) * cbSceneParam._m0[33u].y;
            float _4826 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
            float _2660 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2467, cbSceneParam._m0[33u].w + _2468), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2467, _2468 - cbSceneParam._m0[33u].z), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].z, _2468 - cbSceneParam._m0[33u].w), _2610), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2467 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2468), _2610), 0.0)).x), vec4(0.25)));
            float _2664 = 1.0 - (_2660 * cbSceneParam._m0[34u].x);
            float _2665 = 1.0 - (_2660 * cbSceneParam._m0[34u].y);
            float _2666 = 1.0 - (_2660 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2666) ? _2414 : (isnan(_2414) ? _2666 : min(_2414, _2666));
            frontier_phi_37_36_ladder_1 = isnan(_2665) ? _2413 : (isnan(_2413) ? _2665 : min(_2413, _2665));
            frontier_phi_37_36_ladder_2 = isnan(_2664) ? _2412 : (isnan(_2412) ? _2664 : min(_2412, _2664));
        }
        else
        {
            frontier_phi_37_36_ladder = _2414;
            frontier_phi_37_36_ladder_1 = _2413;
            frontier_phi_37_36_ladder_2 = _2412;
        }
        _2478 = frontier_phi_37_36_ladder_2;
        _2480 = frontier_phi_37_36_ladder_1;
        _2482 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2478 = _2412;
        _2480 = _2413;
        _2482 = _2414;
    }
    uvec4 _2487 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2489 = _2487.x * 14u;
    uint _2490 = _2489 + 13u;
    float _2497 = _1159 + (-1.0);
    float _2502 = (cbLight._m0[_2490].x * _2497) + 1.0;
    float _2503 = (cbLight._m0[_2490].y * _2497) + 1.0;
    float _2504 = (cbLight._m0[_2490].z * _2497) + 1.0;
    float _2505 = (cbLight._m0[_2490].w * _2497) + 1.0;
    uint _2506 = _2489 + 5u;
    float _2512 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
    uint _2516 = _2489 + 4u;
    float _2525 = isnan(1.0) ? _2502 : (isnan(_2502) ? 1.0 : min(_2502, 1.0));
    uint _2529 = _2489 | 1u;
    float _2540 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_982, _983, _984));
    float _2543 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_982, _983, _984));
    float _4862 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _4873 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2548 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * 0.3183098733425140380859375;
    float _2550 = (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * 0.3183098733425140380859375;
    float _2557 = ((cbLight._m0[_2506].x * _2512) * _2550) + (((cbLight._m0[_2516].x * _2478) * _2525) * _2548);
    float _2558 = ((_2512 * cbLight._m0[_2506].y) * _2550) + (((cbLight._m0[_2516].y * _2480) * _2525) * _2548);
    float _2559 = ((_2512 * cbLight._m0[_2506].z) * _2550) + (((cbLight._m0[_2516].z * _2482) * _2525) * _2548);
    uvec4 _2563 = floatBitsToUint(cbLight._m0[_2489 + 12u]);
    bool _2565 = _2563.x == 0u;
    float _2667;
    float _2669;
    float _2671;
    if (_2565)
    {
        _2667 = _2557;
        _2669 = _2558;
        _2671 = _2559;
    }
    else
    {
        uint _2675 = _2489 + 6u;
        float _2691 = (dot(vec3(cbLight._m0[_2489 + 2u].xyz), vec3(_982, _983, _984)) * 0.5) + 0.5;
        float _2692 = _2691 * _2691;
        float _4884 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2693 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2694 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2667 = (((cbLight._m0[_2675].x * 0.3183098733425140380859375) * _2693) * _2694) + _2557;
        _2669 = (((cbLight._m0[_2675].y * 0.3183098733425140380859375) * _2693) * _2694) + _2558;
        _2671 = (((cbLight._m0[_2675].z * 0.3183098733425140380859375) * _2693) * _2694) + _2559;
    }
    bool _2674 = _2563.y == 0u;
    float _2729;
    float _2731;
    float _2733;
    if (_2674)
    {
        _2729 = _2667;
        _2731 = _2669;
        _2733 = _2671;
    }
    else
    {
        uint _2902 = _2489 + 7u;
        float _2918 = (dot(vec3(cbLight._m0[_2489 + 3u].xyz), vec3(_982, _983, _984)) * 0.5) + 0.5;
        float _2919 = _2918 * _2918;
        float _4900 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2920 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2921 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _2729 = (((cbLight._m0[_2902].x * 0.3183098733425140380859375) * _2920) * _2921) + _2667;
        _2731 = (((cbLight._m0[_2902].y * 0.3183098733425140380859375) * _2920) * _2921) + _2669;
        _2733 = (((cbLight._m0[_2902].z * 0.3183098733425140380859375) * _2920) * _2921) + _2671;
    }
    uint _2736 = _2489 + 8u;
    float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2489].w)) * _985) * 0.949999988079071044921875);
    float _2750 = _2749 * _2749;
    float _2751 = cbLight._m0[_2489].x + _1061;
    float _2752 = cbLight._m0[_2489].y + _1062;
    float _2753 = cbLight._m0[_2489].z + _1063;
    float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
    float _2758 = _2757 * _2751;
    float _2759 = _2757 * _2752;
    float _2760 = _2757 * _2753;
    float _2761 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2489].xyz));
    float _4916 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2764 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
    float _4927 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _2765 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
    float _2766 = dot(vec3(_982, _983, _984), vec3(_2758, _2759, _2760));
    float _4938 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2769 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
    float _2770 = dot(vec3(cbLight._m0[_2489].xyz), vec3(_2758, _2759, _2760));
    float _4949 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2774 = _2750 * _2750;
    float _2778 = ((_2769 * _2769) * (_2774 + (-1.0))) + 1.0;
    float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) * 5.0);
    float _2787 = 0.959999978542327880859375 - _1140;
    float _2789 = 0.959999978542327880859375 - _1141;
    float _2790 = 0.959999978542327880859375 - _1142;
    float _2797 = 1.0 - _2750;
    float _2808 = (0.5 / (((_2765 * ((_2764 * _2797) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2797) + _2750) * _2764))) * _2764;
    float _4960 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2810 = (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2774 / ((_2778 * _2778) * 3.141590118408203125));
    uint _2824 = _2489 + 9u;
    float _2835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _985) * 0.949999988079071044921875);
    float _2836 = _2835 * _2835;
    float _2837 = cbLight._m0[_2529].x + _1061;
    float _2838 = cbLight._m0[_2529].y + _1062;
    float _2839 = cbLight._m0[_2529].z + _1063;
    float _2843 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
    float _2844 = _2843 * _2837;
    float _2845 = _2843 * _2838;
    float _2846 = _2843 * _2839;
    float _2847 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2529].xyz));
    float _4971 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2850 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
    float _2851 = dot(vec3(_982, _983, _984), vec3(_2844, _2845, _2846));
    float _4982 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2854 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
    float _2855 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2844, _2845, _2846));
    float _4993 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2859 = _2836 * _2836;
    float _2863 = ((_2854 * _2854) * (_2859 + (-1.0))) + 1.0;
    float _2870 = exp2(log2(1.0 - (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) * 5.0);
    float _2877 = 1.0 - _2836;
    float _2887 = (0.5 / (((_2765 * ((_2850 * _2877) + _2836)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _2877) + _2836) * _2850))) * _2850;
    float _5004 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
    float _2889 = (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2859 / ((_2863 * _2863) * 3.141590118408203125));
    float _2899 = (((((_2870 * _2787) + _1143) * cbLight._m0[_2824].x) * _2889) * _2512) + ((((cbLight._m0[_2736].x * _2478) * ((_2786 * _2787) + _1143)) * _2810) * _2525);
    float _2900 = (((((_2870 * _2789) + _1145) * cbLight._m0[_2824].y) * _2889) * _2512) + ((((cbLight._m0[_2736].y * _2480) * ((_2786 * _2789) + _1145)) * _2810) * _2525);
    float _2901 = (((((_2870 * _2790) + _1146) * cbLight._m0[_2824].z) * _2889) * _2512) + ((((cbLight._m0[_2736].z * _2482) * ((_2786 * _2790) + _1146)) * _2810) * _2525);
    float _2957;
    float _2959;
    float _2961;
    if (_2565)
    {
        _2957 = _2899;
        _2959 = _2900;
        _2961 = _2901;
    }
    else
    {
        uint _2963 = _2489 + 2u;
        uint _2967 = _2489 + 10u;
        float _2981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2963].w)) * _985) * 0.949999988079071044921875);
        float _2982 = _2981 * _2981;
        float _2983 = cbLight._m0[_2963].x + _1061;
        float _2984 = cbLight._m0[_2963].y + _1062;
        float _2985 = cbLight._m0[_2963].z + _1063;
        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
        float _2990 = _2989 * _2983;
        float _2991 = _2989 * _2984;
        float _2992 = _2989 * _2985;
        float _2993 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_2963].xyz));
        float _5015 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2996 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _2997 = dot(vec3(_982, _983, _984), vec3(_2990, _2991, _2992));
        float _5026 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3000 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
        float _3001 = dot(vec3(cbLight._m0[_2963].xyz), vec3(_2990, _2991, _2992));
        float _5037 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
        float _3005 = _2982 * _2982;
        float _3009 = ((_3000 * _3000) * (_3005 + (-1.0))) + 1.0;
        float _3016 = exp2(log2(1.0 - (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) * 5.0);
        float _3023 = 1.0 - _2982;
        float _3033 = (0.5 / (((_2765 * ((_2996 * _3023) + _2982)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3023) + _2982) * _2996))) * _2996;
        float _5048 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3035 = (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3005 / ((_3009 * _3009) * 3.141590118408203125));
        float _3036 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
        _2957 = (((((_3016 * _2787) + _1143) * cbLight._m0[_2967].x) * _3035) * _3036) + _2899;
        _2959 = (((((_3016 * _2789) + _1145) * cbLight._m0[_2967].y) * _3035) * _3036) + _2900;
        _2961 = (((((_3016 * _2790) + _1146) * cbLight._m0[_2967].z) * _3035) * _3036) + _2901;
    }
    float _3067;
    float _3069;
    float _3071;
    if (_2674)
    {
        _3067 = _2957;
        _3069 = _2959;
        _3071 = _2961;
    }
    else
    {
        uint _3078 = _2489 + 3u;
        uint _3082 = _2489 + 11u;
        float _3096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3078].w)) * _985) * 0.949999988079071044921875);
        float _3097 = _3096 * _3096;
        float _3098 = cbLight._m0[_3078].x + _1061;
        float _3099 = cbLight._m0[_3078].y + _1062;
        float _3100 = cbLight._m0[_3078].z + _1063;
        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
        float _3105 = _3104 * _3098;
        float _3106 = _3104 * _3099;
        float _3107 = _3104 * _3100;
        float _3108 = dot(vec3(_982, _983, _984), vec3(cbLight._m0[_3078].xyz));
        float _5064 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3111 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
        float _3112 = dot(vec3(_982, _983, _984), vec3(_3105, _3106, _3107));
        float _5075 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
        float _3115 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
        float _3116 = dot(vec3(cbLight._m0[_3078].xyz), vec3(_3105, _3106, _3107));
        float _5086 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
        float _3120 = _3097 * _3097;
        float _3124 = ((_3115 * _3115) * (_3120 + (-1.0))) + 1.0;
        float _3131 = exp2(log2(1.0 - (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0)))) * 5.0);
        float _3138 = 1.0 - _3097;
        float _3148 = (0.5 / (((_2765 * ((_3111 * _3138) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_2765 * _3138) + _3097) * _3111))) * _3111;
        float _5097 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
        float _3150 = (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3120 / ((_3124 * _3124) * 3.141590118408203125));
        float _3151 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
        _3067 = (((((_3131 * _2787) + _1143) * cbLight._m0[_3082].x) * _3150) * _3151) + _2957;
        _3069 = (((((_3131 * _2789) + _1145) * cbLight._m0[_3082].y) * _3150) * _3151) + _2959;
        _3071 = (((((_3131 * _2790) + _1146) * cbLight._m0[_3082].z) * _3150) * _3151) + _2961;
    }
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    float _3225;
    float _3227;
    if (_2487.y == 0u)
    {
        uvec4 _3172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3173 = _3172.x;
        uint _3184 = uint((float(_3172.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1082) / _3173))) + floor(float(uint(cbSceneParam._m0[85u].x * _1081) / _3173)));
        float _3194 = (log2(_2265 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3195 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
        uint _3198 = uint(isnan(14.0) ? _3195 : (isnan(_3195) ? 14.0 : min(_3195, 14.0)));
        uvec4 _3203 = texelFetch(g_lightClusterGridBuffer, int(((_3198 << 2u) + (_3184 << 6u)) >> 2u));
        uint _3204 = _3203.x;
        uint _3205 = _3172.z;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        float _3294;
        if (((((1u << ((_3205 >> 4u) & 15u)) + 4294967295u) & _3204) == 0u) || ((_3205 & 240u) == 0u))
        {
            _3284 = 0.0;
            _3286 = 0.0;
            _3288 = 0.0;
            _3290 = 0.0;
            _3292 = 0.0;
            _3294 = 0.0;
        }
        else
        {
            float _3285;
            float _3287;
            float _3289;
            float _3291;
            float _3293;
            float _3295;
            float _3436 = 0.0;
            float _3437 = 0.0;
            float _3438 = 0.0;
            float _3439 = 0.0;
            float _3440 = 0.0;
            float _3441 = 0.0;
            uint _3442 = 0u;
            uint _3451;
            bool _3452;
            for (;;)
            {
                _3451 = texelFetch(g_lightClassification, int((((_3198 << 5u) + (_3184 << 9u)) + (_3442 << 2u)) >> 2u)).x;
                _3452 = _3451 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3452)
                {
                    frontier_phi_71_pred = _3441;
                    frontier_phi_71_pred_1 = _3440;
                    frontier_phi_71_pred_2 = _3439;
                    frontier_phi_71_pred_3 = _3438;
                    frontier_phi_71_pred_4 = _3437;
                    frontier_phi_71_pred_5 = _3436;
                }
                else
                {
                    float _3581;
                    float _3582;
                    float _3583;
                    float _3584;
                    float _3585;
                    float _3586;
                    uint _3587;
                    _3581 = _3436;
                    _3582 = _3437;
                    _3583 = _3438;
                    _3584 = _3439;
                    _3585 = _3440;
                    _3586 = _3441;
                    _3587 = _3451;
                    float _3508;
                    float _3509;
                    float _3510;
                    float _3511;
                    float _3512;
                    float _3513;
                    for (;;)
                    {
                        uint _3591 = uint(findLSB(_3587)) + (_3442 << 5u);
                        uint _3588 = (_3587 + 4294967295u) & _3587;
                        uint _3593 = _3591 * 48u;
                        vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3593)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3593 + 3u)).x));
                        uint _3613 = (_3591 * 48u) + 4u;
                        vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3613)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3613 + 3u)).x));
                        uint _3632 = (_3591 * 48u) + 8u;
                        vec3 _3643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3632)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 2u)).x));
                        float _3647 = _3607.x - _2263;
                        float _3648 = _3607.y - _2264;
                        float _3649 = _3607.z - _2265;
                        float _3650 = dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649));
                        float _3653 = inversesqrt(_3650);
                        float _3654 = _3653 * _3647;
                        float _3655 = _3653 * _3648;
                        float _3656 = _3653 * _3649;
                        float _3657 = dot(vec3(_1100, _1103, _1106), vec3(_3654, _3655, _3656));
                        float _3662 = 1.0 - (_3650 * _3607.w);
                        float _5123 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                        float _3663 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                        float _3664 = sqrt(_3650) * _3626.w;
                        float _3667 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                        float _3668 = _3667 * _3667;
                        float _3671 = ((1.0 - _3668) * _3657) + _3668;
                        float _3674 = _3664 * _3664;
                        float _3678 = ((isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0))) * _3663) / ((_3674 * 0.699999988079071044921875) + 1.0);
                        float _3682 = (-0.0) - _2263;
                        float _3683 = (-0.0) - _2264;
                        float _3684 = (-0.0) - _2265;
                        float _3688 = inversesqrt(dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684)));
                        float _3689 = _3688 * _3682;
                        float _3690 = _3688 * _3683;
                        float _3691 = _3688 * _3684;
                        float _3698 = exp2(log2(1.0 / ((_3674 * 3.5) + 5.0)) * 0.25);
                        float _3699 = 1.0 - _1175;
                        float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                        float _3707 = _3706 * _3706;
                        float _3708 = _3707 * _3707;
                        float _3709 = _3689 + _3654;
                        float _3710 = _3690 + _3655;
                        float _3711 = _3691 + _3656;
                        float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                        float _3719 = dot(vec3(_1100, _1103, _1106), vec3(_3689, _3690, _3691));
                        float _5139 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3722 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                        float _3723 = dot(vec3(_1100, _1103, _1106), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                        float _5150 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                        float _3726 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                        float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                        float _3731 = _3667 * _3707;
                        float _3732 = _3731 * _3731;
                        float _3735 = ((1.0 - _3732) * _3657) + _3732;
                        float _5161 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                        float _3736 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                        float _3737 = 1.0 - _3707;
                        float _3747 = (0.5 / (((_3736 * ((_3722 * _3737) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3736 * _3737) + _3707) * _3722))) * _3736;
                        float _5172 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                        float _3758 = (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0)))) / ((_3730 * _3730) * ((_3674 * 2.1991131305694580078125) + 3.141590118408203125))) * _3663;
                        _3511 = (_3678 * _3626.x) + _3584;
                        _3512 = (_3678 * _3626.y) + _3585;
                        _3513 = (_3678 * _3626.z) + _3586;
                        _3508 = (_3758 * _3643.x) + _3581;
                        _3509 = (_3758 * _3643.y) + _3582;
                        _3510 = (_3758 * _3643.z) + _3583;
                        if (_3588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3581 = _3508;
                            _3582 = _3509;
                            _3583 = _3510;
                            _3584 = _3511;
                            _3585 = _3512;
                            _3586 = _3513;
                            _3587 = _3588;
                        }
                    }
                    frontier_phi_71_pred = _3513;
                    frontier_phi_71_pred_1 = _3512;
                    frontier_phi_71_pred_2 = _3511;
                    frontier_phi_71_pred_3 = _3510;
                    frontier_phi_71_pred_4 = _3509;
                    frontier_phi_71_pred_5 = _3508;
                }
                _3295 = frontier_phi_71_pred;
                _3293 = frontier_phi_71_pred_1;
                _3291 = frontier_phi_71_pred_2;
                _3289 = frontier_phi_71_pred_3;
                _3287 = frontier_phi_71_pred_4;
                _3285 = frontier_phi_71_pred_5;
                uint _3443 = _3442 + 1u;
                if (_3443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3436 = _3285;
                    _3437 = _3287;
                    _3438 = _3289;
                    _3439 = _3291;
                    _3440 = _3293;
                    _3441 = _3295;
                    _3442 = _3443;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3284 = _3285;
            _3286 = _3287;
            _3288 = _3289;
            _3290 = _3291;
            _3292 = _3293;
            _3294 = _3295;
        }
        uvec4 _3298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3299 = _3298.z;
        uint _3301 = (_3299 >> 8u) & 15u;
        float _3404;
        float _3406;
        float _3408;
        float _3410;
        float _3412;
        float _3414;
        if (((4294967295u << _3301) & _3204) == 0u)
        {
            _3404 = _3284;
            _3406 = _3286;
            _3408 = _3288;
            _3410 = _3290;
            _3412 = _3292;
            _3414 = _3294;
        }
        else
        {
            float _3429 = inversesqrt(dot(vec3(_2263, _2264, _2265), vec3(_2263, _2264, _2265)));
            float _3430 = _3429 * _2263;
            float _3431 = _3429 * _2264;
            float _3432 = _3429 * _2265;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3301 < ((_3299 >> 12u) & 15u))
            {
                float _3405;
                float _3407;
                float _3409;
                float _3411;
                float _3413;
                float _3415;
                float _3564 = _3284;
                float _3565 = _3286;
                float _3566 = _3288;
                float _3567 = _3290;
                float _3568 = _3292;
                float _3569 = _3294;
                uint _3570 = _3301;
                uint _3579;
                bool _3580;
                for (;;)
                {
                    _3579 = texelFetch(g_lightClassification, int((((_3198 << 5u) + (_3184 << 9u)) + (_3570 << 2u)) >> 2u)).x;
                    _3580 = _3579 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3580)
                    {
                        frontier_phi_82_pred = _3569;
                        frontier_phi_82_pred_1 = _3568;
                        frontier_phi_82_pred_2 = _3567;
                        frontier_phi_82_pred_3 = _3566;
                        frontier_phi_82_pred_4 = _3565;
                        frontier_phi_82_pred_5 = _3564;
                    }
                    else
                    {
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _4065;
                        float _4066;
                        float _4067;
                        float _4068;
                        float _4069;
                        float _4070;
                        float _3785 = _3564;
                        float _3786 = _3565;
                        float _3787 = _3566;
                        float _3788 = _3567;
                        float _3789 = _3568;
                        float _3790 = _3569;
                        uint _3791 = _3579;
                        uint _3792;
                        vec4 _3817;
                        float _3818;
                        vec4 _3833;
                        vec3 _3845;
                        vec4 _3860;
                        vec4 _3875;
                        float _3921;
                        bool _3922;
                        for (;;)
                        {
                            uint _3802 = ((_3570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3791));
                            _3792 = (_3791 + 4294967295u) & _3791;
                            uint _3804 = _3802 * 40u;
                            _3817 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3804)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3804 + 3u)).x));
                            _3818 = _3817.w;
                            uint _3820 = (_3802 * 40u) + 4u;
                            _3833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3820 + 3u)).x));
                            uint _3835 = (_3802 * 40u) + 8u;
                            _3845 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3835 + 2u)).x));
                            uint _3847 = (_3802 * 40u) + 16u;
                            _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            uint _3862 = (_3802 * 40u) + 20u;
                            _3875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3862 + 3u)).x));
                            uint _3877 = (_3802 * 40u) + 24u;
                            vec4 _3890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3877 + 3u)).x));
                            uint _3896 = (_3802 * 40u) + 28u;
                            vec4 _3909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3896 + 3u)).x));
                            _3921 = fma(_2265, _3909.z, fma(_2264, _3909.y, _3909.x * _2263)) + _3909.w;
                            _3922 = !((fma(_2265, _3890.z, fma(_2264, _3890.y, _3890.x * _2263)) + _3890.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3922)
                            {
                                float _3949 = _3817.x - _2263;
                                float _3950 = _3817.y - _2264;
                                float _3951 = _3817.z - _2265;
                                float _3952 = dot(vec3(_3949, _3950, _3951), vec3(_3949, _3950, _3951));
                                float _3955 = inversesqrt(_3952);
                                float _3956 = _3955 * _3949;
                                float _3957 = _3955 * _3950;
                                float _3958 = _3955 * _3951;
                                float _3962 = 1.0 - (_3952 / (_3818 * _3818));
                                float _5183 = isnan(0.0) ? _3962 : (isnan(_3962) ? 0.0 : max(_3962, 0.0));
                                float _3963 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                                float _3967 = sqrt(_3952) * _3833.w;
                                float _3969 = 1.39999997615814208984375 / (_3967 + 1.39999997615814208984375);
                                float _3970 = _3969 * _3969;
                                float _3973 = ((1.0 - _3970) * dot(vec3(_3956, _3957, _3958), vec3(_1100, _1103, _1106))) + _3970;
                                float _3976 = _3967 * _3967;
                                float _3980 = (fma(_2265, _3860.z, fma(_2264, _3860.y, _3860.x * _2263)) + _3860.w) / _3921;
                                float _3981 = (fma(_2265, _3875.z, fma(_2264, _3875.y, _3875.x * _2263)) + _3875.w) / _3921;
                                float _3985 = 1.0 - dot(vec2(_3980, _3981), vec2(_3980, _3981));
                                float _5199 = isnan(0.0) ? _3985 : (isnan(_3985) ? 0.0 : max(_3985, 0.0));
                                float _3986 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                                float _3987 = _3986 * (((isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0))) * _3963) / ((_3976 * 0.699999988079071044921875) + 1.0));
                                float _3999 = exp2(log2(1.0 / ((_3976 * 3.5) + 5.0)) * 0.25);
                                float _4000 = 1.0 - _1175;
                                float _4007 = sqrt(1.0 - ((1.0 - (_4000 * _4000)) * (1.0 - (_3999 * _3999))));
                                float _4008 = _4007 * _4007;
                                float _4009 = _4008 * _4008;
                                float _4010 = _3956 - _3430;
                                float _4011 = _3957 - _3431;
                                float _4012 = _3958 - _3432;
                                float _4016 = inversesqrt(dot(vec3(_4010, _4011, _4012), vec3(_4010, _4011, _4012)));
                                float _4020 = dot(vec3(_1100, _1103, _1106), vec3((-0.0) - _3430, (-0.0) - _3431, (-0.0) - _3432));
                                float _5210 = isnan(0.0) ? _4020 : (isnan(_4020) ? 0.0 : max(_4020, 0.0));
                                float _4023 = isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0));
                                float _4024 = dot(vec3(_1100, _1103, _1106), vec3(_4016 * _4010, _4016 * _4011, _4016 * _4012));
                                float _5221 = isnan(0.0) ? _4024 : (isnan(_4024) ? 0.0 : max(_4024, 0.0));
                                float _4027 = isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0));
                                float _4031 = ((_4027 * _4027) * (_4009 + (-1.0))) + 1.0;
                                float _4032 = _3969 * _4008;
                                float _4033 = _4032 * _4032;
                                float _4039 = ((1.0 - _4033) * dot(vec3(_1100, _1103, _1106), vec3(_3956, _3957, _3958))) + _4033;
                                float _5232 = isnan(0.0) ? _4039 : (isnan(_4039) ? 0.0 : max(_4039, 0.0));
                                float _4040 = isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0));
                                float _4041 = 1.0 - _4008;
                                float _4051 = (0.5 / (((_4040 * ((_4023 * _4041) + _4008)) + 9.9999999392252902907785028219223e-09) + (((_4040 * _4041) + _4008) * _4023))) * _4040;
                                float _5243 = isnan(0.0) ? _4051 : (isnan(_4051) ? 0.0 : max(_4051, 0.0));
                                float _4061 = (_3986 * _3963) * (((_4009 * 3.1415927410125732421875) * (isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0)))) / ((_4031 * _4031) * ((_3976 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3987 * _3833.z;
                                frontier_phi_88_pred_1 = _3987 * _3833.y;
                                frontier_phi_88_pred_2 = _3987 * _3833.x;
                                frontier_phi_88_pred_3 = _4061 * _3845.z;
                                frontier_phi_88_pred_4 = _4061 * _3845.y;
                                frontier_phi_88_pred_5 = _4061 * _3845.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4070 = frontier_phi_88_pred;
                            _4069 = frontier_phi_88_pred_1;
                            _4068 = frontier_phi_88_pred_2;
                            _4067 = frontier_phi_88_pred_3;
                            _4066 = frontier_phi_88_pred_4;
                            _4065 = frontier_phi_88_pred_5;
                            _3775 = _4068 + _3788;
                            _3776 = _4069 + _3789;
                            _3777 = _4070 + _3790;
                            _3772 = _4065 + _3785;
                            _3773 = _4066 + _3786;
                            _3774 = _4067 + _3787;
                            if (_3792 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3785 = _3772;
                                _3786 = _3773;
                                _3787 = _3774;
                                _3788 = _3775;
                                _3789 = _3776;
                                _3790 = _3777;
                                _3791 = _3792;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3777;
                        frontier_phi_82_pred_1 = _3776;
                        frontier_phi_82_pred_2 = _3775;
                        frontier_phi_82_pred_3 = _3774;
                        frontier_phi_82_pred_4 = _3773;
                        frontier_phi_82_pred_5 = _3772;
                    }
                    _3415 = frontier_phi_82_pred;
                    _3413 = frontier_phi_82_pred_1;
                    _3411 = frontier_phi_82_pred_2;
                    _3409 = frontier_phi_82_pred_3;
                    _3407 = frontier_phi_82_pred_4;
                    _3405 = frontier_phi_82_pred_5;
                    uint _3571 = _3570 + 1u;
                    if (_3571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3564 = _3405;
                        _3565 = _3407;
                        _3566 = _3409;
                        _3567 = _3411;
                        _3568 = _3413;
                        _3569 = _3415;
                        _3570 = _3571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3411;
                frontier_phi_63_64_ladder_1 = _3415;
                frontier_phi_63_64_ladder_2 = _3413;
                frontier_phi_63_64_ladder_3 = _3409;
                frontier_phi_63_64_ladder_4 = _3407;
                frontier_phi_63_64_ladder_5 = _3405;
            }
            else
            {
                frontier_phi_63_64_ladder = _3290;
                frontier_phi_63_64_ladder_1 = _3294;
                frontier_phi_63_64_ladder_2 = _3292;
                frontier_phi_63_64_ladder_3 = _3288;
                frontier_phi_63_64_ladder_4 = _3286;
                frontier_phi_63_64_ladder_5 = _3284;
            }
            _3404 = frontier_phi_63_64_ladder_5;
            _3406 = frontier_phi_63_64_ladder_4;
            _3408 = frontier_phi_63_64_ladder_3;
            _3410 = frontier_phi_63_64_ladder;
            _3412 = frontier_phi_63_64_ladder_2;
            _3414 = frontier_phi_63_64_ladder_1;
        }
        float _3419 = isnan(1.0) ? _1159 : (isnan(_1159) ? 1.0 : min(_1159, 1.0));
        _3217 = (_3419 * _3410) + _2729;
        _3219 = (_3419 * _3412) + _2731;
        _3221 = (_3419 * _3414) + _2733;
        _3223 = ((_3404 * _1143) * _3419) + _3067;
        _3225 = ((_3406 * _1145) * _3419) + _3069;
        _3227 = ((_3408 * _1146) * _3419) + _3071;
    }
    else
    {
        _3217 = _2729;
        _3219 = _2731;
        _3221 = _2733;
        _3223 = _3067;
        _3225 = _3069;
        _3227 = _3071;
    }
    float _5259 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _5270 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _5281 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
    float _3244 = ((isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0))) * (_3217 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1159))) + ((_3223 + ((isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0))) * _1997)) * cbPerFrame._m0[3u].x);
    float _3245 = ((isnan(1.0) ? _5270 : (isnan(_5270) ? 1.0 : min(_5270, 1.0))) * (_3219 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1159))) + ((_3225 + ((isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0))) * _1997)) * cbPerFrame._m0[3u].x);
    float _3246 = ((isnan(1.0) ? _5281 : (isnan(_5281) ? 1.0 : min(_5281, 1.0))) * (_3221 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1159))) + ((_3227 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _1997)) * cbPerFrame._m0[3u].x);
    uint _3247 = _269 + 6u;
    float _3255 = _1081 / cbSceneParam._m0[86u].x;
    float _3256 = _1082 / cbSceneParam._m0[86u].y;
    vec4 _3270 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3255, _3256, (log2((isnan(cbSceneParam._m0[77u].w) ? _1004 : (isnan(_1004) ? cbSceneParam._m0[77u].w : min(_1004, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3272 = _3270.x;
    float _3273 = _3270.y;
    float _3274 = _3270.z;
    float _3275 = _3270.w;
    float _3346;
    float _3348;
    float _3350;
    float _3352;
    if (_1004 > cbSceneParam._m0[78u].w)
    {
        float _3309 = isnan(_1004) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1004 : min(cbSceneParam._m0[80u].w, _1004));
        float _3310 = _3309 / _1004;
        float _3321 = _3310 * _1054;
        float _3322 = _1055 * _3310;
        float _3323 = (-0.0) - _3322;
        float _3324 = _3310 * _1056;
        float _3326 = (cbSceneParam._m0[77u].w * _3323) / _3309;
        float _3327 = _3326 + cbSceneParam._m0[79u].w;
        float _3328 = cbSceneParam._m0[79u].w - _3322;
        float _3334 = sqrt(((_3321 * _3321) + (_3322 * _3322)) + (_3324 * _3324));
        float _3337 = (1.0 - (cbSceneParam._m0[77u].w / _3309)) * _3334;
        float _3342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3521;
        if (abs((_3323 - _3326) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3521 = ((((_3327 > 0.0) ? exp2(_3342 * _3327) : (2.0 - exp2(_3344 * _3327))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3337;
        }
        else
        {
            float _3465 = 1.0 / cbSceneParam._m0[80u].x;
            float _3466 = isnan(_3328) ? _3327 : (isnan(_3327) ? _3328 : max(_3327, _3328));
            float _3467 = isnan(_3328) ? _3327 : (isnan(_3327) ? _3328 : min(_3327, _3328));
            float _3476 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : min(_3466, 0.0));
            float _3477 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : min(_3467, 0.0));
            _3521 = ((abs(_3334 / _3323) * cbSceneParam._m0[80u].y) * ((((_3476 - _3477) * 2.0) - ((exp2(_3342 * (isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0)))) - exp2(_3342 * (isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))))) * _3465)) - ((exp2(_3344 * _3476) - exp2(_3344 * _3477)) * _3465))) + (_3337 * cbSceneParam._m0[80u].z);
        }
        vec4 _3523 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3255, _3256, 1.0), 0.0);
        float _3532 = exp2((_3521 * (-1.44269502162933349609375)) * (1.0 - _3523.w));
        float _3533 = log2(_3532);
        float _3549 = log2(_3275);
        _3346 = (exp2(_3549 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3533 * cbSceneParam._m0[78u].x)) * _3523.x) / cbSceneParam._m0[78u].x)) + _3272;
        _3348 = (exp2(_3549 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3533 * cbSceneParam._m0[78u].y)) * _3523.y) / cbSceneParam._m0[78u].y)) + _3273;
        _3350 = (exp2(_3549 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3533 * cbSceneParam._m0[78u].z)) * _3523.z) / cbSceneParam._m0[78u].z)) + _3274;
        _3352 = _3532 * _3275;
    }
    else
    {
        _3346 = _3272;
        _3348 = _3273;
        _3350 = _3274;
        _3352 = _3275;
    }
    bool _3559;
    vec4 _3362;
    vec4 _3384;
    float _3386;
    float _3390;
    float _3391;
    float _3392;
    float _3393;
    bool _3403;
    for (;;)
    {
        _3362 = cbMatDynParam._m0[0u];
        float _3364 = roundEven(_3362.y);
        bool _3365 = _3364 == 3.0;
        float _3366 = log2(_3352);
        float _3373 = exp2(_3366 * cbSceneParam._m0[78u].x) * _3244;
        float _3374 = exp2(_3366 * cbSceneParam._m0[78u].y) * _3245;
        float _3375 = exp2(_3366 * cbSceneParam._m0[78u].z) * _3246;
        float _3382 = _1070 + (-0.5);
        _3384 = cbMtdParam._m0[1u];
        _3386 = _3384.y * _3382;
        float _3389 = (_3364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3390 = _3389 * (_3365 ? _3373 : (_3373 + (cbSceneParam._m0[72u].w * _3346)));
        _3391 = _3389 * (_3365 ? _3374 : (_3374 + (cbSceneParam._m0[72u].w * _3348)));
        _3392 = _3389 * (_3365 ? _3375 : (_3375 + (cbSceneParam._m0[72u].w * _3350)));
        _3393 = _3382 * 0.999000012874603271484375;
        _3403 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3403)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3393) < 0.5)
            {
                _3559 = true;
                break;
            }
        }
        uint _3500 = _1119 + uint(_3362.w);
        if ((cbInstanceData._m0[_3500].w < 1.0) && ((cbInstanceData._m0[_3500].w + _3393) < 0.5))
        {
            _3559 = true;
            break;
        }
        if ((_3386 + 1.0) < _3384.x)
        {
            _3559 = true;
            break;
        }
        _3559 = false;
        break;
    }
    float _3763;
    if (_3559)
    {
        discard_state = true;
        _3763 = 0.0;
    }
    else
    {
        _3763 = cbInstanceData._m0[_3247].w;
    }
    SV_Target.x = _3390;
    SV_Target.y = _3391;
    SV_Target.z = _3392;
    SV_Target.w = _3763;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3247].w;
    discard_exit();
}


