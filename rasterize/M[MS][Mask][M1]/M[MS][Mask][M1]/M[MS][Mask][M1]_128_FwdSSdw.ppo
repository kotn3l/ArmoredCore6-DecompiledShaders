#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1697;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _259 = _258 * _250;
    float _260 = _258 * _251;
    float _261 = _258 * _252;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4044 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4055 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4066 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[23u].w) + _448) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4077 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _473 = (_466 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _474 = (_466 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _475 = (_466 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _514 = _512.x;
    float _524 = dot(vec4(_514, _512.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _538 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_514 - _524) * cbMtdParam._m0[23u].w) + _524) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4088 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _546 = (_539 * ((_492.x * cbMtdParam._m0[13u].x) - _473)) + _473;
    float _547 = (_539 * ((_492.y * cbMtdParam._m0[13u].y) - _474)) + _474;
    float _548 = (_539 * ((_492.z * cbMtdParam._m0[13u].z) - _475)) + _475;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _586 = _584.x;
    float _596 = dot(vec4(_586, _584.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _608 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _399.z) * 2.0) - ((((_586 - _596) * cbMtdParam._m0[23u].w) + _596) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4099 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _616 = (_609 * ((_567.x * cbMtdParam._m0[14u].x) - _546)) + _546;
    float _617 = (_609 * ((_567.y * cbMtdParam._m0[14u].y) - _547)) + _547;
    float _618 = (_609 * ((_567.z * cbMtdParam._m0[14u].z) - _548)) + _548;
    float _622 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _616;
    float _625 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _617;
    float _628 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _618;
    float _635 = ((_616 - _622) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) + _622;
    float _636 = ((_617 - _625) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) + _625;
    float _637 = ((_618 - _628) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) + _628;
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _698 = _696.x;
    float _699 = _696.y;
    float _700 = _696.z;
    float _707 = ((_679.x - _698) * _466) + _698;
    float _708 = ((_679.y - _699) * _466) + _699;
    float _709 = ((_679.z - _700) * _466) + _700;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _732 = ((_721.x - _707) * _539) + _707;
    float _733 = ((_721.y - _708) * _539) + _708;
    float _734 = ((_721.z - _709) * _539) + _709;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _759 = ((_746.z - _734) * _609) + _734;
    float _762 = ((((_746.x - _732) * _609) + _732) * 2.0) + (-1.0);
    float _763 = ((((_746.y - _733) * _609) + _733) * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _4110 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _769 = sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))));
    vec4 _787 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _799 = (_762 + ((((_654.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_787.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _800 = (_763 + ((((_654.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_787.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _803 = fma(_769, _266, fma(_800, _273, _799 * _259));
    float _806 = fma(_769, _267, fma(_800, _274, _799 * _260));
    float _809 = fma(_769, _268, fma(_800, _275, _799 * _261));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _842 = _840.x;
    float _843 = 1.0 - _842;
    float _851 = (cbMtdParam._m0[19u].x + dot(vec4(_813 * _803, _813 * _806, _813 * _809, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_842 - _843) * cbMtdParam._m0[24u].z) + _843) * cbMtdParam._m0[21u].z);
    float _4121 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _852 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _854 = (-0.0) - cbMtdParam._m0[24u].x;
    float _856 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
    float _864 = _852 - ((_852 * TEXCOORD_8.x) * _857);
    float _865 = _852 - ((_852 * TEXCOORD_8.y) * _857);
    float _866 = _852 - ((_852 * TEXCOORD_8.z) * _857);
    float _873 = (_864 * (cbMtdParam._m0[17u].x - _635)) + _635;
    float _874 = (_865 * (cbMtdParam._m0[17u].y - _636)) + _636;
    float _875 = (_866 * (cbMtdParam._m0[17u].z - _637)) + _637;
    float _890 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _891 = _890 * TEXCOORD.z;
    float _892 = _890 * TEXCOORD.w;
    vec4 _904 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _891) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _892) + cbTextureTilingScale._m0[19u].w));
    float _906 = _904.x;
    float _907 = 1.0 - _906;
    float _933 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_906 - _907) * cbMtdParam._m0[24u].w) + _907) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4142 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _934 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _942 = ((((cbMtdParam._m0[10u].x - _873) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _934) + _873;
    float _943 = ((((cbMtdParam._m0[10u].y - _874) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _934) + _874;
    float _944 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _875)) * _934) + _875;
    vec4 _970 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _972 = _970.x;
    float _990 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _972) * _466) + _972;
    float _1007 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _990) * _539) + _990;
    float _1024 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _316) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _317) + cbTextureTilingScale._m0[10u].w)).x - _1007) * _609) + _1007;
    float _1030 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1024) * cbMtdParam._m0[19u].z) + _1024;
    float _1032 = _1030 - (_1030 * _864);
    float _1034 = _1032 - (_1032 * _934);
    float _1039 = (((_654.z - _759) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _759;
    float _1043 = ((_787.z - _1039) * cbMtdParam._m0[19u].w) + _1039;
    vec4 _1059 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _1066 = (_1059.x * 2.0) + (-1.0);
    float _1067 = (_1059.y * 2.0) + (-1.0);
    float _1068 = dot(vec2(_1066, _1067), vec2(_1066, _1067));
    float _4153 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1076 = ((_1059.z - _1043) * _864) + _1043;
    float _1079 = ((cbMtdParam._m0[23u].x - _1076) * _934) + _1076;
    vec4 _1102 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _891) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _892) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1108 = (_1102.x * 2.0) + (-1.0);
    float _1109 = (_1102.y * 2.0) + (-1.0);
    float _1110 = dot(vec2(_1108, _1109), vec2(_1108, _1109));
    float _4164 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1125 = ((sqrt(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) - _769) * _866) + _769;
    float _1128 = (((_1066 - _799) * _864) + _799) + (cbMtdParam._m0[21u].x * _799);
    float _1129 = (((_1067 - _800) * _865) + _800) + (cbMtdParam._m0[21u].x * _800);
    float _1140 = (((_1108 - _1128) + (_1128 * cbMtdParam._m0[22u].z)) * _934) + _1128;
    float _1141 = (((_1109 - _1129) + (_1129 * cbMtdParam._m0[22u].z)) * _934) + _1129;
    float _1142 = (_934 * (sqrt(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) - _1125)) + _1125;
    float _1144 = cbMtdParam._m0[22u].x + _787.w;
    float _1147 = fma(_1142, _266, fma(_1141, _273, _1140 * _259));
    float _1150 = fma(_1142, _267, fma(_1141, _274, _1140 * _260));
    float _1153 = fma(_1142, _268, fma(_1141, _275, _1140 * _261));
    float _1157 = inversesqrt(dot(vec3(_1147, _1150, _1153), vec3(_1147, _1150, _1153)));
    float _1158 = _1157 * _1147;
    float _1159 = _1157 * _1150;
    float _1160 = _1157 * _1153;
    float _4175 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1161 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _4186 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _4197 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _4208 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4219 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4230 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1166 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _1180 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1220 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1230 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1220);
    float _1231 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1220);
    float _1232 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1220);
    float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
    float _1237 = _1230 * _1236;
    float _1238 = _1231 * _1236;
    float _1239 = _1232 * _1236;
    float _1245 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1246 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1264 = fma(_1160, cbSceneParam._m0[5u].z, fma(_1159, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1158));
    float _1267 = fma(_1160, cbSceneParam._m0[6u].z, fma(_1159, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1158));
    float _1270 = fma(_1160, cbSceneParam._m0[7u].z, fma(_1159, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1158));
    uint _1284 = (_297 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1290 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * cbInstanceData._m0[_1284].x;
    float _1291 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * cbInstanceData._m0[_1284].y;
    float _1292 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * cbInstanceData._m0[_1284].z;
    float _4241 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _1293 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _4252 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1294 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
    float _1295 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _1296 = 1.0 - _1166;
    float _1297 = _1293 * _1296;
    float _1298 = _1294 * _1296;
    float _1299 = _1295 * _1296;
    float _1304 = (_1293 + (-0.039999999105930328369140625)) * _1166;
    float _1305 = (_1294 + (-0.039999999105930328369140625)) * _1166;
    float _1306 = (_1295 + (-0.039999999105930328369140625)) * _1166;
    float _1307 = _1304 + 0.039999999105930328369140625;
    float _1309 = _1305 + 0.039999999105930328369140625;
    float _1310 = _1306 + 0.039999999105930328369140625;
    vec4 _1319 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1245, cbSceneParam._m0[86u].y * _1246));
    float _1323 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * TEXCOORD_5.w) * _1319.x;
    float _1324 = dot(vec3(_1158, _1159, _1160), vec3(_1237, _1238, _1239));
    float _1327 = _1324 * 2.0;
    float _1331 = (_1327 * _1158) - _1237;
    float _1332 = (_1327 * _1159) - _1238;
    float _1333 = (_1327 * _1160) - _1239;
    float _1337 = abs(dot(vec3(_1237, _1238, _1239), vec3(_1158, _1159, _1160)));
    float _4274 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1339 = sqrt(_1161);
    float _1352 = exp2((_1339 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1339 * 3.0));
    float _1358 = (1.0 - _1352) * ((_1339 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1359 = _1352 * _1339;
    float _1387 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1391 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1395 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1696;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1421 = fma(_1395, cbModelParam._m0[26u].z, fma(_1391, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1387));
        float _1425 = fma(_1395, cbModelParam._m0[27u].z, fma(_1391, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1387));
        float _1429 = fma(_1395, cbModelParam._m0[28u].z, fma(_1391, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1387));
        float _1454 = _1387 + _1158;
        float _1455 = _1391 + _1159;
        float _1456 = _1395 + _1160;
        float _1466 = fma(_1456, cbModelParam._m0[26u].z, fma(_1455, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1454)) - _1421;
        float _1467 = fma(_1456, cbModelParam._m0[27u].z, fma(_1455, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1454)) - _1425;
        float _1468 = fma(_1456, cbModelParam._m0[28u].z, fma(_1455, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1454)) - _1429;
        float _1472 = inversesqrt(dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468)));
        float _1485 = ((_1472 * _1466) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1421 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1472 * _1467) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1425 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1487 = ((_1472 * _1468) / cbModelParam._m0[34u].z) + ((((((_1429 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        vec4 _1511 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1485, _1486, _1487), 0.0);
        float _1524 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1490.x + (-0.5));
        float _1526 = _1524 * (_1490.y + (-0.5));
        float _1527 = _1524 * (_1490.z + (-0.5));
        float _1534 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1497.x + (-0.5));
        float _1536 = _1534 * (_1497.y + (-0.5));
        float _1537 = _1534 * (_1497.z + (-0.5));
        float _1544 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1545 = _1544 * (_1504.x + (-0.5));
        float _1546 = _1544 * (_1504.y + (-0.5));
        float _1547 = _1544 * (_1504.z + (-0.5));
        float _1554 = exp2((_1511.w + (-0.5)) * 20.0) * 2.0;
        float _1555 = _1554 * (_1511.x + (-0.5));
        float _1556 = _1554 * (_1511.y + (-0.5));
        float _1557 = _1554 * (_1511.z + (-0.5));
        float _1558 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = _1525 * 0.5;
        float _1562 = _1535 * 0.5;
        float _1563 = _1545 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1578 = (dot(vec3(_1158, _1159, _1160), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1588 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1558 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4322 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1590 + 1.0))) + _1595) * _1558;
        float _1605 = _1526 * 0.5;
        float _1606 = _1536 * 0.5;
        float _1607 = _1546 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_1158, _1159, _1160), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4355 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1632 + 1.0))) + _1637) * _1559;
        float _1647 = _1527 * 0.5;
        float _1648 = _1537 * 0.5;
        float _1649 = _1547 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_1158, _1159, _1160), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4388 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1674 + 1.0))) + _1679) * _1560;
        _1696 = _1527;
        _1698 = _1526;
        _1699 = _1525;
        _1700 = _1537;
        _1701 = _1536;
        _1702 = _1535;
        _1703 = _1547;
        _1704 = _1546;
        _1705 = _1545;
        _1706 = _1560;
        _1707 = _1559;
        _1708 = _1558;
        _1709 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1710 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
        _1711 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
    }
    else
    {
        _1696 = _1697;
        _1698 = _1697;
        _1699 = _1697;
        _1700 = _1697;
        _1701 = _1697;
        _1702 = _1697;
        _1703 = _1697;
        _1704 = _1697;
        _1705 = _1697;
        _1706 = _1697;
        _1707 = _1697;
        _1708 = _1697;
        _1709 = 0.0;
        _1710 = 0.0;
        _1711 = 0.0;
    }
    float _2003;
    float _2004;
    float _2005;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1734 = fma(_1395, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1387));
        float _1738 = fma(_1395, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1387));
        float _1742 = fma(_1395, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1387));
        float _1765 = _1387 + _1158;
        float _1766 = _1391 + _1159;
        float _1767 = _1395 + _1160;
        float _1777 = fma(_1767, cbModelParam._m0[30u].z, fma(_1766, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1765)) - _1734;
        float _1778 = fma(_1767, cbModelParam._m0[31u].z, fma(_1766, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1765)) - _1738;
        float _1779 = fma(_1767, cbModelParam._m0[32u].z, fma(_1766, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1765)) - _1742;
        float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
        float _1796 = ((_1783 * _1777) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1734 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1797 = ((_1783 * _1778) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1738 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1798 = ((_1783 * _1779) / cbModelParam._m0[35u].z) + ((((((_1742 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1800 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1796, _1797, _1798), 0.0);
        vec4 _1807 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1796, _1797, _1798), 0.0);
        vec4 _1814 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1796, _1797, _1798), 0.0);
        vec4 _1821 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1796, _1797, _1798), 0.0);
        float _1833 = exp2((_1800.w + (-0.5)) * 20.0) * 2.0;
        float _1834 = _1833 * (_1800.x + (-0.5));
        float _1835 = _1833 * (_1800.y + (-0.5));
        float _1836 = _1833 * (_1800.z + (-0.5));
        float _1843 = exp2((_1807.w + (-0.5)) * 20.0) * 2.0;
        float _1844 = _1843 * (_1807.x + (-0.5));
        float _1845 = _1843 * (_1807.y + (-0.5));
        float _1846 = _1843 * (_1807.z + (-0.5));
        float _1853 = exp2((_1814.w + (-0.5)) * 20.0) * 2.0;
        float _1854 = _1853 * (_1814.x + (-0.5));
        float _1855 = _1853 * (_1814.y + (-0.5));
        float _1856 = _1853 * (_1814.z + (-0.5));
        float _1863 = exp2((_1821.w + (-0.5)) * 20.0) * 2.0;
        float _1864 = _1863 * (_1821.x + (-0.5));
        float _1865 = _1863 * (_1821.y + (-0.5));
        float _1866 = _1863 * (_1821.z + (-0.5));
        float _1867 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1868 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1869 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1870 = _1834 * 0.5;
        float _1871 = _1844 * 0.5;
        float _1872 = _1854 * 0.5;
        float _1873 = dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872));
        float _1878 = (_1873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1873);
        float _1886 = (dot(vec3(_1158, _1159, _1160), vec3(_1878 * _1870, _1878 * _1871, _1878 * _1872)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1895 = sqrt(((_1871 * _1871) + (_1870 * _1870)) + (_1872 * _1872)) / (_1867 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1897 = _1896 * 2.0;
        float _1901 = (1.0 - _1896) / (_1896 + 1.0);
        float _4451 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1911 = ((((1.0 - _1902) * (_1897 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1897 + 1.0))) + _1902) * _1867;
        float _1912 = _1835 * 0.5;
        float _1913 = _1845 * 0.5;
        float _1914 = _1855 * 0.5;
        float _1915 = dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914));
        float _1920 = (_1915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1915);
        float _1928 = (dot(vec3(_1158, _1159, _1160), vec3(_1920 * _1912, _1920 * _1913, _1920 * _1914)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1937 = sqrt(((_1913 * _1913) + (_1912 * _1912)) + (_1914 * _1914)) / (_1868 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1939 = _1938 * 2.0;
        float _1943 = (1.0 - _1938) / (_1938 + 1.0);
        float _4484 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1953 = ((((1.0 - _1944) * (_1939 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1939 + 1.0))) + _1944) * _1868;
        float _1954 = _1836 * 0.5;
        float _1955 = _1846 * 0.5;
        float _1956 = _1856 * 0.5;
        float _1957 = dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956));
        float _1962 = (_1957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1957);
        float _1970 = (dot(vec3(_1158, _1159, _1160), vec3(_1962 * _1954, _1962 * _1955, _1962 * _1956)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1979 = sqrt(((_1955 * _1955) + (_1954 * _1954)) + (_1956 * _1956)) / (_1869 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1980 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1981 = _1980 * 2.0;
        float _1985 = (1.0 - _1980) / (_1980 + 1.0);
        float _4517 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1995 = ((((1.0 - _1986) * (_1981 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1981 + 1.0))) + _1986) * _1869;
        _2003 = _1836;
        _2004 = _1835;
        _2005 = _1834;
        _2006 = _1846;
        _2007 = _1845;
        _2008 = _1844;
        _2009 = _1856;
        _2010 = _1855;
        _2011 = _1854;
        _2012 = _1869;
        _2013 = _1868;
        _2014 = _1867;
        _2015 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)));
        _2016 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)));
        _2017 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)));
    }
    else
    {
        _2003 = _1697;
        _2004 = _1697;
        _2005 = _1697;
        _2006 = _1697;
        _2007 = _1697;
        _2008 = _1697;
        _2009 = _1697;
        _2010 = _1697;
        _2011 = _1697;
        _2012 = _1697;
        _2013 = _1697;
        _2014 = _1697;
        _2015 = 0.0;
        _2016 = 0.0;
        _2017 = 0.0;
    }
    float _2027 = (cbModelParam._m0[1u].x * (_2015 - _1709)) + _1709;
    float _2028 = (cbModelParam._m0[1u].x * (_2016 - _1710)) + _1710;
    float _2029 = (cbModelParam._m0[1u].x * (_2017 - _1711)) + _1711;
    float _2050 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2027));
    float _2071 = _1331 * 0.5;
    float _2072 = _1332 * 0.5;
    float _2073 = _1333 * 0.5;
    float _2074 = dot(vec4(_2071, _2072, _2073, 1.0), vec4(_2005, _2008, _2011, _2014));
    float _2077 = dot(vec4(_2071, _2072, _2073, 1.0), vec4(_2004, _2007, _2010, _2013));
    float _2080 = dot(vec4(_2071, _2072, _2073, 1.0), vec4(_2003, _2006, _2009, _2012));
    float _2114;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2087 = dot(vec4(_2071, _2072, _2073, 1.0), vec4(_1696, _1700, _1703, _1706));
        float _2091 = dot(vec4(_2071, _2072, _2073, 1.0), vec4(_1698, _1701, _1704, _1707));
        float _2095 = dot(vec4(_2071, _2072, _2073, 1.0), vec4(_1699, _1702, _1705, _1708));
        float _2102 = dot(vec4(cbModelParam._m0[39u]), vec4(_2071, _2072, _2073, 1.0));
        _2114 = dot(vec3(isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0)), isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0)), isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2102) ? 0.0 : (isnan(0.0) ? _2102 : max(0.0, _2102))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2114 = 1.0;
    }
    float _2125;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2116 = dot(vec4(cbModelParam._m0[40u]), vec4(_2071, _2072, _2073, 1.0));
        _2125 = dot(vec3(isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0)), isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0)), isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2116) ? 0.0 : (isnan(0.0) ? _2116 : max(0.0, _2116))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2125 = 1.0;
    }
    float _2129 = (_2125 * cbModelParam._m0[1u].x) + (_2114 * (1.0 - cbModelParam._m0[1u].x));
    float _2139 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1161);
    float _2140 = isnan(_2139) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2139 : min(cbModelParam._m0[25u].z, _2139));
    float _2220;
    float _2222;
    float _2224;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2187 = fma(_1395, cbModelParam._m0[13u].z, fma(_1391, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1387)) + cbModelParam._m0[13u].w;
        float _2191 = fma(_1395, cbModelParam._m0[14u].z, fma(_1391, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1387)) + cbModelParam._m0[14u].w;
        float _2195 = fma(_1395, cbModelParam._m0[15u].z, fma(_1391, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1387)) + cbModelParam._m0[15u].w;
        float _2198 = fma(_1333, cbModelParam._m0[13u].z, fma(_1332, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1331));
        float _2201 = fma(_1333, cbModelParam._m0[14u].z, fma(_1332, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1331));
        float _2204 = fma(_1333, cbModelParam._m0[15u].z, fma(_1332, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1331));
        float _2232;
        if (_2198 > 0.0)
        {
            _2232 = abs((1.0 - _2187) / _2198);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2187 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2232 = frontier_phi_14_12_ladder;
        }
        float _2456;
        if (_2201 > 0.0)
        {
            _2456 = abs((1.0 - _2191) / _2201);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2191 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2456 = frontier_phi_23_19_ladder;
        }
        float _2713;
        if (_2204 > 0.0)
        {
            _2713 = abs((1.0 - _2195) / _2204);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2195 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2713 = frontier_phi_35_30_ladder;
        }
        float _2715 = isnan(_2456) ? _2232 : (isnan(_2232) ? _2456 : min(_2232, _2456));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _2198) + _2187;
        float _2721 = (_2716 * _2201) + _2191;
        float _2722 = (_2716 * _2204) + _2195;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2723;
        float _2727 = _2723 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 > _2727) || ((_2721 < _2725) || ((_2720 < _2725) || (_2720 > _2727))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2722, cbModelParam._m0[9u].z, fma(_2721, cbModelParam._m0[9u].y, _2720 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2722, cbModelParam._m0[10u].z, fma(_2721, cbModelParam._m0[10u].y, _2720 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2722, cbModelParam._m0[11u].z, fma(_2721, cbModelParam._m0[11u].y, _2720 * cbModelParam._m0[11u].x))), _2140);
            frontier_phi_13_35_ladder = _2850.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2850.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2850.x * cbModelParam._m0[1u].y;
        }
        _2220 = frontier_phi_13_35_ladder_2;
        _2222 = frontier_phi_13_35_ladder_1;
        _2224 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1331, _1332, _1333), _2140);
        _2220 = _2208.x * cbModelParam._m0[1u].y;
        _2222 = _2208.y * cbModelParam._m0[1u].y;
        _2224 = _2208.z * cbModelParam._m0[1u].y;
    }
    float _2228 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1161);
    float _2229 = isnan(_2228) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2228 : min(cbModelParam._m0[25u].w, _2228));
    float _2319;
    float _2321;
    float _2323;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2283 = fma(_1395, cbModelParam._m0[21u].z, fma(_1391, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1387)) + cbModelParam._m0[21u].w;
        float _2287 = fma(_1395, cbModelParam._m0[22u].z, fma(_1391, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1387)) + cbModelParam._m0[22u].w;
        float _2291 = fma(_1395, cbModelParam._m0[23u].z, fma(_1391, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1387)) + cbModelParam._m0[23u].w;
        float _2294 = fma(_1333, cbModelParam._m0[21u].z, fma(_1332, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1331));
        float _2297 = fma(_1333, cbModelParam._m0[22u].z, fma(_1332, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1331));
        float _2300 = fma(_1333, cbModelParam._m0[23u].z, fma(_1332, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1331));
        float _2461;
        if (_2294 > 0.0)
        {
            _2461 = abs((1.0 - _2283) / _2294);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2294 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2283 + 1.0) / _2294);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2461 = frontier_phi_25_21_ladder;
        }
        float _2740;
        if (_2297 > 0.0)
        {
            _2740 = abs((1.0 - _2287) / _2297);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2297 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2287 + 1.0) / _2297);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2740 = frontier_phi_37_32_ladder;
        }
        float _2953;
        if (_2300 > 0.0)
        {
            _2953 = abs((1.0 - _2291) / _2300);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2300 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2291 + 1.0) / _2300);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2953 = frontier_phi_46_43_ladder;
        }
        float _2955 = isnan(_2740) ? _2461 : (isnan(_2461) ? _2740 : min(_2461, _2740));
        float _2956 = isnan(_2953) ? _2955 : (isnan(_2955) ? _2953 : min(_2955, _2953));
        float _2960 = (_2956 * _2294) + _2283;
        float _2961 = (_2956 * _2297) + _2287;
        float _2962 = (_2956 * _2300) + _2291;
        float _2963 = _2956 * 9.9999997473787516355514526367188e-05;
        float _2964 = (-1.0) - _2963;
        float _2966 = _2963 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2962 > _2966) || ((_2962 < _2964) || ((_2961 > _2966) || ((_2961 < _2964) || ((_2960 < _2964) || (_2960 > _2966))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3161 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2962, cbModelParam._m0[17u].z, fma(_2961, cbModelParam._m0[17u].y, _2960 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2962, cbModelParam._m0[18u].z, fma(_2961, cbModelParam._m0[18u].y, _2960 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2962, cbModelParam._m0[19u].z, fma(_2961, cbModelParam._m0[19u].y, _2960 * cbModelParam._m0[19u].x))), _2229);
            frontier_phi_22_46_ladder = _3161.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3161.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3161.x * cbModelParam._m0[1u].z;
        }
        _2319 = frontier_phi_22_46_ladder_2;
        _2321 = frontier_phi_22_46_ladder_1;
        _2323 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2303 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1331, _1332, _1333), _2229);
        _2319 = _2303.x * cbModelParam._m0[1u].z;
        _2321 = _2303.y * cbModelParam._m0[1u].z;
        _2323 = _2303.z * cbModelParam._m0[1u].z;
    }
    float _2336 = (((_1358 * _1307) + _1359) * _1323) * ((cbModelParam._m0[1u].w * (_2319 - _2220)) + _2220);
    float _2338 = (((_1358 * _1309) + _1359) * _1323) * ((cbModelParam._m0[1u].w * (_2321 - _2222)) + _2222);
    float _2340 = (((_1358 * _1310) + _1359) * _1323) * ((cbModelParam._m0[1u].w * (_2323 - _2224)) + _2224);
    float _2343 = fma(_2340, cbSceneParam._m0[89u].z, fma(_2338, cbSceneParam._m0[89u].y, _2336 * cbSceneParam._m0[89u].x));
    float _2346 = fma(_2340, cbSceneParam._m0[90u].z, fma(_2338, cbSceneParam._m0[90u].y, _2336 * cbSceneParam._m0[90u].x));
    float _2349 = fma(_2340, cbSceneParam._m0[91u].z, fma(_2338, cbSceneParam._m0[91u].y, _2336 * cbSceneParam._m0[91u].x));
    vec4 _2357 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1245, _1246));
    float _2359 = _2357.w;
    float _2371 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2359);
    float _2372 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2359);
    float _2373 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2359);
    uvec4 _2377 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2379 = _2377.x * 14u;
    uint _2380 = _2379 + 13u;
    float _2387 = _1323 + (-1.0);
    float _2392 = (cbLight._m0[_2380].x * _2387) + 1.0;
    float _2393 = (cbLight._m0[_2380].y * _2387) + 1.0;
    float _2394 = (cbLight._m0[_2380].z * _2387) + 1.0;
    float _2395 = (cbLight._m0[_2380].w * _2387) + 1.0;
    uint _2396 = _2379 + 5u;
    float _2402 = isnan(1.0) ? _2393 : (isnan(_2393) ? 1.0 : min(_2393, 1.0));
    uint _2406 = _2379 + 4u;
    float _2415 = isnan(1.0) ? _2392 : (isnan(_2392) ? 1.0 : min(_2392, 1.0));
    uint _2419 = _2379 | 1u;
    float _2430 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_1158, _1159, _1160));
    float _2433 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_1158, _1159, _1160));
    float _4653 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _4664 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2438 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2440 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * 0.3183098733425140380859375;
    float _2447 = ((cbLight._m0[_2396].x * _2402) * _2440) + (((cbLight._m0[_2406].x * _2371) * _2415) * _2438);
    float _2448 = ((_2402 * cbLight._m0[_2396].y) * _2440) + (((cbLight._m0[_2406].y * _2372) * _2415) * _2438);
    float _2449 = ((_2402 * cbLight._m0[_2396].z) * _2440) + (((cbLight._m0[_2406].z * _2373) * _2415) * _2438);
    uvec4 _2453 = floatBitsToUint(cbLight._m0[_2379 + 12u]);
    bool _2455 = _2453.x == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2455)
    {
        _2466 = _2447;
        _2468 = _2448;
        _2470 = _2449;
    }
    else
    {
        uint _2474 = _2379 + 6u;
        float _2490 = (dot(vec3(cbLight._m0[_2379 + 2u].xyz), vec3(_1158, _1159, _1160)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4675 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2493 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2466 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2447;
        _2468 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2448;
        _2470 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2449;
    }
    bool _2473 = _2453.y == 0u;
    float _2511;
    float _2513;
    float _2515;
    if (_2473)
    {
        _2511 = _2466;
        _2513 = _2468;
        _2515 = _2470;
    }
    else
    {
        uint _2684 = _2379 + 7u;
        float _2700 = (dot(vec3(cbLight._m0[_2379 + 3u].xyz), vec3(_1158, _1159, _1160)) * 0.5) + 0.5;
        float _2701 = _2700 * _2700;
        float _4691 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2702 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2703 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2511 = (((cbLight._m0[_2684].x * 0.3183098733425140380859375) * _2702) * _2703) + _2466;
        _2513 = (((cbLight._m0[_2684].y * 0.3183098733425140380859375) * _2702) * _2703) + _2468;
        _2515 = (((cbLight._m0[_2684].z * 0.3183098733425140380859375) * _2702) * _2703) + _2470;
    }
    uint _2518 = _2379 + 8u;
    float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _1161) * 0.949999988079071044921875);
    float _2532 = _2531 * _2531;
    float _2533 = cbLight._m0[_2379].x + _1237;
    float _2534 = cbLight._m0[_2379].y + _1238;
    float _2535 = cbLight._m0[_2379].z + _1239;
    float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
    float _2540 = _2539 * _2533;
    float _2541 = _2539 * _2534;
    float _2542 = _2539 * _2535;
    float _2543 = dot(vec3(_1158, _1159, _1160), vec3(cbLight._m0[_2379].xyz));
    float _4707 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _4718 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
    float _2547 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2548 = dot(vec3(_1158, _1159, _1160), vec3(_2540, _2541, _2542));
    float _4729 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2540, _2541, _2542));
    float _4740 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2532 * _2532;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2569 = 0.959999978542327880859375 - _1304;
    float _2571 = 0.959999978542327880859375 - _1305;
    float _2572 = 0.959999978542327880859375 - _1306;
    float _2579 = 1.0 - _2532;
    float _2590 = (0.5 / (((_2547 * ((_2546 * _2579) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2579) + _2532) * _2546))) * _2546;
    float _4751 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2592 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    uint _2606 = _2379 + 9u;
    float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _1161) * 0.949999988079071044921875);
    float _2618 = _2617 * _2617;
    float _2619 = cbLight._m0[_2419].x + _1237;
    float _2620 = cbLight._m0[_2419].y + _1238;
    float _2621 = cbLight._m0[_2419].z + _1239;
    float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
    float _2626 = _2625 * _2619;
    float _2627 = _2625 * _2620;
    float _2628 = _2625 * _2621;
    float _2629 = dot(vec3(_1158, _1159, _1160), vec3(cbLight._m0[_2419].xyz));
    float _4762 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2633 = dot(vec3(_1158, _1159, _1160), vec3(_2626, _2627, _2628));
    float _4773 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2637 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2626, _2627, _2628));
    float _4784 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2641 = _2618 * _2618;
    float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
    float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2659 = 1.0 - _2618;
    float _2669 = (0.5 / (((_2547 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2659) + _2618) * _2632))) * _2632;
    float _4795 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
    float _2681 = (((((_2652 * _2569) + _1307) * cbLight._m0[_2606].x) * _2671) * _2402) + ((((cbLight._m0[_2518].x * _2371) * ((_2568 * _2569) + _1307)) * _2592) * _2415);
    float _2682 = (((((_2652 * _2571) + _1309) * cbLight._m0[_2606].y) * _2671) * _2402) + ((((cbLight._m0[_2518].y * _2372) * ((_2568 * _2571) + _1309)) * _2592) * _2415);
    float _2683 = (((((_2652 * _2572) + _1310) * cbLight._m0[_2606].z) * _2671) * _2402) + ((((cbLight._m0[_2518].z * _2373) * ((_2568 * _2572) + _1310)) * _2592) * _2415);
    float _2745;
    float _2747;
    float _2749;
    if (_2455)
    {
        _2745 = _2681;
        _2747 = _2682;
        _2749 = _2683;
    }
    else
    {
        uint _2751 = _2379 + 2u;
        uint _2755 = _2379 + 10u;
        float _2769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2751].w)) * _1161) * 0.949999988079071044921875);
        float _2770 = _2769 * _2769;
        float _2771 = cbLight._m0[_2751].x + _1237;
        float _2772 = cbLight._m0[_2751].y + _1238;
        float _2773 = cbLight._m0[_2751].z + _1239;
        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
        float _2778 = _2777 * _2771;
        float _2779 = _2777 * _2772;
        float _2780 = _2777 * _2773;
        float _2781 = dot(vec3(_1158, _1159, _1160), vec3(cbLight._m0[_2751].xyz));
        float _4806 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2785 = dot(vec3(_1158, _1159, _1160), vec3(_2778, _2779, _2780));
        float _4817 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
        float _2789 = dot(vec3(cbLight._m0[_2751].xyz), vec3(_2778, _2779, _2780));
        float _4828 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2793 = _2770 * _2770;
        float _2797 = ((_2788 * _2788) * (_2793 + (-1.0))) + 1.0;
        float _2804 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
        float _2811 = 1.0 - _2770;
        float _2821 = (0.5 / (((_2547 * ((_2784 * _2811) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2811) + _2770) * _2784))) * _2784;
        float _4839 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2823 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2793 / ((_2797 * _2797) * 3.141590118408203125));
        float _2824 = isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0));
        _2745 = (((((_2804 * _2569) + _1307) * cbLight._m0[_2755].x) * _2823) * _2824) + _2681;
        _2747 = (((((_2804 * _2571) + _1309) * cbLight._m0[_2755].y) * _2823) * _2824) + _2682;
        _2749 = (((((_2804 * _2572) + _1310) * cbLight._m0[_2755].z) * _2823) * _2824) + _2683;
    }
    float _2859;
    float _2861;
    float _2863;
    if (_2473)
    {
        _2859 = _2745;
        _2861 = _2747;
        _2863 = _2749;
    }
    else
    {
        uint _2870 = _2379 + 3u;
        uint _2874 = _2379 + 11u;
        float _2888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2870].w)) * _1161) * 0.949999988079071044921875);
        float _2889 = _2888 * _2888;
        float _2890 = cbLight._m0[_2870].x + _1237;
        float _2891 = cbLight._m0[_2870].y + _1238;
        float _2892 = cbLight._m0[_2870].z + _1239;
        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
        float _2897 = _2896 * _2890;
        float _2898 = _2896 * _2891;
        float _2899 = _2896 * _2892;
        float _2900 = dot(vec3(_1158, _1159, _1160), vec3(cbLight._m0[_2870].xyz));
        float _4855 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
        float _2903 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2904 = dot(vec3(_1158, _1159, _1160), vec3(_2897, _2898, _2899));
        float _4866 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2908 = dot(vec3(cbLight._m0[_2870].xyz), vec3(_2897, _2898, _2899));
        float _4877 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2912 = _2889 * _2889;
        float _2916 = ((_2907 * _2907) * (_2912 + (-1.0))) + 1.0;
        float _2923 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
        float _2930 = 1.0 - _2889;
        float _2940 = (0.5 / (((_2547 * ((_2903 * _2930) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2930) + _2889) * _2903))) * _2903;
        float _4888 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        float _2942 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2912 / ((_2916 * _2916) * 3.141590118408203125));
        float _2943 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
        _2859 = (((((_2923 * _2569) + _1307) * cbLight._m0[_2874].x) * _2942) * _2943) + _2745;
        _2861 = (((((_2923 * _2571) + _1309) * cbLight._m0[_2874].y) * _2942) * _2943) + _2747;
        _2863 = (((((_2923 * _2572) + _1310) * cbLight._m0[_2874].z) * _2942) * _2943) + _2749;
    }
    float _3078;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_2377.y == 0u)
    {
        float _3018 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3019 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3018;
        float _3020 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3018;
        float _3021 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3018;
        uvec4 _3033 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3034 = _3033.x;
        uint _3045 = uint((float(_3033.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1246) / _3034))) + floor(float(uint(cbSceneParam._m0[85u].x * _1245) / _3034)));
        float _3055 = (log2(_3021 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3056 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
        uint _3059 = uint(isnan(14.0) ? _3056 : (isnan(_3056) ? 14.0 : min(_3056, 14.0)));
        uvec4 _3064 = texelFetch(g_lightClusterGridBuffer, int(((_3059 << 2u) + (_3045 << 6u)) >> 2u));
        uint _3065 = _3064.x;
        uint _3066 = _3033.z;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        if (((((1u << ((_3066 >> 4u) & 15u)) + 4294967295u) & _3065) == 0u) || ((_3066 & 240u) == 0u))
        {
            _3166 = 0.0;
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
        }
        else
        {
            float _3167;
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3177;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            uint _3316 = 0u;
            uint _3325;
            bool _3326;
            for (;;)
            {
                _3325 = texelFetch(g_lightClassification, int((((_3059 << 5u) + (_3045 << 9u)) + (_3316 << 2u)) >> 2u)).x;
                _3326 = _3325 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3326)
                {
                    frontier_phi_61_pred = _3310;
                    frontier_phi_61_pred_1 = _3315;
                    frontier_phi_61_pred_2 = _3314;
                    frontier_phi_61_pred_3 = _3313;
                    frontier_phi_61_pred_4 = _3312;
                    frontier_phi_61_pred_5 = _3311;
                }
                else
                {
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    float _3439;
                    uint _3440;
                    _3434 = _3310;
                    _3435 = _3311;
                    _3436 = _3312;
                    _3437 = _3313;
                    _3438 = _3314;
                    _3439 = _3315;
                    _3440 = _3325;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    for (;;)
                    {
                        uint _3444 = uint(findLSB(_3440)) + (_3316 << 5u);
                        uint _3441 = (_3440 + 4294967295u) & _3440;
                        uint _3446 = _3444 * 48u;
                        vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3446)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3446 + 3u)).x));
                        uint _3466 = (_3444 * 48u) + 4u;
                        vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3466)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3466 + 3u)).x));
                        uint _3485 = (_3444 * 48u) + 8u;
                        vec3 _3496 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3485)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 2u)).x));
                        float _3500 = _3460.x - _3019;
                        float _3501 = _3460.y - _3020;
                        float _3502 = _3460.z - _3021;
                        float _3503 = dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502));
                        float _3506 = inversesqrt(_3503);
                        float _3507 = _3506 * _3500;
                        float _3508 = _3506 * _3501;
                        float _3509 = _3506 * _3502;
                        float _3510 = dot(vec3(_1264, _1267, _1270), vec3(_3507, _3508, _3509));
                        float _3515 = 1.0 - (_3503 * _3460.w);
                        float _4914 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3516 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3517 = sqrt(_3503) * _3479.w;
                        float _3520 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                        float _3521 = _3520 * _3520;
                        float _3524 = ((1.0 - _3521) * _3510) + _3521;
                        float _3527 = _3517 * _3517;
                        float _3531 = ((isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0))) * _3516) / ((_3527 * 0.699999988079071044921875) + 1.0);
                        float _3535 = (-0.0) - _3019;
                        float _3536 = (-0.0) - _3020;
                        float _3537 = (-0.0) - _3021;
                        float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                        float _3542 = _3541 * _3535;
                        float _3543 = _3541 * _3536;
                        float _3544 = _3541 * _3537;
                        float _3552 = exp2(log2(1.0 / ((_3527 * 3.5) + 5.0)) * 0.25);
                        float _3553 = 1.0 - _1339;
                        float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                        float _3561 = _3560 * _3560;
                        float _3562 = _3561 * _3561;
                        float _3563 = _3542 + _3507;
                        float _3564 = _3543 + _3508;
                        float _3565 = _3544 + _3509;
                        float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                        float _3573 = dot(vec3(_1264, _1267, _1270), vec3(_3542, _3543, _3544));
                        float _4930 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                        float _3576 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3577 = dot(vec3(_1264, _1267, _1270), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                        float _4941 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3580 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                        float _3585 = _3520 * _3561;
                        float _3586 = _3585 * _3585;
                        float _3589 = ((1.0 - _3586) * _3510) + _3586;
                        float _4952 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3590 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                        float _3591 = 1.0 - _3561;
                        float _3601 = (0.5 / (((_3590 * ((_3576 * _3591) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3561) * _3576))) * _3590;
                        float _4963 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3612 = (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3584 * _3584) * ((_3527 * 2.1991131305694580078125) + 3.141590118408203125))) * _3516;
                        _3369 = (_3531 * _3479.x) + _3437;
                        _3370 = (_3531 * _3479.y) + _3438;
                        _3371 = (_3531 * _3479.z) + _3439;
                        _3366 = (_3612 * _3496.x) + _3434;
                        _3367 = (_3612 * _3496.y) + _3435;
                        _3368 = (_3612 * _3496.z) + _3436;
                        if (_3441 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3434 = _3366;
                            _3435 = _3367;
                            _3436 = _3368;
                            _3437 = _3369;
                            _3438 = _3370;
                            _3439 = _3371;
                            _3440 = _3441;
                        }
                    }
                    frontier_phi_61_pred = _3366;
                    frontier_phi_61_pred_1 = _3371;
                    frontier_phi_61_pred_2 = _3370;
                    frontier_phi_61_pred_3 = _3369;
                    frontier_phi_61_pred_4 = _3368;
                    frontier_phi_61_pred_5 = _3367;
                }
                _3167 = frontier_phi_61_pred;
                _3177 = frontier_phi_61_pred_1;
                _3175 = frontier_phi_61_pred_2;
                _3173 = frontier_phi_61_pred_3;
                _3171 = frontier_phi_61_pred_4;
                _3169 = frontier_phi_61_pred_5;
                uint _3317 = _3316 + 1u;
                if (_3317 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3310 = _3167;
                    _3311 = _3169;
                    _3312 = _3171;
                    _3313 = _3173;
                    _3314 = _3175;
                    _3315 = _3177;
                    _3316 = _3317;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3166 = _3167;
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
        }
        uvec4 _3180 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3181 = _3180.z;
        uint _3183 = (_3181 >> 8u) & 15u;
        float _3278;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        if (((4294967295u << _3183) & _3065) == 0u)
        {
            _3278 = _3166;
            _3280 = _3168;
            _3282 = _3170;
            _3284 = _3172;
            _3286 = _3174;
            _3288 = _3176;
        }
        else
        {
            float _3303 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
            float _3304 = _3303 * _3019;
            float _3305 = _3303 * _3020;
            float _3306 = _3303 * _3021;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3183 < ((_3181 >> 12u) & 15u))
            {
                float _3279;
                float _3281;
                float _3283;
                float _3285;
                float _3287;
                float _3289;
                float _3417 = _3166;
                float _3418 = _3168;
                float _3419 = _3170;
                float _3420 = _3172;
                float _3421 = _3174;
                float _3422 = _3176;
                uint _3423 = _3183;
                uint _3432;
                bool _3433;
                for (;;)
                {
                    _3432 = texelFetch(g_lightClassification, int((((_3059 << 5u) + (_3045 << 9u)) + (_3423 << 2u)) >> 2u)).x;
                    _3433 = _3432 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3433)
                    {
                        frontier_phi_67_pred = _3420;
                        frontier_phi_67_pred_1 = _3421;
                        frontier_phi_67_pred_2 = _3422;
                        frontier_phi_67_pred_3 = _3419;
                        frontier_phi_67_pred_4 = _3418;
                        frontier_phi_67_pred_5 = _3417;
                    }
                    else
                    {
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3630 = _3417;
                        float _3631 = _3418;
                        float _3632 = _3419;
                        float _3633 = _3420;
                        float _3634 = _3421;
                        float _3635 = _3422;
                        uint _3636 = _3432;
                        uint _3637;
                        vec4 _3662;
                        float _3663;
                        vec4 _3678;
                        vec3 _3690;
                        vec4 _3705;
                        vec4 _3720;
                        float _3766;
                        bool _3767;
                        for (;;)
                        {
                            uint _3647 = ((_3423 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3636));
                            _3637 = (_3636 + 4294967295u) & _3636;
                            uint _3649 = _3647 * 40u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            _3663 = _3662.w;
                            uint _3665 = (_3647 * 40u) + 4u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3647 * 40u) + 8u;
                            _3690 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x));
                            uint _3692 = (_3647 * 40u) + 16u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3707 = (_3647 * 40u) + 20u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3722 = (_3647 * 40u) + 24u;
                            vec4 _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            uint _3741 = (_3647 * 40u) + 28u;
                            vec4 _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            _3766 = fma(_3021, _3754.z, fma(_3020, _3754.y, _3754.x * _3019)) + _3754.w;
                            _3767 = !((fma(_3021, _3735.z, fma(_3020, _3735.y, _3735.x * _3019)) + _3735.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3767)
                            {
                                float _3794 = _3662.x - _3019;
                                float _3795 = _3662.y - _3020;
                                float _3796 = _3662.z - _3021;
                                float _3797 = dot(vec3(_3794, _3795, _3796), vec3(_3794, _3795, _3796));
                                float _3800 = inversesqrt(_3797);
                                float _3801 = _3800 * _3794;
                                float _3802 = _3800 * _3795;
                                float _3803 = _3800 * _3796;
                                float _3807 = 1.0 - (_3797 / (_3663 * _3663));
                                float _4974 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3812 = sqrt(_3797) * _3678.w;
                                float _3814 = 1.39999997615814208984375 / (_3812 + 1.39999997615814208984375);
                                float _3815 = _3814 * _3814;
                                float _3818 = ((1.0 - _3815) * dot(vec3(_3801, _3802, _3803), vec3(_1264, _1267, _1270))) + _3815;
                                float _3821 = _3812 * _3812;
                                float _3825 = (fma(_3021, _3705.z, fma(_3020, _3705.y, _3705.x * _3019)) + _3705.w) / _3766;
                                float _3826 = (fma(_3021, _3720.z, fma(_3020, _3720.y, _3720.x * _3019)) + _3720.w) / _3766;
                                float _3830 = 1.0 - dot(vec2(_3825, _3826), vec2(_3825, _3826));
                                float _4990 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3832 = _3831 * (((isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0))) * _3808) / ((_3821 * 0.699999988079071044921875) + 1.0));
                                float _3844 = exp2(log2(1.0 / ((_3821 * 3.5) + 5.0)) * 0.25);
                                float _3845 = 1.0 - _1339;
                                float _3852 = sqrt(1.0 - ((1.0 - (_3845 * _3845)) * (1.0 - (_3844 * _3844))));
                                float _3853 = _3852 * _3852;
                                float _3854 = _3853 * _3853;
                                float _3855 = _3801 - _3304;
                                float _3856 = _3802 - _3305;
                                float _3857 = _3803 - _3306;
                                float _3861 = inversesqrt(dot(vec3(_3855, _3856, _3857), vec3(_3855, _3856, _3857)));
                                float _3865 = dot(vec3(_1264, _1267, _1270), vec3((-0.0) - _3304, (-0.0) - _3305, (-0.0) - _3306));
                                float _5001 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3868 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3869 = dot(vec3(_1264, _1267, _1270), vec3(_3861 * _3855, _3861 * _3856, _3861 * _3857));
                                float _5012 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3872 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3876 = ((_3872 * _3872) * (_3854 + (-1.0))) + 1.0;
                                float _3877 = _3814 * _3853;
                                float _3878 = _3877 * _3877;
                                float _3884 = ((1.0 - _3878) * dot(vec3(_1264, _1267, _1270), vec3(_3801, _3802, _3803))) + _3878;
                                float _5023 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3885 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3886 = 1.0 - _3853;
                                float _3896 = (0.5 / (((_3885 * ((_3868 * _3886) + _3853)) + 9.9999999392252902907785028219223e-09) + (((_3885 * _3886) + _3853) * _3868))) * _3885;
                                float _5034 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3906 = (_3831 * _3808) * (((_3854 * 3.1415927410125732421875) * (isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0)))) / ((_3876 * _3876) * ((_3821 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3906 * _3690.x;
                                frontier_phi_73_pred_1 = _3906 * _3690.y;
                                frontier_phi_73_pred_2 = _3832 * _3678.z;
                                frontier_phi_73_pred_3 = _3832 * _3678.y;
                                frontier_phi_73_pred_4 = _3832 * _3678.x;
                                frontier_phi_73_pred_5 = _3906 * _3690.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3910 = frontier_phi_73_pred;
                            _3911 = frontier_phi_73_pred_1;
                            _3915 = frontier_phi_73_pred_2;
                            _3914 = frontier_phi_73_pred_3;
                            _3913 = frontier_phi_73_pred_4;
                            _3912 = frontier_phi_73_pred_5;
                            _3620 = _3913 + _3633;
                            _3621 = _3914 + _3634;
                            _3622 = _3915 + _3635;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            if (_3637 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3637;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3620;
                        frontier_phi_67_pred_1 = _3621;
                        frontier_phi_67_pred_2 = _3622;
                        frontier_phi_67_pred_3 = _3619;
                        frontier_phi_67_pred_4 = _3618;
                        frontier_phi_67_pred_5 = _3617;
                    }
                    _3285 = frontier_phi_67_pred;
                    _3287 = frontier_phi_67_pred_1;
                    _3289 = frontier_phi_67_pred_2;
                    _3283 = frontier_phi_67_pred_3;
                    _3281 = frontier_phi_67_pred_4;
                    _3279 = frontier_phi_67_pred_5;
                    uint _3424 = _3423 + 1u;
                    if (_3424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3417 = _3279;
                        _3418 = _3281;
                        _3419 = _3283;
                        _3420 = _3285;
                        _3421 = _3287;
                        _3422 = _3289;
                        _3423 = _3424;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3287;
                frontier_phi_55_56_ladder_1 = _3289;
                frontier_phi_55_56_ladder_2 = _3285;
                frontier_phi_55_56_ladder_3 = _3283;
                frontier_phi_55_56_ladder_4 = _3281;
                frontier_phi_55_56_ladder_5 = _3279;
            }
            else
            {
                frontier_phi_55_56_ladder = _3174;
                frontier_phi_55_56_ladder_1 = _3176;
                frontier_phi_55_56_ladder_2 = _3172;
                frontier_phi_55_56_ladder_3 = _3170;
                frontier_phi_55_56_ladder_4 = _3168;
                frontier_phi_55_56_ladder_5 = _3166;
            }
            _3278 = frontier_phi_55_56_ladder_5;
            _3280 = frontier_phi_55_56_ladder_4;
            _3282 = frontier_phi_55_56_ladder_3;
            _3284 = frontier_phi_55_56_ladder_2;
            _3286 = frontier_phi_55_56_ladder;
            _3288 = frontier_phi_55_56_ladder_1;
        }
        float _3293 = isnan(1.0) ? _1323 : (isnan(_1323) ? 1.0 : min(_1323, 1.0));
        _3078 = (_3293 * _3284) + _2511;
        _3080 = (_3293 * _3286) + _2513;
        _3082 = (_3293 * _3288) + _2515;
        _3084 = ((_3278 * _1307) * _3293) + _2859;
        _3086 = ((_3280 * _1309) * _3293) + _2861;
        _3088 = ((_3282 * _1310) * _3293) + _2863;
    }
    else
    {
        _3078 = _2511;
        _3080 = _2513;
        _3082 = _2515;
        _3084 = _2859;
        _3086 = _2861;
        _3088 = _2863;
    }
    float _5050 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
    float _5061 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _5072 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
    uint _3108 = _297 + 6u;
    float _3116 = _1245 / cbSceneParam._m0[86u].x;
    float _3117 = _1246 / cbSceneParam._m0[86u].y;
    vec4 _3131 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3116, _3117, (log2((isnan(cbSceneParam._m0[77u].w) ? _1180 : (isnan(_1180) ? cbSceneParam._m0[77u].w : min(_1180, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3133 = _3131.x;
    float _3134 = _3131.y;
    float _3135 = _3131.z;
    float _3136 = _3131.w;
    float _3228;
    float _3230;
    float _3232;
    float _3234;
    if (_1180 > cbSceneParam._m0[78u].w)
    {
        float _3191 = isnan(_1180) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1180 : min(cbSceneParam._m0[80u].w, _1180));
        float _3192 = _3191 / _1180;
        float _3203 = _3192 * _1230;
        float _3204 = _1231 * _3192;
        float _3205 = (-0.0) - _3204;
        float _3206 = _3192 * _1232;
        float _3208 = (cbSceneParam._m0[77u].w * _3205) / _3191;
        float _3209 = _3208 + cbSceneParam._m0[79u].w;
        float _3210 = cbSceneParam._m0[79u].w - _3204;
        float _3216 = sqrt(((_3203 * _3203) + (_3204 * _3204)) + (_3206 * _3206));
        float _3219 = (1.0 - (cbSceneParam._m0[77u].w / _3191)) * _3216;
        float _3224 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3226 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3379;
        if (abs((_3205 - _3208) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3379 = ((((_3209 > 0.0) ? exp2(_3224 * _3209) : (2.0 - exp2(_3226 * _3209))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3219;
        }
        else
        {
            float _3339 = 1.0 / cbSceneParam._m0[80u].x;
            float _3340 = isnan(_3210) ? _3209 : (isnan(_3209) ? _3210 : max(_3209, _3210));
            float _3341 = isnan(_3210) ? _3209 : (isnan(_3209) ? _3210 : min(_3209, _3210));
            float _3350 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : min(_3340, 0.0));
            float _3351 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : min(_3341, 0.0));
            _3379 = ((abs(_3216 / _3205) * cbSceneParam._m0[80u].y) * ((((_3350 - _3351) * 2.0) - ((exp2(_3224 * (isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0)))) - exp2(_3224 * (isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))))) * _3339)) - ((exp2(_3226 * _3350) - exp2(_3226 * _3351)) * _3339))) + (_3219 * cbSceneParam._m0[80u].z);
        }
        vec4 _3381 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3116, _3117, 1.0), 0.0);
        float _3390 = exp2((_3379 * (-1.44269502162933349609375)) * (1.0 - _3381.w));
        float _3391 = log2(_3390);
        float _3407 = log2(_3136);
        _3228 = (exp2(_3407 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3391 * cbSceneParam._m0[78u].x)) * _3381.x) / cbSceneParam._m0[78u].x)) + _3133;
        _3230 = (exp2(_3407 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3391 * cbSceneParam._m0[78u].y)) * _3381.y) / cbSceneParam._m0[78u].y)) + _3134;
        _3232 = (exp2(_3407 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3391 * cbSceneParam._m0[78u].z)) * _3381.z) / cbSceneParam._m0[78u].z)) + _3135;
        _3234 = _3390 * _3136;
    }
    else
    {
        _3228 = _3133;
        _3230 = _3134;
        _3232 = _3135;
        _3234 = _3136;
    }
    float _3246 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3247 = _3246 == 3.0;
    float _3248 = log2(_3234);
    float _3255 = exp2(_3248 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3078 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1323))) + ((_3084 + ((isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0))) * _2129)) * cbPerFrame._m0[3u].x));
    float _3256 = exp2(_3248 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3080 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1323))) + ((_3086 + ((isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0))) * _2129)) * cbPerFrame._m0[3u].x));
    float _3257 = exp2(_3248 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5072 : (isnan(_5072) ? 1.0 : min(_5072, 1.0))) * (_3082 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1323))) + ((_3088 + ((isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0))) * _2129)) * cbPerFrame._m0[3u].x));
    float _3266 = (_3246 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3266 * (_3247 ? _3255 : (_3255 + (cbSceneParam._m0[72u].w * _3228)));
    SV_Target.y = _3266 * (_3247 ? _3256 : (_3256 + (cbSceneParam._m0[72u].w * _3230)));
    SV_Target.z = _3266 * (_3247 ? _3257 : (_3257 + (cbSceneParam._m0[72u].w * _3232)));
    SV_Target.w = cbInstanceData._m0[_3108].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3108].w;
}


