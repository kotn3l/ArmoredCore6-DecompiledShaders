#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1486;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3810 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _446 = (_439 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _447 = (_439 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _448 = (_439 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3821 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _525 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446);
    float _528 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447);
    float _531 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448);
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _589 = _587.x;
    float _590 = _587.y;
    float _591 = _587.z;
    float _598 = ((_570.x - _589) * _439) + _589;
    float _599 = ((_570.y - _590) * _439) + _590;
    float _600 = ((_570.z - _591) * _439) + _591;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _625 = ((_612.z - _600) * _512) + _600;
    float _628 = ((((_612.x - _598) * _512) + _598) * 2.0) + (-1.0);
    float _630 = ((((_612.y - _599) * _512) + _599) * 2.0) + (-1.0);
    float _631 = dot(vec2(_628, _630), vec2(_628, _630));
    float _3832 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _636 = sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _677 = _675.x;
    float _678 = 1.0 - _677;
    float _687 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _690 = ((isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : min(_687, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _699 = (_690 - ((((((_677 - _678) * cbMtdParam._m0[24u].z) + _678) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _690))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3853 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _707 = (_700 * ((_550.x * cbMtdParam._m0[18u].x) - _525)) + _525;
    float _708 = (_700 * ((_550.y * cbMtdParam._m0[18u].y) - _528)) + _528;
    float _709 = (_700 * ((_550.z * cbMtdParam._m0[18u].z) - _531)) + _531;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _723 = _721.x;
    float _724 = 1.0 - _723;
    float _749 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_723 - _724) * cbMtdParam._m0[24u].w) + _724) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3864 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _758 = ((((cbMtdParam._m0[10u].x - _707) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _750) + _707;
    float _759 = ((((cbMtdParam._m0[10u].y - _708) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _750) + _708;
    float _760 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _709)) * _750) + _709;
    vec4 _786 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _788 = _786.x;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _788) * _439) + _788;
    float _822 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _805) * _512) + _805;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _822) * cbMtdParam._m0[19u].z) + _822;
    float _828 = _826 - (_826 * _700);
    float _830 = _828 - (_828 * _750);
    float _834 = (cbMtdParam._m0[19u].w * (_650.z - _625)) + _625;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _855 = (_848.x * 2.0) + (-1.0);
    float _856 = (_848.y * 2.0) + (-1.0);
    float _857 = dot(vec2(_855, _856), vec2(_855, _856));
    float _3875 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _865 = (_700 * (_848.z - _834)) + _834;
    float _868 = ((cbMtdParam._m0[23u].x - _865) * _750) + _865;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _893 = (_887.x * 2.0) + (-1.0);
    float _894 = (_887.y * 2.0) + (-1.0);
    float _895 = dot(vec2(_893, _894), vec2(_893, _894));
    float _3886 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _903 = (((_650.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _628;
    float _904 = (((_650.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _630;
    float _916 = (((_855 - _903) + (cbMtdParam._m0[21u].x * _903)) * _700) + _903;
    float _917 = (((_856 - _904) + (cbMtdParam._m0[21u].x * _904)) * _700) + _904;
    float _918 = (_700 * (sqrt(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) - _636)) + _636;
    float _929 = (((_893 - _916) + (_916 * cbMtdParam._m0[22u].z)) * _750) + _916;
    float _930 = (((_894 - _917) + (_917 * cbMtdParam._m0[22u].z)) * _750) + _917;
    float _931 = ((sqrt(1.0 - (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) - _918) * _750) + _918;
    float _933 = cbMtdParam._m0[22u].x + _650.w;
    float _936 = fma(_931, _250 * NORMAL.x, fma(_930, _257 * TANGENT.x, (_243 * _235) * _929));
    float _939 = fma(_931, _250 * NORMAL.y, fma(_930, _257 * TANGENT.y, (_243 * _236) * _929));
    float _942 = fma(_931, _250 * NORMAL.z, fma(_930, _257 * TANGENT.z, (_243 * _237) * _929));
    float _946 = inversesqrt(dot(vec3(_936, _939, _942), vec3(_936, _939, _942)));
    float _947 = _946 * _936;
    float _948 = _946 * _939;
    float _949 = _946 * _942;
    float _3897 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _950 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _3919 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3930 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3941 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3952 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _955 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _969 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1019 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1009);
    float _1020 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1009);
    float _1021 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1009);
    float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
    float _1026 = _1019 * _1025;
    float _1027 = _1020 * _1025;
    float _1028 = _1021 * _1025;
    float _1034 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1035 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1053 = fma(_949, cbSceneParam._m0[5u].z, fma(_948, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _947));
    float _1056 = fma(_949, cbSceneParam._m0[6u].z, fma(_948, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _947));
    float _1059 = fma(_949, cbSceneParam._m0[7u].z, fma(_948, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _947));
    uint _1073 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1079 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * cbInstanceData._m0[_1073].x;
    float _1080 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_1073].y;
    float _1081 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_1073].z;
    float _3963 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1085 = 1.0 - _955;
    float _1086 = _1082 * _1085;
    float _1087 = _1083 * _1085;
    float _1088 = _1084 * _1085;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _955;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _955;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _955;
    float _1096 = _1093 + 0.039999999105930328369140625;
    float _1098 = _1094 + 0.039999999105930328369140625;
    float _1099 = _1095 + 0.039999999105930328369140625;
    vec4 _1108 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1034, cbSceneParam._m0[86u].y * _1035));
    float _1112 = ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * TEXCOORD_5.w) * _1108.x;
    float _1113 = dot(vec3(_947, _948, _949), vec3(_1026, _1027, _1028));
    float _1116 = _1113 * 2.0;
    float _1120 = (_1116 * _947) - _1026;
    float _1121 = (_1116 * _948) - _1027;
    float _1122 = (_1116 * _949) - _1028;
    float _1126 = abs(dot(vec3(_1026, _1027, _1028), vec3(_947, _948, _949)));
    float _3996 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1128 = sqrt(_950);
    float _1141 = exp2((_1128 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1128 * 3.0));
    float _1147 = (1.0 - _1141) * ((_1128 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1148 = _1141 * _1128;
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1180 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1184 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1485;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1210 = fma(_1184, cbModelParam._m0[26u].z, fma(_1180, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1176));
        float _1214 = fma(_1184, cbModelParam._m0[27u].z, fma(_1180, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1176));
        float _1218 = fma(_1184, cbModelParam._m0[28u].z, fma(_1180, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1176));
        float _1243 = _1176 + _947;
        float _1244 = _1180 + _948;
        float _1245 = _1184 + _949;
        float _1255 = fma(_1245, cbModelParam._m0[26u].z, fma(_1244, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1243)) - _1210;
        float _1256 = fma(_1245, cbModelParam._m0[27u].z, fma(_1244, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1243)) - _1214;
        float _1257 = fma(_1245, cbModelParam._m0[28u].z, fma(_1244, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1243)) - _1218;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1210 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1214 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[34u].z) + ((((((_1218 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1313 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1279.x + (-0.5));
        float _1315 = _1313 * (_1279.y + (-0.5));
        float _1316 = _1313 * (_1279.z + (-0.5));
        float _1323 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1286.x + (-0.5));
        float _1325 = _1323 * (_1286.y + (-0.5));
        float _1326 = _1323 * (_1286.z + (-0.5));
        float _1333 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1293.x + (-0.5));
        float _1335 = _1333 * (_1293.y + (-0.5));
        float _1336 = _1333 * (_1293.z + (-0.5));
        float _1343 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1300.x + (-0.5));
        float _1345 = _1343 * (_1300.y + (-0.5));
        float _1346 = _1343 * (_1300.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1367 = (dot(vec3(_947, _948, _949), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1377 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _4044 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1379 + 1.0))) + _1384) * _1347;
        float _1394 = _1315 * 0.5;
        float _1395 = _1325 * 0.5;
        float _1396 = _1335 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_947, _948, _949), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4077 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1421 + 1.0))) + _1426) * _1348;
        float _1436 = _1316 * 0.5;
        float _1437 = _1326 * 0.5;
        float _1438 = _1336 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_947, _948, _949), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4110 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1463 + 1.0))) + _1468) * _1349;
        _1485 = _1316;
        _1487 = _1315;
        _1488 = _1314;
        _1489 = _1326;
        _1490 = _1325;
        _1491 = _1324;
        _1492 = _1336;
        _1493 = _1335;
        _1494 = _1334;
        _1495 = _1349;
        _1496 = _1348;
        _1497 = _1347;
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1486;
        _1487 = _1486;
        _1488 = _1486;
        _1489 = _1486;
        _1490 = _1486;
        _1491 = _1486;
        _1492 = _1486;
        _1493 = _1486;
        _1494 = _1486;
        _1495 = _1486;
        _1496 = _1486;
        _1497 = _1486;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1524 = fma(_1184, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1176));
        float _1528 = fma(_1184, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1176));
        float _1532 = fma(_1184, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1176));
        float _1555 = _1176 + _947;
        float _1556 = _1180 + _948;
        float _1557 = _1184 + _949;
        float _1567 = fma(_1557, cbModelParam._m0[30u].z, fma(_1556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1555)) - _1524;
        float _1568 = fma(_1557, cbModelParam._m0[31u].z, fma(_1556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1555)) - _1528;
        float _1569 = fma(_1557, cbModelParam._m0[32u].z, fma(_1556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1555)) - _1532;
        float _1573 = inversesqrt(dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569)));
        float _1586 = ((_1573 * _1567) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1524 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1587 = ((_1573 * _1568) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1528 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1588 = ((_1573 * _1569) / cbModelParam._m0[35u].z) + ((((((_1532 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1586, _1587, _1588), 0.0);
        float _1623 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1624 = _1623 * (_1590.x + (-0.5));
        float _1625 = _1623 * (_1590.y + (-0.5));
        float _1626 = _1623 * (_1590.z + (-0.5));
        float _1633 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1634 = _1633 * (_1597.x + (-0.5));
        float _1635 = _1633 * (_1597.y + (-0.5));
        float _1636 = _1633 * (_1597.z + (-0.5));
        float _1643 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1644 = _1643 * (_1604.x + (-0.5));
        float _1645 = _1643 * (_1604.y + (-0.5));
        float _1646 = _1643 * (_1604.z + (-0.5));
        float _1653 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1654 = _1653 * (_1611.x + (-0.5));
        float _1655 = _1653 * (_1611.y + (-0.5));
        float _1656 = _1653 * (_1611.z + (-0.5));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = _1624 * 0.5;
        float _1661 = _1634 * 0.5;
        float _1662 = _1644 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_947, _948, _949), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4173 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1687 + 1.0))) + _1692) * _1657;
        float _1702 = _1625 * 0.5;
        float _1703 = _1635 * 0.5;
        float _1704 = _1645 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_947, _948, _949), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1658 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4206 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1729 + 1.0))) + _1734) * _1658;
        float _1744 = _1626 * 0.5;
        float _1745 = _1636 * 0.5;
        float _1746 = _1646 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_947, _948, _949), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4239 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1771 + 1.0))) + _1776) * _1659;
        _1793 = _1626;
        _1794 = _1625;
        _1795 = _1624;
        _1796 = _1636;
        _1797 = _1635;
        _1798 = _1634;
        _1799 = _1646;
        _1800 = _1645;
        _1801 = _1644;
        _1802 = _1659;
        _1803 = _1658;
        _1804 = _1657;
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1806 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
    }
    else
    {
        _1793 = _1486;
        _1794 = _1486;
        _1795 = _1486;
        _1796 = _1486;
        _1797 = _1486;
        _1798 = _1486;
        _1799 = _1486;
        _1800 = _1486;
        _1801 = _1486;
        _1802 = _1486;
        _1803 = _1486;
        _1804 = _1486;
        _1805 = 0.0;
        _1806 = 0.0;
        _1807 = 0.0;
    }
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1498)) + _1498;
    float _1818 = (cbModelParam._m0[1u].x * (_1806 - _1499)) + _1499;
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1500)) + _1500;
    float _1840 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1843 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1846 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1817));
    float _1861 = _1120 * 0.5;
    float _1862 = _1121 * 0.5;
    float _1863 = _1122 * 0.5;
    float _1864 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1867 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1794, _1797, _1800, _1803));
    float _1870 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1904;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1877 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1485, _1489, _1492, _1495));
        float _1881 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1487, _1490, _1493, _1496));
        float _1885 = dot(vec4(_1861, _1862, _1863, 1.0), vec4(_1488, _1491, _1494, _1497));
        float _1892 = dot(vec4(cbModelParam._m0[39u]), vec4(_1861, _1862, _1863, 1.0));
        _1904 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1904 = 1.0;
    }
    float _1915;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1906 = dot(vec4(cbModelParam._m0[40u]), vec4(_1861, _1862, _1863, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1919 = (_1915 * cbModelParam._m0[1u].x) + (_1904 * (1.0 - cbModelParam._m0[1u].x));
    float _1929 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _950);
    float _1930 = isnan(_1929) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1929 : min(cbModelParam._m0[25u].z, _1929));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1977 = fma(_1184, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1176)) + cbModelParam._m0[13u].w;
        float _1981 = fma(_1184, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1176)) + cbModelParam._m0[14u].w;
        float _1985 = fma(_1184, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1176)) + cbModelParam._m0[15u].w;
        float _1988 = fma(_1122, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120));
        float _1991 = fma(_1122, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120));
        float _1994 = fma(_1122, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120));
        float _2022;
        if (_1988 > 0.0)
        {
            _2022 = abs((1.0 - _1977) / _1988);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1977 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2022 = frontier_phi_14_12_ladder;
        }
        float _2224;
        if (_1991 > 0.0)
        {
            _2224 = abs((1.0 - _1981) / _1991);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1981 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2224 = frontier_phi_23_19_ladder;
        }
        float _2478;
        if (_1994 > 0.0)
        {
            _2478 = abs((1.0 - _1985) / _1994);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1985 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2478 = frontier_phi_35_30_ladder;
        }
        float _2480 = isnan(_2224) ? _2022 : (isnan(_2022) ? _2224 : min(_2022, _2224));
        float _2481 = isnan(_2478) ? _2480 : (isnan(_2480) ? _2478 : min(_2480, _2478));
        float _2485 = (_2481 * _1988) + _1977;
        float _2486 = (_2481 * _1991) + _1981;
        float _2487 = (_2481 * _1994) + _1985;
        float _2488 = _2481 * 9.9999997473787516355514526367188e-05;
        float _2490 = (-1.0) - _2488;
        float _2492 = _2488 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2487 > _2492) || ((_2487 < _2490) || ((_2486 > _2492) || ((_2486 < _2490) || ((_2485 < _2490) || (_2485 > _2492))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2487, cbModelParam._m0[9u].z, fma(_2486, cbModelParam._m0[9u].y, _2485 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2487, cbModelParam._m0[10u].z, fma(_2486, cbModelParam._m0[10u].y, _2485 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2487, cbModelParam._m0[11u].z, fma(_2486, cbModelParam._m0[11u].y, _2485 * cbModelParam._m0[11u].x))), _1930);
            frontier_phi_13_35_ladder = _2615.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2615.x * cbModelParam._m0[1u].y;
        }
        _2010 = frontier_phi_13_35_ladder_2;
        _2012 = frontier_phi_13_35_ladder_1;
        _2014 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1998 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1120, _1121, _1122), _1930);
        _2010 = _1998.x * cbModelParam._m0[1u].y;
        _2012 = _1998.y * cbModelParam._m0[1u].y;
        _2014 = _1998.z * cbModelParam._m0[1u].y;
    }
    float _2018 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _950);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2018 : min(cbModelParam._m0[25u].w, _2018));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2072 = fma(_1184, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1176)) + cbModelParam._m0[21u].w;
        float _2076 = fma(_1184, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1176)) + cbModelParam._m0[22u].w;
        float _2080 = fma(_1184, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1176)) + cbModelParam._m0[23u].w;
        float _2083 = fma(_1122, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120));
        float _2086 = fma(_1122, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120));
        float _2089 = fma(_1122, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120));
        float _2229;
        if (_2083 > 0.0)
        {
            _2229 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2229 = frontier_phi_25_21_ladder;
        }
        float _2505;
        if (_2086 > 0.0)
        {
            _2505 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2505 = frontier_phi_37_32_ladder;
        }
        float _2718;
        if (_2089 > 0.0)
        {
            _2718 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2718 = frontier_phi_46_43_ladder;
        }
        float _2720 = isnan(_2505) ? _2229 : (isnan(_2229) ? _2505 : min(_2229, _2505));
        float _2721 = isnan(_2718) ? _2720 : (isnan(_2720) ? _2718 : min(_2720, _2718));
        float _2725 = (_2721 * _2083) + _2072;
        float _2726 = (_2721 * _2086) + _2076;
        float _2727 = (_2721 * _2089) + _2080;
        float _2728 = _2721 * 9.9999997473787516355514526367188e-05;
        float _2729 = (-1.0) - _2728;
        float _2731 = _2728 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2727 > _2731) || ((_2727 < _2729) || ((_2726 > _2731) || ((_2726 < _2729) || ((_2725 < _2729) || (_2725 > _2731))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2727, cbModelParam._m0[17u].z, fma(_2726, cbModelParam._m0[17u].y, _2725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2727, cbModelParam._m0[18u].z, fma(_2726, cbModelParam._m0[18u].y, _2725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2727, cbModelParam._m0[19u].z, fma(_2726, cbModelParam._m0[19u].y, _2725 * cbModelParam._m0[19u].x))), _2019);
            frontier_phi_22_46_ladder = _2926.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2926.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2926.x * cbModelParam._m0[1u].z;
        }
        _2108 = frontier_phi_22_46_ladder_2;
        _2110 = frontier_phi_22_46_ladder_1;
        _2112 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1120, _1121, _1122), _2019);
        _2108 = _2092.x * cbModelParam._m0[1u].z;
        _2110 = _2092.y * cbModelParam._m0[1u].z;
        _2112 = _2092.z * cbModelParam._m0[1u].z;
    }
    float _2125 = (((_1147 * _1096) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2127 = (((_1147 * _1098) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2129 = (((_1147 * _1099) + _1148) * _1112) * ((cbModelParam._m0[1u].w * (_2112 - _2014)) + _2014);
    float _2132 = fma(_2129, cbSceneParam._m0[89u].z, fma(_2127, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2135 = fma(_2129, cbSceneParam._m0[90u].z, fma(_2127, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2138 = fma(_2129, cbSceneParam._m0[91u].z, fma(_2127, cbSceneParam._m0[91u].y, _2125 * cbSceneParam._m0[91u].x));
    uvec4 _2148 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2150 = _2148.x * 14u;
    uint _2151 = _2150 + 13u;
    float _2158 = _1112 + (-1.0);
    float _2163 = (cbLight._m0[_2151].x * _2158) + 1.0;
    float _2164 = (cbLight._m0[_2151].y * _2158) + 1.0;
    float _2165 = (cbLight._m0[_2151].z * _2158) + 1.0;
    float _2166 = (cbLight._m0[_2151].w * _2158) + 1.0;
    uint _2167 = _2150 + 5u;
    float _2173 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
    uint _2177 = _2150 + 4u;
    float _2183 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2187 = _2150 | 1u;
    float _2198 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_947, _948, _949));
    float _2201 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_947, _948, _949));
    float _4375 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _4386 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2206 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * 0.3183098733425140380859375;
    float _2208 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2215 = ((cbLight._m0[_2167].x * _2173) * _2208) + ((cbLight._m0[_2177].x * _2183) * _2206);
    float _2216 = ((_2173 * cbLight._m0[_2167].y) * _2208) + ((_2183 * cbLight._m0[_2177].y) * _2206);
    float _2217 = ((_2173 * cbLight._m0[_2167].z) * _2208) + ((_2183 * cbLight._m0[_2177].z) * _2206);
    uvec4 _2221 = floatBitsToUint(cbLight._m0[_2150 + 12u]);
    bool _2223 = _2221.x == 0u;
    float _2234;
    float _2236;
    float _2238;
    if (_2223)
    {
        _2234 = _2215;
        _2236 = _2216;
        _2238 = _2217;
    }
    else
    {
        uint _2242 = _2150 + 6u;
        float _2258 = (dot(vec3(cbLight._m0[_2150 + 2u].xyz), vec3(_947, _948, _949)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4397 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2261 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2234 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2215;
        _2236 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2216;
        _2238 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2217;
    }
    bool _2241 = _2221.y == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2241)
    {
        _2279 = _2234;
        _2281 = _2236;
        _2283 = _2238;
    }
    else
    {
        uint _2449 = _2150 + 7u;
        float _2465 = (dot(vec3(cbLight._m0[_2150 + 3u].xyz), vec3(_947, _948, _949)) * 0.5) + 0.5;
        float _2466 = _2465 * _2465;
        float _4413 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2467 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2468 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2279 = (((cbLight._m0[_2449].x * 0.3183098733425140380859375) * _2467) * _2468) + _2234;
        _2281 = (((cbLight._m0[_2449].y * 0.3183098733425140380859375) * _2467) * _2468) + _2236;
        _2283 = (((cbLight._m0[_2449].z * 0.3183098733425140380859375) * _2467) * _2468) + _2238;
    }
    uint _2286 = _2150 + 8u;
    float _2299 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _950) * 0.949999988079071044921875);
    float _2300 = _2299 * _2299;
    float _2301 = cbLight._m0[_2150].x + _1026;
    float _2302 = cbLight._m0[_2150].y + _1027;
    float _2303 = cbLight._m0[_2150].z + _1028;
    float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
    float _2308 = _2307 * _2301;
    float _2309 = _2307 * _2302;
    float _2310 = _2307 * _2303;
    float _2311 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2150].xyz));
    float _4429 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2314 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _4440 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _2315 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2316 = dot(vec3(_947, _948, _949), vec3(_2308, _2309, _2310));
    float _4451 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2308, _2309, _2310));
    float _4462 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2300 * _2300;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2336 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2337 = 0.959999978542327880859375 - _1093;
    float _2339 = 0.959999978542327880859375 - _1094;
    float _2340 = 0.959999978542327880859375 - _1095;
    float _2347 = 1.0 - _2300;
    float _2358 = (0.5 / (((_2315 * ((_2314 * _2347) + _2300)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2347) + _2300) * _2314))) * _2314;
    float _4473 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    uint _2371 = _2150 + 9u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _950) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2187].x + _1026;
    float _2385 = cbLight._m0[_2187].y + _1027;
    float _2386 = cbLight._m0[_2187].z + _1028;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2187].xyz));
    float _4484 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2398 = dot(vec3(_947, _948, _949), vec3(_2391, _2392, _2393));
    float _4495 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2391, _2392, _2393));
    float _4506 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2383 * _2383;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
    float _2424 = 1.0 - _2383;
    float _2434 = (0.5 / (((_2315 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2424) + _2383) * _2397))) * _2397;
    float _4517 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2436 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    float _2446 = (((((_2417 * _2337) + _1096) * cbLight._m0[_2371].x) * _2436) * _2173) + (((((_2336 * _2337) + _1096) * cbLight._m0[_2286].x) * _2360) * _2183);
    float _2447 = (((((_2417 * _2339) + _1098) * cbLight._m0[_2371].y) * _2436) * _2173) + (((((_2336 * _2339) + _1098) * cbLight._m0[_2286].y) * _2360) * _2183);
    float _2448 = (((((_2417 * _2340) + _1099) * cbLight._m0[_2371].z) * _2436) * _2173) + (((((_2336 * _2340) + _1099) * cbLight._m0[_2286].z) * _2360) * _2183);
    float _2510;
    float _2512;
    float _2514;
    if (_2223)
    {
        _2510 = _2446;
        _2512 = _2447;
        _2514 = _2448;
    }
    else
    {
        uint _2516 = _2150 + 2u;
        uint _2520 = _2150 + 10u;
        float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2516].w)) * _950) * 0.949999988079071044921875);
        float _2535 = _2534 * _2534;
        float _2536 = cbLight._m0[_2516].x + _1026;
        float _2537 = cbLight._m0[_2516].y + _1027;
        float _2538 = cbLight._m0[_2516].z + _1028;
        float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
        float _2543 = _2542 * _2536;
        float _2544 = _2542 * _2537;
        float _2545 = _2542 * _2538;
        float _2546 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2516].xyz));
        float _4528 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2549 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2550 = dot(vec3(_947, _948, _949), vec3(_2543, _2544, _2545));
        float _4539 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2554 = dot(vec3(cbLight._m0[_2516].xyz), vec3(_2543, _2544, _2545));
        float _4550 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2558 = _2535 * _2535;
        float _2562 = ((_2553 * _2553) * (_2558 + (-1.0))) + 1.0;
        float _2569 = exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0);
        float _2576 = 1.0 - _2535;
        float _2586 = (0.5 / (((_2315 * ((_2549 * _2576) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2576) + _2535) * _2549))) * _2549;
        float _4561 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2558 / ((_2562 * _2562) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2510 = (((((_2569 * _2337) + _1096) * cbLight._m0[_2520].x) * _2588) * _2589) + _2446;
        _2512 = (((((_2569 * _2339) + _1098) * cbLight._m0[_2520].y) * _2588) * _2589) + _2447;
        _2514 = (((((_2569 * _2340) + _1099) * cbLight._m0[_2520].z) * _2588) * _2589) + _2448;
    }
    float _2624;
    float _2626;
    float _2628;
    if (_2241)
    {
        _2624 = _2510;
        _2626 = _2512;
        _2628 = _2514;
    }
    else
    {
        uint _2635 = _2150 + 3u;
        uint _2639 = _2150 + 11u;
        float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2635].w)) * _950) * 0.949999988079071044921875);
        float _2654 = _2653 * _2653;
        float _2655 = cbLight._m0[_2635].x + _1026;
        float _2656 = cbLight._m0[_2635].y + _1027;
        float _2657 = cbLight._m0[_2635].z + _1028;
        float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
        float _2662 = _2661 * _2655;
        float _2663 = _2661 * _2656;
        float _2664 = _2661 * _2657;
        float _2665 = dot(vec3(_947, _948, _949), vec3(cbLight._m0[_2635].xyz));
        float _4577 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2668 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2669 = dot(vec3(_947, _948, _949), vec3(_2662, _2663, _2664));
        float _4588 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2673 = dot(vec3(cbLight._m0[_2635].xyz), vec3(_2662, _2663, _2664));
        float _4599 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2677 = _2654 * _2654;
        float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
        float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
        float _2695 = 1.0 - _2654;
        float _2705 = (0.5 / (((_2315 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2315 * _2695) + _2654) * _2668))) * _2668;
        float _4610 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2707 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
        float _2708 = isnan(1.0) ? _2166 : (isnan(_2166) ? 1.0 : min(_2166, 1.0));
        _2624 = (((((_2688 * _2337) + _1096) * cbLight._m0[_2639].x) * _2707) * _2708) + _2510;
        _2626 = (((((_2688 * _2339) + _1098) * cbLight._m0[_2639].y) * _2707) * _2708) + _2512;
        _2628 = (((((_2688 * _2340) + _1099) * cbLight._m0[_2639].z) * _2707) * _2708) + _2514;
    }
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    if (_2148.y == 0u)
    {
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2784 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2783;
        float _2785 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2783;
        float _2786 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2783;
        uvec4 _2798 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2799 = _2798.x;
        uint _2810 = uint((float(_2798.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1035) / _2799))) + floor(float(uint(cbSceneParam._m0[85u].x * _1034) / _2799)));
        float _2820 = (log2(_2786 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2821 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        uint _2824 = uint(isnan(14.0) ? _2821 : (isnan(_2821) ? 14.0 : min(_2821, 14.0)));
        uvec4 _2829 = texelFetch(g_lightClusterGridBuffer, int(((_2824 << 2u) + (_2810 << 6u)) >> 2u));
        uint _2830 = _2829.x;
        uint _2831 = _2798.z;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((((1u << ((_2831 >> 4u) & 15u)) + 4294967295u) & _2830) == 0u) || ((_2831 & 240u) == 0u))
        {
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
        }
        else
        {
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _3076 = 0.0;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            uint _3082 = 0u;
            uint _3091;
            bool _3092;
            for (;;)
            {
                _3091 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                _3092 = _3091 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3092)
                {
                    frontier_phi_61_pred = _3076;
                    frontier_phi_61_pred_1 = _3081;
                    frontier_phi_61_pred_2 = _3080;
                    frontier_phi_61_pred_3 = _3079;
                    frontier_phi_61_pred_4 = _3078;
                    frontier_phi_61_pred_5 = _3077;
                }
                else
                {
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    uint _3206;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3091;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    for (;;)
                    {
                        uint _3210 = uint(findLSB(_3206)) + (_3082 << 5u);
                        uint _3207 = (_3206 + 4294967295u) & _3206;
                        uint _3212 = _3210 * 48u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3232 = (_3210 * 48u) + 4u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3251 = (_3210 * 48u) + 8u;
                        vec3 _3262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x));
                        float _3266 = _3226.x - _2784;
                        float _3267 = _3226.y - _2785;
                        float _3268 = _3226.z - _2786;
                        float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                        float _3272 = inversesqrt(_3269);
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3276 = dot(vec3(_1053, _1056, _1059), vec3(_3273, _3274, _3275));
                        float _3281 = 1.0 - (_3269 * _3226.w);
                        float _4636 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                        float _3283 = sqrt(_3269) * _3245.w;
                        float _3286 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3276) + _3287;
                        float _3293 = _3283 * _3283;
                        float _3297 = ((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3282) / ((_3293 * 0.699999988079071044921875) + 1.0);
                        float _3301 = (-0.0) - _2784;
                        float _3302 = (-0.0) - _2785;
                        float _3303 = (-0.0) - _2786;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3318 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                        float _3319 = 1.0 - _1128;
                        float _3326 = sqrt(1.0 - ((1.0 - (_3319 * _3319)) * (1.0 - (_3318 * _3318))));
                        float _3327 = _3326 * _3326;
                        float _3328 = _3327 * _3327;
                        float _3329 = _3308 + _3273;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3339 = dot(vec3(_1053, _1056, _1059), vec3(_3308, _3309, _3310));
                        float _4652 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3343 = dot(vec3(_1053, _1056, _1059), vec3(_3335 * _3329, _3335 * _3330, _3335 * _3331));
                        float _4663 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3346 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3350 = ((_3346 * _3346) * (_3328 + (-1.0))) + 1.0;
                        float _3351 = _3286 * _3327;
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3276) + _3352;
                        float _4674 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3357 = 1.0 - _3327;
                        float _3367 = (0.5 / (((_3356 * ((_3342 * _3357) + _3327)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3327) * _3342))) * _3356;
                        float _4685 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3378 = (((_3328 * 3.1415927410125732421875) * (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) / ((_3350 * _3350) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125))) * _3282;
                        _3135 = (_3297 * _3245.x) + _3203;
                        _3136 = (_3297 * _3245.y) + _3204;
                        _3137 = (_3297 * _3245.z) + _3205;
                        _3132 = (_3378 * _3262.x) + _3200;
                        _3133 = (_3378 * _3262.y) + _3201;
                        _3134 = (_3378 * _3262.z) + _3202;
                        if (_3207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3207;
                        }
                    }
                    frontier_phi_61_pred = _3132;
                    frontier_phi_61_pred_1 = _3137;
                    frontier_phi_61_pred_2 = _3136;
                    frontier_phi_61_pred_3 = _3135;
                    frontier_phi_61_pred_4 = _3134;
                    frontier_phi_61_pred_5 = _3133;
                }
                _2932 = frontier_phi_61_pred;
                _2942 = frontier_phi_61_pred_1;
                _2940 = frontier_phi_61_pred_2;
                _2938 = frontier_phi_61_pred_3;
                _2936 = frontier_phi_61_pred_4;
                _2934 = frontier_phi_61_pred_5;
                uint _3083 = _3082 + 1u;
                if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3076 = _2932;
                    _3077 = _2934;
                    _3078 = _2936;
                    _3079 = _2938;
                    _3080 = _2940;
                    _3081 = _2942;
                    _3082 = _3083;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
        }
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.z;
        uint _2948 = (_2946 >> 8u) & 15u;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((4294967295u << _2948) & _2830) == 0u)
        {
            _3044 = _2931;
            _3046 = _2933;
            _3048 = _2935;
            _3050 = _2937;
            _3052 = _2939;
            _3054 = _2941;
        }
        else
        {
            float _3069 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
            float _3070 = _3069 * _2784;
            float _3071 = _3069 * _2785;
            float _3072 = _3069 * _2786;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2948 < ((_2946 >> 12u) & 15u))
            {
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3053;
                float _3055;
                float _3183 = _2931;
                float _3184 = _2933;
                float _3185 = _2935;
                float _3186 = _2937;
                float _3187 = _2939;
                float _3188 = _2941;
                uint _3189 = _2948;
                uint _3198;
                bool _3199;
                for (;;)
                {
                    _3198 = texelFetch(g_lightClassification, int((((_2824 << 5u) + (_2810 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                    _3199 = _3198 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3199)
                    {
                        frontier_phi_67_pred = _3186;
                        frontier_phi_67_pred_1 = _3187;
                        frontier_phi_67_pred_2 = _3188;
                        frontier_phi_67_pred_3 = _3185;
                        frontier_phi_67_pred_4 = _3184;
                        frontier_phi_67_pred_5 = _3183;
                    }
                    else
                    {
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3396 = _3183;
                        float _3397 = _3184;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        uint _3402 = _3198;
                        uint _3403;
                        vec4 _3428;
                        float _3429;
                        vec4 _3444;
                        vec3 _3456;
                        vec4 _3471;
                        vec4 _3486;
                        float _3532;
                        bool _3533;
                        for (;;)
                        {
                            uint _3413 = ((_3189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3402));
                            _3403 = (_3402 + 4294967295u) & _3402;
                            uint _3415 = _3413 * 40u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3429 = _3428.w;
                            uint _3431 = (_3413 * 40u) + 4u;
                            _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3446 = (_3413 * 40u) + 8u;
                            _3456 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x));
                            uint _3458 = (_3413 * 40u) + 16u;
                            _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3473 = (_3413 * 40u) + 20u;
                            _3486 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3473)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3473 + 3u)).x));
                            uint _3488 = (_3413 * 40u) + 24u;
                            vec4 _3501 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3488 + 3u)).x));
                            uint _3507 = (_3413 * 40u) + 28u;
                            vec4 _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            _3532 = fma(_2786, _3520.z, fma(_2785, _3520.y, _3520.x * _2784)) + _3520.w;
                            _3533 = !((fma(_2786, _3501.z, fma(_2785, _3501.y, _3501.x * _2784)) + _3501.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3533)
                            {
                                float _3560 = _3428.x - _2784;
                                float _3561 = _3428.y - _2785;
                                float _3562 = _3428.z - _2786;
                                float _3563 = dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562));
                                float _3566 = inversesqrt(_3563);
                                float _3567 = _3566 * _3560;
                                float _3568 = _3566 * _3561;
                                float _3569 = _3566 * _3562;
                                float _3573 = 1.0 - (_3563 / (_3429 * _3429));
                                float _4696 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3578 = sqrt(_3563) * _3444.w;
                                float _3580 = 1.39999997615814208984375 / (_3578 + 1.39999997615814208984375);
                                float _3581 = _3580 * _3580;
                                float _3584 = ((1.0 - _3581) * dot(vec3(_3567, _3568, _3569), vec3(_1053, _1056, _1059))) + _3581;
                                float _3587 = _3578 * _3578;
                                float _3591 = (fma(_2786, _3471.z, fma(_2785, _3471.y, _3471.x * _2784)) + _3471.w) / _3532;
                                float _3592 = (fma(_2786, _3486.z, fma(_2785, _3486.y, _3486.x * _2784)) + _3486.w) / _3532;
                                float _3596 = 1.0 - dot(vec2(_3591, _3592), vec2(_3591, _3592));
                                float _4712 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3598 = _3597 * (((isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0))) * _3574) / ((_3587 * 0.699999988079071044921875) + 1.0));
                                float _3610 = exp2(log2(1.0 / ((_3587 * 3.5) + 5.0)) * 0.25);
                                float _3611 = 1.0 - _1128;
                                float _3618 = sqrt(1.0 - ((1.0 - (_3611 * _3611)) * (1.0 - (_3610 * _3610))));
                                float _3619 = _3618 * _3618;
                                float _3620 = _3619 * _3619;
                                float _3621 = _3567 - _3070;
                                float _3622 = _3568 - _3071;
                                float _3623 = _3569 - _3072;
                                float _3627 = inversesqrt(dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623)));
                                float _3631 = dot(vec3(_1053, _1056, _1059), vec3((-0.0) - _3070, (-0.0) - _3071, (-0.0) - _3072));
                                float _4723 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3635 = dot(vec3(_1053, _1056, _1059), vec3(_3627 * _3621, _3627 * _3622, _3627 * _3623));
                                float _4734 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3642 = ((_3638 * _3638) * (_3620 + (-1.0))) + 1.0;
                                float _3643 = _3580 * _3619;
                                float _3644 = _3643 * _3643;
                                float _3650 = ((1.0 - _3644) * dot(vec3(_1053, _1056, _1059), vec3(_3567, _3568, _3569))) + _3644;
                                float _4745 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3651 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3652 = 1.0 - _3619;
                                float _3662 = (0.5 / (((_3651 * ((_3634 * _3652) + _3619)) + 9.9999999392252902907785028219223e-09) + (((_3651 * _3652) + _3619) * _3634))) * _3651;
                                float _4756 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3672 = (_3597 * _3574) * (((_3620 * 3.1415927410125732421875) * (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) / ((_3642 * _3642) * ((_3587 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3672 * _3456.x;
                                frontier_phi_73_pred_1 = _3672 * _3456.y;
                                frontier_phi_73_pred_2 = _3598 * _3444.z;
                                frontier_phi_73_pred_3 = _3598 * _3444.y;
                                frontier_phi_73_pred_4 = _3598 * _3444.x;
                                frontier_phi_73_pred_5 = _3672 * _3456.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_73_pred;
                            _3677 = frontier_phi_73_pred_1;
                            _3681 = frontier_phi_73_pred_2;
                            _3680 = frontier_phi_73_pred_3;
                            _3679 = frontier_phi_73_pred_4;
                            _3678 = frontier_phi_73_pred_5;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3385 = _3678 + _3398;
                            if (_3403 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3403;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3386;
                        frontier_phi_67_pred_1 = _3387;
                        frontier_phi_67_pred_2 = _3388;
                        frontier_phi_67_pred_3 = _3385;
                        frontier_phi_67_pred_4 = _3384;
                        frontier_phi_67_pred_5 = _3383;
                    }
                    _3051 = frontier_phi_67_pred;
                    _3053 = frontier_phi_67_pred_1;
                    _3055 = frontier_phi_67_pred_2;
                    _3049 = frontier_phi_67_pred_3;
                    _3047 = frontier_phi_67_pred_4;
                    _3045 = frontier_phi_67_pred_5;
                    uint _3190 = _3189 + 1u;
                    if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3183 = _3045;
                        _3184 = _3047;
                        _3185 = _3049;
                        _3186 = _3051;
                        _3187 = _3053;
                        _3188 = _3055;
                        _3189 = _3190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3053;
                frontier_phi_55_56_ladder_1 = _3055;
                frontier_phi_55_56_ladder_2 = _3051;
                frontier_phi_55_56_ladder_3 = _3049;
                frontier_phi_55_56_ladder_4 = _3047;
                frontier_phi_55_56_ladder_5 = _3045;
            }
            else
            {
                frontier_phi_55_56_ladder = _2939;
                frontier_phi_55_56_ladder_1 = _2941;
                frontier_phi_55_56_ladder_2 = _2937;
                frontier_phi_55_56_ladder_3 = _2935;
                frontier_phi_55_56_ladder_4 = _2933;
                frontier_phi_55_56_ladder_5 = _2931;
            }
            _3044 = frontier_phi_55_56_ladder_5;
            _3046 = frontier_phi_55_56_ladder_4;
            _3048 = frontier_phi_55_56_ladder_3;
            _3050 = frontier_phi_55_56_ladder_2;
            _3052 = frontier_phi_55_56_ladder;
            _3054 = frontier_phi_55_56_ladder_1;
        }
        float _3059 = isnan(1.0) ? _1112 : (isnan(_1112) ? 1.0 : min(_1112, 1.0));
        _2843 = (_3059 * _3050) + _2279;
        _2845 = (_3059 * _3052) + _2281;
        _2847 = (_3059 * _3054) + _2283;
        _2849 = ((_3044 * _1096) * _3059) + _2624;
        _2851 = ((_3046 * _1098) * _3059) + _2626;
        _2853 = ((_3048 * _1099) * _3059) + _2628;
    }
    else
    {
        _2843 = _2279;
        _2845 = _2281;
        _2847 = _2283;
        _2849 = _2624;
        _2851 = _2626;
        _2853 = _2628;
    }
    float _4772 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _4783 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _4794 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    uint _2873 = _263 + 6u;
    float _2881 = _1034 / cbSceneParam._m0[86u].x;
    float _2882 = _1035 / cbSceneParam._m0[86u].y;
    vec4 _2896 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, (log2((isnan(cbSceneParam._m0[77u].w) ? _969 : (isnan(_969) ? cbSceneParam._m0[77u].w : min(_969, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2898 = _2896.x;
    float _2899 = _2896.y;
    float _2900 = _2896.z;
    float _2901 = _2896.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_969 > cbSceneParam._m0[78u].w)
    {
        float _2956 = isnan(_969) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _969 : min(cbSceneParam._m0[80u].w, _969));
        float _2957 = _2956 / _969;
        float _2968 = _2957 * _1019;
        float _2969 = _1020 * _2957;
        float _2970 = (-0.0) - _2969;
        float _2972 = _2957 * _1021;
        float _2974 = (cbSceneParam._m0[77u].w * _2970) / _2956;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2969;
        float _2982 = sqrt(((_2968 * _2968) + (_2969 * _2969)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2956)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3145;
        if (abs((_2970 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3145 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3105 = 1.0 / cbSceneParam._m0[80u].x;
            float _3106 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3107 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3116 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : min(_3106, 0.0));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            _3145 = ((abs(_2982 / _2970) * cbSceneParam._m0[80u].y) * ((((_3116 - _3117) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0))))) * _3105)) - ((exp2(_2992 * _3116) - exp2(_2992 * _3117)) * _3105))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3147 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2881, _2882, 1.0), 0.0);
        float _3156 = exp2((_3145 * (-1.44269502162933349609375)) * (1.0 - _3147.w));
        float _3157 = log2(_3156);
        float _3173 = log2(_2901);
        _2994 = (exp2(_3173 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].x)) * _3147.x) / cbSceneParam._m0[78u].x)) + _2898;
        _2996 = (exp2(_3173 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].y)) * _3147.y) / cbSceneParam._m0[78u].y)) + _2899;
        _2998 = (exp2(_3173 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3157 * cbSceneParam._m0[78u].z)) * _3147.z) / cbSceneParam._m0[78u].z)) + _2900;
        _3000 = _3156 * _2901;
    }
    else
    {
        _2994 = _2898;
        _2996 = _2899;
        _2998 = _2900;
        _3000 = _2901;
    }
    float _3012 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3013 = _3012 == 3.0;
    float _3014 = log2(_3000);
    float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2843 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1112))) + ((_2849 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2845 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1112))) + ((_2851 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2847 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1112))) + ((_2853 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1919)) * cbPerFrame._m0[3u].x));
    float _3032 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3032 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.y = _3032 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
    SV_Target.z = _3032 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
    SV_Target.w = cbInstanceData._m0[_2873].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2873].w;
}


