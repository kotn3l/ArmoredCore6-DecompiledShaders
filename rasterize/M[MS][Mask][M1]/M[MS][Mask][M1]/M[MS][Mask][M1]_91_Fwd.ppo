#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1349;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _370 = _368.x;
    float _382 = dot(vec4(_370, _368.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _399 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _332.x) * 2.0) - ((((_370 - _382) * cbMtdParam._m0[23u].w) + _382) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3673 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _400 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _407 = (_400 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _408 = (_400 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _409 = (_400 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _446 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _448 = _446.x;
    float _458 = dot(vec4(_448, _446.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _472 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _332.y) * 2.0) - ((((_448 - _458) * cbMtdParam._m0[23u].w) + _458) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3684 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _480 = (_473 * ((_426.x * cbMtdParam._m0[13u].x) - _407)) + _407;
    float _481 = (_473 * ((_426.y * cbMtdParam._m0[13u].y) - _408)) + _408;
    float _482 = (_473 * ((_426.z * cbMtdParam._m0[13u].z) - _409)) + _409;
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _542 = _538.z;
    float _549 = ((_521.x - _540) * _400) + _540;
    float _550 = ((_521.y - _541) * _400) + _541;
    float _551 = ((_521.z - _542) * _400) + _542;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _576 = ((_563.z - _551) * _473) + _551;
    float _579 = ((((_563.x - _549) * _473) + _549) * 2.0) + (-1.0);
    float _581 = ((((_563.y - _550) * _473) + _550) * 2.0) + (-1.0);
    float _582 = dot(vec2(_579, _581), vec2(_579, _581));
    float _3695 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _587 = sqrt(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _613 = (((_601.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _579;
    float _614 = (((_601.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _581;
    float _617 = fma(_587, _232, fma(_614, _239, _613 * _225));
    float _620 = fma(_587, _233, fma(_614, _240, _613 * _226));
    float _623 = fma(_587, _234, fma(_614, _241, _613 * _227));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _656 = _654.x;
    float _657 = 1.0 - _656;
    float _666 = (cbMtdParam._m0[19u].x + dot(vec4(_627 * _617, _627 * _620, _627 * _623, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_656 - _657) * cbMtdParam._m0[24u].z) + _657) * cbMtdParam._m0[21u].z);
    float _3706 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _674 = (_667 * ((_501.x * cbMtdParam._m0[18u].x) - _480)) + _480;
    float _675 = (_667 * ((_501.y * cbMtdParam._m0[18u].y) - _481)) + _481;
    float _676 = (_667 * ((_501.z * cbMtdParam._m0[18u].z) - _482)) + _482;
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _704 = _702.x;
    float _722 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _704) * _400) + _704;
    float _739 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _722) * _473) + _722;
    float _743 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _739) * cbMtdParam._m0[19u].z) + _739;
    float _745 = _743 - (_743 * _667);
    float _749 = (cbMtdParam._m0[19u].w * (_601.z - _576)) + _576;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3717 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _779 = ((_762.z - _749) * _667) + _749;
    float _789 = ((sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) - _587) * _667) + _587;
    float _792 = (((_769 - _613) * _667) + _613) + (cbMtdParam._m0[21u].x * _613);
    float _793 = (((_770 - _614) * _667) + _614) + (cbMtdParam._m0[21u].x * _614);
    float _795 = cbMtdParam._m0[22u].x + _601.w;
    float _798 = fma(_789, _232, fma(_793, _239, _792 * _225));
    float _801 = fma(_789, _233, fma(_793, _240, _792 * _226));
    float _804 = fma(_789, _234, fma(_793, _241, _792 * _227));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    float _3728 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _812 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _3750 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3761 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3772 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3783 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _817 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _831 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _882 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _872);
    float _883 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _872);
    float _884 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _872);
    float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
    float _889 = _882 * _888;
    float _890 = _883 * _888;
    float _891 = _884 * _888;
    float _897 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _898 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _916 = fma(_811, cbSceneParam._m0[5u].z, fma(_810, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _809));
    float _919 = fma(_811, cbSceneParam._m0[6u].z, fma(_810, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _809));
    float _922 = fma(_811, cbSceneParam._m0[7u].z, fma(_810, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _809));
    uint _936 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_936].z;
    float _3794 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _948 = 1.0 - _817;
    float _949 = _945 * _948;
    float _950 = _946 * _948;
    float _951 = _947 * _948;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _817;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _817;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _817;
    float _959 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    vec4 _971 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _897, cbSceneParam._m0[86u].y * _898));
    float _975 = ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * TEXCOORD_5.w) * _971.x;
    float _976 = dot(vec3(_809, _810, _811), vec3(_889, _890, _891));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _809) - _889;
    float _984 = (_979 * _810) - _890;
    float _985 = (_979 * _811) - _891;
    float _989 = abs(dot(vec3(_889, _890, _891), vec3(_809, _810, _811)));
    float _3827 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_812);
    float _1004 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1010 = (1.0 - _1004) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1011 = _1004 * _991;
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1348;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1073 = fma(_1047, cbModelParam._m0[26u].z, fma(_1043, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039));
        float _1077 = fma(_1047, cbModelParam._m0[27u].z, fma(_1043, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039));
        float _1081 = fma(_1047, cbModelParam._m0[28u].z, fma(_1043, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039));
        float _1106 = _1039 + _809;
        float _1107 = _1043 + _810;
        float _1108 = _1047 + _811;
        float _1118 = fma(_1108, cbModelParam._m0[26u].z, fma(_1107, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1106)) - _1073;
        float _1119 = fma(_1108, cbModelParam._m0[27u].z, fma(_1107, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1106)) - _1077;
        float _1120 = fma(_1108, cbModelParam._m0[28u].z, fma(_1107, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1106)) - _1081;
        float _1124 = inversesqrt(dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120)));
        float _1137 = ((_1124 * _1118) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1073 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1124 * _1119) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1077 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1124 * _1120) / cbModelParam._m0[34u].z) + ((((((_1081 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1137, _1138, _1139), 0.0);
        float _1176 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1142.x + (-0.5));
        float _1178 = _1176 * (_1142.y + (-0.5));
        float _1179 = _1176 * (_1142.z + (-0.5));
        float _1186 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1149.x + (-0.5));
        float _1188 = _1186 * (_1149.y + (-0.5));
        float _1189 = _1186 * (_1149.z + (-0.5));
        float _1196 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1156.x + (-0.5));
        float _1198 = _1196 * (_1156.y + (-0.5));
        float _1199 = _1196 * (_1156.z + (-0.5));
        float _1206 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1163.x + (-0.5));
        float _1208 = _1206 * (_1163.y + (-0.5));
        float _1209 = _1206 * (_1163.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1230 = (dot(vec3(_809, _810, _811), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1240 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3875 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1242 + 1.0))) + _1247) * _1210;
        float _1257 = _1178 * 0.5;
        float _1258 = _1188 * 0.5;
        float _1259 = _1198 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_809, _810, _811), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3908 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1284 + 1.0))) + _1289) * _1211;
        float _1299 = _1179 * 0.5;
        float _1300 = _1189 * 0.5;
        float _1301 = _1199 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_809, _810, _811), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3941 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1326 + 1.0))) + _1331) * _1212;
        _1348 = _1179;
        _1350 = _1178;
        _1351 = _1177;
        _1352 = _1189;
        _1353 = _1188;
        _1354 = _1187;
        _1355 = _1199;
        _1356 = _1198;
        _1357 = _1197;
        _1358 = _1212;
        _1359 = _1211;
        _1360 = _1210;
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1349;
        _1350 = _1349;
        _1351 = _1349;
        _1352 = _1349;
        _1353 = _1349;
        _1354 = _1349;
        _1355 = _1349;
        _1356 = _1349;
        _1357 = _1349;
        _1358 = _1349;
        _1359 = _1349;
        _1360 = _1349;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1047, cbModelParam._m0[30u].z, fma(_1043, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1039));
        float _1391 = fma(_1047, cbModelParam._m0[31u].z, fma(_1043, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1039));
        float _1395 = fma(_1047, cbModelParam._m0[32u].z, fma(_1043, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1039));
        float _1418 = _1039 + _809;
        float _1419 = _1043 + _810;
        float _1420 = _1047 + _811;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_809, _810, _811), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4004 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_809, _810, _811), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4037 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_809, _810, _811), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4070 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1349;
        _1657 = _1349;
        _1658 = _1349;
        _1659 = _1349;
        _1660 = _1349;
        _1661 = _1349;
        _1662 = _1349;
        _1663 = _1349;
        _1664 = _1349;
        _1665 = _1349;
        _1666 = _1349;
        _1667 = _1349;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1361)) + _1361;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1362)) + _1362;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1363)) + _1363;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _983 * 0.5;
    float _1725 = _984 * 0.5;
    float _1726 = _985 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1348, _1352, _1355, _1358));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1047, cbModelParam._m0[13u].z, fma(_1043, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1039)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1047, cbModelParam._m0[14u].z, fma(_1043, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1039)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1047, cbModelParam._m0[15u].z, fma(_1043, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1039)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1854 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1857 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1885 = frontier_phi_14_12_ladder;
        }
        float _2087;
        if (_1854 > 0.0)
        {
            _2087 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2087 = frontier_phi_23_19_ladder;
        }
        float _2341;
        if (_1857 > 0.0)
        {
            _2341 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2341 = frontier_phi_35_30_ladder;
        }
        float _2343 = isnan(_2087) ? _1885 : (isnan(_1885) ? _2087 : min(_1885, _2087));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1851) + _1840;
        float _2349 = (_2344 * _1854) + _1844;
        float _2350 = (_2344 * _1857) + _1848;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2351;
        float _2355 = _2351 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 > _2355) || ((_2349 < _2353) || ((_2348 < _2353) || (_2348 > _2355))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2478 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2350, cbModelParam._m0[9u].z, fma(_2349, cbModelParam._m0[9u].y, _2348 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2350, cbModelParam._m0[10u].z, fma(_2349, cbModelParam._m0[10u].y, _2348 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2350, cbModelParam._m0[11u].z, fma(_2349, cbModelParam._m0[11u].y, _2348 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_13_35_ladder = _2478.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2478.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2478.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_13_35_ladder_2;
        _1875 = frontier_phi_13_35_ladder_1;
        _1877 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1793);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1971;
    float _1973;
    float _1975;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1935 = fma(_1047, cbModelParam._m0[21u].z, fma(_1043, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1039)) + cbModelParam._m0[21u].w;
        float _1939 = fma(_1047, cbModelParam._m0[22u].z, fma(_1043, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1039)) + cbModelParam._m0[22u].w;
        float _1943 = fma(_1047, cbModelParam._m0[23u].z, fma(_1043, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1039)) + cbModelParam._m0[23u].w;
        float _1946 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1949 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1952 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2092;
        if (_1946 > 0.0)
        {
            _2092 = abs((1.0 - _1935) / _1946);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1935 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2092 = frontier_phi_25_21_ladder;
        }
        float _2368;
        if (_1949 > 0.0)
        {
            _2368 = abs((1.0 - _1939) / _1949);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1939 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2368 = frontier_phi_37_32_ladder;
        }
        float _2581;
        if (_1952 > 0.0)
        {
            _2581 = abs((1.0 - _1943) / _1952);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1943 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2581 = frontier_phi_46_43_ladder;
        }
        float _2583 = isnan(_2368) ? _2092 : (isnan(_2092) ? _2368 : min(_2092, _2368));
        float _2584 = isnan(_2581) ? _2583 : (isnan(_2583) ? _2581 : min(_2583, _2581));
        float _2588 = (_2584 * _1946) + _1935;
        float _2589 = (_2584 * _1949) + _1939;
        float _2590 = (_2584 * _1952) + _1943;
        float _2591 = _2584 * 9.9999997473787516355514526367188e-05;
        float _2592 = (-1.0) - _2591;
        float _2594 = _2591 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2590 > _2594) || ((_2590 < _2592) || ((_2589 > _2594) || ((_2589 < _2592) || ((_2588 < _2592) || (_2588 > _2594))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2590, cbModelParam._m0[17u].z, fma(_2589, cbModelParam._m0[17u].y, _2588 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2590, cbModelParam._m0[18u].z, fma(_2589, cbModelParam._m0[18u].y, _2588 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2590, cbModelParam._m0[19u].z, fma(_2589, cbModelParam._m0[19u].y, _2588 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_22_46_ladder = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2789.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2789.x * cbModelParam._m0[1u].z;
        }
        _1971 = frontier_phi_22_46_ladder_2;
        _1973 = frontier_phi_22_46_ladder_1;
        _1975 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1955 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1882);
        _1971 = _1955.x * cbModelParam._m0[1u].z;
        _1973 = _1955.y * cbModelParam._m0[1u].z;
        _1975 = _1955.z * cbModelParam._m0[1u].z;
    }
    float _1988 = (((_1010 * _959) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1971 - _1873)) + _1873);
    float _1990 = (((_1010 * _961) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1973 - _1875)) + _1875);
    float _1992 = (((_1010 * _962) + _1011) * _975) * ((cbModelParam._m0[1u].w * (_1975 - _1877)) + _1877);
    float _1995 = fma(_1992, cbSceneParam._m0[89u].z, fma(_1990, cbSceneParam._m0[89u].y, _1988 * cbSceneParam._m0[89u].x));
    float _1998 = fma(_1992, cbSceneParam._m0[90u].z, fma(_1990, cbSceneParam._m0[90u].y, _1988 * cbSceneParam._m0[90u].x));
    float _2001 = fma(_1992, cbSceneParam._m0[91u].z, fma(_1990, cbSceneParam._m0[91u].y, _1988 * cbSceneParam._m0[91u].x));
    uvec4 _2011 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2013 = _2011.x * 14u;
    uint _2014 = _2013 + 13u;
    float _2021 = _975 + (-1.0);
    float _2026 = (cbLight._m0[_2014].x * _2021) + 1.0;
    float _2027 = (cbLight._m0[_2014].y * _2021) + 1.0;
    float _2028 = (cbLight._m0[_2014].z * _2021) + 1.0;
    float _2029 = (cbLight._m0[_2014].w * _2021) + 1.0;
    uint _2030 = _2013 + 5u;
    float _2036 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2040 = _2013 + 4u;
    float _2046 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2050 = _2013 | 1u;
    float _2061 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_809, _810, _811));
    float _2064 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_809, _810, _811));
    float _4206 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _4217 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2069 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * 0.3183098733425140380859375;
    float _2071 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2078 = ((cbLight._m0[_2030].x * _2036) * _2071) + ((cbLight._m0[_2040].x * _2046) * _2069);
    float _2079 = ((_2036 * cbLight._m0[_2030].y) * _2071) + ((_2046 * cbLight._m0[_2040].y) * _2069);
    float _2080 = ((_2036 * cbLight._m0[_2030].z) * _2071) + ((_2046 * cbLight._m0[_2040].z) * _2069);
    uvec4 _2084 = floatBitsToUint(cbLight._m0[_2013 + 12u]);
    bool _2086 = _2084.x == 0u;
    float _2097;
    float _2099;
    float _2101;
    if (_2086)
    {
        _2097 = _2078;
        _2099 = _2079;
        _2101 = _2080;
    }
    else
    {
        uint _2105 = _2013 + 6u;
        float _2121 = (dot(vec3(cbLight._m0[_2013 + 2u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4228 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _2124 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2097 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _2078;
        _2099 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _2079;
        _2101 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _2080;
    }
    bool _2104 = _2084.y == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2104)
    {
        _2142 = _2097;
        _2144 = _2099;
        _2146 = _2101;
    }
    else
    {
        uint _2312 = _2013 + 7u;
        float _2328 = (dot(vec3(cbLight._m0[_2013 + 3u].xyz), vec3(_809, _810, _811)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4244 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2331 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2142 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2097;
        _2144 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2099;
        _2146 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2101;
    }
    uint _2149 = _2013 + 8u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _812) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_2013].x + _889;
    float _2165 = cbLight._m0[_2013].y + _890;
    float _2166 = cbLight._m0[_2013].z + _891;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2013].xyz));
    float _4260 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2178 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _2179 = dot(vec3(_809, _810, _811), vec3(_2171, _2172, _2173));
    float _4282 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2171, _2172, _2173));
    float _4293 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2163 * _2163;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2199 = exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0);
    float _2200 = 0.959999978542327880859375 - _956;
    float _2202 = 0.959999978542327880859375 - _957;
    float _2203 = 0.959999978542327880859375 - _958;
    float _2210 = 1.0 - _2163;
    float _2221 = (0.5 / (((_2178 * ((_2177 * _2210) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2210) + _2163) * _2177))) * _2177;
    float _4304 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    uint _2234 = _2013 + 9u;
    float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _812) * 0.949999988079071044921875);
    float _2246 = _2245 * _2245;
    float _2247 = cbLight._m0[_2050].x + _889;
    float _2248 = cbLight._m0[_2050].y + _890;
    float _2249 = cbLight._m0[_2050].z + _891;
    float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
    float _2254 = _2253 * _2247;
    float _2255 = _2253 * _2248;
    float _2256 = _2253 * _2249;
    float _2257 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2050].xyz));
    float _4315 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2261 = dot(vec3(_809, _810, _811), vec3(_2254, _2255, _2256));
    float _4326 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2264 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2265 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2254, _2255, _2256));
    float _4337 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2269 = _2246 * _2246;
    float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
    float _2280 = exp2(log2(1.0 - (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) * 5.0);
    float _2287 = 1.0 - _2246;
    float _2297 = (0.5 / (((_2178 * ((_2260 * _2287) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2287) + _2246) * _2260))) * _2260;
    float _4348 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2299 = (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
    float _2309 = (((((_2280 * _2200) + _959) * cbLight._m0[_2234].x) * _2299) * _2036) + (((((_2199 * _2200) + _959) * cbLight._m0[_2149].x) * _2223) * _2046);
    float _2310 = (((((_2280 * _2202) + _961) * cbLight._m0[_2234].y) * _2299) * _2036) + (((((_2199 * _2202) + _961) * cbLight._m0[_2149].y) * _2223) * _2046);
    float _2311 = (((((_2280 * _2203) + _962) * cbLight._m0[_2234].z) * _2299) * _2036) + (((((_2199 * _2203) + _962) * cbLight._m0[_2149].z) * _2223) * _2046);
    float _2373;
    float _2375;
    float _2377;
    if (_2086)
    {
        _2373 = _2309;
        _2375 = _2310;
        _2377 = _2311;
    }
    else
    {
        uint _2379 = _2013 + 2u;
        uint _2383 = _2013 + 10u;
        float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _812) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2379].x + _889;
        float _2400 = cbLight._m0[_2379].y + _890;
        float _2401 = cbLight._m0[_2379].z + _891;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2379].xyz));
        float _4359 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2413 = dot(vec3(_809, _810, _811), vec3(_2406, _2407, _2408));
        float _4370 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2406, _2407, _2408));
        float _4381 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2432 = exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0);
        float _2439 = 1.0 - _2398;
        float _2449 = (0.5 / (((_2178 * ((_2412 * _2439) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2439) + _2398) * _2412))) * _2412;
        float _4392 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2451 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2452 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2373 = (((((_2432 * _2200) + _959) * cbLight._m0[_2383].x) * _2451) * _2452) + _2309;
        _2375 = (((((_2432 * _2202) + _961) * cbLight._m0[_2383].y) * _2451) * _2452) + _2310;
        _2377 = (((((_2432 * _2203) + _962) * cbLight._m0[_2383].z) * _2451) * _2452) + _2311;
    }
    float _2487;
    float _2489;
    float _2491;
    if (_2104)
    {
        _2487 = _2373;
        _2489 = _2375;
        _2491 = _2377;
    }
    else
    {
        uint _2498 = _2013 + 3u;
        uint _2502 = _2013 + 11u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _812) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _889;
        float _2519 = cbLight._m0[_2498].y + _890;
        float _2520 = cbLight._m0[_2498].z + _891;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2498].xyz));
        float _4408 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2532 = dot(vec3(_809, _810, _811), vec3(_2525, _2526, _2527));
        float _4419 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4430 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0);
        float _2558 = 1.0 - _2517;
        float _2568 = (0.5 / (((_2178 * ((_2531 * _2558) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2558) + _2517) * _2531))) * _2531;
        float _4441 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2570 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2571 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2487 = (((((_2551 * _2200) + _959) * cbLight._m0[_2502].x) * _2570) * _2571) + _2373;
        _2489 = (((((_2551 * _2202) + _961) * cbLight._m0[_2502].y) * _2570) * _2571) + _2375;
        _2491 = (((((_2551 * _2203) + _962) * cbLight._m0[_2502].z) * _2570) * _2571) + _2377;
    }
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_2011.y == 0u)
    {
        float _2646 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2646;
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2646;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2646;
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.x;
        uint _2673 = uint((float(_2661.y) * floor(float(uint(cbSceneParam._m0[85u].y * _898) / _2662))) + floor(float(uint(cbSceneParam._m0[85u].x * _897) / _2662)));
        float _2683 = (log2(_2649 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2684 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        uint _2687 = uint(isnan(14.0) ? _2684 : (isnan(_2684) ? 14.0 : min(_2684, 14.0)));
        uvec4 _2692 = texelFetch(g_lightClusterGridBuffer, int(((_2687 << 2u) + (_2673 << 6u)) >> 2u));
        uint _2693 = _2692.x;
        uint _2694 = _2661.z;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((((1u << ((_2694 >> 4u) & 15u)) + 4294967295u) & _2693) == 0u) || ((_2694 & 240u) == 0u))
        {
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
        }
        else
        {
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            uint _2945 = 0u;
            uint _2954;
            bool _2955;
            for (;;)
            {
                _2954 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                _2955 = _2954 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2955)
                {
                    frontier_phi_61_pred = _2939;
                    frontier_phi_61_pred_1 = _2944;
                    frontier_phi_61_pred_2 = _2943;
                    frontier_phi_61_pred_3 = _2942;
                    frontier_phi_61_pred_4 = _2941;
                    frontier_phi_61_pred_5 = _2940;
                }
                else
                {
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    uint _3069;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2954;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    for (;;)
                    {
                        uint _3073 = uint(findLSB(_3069)) + (_2945 << 5u);
                        uint _3070 = (_3069 + 4294967295u) & _3069;
                        uint _3075 = _3073 * 48u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3095 = (_3073 * 48u) + 4u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3114 = (_3073 * 48u) + 8u;
                        vec3 _3125 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x));
                        float _3129 = _3089.x - _2647;
                        float _3130 = _3089.y - _2648;
                        float _3131 = _3089.z - _2649;
                        float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                        float _3135 = inversesqrt(_3132);
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3139 = dot(vec3(_916, _919, _922), vec3(_3136, _3137, _3138));
                        float _3144 = 1.0 - (_3132 * _3089.w);
                        float _4467 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3146 = sqrt(_3132) * _3108.w;
                        float _3149 = 1.39999997615814208984375 / (_3146 + 1.39999997615814208984375);
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3139) + _3150;
                        float _3156 = _3146 * _3146;
                        float _3160 = ((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3145) / ((_3156 * 0.699999988079071044921875) + 1.0);
                        float _3164 = (-0.0) - _2647;
                        float _3165 = (-0.0) - _2648;
                        float _3166 = (-0.0) - _2649;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3181 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                        float _3182 = 1.0 - _991;
                        float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                        float _3190 = _3189 * _3189;
                        float _3191 = _3190 * _3190;
                        float _3192 = _3171 + _3136;
                        float _3193 = _3172 + _3137;
                        float _3194 = _3173 + _3138;
                        float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                        float _3202 = dot(vec3(_916, _919, _922), vec3(_3171, _3172, _3173));
                        float _4483 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                        float _3206 = dot(vec3(_916, _919, _922), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                        float _4494 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3209 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                        float _3214 = _3149 * _3190;
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3139) + _3215;
                        float _4505 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3219 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3220 = 1.0 - _3190;
                        float _3230 = (0.5 / (((_3219 * ((_3205 * _3220) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3219 * _3220) + _3190) * _3205))) * _3219;
                        float _4516 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3241 = (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) / ((_3213 * _3213) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125))) * _3145;
                        _2998 = (_3160 * _3108.x) + _3066;
                        _2999 = (_3160 * _3108.y) + _3067;
                        _3000 = (_3160 * _3108.z) + _3068;
                        _2995 = (_3241 * _3125.x) + _3063;
                        _2996 = (_3241 * _3125.y) + _3064;
                        _2997 = (_3241 * _3125.z) + _3065;
                        if (_3070 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3070;
                        }
                    }
                    frontier_phi_61_pred = _2995;
                    frontier_phi_61_pred_1 = _3000;
                    frontier_phi_61_pred_2 = _2999;
                    frontier_phi_61_pred_3 = _2998;
                    frontier_phi_61_pred_4 = _2997;
                    frontier_phi_61_pred_5 = _2996;
                }
                _2795 = frontier_phi_61_pred;
                _2805 = frontier_phi_61_pred_1;
                _2803 = frontier_phi_61_pred_2;
                _2801 = frontier_phi_61_pred_3;
                _2799 = frontier_phi_61_pred_4;
                _2797 = frontier_phi_61_pred_5;
                uint _2946 = _2945 + 1u;
                if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2939 = _2795;
                    _2940 = _2797;
                    _2941 = _2799;
                    _2942 = _2801;
                    _2943 = _2803;
                    _2944 = _2805;
                    _2945 = _2946;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
        }
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.z;
        uint _2811 = (_2809 >> 8u) & 15u;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((4294967295u << _2811) & _2693) == 0u)
        {
            _2907 = _2794;
            _2909 = _2796;
            _2911 = _2798;
            _2913 = _2800;
            _2915 = _2802;
            _2917 = _2804;
        }
        else
        {
            float _2932 = inversesqrt(dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649)));
            float _2933 = _2932 * _2647;
            float _2934 = _2932 * _2648;
            float _2935 = _2932 * _2649;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2811 < ((_2809 >> 12u) & 15u))
            {
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _3046 = _2794;
                float _3047 = _2796;
                float _3048 = _2798;
                float _3049 = _2800;
                float _3050 = _2802;
                float _3051 = _2804;
                uint _3052 = _2811;
                uint _3061;
                bool _3062;
                for (;;)
                {
                    _3061 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                    _3062 = _3061 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3062)
                    {
                        frontier_phi_67_pred = _3049;
                        frontier_phi_67_pred_1 = _3050;
                        frontier_phi_67_pred_2 = _3051;
                        frontier_phi_67_pred_3 = _3048;
                        frontier_phi_67_pred_4 = _3047;
                        frontier_phi_67_pred_5 = _3046;
                    }
                    else
                    {
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3259 = _3046;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        uint _3265 = _3061;
                        uint _3266;
                        vec4 _3291;
                        float _3292;
                        vec4 _3307;
                        vec3 _3319;
                        vec4 _3334;
                        vec4 _3349;
                        float _3395;
                        bool _3396;
                        for (;;)
                        {
                            uint _3276 = ((_3052 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3265));
                            _3266 = (_3265 + 4294967295u) & _3265;
                            uint _3278 = _3276 * 40u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            _3292 = _3291.w;
                            uint _3294 = (_3276 * 40u) + 4u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3276 * 40u) + 8u;
                            _3319 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x));
                            uint _3321 = (_3276 * 40u) + 16u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3336 = (_3276 * 40u) + 20u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3276 * 40u) + 24u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3370 = (_3276 * 40u) + 28u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            _3395 = fma(_2649, _3383.z, fma(_2648, _3383.y, _3383.x * _2647)) + _3383.w;
                            _3396 = !((fma(_2649, _3364.z, fma(_2648, _3364.y, _3364.x * _2647)) + _3364.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3396)
                            {
                                float _3423 = _3291.x - _2647;
                                float _3424 = _3291.y - _2648;
                                float _3425 = _3291.z - _2649;
                                float _3426 = dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425));
                                float _3429 = inversesqrt(_3426);
                                float _3430 = _3429 * _3423;
                                float _3431 = _3429 * _3424;
                                float _3432 = _3429 * _3425;
                                float _3436 = 1.0 - (_3426 / (_3292 * _3292));
                                float _4527 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3441 = sqrt(_3426) * _3307.w;
                                float _3443 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                                float _3444 = _3443 * _3443;
                                float _3447 = ((1.0 - _3444) * dot(vec3(_3430, _3431, _3432), vec3(_916, _919, _922))) + _3444;
                                float _3450 = _3441 * _3441;
                                float _3454 = (fma(_2649, _3334.z, fma(_2648, _3334.y, _3334.x * _2647)) + _3334.w) / _3395;
                                float _3455 = (fma(_2649, _3349.z, fma(_2648, _3349.y, _3349.x * _2647)) + _3349.w) / _3395;
                                float _3459 = 1.0 - dot(vec2(_3454, _3455), vec2(_3454, _3455));
                                float _4543 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3460 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3461 = _3460 * (((isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0))) * _3437) / ((_3450 * 0.699999988079071044921875) + 1.0));
                                float _3473 = exp2(log2(1.0 / ((_3450 * 3.5) + 5.0)) * 0.25);
                                float _3474 = 1.0 - _991;
                                float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                                float _3482 = _3481 * _3481;
                                float _3483 = _3482 * _3482;
                                float _3484 = _3430 - _2933;
                                float _3485 = _3431 - _2934;
                                float _3486 = _3432 - _2935;
                                float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                                float _3494 = dot(vec3(_916, _919, _922), vec3((-0.0) - _2933, (-0.0) - _2934, (-0.0) - _2935));
                                float _4554 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3497 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3498 = dot(vec3(_916, _919, _922), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                                float _4565 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3501 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                                float _3506 = _3443 * _3482;
                                float _3507 = _3506 * _3506;
                                float _3513 = ((1.0 - _3507) * dot(vec3(_916, _919, _922), vec3(_3430, _3431, _3432))) + _3507;
                                float _4576 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3515 = 1.0 - _3482;
                                float _3525 = (0.5 / (((_3514 * ((_3497 * _3515) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3482) * _3497))) * _3514;
                                float _4587 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3535 = (_3460 * _3437) * (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3505 * _3505) * ((_3450 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3535 * _3319.x;
                                frontier_phi_73_pred_1 = _3535 * _3319.y;
                                frontier_phi_73_pred_2 = _3461 * _3307.z;
                                frontier_phi_73_pred_3 = _3461 * _3307.y;
                                frontier_phi_73_pred_4 = _3461 * _3307.x;
                                frontier_phi_73_pred_5 = _3535 * _3319.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3539 = frontier_phi_73_pred;
                            _3540 = frontier_phi_73_pred_1;
                            _3544 = frontier_phi_73_pred_2;
                            _3543 = frontier_phi_73_pred_3;
                            _3542 = frontier_phi_73_pred_4;
                            _3541 = frontier_phi_73_pred_5;
                            _3249 = _3542 + _3262;
                            _3250 = _3543 + _3263;
                            _3251 = _3544 + _3264;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            if (_3266 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3266;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3249;
                        frontier_phi_67_pred_1 = _3250;
                        frontier_phi_67_pred_2 = _3251;
                        frontier_phi_67_pred_3 = _3248;
                        frontier_phi_67_pred_4 = _3247;
                        frontier_phi_67_pred_5 = _3246;
                    }
                    _2914 = frontier_phi_67_pred;
                    _2916 = frontier_phi_67_pred_1;
                    _2918 = frontier_phi_67_pred_2;
                    _2912 = frontier_phi_67_pred_3;
                    _2910 = frontier_phi_67_pred_4;
                    _2908 = frontier_phi_67_pred_5;
                    uint _3053 = _3052 + 1u;
                    if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3046 = _2908;
                        _3047 = _2910;
                        _3048 = _2912;
                        _3049 = _2914;
                        _3050 = _2916;
                        _3051 = _2918;
                        _3052 = _3053;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2916;
                frontier_phi_55_56_ladder_1 = _2918;
                frontier_phi_55_56_ladder_2 = _2914;
                frontier_phi_55_56_ladder_3 = _2912;
                frontier_phi_55_56_ladder_4 = _2910;
                frontier_phi_55_56_ladder_5 = _2908;
            }
            else
            {
                frontier_phi_55_56_ladder = _2802;
                frontier_phi_55_56_ladder_1 = _2804;
                frontier_phi_55_56_ladder_2 = _2800;
                frontier_phi_55_56_ladder_3 = _2798;
                frontier_phi_55_56_ladder_4 = _2796;
                frontier_phi_55_56_ladder_5 = _2794;
            }
            _2907 = frontier_phi_55_56_ladder_5;
            _2909 = frontier_phi_55_56_ladder_4;
            _2911 = frontier_phi_55_56_ladder_3;
            _2913 = frontier_phi_55_56_ladder_2;
            _2915 = frontier_phi_55_56_ladder;
            _2917 = frontier_phi_55_56_ladder_1;
        }
        float _2922 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _2706 = (_2922 * _2913) + _2142;
        _2708 = (_2922 * _2915) + _2144;
        _2710 = (_2922 * _2917) + _2146;
        _2712 = ((_2907 * _959) * _2922) + _2487;
        _2714 = ((_2909 * _961) * _2922) + _2489;
        _2716 = ((_2911 * _962) * _2922) + _2491;
    }
    else
    {
        _2706 = _2142;
        _2708 = _2144;
        _2710 = _2146;
        _2712 = _2487;
        _2714 = _2489;
        _2716 = _2491;
    }
    float _4603 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4614 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4625 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    uint _2736 = _244 + 6u;
    float _2744 = _897 / cbSceneParam._m0[86u].x;
    float _2745 = _898 / cbSceneParam._m0[86u].y;
    vec4 _2759 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, (log2((isnan(cbSceneParam._m0[77u].w) ? _831 : (isnan(_831) ? cbSceneParam._m0[77u].w : min(_831, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2761 = _2759.x;
    float _2762 = _2759.y;
    float _2763 = _2759.z;
    float _2764 = _2759.w;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_831 > cbSceneParam._m0[78u].w)
    {
        float _2819 = isnan(_831) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _831 : min(cbSceneParam._m0[80u].w, _831));
        float _2820 = _2819 / _831;
        float _2831 = _2820 * _882;
        float _2832 = _883 * _2820;
        float _2833 = (-0.0) - _2832;
        float _2835 = _2820 * _884;
        float _2837 = (cbSceneParam._m0[77u].w * _2833) / _2819;
        float _2838 = _2837 + cbSceneParam._m0[79u].w;
        float _2839 = cbSceneParam._m0[79u].w - _2832;
        float _2845 = sqrt(((_2831 * _2831) + (_2832 * _2832)) + (_2835 * _2835));
        float _2848 = (1.0 - (cbSceneParam._m0[77u].w / _2819)) * _2845;
        float _2853 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2855 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3008;
        if (abs((_2833 - _2837) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3008 = ((((_2838 > 0.0) ? exp2(_2853 * _2838) : (2.0 - exp2(_2855 * _2838))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2848;
        }
        else
        {
            float _2968 = 1.0 / cbSceneParam._m0[80u].x;
            float _2969 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : max(_2838, _2839));
            float _2970 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : min(_2838, _2839));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            _3008 = ((abs(_2845 / _2833) * cbSceneParam._m0[80u].y) * ((((_2979 - _2980) * 2.0) - ((exp2(_2853 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0)))) - exp2(_2853 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))))) * _2968)) - ((exp2(_2855 * _2979) - exp2(_2855 * _2980)) * _2968))) + (_2848 * cbSceneParam._m0[80u].z);
        }
        vec4 _3010 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, 1.0), 0.0);
        float _3019 = exp2((_3008 * (-1.44269502162933349609375)) * (1.0 - _3010.w));
        float _3020 = log2(_3019);
        float _3036 = log2(_2764);
        _2857 = (exp2(_3036 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].x)) * _3010.x) / cbSceneParam._m0[78u].x)) + _2761;
        _2859 = (exp2(_3036 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].y)) * _3010.y) / cbSceneParam._m0[78u].y)) + _2762;
        _2861 = (exp2(_3036 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].z)) * _3010.z) / cbSceneParam._m0[78u].z)) + _2763;
        _2863 = _3019 * _2764;
    }
    else
    {
        _2857 = _2761;
        _2859 = _2762;
        _2861 = _2763;
        _2863 = _2764;
    }
    float _2875 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2876 = _2875 == 3.0;
    float _2877 = log2(_2863);
    float _2884 = exp2(_2877 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2706 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _975))) + ((_2712 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2885 = exp2(_2877 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2708 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _975))) + ((_2714 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2886 = exp2(_2877 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2710 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _975))) + ((_2716 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1782)) * cbPerFrame._m0[3u].x));
    float _2895 = (_2875 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2895 * (_2876 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.y = _2895 * (_2876 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.z = _2895 * (_2876 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.w = cbInstanceData._m0[_2736].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2736].w;
}


