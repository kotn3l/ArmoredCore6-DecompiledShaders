#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1611;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _257 = _256 * _248;
    float _258 = _256 * _249;
    float _259 = _256 * _250;
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = _263 * NORMAL.x;
    float _265 = _263 * NORMAL.y;
    float _266 = _263 * NORMAL.z;
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = _270 * TANGENT.x;
    float _272 = _270 * TANGENT.y;
    float _273 = _270 * TANGENT.z;
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4217 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4228 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4239 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4250 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _493 = (_486 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _494 = (_486 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _495 = (_486 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4261 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _569 = (_351.x * cbMtdParam._m0[9u].x) * ((_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493);
    float _570 = (_351.y * cbMtdParam._m0[9u].y) * ((_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494);
    float _571 = (_351.z * cbMtdParam._m0[9u].z) * ((_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495);
    float _575 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _569;
    float _578 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _570;
    float _581 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _571;
    float _589 = (((_569 - _575) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) + _575) * 4.55000019073486328125;
    float _591 = (((_570 - _578) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) + _578) * 4.55000019073486328125;
    float _593 = (((_571 - _581) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) + _581) * 4.55000019073486328125;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _677 = _673.z;
    float _684 = ((_656.x - _675) * _486) + _675;
    float _685 = ((_656.y - _676) * _486) + _676;
    float _686 = ((_656.z - _677) * _486) + _677;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _711 = ((_698.z - _686) * _559) + _686;
    float _714 = ((((_698.x - _684) * _559) + _684) * 2.0) + (-1.0);
    float _715 = ((((_698.y - _685) * _559) + _685) * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4272 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _751 = (_714 + ((((_631.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_739.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _752 = (_715 + ((((_631.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_739.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _755 = fma(_721, _264, fma(_752, _271, _751 * _257));
    float _758 = fma(_721, _265, fma(_752, _272, _751 * _258));
    float _761 = fma(_721, _266, fma(_752, _273, _751 * _259));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _794 = _792.x;
    float _795 = 1.0 - _794;
    float _804 = (cbMtdParam._m0[19u].x + dot(vec4(_765 * _755, _765 * _758, _765 * _761, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_794 - _795) * cbMtdParam._m0[24u].z) + _795) * cbMtdParam._m0[21u].z);
    float _4283 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _805 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _807 = (-0.0) - cbMtdParam._m0[24u].x;
    float _809 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
    float _817 = _805 - ((_805 * TEXCOORD_8.x) * _810);
    float _818 = _805 - ((_805 * TEXCOORD_8.y) * _810);
    float _819 = _805 - ((_805 * TEXCOORD_8.z) * _810);
    float _826 = (_817 * ((_612.x * cbMtdParam._m0[18u].x) - _589)) + _589;
    float _827 = (_818 * ((_612.y * cbMtdParam._m0[18u].y) - _591)) + _591;
    float _828 = (_819 * ((_612.z * cbMtdParam._m0[18u].z) - _593)) + _593;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _842 = _840.x;
    float _843 = 1.0 - _842;
    float _869 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_842 - _843) * cbMtdParam._m0[24u].w) + _843) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4304 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _870 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _878 = ((((cbMtdParam._m0[10u].x - _826) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _870) + _826;
    float _879 = ((((cbMtdParam._m0[10u].y - _827) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _870) + _827;
    float _880 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _828)) * _870) + _828;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _908 = _906.x;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _908) * _486) + _908;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _925) * _559) + _925;
    float _946 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _942) * cbMtdParam._m0[19u].z) + _942;
    float _948 = _946 - (_946 * _817);
    float _950 = _948 - (_948 * _870);
    float _955 = (((_631.z - _711) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _711;
    float _959 = ((_739.z - _955) * cbMtdParam._m0[19u].w) + _955;
    vec4 _973 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _980 = (_973.x * 2.0) + (-1.0);
    float _981 = (_973.y * 2.0) + (-1.0);
    float _982 = dot(vec2(_980, _981), vec2(_980, _981));
    float _4315 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _990 = ((_973.z - _959) * _817) + _959;
    float _993 = ((cbMtdParam._m0[23u].x - _990) * _870) + _990;
    vec4 _1016 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1022 = (_1016.x * 2.0) + (-1.0);
    float _1023 = (_1016.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4326 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1039 = ((sqrt(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) - _721) * _819) + _721;
    float _1042 = (((_980 - _751) * _817) + _751) + (cbMtdParam._m0[21u].x * _751);
    float _1043 = (((_981 - _752) * _818) + _752) + (cbMtdParam._m0[21u].x * _752);
    float _1054 = (((_1022 - _1042) + (_1042 * cbMtdParam._m0[22u].z)) * _870) + _1042;
    float _1055 = (((_1023 - _1043) + (_1043 * cbMtdParam._m0[22u].z)) * _870) + _1043;
    float _1056 = (_870 * (sqrt(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) - _1039)) + _1039;
    float _1058 = cbMtdParam._m0[22u].x + _739.w;
    float _1061 = fma(_1056, _264, fma(_1055, _271, _1054 * _257));
    float _1064 = fma(_1056, _265, fma(_1055, _272, _1054 * _258));
    float _1067 = fma(_1056, _266, fma(_1055, _273, _1054 * _259));
    float _1071 = inversesqrt(dot(vec3(_1061, _1064, _1067), vec3(_1061, _1064, _1067)));
    float _1072 = _1071 * _1061;
    float _1073 = _1071 * _1064;
    float _1074 = _1071 * _1067;
    float _4337 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1075 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4359 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4370 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4381 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4392 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _1080 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _1094 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1144 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1134);
    float _1145 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1134);
    float _1146 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1134);
    float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
    float _1151 = _1144 * _1150;
    float _1152 = _1145 * _1150;
    float _1153 = _1146 * _1150;
    float _1159 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1160 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1178 = fma(_1074, cbSceneParam._m0[5u].z, fma(_1073, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1072));
    float _1181 = fma(_1074, cbSceneParam._m0[6u].z, fma(_1073, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1072));
    float _1184 = fma(_1074, cbSceneParam._m0[7u].z, fma(_1073, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1072));
    uint _1198 = (_295 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1204 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * cbInstanceData._m0[_1198].x;
    float _1205 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * cbInstanceData._m0[_1198].y;
    float _1206 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * cbInstanceData._m0[_1198].z;
    float _4403 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1207 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _4414 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _1208 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1209 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _1210 = 1.0 - _1080;
    float _1211 = _1207 * _1210;
    float _1212 = _1208 * _1210;
    float _1213 = _1209 * _1210;
    float _1218 = (_1207 + (-0.039999999105930328369140625)) * _1080;
    float _1219 = (_1208 + (-0.039999999105930328369140625)) * _1080;
    float _1220 = (_1209 + (-0.039999999105930328369140625)) * _1080;
    float _1221 = _1218 + 0.039999999105930328369140625;
    float _1223 = _1219 + 0.039999999105930328369140625;
    float _1224 = _1220 + 0.039999999105930328369140625;
    vec4 _1233 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1159, cbSceneParam._m0[86u].y * _1160));
    float _1237 = ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * TEXCOORD_5.w) * _1233.x;
    float _1238 = dot(vec3(_1072, _1073, _1074), vec3(_1151, _1152, _1153));
    float _1241 = _1238 * 2.0;
    float _1245 = (_1241 * _1072) - _1151;
    float _1246 = (_1241 * _1073) - _1152;
    float _1247 = (_1241 * _1074) - _1153;
    float _1251 = abs(dot(vec3(_1151, _1152, _1153), vec3(_1072, _1073, _1074)));
    float _4436 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
    float _1253 = sqrt(_1075);
    float _1266 = exp2((_1253 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1253 * 3.0));
    float _1272 = (1.0 - _1266) * ((_1253 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1273 = _1266 * _1253;
    float _1301 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1309 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1610;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1335 = fma(_1309, cbModelParam._m0[26u].z, fma(_1305, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1301));
        float _1339 = fma(_1309, cbModelParam._m0[27u].z, fma(_1305, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1301));
        float _1343 = fma(_1309, cbModelParam._m0[28u].z, fma(_1305, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1301));
        float _1368 = _1301 + _1072;
        float _1369 = _1305 + _1073;
        float _1370 = _1309 + _1074;
        float _1380 = fma(_1370, cbModelParam._m0[26u].z, fma(_1369, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1368)) - _1335;
        float _1381 = fma(_1370, cbModelParam._m0[27u].z, fma(_1369, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1368)) - _1339;
        float _1382 = fma(_1370, cbModelParam._m0[28u].z, fma(_1369, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1368)) - _1343;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1335 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1339 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[34u].z) + ((((((_1343 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1438 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1404.x + (-0.5));
        float _1440 = _1438 * (_1404.y + (-0.5));
        float _1441 = _1438 * (_1404.z + (-0.5));
        float _1448 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1411.x + (-0.5));
        float _1450 = _1448 * (_1411.y + (-0.5));
        float _1451 = _1448 * (_1411.z + (-0.5));
        float _1458 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1418.x + (-0.5));
        float _1460 = _1458 * (_1418.y + (-0.5));
        float _1461 = _1458 * (_1418.z + (-0.5));
        float _1468 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1425.x + (-0.5));
        float _1470 = _1468 * (_1425.y + (-0.5));
        float _1471 = _1468 * (_1425.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1492 = (dot(vec3(_1072, _1073, _1074), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1502 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4484 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1504 + 1.0))) + _1509) * _1472;
        float _1519 = _1440 * 0.5;
        float _1520 = _1450 * 0.5;
        float _1521 = _1460 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_1072, _1073, _1074), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4517 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1546 + 1.0))) + _1551) * _1473;
        float _1561 = _1441 * 0.5;
        float _1562 = _1451 * 0.5;
        float _1563 = _1461 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_1072, _1073, _1074), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4550 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1588 + 1.0))) + _1593) * _1474;
        _1610 = _1441;
        _1612 = _1440;
        _1613 = _1439;
        _1614 = _1451;
        _1615 = _1450;
        _1616 = _1449;
        _1617 = _1461;
        _1618 = _1460;
        _1619 = _1459;
        _1620 = _1474;
        _1621 = _1473;
        _1622 = _1472;
        _1623 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1624 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1625 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1611;
        _1612 = _1611;
        _1613 = _1611;
        _1614 = _1611;
        _1615 = _1611;
        _1616 = _1611;
        _1617 = _1611;
        _1618 = _1611;
        _1619 = _1611;
        _1620 = _1611;
        _1621 = _1611;
        _1622 = _1611;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1649 = fma(_1309, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301));
        float _1653 = fma(_1309, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301));
        float _1657 = fma(_1309, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301));
        float _1680 = _1301 + _1072;
        float _1681 = _1305 + _1073;
        float _1682 = _1309 + _1074;
        float _1692 = fma(_1682, cbModelParam._m0[30u].z, fma(_1681, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1680)) - _1649;
        float _1693 = fma(_1682, cbModelParam._m0[31u].z, fma(_1681, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1680)) - _1653;
        float _1694 = fma(_1682, cbModelParam._m0[32u].z, fma(_1681, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1680)) - _1657;
        float _1698 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
        float _1711 = ((_1698 * _1692) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1649 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1712 = ((_1698 * _1693) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1653 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1713 = ((_1698 * _1694) / cbModelParam._m0[35u].z) + ((((((_1657 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1736 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        float _1748 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1715.x + (-0.5));
        float _1750 = _1748 * (_1715.y + (-0.5));
        float _1751 = _1748 * (_1715.z + (-0.5));
        float _1758 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1722.x + (-0.5));
        float _1760 = _1758 * (_1722.y + (-0.5));
        float _1761 = _1758 * (_1722.z + (-0.5));
        float _1768 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1729.x + (-0.5));
        float _1770 = _1768 * (_1729.y + (-0.5));
        float _1771 = _1768 * (_1729.z + (-0.5));
        float _1778 = exp2((_1736.w + (-0.5)) * 20.0) * 2.0;
        float _1779 = _1778 * (_1736.x + (-0.5));
        float _1780 = _1778 * (_1736.y + (-0.5));
        float _1781 = _1778 * (_1736.z + (-0.5));
        float _1782 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1783 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1784 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1785 = _1749 * 0.5;
        float _1786 = _1759 * 0.5;
        float _1787 = _1769 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_1072, _1073, _1074), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4591 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1782 + 9.9999997473787516355514526367188e-06);
        float _4602 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4613 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_1812 + 1.0))) + _1817) * _1782;
        float _1827 = _1750 * 0.5;
        float _1828 = _1760 * 0.5;
        float _1829 = _1770 * 0.5;
        float _1830 = dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829));
        float _1835 = (_1830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1830);
        float _1843 = (dot(vec3(_1072, _1073, _1074), vec3(_1835 * _1827, _1835 * _1828, _1835 * _1829)) + 1.0) * 0.5;
        float _4624 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1852 = sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829)) / (_1783 + 9.9999997473787516355514526367188e-06);
        float _4635 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1854 = _1853 * 2.0;
        float _1858 = (1.0 - _1853) / (_1853 + 1.0);
        float _4646 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1868 = ((((1.0 - _1859) * (_1854 + 2.0)) * exp2(log2(isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_1854 + 1.0))) + _1859) * _1783;
        float _1869 = _1751 * 0.5;
        float _1870 = _1761 * 0.5;
        float _1871 = _1771 * 0.5;
        float _1872 = dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871));
        float _1877 = (_1872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1872);
        float _1885 = (dot(vec3(_1072, _1073, _1074), vec3(_1877 * _1869, _1877 * _1870, _1877 * _1871)) + 1.0) * 0.5;
        float _4657 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871)) / (_1784 + 9.9999997473787516355514526367188e-06);
        float _4668 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _1896 = _1895 * 2.0;
        float _1900 = (1.0 - _1895) / (_1895 + 1.0);
        float _4679 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _1910 = ((((1.0 - _1901) * (_1896 + 2.0)) * exp2(log2(isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_1896 + 1.0))) + _1901) * _1784;
        _1918 = _1751;
        _1919 = _1750;
        _1920 = _1749;
        _1921 = _1761;
        _1922 = _1760;
        _1923 = _1759;
        _1924 = _1771;
        _1925 = _1770;
        _1926 = _1769;
        _1927 = _1784;
        _1928 = _1783;
        _1929 = _1782;
        _1930 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
        _1931 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)));
        _1932 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)));
    }
    else
    {
        _1918 = _1611;
        _1919 = _1611;
        _1920 = _1611;
        _1921 = _1611;
        _1922 = _1611;
        _1923 = _1611;
        _1924 = _1611;
        _1925 = _1611;
        _1926 = _1611;
        _1927 = _1611;
        _1928 = _1611;
        _1929 = _1611;
        _1930 = 0.0;
        _1931 = 0.0;
        _1932 = 0.0;
    }
    float _1942 = (cbModelParam._m0[1u].x * (_1930 - _1623)) + _1623;
    float _1943 = (cbModelParam._m0[1u].x * (_1931 - _1624)) + _1624;
    float _1944 = (cbModelParam._m0[1u].x * (_1932 - _1625)) + _1625;
    float _1965 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1942));
    float _1986 = _1245 * 0.5;
    float _1987 = _1246 * 0.5;
    float _1988 = _1247 * 0.5;
    float _1989 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1920, _1923, _1926, _1929));
    float _1992 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1919, _1922, _1925, _1928));
    float _1995 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1918, _1921, _1924, _1927));
    float _2029;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2002 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1610, _1614, _1617, _1620));
        float _2006 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1612, _1615, _1618, _1621));
        float _2010 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1613, _1616, _1619, _1622));
        float _2017 = dot(vec4(cbModelParam._m0[39u]), vec4(_1986, _1987, _1988, 1.0));
        _2029 = dot(vec3(isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2017) ? 0.0 : (isnan(0.0) ? _2017 : max(0.0, _2017))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2029 = 1.0;
    }
    float _2040;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2031 = dot(vec4(cbModelParam._m0[40u]), vec4(_1986, _1987, _1988, 1.0));
        _2040 = dot(vec3(isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2031) ? 0.0 : (isnan(0.0) ? _2031 : max(0.0, _2031))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2040 = 1.0;
    }
    float _2044 = (_2040 * cbModelParam._m0[1u].x) + (_2029 * (1.0 - cbModelParam._m0[1u].x));
    float _2054 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1075);
    float _2055 = isnan(_2054) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2054 : min(cbModelParam._m0[25u].z, _2054));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2102 = fma(_1309, cbModelParam._m0[13u].z, fma(_1305, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1301)) + cbModelParam._m0[13u].w;
        float _2106 = fma(_1309, cbModelParam._m0[14u].z, fma(_1305, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1301)) + cbModelParam._m0[14u].w;
        float _2110 = fma(_1309, cbModelParam._m0[15u].z, fma(_1305, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1301)) + cbModelParam._m0[15u].w;
        float _2113 = fma(_1247, cbModelParam._m0[13u].z, fma(_1246, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1245));
        float _2116 = fma(_1247, cbModelParam._m0[14u].z, fma(_1246, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1245));
        float _2119 = fma(_1247, cbModelParam._m0[15u].z, fma(_1246, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1245));
        float _2147;
        if (_2113 > 0.0)
        {
            _2147 = abs((1.0 - _2102) / _2113);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2102 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2147 = frontier_phi_14_12_ladder;
        }
        float _2318;
        if (_2116 > 0.0)
        {
            _2318 = abs((1.0 - _2106) / _2116);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2106 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2318 = frontier_phi_23_19_ladder;
        }
        float _2613;
        if (_2119 > 0.0)
        {
            _2613 = abs((1.0 - _2110) / _2119);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2110 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2613 = frontier_phi_35_30_ladder;
        }
        float _2615 = isnan(_2318) ? _2147 : (isnan(_2147) ? _2318 : min(_2147, _2318));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _2113) + _2102;
        float _2621 = (_2616 * _2116) + _2106;
        float _2622 = (_2616 * _2119) + _2110;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2623;
        float _2627 = _2623 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 > _2627) || ((_2621 < _2625) || ((_2620 < _2625) || (_2620 > _2627))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2622, cbModelParam._m0[9u].z, fma(_2621, cbModelParam._m0[9u].y, _2620 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2622, cbModelParam._m0[10u].z, fma(_2621, cbModelParam._m0[10u].y, _2620 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2622, cbModelParam._m0[11u].z, fma(_2621, cbModelParam._m0[11u].y, _2620 * cbModelParam._m0[11u].x))), _2055);
            frontier_phi_13_35_ladder = _2767.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2767.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2767.x * cbModelParam._m0[1u].y;
        }
        _2135 = frontier_phi_13_35_ladder_2;
        _2137 = frontier_phi_13_35_ladder_1;
        _2139 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1245, _1246, _1247), _2055);
        _2135 = _2123.x * cbModelParam._m0[1u].y;
        _2137 = _2123.y * cbModelParam._m0[1u].y;
        _2139 = _2123.z * cbModelParam._m0[1u].y;
    }
    float _2143 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1075);
    float _2144 = isnan(_2143) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2143 : min(cbModelParam._m0[25u].w, _2143));
    float _2233;
    float _2235;
    float _2237;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2197 = fma(_1309, cbModelParam._m0[21u].z, fma(_1305, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1301)) + cbModelParam._m0[21u].w;
        float _2201 = fma(_1309, cbModelParam._m0[22u].z, fma(_1305, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1301)) + cbModelParam._m0[22u].w;
        float _2205 = fma(_1309, cbModelParam._m0[23u].z, fma(_1305, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1301)) + cbModelParam._m0[23u].w;
        float _2208 = fma(_1247, cbModelParam._m0[21u].z, fma(_1246, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1245));
        float _2211 = fma(_1247, cbModelParam._m0[22u].z, fma(_1246, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1245));
        float _2214 = fma(_1247, cbModelParam._m0[23u].z, fma(_1246, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1245));
        float _2323;
        if (_2208 > 0.0)
        {
            _2323 = abs((1.0 - _2197) / _2208);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2197 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2323 = frontier_phi_25_21_ladder;
        }
        float _2640;
        if (_2211 > 0.0)
        {
            _2640 = abs((1.0 - _2201) / _2211);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2201 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2640 = frontier_phi_37_32_ladder;
        }
        float _2978;
        if (_2214 > 0.0)
        {
            _2978 = abs((1.0 - _2205) / _2214);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2214 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2205 + 1.0) / _2214);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2978 = frontier_phi_47_44_ladder;
        }
        float _2980 = isnan(_2640) ? _2323 : (isnan(_2323) ? _2640 : min(_2323, _2640));
        float _2981 = isnan(_2978) ? _2980 : (isnan(_2980) ? _2978 : min(_2980, _2978));
        float _2985 = (_2981 * _2208) + _2197;
        float _2986 = (_2981 * _2211) + _2201;
        float _2987 = (_2981 * _2214) + _2205;
        float _2988 = _2981 * 9.9999997473787516355514526367188e-05;
        float _2989 = (-1.0) - _2988;
        float _2991 = _2988 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2987 > _2991) || ((_2987 < _2989) || ((_2986 > _2991) || ((_2986 < _2989) || ((_2985 < _2989) || (_2985 > _2991))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3109 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2987, cbModelParam._m0[17u].z, fma(_2986, cbModelParam._m0[17u].y, _2985 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2987, cbModelParam._m0[18u].z, fma(_2986, cbModelParam._m0[18u].y, _2985 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2987, cbModelParam._m0[19u].z, fma(_2986, cbModelParam._m0[19u].y, _2985 * cbModelParam._m0[19u].x))), _2144);
            frontier_phi_22_47_ladder = _3109.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3109.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3109.x * cbModelParam._m0[1u].z;
        }
        _2233 = frontier_phi_22_47_ladder_2;
        _2235 = frontier_phi_22_47_ladder_1;
        _2237 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2217 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1245, _1246, _1247), _2144);
        _2233 = _2217.x * cbModelParam._m0[1u].z;
        _2235 = _2217.y * cbModelParam._m0[1u].z;
        _2237 = _2217.z * cbModelParam._m0[1u].z;
    }
    float _2250 = (((_1272 * _1221) + _1273) * _1237) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2252 = (((_1272 * _1223) + _1273) * _1237) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2254 = (((_1272 * _1224) + _1273) * _1237) * ((cbModelParam._m0[1u].w * (_2237 - _2139)) + _2139);
    float _2257 = fma(_2254, cbSceneParam._m0[89u].z, fma(_2252, cbSceneParam._m0[89u].y, _2250 * cbSceneParam._m0[89u].x));
    float _2260 = fma(_2254, cbSceneParam._m0[90u].z, fma(_2252, cbSceneParam._m0[90u].y, _2250 * cbSceneParam._m0[90u].x));
    float _2263 = fma(_2254, cbSceneParam._m0[91u].z, fma(_2252, cbSceneParam._m0[91u].y, _2250 * cbSceneParam._m0[91u].x));
    float _2297 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2309 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2310 = _2297 / _2309;
    float _2311 = _2301 / _2309;
    float _2312 = _2305 / _2309;
    float _2459;
    float _2460;
    float _2461;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2339 = ((uint(_2312 > cbSceneParam._m0[59u].y) + uint(_2312 > cbSceneParam._m0[59u].x)) + uint(_2312 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2340 = _2339 + 43u;
        uint _2348 = _2339 + 44u;
        uint _2356 = _2339 + 45u;
        uint _2364 = _2339 + 46u;
        float _2375 = fma(_2309, cbSceneParam._m0[_2340].w, fma(_2305, cbSceneParam._m0[_2340].z, fma(_2301, cbSceneParam._m0[_2340].y, _2297 * cbSceneParam._m0[_2340].x)));
        float _2379 = fma(_2309, cbSceneParam._m0[_2348].w, fma(_2305, cbSceneParam._m0[_2348].z, fma(_2301, cbSceneParam._m0[_2348].y, _2297 * cbSceneParam._m0[_2348].x)));
        float _2387 = fma(_2309, cbSceneParam._m0[_2364].w, fma(_2305, cbSceneParam._m0[_2364].z, fma(_2301, cbSceneParam._m0[_2364].y, _2297 * cbSceneParam._m0[_2364].x)));
        float _2392 = cbSceneParam._m0[33u].z * _2387;
        float _2394 = cbSceneParam._m0[33u].w * _2387;
        float _2397 = fma(_2309, cbSceneParam._m0[_2356].w, fma(_2305, cbSceneParam._m0[_2356].z, fma(_2301, cbSceneParam._m0[_2356].y, _2297 * cbSceneParam._m0[_2356].x))) / _2387;
        float _2445 = (cbSceneParam._m0[33u].x - sqrt(((_2311 * _2311) + (_2310 * _2310)) + (_2312 * _2312))) * cbSceneParam._m0[33u].y;
        float _4805 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2452 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2392 + _2375) / _2387, (_2394 + _2379) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2394 + _2375) / _2387, (_2379 - _2392) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2375 - _2392) / _2387, (_2379 - _2394) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2375 - _2394) / _2387, (_2392 + _2379) / _2387), _2397), 0.0)).x), vec4(0.25)));
        _2459 = 1.0 - (_2452 * cbSceneParam._m0[34u].x);
        _2460 = 1.0 - (_2452 * cbSceneParam._m0[34u].y);
        _2461 = 1.0 - (_2452 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2459 = 1.0;
        _2460 = 1.0;
        _2461 = 1.0;
    }
    float _2525;
    float _2527;
    float _2529;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2513 = fma(_2309, cbSceneParam._m0[63u].w, fma(_2305, cbSceneParam._m0[63u].z, fma(_2301, cbSceneParam._m0[63u].y, _2297 * cbSceneParam._m0[63u].x)));
        float _2514 = fma(_2309, cbSceneParam._m0[60u].w, fma(_2305, cbSceneParam._m0[60u].z, fma(_2301, cbSceneParam._m0[60u].y, _2297 * cbSceneParam._m0[60u].x))) / _2513;
        float _2515 = fma(_2309, cbSceneParam._m0[61u].w, fma(_2305, cbSceneParam._m0[61u].z, fma(_2301, cbSceneParam._m0[61u].y, _2297 * cbSceneParam._m0[61u].x))) / _2513;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2514 >= cbSceneParam._m0[64u].x) && (_2515 >= cbSceneParam._m0[64u].y)) && (_2514 <= cbSceneParam._m0[64u].z)) && (_2515 <= cbSceneParam._m0[64u].w))
        {
            float _2653 = fma(_2309, cbSceneParam._m0[62u].w, fma(_2305, cbSceneParam._m0[62u].z, fma(_2301, cbSceneParam._m0[62u].y, _2297 * cbSceneParam._m0[62u].x))) / _2513;
            float _2657 = isnan(cbSceneParam._m0[41u].w) ? _2653 : (isnan(_2653) ? cbSceneParam._m0[41u].w : max(_2653, cbSceneParam._m0[41u].w));
            float _2700 = (cbSceneParam._m0[33u].x - sqrt(((_2311 * _2311) + (_2310 * _2310)) + (_2312 * _2312))) * cbSceneParam._m0[33u].y;
            float _4821 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
            float _2707 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2514, cbSceneParam._m0[33u].w + _2515), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2514, _2515 - cbSceneParam._m0[33u].z), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2514 - cbSceneParam._m0[33u].z, _2515 - cbSceneParam._m0[33u].w), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2514 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2515), _2657), 0.0)).x), vec4(0.25)));
            float _2711 = 1.0 - (_2707 * cbSceneParam._m0[34u].x);
            float _2712 = 1.0 - (_2707 * cbSceneParam._m0[34u].y);
            float _2713 = 1.0 - (_2707 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2713) ? _2461 : (isnan(_2461) ? _2713 : min(_2461, _2713));
            frontier_phi_34_33_ladder_1 = isnan(_2712) ? _2460 : (isnan(_2460) ? _2712 : min(_2460, _2712));
            frontier_phi_34_33_ladder_2 = isnan(_2711) ? _2459 : (isnan(_2459) ? _2711 : min(_2459, _2711));
        }
        else
        {
            frontier_phi_34_33_ladder = _2461;
            frontier_phi_34_33_ladder_1 = _2460;
            frontier_phi_34_33_ladder_2 = _2459;
        }
        _2525 = frontier_phi_34_33_ladder_2;
        _2527 = frontier_phi_34_33_ladder_1;
        _2529 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2525 = _2459;
        _2527 = _2460;
        _2529 = _2461;
    }
    uvec4 _2534 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2536 = _2534.x * 14u;
    uint _2537 = _2536 + 13u;
    float _2544 = _1237 + (-1.0);
    float _2549 = (cbLight._m0[_2537].x * _2544) + 1.0;
    float _2550 = (cbLight._m0[_2537].y * _2544) + 1.0;
    float _2551 = (cbLight._m0[_2537].z * _2544) + 1.0;
    float _2552 = (cbLight._m0[_2537].w * _2544) + 1.0;
    uint _2553 = _2536 + 5u;
    float _2559 = isnan(1.0) ? _2550 : (isnan(_2550) ? 1.0 : min(_2550, 1.0));
    uint _2563 = _2536 + 4u;
    float _2572 = isnan(1.0) ? _2549 : (isnan(_2549) ? 1.0 : min(_2549, 1.0));
    uint _2576 = _2536 | 1u;
    float _2587 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_1072, _1073, _1074));
    float _2590 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_1072, _1073, _1074));
    float _4857 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _4868 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2595 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * 0.3183098733425140380859375;
    float _2597 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * 0.3183098733425140380859375;
    float _2604 = ((cbLight._m0[_2553].x * _2559) * _2597) + (((cbLight._m0[_2563].x * _2525) * _2572) * _2595);
    float _2605 = ((_2559 * cbLight._m0[_2553].y) * _2597) + (((cbLight._m0[_2563].y * _2527) * _2572) * _2595);
    float _2606 = ((_2559 * cbLight._m0[_2553].z) * _2597) + (((cbLight._m0[_2563].z * _2529) * _2572) * _2595);
    uvec4 _2610 = floatBitsToUint(cbLight._m0[_2536 + 12u]);
    bool _2612 = _2610.x == 0u;
    float _2714;
    float _2716;
    float _2718;
    if (_2612)
    {
        _2714 = _2604;
        _2716 = _2605;
        _2718 = _2606;
    }
    else
    {
        uint _2722 = _2536 + 6u;
        float _2738 = (dot(vec3(cbLight._m0[_2536 + 2u].xyz), vec3(_1072, _1073, _1074)) * 0.5) + 0.5;
        float _2739 = _2738 * _2738;
        float _4879 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2740 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _2741 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _2714 = (((cbLight._m0[_2722].x * 0.3183098733425140380859375) * _2740) * _2741) + _2604;
        _2716 = (((cbLight._m0[_2722].y * 0.3183098733425140380859375) * _2740) * _2741) + _2605;
        _2718 = (((cbLight._m0[_2722].z * 0.3183098733425140380859375) * _2740) * _2741) + _2606;
    }
    bool _2721 = _2610.y == 0u;
    float _2776;
    float _2778;
    float _2780;
    if (_2721)
    {
        _2776 = _2714;
        _2778 = _2716;
        _2780 = _2718;
    }
    else
    {
        uint _2949 = _2536 + 7u;
        float _2965 = (dot(vec3(cbLight._m0[_2536 + 3u].xyz), vec3(_1072, _1073, _1074)) * 0.5) + 0.5;
        float _2966 = _2965 * _2965;
        float _4895 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2967 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2968 = isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0));
        _2776 = (((cbLight._m0[_2949].x * 0.3183098733425140380859375) * _2967) * _2968) + _2714;
        _2778 = (((cbLight._m0[_2949].y * 0.3183098733425140380859375) * _2967) * _2968) + _2716;
        _2780 = (((cbLight._m0[_2949].z * 0.3183098733425140380859375) * _2967) * _2968) + _2718;
    }
    uint _2783 = _2536 + 8u;
    float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _1075) * 0.949999988079071044921875);
    float _2797 = _2796 * _2796;
    float _2798 = cbLight._m0[_2536].x + _1151;
    float _2799 = cbLight._m0[_2536].y + _1152;
    float _2800 = cbLight._m0[_2536].z + _1153;
    float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
    float _2805 = _2804 * _2798;
    float _2806 = _2804 * _2799;
    float _2807 = _2804 * _2800;
    float _2808 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2536].xyz));
    float _4911 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2811 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _4922 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _2812 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
    float _2813 = dot(vec3(_1072, _1073, _1074), vec3(_2805, _2806, _2807));
    float _4933 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2816 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
    float _2817 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2805, _2806, _2807));
    float _4944 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2821 = _2797 * _2797;
    float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
    float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) * 5.0);
    float _2834 = 0.959999978542327880859375 - _1218;
    float _2836 = 0.959999978542327880859375 - _1219;
    float _2837 = 0.959999978542327880859375 - _1220;
    float _2844 = 1.0 - _2797;
    float _2855 = (0.5 / (((_2812 * ((_2811 * _2844) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2844) + _2797) * _2811))) * _2811;
    float _4955 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2857 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
    uint _2871 = _2536 + 9u;
    float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _1075) * 0.949999988079071044921875);
    float _2883 = _2882 * _2882;
    float _2884 = cbLight._m0[_2576].x + _1151;
    float _2885 = cbLight._m0[_2576].y + _1152;
    float _2886 = cbLight._m0[_2576].z + _1153;
    float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
    float _2891 = _2890 * _2884;
    float _2892 = _2890 * _2885;
    float _2893 = _2890 * _2886;
    float _2894 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2576].xyz));
    float _4966 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2897 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
    float _2898 = dot(vec3(_1072, _1073, _1074), vec3(_2891, _2892, _2893));
    float _4977 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2901 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
    float _2902 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2891, _2892, _2893));
    float _4988 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
    float _2906 = _2883 * _2883;
    float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
    float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) * 5.0);
    float _2924 = 1.0 - _2883;
    float _2934 = (0.5 / (((_2812 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2924) + _2883) * _2897))) * _2897;
    float _4999 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
    float _2936 = (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
    float _2946 = (((((_2917 * _2834) + _1221) * cbLight._m0[_2871].x) * _2936) * _2559) + ((((cbLight._m0[_2783].x * _2525) * ((_2833 * _2834) + _1221)) * _2857) * _2572);
    float _2947 = (((((_2917 * _2836) + _1223) * cbLight._m0[_2871].y) * _2936) * _2559) + ((((cbLight._m0[_2783].y * _2527) * ((_2833 * _2836) + _1223)) * _2857) * _2572);
    float _2948 = (((((_2917 * _2837) + _1224) * cbLight._m0[_2871].z) * _2936) * _2559) + ((((cbLight._m0[_2783].z * _2529) * ((_2833 * _2837) + _1224)) * _2857) * _2572);
    float _3004;
    float _3006;
    float _3008;
    if (_2612)
    {
        _3004 = _2946;
        _3006 = _2947;
        _3008 = _2948;
    }
    else
    {
        uint _3010 = _2536 + 2u;
        uint _3014 = _2536 + 10u;
        float _3028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3010].w)) * _1075) * 0.949999988079071044921875);
        float _3029 = _3028 * _3028;
        float _3030 = cbLight._m0[_3010].x + _1151;
        float _3031 = cbLight._m0[_3010].y + _1152;
        float _3032 = cbLight._m0[_3010].z + _1153;
        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
        float _3037 = _3036 * _3030;
        float _3038 = _3036 * _3031;
        float _3039 = _3036 * _3032;
        float _3040 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_3010].xyz));
        float _5010 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
        float _3044 = dot(vec3(_1072, _1073, _1074), vec3(_3037, _3038, _3039));
        float _5021 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3047 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
        float _3048 = dot(vec3(cbLight._m0[_3010].xyz), vec3(_3037, _3038, _3039));
        float _5032 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3052 = _3029 * _3029;
        float _3056 = ((_3047 * _3047) * (_3052 + (-1.0))) + 1.0;
        float _3063 = exp2(log2(1.0 - (isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0)))) * 5.0);
        float _3070 = 1.0 - _3029;
        float _3080 = (0.5 / (((_2812 * ((_3043 * _3070) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _3070) + _3029) * _3043))) * _3043;
        float _5043 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3082 = (isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0))) * (_3052 / ((_3056 * _3056) * 3.141590118408203125));
        float _3083 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _3004 = (((((_3063 * _2834) + _1221) * cbLight._m0[_3014].x) * _3082) * _3083) + _2946;
        _3006 = (((((_3063 * _2836) + _1223) * cbLight._m0[_3014].y) * _3082) * _3083) + _2947;
        _3008 = (((((_3063 * _2837) + _1224) * cbLight._m0[_3014].z) * _3082) * _3083) + _2948;
    }
    float _3114;
    float _3116;
    float _3118;
    if (_2721)
    {
        _3114 = _3004;
        _3116 = _3006;
        _3118 = _3008;
    }
    else
    {
        uint _3125 = _2536 + 3u;
        uint _3129 = _2536 + 11u;
        float _3143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3125].w)) * _1075) * 0.949999988079071044921875);
        float _3144 = _3143 * _3143;
        float _3145 = cbLight._m0[_3125].x + _1151;
        float _3146 = cbLight._m0[_3125].y + _1152;
        float _3147 = cbLight._m0[_3125].z + _1153;
        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
        float _3152 = _3151 * _3145;
        float _3153 = _3151 * _3146;
        float _3154 = _3151 * _3147;
        float _3155 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_3125].xyz));
        float _5059 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
        float _3158 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
        float _3159 = dot(vec3(_1072, _1073, _1074), vec3(_3152, _3153, _3154));
        float _5070 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
        float _3162 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
        float _3163 = dot(vec3(cbLight._m0[_3125].xyz), vec3(_3152, _3153, _3154));
        float _5081 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
        float _3167 = _3144 * _3144;
        float _3171 = ((_3162 * _3162) * (_3167 + (-1.0))) + 1.0;
        float _3178 = exp2(log2(1.0 - (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) * 5.0);
        float _3185 = 1.0 - _3144;
        float _3195 = (0.5 / (((_2812 * ((_3158 * _3185) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _3185) + _3144) * _3158))) * _3158;
        float _5092 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
        float _3197 = (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3167 / ((_3171 * _3171) * 3.141590118408203125));
        float _3198 = isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0));
        _3114 = (((((_3178 * _2834) + _1221) * cbLight._m0[_3129].x) * _3197) * _3198) + _3004;
        _3116 = (((((_3178 * _2836) + _1223) * cbLight._m0[_3129].y) * _3197) * _3198) + _3006;
        _3118 = (((((_3178 * _2837) + _1224) * cbLight._m0[_3129].z) * _3197) * _3198) + _3008;
    }
    float _3264;
    float _3266;
    float _3268;
    float _3270;
    float _3272;
    float _3274;
    if (_2534.y == 0u)
    {
        uvec4 _3219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3220 = _3219.x;
        uint _3231 = uint((float(_3219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1160) / _3220))) + floor(float(uint(cbSceneParam._m0[85u].x * _1159) / _3220)));
        float _3241 = (log2(_2312 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3242 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
        uint _3245 = uint(isnan(14.0) ? _3242 : (isnan(_3242) ? 14.0 : min(_3242, 14.0)));
        uvec4 _3250 = texelFetch(g_lightClusterGridBuffer, int(((_3245 << 2u) + (_3231 << 6u)) >> 2u));
        uint _3251 = _3250.x;
        uint _3252 = _3219.z;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        if (((((1u << ((_3252 >> 4u) & 15u)) + 4294967295u) & _3251) == 0u) || ((_3252 & 240u) == 0u))
        {
            _3331 = 0.0;
            _3333 = 0.0;
            _3335 = 0.0;
            _3337 = 0.0;
            _3339 = 0.0;
            _3341 = 0.0;
        }
        else
        {
            float _3332;
            float _3334;
            float _3336;
            float _3338;
            float _3340;
            float _3342;
            float _3475 = 0.0;
            float _3476 = 0.0;
            float _3477 = 0.0;
            float _3478 = 0.0;
            float _3479 = 0.0;
            float _3480 = 0.0;
            uint _3481 = 0u;
            uint _3490;
            bool _3491;
            for (;;)
            {
                _3490 = texelFetch(g_lightClassification, int((((_3245 << 5u) + (_3231 << 9u)) + (_3481 << 2u)) >> 2u)).x;
                _3491 = _3490 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3491)
                {
                    frontier_phi_66_pred = _3480;
                    frontier_phi_66_pred_1 = _3479;
                    frontier_phi_66_pred_2 = _3478;
                    frontier_phi_66_pred_3 = _3477;
                    frontier_phi_66_pred_4 = _3476;
                    frontier_phi_66_pred_5 = _3475;
                }
                else
                {
                    float _3599;
                    float _3600;
                    float _3601;
                    float _3602;
                    float _3603;
                    float _3604;
                    uint _3605;
                    _3599 = _3475;
                    _3600 = _3476;
                    _3601 = _3477;
                    _3602 = _3478;
                    _3603 = _3479;
                    _3604 = _3480;
                    _3605 = _3490;
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    for (;;)
                    {
                        uint _3609 = uint(findLSB(_3605)) + (_3481 << 5u);
                        uint _3606 = (_3605 + 4294967295u) & _3605;
                        uint _3611 = _3609 * 48u;
                        vec4 _3625 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3611)).x, texelFetch(g_PointLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3611 + 3u)).x));
                        uint _3631 = (_3609 * 48u) + 4u;
                        vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3631)).x, texelFetch(g_PointLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3631 + 3u)).x));
                        uint _3650 = (_3609 * 48u) + 8u;
                        vec3 _3661 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3650)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 2u)).x));
                        float _3665 = _3625.x - _2310;
                        float _3666 = _3625.y - _2311;
                        float _3667 = _3625.z - _2312;
                        float _3668 = dot(vec3(_3665, _3666, _3667), vec3(_3665, _3666, _3667));
                        float _3671 = inversesqrt(_3668);
                        float _3672 = _3671 * _3665;
                        float _3673 = _3671 * _3666;
                        float _3674 = _3671 * _3667;
                        float _3675 = dot(vec3(_1178, _1181, _1184), vec3(_3672, _3673, _3674));
                        float _3680 = 1.0 - (_3668 * _3625.w);
                        float _5118 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                        float _3681 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                        float _3682 = sqrt(_3668) * _3644.w;
                        float _3685 = 1.39999997615814208984375 / (_3682 + 1.39999997615814208984375);
                        float _3686 = _3685 * _3685;
                        float _3689 = ((1.0 - _3686) * _3675) + _3686;
                        float _3692 = _3682 * _3682;
                        float _3696 = ((isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0))) * _3681) / ((_3692 * 0.699999988079071044921875) + 1.0);
                        float _3700 = (-0.0) - _2310;
                        float _3701 = (-0.0) - _2311;
                        float _3702 = (-0.0) - _2312;
                        float _3706 = inversesqrt(dot(vec3(_3700, _3701, _3702), vec3(_3700, _3701, _3702)));
                        float _3707 = _3706 * _3700;
                        float _3708 = _3706 * _3701;
                        float _3709 = _3706 * _3702;
                        float _3716 = exp2(log2(1.0 / ((_3692 * 3.5) + 5.0)) * 0.25);
                        float _3717 = 1.0 - _1253;
                        float _3724 = sqrt(1.0 - ((1.0 - (_3717 * _3717)) * (1.0 - (_3716 * _3716))));
                        float _3725 = _3724 * _3724;
                        float _3726 = _3725 * _3725;
                        float _3727 = _3707 + _3672;
                        float _3728 = _3708 + _3673;
                        float _3729 = _3709 + _3674;
                        float _3733 = inversesqrt(dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729)));
                        float _3737 = dot(vec3(_1178, _1181, _1184), vec3(_3707, _3708, _3709));
                        float _5134 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                        float _3740 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                        float _3741 = dot(vec3(_1178, _1181, _1184), vec3(_3733 * _3727, _3733 * _3728, _3733 * _3729));
                        float _5145 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                        float _3744 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                        float _3748 = ((_3744 * _3744) * (_3726 + (-1.0))) + 1.0;
                        float _3749 = _3685 * _3725;
                        float _3750 = _3749 * _3749;
                        float _3753 = ((1.0 - _3750) * _3675) + _3750;
                        float _5156 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                        float _3754 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                        float _3755 = 1.0 - _3725;
                        float _3765 = (0.5 / (((_3754 * ((_3740 * _3755) + _3725)) + 9.9999999392252902907785028219223e-09) + (((_3754 * _3755) + _3725) * _3740))) * _3754;
                        float _5167 = isnan(0.0) ? _3765 : (isnan(_3765) ? 0.0 : max(_3765, 0.0));
                        float _3776 = (((_3726 * 3.1415927410125732421875) * (isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0)))) / ((_3748 * _3748) * ((_3692 * 2.1991131305694580078125) + 3.141590118408203125))) * _3681;
                        _3534 = (_3696 * _3644.x) + _3602;
                        _3535 = (_3696 * _3644.y) + _3603;
                        _3536 = (_3696 * _3644.z) + _3604;
                        _3531 = (_3776 * _3661.x) + _3599;
                        _3532 = (_3776 * _3661.y) + _3600;
                        _3533 = (_3776 * _3661.z) + _3601;
                        if (_3606 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3599 = _3531;
                            _3600 = _3532;
                            _3601 = _3533;
                            _3602 = _3534;
                            _3603 = _3535;
                            _3604 = _3536;
                            _3605 = _3606;
                        }
                    }
                    frontier_phi_66_pred = _3536;
                    frontier_phi_66_pred_1 = _3535;
                    frontier_phi_66_pred_2 = _3534;
                    frontier_phi_66_pred_3 = _3533;
                    frontier_phi_66_pred_4 = _3532;
                    frontier_phi_66_pred_5 = _3531;
                }
                _3342 = frontier_phi_66_pred;
                _3340 = frontier_phi_66_pred_1;
                _3338 = frontier_phi_66_pred_2;
                _3336 = frontier_phi_66_pred_3;
                _3334 = frontier_phi_66_pred_4;
                _3332 = frontier_phi_66_pred_5;
                uint _3482 = _3481 + 1u;
                if (_3482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3475 = _3332;
                    _3476 = _3334;
                    _3477 = _3336;
                    _3478 = _3338;
                    _3479 = _3340;
                    _3480 = _3342;
                    _3481 = _3482;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3331 = _3332;
            _3333 = _3334;
            _3335 = _3336;
            _3337 = _3338;
            _3339 = _3340;
            _3341 = _3342;
        }
        uvec4 _3345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3346 = _3345.z;
        uint _3348 = (_3346 >> 8u) & 15u;
        float _3443;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        if (((4294967295u << _3348) & _3251) == 0u)
        {
            _3443 = _3331;
            _3445 = _3333;
            _3447 = _3335;
            _3449 = _3337;
            _3451 = _3339;
            _3453 = _3341;
        }
        else
        {
            float _3468 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
            float _3469 = _3468 * _2310;
            float _3470 = _3468 * _2311;
            float _3471 = _3468 * _2312;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3348 < ((_3346 >> 12u) & 15u))
            {
                float _3444;
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3454;
                float _3582 = _3331;
                float _3583 = _3333;
                float _3584 = _3335;
                float _3585 = _3337;
                float _3586 = _3339;
                float _3587 = _3341;
                uint _3588 = _3348;
                uint _3597;
                bool _3598;
                for (;;)
                {
                    _3597 = texelFetch(g_lightClassification, int((((_3245 << 5u) + (_3231 << 9u)) + (_3588 << 2u)) >> 2u)).x;
                    _3598 = _3597 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3598)
                    {
                        frontier_phi_72_pred = _3587;
                        frontier_phi_72_pred_1 = _3586;
                        frontier_phi_72_pred_2 = _3585;
                        frontier_phi_72_pred_3 = _3584;
                        frontier_phi_72_pred_4 = _3583;
                        frontier_phi_72_pred_5 = _3582;
                    }
                    else
                    {
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _4074;
                        float _4075;
                        float _4076;
                        float _4077;
                        float _4078;
                        float _4079;
                        float _3794 = _3582;
                        float _3795 = _3583;
                        float _3796 = _3584;
                        float _3797 = _3585;
                        float _3798 = _3586;
                        float _3799 = _3587;
                        uint _3800 = _3597;
                        uint _3801;
                        vec4 _3826;
                        float _3827;
                        vec4 _3842;
                        vec3 _3854;
                        vec4 _3869;
                        vec4 _3884;
                        float _3930;
                        bool _3931;
                        for (;;)
                        {
                            uint _3811 = ((_3588 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3800));
                            _3801 = (_3800 + 4294967295u) & _3800;
                            uint _3813 = _3811 * 40u;
                            _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            _3827 = _3826.w;
                            uint _3829 = (_3811 * 40u) + 4u;
                            _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            uint _3844 = (_3811 * 40u) + 8u;
                            _3854 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 2u)).x));
                            uint _3856 = (_3811 * 40u) + 16u;
                            _3869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 3u)).x));
                            uint _3871 = (_3811 * 40u) + 20u;
                            _3884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 3u)).x));
                            uint _3886 = (_3811 * 40u) + 24u;
                            vec4 _3899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3886 + 3u)).x));
                            uint _3905 = (_3811 * 40u) + 28u;
                            vec4 _3918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3905 + 3u)).x));
                            _3930 = fma(_2312, _3918.z, fma(_2311, _3918.y, _3918.x * _2310)) + _3918.w;
                            _3931 = !((fma(_2312, _3899.z, fma(_2311, _3899.y, _3899.x * _2310)) + _3899.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3931)
                            {
                                float _3958 = _3826.x - _2310;
                                float _3959 = _3826.y - _2311;
                                float _3960 = _3826.z - _2312;
                                float _3961 = dot(vec3(_3958, _3959, _3960), vec3(_3958, _3959, _3960));
                                float _3964 = inversesqrt(_3961);
                                float _3965 = _3964 * _3958;
                                float _3966 = _3964 * _3959;
                                float _3967 = _3964 * _3960;
                                float _3971 = 1.0 - (_3961 / (_3827 * _3827));
                                float _5178 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3972 = isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0));
                                float _3976 = sqrt(_3961) * _3842.w;
                                float _3978 = 1.39999997615814208984375 / (_3976 + 1.39999997615814208984375);
                                float _3979 = _3978 * _3978;
                                float _3982 = ((1.0 - _3979) * dot(vec3(_3965, _3966, _3967), vec3(_1178, _1181, _1184))) + _3979;
                                float _3985 = _3976 * _3976;
                                float _3989 = (fma(_2312, _3869.z, fma(_2311, _3869.y, _3869.x * _2310)) + _3869.w) / _3930;
                                float _3990 = (fma(_2312, _3884.z, fma(_2311, _3884.y, _3884.x * _2310)) + _3884.w) / _3930;
                                float _3994 = 1.0 - dot(vec2(_3989, _3990), vec2(_3989, _3990));
                                float _5194 = isnan(0.0) ? _3994 : (isnan(_3994) ? 0.0 : max(_3994, 0.0));
                                float _3995 = isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0));
                                float _3996 = _3995 * (((isnan(0.0) ? _3982 : (isnan(_3982) ? 0.0 : max(_3982, 0.0))) * _3972) / ((_3985 * 0.699999988079071044921875) + 1.0));
                                float _4008 = exp2(log2(1.0 / ((_3985 * 3.5) + 5.0)) * 0.25);
                                float _4009 = 1.0 - _1253;
                                float _4016 = sqrt(1.0 - ((1.0 - (_4009 * _4009)) * (1.0 - (_4008 * _4008))));
                                float _4017 = _4016 * _4016;
                                float _4018 = _4017 * _4017;
                                float _4019 = _3965 - _3469;
                                float _4020 = _3966 - _3470;
                                float _4021 = _3967 - _3471;
                                float _4025 = inversesqrt(dot(vec3(_4019, _4020, _4021), vec3(_4019, _4020, _4021)));
                                float _4029 = dot(vec3(_1178, _1181, _1184), vec3((-0.0) - _3469, (-0.0) - _3470, (-0.0) - _3471));
                                float _5205 = isnan(0.0) ? _4029 : (isnan(_4029) ? 0.0 : max(_4029, 0.0));
                                float _4032 = isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0));
                                float _4033 = dot(vec3(_1178, _1181, _1184), vec3(_4025 * _4019, _4025 * _4020, _4025 * _4021));
                                float _5216 = isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0));
                                float _4036 = isnan(1.0) ? _5216 : (isnan(_5216) ? 1.0 : min(_5216, 1.0));
                                float _4040 = ((_4036 * _4036) * (_4018 + (-1.0))) + 1.0;
                                float _4041 = _3978 * _4017;
                                float _4042 = _4041 * _4041;
                                float _4048 = ((1.0 - _4042) * dot(vec3(_1178, _1181, _1184), vec3(_3965, _3966, _3967))) + _4042;
                                float _5227 = isnan(0.0) ? _4048 : (isnan(_4048) ? 0.0 : max(_4048, 0.0));
                                float _4049 = isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0));
                                float _4050 = 1.0 - _4017;
                                float _4060 = (0.5 / (((_4049 * ((_4032 * _4050) + _4017)) + 9.9999999392252902907785028219223e-09) + (((_4049 * _4050) + _4017) * _4032))) * _4049;
                                float _5238 = isnan(0.0) ? _4060 : (isnan(_4060) ? 0.0 : max(_4060, 0.0));
                                float _4070 = (_3995 * _3972) * (((_4018 * 3.1415927410125732421875) * (isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0)))) / ((_4040 * _4040) * ((_3985 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3996 * _3842.y;
                                frontier_phi_78_pred_1 = _3996 * _3842.x;
                                frontier_phi_78_pred_2 = _4070 * _3854.z;
                                frontier_phi_78_pred_3 = _4070 * _3854.y;
                                frontier_phi_78_pred_4 = _4070 * _3854.x;
                                frontier_phi_78_pred_5 = _3996 * _3842.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4078 = frontier_phi_78_pred;
                            _4077 = frontier_phi_78_pred_1;
                            _4076 = frontier_phi_78_pred_2;
                            _4075 = frontier_phi_78_pred_3;
                            _4074 = frontier_phi_78_pred_4;
                            _4079 = frontier_phi_78_pred_5;
                            _3784 = _4077 + _3797;
                            _3785 = _4078 + _3798;
                            _3786 = _4079 + _3799;
                            _3781 = _4074 + _3794;
                            _3782 = _4075 + _3795;
                            _3783 = _4076 + _3796;
                            if (_3801 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3794 = _3781;
                                _3795 = _3782;
                                _3796 = _3783;
                                _3797 = _3784;
                                _3798 = _3785;
                                _3799 = _3786;
                                _3800 = _3801;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3786;
                        frontier_phi_72_pred_1 = _3785;
                        frontier_phi_72_pred_2 = _3784;
                        frontier_phi_72_pred_3 = _3783;
                        frontier_phi_72_pred_4 = _3782;
                        frontier_phi_72_pred_5 = _3781;
                    }
                    _3454 = frontier_phi_72_pred;
                    _3452 = frontier_phi_72_pred_1;
                    _3450 = frontier_phi_72_pred_2;
                    _3448 = frontier_phi_72_pred_3;
                    _3446 = frontier_phi_72_pred_4;
                    _3444 = frontier_phi_72_pred_5;
                    uint _3589 = _3588 + 1u;
                    if (_3589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3582 = _3444;
                        _3583 = _3446;
                        _3584 = _3448;
                        _3585 = _3450;
                        _3586 = _3452;
                        _3587 = _3454;
                        _3588 = _3589;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3454;
                frontier_phi_60_61_ladder_1 = _3452;
                frontier_phi_60_61_ladder_2 = _3448;
                frontier_phi_60_61_ladder_3 = _3446;
                frontier_phi_60_61_ladder_4 = _3444;
                frontier_phi_60_61_ladder_5 = _3450;
            }
            else
            {
                frontier_phi_60_61_ladder = _3341;
                frontier_phi_60_61_ladder_1 = _3339;
                frontier_phi_60_61_ladder_2 = _3335;
                frontier_phi_60_61_ladder_3 = _3333;
                frontier_phi_60_61_ladder_4 = _3331;
                frontier_phi_60_61_ladder_5 = _3337;
            }
            _3443 = frontier_phi_60_61_ladder_4;
            _3445 = frontier_phi_60_61_ladder_3;
            _3447 = frontier_phi_60_61_ladder_2;
            _3449 = frontier_phi_60_61_ladder_5;
            _3451 = frontier_phi_60_61_ladder_1;
            _3453 = frontier_phi_60_61_ladder;
        }
        float _3458 = isnan(1.0) ? _1237 : (isnan(_1237) ? 1.0 : min(_1237, 1.0));
        _3264 = (_3458 * _3449) + _2776;
        _3266 = (_3458 * _3451) + _2778;
        _3268 = (_3458 * _3453) + _2780;
        _3270 = ((_3443 * _1221) * _3458) + _3114;
        _3272 = ((_3445 * _1223) * _3458) + _3116;
        _3274 = ((_3447 * _1224) * _3458) + _3118;
    }
    else
    {
        _3264 = _2776;
        _3266 = _2778;
        _3268 = _2780;
        _3270 = _3114;
        _3272 = _3116;
        _3274 = _3118;
    }
    float _5254 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _5265 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
    float _5276 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    uint _3294 = _295 + 6u;
    float _3302 = _1159 / cbSceneParam._m0[86u].x;
    float _3303 = _1160 / cbSceneParam._m0[86u].y;
    vec4 _3317 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3302, _3303, (log2((isnan(cbSceneParam._m0[77u].w) ? _1094 : (isnan(_1094) ? cbSceneParam._m0[77u].w : min(_1094, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3319 = _3317.x;
    float _3320 = _3317.y;
    float _3321 = _3317.z;
    float _3322 = _3317.w;
    float _3393;
    float _3395;
    float _3397;
    float _3399;
    if (_1094 > cbSceneParam._m0[78u].w)
    {
        float _3356 = isnan(_1094) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1094 : min(cbSceneParam._m0[80u].w, _1094));
        float _3357 = _3356 / _1094;
        float _3368 = _3357 * _1144;
        float _3369 = _1145 * _3357;
        float _3370 = (-0.0) - _3369;
        float _3371 = _3357 * _1146;
        float _3373 = (cbSceneParam._m0[77u].w * _3370) / _3356;
        float _3374 = _3373 + cbSceneParam._m0[79u].w;
        float _3375 = cbSceneParam._m0[79u].w - _3369;
        float _3381 = sqrt(((_3368 * _3368) + (_3369 * _3369)) + (_3371 * _3371));
        float _3384 = (1.0 - (cbSceneParam._m0[77u].w / _3356)) * _3381;
        float _3389 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3391 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3544;
        if (abs((_3370 - _3373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3544 = ((((_3374 > 0.0) ? exp2(_3389 * _3374) : (2.0 - exp2(_3391 * _3374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3384;
        }
        else
        {
            float _3504 = 1.0 / cbSceneParam._m0[80u].x;
            float _3505 = isnan(_3375) ? _3374 : (isnan(_3374) ? _3375 : max(_3374, _3375));
            float _3506 = isnan(_3375) ? _3374 : (isnan(_3374) ? _3375 : min(_3374, _3375));
            float _3515 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : min(_3505, 0.0));
            float _3516 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : min(_3506, 0.0));
            _3544 = ((abs(_3381 / _3370) * cbSceneParam._m0[80u].y) * ((((_3515 - _3516) * 2.0) - ((exp2(_3389 * (isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0)))) - exp2(_3389 * (isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))))) * _3504)) - ((exp2(_3391 * _3515) - exp2(_3391 * _3516)) * _3504))) + (_3384 * cbSceneParam._m0[80u].z);
        }
        vec4 _3546 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3302, _3303, 1.0), 0.0);
        float _3555 = exp2((_3544 * (-1.44269502162933349609375)) * (1.0 - _3546.w));
        float _3556 = log2(_3555);
        float _3572 = log2(_3322);
        _3393 = (exp2(_3572 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3556 * cbSceneParam._m0[78u].x)) * _3546.x) / cbSceneParam._m0[78u].x)) + _3319;
        _3395 = (exp2(_3572 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3556 * cbSceneParam._m0[78u].y)) * _3546.y) / cbSceneParam._m0[78u].y)) + _3320;
        _3397 = (exp2(_3572 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3556 * cbSceneParam._m0[78u].z)) * _3546.z) / cbSceneParam._m0[78u].z)) + _3321;
        _3399 = _3555 * _3322;
    }
    else
    {
        _3393 = _3319;
        _3395 = _3320;
        _3397 = _3321;
        _3399 = _3322;
    }
    float _3411 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3412 = _3411 == 3.0;
    float _3413 = log2(_3399);
    float _3420 = exp2(_3413 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0))) * (_3264 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1237))) + ((_3270 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2044)) * cbPerFrame._m0[3u].x));
    float _3421 = exp2(_3413 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0))) * (_3266 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1237))) + ((_3272 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _2044)) * cbPerFrame._m0[3u].x));
    float _3422 = exp2(_3413 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0))) * (_3268 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1237))) + ((_3274 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _2044)) * cbPerFrame._m0[3u].x));
    float _3431 = (_3411 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3431 * (_3412 ? _3420 : (_3420 + (cbSceneParam._m0[72u].w * _3393)));
    SV_Target.y = _3431 * (_3412 ? _3421 : (_3421 + (cbSceneParam._m0[72u].w * _3395)));
    SV_Target.z = _3431 * (_3412 ? _3422 : (_3422 + (cbSceneParam._m0[72u].w * _3397)));
    SV_Target.w = cbInstanceData._m0[_3294].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3294].w;
}


