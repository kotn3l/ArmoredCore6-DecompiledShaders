#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1431;
float _3810;
float _3811;
float _3812;
float _3813;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _325 = _320.x * cbMtdParam._m0[11u].x;
    float _326 = _320.y * cbMtdParam._m0[11u].y;
    float _327 = _320.z * cbMtdParam._m0[11u].z;
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3822 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _443 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _296.x) * ((_430 * ((_346.x * cbMtdParam._m0[12u].x) - _325)) + _325);
    float _446 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _296.y) * ((_430 * ((_346.y * cbMtdParam._m0[12u].y) - _326)) + _326);
    float _449 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _296.z) * ((_430 * ((_346.z * cbMtdParam._m0[12u].z) - _327)) + _327);
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _518 = ((_488.z - _509) * _430) + _509;
    float _521 = ((((_488.x - _507) * _430) + _507) * 2.0) + (-1.0);
    float _523 = ((((_488.y - _508) * _430) + _508) * 2.0) + (-1.0);
    float _524 = dot(vec2(_521, _523), vec2(_521, _523));
    float _3833 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _529 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _557 = (((_545.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _521;
    float _558 = (((_545.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _523;
    float _561 = fma(_529, _245, fma(_558, _252, _557 * _238));
    float _564 = fma(_529, _246, fma(_558, _253, _557 * _239));
    float _567 = fma(_529, _247, fma(_558, _254, _557 * _240));
    float _571 = inversesqrt(dot(vec3(_561, _564, _567), vec3(_561, _564, _567)));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _610 = (cbMtdParam._m0[19u].x + dot(vec4(_571 * _561, _571 * _564, _571 * _567, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_600 - _601) * cbMtdParam._m0[24u].z) + _601) * cbMtdParam._m0[21u].z);
    float _3844 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _613 = (-0.0) - cbMtdParam._m0[24u].x;
    float _615 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
    float _623 = _611 - ((_611 * TEXCOORD_8.x) * _616);
    float _624 = _611 - ((_611 * TEXCOORD_8.y) * _616);
    float _625 = _611 - ((_611 * TEXCOORD_8.z) * _616);
    float _632 = (_623 * ((_468.x * cbMtdParam._m0[18u].x) - _443)) + _443;
    float _633 = (_624 * ((_468.y * cbMtdParam._m0[18u].y) - _446)) + _446;
    float _634 = (_625 * ((_468.z * cbMtdParam._m0[18u].z) - _449)) + _449;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _675 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3865 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _684 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _676) + _632;
    float _685 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _676) + _633;
    float _686 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _676) + _634;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _714 = _712.x;
    float _731 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _714) * _430) + _714;
    float _735 = ((_698.x - _731) * cbMtdParam._m0[19u].z) + _731;
    float _737 = _735 - (_735 * _623);
    float _739 = _737 - (_737 * _676);
    float _743 = (cbMtdParam._m0[19u].w * (_545.z - _518)) + _518;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3876 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = ((_757.z - _743) * _623) + _743;
    float _777 = ((cbMtdParam._m0[23u].x - _774) * _676) + _774;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _802 = (_796.x * 2.0) + (-1.0);
    float _803 = (_796.y * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _3887 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _819 = ((sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) - _529) * _625) + _529;
    float _822 = (((_764 - _557) * _623) + _557) + (cbMtdParam._m0[21u].x * _557);
    float _823 = (((_765 - _558) * _624) + _558) + (cbMtdParam._m0[21u].x * _558);
    float _834 = (((_802 - _822) + (_822 * cbMtdParam._m0[22u].z)) * _676) + _822;
    float _835 = (((_803 - _823) + (_823 * cbMtdParam._m0[22u].z)) * _676) + _823;
    float _836 = (_676 * (sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) - _819)) + _819;
    float _838 = cbMtdParam._m0[22u].x + _545.w;
    float _841 = fma(_836, _245, fma(_835, _252, _834 * _238));
    float _844 = fma(_836, _246, fma(_835, _253, _834 * _239));
    float _847 = fma(_836, _247, fma(_835, _254, _834 * _240));
    float _851 = inversesqrt(dot(vec3(_841, _844, _847), vec3(_841, _844, _847)));
    float _852 = _851 * _841;
    float _853 = _851 * _844;
    float _854 = _851 * _847;
    float _3898 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _855 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _3920 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3931 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3942 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3953 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _860 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _874 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _924 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _914);
    float _925 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _914);
    float _926 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _914);
    float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
    float _931 = _924 * _930;
    float _932 = _925 * _930;
    float _933 = _926 * _930;
    vec4 _938 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _940 = _938.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1112 = sqrt(((_924 * _924) + (_925 * _925)) + (_926 * _926));
        float _1118 = (cbMatDynParam._m0[5u].x * _1112) + cbMatDynParam._m0[5u].y;
        float _3964 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1123 = (cbMatDynParam._m0[5u].z * _1112) + cbMatDynParam._m0[5u].w;
        float _3975 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) - _1119)) + _1119) < ((_940 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _951 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _952 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _970 = fma(_854, cbSceneParam._m0[5u].z, fma(_853, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _852));
    float _973 = fma(_854, cbSceneParam._m0[6u].z, fma(_853, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _852));
    float _976 = fma(_854, cbSceneParam._m0[7u].z, fma(_853, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _852));
    uint _989 = _257 + 9u;
    uint _990 = _989 + uint(cbMatDynParam._m0[0u].w);
    float _996 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_990].x;
    float _997 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_990].y;
    float _998 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_990].z;
    float _3986 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1002 = 1.0 - _860;
    float _1003 = _999 * _1002;
    float _1004 = _1000 * _1002;
    float _1005 = _1001 * _1002;
    float _1010 = (_999 + (-0.039999999105930328369140625)) * _860;
    float _1011 = (_1000 + (-0.039999999105930328369140625)) * _860;
    float _1012 = (_1001 + (-0.039999999105930328369140625)) * _860;
    float _1013 = _1010 + 0.039999999105930328369140625;
    float _1015 = _1011 + 0.039999999105930328369140625;
    float _1016 = _1012 + 0.039999999105930328369140625;
    vec4 _1025 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _951, cbSceneParam._m0[86u].y * _952));
    float _1029 = ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * TEXCOORD_5.w) * _1025.x;
    float _1030 = dot(vec3(_852, _853, _854), vec3(_931, _932, _933));
    float _1033 = _1030 * 2.0;
    float _1037 = (_1033 * _852) - _931;
    float _1038 = (_1033 * _853) - _932;
    float _1039 = (_1033 * _854) - _933;
    float _1043 = abs(dot(vec3(_931, _932, _933), vec3(_852, _853, _854)));
    float _4019 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1045 = sqrt(_855);
    float _1058 = exp2((_1045 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1045 * 3.0));
    float _1064 = (1.0 - _1058) * ((_1045 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1065 = _1058 * _1045;
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1101, cbModelParam._m0[26u].z, fma(_1097, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093));
        float _1159 = fma(_1101, cbModelParam._m0[27u].z, fma(_1097, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093));
        float _1163 = fma(_1101, cbModelParam._m0[28u].z, fma(_1097, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093));
        float _1188 = _1093 + _852;
        float _1189 = _1097 + _853;
        float _1190 = _1101 + _854;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_852, _853, _854), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4067 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_852, _853, _854), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4100 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_852, _853, _854), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4133 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1473 = fma(_1101, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1093));
        float _1477 = fma(_1101, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1093));
        float _1481 = fma(_1101, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1093));
        float _1504 = _1093 + _852;
        float _1505 = _1097 + _853;
        float _1506 = _1101 + _854;
        float _1516 = fma(_1506, cbModelParam._m0[30u].z, fma(_1505, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1504)) - _1473;
        float _1517 = fma(_1506, cbModelParam._m0[31u].z, fma(_1505, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1504)) - _1477;
        float _1518 = fma(_1506, cbModelParam._m0[32u].z, fma(_1505, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1504)) - _1481;
        float _1522 = inversesqrt(dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518)));
        float _1535 = ((_1522 * _1516) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1473 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1536 = ((_1522 * _1517) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1477 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1522 * _1518) / cbModelParam._m0[35u].z) + ((((((_1481 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        vec4 _1560 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1535, _1536, _1537), 0.0);
        float _1572 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1539.x + (-0.5));
        float _1574 = _1572 * (_1539.y + (-0.5));
        float _1575 = _1572 * (_1539.z + (-0.5));
        float _1582 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1546.x + (-0.5));
        float _1584 = _1582 * (_1546.y + (-0.5));
        float _1585 = _1582 * (_1546.z + (-0.5));
        float _1592 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1553.x + (-0.5));
        float _1594 = _1592 * (_1553.y + (-0.5));
        float _1595 = _1592 * (_1553.z + (-0.5));
        float _1602 = exp2((_1560.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1560.x + (-0.5));
        float _1604 = _1602 * (_1560.y + (-0.5));
        float _1605 = _1602 * (_1560.z + (-0.5));
        float _1606 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1607 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1608 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1609 = _1573 * 0.5;
        float _1610 = _1583 * 0.5;
        float _1611 = _1593 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_852, _853, _854), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1606 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4196 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1636 + 1.0))) + _1641) * _1606;
        float _1651 = _1574 * 0.5;
        float _1652 = _1584 * 0.5;
        float _1653 = _1594 * 0.5;
        float _1654 = dot(vec3(_1651, _1652, _1653), vec3(_1651, _1652, _1653));
        float _1659 = (_1654 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1654);
        float _1667 = (dot(vec3(_852, _853, _854), vec3(_1659 * _1651, _1659 * _1652, _1659 * _1653)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1676 = sqrt(((_1652 * _1652) + (_1651 * _1651)) + (_1653 * _1653)) / (_1607 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1678 = _1677 * 2.0;
        float _1682 = (1.0 - _1677) / (_1677 + 1.0);
        float _4229 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1692 = ((((1.0 - _1683) * (_1678 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1678 + 1.0))) + _1683) * _1607;
        float _1693 = _1575 * 0.5;
        float _1694 = _1585 * 0.5;
        float _1695 = _1595 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_852, _853, _854), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1608 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4262 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1720 + 1.0))) + _1725) * _1608;
        _1742 = _1575;
        _1743 = _1574;
        _1744 = _1573;
        _1745 = _1585;
        _1746 = _1584;
        _1747 = _1583;
        _1748 = _1595;
        _1749 = _1594;
        _1750 = _1593;
        _1751 = _1608;
        _1752 = _1607;
        _1753 = _1606;
        _1754 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
        _1755 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)));
        _1756 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
    }
    else
    {
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = _1431;
        _1752 = _1431;
        _1753 = _1431;
        _1754 = 0.0;
        _1755 = 0.0;
        _1756 = 0.0;
    }
    float _1766 = (cbModelParam._m0[1u].x * (_1754 - _1443)) + _1443;
    float _1767 = (cbModelParam._m0[1u].x * (_1755 - _1444)) + _1444;
    float _1768 = (cbModelParam._m0[1u].x * (_1756 - _1445)) + _1445;
    float _1789 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1766));
    float _1810 = _1037 * 0.5;
    float _1811 = _1038 * 0.5;
    float _1812 = _1039 * 0.5;
    float _1813 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1744, _1747, _1750, _1753));
    float _1816 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1743, _1746, _1749, _1752));
    float _1819 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1742, _1745, _1748, _1751));
    float _1853;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1826 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1830 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1834 = dot(vec4(_1810, _1811, _1812, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1841 = dot(vec4(cbModelParam._m0[39u]), vec4(_1810, _1811, _1812, 1.0));
        _1853 = dot(vec3(isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1853 = 1.0;
    }
    float _1864;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1855 = dot(vec4(cbModelParam._m0[40u]), vec4(_1810, _1811, _1812, 1.0));
        _1864 = dot(vec3(isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1855) ? 0.0 : (isnan(0.0) ? _1855 : max(0.0, _1855))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1864 = 1.0;
    }
    float _1868 = (_1864 * cbModelParam._m0[1u].x) + (_1853 * (1.0 - cbModelParam._m0[1u].x));
    float _1878 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _855);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1878 : min(cbModelParam._m0[25u].z, _1878));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1926 = fma(_1101, cbModelParam._m0[13u].z, fma(_1097, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093)) + cbModelParam._m0[13u].w;
        float _1930 = fma(_1101, cbModelParam._m0[14u].z, fma(_1097, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093)) + cbModelParam._m0[14u].w;
        float _1934 = fma(_1101, cbModelParam._m0[15u].z, fma(_1097, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093)) + cbModelParam._m0[15u].w;
        float _1937 = fma(_1039, cbModelParam._m0[13u].z, fma(_1038, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037));
        float _1940 = fma(_1039, cbModelParam._m0[14u].z, fma(_1038, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037));
        float _1943 = fma(_1039, cbModelParam._m0[15u].z, fma(_1038, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037));
        float _1971;
        if (_1937 > 0.0)
        {
            _1971 = abs((1.0 - _1926) / _1937);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1926 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1971 = frontier_phi_17_15_ladder;
        }
        float _2173;
        if (_1940 > 0.0)
        {
            _2173 = abs((1.0 - _1930) / _1940);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1930 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2173 = frontier_phi_26_22_ladder;
        }
        float _2427;
        if (_1943 > 0.0)
        {
            _2427 = abs((1.0 - _1934) / _1943);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1934 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2427 = frontier_phi_38_33_ladder;
        }
        float _2429 = isnan(_2173) ? _1971 : (isnan(_1971) ? _2173 : min(_1971, _2173));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1937) + _1926;
        float _2435 = (_2430 * _1940) + _1930;
        float _2436 = (_2430 * _1943) + _1934;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2437;
        float _2441 = _2437 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 > _2441) || ((_2435 < _2439) || ((_2434 < _2439) || (_2434 > _2441))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2436, cbModelParam._m0[9u].z, fma(_2435, cbModelParam._m0[9u].y, _2434 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2436, cbModelParam._m0[10u].z, fma(_2435, cbModelParam._m0[10u].y, _2434 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2436, cbModelParam._m0[11u].z, fma(_2435, cbModelParam._m0[11u].y, _2434 * cbModelParam._m0[11u].x))), _1879);
            frontier_phi_16_38_ladder = _2564.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2564.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2564.x * cbModelParam._m0[1u].y;
        }
        _1959 = frontier_phi_16_38_ladder_2;
        _1961 = frontier_phi_16_38_ladder_1;
        _1963 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1037, _1038, _1039), _1879);
        _1959 = _1947.x * cbModelParam._m0[1u].y;
        _1961 = _1947.y * cbModelParam._m0[1u].y;
        _1963 = _1947.z * cbModelParam._m0[1u].y;
    }
    float _1967 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _855);
    float _1968 = isnan(_1967) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1967 : min(cbModelParam._m0[25u].w, _1967));
    float _2057;
    float _2059;
    float _2061;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2021 = fma(_1101, cbModelParam._m0[21u].z, fma(_1097, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093)) + cbModelParam._m0[21u].w;
        float _2025 = fma(_1101, cbModelParam._m0[22u].z, fma(_1097, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093)) + cbModelParam._m0[22u].w;
        float _2029 = fma(_1101, cbModelParam._m0[23u].z, fma(_1097, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093)) + cbModelParam._m0[23u].w;
        float _2032 = fma(_1039, cbModelParam._m0[21u].z, fma(_1038, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037));
        float _2035 = fma(_1039, cbModelParam._m0[22u].z, fma(_1038, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037));
        float _2038 = fma(_1039, cbModelParam._m0[23u].z, fma(_1038, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037));
        float _2178;
        if (_2032 > 0.0)
        {
            _2178 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2178 = frontier_phi_28_24_ladder;
        }
        float _2454;
        if (_2035 > 0.0)
        {
            _2454 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2454 = frontier_phi_40_35_ladder;
        }
        float _2667;
        if (_2038 > 0.0)
        {
            _2667 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2667 = frontier_phi_49_46_ladder;
        }
        float _2669 = isnan(_2454) ? _2178 : (isnan(_2178) ? _2454 : min(_2178, _2454));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _2032) + _2021;
        float _2675 = (_2670 * _2035) + _2025;
        float _2676 = (_2670 * _2038) + _2029;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1968);
            frontier_phi_25_49_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _2057 = frontier_phi_25_49_ladder_2;
        _2059 = frontier_phi_25_49_ladder_1;
        _2061 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2041 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1037, _1038, _1039), _1968);
        _2057 = _2041.x * cbModelParam._m0[1u].z;
        _2059 = _2041.y * cbModelParam._m0[1u].z;
        _2061 = _2041.z * cbModelParam._m0[1u].z;
    }
    float _2074 = (((_1064 * _1013) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2057 - _1959)) + _1959);
    float _2076 = (((_1064 * _1015) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2059 - _1961)) + _1961);
    float _2078 = (((_1064 * _1016) + _1065) * _1029) * ((cbModelParam._m0[1u].w * (_2061 - _1963)) + _1963);
    float _2081 = fma(_2078, cbSceneParam._m0[89u].z, fma(_2076, cbSceneParam._m0[89u].y, _2074 * cbSceneParam._m0[89u].x));
    float _2084 = fma(_2078, cbSceneParam._m0[90u].z, fma(_2076, cbSceneParam._m0[90u].y, _2074 * cbSceneParam._m0[90u].x));
    float _2087 = fma(_2078, cbSceneParam._m0[91u].z, fma(_2076, cbSceneParam._m0[91u].y, _2074 * cbSceneParam._m0[91u].x));
    uvec4 _2097 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2099 = _2097.x * 14u;
    uint _2100 = _2099 + 13u;
    float _2107 = _1029 + (-1.0);
    float _2112 = (cbLight._m0[_2100].x * _2107) + 1.0;
    float _2113 = (cbLight._m0[_2100].y * _2107) + 1.0;
    float _2114 = (cbLight._m0[_2100].z * _2107) + 1.0;
    float _2115 = (cbLight._m0[_2100].w * _2107) + 1.0;
    uint _2116 = _2099 + 5u;
    float _2122 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2126 = _2099 + 4u;
    float _2132 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2136 = _2099 | 1u;
    float _2147 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_852, _853, _854));
    float _2150 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_852, _853, _854));
    float _4398 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _4409 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2155 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2157 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2164 = ((cbLight._m0[_2116].x * _2122) * _2157) + ((cbLight._m0[_2126].x * _2132) * _2155);
    float _2165 = ((_2122 * cbLight._m0[_2116].y) * _2157) + ((_2132 * cbLight._m0[_2126].y) * _2155);
    float _2166 = ((_2122 * cbLight._m0[_2116].z) * _2157) + ((_2132 * cbLight._m0[_2126].z) * _2155);
    uvec4 _2170 = floatBitsToUint(cbLight._m0[_2099 + 12u]);
    bool _2172 = _2170.x == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2172)
    {
        _2183 = _2164;
        _2185 = _2165;
        _2187 = _2166;
    }
    else
    {
        uint _2191 = _2099 + 6u;
        float _2207 = (dot(vec3(cbLight._m0[_2099 + 2u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4420 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2210 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2183 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _2164;
        _2185 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _2165;
        _2187 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _2166;
    }
    bool _2190 = _2170.y == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2190)
    {
        _2228 = _2183;
        _2230 = _2185;
        _2232 = _2187;
    }
    else
    {
        uint _2398 = _2099 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_2099 + 3u].xyz), vec3(_852, _853, _854)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4436 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2417 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2228 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2183;
        _2230 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2185;
        _2232 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2187;
    }
    uint _2235 = _2099 + 8u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _855) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_2099].x + _931;
    float _2251 = cbLight._m0[_2099].y + _932;
    float _2252 = cbLight._m0[_2099].z + _933;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2099].xyz));
    float _4452 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _2264 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2265 = dot(vec3(_852, _853, _854), vec3(_2257, _2258, _2259));
    float _4474 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2269 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2257, _2258, _2259));
    float _4485 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2273 = _2249 * _2249;
    float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
    float _2285 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
    float _2286 = 0.959999978542327880859375 - _1010;
    float _2288 = 0.959999978542327880859375 - _1011;
    float _2289 = 0.959999978542327880859375 - _1012;
    float _2296 = 1.0 - _2249;
    float _2307 = (0.5 / (((_2264 * ((_2263 * _2296) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2296) + _2249) * _2263))) * _2263;
    float _4496 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2309 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
    uint _2320 = _2099 + 9u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _855) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2136].x + _931;
    float _2334 = cbLight._m0[_2136].y + _932;
    float _2335 = cbLight._m0[_2136].z + _933;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2136].xyz));
    float _4507 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2347 = dot(vec3(_852, _853, _854), vec3(_2340, _2341, _2342));
    float _4518 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2351 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2340, _2341, _2342));
    float _4529 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2355 = _2332 * _2332;
    float _2359 = ((_2350 * _2350) * (_2355 + (-1.0))) + 1.0;
    float _2366 = exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0);
    float _2373 = 1.0 - _2332;
    float _2383 = (0.5 / (((_2264 * ((_2346 * _2373) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2373) + _2332) * _2346))) * _2346;
    float _4540 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2355 / ((_2359 * _2359) * 3.141590118408203125));
    float _2395 = (((((_2366 * _2286) + _1013) * cbLight._m0[_2320].x) * _2385) * _2122) + (((((_2285 * _2286) + _1013) * cbLight._m0[_2235].x) * _2309) * _2132);
    float _2396 = (((((_2366 * _2288) + _1015) * cbLight._m0[_2320].y) * _2385) * _2122) + (((((_2285 * _2288) + _1015) * cbLight._m0[_2235].y) * _2309) * _2132);
    float _2397 = (((((_2366 * _2289) + _1016) * cbLight._m0[_2320].z) * _2385) * _2122) + (((((_2285 * _2289) + _1016) * cbLight._m0[_2235].z) * _2309) * _2132);
    float _2459;
    float _2461;
    float _2463;
    if (_2172)
    {
        _2459 = _2395;
        _2461 = _2396;
        _2463 = _2397;
    }
    else
    {
        uint _2465 = _2099 + 2u;
        uint _2469 = _2099 + 10u;
        float _2483 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2465].w)) * _855) * 0.949999988079071044921875);
        float _2484 = _2483 * _2483;
        float _2485 = cbLight._m0[_2465].x + _931;
        float _2486 = cbLight._m0[_2465].y + _932;
        float _2487 = cbLight._m0[_2465].z + _933;
        float _2491 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
        float _2492 = _2491 * _2485;
        float _2493 = _2491 * _2486;
        float _2494 = _2491 * _2487;
        float _2495 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2465].xyz));
        float _4551 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2499 = dot(vec3(_852, _853, _854), vec3(_2492, _2493, _2494));
        float _4562 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2503 = dot(vec3(cbLight._m0[_2465].xyz), vec3(_2492, _2493, _2494));
        float _4573 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2507 = _2484 * _2484;
        float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
        float _2518 = exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0);
        float _2525 = 1.0 - _2484;
        float _2535 = (0.5 / (((_2264 * ((_2498 * _2525) + _2484)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2525) + _2484) * _2498))) * _2498;
        float _4584 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2459 = (((((_2518 * _2286) + _1013) * cbLight._m0[_2469].x) * _2537) * _2538) + _2395;
        _2461 = (((((_2518 * _2288) + _1015) * cbLight._m0[_2469].y) * _2537) * _2538) + _2396;
        _2463 = (((((_2518 * _2289) + _1016) * cbLight._m0[_2469].z) * _2537) * _2538) + _2397;
    }
    float _2573;
    float _2575;
    float _2577;
    if (_2190)
    {
        _2573 = _2459;
        _2575 = _2461;
        _2577 = _2463;
    }
    else
    {
        uint _2584 = _2099 + 3u;
        uint _2588 = _2099 + 11u;
        float _2602 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2584].w)) * _855) * 0.949999988079071044921875);
        float _2603 = _2602 * _2602;
        float _2604 = cbLight._m0[_2584].x + _931;
        float _2605 = cbLight._m0[_2584].y + _932;
        float _2606 = cbLight._m0[_2584].z + _933;
        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
        float _2611 = _2610 * _2604;
        float _2612 = _2610 * _2605;
        float _2613 = _2610 * _2606;
        float _2614 = dot(vec3(_852, _853, _854), vec3(cbLight._m0[_2584].xyz));
        float _4600 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2617 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2618 = dot(vec3(_852, _853, _854), vec3(_2611, _2612, _2613));
        float _4611 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2622 = dot(vec3(cbLight._m0[_2584].xyz), vec3(_2611, _2612, _2613));
        float _4622 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2626 = _2603 * _2603;
        float _2630 = ((_2621 * _2621) * (_2626 + (-1.0))) + 1.0;
        float _2637 = exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0);
        float _2644 = 1.0 - _2603;
        float _2654 = (0.5 / (((_2264 * ((_2617 * _2644) + _2603)) + 9.9999999392252902907785028219223e-09) + (((_2264 * _2644) + _2603) * _2617))) * _2617;
        float _4633 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2626 / ((_2630 * _2630) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2573 = (((((_2637 * _2286) + _1013) * cbLight._m0[_2588].x) * _2656) * _2657) + _2459;
        _2575 = (((((_2637 * _2288) + _1015) * cbLight._m0[_2588].y) * _2656) * _2657) + _2461;
        _2577 = (((((_2637 * _2289) + _1016) * cbLight._m0[_2588].z) * _2656) * _2657) + _2463;
    }
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_2097.y == 0u)
    {
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2732;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2732;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2732;
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _952) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _951) / _2748)));
        float _2769 = (log2(_2735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
        }
        else
        {
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            uint _3038 = 0u;
            uint _3047;
            bool _3048;
            for (;;)
            {
                _3047 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                _3048 = _3047 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3048)
                {
                    frontier_phi_66_pred = _3032;
                    frontier_phi_66_pred_1 = _3037;
                    frontier_phi_66_pred_2 = _3036;
                    frontier_phi_66_pred_3 = _3035;
                    frontier_phi_66_pred_4 = _3034;
                    frontier_phi_66_pred_5 = _3033;
                }
                else
                {
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    uint _3183;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3047;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    for (;;)
                    {
                        uint _3187 = uint(findLSB(_3183)) + (_3038 << 5u);
                        uint _3184 = (_3183 + 4294967295u) & _3183;
                        uint _3189 = _3187 * 48u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3209 = (_3187 * 48u) + 4u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3228 = (_3187 * 48u) + 8u;
                        vec3 _3239 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x));
                        float _3243 = _3203.x - _2733;
                        float _3244 = _3203.y - _2734;
                        float _3245 = _3203.z - _2735;
                        float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                        float _3249 = inversesqrt(_3246);
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3253 = dot(vec3(_970, _973, _976), vec3(_3250, _3251, _3252));
                        float _3258 = 1.0 - (_3246 * _3203.w);
                        float _4659 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3260 = sqrt(_3246) * _3222.w;
                        float _3263 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3253) + _3264;
                        float _3270 = _3260 * _3260;
                        float _3274 = ((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3259) / ((_3270 * 0.699999988079071044921875) + 1.0);
                        float _3278 = (-0.0) - _2733;
                        float _3279 = (-0.0) - _2734;
                        float _3280 = (-0.0) - _2735;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3295 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                        float _3296 = 1.0 - _1045;
                        float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                        float _3304 = _3303 * _3303;
                        float _3305 = _3304 * _3304;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3308 = _3287 + _3252;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3316 = dot(vec3(_970, _973, _976), vec3(_3285, _3286, _3287));
                        float _4675 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3320 = dot(vec3(_970, _973, _976), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                        float _4686 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                        float _3328 = _3263 * _3304;
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3253) + _3329;
                        float _4697 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3334 = 1.0 - _3304;
                        float _3344 = (0.5 / (((_3333 * ((_3319 * _3334) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3304) * _3319))) * _3333;
                        float _4708 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3355 = (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3327 * _3327) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125))) * _3259;
                        _3107 = (_3274 * _3222.x) + _3180;
                        _3108 = (_3274 * _3222.y) + _3181;
                        _3109 = (_3274 * _3222.z) + _3182;
                        _3104 = (_3355 * _3239.x) + _3177;
                        _3105 = (_3355 * _3239.y) + _3178;
                        _3106 = (_3355 * _3239.z) + _3179;
                        if (_3184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3184;
                        }
                    }
                    frontier_phi_66_pred = _3104;
                    frontier_phi_66_pred_1 = _3109;
                    frontier_phi_66_pred_2 = _3108;
                    frontier_phi_66_pred_3 = _3107;
                    frontier_phi_66_pred_4 = _3106;
                    frontier_phi_66_pred_5 = _3105;
                }
                _2881 = frontier_phi_66_pred;
                _2891 = frontier_phi_66_pred_1;
                _2889 = frontier_phi_66_pred_2;
                _2887 = frontier_phi_66_pred_3;
                _2885 = frontier_phi_66_pred_4;
                _2883 = frontier_phi_66_pred_5;
                uint _3039 = _3038 + 1u;
                if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3032 = _2881;
                    _3033 = _2883;
                    _3034 = _2885;
                    _3035 = _2887;
                    _3036 = _2889;
                    _3037 = _2891;
                    _3038 = _3039;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
        }
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.z;
        uint _2897 = (_2895 >> 8u) & 15u;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        if (((4294967295u << _2897) & _2779) == 0u)
        {
            _3000 = _2880;
            _3002 = _2882;
            _3004 = _2884;
            _3006 = _2886;
            _3008 = _2888;
            _3010 = _2890;
        }
        else
        {
            float _3025 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
            float _3026 = _3025 * _2733;
            float _3027 = _3025 * _2734;
            float _3028 = _3025 * _2735;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2897 < ((_2895 >> 12u) & 15u))
            {
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3160 = _2880;
                float _3161 = _2882;
                float _3162 = _2884;
                float _3163 = _2886;
                float _3164 = _2888;
                float _3165 = _2890;
                uint _3166 = _2897;
                uint _3175;
                bool _3176;
                for (;;)
                {
                    _3175 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                    _3176 = _3175 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3176)
                    {
                        frontier_phi_77_pred = _3165;
                        frontier_phi_77_pred_1 = _3164;
                        frontier_phi_77_pred_2 = _3163;
                        frontier_phi_77_pred_3 = _3162;
                        frontier_phi_77_pred_4 = _3161;
                        frontier_phi_77_pred_5 = _3160;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        uint _3388 = _3175;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3399 = ((_3166 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3460 = (_3399 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3399 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3399 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_2735, _3507.z, fma(_2734, _3507.y, _3507.x * _2733)) + _3507.w;
                            _3520 = !((fma(_2735, _3488.z, fma(_2734, _3488.y, _3488.x * _2733)) + _3488.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3414.x - _2733;
                                float _3548 = _3414.y - _2734;
                                float _3549 = _3414.z - _2735;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3415 * _3415));
                                float _4719 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3565 = sqrt(_3550) * _3430.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_970, _973, _976))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_2735, _3457.z, fma(_2734, _3457.y, _3457.x * _2733)) + _3457.w) / _3519;
                                float _3579 = (fma(_2735, _3473.z, fma(_2734, _3473.y, _3473.x * _2733)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4735 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _1045;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3026;
                                float _3609 = _3555 - _3027;
                                float _3610 = _3556 - _3028;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3026, (-0.0) - _3027, (-0.0) - _3028));
                                float _4746 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3622 = dot(vec3(_970, _973, _976), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4757 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_970, _973, _976), vec3(_3554, _3555, _3556))) + _3631;
                                float _4768 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4779 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3585 * _3430.y;
                                frontier_phi_83_pred_1 = _3585 * _3430.x;
                                frontier_phi_83_pred_2 = _3659 * _3442.z;
                                frontier_phi_83_pred_3 = _3659 * _3442.y;
                                frontier_phi_83_pred_4 = _3659 * _3442.x;
                                frontier_phi_83_pred_5 = _3585 * _3430.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_83_pred;
                            _3666 = frontier_phi_83_pred_1;
                            _3665 = frontier_phi_83_pred_2;
                            _3664 = frontier_phi_83_pred_3;
                            _3663 = frontier_phi_83_pred_4;
                            _3668 = frontier_phi_83_pred_5;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3371 = _3665 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3374;
                        frontier_phi_77_pred_1 = _3373;
                        frontier_phi_77_pred_2 = _3372;
                        frontier_phi_77_pred_3 = _3371;
                        frontier_phi_77_pred_4 = _3370;
                        frontier_phi_77_pred_5 = _3369;
                    }
                    _3011 = frontier_phi_77_pred;
                    _3009 = frontier_phi_77_pred_1;
                    _3007 = frontier_phi_77_pred_2;
                    _3005 = frontier_phi_77_pred_3;
                    _3003 = frontier_phi_77_pred_4;
                    _3001 = frontier_phi_77_pred_5;
                    uint _3167 = _3166 + 1u;
                    if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3160 = _3001;
                        _3161 = _3003;
                        _3162 = _3005;
                        _3163 = _3007;
                        _3164 = _3009;
                        _3165 = _3011;
                        _3166 = _3167;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3005;
                frontier_phi_58_59_ladder_1 = _3011;
                frontier_phi_58_59_ladder_2 = _3009;
                frontier_phi_58_59_ladder_3 = _3007;
                frontier_phi_58_59_ladder_4 = _3003;
                frontier_phi_58_59_ladder_5 = _3001;
            }
            else
            {
                frontier_phi_58_59_ladder = _2884;
                frontier_phi_58_59_ladder_1 = _2890;
                frontier_phi_58_59_ladder_2 = _2888;
                frontier_phi_58_59_ladder_3 = _2886;
                frontier_phi_58_59_ladder_4 = _2882;
                frontier_phi_58_59_ladder_5 = _2880;
            }
            _3000 = frontier_phi_58_59_ladder_5;
            _3002 = frontier_phi_58_59_ladder_4;
            _3004 = frontier_phi_58_59_ladder;
            _3006 = frontier_phi_58_59_ladder_3;
            _3008 = frontier_phi_58_59_ladder_2;
            _3010 = frontier_phi_58_59_ladder_1;
        }
        float _3015 = isnan(1.0) ? _1029 : (isnan(_1029) ? 1.0 : min(_1029, 1.0));
        _2792 = (_3015 * _3006) + _2228;
        _2794 = (_3015 * _3008) + _2230;
        _2796 = (_3015 * _3010) + _2232;
        _2798 = ((_3000 * _1013) * _3015) + _2573;
        _2800 = ((_3002 * _1015) * _3015) + _2575;
        _2802 = ((_3004 * _1016) * _3015) + _2577;
    }
    else
    {
        _2792 = _2228;
        _2794 = _2230;
        _2796 = _2232;
        _2798 = _2573;
        _2800 = _2575;
        _2802 = _2577;
    }
    float _4795 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4806 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _4817 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _2819 = ((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2792 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1029))) + ((_2798 + ((isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _2820 = ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2794 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1029))) + ((_2800 + ((isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    float _2821 = ((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2796 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1029))) + ((_2802 + ((isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))) * _1868)) * cbPerFrame._m0[3u].x);
    uint _2822 = _257 + 6u;
    float _2830 = _951 / cbSceneParam._m0[86u].x;
    float _2831 = _952 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _874 : (isnan(_874) ? cbSceneParam._m0[77u].w : min(_874, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_874 > cbSceneParam._m0[78u].w)
    {
        float _2905 = isnan(_874) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _874 : min(cbSceneParam._m0[80u].w, _874));
        float _2906 = _2905 / _874;
        float _2917 = _2906 * _924;
        float _2918 = _925 * _2906;
        float _2919 = (-0.0) - _2918;
        float _2920 = _2906 * _926;
        float _2922 = (cbSceneParam._m0[77u].w * _2919) / _2905;
        float _2923 = _2922 + cbSceneParam._m0[79u].w;
        float _2924 = cbSceneParam._m0[79u].w - _2918;
        float _2930 = sqrt(((_2917 * _2917) + (_2918 * _2918)) + (_2920 * _2920));
        float _2933 = (1.0 - (cbSceneParam._m0[77u].w / _2905)) * _2930;
        float _2938 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2940 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3117;
        if (abs((_2919 - _2922) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3117 = ((((_2923 > 0.0) ? exp2(_2938 * _2923) : (2.0 - exp2(_2940 * _2923))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2933;
        }
        else
        {
            float _3061 = 1.0 / cbSceneParam._m0[80u].x;
            float _3062 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : max(_2923, _2924));
            float _3063 = isnan(_2924) ? _2923 : (isnan(_2923) ? _2924 : min(_2923, _2924));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            _3117 = ((abs(_2930 / _2919) * cbSceneParam._m0[80u].y) * ((((_3072 - _3073) * 2.0) - ((exp2(_2938 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0)))) - exp2(_2938 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0))))) * _3061)) - ((exp2(_2940 * _3072) - exp2(_2940 * _3073)) * _3061))) + (_2933 * cbSceneParam._m0[80u].z);
        }
        vec4 _3119 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3128 = exp2((_3117 * (-1.44269502162933349609375)) * (1.0 - _3119.w));
        float _3129 = log2(_3128);
        float _3145 = log2(_2850);
        _2942 = (exp2(_3145 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].x)) * _3119.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2944 = (exp2(_3145 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].y)) * _3119.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2946 = (exp2(_3145 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3129 * cbSceneParam._m0[78u].z)) * _3119.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2948 = _3128 * _2850;
    }
    else
    {
        _2942 = _2847;
        _2944 = _2848;
        _2946 = _2849;
        _2948 = _2850;
    }
    bool _3155;
    vec4 _2958;
    vec4 _2980;
    float _2982;
    float _2986;
    float _2987;
    float _2988;
    float _2989;
    bool _2999;
    for (;;)
    {
        _2958 = cbMatDynParam._m0[0u];
        float _2960 = roundEven(_2958.y);
        bool _2961 = _2960 == 3.0;
        float _2962 = log2(_2948);
        float _2969 = exp2(_2962 * cbSceneParam._m0[78u].x) * _2819;
        float _2970 = exp2(_2962 * cbSceneParam._m0[78u].y) * _2820;
        float _2971 = exp2(_2962 * cbSceneParam._m0[78u].z) * _2821;
        float _2978 = _940 + (-0.5);
        _2980 = cbMtdParam._m0[1u];
        _2982 = _2980.y * _2978;
        float _2985 = (_2960 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2986 = _2985 * (_2961 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2942)));
        _2987 = _2985 * (_2961 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2944)));
        _2988 = _2985 * (_2961 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2946)));
        _2989 = _2978 * 0.999000012874603271484375;
        _2999 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2999)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2989) < 0.5)
            {
                _3155 = true;
                break;
            }
        }
        uint _3096 = _989 + uint(_2958.w);
        if ((cbInstanceData._m0[_3096].w < 1.0) && ((cbInstanceData._m0[_3096].w + _2989) < 0.5))
        {
            _3155 = true;
            break;
        }
        if ((_2982 + 1.0) < _2980.x)
        {
            _3155 = true;
            break;
        }
        _3155 = false;
        break;
    }
    float _3360;
    if (_3155)
    {
        discard_state = true;
        _3360 = 0.0;
    }
    else
    {
        _3360 = cbInstanceData._m0[_2822].w;
    }
    SV_Target.x = _2986;
    SV_Target.y = _2987;
    SV_Target.z = _2988;
    SV_Target.w = _3360;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
    discard_exit();
}


