#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1624;
float _4285;
float _4286;
float _4287;
float _4288;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4297 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _4308 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4319 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    uint _292 = uint(roundEven(NORMAL.w)) * 13u;
    uint _297 = _292 + 1u;
    uint _301 = _292 + 2u;
    float _310 = sqrt(((cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x)) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x));
    float _311 = _310 * TEXCOORD.z;
    float _312 = _310 * TEXCOORD.w;
    vec4 _325 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _311) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _312) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _379 = _374.x * cbMtdParam._m0[11u].x;
    float _380 = _374.y * cbMtdParam._m0[11u].y;
    float _381 = _374.z * cbMtdParam._m0[11u].z;
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _311) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _312) + cbTextureTilingScale._m0[5u].w));
    vec4 _419 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _419.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4330 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _493 = (_486 * ((_400.x * cbMtdParam._m0[12u].x) - _379)) + _379;
    float _494 = (_486 * ((_400.y * cbMtdParam._m0[12u].y) - _380)) + _380;
    float _495 = (_486 * ((_400.z * cbMtdParam._m0[12u].z) - _381)) + _381;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _311) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _312) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _419.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4341 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _566 = (_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493;
    float _567 = (_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494;
    float _568 = (_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _311) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _312) + cbTextureTilingScale._m0[24u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _606 = _604.x;
    float _616 = dot(vec4(_606, _604.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _628 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _419.z) * 2.0) - ((((_606 - _616) * cbMtdParam._m0[23u].w) + _616) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4352 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _629 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _639 = (_348.x * cbMtdParam._m0[9u].x) * ((_629 * ((_587.x * cbMtdParam._m0[14u].x) - _566)) + _566);
    float _640 = (_348.y * cbMtdParam._m0[9u].y) * ((_629 * ((_587.y * cbMtdParam._m0[14u].y) - _567)) + _567);
    float _641 = (_348.z * cbMtdParam._m0[9u].z) * ((_629 * ((_587.z * cbMtdParam._m0[14u].z) - _568)) + _568);
    float _645 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _325.x) * _639;
    float _648 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _325.y) * _640;
    float _651 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _325.z) * _641;
    float _659 = (((_639 - _645) * (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) + _645) * 4.55000019073486328125;
    float _661 = (((_640 - _648) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) + _648) * 4.55000019073486328125;
    float _663 = (((_641 - _651) * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) + _651) * 4.55000019073486328125;
    vec4 _680 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _311) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _312) + cbTextureTilingScale._m0[20u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _311) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _312) + cbTextureTilingScale._m0[4u].w));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _724 = _722.x;
    float _725 = _722.y;
    float _726 = _722.z;
    float _733 = ((_705.x - _724) * _486) + _724;
    float _734 = ((_705.y - _725) * _486) + _725;
    float _735 = ((_705.z - _726) * _486) + _726;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _311) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _312) + cbTextureTilingScale._m0[2u].w));
    float _758 = ((_747.x - _733) * _559) + _733;
    float _759 = ((_747.y - _734) * _559) + _734;
    float _760 = ((_747.z - _735) * _559) + _735;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _311) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _312) + cbTextureTilingScale._m0[23u].w));
    float _785 = ((_772.z - _760) * _629) + _760;
    float _788 = ((((_772.x - _758) * _629) + _758) * 2.0) + (-1.0);
    float _789 = ((((_772.y - _759) * _629) + _759) * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4363 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))));
    vec4 _813 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _825 = (_788 + ((((_680.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_813.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _826 = (_789 + ((((_680.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_813.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _829 = fma(_795, _259, fma(_826, _266, _825 * _252));
    float _832 = fma(_795, _260, fma(_826, _267, _825 * _253));
    float _835 = fma(_795, _261, fma(_826, _268, _825 * _254));
    float _839 = inversesqrt(dot(vec3(_829, _832, _835), vec3(_829, _832, _835)));
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _311) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _312) + cbTextureTilingScale._m0[11u].w));
    float _868 = _866.x;
    float _869 = 1.0 - _868;
    float _877 = (cbMtdParam._m0[19u].x + dot(vec4(_839 * _829, _839 * _832, _839 * _835, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_868 - _869) * cbMtdParam._m0[24u].z) + _869) * cbMtdParam._m0[21u].z);
    float _4374 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _878 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _885 = (_878 * (cbMtdParam._m0[17u].x - _659)) + _659;
    float _886 = (_878 * (cbMtdParam._m0[17u].y - _661)) + _661;
    float _887 = (_878 * (cbMtdParam._m0[17u].z - _663)) + _663;
    vec4 _913 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _915 = _913.x;
    float _932 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _311) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _312) + cbTextureTilingScale._m0[9u].w)).x - _915) * _486) + _915;
    float _949 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _311) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _312) + cbTextureTilingScale._m0[21u].w)).x - _932) * _559) + _932;
    float _967 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _311) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _312) + cbTextureTilingScale._m0[10u].w)).x - _949) * _629) + _949;
    float _971 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _967) * cbMtdParam._m0[19u].z) + _967;
    float _973 = _971 - (_971 * _878);
    float _978 = (((_680.z - _785) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _785;
    float _982 = ((_813.z - _978) * cbMtdParam._m0[19u].w) + _978;
    vec4 _995 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _311) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _312) + cbTextureTilingScale._m0[15u].w));
    float _1002 = (_995.x * 2.0) + (-1.0);
    float _1003 = (_995.y * 2.0) + (-1.0);
    float _1004 = dot(vec2(_1002, _1003), vec2(_1002, _1003));
    float _4385 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1012 = ((_995.z - _982) * _878) + _982;
    float _1022 = ((sqrt(1.0 - (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0)))) - _795) * _878) + _795;
    float _1025 = (((_1002 - _825) * _878) + _825) + (cbMtdParam._m0[21u].x * _825);
    float _1026 = (((_1003 - _826) * _878) + _826) + (cbMtdParam._m0[21u].x * _826);
    float _1030 = cbMtdParam._m0[22u].x + _813.w;
    float _1033 = fma(_1022, _259, fma(_1026, _266, _1025 * _252));
    float _1036 = fma(_1022, _260, fma(_1026, _267, _1025 * _253));
    float _1039 = fma(_1022, _261, fma(_1026, _268, _1025 * _254));
    float _1043 = inversesqrt(dot(vec3(_1033, _1036, _1039), vec3(_1033, _1036, _1039)));
    float _1044 = _1043 * _1033;
    float _1045 = _1043 * _1036;
    float _1046 = _1043 * _1039;
    float _4396 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1047 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _4407 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4418 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4429 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4440 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4451 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _1052 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _1066 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1106 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1116 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1106);
    float _1117 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1106);
    float _1118 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1106);
    float _1122 = inversesqrt(dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118)));
    float _1123 = _1116 * _1122;
    float _1124 = _1117 * _1122;
    float _1125 = _1118 * _1122;
    vec4 _1130 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1132 = _1130.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1304 = sqrt(((_1116 * _1116) + (_1117 * _1117)) + (_1118 * _1118));
        float _1310 = (cbMatDynParam._m0[5u].x * _1304) + cbMatDynParam._m0[5u].y;
        float _4462 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1315 = (cbMatDynParam._m0[5u].z * _1304) + cbMatDynParam._m0[5u].w;
        float _4473 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) - _1311)) + _1311) < ((_1132 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1143 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1144 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1162 = fma(_1046, cbSceneParam._m0[5u].z, fma(_1045, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1044));
    float _1165 = fma(_1046, cbSceneParam._m0[6u].z, fma(_1045, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1044));
    float _1168 = fma(_1046, cbSceneParam._m0[7u].z, fma(_1045, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1044));
    uint _1181 = _292 + 9u;
    uint _1182 = _1181 + uint(cbMatDynParam._m0[0u].w);
    float _1188 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * cbInstanceData._m0[_1182].x;
    float _1189 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0)))) * cbInstanceData._m0[_1182].y;
    float _1190 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * cbInstanceData._m0[_1182].z;
    float _4484 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1191 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _4495 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
    float _1192 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _4506 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1193 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _1194 = 1.0 - _1052;
    float _1195 = _1191 * _1194;
    float _1196 = _1192 * _1194;
    float _1197 = _1193 * _1194;
    float _1202 = (_1191 + (-0.039999999105930328369140625)) * _1052;
    float _1203 = (_1192 + (-0.039999999105930328369140625)) * _1052;
    float _1204 = (_1193 + (-0.039999999105930328369140625)) * _1052;
    float _1205 = _1202 + 0.039999999105930328369140625;
    float _1207 = _1203 + 0.039999999105930328369140625;
    float _1208 = _1204 + 0.039999999105930328369140625;
    vec4 _1217 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1143, cbSceneParam._m0[86u].y * _1144));
    float _1221 = ((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * TEXCOORD_5.w) * _1217.x;
    float _1222 = dot(vec3(_1044, _1045, _1046), vec3(_1123, _1124, _1125));
    float _1225 = _1222 * 2.0;
    float _1229 = (_1225 * _1044) - _1123;
    float _1230 = (_1225 * _1045) - _1124;
    float _1231 = (_1225 * _1046) - _1125;
    float _1235 = abs(dot(vec3(_1123, _1124, _1125), vec3(_1044, _1045, _1046)));
    float _4517 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1237 = sqrt(_1047);
    float _1250 = exp2((_1237 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1237 * 3.0));
    float _1256 = (1.0 - _1250) * ((_1237 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1257 = _1250 * _1237;
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1293 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1623;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1348 = fma(_1293, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285));
        float _1352 = fma(_1293, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285));
        float _1356 = fma(_1293, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285));
        float _1381 = _1285 + _1044;
        float _1382 = _1289 + _1045;
        float _1383 = _1293 + _1046;
        float _1393 = fma(_1383, cbModelParam._m0[26u].z, fma(_1382, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1381)) - _1348;
        float _1394 = fma(_1383, cbModelParam._m0[27u].z, fma(_1382, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1381)) - _1352;
        float _1395 = fma(_1383, cbModelParam._m0[28u].z, fma(_1382, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1381)) - _1356;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1348 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1352 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[34u].z) + ((((((_1356 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1451 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1417.x + (-0.5));
        float _1453 = _1451 * (_1417.y + (-0.5));
        float _1454 = _1451 * (_1417.z + (-0.5));
        float _1461 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1424.x + (-0.5));
        float _1463 = _1461 * (_1424.y + (-0.5));
        float _1464 = _1461 * (_1424.z + (-0.5));
        float _1471 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1431.x + (-0.5));
        float _1473 = _1471 * (_1431.y + (-0.5));
        float _1474 = _1471 * (_1431.z + (-0.5));
        float _1481 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1438.x + (-0.5));
        float _1483 = _1481 * (_1438.y + (-0.5));
        float _1484 = _1481 * (_1438.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1505 = (dot(vec3(_1044, _1045, _1046), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4543 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1515 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4554 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4565 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_1517 + 1.0))) + _1522) * _1485;
        float _1532 = _1453 * 0.5;
        float _1533 = _1463 * 0.5;
        float _1534 = _1473 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_1044, _1045, _1046), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4576 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4587 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4598 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_1559 + 1.0))) + _1564) * _1486;
        float _1574 = _1454 * 0.5;
        float _1575 = _1464 * 0.5;
        float _1576 = _1474 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_1044, _1045, _1046), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4609 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4620 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4631 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_1601 + 1.0))) + _1606) * _1487;
        _1623 = _1454;
        _1625 = _1453;
        _1626 = _1452;
        _1627 = _1464;
        _1628 = _1463;
        _1629 = _1462;
        _1630 = _1474;
        _1631 = _1473;
        _1632 = _1472;
        _1633 = _1487;
        _1634 = _1486;
        _1635 = _1485;
        _1636 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1637 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1638 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1624;
        _1625 = _1624;
        _1626 = _1624;
        _1627 = _1624;
        _1628 = _1624;
        _1629 = _1624;
        _1630 = _1624;
        _1631 = _1624;
        _1632 = _1624;
        _1633 = _1624;
        _1634 = _1624;
        _1635 = _1624;
        _1636 = 0.0;
        _1637 = 0.0;
        _1638 = 0.0;
    }
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1664 = fma(_1293, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285));
        float _1668 = fma(_1293, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285));
        float _1672 = fma(_1293, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285));
        float _1695 = _1285 + _1044;
        float _1696 = _1289 + _1045;
        float _1697 = _1293 + _1046;
        float _1707 = fma(_1697, cbModelParam._m0[30u].z, fma(_1696, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1695)) - _1664;
        float _1708 = fma(_1697, cbModelParam._m0[31u].z, fma(_1696, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1695)) - _1668;
        float _1709 = fma(_1697, cbModelParam._m0[32u].z, fma(_1696, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1695)) - _1672;
        float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
        float _1726 = ((_1713 * _1707) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1664 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1727 = ((_1713 * _1708) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1668 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1728 = ((_1713 * _1709) / cbModelParam._m0[35u].z) + ((((((_1672 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1744 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        vec4 _1751 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1726, _1727, _1728), 0.0);
        float _1763 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1764 = _1763 * (_1730.x + (-0.5));
        float _1765 = _1763 * (_1730.y + (-0.5));
        float _1766 = _1763 * (_1730.z + (-0.5));
        float _1773 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1774 = _1773 * (_1737.x + (-0.5));
        float _1775 = _1773 * (_1737.y + (-0.5));
        float _1776 = _1773 * (_1737.z + (-0.5));
        float _1783 = exp2((_1744.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1744.x + (-0.5));
        float _1785 = _1783 * (_1744.y + (-0.5));
        float _1786 = _1783 * (_1744.z + (-0.5));
        float _1793 = exp2((_1751.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1751.x + (-0.5));
        float _1795 = _1793 * (_1751.y + (-0.5));
        float _1796 = _1793 * (_1751.z + (-0.5));
        float _1797 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1798 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1799 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1800 = _1764 * 0.5;
        float _1801 = _1774 * 0.5;
        float _1802 = _1784 * 0.5;
        float _1803 = dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802));
        float _1808 = (_1803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1803);
        float _1816 = (dot(vec3(_1044, _1045, _1046), vec3(_1808 * _1800, _1808 * _1801, _1808 * _1802)) + 1.0) * 0.5;
        float _4672 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1825 = sqrt(((_1801 * _1801) + (_1800 * _1800)) + (_1802 * _1802)) / (_1797 + 9.9999997473787516355514526367188e-06);
        float _4683 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _1827 = _1826 * 2.0;
        float _1831 = (1.0 - _1826) / (_1826 + 1.0);
        float _4694 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _1841 = ((((1.0 - _1832) * (_1827 + 2.0)) * exp2(log2(isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_1827 + 1.0))) + _1832) * _1797;
        float _1842 = _1765 * 0.5;
        float _1843 = _1775 * 0.5;
        float _1844 = _1785 * 0.5;
        float _1845 = dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844));
        float _1850 = (_1845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1845);
        float _1858 = (dot(vec3(_1044, _1045, _1046), vec3(_1850 * _1842, _1850 * _1843, _1850 * _1844)) + 1.0) * 0.5;
        float _4705 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1867 = sqrt(((_1843 * _1843) + (_1842 * _1842)) + (_1844 * _1844)) / (_1798 + 9.9999997473787516355514526367188e-06);
        float _4716 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _1869 = _1868 * 2.0;
        float _1873 = (1.0 - _1868) / (_1868 + 1.0);
        float _4727 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _1883 = ((((1.0 - _1874) * (_1869 + 2.0)) * exp2(log2(isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_1869 + 1.0))) + _1874) * _1798;
        float _1884 = _1766 * 0.5;
        float _1885 = _1776 * 0.5;
        float _1886 = _1786 * 0.5;
        float _1887 = dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886));
        float _1892 = (_1887 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1887);
        float _1900 = (dot(vec3(_1044, _1045, _1046), vec3(_1892 * _1884, _1892 * _1885, _1892 * _1886)) + 1.0) * 0.5;
        float _4738 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1909 = sqrt(((_1885 * _1885) + (_1884 * _1884)) + (_1886 * _1886)) / (_1799 + 9.9999997473787516355514526367188e-06);
        float _4749 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _1911 = _1910 * 2.0;
        float _1915 = (1.0 - _1910) / (_1910 + 1.0);
        float _4760 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _1925 = ((((1.0 - _1916) * (_1911 + 2.0)) * exp2(log2(isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_1911 + 1.0))) + _1916) * _1799;
        _1933 = _1766;
        _1934 = _1765;
        _1935 = _1764;
        _1936 = _1776;
        _1937 = _1775;
        _1938 = _1774;
        _1939 = _1786;
        _1940 = _1785;
        _1941 = _1784;
        _1942 = _1799;
        _1943 = _1798;
        _1944 = _1797;
        _1945 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0)));
        _1946 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)));
        _1947 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0)));
    }
    else
    {
        _1933 = _1624;
        _1934 = _1624;
        _1935 = _1624;
        _1936 = _1624;
        _1937 = _1624;
        _1938 = _1624;
        _1939 = _1624;
        _1940 = _1624;
        _1941 = _1624;
        _1942 = _1624;
        _1943 = _1624;
        _1944 = _1624;
        _1945 = 0.0;
        _1946 = 0.0;
        _1947 = 0.0;
    }
    float _1957 = (cbModelParam._m0[1u].x * (_1945 - _1636)) + _1636;
    float _1958 = (cbModelParam._m0[1u].x * (_1946 - _1637)) + _1637;
    float _1959 = (cbModelParam._m0[1u].x * (_1947 - _1638)) + _1638;
    float _1980 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1957));
    float _2001 = _1229 * 0.5;
    float _2002 = _1230 * 0.5;
    float _2003 = _1231 * 0.5;
    float _2004 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1935, _1938, _1941, _1944));
    float _2007 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1934, _1937, _1940, _1943));
    float _2010 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1933, _1936, _1939, _1942));
    float _2044;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2017 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1623, _1627, _1630, _1633));
        float _2021 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1625, _1628, _1631, _1634));
        float _2025 = dot(vec4(_2001, _2002, _2003, 1.0), vec4(_1626, _1629, _1632, _1635));
        float _2032 = dot(vec4(cbModelParam._m0[39u]), vec4(_2001, _2002, _2003, 1.0));
        _2044 = dot(vec3(isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)), isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2032) ? 0.0 : (isnan(0.0) ? _2032 : max(0.0, _2032))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2044 = 1.0;
    }
    float _2055;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2046 = dot(vec4(cbModelParam._m0[40u]), vec4(_2001, _2002, _2003, 1.0));
        _2055 = dot(vec3(isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2046) ? 0.0 : (isnan(0.0) ? _2046 : max(0.0, _2046))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2055 = 1.0;
    }
    float _2059 = (_2055 * cbModelParam._m0[1u].x) + (_2044 * (1.0 - cbModelParam._m0[1u].x));
    float _2069 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1047);
    float _2070 = isnan(_2069) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2069 : min(cbModelParam._m0[25u].z, _2069));
    float _2150;
    float _2152;
    float _2154;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2117 = fma(_1293, cbModelParam._m0[13u].z, fma(_1289, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1285)) + cbModelParam._m0[13u].w;
        float _2121 = fma(_1293, cbModelParam._m0[14u].z, fma(_1289, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1285)) + cbModelParam._m0[14u].w;
        float _2125 = fma(_1293, cbModelParam._m0[15u].z, fma(_1289, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1285)) + cbModelParam._m0[15u].w;
        float _2128 = fma(_1231, cbModelParam._m0[13u].z, fma(_1230, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1229));
        float _2131 = fma(_1231, cbModelParam._m0[14u].z, fma(_1230, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1229));
        float _2134 = fma(_1231, cbModelParam._m0[15u].z, fma(_1230, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1229));
        float _2162;
        if (_2128 > 0.0)
        {
            _2162 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2162 = frontier_phi_17_15_ladder;
        }
        float _2334;
        if (_2131 > 0.0)
        {
            _2334 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2334 = frontier_phi_26_22_ladder;
        }
        float _2629;
        if (_2134 > 0.0)
        {
            _2629 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2629 = frontier_phi_38_33_ladder;
        }
        float _2631 = isnan(_2334) ? _2162 : (isnan(_2162) ? _2334 : min(_2162, _2334));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _2128) + _2117;
        float _2637 = (_2632 * _2131) + _2121;
        float _2638 = (_2632 * _2134) + _2125;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2639;
        float _2643 = _2639 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 > _2643) || ((_2637 < _2641) || ((_2636 < _2641) || (_2636 > _2643))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2638, cbModelParam._m0[9u].z, fma(_2637, cbModelParam._m0[9u].y, _2636 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2638, cbModelParam._m0[10u].z, fma(_2637, cbModelParam._m0[10u].y, _2636 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2638, cbModelParam._m0[11u].z, fma(_2637, cbModelParam._m0[11u].y, _2636 * cbModelParam._m0[11u].x))), _2070);
            frontier_phi_16_38_ladder = _2783.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2783.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2783.x * cbModelParam._m0[1u].y;
        }
        _2150 = frontier_phi_16_38_ladder_2;
        _2152 = frontier_phi_16_38_ladder_1;
        _2154 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2138 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1229, _1230, _1231), _2070);
        _2150 = _2138.x * cbModelParam._m0[1u].y;
        _2152 = _2138.y * cbModelParam._m0[1u].y;
        _2154 = _2138.z * cbModelParam._m0[1u].y;
    }
    float _2158 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1047);
    float _2159 = isnan(_2158) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2158 : min(cbModelParam._m0[25u].w, _2158));
    float _2249;
    float _2251;
    float _2253;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2213 = fma(_1293, cbModelParam._m0[21u].z, fma(_1289, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1285)) + cbModelParam._m0[21u].w;
        float _2217 = fma(_1293, cbModelParam._m0[22u].z, fma(_1289, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1285)) + cbModelParam._m0[22u].w;
        float _2221 = fma(_1293, cbModelParam._m0[23u].z, fma(_1289, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1285)) + cbModelParam._m0[23u].w;
        float _2224 = fma(_1231, cbModelParam._m0[21u].z, fma(_1230, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1229));
        float _2227 = fma(_1231, cbModelParam._m0[22u].z, fma(_1230, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1229));
        float _2230 = fma(_1231, cbModelParam._m0[23u].z, fma(_1230, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1229));
        float _2339;
        if (_2224 > 0.0)
        {
            _2339 = abs((1.0 - _2213) / _2224);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2224 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2213 + 1.0) / _2224);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2339 = frontier_phi_28_24_ladder;
        }
        float _2656;
        if (_2227 > 0.0)
        {
            _2656 = abs((1.0 - _2217) / _2227);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2227 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2217 + 1.0) / _2227);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2656 = frontier_phi_40_35_ladder;
        }
        float _2994;
        if (_2230 > 0.0)
        {
            _2994 = abs((1.0 - _2221) / _2230);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2230 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2221 + 1.0) / _2230);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2994 = frontier_phi_50_47_ladder;
        }
        float _2996 = isnan(_2656) ? _2339 : (isnan(_2339) ? _2656 : min(_2339, _2656));
        float _2997 = isnan(_2994) ? _2996 : (isnan(_2996) ? _2994 : min(_2996, _2994));
        float _3001 = (_2997 * _2224) + _2213;
        float _3002 = (_2997 * _2227) + _2217;
        float _3003 = (_2997 * _2230) + _2221;
        float _3004 = _2997 * 9.9999997473787516355514526367188e-05;
        float _3005 = (-1.0) - _3004;
        float _3007 = _3004 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3003 > _3007) || ((_3003 < _3005) || ((_3002 > _3007) || ((_3002 < _3005) || ((_3001 < _3005) || (_3001 > _3007))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3125 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3003, cbModelParam._m0[17u].z, fma(_3002, cbModelParam._m0[17u].y, _3001 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3003, cbModelParam._m0[18u].z, fma(_3002, cbModelParam._m0[18u].y, _3001 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3003, cbModelParam._m0[19u].z, fma(_3002, cbModelParam._m0[19u].y, _3001 * cbModelParam._m0[19u].x))), _2159);
            frontier_phi_25_50_ladder = _3125.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3125.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3125.x * cbModelParam._m0[1u].z;
        }
        _2249 = frontier_phi_25_50_ladder_2;
        _2251 = frontier_phi_25_50_ladder_1;
        _2253 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2233 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1229, _1230, _1231), _2159);
        _2249 = _2233.x * cbModelParam._m0[1u].z;
        _2251 = _2233.y * cbModelParam._m0[1u].z;
        _2253 = _2233.z * cbModelParam._m0[1u].z;
    }
    float _2266 = (((_1256 * _1205) + _1257) * _1221) * ((cbModelParam._m0[1u].w * (_2249 - _2150)) + _2150);
    float _2268 = (((_1256 * _1207) + _1257) * _1221) * ((cbModelParam._m0[1u].w * (_2251 - _2152)) + _2152);
    float _2270 = (((_1256 * _1208) + _1257) * _1221) * ((cbModelParam._m0[1u].w * (_2253 - _2154)) + _2154);
    float _2273 = fma(_2270, cbSceneParam._m0[89u].z, fma(_2268, cbSceneParam._m0[89u].y, _2266 * cbSceneParam._m0[89u].x));
    float _2276 = fma(_2270, cbSceneParam._m0[90u].z, fma(_2268, cbSceneParam._m0[90u].y, _2266 * cbSceneParam._m0[90u].x));
    float _2279 = fma(_2270, cbSceneParam._m0[91u].z, fma(_2268, cbSceneParam._m0[91u].y, _2266 * cbSceneParam._m0[91u].x));
    float _2313 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2317 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2321 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2325 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2326 = _2313 / _2325;
    float _2327 = _2317 / _2325;
    float _2328 = _2321 / _2325;
    float _2475;
    float _2476;
    float _2477;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2355 = ((uint(_2328 > cbSceneParam._m0[59u].y) + uint(_2328 > cbSceneParam._m0[59u].x)) + uint(_2328 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2356 = _2355 + 43u;
        uint _2364 = _2355 + 44u;
        uint _2372 = _2355 + 45u;
        uint _2380 = _2355 + 46u;
        float _2391 = fma(_2325, cbSceneParam._m0[_2356].w, fma(_2321, cbSceneParam._m0[_2356].z, fma(_2317, cbSceneParam._m0[_2356].y, _2313 * cbSceneParam._m0[_2356].x)));
        float _2395 = fma(_2325, cbSceneParam._m0[_2364].w, fma(_2321, cbSceneParam._m0[_2364].z, fma(_2317, cbSceneParam._m0[_2364].y, _2313 * cbSceneParam._m0[_2364].x)));
        float _2403 = fma(_2325, cbSceneParam._m0[_2380].w, fma(_2321, cbSceneParam._m0[_2380].z, fma(_2317, cbSceneParam._m0[_2380].y, _2313 * cbSceneParam._m0[_2380].x)));
        float _2408 = cbSceneParam._m0[33u].z * _2403;
        float _2410 = cbSceneParam._m0[33u].w * _2403;
        float _2413 = fma(_2325, cbSceneParam._m0[_2372].w, fma(_2321, cbSceneParam._m0[_2372].z, fma(_2317, cbSceneParam._m0[_2372].y, _2313 * cbSceneParam._m0[_2372].x))) / _2403;
        float _2461 = (cbSceneParam._m0[33u].x - sqrt(((_2327 * _2327) + (_2326 * _2326)) + (_2328 * _2328))) * cbSceneParam._m0[33u].y;
        float _4886 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2468 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2408 + _2391) / _2403, (_2410 + _2395) / _2403), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2410 + _2391) / _2403, (_2395 - _2408) / _2403), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2391 - _2408) / _2403, (_2395 - _2410) / _2403), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2391 - _2410) / _2403, (_2408 + _2395) / _2403), _2413), 0.0)).x), vec4(0.25)));
        _2475 = 1.0 - (_2468 * cbSceneParam._m0[34u].x);
        _2476 = 1.0 - (_2468 * cbSceneParam._m0[34u].y);
        _2477 = 1.0 - (_2468 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2475 = 1.0;
        _2476 = 1.0;
        _2477 = 1.0;
    }
    float _2541;
    float _2543;
    float _2545;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2529 = fma(_2325, cbSceneParam._m0[63u].w, fma(_2321, cbSceneParam._m0[63u].z, fma(_2317, cbSceneParam._m0[63u].y, _2313 * cbSceneParam._m0[63u].x)));
        float _2530 = fma(_2325, cbSceneParam._m0[60u].w, fma(_2321, cbSceneParam._m0[60u].z, fma(_2317, cbSceneParam._m0[60u].y, _2313 * cbSceneParam._m0[60u].x))) / _2529;
        float _2531 = fma(_2325, cbSceneParam._m0[61u].w, fma(_2321, cbSceneParam._m0[61u].z, fma(_2317, cbSceneParam._m0[61u].y, _2313 * cbSceneParam._m0[61u].x))) / _2529;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2530 >= cbSceneParam._m0[64u].x) && (_2531 >= cbSceneParam._m0[64u].y)) && (_2530 <= cbSceneParam._m0[64u].z)) && (_2531 <= cbSceneParam._m0[64u].w))
        {
            float _2669 = fma(_2325, cbSceneParam._m0[62u].w, fma(_2321, cbSceneParam._m0[62u].z, fma(_2317, cbSceneParam._m0[62u].y, _2313 * cbSceneParam._m0[62u].x))) / _2529;
            float _2673 = isnan(cbSceneParam._m0[41u].w) ? _2669 : (isnan(_2669) ? cbSceneParam._m0[41u].w : max(_2669, cbSceneParam._m0[41u].w));
            float _2716 = (cbSceneParam._m0[33u].x - sqrt(((_2327 * _2327) + (_2326 * _2326)) + (_2328 * _2328))) * cbSceneParam._m0[33u].y;
            float _4902 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
            float _2723 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2530, cbSceneParam._m0[33u].w + _2531), _2673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2530, _2531 - cbSceneParam._m0[33u].z), _2673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2530 - cbSceneParam._m0[33u].z, _2531 - cbSceneParam._m0[33u].w), _2673), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2530 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2531), _2673), 0.0)).x), vec4(0.25)));
            float _2727 = 1.0 - (_2723 * cbSceneParam._m0[34u].x);
            float _2728 = 1.0 - (_2723 * cbSceneParam._m0[34u].y);
            float _2729 = 1.0 - (_2723 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2729) ? _2477 : (isnan(_2477) ? _2729 : min(_2477, _2729));
            frontier_phi_37_36_ladder_1 = isnan(_2728) ? _2476 : (isnan(_2476) ? _2728 : min(_2476, _2728));
            frontier_phi_37_36_ladder_2 = isnan(_2727) ? _2475 : (isnan(_2475) ? _2727 : min(_2475, _2727));
        }
        else
        {
            frontier_phi_37_36_ladder = _2477;
            frontier_phi_37_36_ladder_1 = _2476;
            frontier_phi_37_36_ladder_2 = _2475;
        }
        _2541 = frontier_phi_37_36_ladder_2;
        _2543 = frontier_phi_37_36_ladder_1;
        _2545 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2541 = _2475;
        _2543 = _2476;
        _2545 = _2477;
    }
    uvec4 _2550 = floatBitsToUint(cbInstanceData._m0[_292 + 5u]);
    uint _2552 = _2550.x * 14u;
    uint _2553 = _2552 + 13u;
    float _2560 = _1221 + (-1.0);
    float _2565 = (cbLight._m0[_2553].x * _2560) + 1.0;
    float _2566 = (cbLight._m0[_2553].y * _2560) + 1.0;
    float _2567 = (cbLight._m0[_2553].z * _2560) + 1.0;
    float _2568 = (cbLight._m0[_2553].w * _2560) + 1.0;
    uint _2569 = _2552 + 5u;
    float _2575 = isnan(1.0) ? _2566 : (isnan(_2566) ? 1.0 : min(_2566, 1.0));
    uint _2579 = _2552 + 4u;
    float _2588 = isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0));
    uint _2592 = _2552 | 1u;
    float _2603 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_1044, _1045, _1046));
    float _2606 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_1044, _1045, _1046));
    float _4938 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _4949 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2611 = (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * 0.3183098733425140380859375;
    float _2613 = (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * 0.3183098733425140380859375;
    float _2620 = ((cbLight._m0[_2569].x * _2575) * _2613) + (((cbLight._m0[_2579].x * _2541) * _2588) * _2611);
    float _2621 = ((_2575 * cbLight._m0[_2569].y) * _2613) + (((cbLight._m0[_2579].y * _2543) * _2588) * _2611);
    float _2622 = ((_2575 * cbLight._m0[_2569].z) * _2613) + (((cbLight._m0[_2579].z * _2545) * _2588) * _2611);
    uvec4 _2626 = floatBitsToUint(cbLight._m0[_2552 + 12u]);
    bool _2628 = _2626.x == 0u;
    float _2730;
    float _2732;
    float _2734;
    if (_2628)
    {
        _2730 = _2620;
        _2732 = _2621;
        _2734 = _2622;
    }
    else
    {
        uint _2738 = _2552 + 6u;
        float _2754 = (dot(vec3(cbLight._m0[_2552 + 2u].xyz), vec3(_1044, _1045, _1046)) * 0.5) + 0.5;
        float _2755 = _2754 * _2754;
        float _4960 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2756 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _2757 = isnan(1.0) ? _2567 : (isnan(_2567) ? 1.0 : min(_2567, 1.0));
        _2730 = (((cbLight._m0[_2738].x * 0.3183098733425140380859375) * _2756) * _2757) + _2620;
        _2732 = (((cbLight._m0[_2738].y * 0.3183098733425140380859375) * _2756) * _2757) + _2621;
        _2734 = (((cbLight._m0[_2738].z * 0.3183098733425140380859375) * _2756) * _2757) + _2622;
    }
    bool _2737 = _2626.y == 0u;
    float _2792;
    float _2794;
    float _2796;
    if (_2737)
    {
        _2792 = _2730;
        _2794 = _2732;
        _2796 = _2734;
    }
    else
    {
        uint _2965 = _2552 + 7u;
        float _2981 = (dot(vec3(cbLight._m0[_2552 + 3u].xyz), vec3(_1044, _1045, _1046)) * 0.5) + 0.5;
        float _2982 = _2981 * _2981;
        float _4976 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2983 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _2984 = isnan(1.0) ? _2568 : (isnan(_2568) ? 1.0 : min(_2568, 1.0));
        _2792 = (((cbLight._m0[_2965].x * 0.3183098733425140380859375) * _2983) * _2984) + _2730;
        _2794 = (((cbLight._m0[_2965].y * 0.3183098733425140380859375) * _2983) * _2984) + _2732;
        _2796 = (((cbLight._m0[_2965].z * 0.3183098733425140380859375) * _2983) * _2984) + _2734;
    }
    uint _2799 = _2552 + 8u;
    float _2812 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _1047) * 0.949999988079071044921875);
    float _2813 = _2812 * _2812;
    float _2814 = cbLight._m0[_2552].x + _1123;
    float _2815 = cbLight._m0[_2552].y + _1124;
    float _2816 = cbLight._m0[_2552].z + _1125;
    float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
    float _2821 = _2820 * _2814;
    float _2822 = _2820 * _2815;
    float _2823 = _2820 * _2816;
    float _2824 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2552].xyz));
    float _4992 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
    float _2827 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
    float _5003 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _2828 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
    float _2829 = dot(vec3(_1044, _1045, _1046), vec3(_2821, _2822, _2823));
    float _5014 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2832 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
    float _2833 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2821, _2822, _2823));
    float _5025 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
    float _2837 = _2813 * _2813;
    float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
    float _2849 = exp2(log2(1.0 - (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0)))) * 5.0);
    float _2850 = 0.959999978542327880859375 - _1202;
    float _2852 = 0.959999978542327880859375 - _1203;
    float _2853 = 0.959999978542327880859375 - _1204;
    float _2860 = 1.0 - _2813;
    float _2871 = (0.5 / (((_2828 * ((_2827 * _2860) + _2813)) + 9.9999999392252902907785028219223e-09) + (((_2828 * _2860) + _2813) * _2827))) * _2827;
    float _5036 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
    float _2873 = (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
    uint _2887 = _2552 + 9u;
    float _2898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _1047) * 0.949999988079071044921875);
    float _2899 = _2898 * _2898;
    float _2900 = cbLight._m0[_2592].x + _1123;
    float _2901 = cbLight._m0[_2592].y + _1124;
    float _2902 = cbLight._m0[_2592].z + _1125;
    float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
    float _2907 = _2906 * _2900;
    float _2908 = _2906 * _2901;
    float _2909 = _2906 * _2902;
    float _2910 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_2592].xyz));
    float _5047 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
    float _2913 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
    float _2914 = dot(vec3(_1044, _1045, _1046), vec3(_2907, _2908, _2909));
    float _5058 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
    float _2917 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
    float _2918 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2907, _2908, _2909));
    float _5069 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
    float _2922 = _2899 * _2899;
    float _2926 = ((_2917 * _2917) * (_2922 + (-1.0))) + 1.0;
    float _2933 = exp2(log2(1.0 - (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0)))) * 5.0);
    float _2940 = 1.0 - _2899;
    float _2950 = (0.5 / (((_2828 * ((_2913 * _2940) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2828 * _2940) + _2899) * _2913))) * _2913;
    float _5080 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
    float _2952 = (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_2922 / ((_2926 * _2926) * 3.141590118408203125));
    float _2962 = (((((_2933 * _2850) + _1205) * cbLight._m0[_2887].x) * _2952) * _2575) + ((((cbLight._m0[_2799].x * _2541) * ((_2849 * _2850) + _1205)) * _2873) * _2588);
    float _2963 = (((((_2933 * _2852) + _1207) * cbLight._m0[_2887].y) * _2952) * _2575) + ((((cbLight._m0[_2799].y * _2543) * ((_2849 * _2852) + _1207)) * _2873) * _2588);
    float _2964 = (((((_2933 * _2853) + _1208) * cbLight._m0[_2887].z) * _2952) * _2575) + ((((cbLight._m0[_2799].z * _2545) * ((_2849 * _2853) + _1208)) * _2873) * _2588);
    float _3020;
    float _3022;
    float _3024;
    if (_2628)
    {
        _3020 = _2962;
        _3022 = _2963;
        _3024 = _2964;
    }
    else
    {
        uint _3026 = _2552 + 2u;
        uint _3030 = _2552 + 10u;
        float _3044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3026].w)) * _1047) * 0.949999988079071044921875);
        float _3045 = _3044 * _3044;
        float _3046 = cbLight._m0[_3026].x + _1123;
        float _3047 = cbLight._m0[_3026].y + _1124;
        float _3048 = cbLight._m0[_3026].z + _1125;
        float _3052 = inversesqrt(dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048)));
        float _3053 = _3052 * _3046;
        float _3054 = _3052 * _3047;
        float _3055 = _3052 * _3048;
        float _3056 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_3026].xyz));
        float _5091 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3059 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
        float _3060 = dot(vec3(_1044, _1045, _1046), vec3(_3053, _3054, _3055));
        float _5102 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3063 = isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0));
        float _3064 = dot(vec3(cbLight._m0[_3026].xyz), vec3(_3053, _3054, _3055));
        float _5113 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3068 = _3045 * _3045;
        float _3072 = ((_3063 * _3063) * (_3068 + (-1.0))) + 1.0;
        float _3079 = exp2(log2(1.0 - (isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0)))) * 5.0);
        float _3086 = 1.0 - _3045;
        float _3096 = (0.5 / (((_2828 * ((_3059 * _3086) + _3045)) + 9.9999999392252902907785028219223e-09) + (((_2828 * _3086) + _3045) * _3059))) * _3059;
        float _5124 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
        float _3098 = (isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0))) * (_3068 / ((_3072 * _3072) * 3.141590118408203125));
        float _3099 = isnan(1.0) ? _2567 : (isnan(_2567) ? 1.0 : min(_2567, 1.0));
        _3020 = (((((_3079 * _2850) + _1205) * cbLight._m0[_3030].x) * _3098) * _3099) + _2962;
        _3022 = (((((_3079 * _2852) + _1207) * cbLight._m0[_3030].y) * _3098) * _3099) + _2963;
        _3024 = (((((_3079 * _2853) + _1208) * cbLight._m0[_3030].z) * _3098) * _3099) + _2964;
    }
    float _3130;
    float _3132;
    float _3134;
    if (_2737)
    {
        _3130 = _3020;
        _3132 = _3022;
        _3134 = _3024;
    }
    else
    {
        uint _3141 = _2552 + 3u;
        uint _3145 = _2552 + 11u;
        float _3159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3141].w)) * _1047) * 0.949999988079071044921875);
        float _3160 = _3159 * _3159;
        float _3161 = cbLight._m0[_3141].x + _1123;
        float _3162 = cbLight._m0[_3141].y + _1124;
        float _3163 = cbLight._m0[_3141].z + _1125;
        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
        float _3168 = _3167 * _3161;
        float _3169 = _3167 * _3162;
        float _3170 = _3167 * _3163;
        float _3171 = dot(vec3(_1044, _1045, _1046), vec3(cbLight._m0[_3141].xyz));
        float _5140 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
        float _3174 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
        float _3175 = dot(vec3(_1044, _1045, _1046), vec3(_3168, _3169, _3170));
        float _5151 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
        float _3178 = isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0));
        float _3179 = dot(vec3(cbLight._m0[_3141].xyz), vec3(_3168, _3169, _3170));
        float _5162 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
        float _3183 = _3160 * _3160;
        float _3187 = ((_3178 * _3178) * (_3183 + (-1.0))) + 1.0;
        float _3194 = exp2(log2(1.0 - (isnan(1.0) ? _5162 : (isnan(_5162) ? 1.0 : min(_5162, 1.0)))) * 5.0);
        float _3201 = 1.0 - _3160;
        float _3211 = (0.5 / (((_2828 * ((_3174 * _3201) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_2828 * _3201) + _3160) * _3174))) * _3174;
        float _5173 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
        float _3213 = (isnan(1.0) ? _5173 : (isnan(_5173) ? 1.0 : min(_5173, 1.0))) * (_3183 / ((_3187 * _3187) * 3.141590118408203125));
        float _3214 = isnan(1.0) ? _2568 : (isnan(_2568) ? 1.0 : min(_2568, 1.0));
        _3130 = (((((_3194 * _2850) + _1205) * cbLight._m0[_3145].x) * _3213) * _3214) + _3020;
        _3132 = (((((_3194 * _2852) + _1207) * cbLight._m0[_3145].y) * _3213) * _3214) + _3022;
        _3134 = (((((_3194 * _2853) + _1208) * cbLight._m0[_3145].z) * _3213) * _3214) + _3024;
    }
    float _3280;
    float _3282;
    float _3284;
    float _3286;
    float _3288;
    float _3290;
    if (_2550.y == 0u)
    {
        uvec4 _3235 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3236 = _3235.x;
        uint _3247 = uint((float(_3235.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1144) / _3236))) + floor(float(uint(cbSceneParam._m0[85u].x * _1143) / _3236)));
        float _3257 = (log2(_2328 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3258 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
        uint _3261 = uint(isnan(14.0) ? _3258 : (isnan(_3258) ? 14.0 : min(_3258, 14.0)));
        uvec4 _3266 = texelFetch(g_lightClusterGridBuffer, int(((_3261 << 2u) + (_3247 << 6u)) >> 2u));
        uint _3267 = _3266.x;
        uint _3268 = _3235.z;
        float _3347;
        float _3349;
        float _3351;
        float _3353;
        float _3355;
        float _3357;
        if (((((1u << ((_3268 >> 4u) & 15u)) + 4294967295u) & _3267) == 0u) || ((_3268 & 240u) == 0u))
        {
            _3347 = 0.0;
            _3349 = 0.0;
            _3351 = 0.0;
            _3353 = 0.0;
            _3355 = 0.0;
            _3357 = 0.0;
        }
        else
        {
            float _3348;
            float _3350;
            float _3352;
            float _3354;
            float _3356;
            float _3358;
            float _3500 = 0.0;
            float _3501 = 0.0;
            float _3502 = 0.0;
            float _3503 = 0.0;
            float _3504 = 0.0;
            float _3505 = 0.0;
            uint _3506 = 0u;
            uint _3515;
            bool _3516;
            for (;;)
            {
                _3515 = texelFetch(g_lightClassification, int((((_3261 << 5u) + (_3247 << 9u)) + (_3506 << 2u)) >> 2u)).x;
                _3516 = _3515 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3516)
                {
                    frontier_phi_71_pred = _3505;
                    frontier_phi_71_pred_1 = _3504;
                    frontier_phi_71_pred_2 = _3503;
                    frontier_phi_71_pred_3 = _3502;
                    frontier_phi_71_pred_4 = _3501;
                    frontier_phi_71_pred_5 = _3500;
                }
                else
                {
                    float _3645;
                    float _3646;
                    float _3647;
                    float _3648;
                    float _3649;
                    float _3650;
                    uint _3651;
                    _3645 = _3500;
                    _3646 = _3501;
                    _3647 = _3502;
                    _3648 = _3503;
                    _3649 = _3504;
                    _3650 = _3505;
                    _3651 = _3515;
                    float _3572;
                    float _3573;
                    float _3574;
                    float _3575;
                    float _3576;
                    float _3577;
                    for (;;)
                    {
                        uint _3655 = uint(findLSB(_3651)) + (_3506 << 5u);
                        uint _3652 = (_3651 + 4294967295u) & _3651;
                        uint _3657 = _3655 * 48u;
                        vec4 _3671 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3657)).x, texelFetch(g_PointLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3657 + 3u)).x));
                        uint _3677 = (_3655 * 48u) + 4u;
                        vec4 _3690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3677)).x, texelFetch(g_PointLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3677 + 3u)).x));
                        uint _3696 = (_3655 * 48u) + 8u;
                        vec3 _3707 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3696)).x, texelFetch(g_PointLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3696 + 2u)).x));
                        float _3711 = _3671.x - _2326;
                        float _3712 = _3671.y - _2327;
                        float _3713 = _3671.z - _2328;
                        float _3714 = dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713));
                        float _3717 = inversesqrt(_3714);
                        float _3718 = _3717 * _3711;
                        float _3719 = _3717 * _3712;
                        float _3720 = _3717 * _3713;
                        float _3721 = dot(vec3(_1162, _1165, _1168), vec3(_3718, _3719, _3720));
                        float _3726 = 1.0 - (_3714 * _3671.w);
                        float _5199 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                        float _3727 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                        float _3728 = sqrt(_3714) * _3690.w;
                        float _3731 = 1.39999997615814208984375 / (_3728 + 1.39999997615814208984375);
                        float _3732 = _3731 * _3731;
                        float _3735 = ((1.0 - _3732) * _3721) + _3732;
                        float _3738 = _3728 * _3728;
                        float _3742 = ((isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0))) * _3727) / ((_3738 * 0.699999988079071044921875) + 1.0);
                        float _3746 = (-0.0) - _2326;
                        float _3747 = (-0.0) - _2327;
                        float _3748 = (-0.0) - _2328;
                        float _3752 = inversesqrt(dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748)));
                        float _3753 = _3752 * _3746;
                        float _3754 = _3752 * _3747;
                        float _3755 = _3752 * _3748;
                        float _3762 = exp2(log2(1.0 / ((_3738 * 3.5) + 5.0)) * 0.25);
                        float _3763 = 1.0 - _1237;
                        float _3770 = sqrt(1.0 - ((1.0 - (_3763 * _3763)) * (1.0 - (_3762 * _3762))));
                        float _3771 = _3770 * _3770;
                        float _3772 = _3771 * _3771;
                        float _3773 = _3753 + _3718;
                        float _3774 = _3754 + _3719;
                        float _3775 = _3755 + _3720;
                        float _3779 = inversesqrt(dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775)));
                        float _3783 = dot(vec3(_1162, _1165, _1168), vec3(_3753, _3754, _3755));
                        float _5215 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                        float _3786 = isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0));
                        float _3787 = dot(vec3(_1162, _1165, _1168), vec3(_3779 * _3773, _3779 * _3774, _3779 * _3775));
                        float _5226 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                        float _3790 = isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0));
                        float _3794 = ((_3790 * _3790) * (_3772 + (-1.0))) + 1.0;
                        float _3795 = _3731 * _3771;
                        float _3796 = _3795 * _3795;
                        float _3799 = ((1.0 - _3796) * _3721) + _3796;
                        float _5237 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                        float _3800 = isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0));
                        float _3801 = 1.0 - _3771;
                        float _3811 = (0.5 / (((_3800 * ((_3786 * _3801) + _3771)) + 9.9999999392252902907785028219223e-09) + (((_3800 * _3801) + _3771) * _3786))) * _3800;
                        float _5248 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                        float _3822 = (((_3772 * 3.1415927410125732421875) * (isnan(1.0) ? _5248 : (isnan(_5248) ? 1.0 : min(_5248, 1.0)))) / ((_3794 * _3794) * ((_3738 * 2.1991131305694580078125) + 3.141590118408203125))) * _3727;
                        _3575 = (_3742 * _3690.x) + _3648;
                        _3576 = (_3742 * _3690.y) + _3649;
                        _3577 = (_3742 * _3690.z) + _3650;
                        _3572 = (_3822 * _3707.x) + _3645;
                        _3573 = (_3822 * _3707.y) + _3646;
                        _3574 = (_3822 * _3707.z) + _3647;
                        if (_3652 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3645 = _3572;
                            _3646 = _3573;
                            _3647 = _3574;
                            _3648 = _3575;
                            _3649 = _3576;
                            _3650 = _3577;
                            _3651 = _3652;
                        }
                    }
                    frontier_phi_71_pred = _3577;
                    frontier_phi_71_pred_1 = _3576;
                    frontier_phi_71_pred_2 = _3575;
                    frontier_phi_71_pred_3 = _3574;
                    frontier_phi_71_pred_4 = _3573;
                    frontier_phi_71_pred_5 = _3572;
                }
                _3358 = frontier_phi_71_pred;
                _3356 = frontier_phi_71_pred_1;
                _3354 = frontier_phi_71_pred_2;
                _3352 = frontier_phi_71_pred_3;
                _3350 = frontier_phi_71_pred_4;
                _3348 = frontier_phi_71_pred_5;
                uint _3507 = _3506 + 1u;
                if (_3507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3500 = _3348;
                    _3501 = _3350;
                    _3502 = _3352;
                    _3503 = _3354;
                    _3504 = _3356;
                    _3505 = _3358;
                    _3506 = _3507;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3347 = _3348;
            _3349 = _3350;
            _3351 = _3352;
            _3353 = _3354;
            _3355 = _3356;
            _3357 = _3358;
        }
        uvec4 _3361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3362 = _3361.z;
        uint _3364 = (_3362 >> 8u) & 15u;
        float _3468;
        float _3470;
        float _3472;
        float _3474;
        float _3476;
        float _3478;
        if (((4294967295u << _3364) & _3267) == 0u)
        {
            _3468 = _3347;
            _3470 = _3349;
            _3472 = _3351;
            _3474 = _3353;
            _3476 = _3355;
            _3478 = _3357;
        }
        else
        {
            float _3493 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
            float _3494 = _3493 * _2326;
            float _3495 = _3493 * _2327;
            float _3496 = _3493 * _2328;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3364 < ((_3362 >> 12u) & 15u))
            {
                float _3469;
                float _3471;
                float _3473;
                float _3475;
                float _3477;
                float _3479;
                float _3628 = _3347;
                float _3629 = _3349;
                float _3630 = _3351;
                float _3631 = _3353;
                float _3632 = _3355;
                float _3633 = _3357;
                uint _3634 = _3364;
                uint _3643;
                bool _3644;
                for (;;)
                {
                    _3643 = texelFetch(g_lightClassification, int((((_3261 << 5u) + (_3247 << 9u)) + (_3634 << 2u)) >> 2u)).x;
                    _3644 = _3643 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3644)
                    {
                        frontier_phi_82_pred = _3633;
                        frontier_phi_82_pred_1 = _3632;
                        frontier_phi_82_pred_2 = _3631;
                        frontier_phi_82_pred_3 = _3630;
                        frontier_phi_82_pred_4 = _3629;
                        frontier_phi_82_pred_5 = _3628;
                    }
                    else
                    {
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _4129;
                        float _4130;
                        float _4131;
                        float _4132;
                        float _4133;
                        float _4134;
                        float _3849 = _3628;
                        float _3850 = _3629;
                        float _3851 = _3630;
                        float _3852 = _3631;
                        float _3853 = _3632;
                        float _3854 = _3633;
                        uint _3855 = _3643;
                        uint _3856;
                        vec4 _3881;
                        float _3882;
                        vec4 _3897;
                        vec3 _3909;
                        vec4 _3924;
                        vec4 _3939;
                        float _3985;
                        bool _3986;
                        for (;;)
                        {
                            uint _3866 = ((_3634 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3855));
                            _3856 = (_3855 + 4294967295u) & _3855;
                            uint _3868 = _3866 * 40u;
                            _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            _3882 = _3881.w;
                            uint _3884 = (_3866 * 40u) + 4u;
                            _3897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3884 + 3u)).x));
                            uint _3899 = (_3866 * 40u) + 8u;
                            _3909 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 2u)).x));
                            uint _3911 = (_3866 * 40u) + 16u;
                            _3924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3911 + 3u)).x));
                            uint _3926 = (_3866 * 40u) + 20u;
                            _3939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3926 + 3u)).x));
                            uint _3941 = (_3866 * 40u) + 24u;
                            vec4 _3954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3941 + 3u)).x));
                            uint _3960 = (_3866 * 40u) + 28u;
                            vec4 _3973 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3960 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3960 + 3u)).x));
                            _3985 = fma(_2328, _3973.z, fma(_2327, _3973.y, _3973.x * _2326)) + _3973.w;
                            _3986 = !((fma(_2328, _3954.z, fma(_2327, _3954.y, _3954.x * _2326)) + _3954.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3986)
                            {
                                float _4013 = _3881.x - _2326;
                                float _4014 = _3881.y - _2327;
                                float _4015 = _3881.z - _2328;
                                float _4016 = dot(vec3(_4013, _4014, _4015), vec3(_4013, _4014, _4015));
                                float _4019 = inversesqrt(_4016);
                                float _4020 = _4019 * _4013;
                                float _4021 = _4019 * _4014;
                                float _4022 = _4019 * _4015;
                                float _4026 = 1.0 - (_4016 / (_3882 * _3882));
                                float _5259 = isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0));
                                float _4027 = isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0));
                                float _4031 = sqrt(_4016) * _3897.w;
                                float _4033 = 1.39999997615814208984375 / (_4031 + 1.39999997615814208984375);
                                float _4034 = _4033 * _4033;
                                float _4037 = ((1.0 - _4034) * dot(vec3(_4020, _4021, _4022), vec3(_1162, _1165, _1168))) + _4034;
                                float _4040 = _4031 * _4031;
                                float _4044 = (fma(_2328, _3924.z, fma(_2327, _3924.y, _3924.x * _2326)) + _3924.w) / _3985;
                                float _4045 = (fma(_2328, _3939.z, fma(_2327, _3939.y, _3939.x * _2326)) + _3939.w) / _3985;
                                float _4049 = 1.0 - dot(vec2(_4044, _4045), vec2(_4044, _4045));
                                float _5275 = isnan(0.0) ? _4049 : (isnan(_4049) ? 0.0 : max(_4049, 0.0));
                                float _4050 = isnan(1.0) ? _5275 : (isnan(_5275) ? 1.0 : min(_5275, 1.0));
                                float _4051 = _4050 * (((isnan(0.0) ? _4037 : (isnan(_4037) ? 0.0 : max(_4037, 0.0))) * _4027) / ((_4040 * 0.699999988079071044921875) + 1.0));
                                float _4063 = exp2(log2(1.0 / ((_4040 * 3.5) + 5.0)) * 0.25);
                                float _4064 = 1.0 - _1237;
                                float _4071 = sqrt(1.0 - ((1.0 - (_4064 * _4064)) * (1.0 - (_4063 * _4063))));
                                float _4072 = _4071 * _4071;
                                float _4073 = _4072 * _4072;
                                float _4074 = _4020 - _3494;
                                float _4075 = _4021 - _3495;
                                float _4076 = _4022 - _3496;
                                float _4080 = inversesqrt(dot(vec3(_4074, _4075, _4076), vec3(_4074, _4075, _4076)));
                                float _4084 = dot(vec3(_1162, _1165, _1168), vec3((-0.0) - _3494, (-0.0) - _3495, (-0.0) - _3496));
                                float _5286 = isnan(0.0) ? _4084 : (isnan(_4084) ? 0.0 : max(_4084, 0.0));
                                float _4087 = isnan(1.0) ? _5286 : (isnan(_5286) ? 1.0 : min(_5286, 1.0));
                                float _4088 = dot(vec3(_1162, _1165, _1168), vec3(_4080 * _4074, _4080 * _4075, _4080 * _4076));
                                float _5297 = isnan(0.0) ? _4088 : (isnan(_4088) ? 0.0 : max(_4088, 0.0));
                                float _4091 = isnan(1.0) ? _5297 : (isnan(_5297) ? 1.0 : min(_5297, 1.0));
                                float _4095 = ((_4091 * _4091) * (_4073 + (-1.0))) + 1.0;
                                float _4096 = _4033 * _4072;
                                float _4097 = _4096 * _4096;
                                float _4103 = ((1.0 - _4097) * dot(vec3(_1162, _1165, _1168), vec3(_4020, _4021, _4022))) + _4097;
                                float _5308 = isnan(0.0) ? _4103 : (isnan(_4103) ? 0.0 : max(_4103, 0.0));
                                float _4104 = isnan(1.0) ? _5308 : (isnan(_5308) ? 1.0 : min(_5308, 1.0));
                                float _4105 = 1.0 - _4072;
                                float _4115 = (0.5 / (((_4104 * ((_4087 * _4105) + _4072)) + 9.9999999392252902907785028219223e-09) + (((_4104 * _4105) + _4072) * _4087))) * _4104;
                                float _5319 = isnan(0.0) ? _4115 : (isnan(_4115) ? 0.0 : max(_4115, 0.0));
                                float _4125 = (_4050 * _4027) * (((_4073 * 3.1415927410125732421875) * (isnan(1.0) ? _5319 : (isnan(_5319) ? 1.0 : min(_5319, 1.0)))) / ((_4095 * _4095) * ((_4040 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4051 * _3897.z;
                                frontier_phi_88_pred_1 = _4051 * _3897.y;
                                frontier_phi_88_pred_2 = _4051 * _3897.x;
                                frontier_phi_88_pred_3 = _4125 * _3909.z;
                                frontier_phi_88_pred_4 = _4125 * _3909.y;
                                frontier_phi_88_pred_5 = _4125 * _3909.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4134 = frontier_phi_88_pred;
                            _4133 = frontier_phi_88_pred_1;
                            _4132 = frontier_phi_88_pred_2;
                            _4131 = frontier_phi_88_pred_3;
                            _4130 = frontier_phi_88_pred_4;
                            _4129 = frontier_phi_88_pred_5;
                            _3839 = _4132 + _3852;
                            _3840 = _4133 + _3853;
                            _3841 = _4134 + _3854;
                            _3836 = _4129 + _3849;
                            _3837 = _4130 + _3850;
                            _3838 = _4131 + _3851;
                            if (_3856 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3849 = _3836;
                                _3850 = _3837;
                                _3851 = _3838;
                                _3852 = _3839;
                                _3853 = _3840;
                                _3854 = _3841;
                                _3855 = _3856;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3841;
                        frontier_phi_82_pred_1 = _3840;
                        frontier_phi_82_pred_2 = _3839;
                        frontier_phi_82_pred_3 = _3838;
                        frontier_phi_82_pred_4 = _3837;
                        frontier_phi_82_pred_5 = _3836;
                    }
                    _3479 = frontier_phi_82_pred;
                    _3477 = frontier_phi_82_pred_1;
                    _3475 = frontier_phi_82_pred_2;
                    _3473 = frontier_phi_82_pred_3;
                    _3471 = frontier_phi_82_pred_4;
                    _3469 = frontier_phi_82_pred_5;
                    uint _3635 = _3634 + 1u;
                    if (_3635 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3628 = _3469;
                        _3629 = _3471;
                        _3630 = _3473;
                        _3631 = _3475;
                        _3632 = _3477;
                        _3633 = _3479;
                        _3634 = _3635;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3475;
                frontier_phi_63_64_ladder_1 = _3479;
                frontier_phi_63_64_ladder_2 = _3477;
                frontier_phi_63_64_ladder_3 = _3473;
                frontier_phi_63_64_ladder_4 = _3471;
                frontier_phi_63_64_ladder_5 = _3469;
            }
            else
            {
                frontier_phi_63_64_ladder = _3353;
                frontier_phi_63_64_ladder_1 = _3357;
                frontier_phi_63_64_ladder_2 = _3355;
                frontier_phi_63_64_ladder_3 = _3351;
                frontier_phi_63_64_ladder_4 = _3349;
                frontier_phi_63_64_ladder_5 = _3347;
            }
            _3468 = frontier_phi_63_64_ladder_5;
            _3470 = frontier_phi_63_64_ladder_4;
            _3472 = frontier_phi_63_64_ladder_3;
            _3474 = frontier_phi_63_64_ladder;
            _3476 = frontier_phi_63_64_ladder_2;
            _3478 = frontier_phi_63_64_ladder_1;
        }
        float _3483 = isnan(1.0) ? _1221 : (isnan(_1221) ? 1.0 : min(_1221, 1.0));
        _3280 = (_3483 * _3474) + _2792;
        _3282 = (_3483 * _3476) + _2794;
        _3284 = (_3483 * _3478) + _2796;
        _3286 = ((_3468 * _1205) * _3483) + _3130;
        _3288 = ((_3470 * _1207) * _3483) + _3132;
        _3290 = ((_3472 * _1208) * _3483) + _3134;
    }
    else
    {
        _3280 = _2792;
        _3282 = _2794;
        _3284 = _2796;
        _3286 = _3130;
        _3288 = _3132;
        _3290 = _3134;
    }
    float _5335 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _5346 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _5357 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _3307 = ((isnan(1.0) ? _5335 : (isnan(_5335) ? 1.0 : min(_5335, 1.0))) * (_3280 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1221))) + ((_3286 + ((isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    float _3308 = ((isnan(1.0) ? _5346 : (isnan(_5346) ? 1.0 : min(_5346, 1.0))) * (_3282 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1221))) + ((_3288 + ((isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    float _3309 = ((isnan(1.0) ? _5357 : (isnan(_5357) ? 1.0 : min(_5357, 1.0))) * (_3284 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1221))) + ((_3290 + ((isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0))) * _2059)) * cbPerFrame._m0[3u].x);
    uint _3310 = _292 + 6u;
    float _3318 = _1143 / cbSceneParam._m0[86u].x;
    float _3319 = _1144 / cbSceneParam._m0[86u].y;
    vec4 _3333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3318, _3319, (log2((isnan(cbSceneParam._m0[77u].w) ? _1066 : (isnan(_1066) ? cbSceneParam._m0[77u].w : min(_1066, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3335 = _3333.x;
    float _3336 = _3333.y;
    float _3337 = _3333.z;
    float _3338 = _3333.w;
    float _3410;
    float _3412;
    float _3414;
    float _3416;
    if (_1066 > cbSceneParam._m0[78u].w)
    {
        float _3372 = isnan(_1066) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1066 : min(cbSceneParam._m0[80u].w, _1066));
        float _3373 = _3372 / _1066;
        float _3384 = _3373 * _1116;
        float _3385 = _1117 * _3373;
        float _3386 = (-0.0) - _3385;
        float _3388 = _3373 * _1118;
        float _3390 = (cbSceneParam._m0[77u].w * _3386) / _3372;
        float _3391 = _3390 + cbSceneParam._m0[79u].w;
        float _3392 = cbSceneParam._m0[79u].w - _3385;
        float _3398 = sqrt(((_3384 * _3384) + (_3385 * _3385)) + (_3388 * _3388));
        float _3401 = (1.0 - (cbSceneParam._m0[77u].w / _3372)) * _3398;
        float _3406 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3408 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3585;
        if (abs((_3386 - _3390) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3585 = ((((_3391 > 0.0) ? exp2(_3406 * _3391) : (2.0 - exp2(_3408 * _3391))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3401;
        }
        else
        {
            float _3529 = 1.0 / cbSceneParam._m0[80u].x;
            float _3530 = isnan(_3392) ? _3391 : (isnan(_3391) ? _3392 : max(_3391, _3392));
            float _3531 = isnan(_3392) ? _3391 : (isnan(_3391) ? _3392 : min(_3391, _3392));
            float _3540 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : min(_3530, 0.0));
            float _3541 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : min(_3531, 0.0));
            _3585 = ((abs(_3398 / _3386) * cbSceneParam._m0[80u].y) * ((((_3540 - _3541) * 2.0) - ((exp2(_3406 * (isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0)))) - exp2(_3406 * (isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))))) * _3529)) - ((exp2(_3408 * _3540) - exp2(_3408 * _3541)) * _3529))) + (_3401 * cbSceneParam._m0[80u].z);
        }
        vec4 _3587 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3318, _3319, 1.0), 0.0);
        float _3596 = exp2((_3585 * (-1.44269502162933349609375)) * (1.0 - _3587.w));
        float _3597 = log2(_3596);
        float _3613 = log2(_3338);
        _3410 = (exp2(_3613 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3597 * cbSceneParam._m0[78u].x)) * _3587.x) / cbSceneParam._m0[78u].x)) + _3335;
        _3412 = (exp2(_3613 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3597 * cbSceneParam._m0[78u].y)) * _3587.y) / cbSceneParam._m0[78u].y)) + _3336;
        _3414 = (exp2(_3613 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3597 * cbSceneParam._m0[78u].z)) * _3587.z) / cbSceneParam._m0[78u].z)) + _3337;
        _3416 = _3596 * _3338;
    }
    else
    {
        _3410 = _3335;
        _3412 = _3336;
        _3414 = _3337;
        _3416 = _3338;
    }
    bool _3623;
    vec4 _3426;
    vec4 _3448;
    float _3450;
    float _3454;
    float _3455;
    float _3456;
    float _3457;
    bool _3467;
    for (;;)
    {
        _3426 = cbMatDynParam._m0[0u];
        float _3428 = roundEven(_3426.y);
        bool _3429 = _3428 == 3.0;
        float _3430 = log2(_3416);
        float _3437 = exp2(_3430 * cbSceneParam._m0[78u].x) * _3307;
        float _3438 = exp2(_3430 * cbSceneParam._m0[78u].y) * _3308;
        float _3439 = exp2(_3430 * cbSceneParam._m0[78u].z) * _3309;
        float _3446 = _1132 + (-0.5);
        _3448 = cbMtdParam._m0[1u];
        _3450 = _3448.y * _3446;
        float _3453 = (_3428 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3454 = _3453 * (_3429 ? _3437 : (_3437 + (cbSceneParam._m0[72u].w * _3410)));
        _3455 = _3453 * (_3429 ? _3438 : (_3438 + (cbSceneParam._m0[72u].w * _3412)));
        _3456 = _3453 * (_3429 ? _3439 : (_3439 + (cbSceneParam._m0[72u].w * _3414)));
        _3457 = _3446 * 0.999000012874603271484375;
        _3467 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3467)
        {
            if ((cbInstanceData._m0[_292 + 7u].x + _3457) < 0.5)
            {
                _3623 = true;
                break;
            }
        }
        uint _3564 = _1181 + uint(_3426.w);
        if ((cbInstanceData._m0[_3564].w < 1.0) && ((cbInstanceData._m0[_3564].w + _3457) < 0.5))
        {
            _3623 = true;
            break;
        }
        if ((_3450 + 1.0) < _3448.x)
        {
            _3623 = true;
            break;
        }
        _3623 = false;
        break;
    }
    float _3827;
    if (_3623)
    {
        discard_state = true;
        _3827 = 0.0;
    }
    else
    {
        _3827 = cbInstanceData._m0[_3310].w;
    }
    SV_Target.x = _3454;
    SV_Target.y = _3455;
    SV_Target.z = _3456;
    SV_Target.w = _3827;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3310].w;
    discard_exit();
}


