#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1601;
float _3981;
float _3982;
float _3983;
float _3984;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3993 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4004 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4015 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4026 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _493 = (_486 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _494 = (_486 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _495 = (_486 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4037 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _569 = (_351.x * cbMtdParam._m0[9u].x) * ((_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493);
    float _570 = (_351.y * cbMtdParam._m0[9u].y) * ((_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494);
    float _571 = (_351.z * cbMtdParam._m0[9u].z) * ((_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495);
    float _575 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _569;
    float _578 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _570;
    float _581 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _571;
    float _589 = (((_569 - _575) * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) + _575) * 4.55000019073486328125;
    float _591 = (((_570 - _578) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) + _578) * 4.55000019073486328125;
    float _593 = (((_571 - _581) * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) + _581) * 4.55000019073486328125;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _652 = _650.x;
    float _653 = _650.y;
    float _654 = _650.z;
    float _661 = ((_633.x - _652) * _486) + _652;
    float _662 = ((_633.y - _653) * _486) + _653;
    float _663 = ((_633.z - _654) * _486) + _654;
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _688 = ((_675.z - _663) * _559) + _663;
    float _691 = ((((_675.x - _661) * _559) + _661) * 2.0) + (-1.0);
    float _692 = ((((_675.y - _662) * _559) + _662) * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _4048 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _698 = sqrt(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))));
    vec4 _712 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _739 = _737.x;
    float _740 = 1.0 - _739;
    float _749 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _752 = ((isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : min(_749, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _761 = (_752 - ((((((_739 - _740) * cbMtdParam._m0[24u].z) + _740) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _752))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4069 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _769 = (_762 * (cbMtdParam._m0[17u].x - _589)) + _589;
    float _770 = (_762 * (cbMtdParam._m0[17u].y - _591)) + _591;
    float _771 = (_762 * (cbMtdParam._m0[17u].z - _593)) + _593;
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _785 = _783.x;
    float _786 = 1.0 - _785;
    float _811 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_785 - _786) * cbMtdParam._m0[24u].w) + _786) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4080 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _812 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _820 = ((((cbMtdParam._m0[10u].x - _769) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _812) + _769;
    float _821 = ((((cbMtdParam._m0[10u].y - _770) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _812) + _770;
    float _822 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _771)) * _812) + _771;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _850 = _848.x;
    float _867 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _850) * _486) + _850;
    float _884 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _867) * _559) + _867;
    float _888 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _884) * cbMtdParam._m0[19u].z) + _884;
    float _890 = _888 - (_888 * _762);
    float _892 = _890 - (_890 * _812);
    float _897 = (((_610.z - _688) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _688;
    float _901 = ((_712.z - _897) * cbMtdParam._m0[19u].w) + _897;
    vec4 _915 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _922 = (_915.x * 2.0) + (-1.0);
    float _923 = (_915.y * 2.0) + (-1.0);
    float _924 = dot(vec2(_922, _923), vec2(_922, _923));
    float _4091 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _932 = (_762 * (_915.z - _901)) + _901;
    float _935 = ((cbMtdParam._m0[23u].x - _932) * _812) + _932;
    vec4 _956 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _962 = (_956.x * 2.0) + (-1.0);
    float _963 = (_956.y * 2.0) + (-1.0);
    float _964 = dot(vec2(_962, _963), vec2(_962, _963));
    float _4102 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _978 = (_691 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_610.x * 2.0) + (-1.0)))) + (((_712.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _979 = (_692 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_610.y * 2.0) + (-1.0)))) + (((_712.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _991 = (((_922 - _978) + (cbMtdParam._m0[21u].x * _978)) * _762) + _978;
    float _992 = (((_923 - _979) + (cbMtdParam._m0[21u].x * _979)) * _762) + _979;
    float _993 = (_762 * (sqrt(1.0 - (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) - _698)) + _698;
    float _1004 = (((_962 - _991) + (_991 * cbMtdParam._m0[22u].z)) * _812) + _991;
    float _1005 = (((_963 - _992) + (_992 * cbMtdParam._m0[22u].z)) * _812) + _992;
    float _1006 = ((sqrt(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) - _993) * _812) + _993;
    float _1008 = cbMtdParam._m0[22u].x + _712.w;
    float _1011 = fma(_1006, _263 * NORMAL.x, fma(_1005, _270 * TANGENT.x, (_256 * _248) * _1004));
    float _1014 = fma(_1006, _263 * NORMAL.y, fma(_1005, _270 * TANGENT.y, (_256 * _249) * _1004));
    float _1017 = fma(_1006, _263 * NORMAL.z, fma(_1005, _270 * TANGENT.z, (_256 * _250) * _1004));
    float _1021 = inversesqrt(dot(vec3(_1011, _1014, _1017), vec3(_1011, _1014, _1017)));
    float _1022 = _1021 * _1011;
    float _1023 = _1021 * _1014;
    float _1024 = _1021 * _1017;
    float _4113 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _1025 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _4135 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4146 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4157 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4168 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _1030 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _1044 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1084 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1094 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1084);
    float _1095 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1084);
    float _1096 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1084);
    float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
    float _1101 = _1094 * _1100;
    float _1102 = _1095 * _1100;
    float _1103 = _1096 * _1100;
    vec4 _1108 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1110 = _1108.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1282 = sqrt(((_1094 * _1094) + (_1095 * _1095)) + (_1096 * _1096));
        float _1288 = (cbMatDynParam._m0[5u].x * _1282) + cbMatDynParam._m0[5u].y;
        float _4179 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1293 = (cbMatDynParam._m0[5u].z * _1282) + cbMatDynParam._m0[5u].w;
        float _4190 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) - _1289)) + _1289) < ((_1110 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1121 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1122 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1140 = fma(_1024, cbSceneParam._m0[5u].z, fma(_1023, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1022));
    float _1143 = fma(_1024, cbSceneParam._m0[6u].z, fma(_1023, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1022));
    float _1146 = fma(_1024, cbSceneParam._m0[7u].z, fma(_1023, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1022));
    uint _1159 = _295 + 9u;
    uint _1160 = _1159 + uint(cbMatDynParam._m0[0u].w);
    float _1166 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) * cbInstanceData._m0[_1160].x;
    float _1167 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * cbInstanceData._m0[_1160].y;
    float _1168 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) * cbInstanceData._m0[_1160].z;
    float _4201 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _1169 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
    float _4212 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1170 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _1172 = 1.0 - _1030;
    float _1173 = _1169 * _1172;
    float _1174 = _1170 * _1172;
    float _1175 = _1171 * _1172;
    float _1180 = (_1169 + (-0.039999999105930328369140625)) * _1030;
    float _1181 = (_1170 + (-0.039999999105930328369140625)) * _1030;
    float _1182 = (_1171 + (-0.039999999105930328369140625)) * _1030;
    float _1183 = _1180 + 0.039999999105930328369140625;
    float _1185 = _1181 + 0.039999999105930328369140625;
    float _1186 = _1182 + 0.039999999105930328369140625;
    vec4 _1195 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1121, cbSceneParam._m0[86u].y * _1122));
    float _1199 = ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * TEXCOORD_5.w) * _1195.x;
    float _1200 = dot(vec3(_1022, _1023, _1024), vec3(_1101, _1102, _1103));
    float _1203 = _1200 * 2.0;
    float _1207 = (_1203 * _1022) - _1101;
    float _1208 = (_1203 * _1023) - _1102;
    float _1209 = (_1203 * _1024) - _1103;
    float _1213 = abs(dot(vec3(_1101, _1102, _1103), vec3(_1022, _1023, _1024)));
    float _4234 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1215 = sqrt(_1025);
    float _1228 = exp2((_1215 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1215 * 3.0));
    float _1234 = (1.0 - _1228) * ((_1215 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1235 = _1228 * _1215;
    float _1263 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1267 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1271 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1600;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1325 = fma(_1271, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1263));
        float _1329 = fma(_1271, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1263));
        float _1333 = fma(_1271, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1263));
        float _1358 = _1263 + _1022;
        float _1359 = _1267 + _1023;
        float _1360 = _1271 + _1024;
        float _1370 = fma(_1360, cbModelParam._m0[26u].z, fma(_1359, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1358)) - _1325;
        float _1371 = fma(_1360, cbModelParam._m0[27u].z, fma(_1359, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1358)) - _1329;
        float _1372 = fma(_1360, cbModelParam._m0[28u].z, fma(_1359, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1358)) - _1333;
        float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
        float _1389 = ((_1376 * _1370) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1325 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1376 * _1371) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1329 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1391 = ((_1376 * _1372) / cbModelParam._m0[34u].z) + ((((((_1333 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1389, _1390, _1391), 0.0);
        float _1428 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1394.x + (-0.5));
        float _1430 = _1428 * (_1394.y + (-0.5));
        float _1431 = _1428 * (_1394.z + (-0.5));
        float _1438 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1401.x + (-0.5));
        float _1440 = _1438 * (_1401.y + (-0.5));
        float _1441 = _1438 * (_1401.z + (-0.5));
        float _1448 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1408.x + (-0.5));
        float _1450 = _1448 * (_1408.y + (-0.5));
        float _1451 = _1448 * (_1408.z + (-0.5));
        float _1458 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1415.x + (-0.5));
        float _1460 = _1458 * (_1415.y + (-0.5));
        float _1461 = _1458 * (_1415.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1482 = (dot(vec3(_1022, _1023, _1024), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1492 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4282 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1494 + 1.0))) + _1499) * _1462;
        float _1509 = _1430 * 0.5;
        float _1510 = _1440 * 0.5;
        float _1511 = _1450 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_1022, _1023, _1024), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4315 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1536 + 1.0))) + _1541) * _1463;
        float _1551 = _1431 * 0.5;
        float _1552 = _1441 * 0.5;
        float _1553 = _1451 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_1022, _1023, _1024), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4348 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1578 + 1.0))) + _1583) * _1464;
        _1600 = _1431;
        _1602 = _1430;
        _1603 = _1429;
        _1604 = _1441;
        _1605 = _1440;
        _1606 = _1439;
        _1607 = _1451;
        _1608 = _1450;
        _1609 = _1449;
        _1610 = _1464;
        _1611 = _1463;
        _1612 = _1462;
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1614 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1615 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
    }
    else
    {
        _1600 = _1601;
        _1602 = _1601;
        _1603 = _1601;
        _1604 = _1601;
        _1605 = _1601;
        _1606 = _1601;
        _1607 = _1601;
        _1608 = _1601;
        _1609 = _1601;
        _1610 = _1601;
        _1611 = _1601;
        _1612 = _1601;
        _1613 = 0.0;
        _1614 = 0.0;
        _1615 = 0.0;
    }
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1642 = fma(_1271, cbModelParam._m0[30u].z, fma(_1267, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1263));
        float _1646 = fma(_1271, cbModelParam._m0[31u].z, fma(_1267, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1263));
        float _1650 = fma(_1271, cbModelParam._m0[32u].z, fma(_1267, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1263));
        float _1673 = _1263 + _1022;
        float _1674 = _1267 + _1023;
        float _1675 = _1271 + _1024;
        float _1685 = fma(_1675, cbModelParam._m0[30u].z, fma(_1674, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1673)) - _1642;
        float _1686 = fma(_1675, cbModelParam._m0[31u].z, fma(_1674, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1673)) - _1646;
        float _1687 = fma(_1675, cbModelParam._m0[32u].z, fma(_1674, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1673)) - _1650;
        float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
        float _1704 = ((_1691 * _1685) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1642 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1705 = ((_1691 * _1686) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1646 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1706 = ((_1691 * _1687) / cbModelParam._m0[35u].z) + ((((((_1650 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        float _1741 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1708.x + (-0.5));
        float _1743 = _1741 * (_1708.y + (-0.5));
        float _1744 = _1741 * (_1708.z + (-0.5));
        float _1751 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1715.x + (-0.5));
        float _1753 = _1751 * (_1715.y + (-0.5));
        float _1754 = _1751 * (_1715.z + (-0.5));
        float _1761 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1722.x + (-0.5));
        float _1763 = _1761 * (_1722.y + (-0.5));
        float _1764 = _1761 * (_1722.z + (-0.5));
        float _1771 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1729.x + (-0.5));
        float _1773 = _1771 * (_1729.y + (-0.5));
        float _1774 = _1771 * (_1729.z + (-0.5));
        float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1776 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = _1742 * 0.5;
        float _1779 = _1752 * 0.5;
        float _1780 = _1762 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_1022, _1023, _1024), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1775 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4411 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1805 + 1.0))) + _1810) * _1775;
        float _1820 = _1743 * 0.5;
        float _1821 = _1753 * 0.5;
        float _1822 = _1763 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1022, _1023, _1024), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1776 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4444 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1847 + 1.0))) + _1852) * _1776;
        float _1862 = _1744 * 0.5;
        float _1863 = _1754 * 0.5;
        float _1864 = _1764 * 0.5;
        float _1865 = dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864));
        float _1870 = (_1865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1865);
        float _1878 = (dot(vec3(_1022, _1023, _1024), vec3(_1870 * _1862, _1870 * _1863, _1870 * _1864)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1887 = sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1889 = _1888 * 2.0;
        float _1893 = (1.0 - _1888) / (_1888 + 1.0);
        float _4477 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1903 = ((((1.0 - _1894) * (_1889 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1889 + 1.0))) + _1894) * _1777;
        _1911 = _1744;
        _1912 = _1743;
        _1913 = _1742;
        _1914 = _1754;
        _1915 = _1753;
        _1916 = _1752;
        _1917 = _1764;
        _1918 = _1763;
        _1919 = _1762;
        _1920 = _1777;
        _1921 = _1776;
        _1922 = _1775;
        _1923 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1924 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)));
    }
    else
    {
        _1911 = _1601;
        _1912 = _1601;
        _1913 = _1601;
        _1914 = _1601;
        _1915 = _1601;
        _1916 = _1601;
        _1917 = _1601;
        _1918 = _1601;
        _1919 = _1601;
        _1920 = _1601;
        _1921 = _1601;
        _1922 = _1601;
        _1923 = 0.0;
        _1924 = 0.0;
        _1925 = 0.0;
    }
    float _1935 = (cbModelParam._m0[1u].x * (_1923 - _1613)) + _1613;
    float _1936 = (cbModelParam._m0[1u].x * (_1924 - _1614)) + _1614;
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1615)) + _1615;
    float _1958 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1935));
    float _1979 = _1207 * 0.5;
    float _1980 = _1208 * 0.5;
    float _1981 = _1209 * 0.5;
    float _1982 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _1985 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1912, _1915, _1918, _1921));
    float _1988 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1911, _1914, _1917, _1920));
    float _2022;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1995 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1600, _1604, _1607, _1610));
        float _1999 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1602, _1605, _1608, _1611));
        float _2003 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1603, _1606, _1609, _1612));
        float _2010 = dot(vec4(cbModelParam._m0[39u]), vec4(_1979, _1980, _1981, 1.0));
        _2022 = dot(vec3(isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2010) ? 0.0 : (isnan(0.0) ? _2010 : max(0.0, _2010))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2022 = 1.0;
    }
    float _2033;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2024 = dot(vec4(cbModelParam._m0[40u]), vec4(_1979, _1980, _1981, 1.0));
        _2033 = dot(vec3(isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2024) ? 0.0 : (isnan(0.0) ? _2024 : max(0.0, _2024))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2033 = 1.0;
    }
    float _2037 = (_2033 * cbModelParam._m0[1u].x) + (_2022 * (1.0 - cbModelParam._m0[1u].x));
    float _2047 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1025);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2047 : min(cbModelParam._m0[25u].z, _2047));
    float _2129;
    float _2131;
    float _2133;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2096 = fma(_1271, cbModelParam._m0[13u].z, fma(_1267, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1263)) + cbModelParam._m0[13u].w;
        float _2100 = fma(_1271, cbModelParam._m0[14u].z, fma(_1267, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1263)) + cbModelParam._m0[14u].w;
        float _2104 = fma(_1271, cbModelParam._m0[15u].z, fma(_1267, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1263)) + cbModelParam._m0[15u].w;
        float _2107 = fma(_1209, cbModelParam._m0[13u].z, fma(_1208, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1207));
        float _2110 = fma(_1209, cbModelParam._m0[14u].z, fma(_1208, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1207));
        float _2113 = fma(_1209, cbModelParam._m0[15u].z, fma(_1208, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1207));
        float _2141;
        if (_2107 > 0.0)
        {
            _2141 = abs((1.0 - _2096) / _2107);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2096 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2141 = frontier_phi_17_15_ladder;
        }
        float _2344;
        if (_2110 > 0.0)
        {
            _2344 = abs((1.0 - _2100) / _2110);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2100 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2344 = frontier_phi_26_22_ladder;
        }
        float _2598;
        if (_2113 > 0.0)
        {
            _2598 = abs((1.0 - _2104) / _2113);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2104 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2598 = frontier_phi_38_33_ladder;
        }
        float _2600 = isnan(_2344) ? _2141 : (isnan(_2141) ? _2344 : min(_2141, _2344));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _2107) + _2096;
        float _2606 = (_2601 * _2110) + _2100;
        float _2607 = (_2601 * _2113) + _2104;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2608;
        float _2612 = _2608 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 > _2612) || ((_2606 < _2610) || ((_2605 < _2610) || (_2605 > _2612))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2607, cbModelParam._m0[9u].z, fma(_2606, cbModelParam._m0[9u].y, _2605 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2607, cbModelParam._m0[10u].z, fma(_2606, cbModelParam._m0[10u].y, _2605 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2607, cbModelParam._m0[11u].z, fma(_2606, cbModelParam._m0[11u].y, _2605 * cbModelParam._m0[11u].x))), _2048);
            frontier_phi_16_38_ladder = _2735.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2735.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2735.x * cbModelParam._m0[1u].y;
        }
        _2129 = frontier_phi_16_38_ladder_2;
        _2131 = frontier_phi_16_38_ladder_1;
        _2133 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2117 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1207, _1208, _1209), _2048);
        _2129 = _2117.x * cbModelParam._m0[1u].y;
        _2131 = _2117.y * cbModelParam._m0[1u].y;
        _2133 = _2117.z * cbModelParam._m0[1u].y;
    }
    float _2137 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1025);
    float _2138 = isnan(_2137) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2137 : min(cbModelParam._m0[25u].w, _2137));
    float _2228;
    float _2230;
    float _2232;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2192 = fma(_1271, cbModelParam._m0[21u].z, fma(_1267, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1263)) + cbModelParam._m0[21u].w;
        float _2196 = fma(_1271, cbModelParam._m0[22u].z, fma(_1267, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1263)) + cbModelParam._m0[22u].w;
        float _2200 = fma(_1271, cbModelParam._m0[23u].z, fma(_1267, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1263)) + cbModelParam._m0[23u].w;
        float _2203 = fma(_1209, cbModelParam._m0[21u].z, fma(_1208, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1207));
        float _2206 = fma(_1209, cbModelParam._m0[22u].z, fma(_1208, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1207));
        float _2209 = fma(_1209, cbModelParam._m0[23u].z, fma(_1208, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1207));
        float _2349;
        if (_2203 > 0.0)
        {
            _2349 = abs((1.0 - _2192) / _2203);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2192 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2349 = frontier_phi_28_24_ladder;
        }
        float _2625;
        if (_2206 > 0.0)
        {
            _2625 = abs((1.0 - _2196) / _2206);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2196 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2625 = frontier_phi_40_35_ladder;
        }
        float _2838;
        if (_2209 > 0.0)
        {
            _2838 = abs((1.0 - _2200) / _2209);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2200 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2838 = frontier_phi_49_46_ladder;
        }
        float _2840 = isnan(_2625) ? _2349 : (isnan(_2349) ? _2625 : min(_2349, _2625));
        float _2841 = isnan(_2838) ? _2840 : (isnan(_2840) ? _2838 : min(_2840, _2838));
        float _2845 = (_2841 * _2203) + _2192;
        float _2846 = (_2841 * _2206) + _2196;
        float _2847 = (_2841 * _2209) + _2200;
        float _2848 = _2841 * 9.9999997473787516355514526367188e-05;
        float _2849 = (-1.0) - _2848;
        float _2851 = _2848 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2847 > _2851) || ((_2847 < _2849) || ((_2846 > _2851) || ((_2846 < _2849) || ((_2845 < _2849) || (_2845 > _2851))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3046 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2847, cbModelParam._m0[17u].z, fma(_2846, cbModelParam._m0[17u].y, _2845 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2847, cbModelParam._m0[18u].z, fma(_2846, cbModelParam._m0[18u].y, _2845 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2847, cbModelParam._m0[19u].z, fma(_2846, cbModelParam._m0[19u].y, _2845 * cbModelParam._m0[19u].x))), _2138);
            frontier_phi_25_49_ladder = _3046.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3046.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3046.x * cbModelParam._m0[1u].z;
        }
        _2228 = frontier_phi_25_49_ladder_2;
        _2230 = frontier_phi_25_49_ladder_1;
        _2232 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2212 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1207, _1208, _1209), _2138);
        _2228 = _2212.x * cbModelParam._m0[1u].z;
        _2230 = _2212.y * cbModelParam._m0[1u].z;
        _2232 = _2212.z * cbModelParam._m0[1u].z;
    }
    float _2245 = (((_1234 * _1183) + _1235) * _1199) * ((cbModelParam._m0[1u].w * (_2228 - _2129)) + _2129);
    float _2247 = (((_1234 * _1185) + _1235) * _1199) * ((cbModelParam._m0[1u].w * (_2230 - _2131)) + _2131);
    float _2249 = (((_1234 * _1186) + _1235) * _1199) * ((cbModelParam._m0[1u].w * (_2232 - _2133)) + _2133);
    float _2252 = fma(_2249, cbSceneParam._m0[89u].z, fma(_2247, cbSceneParam._m0[89u].y, _2245 * cbSceneParam._m0[89u].x));
    float _2255 = fma(_2249, cbSceneParam._m0[90u].z, fma(_2247, cbSceneParam._m0[90u].y, _2245 * cbSceneParam._m0[90u].x));
    float _2258 = fma(_2249, cbSceneParam._m0[91u].z, fma(_2247, cbSceneParam._m0[91u].y, _2245 * cbSceneParam._m0[91u].x));
    uvec4 _2268 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2270 = _2268.x * 14u;
    uint _2271 = _2270 + 13u;
    float _2278 = _1199 + (-1.0);
    float _2283 = (cbLight._m0[_2271].x * _2278) + 1.0;
    float _2284 = (cbLight._m0[_2271].y * _2278) + 1.0;
    float _2285 = (cbLight._m0[_2271].z * _2278) + 1.0;
    float _2286 = (cbLight._m0[_2271].w * _2278) + 1.0;
    uint _2287 = _2270 + 5u;
    float _2293 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2297 = _2270 + 4u;
    float _2303 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2307 = _2270 | 1u;
    float _2318 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_1022, _1023, _1024));
    float _2321 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_1022, _1023, _1024));
    float _4613 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _4624 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2326 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * 0.3183098733425140380859375;
    float _2328 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * 0.3183098733425140380859375;
    float _2335 = ((cbLight._m0[_2287].x * _2293) * _2328) + ((cbLight._m0[_2297].x * _2303) * _2326);
    float _2336 = ((_2293 * cbLight._m0[_2287].y) * _2328) + ((_2303 * cbLight._m0[_2297].y) * _2326);
    float _2337 = ((_2293 * cbLight._m0[_2287].z) * _2328) + ((_2303 * cbLight._m0[_2297].z) * _2326);
    uvec4 _2341 = floatBitsToUint(cbLight._m0[_2270 + 12u]);
    bool _2343 = _2341.x == 0u;
    float _2354;
    float _2356;
    float _2358;
    if (_2343)
    {
        _2354 = _2335;
        _2356 = _2336;
        _2358 = _2337;
    }
    else
    {
        uint _2362 = _2270 + 6u;
        float _2378 = (dot(vec3(cbLight._m0[_2270 + 2u].xyz), vec3(_1022, _1023, _1024)) * 0.5) + 0.5;
        float _2379 = _2378 * _2378;
        float _4635 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2380 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2381 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2354 = (((cbLight._m0[_2362].x * 0.3183098733425140380859375) * _2380) * _2381) + _2335;
        _2356 = (((cbLight._m0[_2362].y * 0.3183098733425140380859375) * _2380) * _2381) + _2336;
        _2358 = (((cbLight._m0[_2362].z * 0.3183098733425140380859375) * _2380) * _2381) + _2337;
    }
    bool _2361 = _2341.y == 0u;
    float _2399;
    float _2401;
    float _2403;
    if (_2361)
    {
        _2399 = _2354;
        _2401 = _2356;
        _2403 = _2358;
    }
    else
    {
        uint _2569 = _2270 + 7u;
        float _2585 = (dot(vec3(cbLight._m0[_2270 + 3u].xyz), vec3(_1022, _1023, _1024)) * 0.5) + 0.5;
        float _2586 = _2585 * _2585;
        float _4651 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2587 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2588 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2399 = (((cbLight._m0[_2569].x * 0.3183098733425140380859375) * _2587) * _2588) + _2354;
        _2401 = (((cbLight._m0[_2569].y * 0.3183098733425140380859375) * _2587) * _2588) + _2356;
        _2403 = (((cbLight._m0[_2569].z * 0.3183098733425140380859375) * _2587) * _2588) + _2358;
    }
    uint _2406 = _2270 + 8u;
    float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _1025) * 0.949999988079071044921875);
    float _2420 = _2419 * _2419;
    float _2421 = cbLight._m0[_2270].x + _1101;
    float _2422 = cbLight._m0[_2270].y + _1102;
    float _2423 = cbLight._m0[_2270].z + _1103;
    float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
    float _2428 = _2427 * _2421;
    float _2429 = _2427 * _2422;
    float _2430 = _2427 * _2423;
    float _2431 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2270].xyz));
    float _4667 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _4678 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _2435 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2436 = dot(vec3(_1022, _1023, _1024), vec3(_2428, _2429, _2430));
    float _4689 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2428, _2429, _2430));
    float _4700 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2420 * _2420;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2456 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
    float _2457 = 0.959999978542327880859375 - _1180;
    float _2459 = 0.959999978542327880859375 - _1181;
    float _2460 = 0.959999978542327880859375 - _1182;
    float _2467 = 1.0 - _2420;
    float _2478 = (0.5 / (((_2435 * ((_2434 * _2467) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2467) + _2420) * _2434))) * _2434;
    float _4711 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2480 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    uint _2491 = _2270 + 9u;
    float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _1025) * 0.949999988079071044921875);
    float _2503 = _2502 * _2502;
    float _2504 = cbLight._m0[_2307].x + _1101;
    float _2505 = cbLight._m0[_2307].y + _1102;
    float _2506 = cbLight._m0[_2307].z + _1103;
    float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
    float _2511 = _2510 * _2504;
    float _2512 = _2510 * _2505;
    float _2513 = _2510 * _2506;
    float _2514 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2307].xyz));
    float _4722 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2517 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
    float _2518 = dot(vec3(_1022, _1023, _1024), vec3(_2511, _2512, _2513));
    float _4733 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2511, _2512, _2513));
    float _4744 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2503 * _2503;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2537 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
    float _2544 = 1.0 - _2503;
    float _2554 = (0.5 / (((_2435 * ((_2517 * _2544) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2544) + _2503) * _2517))) * _2517;
    float _4755 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2556 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    float _2566 = (((((_2537 * _2457) + _1183) * cbLight._m0[_2491].x) * _2556) * _2293) + (((((_2456 * _2457) + _1183) * cbLight._m0[_2406].x) * _2480) * _2303);
    float _2567 = (((((_2537 * _2459) + _1185) * cbLight._m0[_2491].y) * _2556) * _2293) + (((((_2456 * _2459) + _1185) * cbLight._m0[_2406].y) * _2480) * _2303);
    float _2568 = (((((_2537 * _2460) + _1186) * cbLight._m0[_2491].z) * _2556) * _2293) + (((((_2456 * _2460) + _1186) * cbLight._m0[_2406].z) * _2480) * _2303);
    float _2630;
    float _2632;
    float _2634;
    if (_2343)
    {
        _2630 = _2566;
        _2632 = _2567;
        _2634 = _2568;
    }
    else
    {
        uint _2636 = _2270 + 2u;
        uint _2640 = _2270 + 10u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _1025) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _1101;
        float _2657 = cbLight._m0[_2636].y + _1102;
        float _2658 = cbLight._m0[_2636].z + _1103;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2636].xyz));
        float _4766 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2670 = dot(vec3(_1022, _1023, _1024), vec3(_2663, _2664, _2665));
        float _4777 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4788 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2689 = exp2(log2(1.0 - (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0)))) * 5.0);
        float _2696 = 1.0 - _2655;
        float _2706 = (0.5 / (((_2435 * ((_2669 * _2696) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2696) + _2655) * _2669))) * _2669;
        float _4799 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2708 = (isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2709 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
        _2630 = (((((_2689 * _2457) + _1183) * cbLight._m0[_2640].x) * _2708) * _2709) + _2566;
        _2632 = (((((_2689 * _2459) + _1185) * cbLight._m0[_2640].y) * _2708) * _2709) + _2567;
        _2634 = (((((_2689 * _2460) + _1186) * cbLight._m0[_2640].z) * _2708) * _2709) + _2568;
    }
    float _2744;
    float _2746;
    float _2748;
    if (_2361)
    {
        _2744 = _2630;
        _2746 = _2632;
        _2748 = _2634;
    }
    else
    {
        uint _2755 = _2270 + 3u;
        uint _2759 = _2270 + 11u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _1025) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _1101;
        float _2776 = cbLight._m0[_2755].y + _1102;
        float _2777 = cbLight._m0[_2755].z + _1103;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_1022, _1023, _1024), vec3(cbLight._m0[_2755].xyz));
        float _4815 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
        float _2789 = dot(vec3(_1022, _1023, _1024), vec3(_2782, _2783, _2784));
        float _4826 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4837 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2808 = exp2(log2(1.0 - (isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0)))) * 5.0);
        float _2815 = 1.0 - _2774;
        float _2825 = (0.5 / (((_2435 * ((_2788 * _2815) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2435 * _2815) + _2774) * _2788))) * _2788;
        float _4848 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2744 = (((((_2808 * _2457) + _1183) * cbLight._m0[_2759].x) * _2827) * _2828) + _2630;
        _2746 = (((((_2808 * _2459) + _1185) * cbLight._m0[_2759].y) * _2827) * _2828) + _2632;
        _2748 = (((((_2808 * _2460) + _1186) * cbLight._m0[_2759].z) * _2827) * _2828) + _2634;
    }
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_2268.y == 0u)
    {
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2903;
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2903;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2903;
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.x;
        uint _2930 = uint((float(_2918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1122) / _2919))) + floor(float(uint(cbSceneParam._m0[85u].x * _1121) / _2919)));
        float _2940 = (log2(_2906 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2941 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        uint _2944 = uint(isnan(14.0) ? _2941 : (isnan(_2941) ? 14.0 : min(_2941, 14.0)));
        uvec4 _2949 = texelFetch(g_lightClusterGridBuffer, int(((_2944 << 2u) + (_2930 << 6u)) >> 2u));
        uint _2950 = _2949.x;
        uint _2951 = _2918.z;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((((1u << ((_2951 >> 4u) & 15u)) + 4294967295u) & _2950) == 0u) || ((_2951 & 240u) == 0u))
        {
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
        }
        else
        {
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            uint _3210 = 0u;
            uint _3219;
            bool _3220;
            for (;;)
            {
                _3219 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3210 << 2u)) >> 2u)).x;
                _3220 = _3219 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3220)
                {
                    frontier_phi_66_pred = _3204;
                    frontier_phi_66_pred_1 = _3209;
                    frontier_phi_66_pred_2 = _3208;
                    frontier_phi_66_pred_3 = _3207;
                    frontier_phi_66_pred_4 = _3206;
                    frontier_phi_66_pred_5 = _3205;
                }
                else
                {
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    uint _3355;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3219;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    for (;;)
                    {
                        uint _3359 = uint(findLSB(_3355)) + (_3210 << 5u);
                        uint _3356 = (_3355 + 4294967295u) & _3355;
                        uint _3361 = _3359 * 48u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3381 = (_3359 * 48u) + 4u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 3u)).x));
                        uint _3400 = (_3359 * 48u) + 8u;
                        vec3 _3411 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x));
                        float _3415 = _3375.x - _2904;
                        float _3416 = _3375.y - _2905;
                        float _3417 = _3375.z - _2906;
                        float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                        float _3421 = inversesqrt(_3418);
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3425 = dot(vec3(_1140, _1143, _1146), vec3(_3422, _3423, _3424));
                        float _3430 = 1.0 - (_3418 * _3375.w);
                        float _4874 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                        float _3432 = sqrt(_3418) * _3394.w;
                        float _3435 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3425) + _3436;
                        float _3442 = _3432 * _3432;
                        float _3446 = ((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3431) / ((_3442 * 0.699999988079071044921875) + 1.0);
                        float _3450 = (-0.0) - _2904;
                        float _3451 = (-0.0) - _2905;
                        float _3452 = (-0.0) - _2906;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3467 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                        float _3468 = 1.0 - _1215;
                        float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                        float _3476 = _3475 * _3475;
                        float _3477 = _3476 * _3476;
                        float _3478 = _3457 + _3422;
                        float _3479 = _3458 + _3423;
                        float _3480 = _3459 + _3424;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3488 = dot(vec3(_1140, _1143, _1146), vec3(_3457, _3458, _3459));
                        float _4890 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                        float _3492 = dot(vec3(_1140, _1143, _1146), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                        float _4901 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                        float _3500 = _3435 * _3476;
                        float _3501 = _3500 * _3500;
                        float _3504 = ((1.0 - _3501) * _3425) + _3501;
                        float _4912 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                        float _3506 = 1.0 - _3476;
                        float _3516 = (0.5 / (((_3505 * ((_3491 * _3506) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3476) * _3491))) * _3505;
                        float _4923 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3527 = (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3499 * _3499) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125))) * _3431;
                        _3279 = (_3446 * _3394.x) + _3352;
                        _3280 = (_3446 * _3394.y) + _3353;
                        _3281 = (_3446 * _3394.z) + _3354;
                        _3276 = (_3527 * _3411.x) + _3349;
                        _3277 = (_3527 * _3411.y) + _3350;
                        _3278 = (_3527 * _3411.z) + _3351;
                        if (_3356 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3356;
                        }
                    }
                    frontier_phi_66_pred = _3276;
                    frontier_phi_66_pred_1 = _3281;
                    frontier_phi_66_pred_2 = _3280;
                    frontier_phi_66_pred_3 = _3279;
                    frontier_phi_66_pred_4 = _3278;
                    frontier_phi_66_pred_5 = _3277;
                }
                _3052 = frontier_phi_66_pred;
                _3062 = frontier_phi_66_pred_1;
                _3060 = frontier_phi_66_pred_2;
                _3058 = frontier_phi_66_pred_3;
                _3056 = frontier_phi_66_pred_4;
                _3054 = frontier_phi_66_pred_5;
                uint _3211 = _3210 + 1u;
                if (_3211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3204 = _3052;
                    _3205 = _3054;
                    _3206 = _3056;
                    _3207 = _3058;
                    _3208 = _3060;
                    _3209 = _3062;
                    _3210 = _3211;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
        }
        uvec4 _3065 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3066 = _3065.z;
        uint _3068 = (_3066 >> 8u) & 15u;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((4294967295u << _3068) & _2950) == 0u)
        {
            _3172 = _3051;
            _3174 = _3053;
            _3176 = _3055;
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
        }
        else
        {
            float _3197 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
            float _3198 = _3197 * _2904;
            float _3199 = _3197 * _2905;
            float _3200 = _3197 * _2906;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3068 < ((_3066 >> 12u) & 15u))
            {
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3332 = _3051;
                float _3333 = _3053;
                float _3334 = _3055;
                float _3335 = _3057;
                float _3336 = _3059;
                float _3337 = _3061;
                uint _3338 = _3068;
                uint _3347;
                bool _3348;
                for (;;)
                {
                    _3347 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3338 << 2u)) >> 2u)).x;
                    _3348 = _3347 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3348)
                    {
                        frontier_phi_77_pred = _3337;
                        frontier_phi_77_pred_1 = _3336;
                        frontier_phi_77_pred_2 = _3335;
                        frontier_phi_77_pred_3 = _3334;
                        frontier_phi_77_pred_4 = _3333;
                        frontier_phi_77_pred_5 = _3332;
                    }
                    else
                    {
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3554 = _3332;
                        float _3555 = _3333;
                        float _3556 = _3334;
                        float _3557 = _3335;
                        float _3558 = _3336;
                        float _3559 = _3337;
                        uint _3560 = _3347;
                        uint _3561;
                        vec4 _3586;
                        float _3587;
                        vec4 _3602;
                        vec3 _3614;
                        vec4 _3629;
                        vec4 _3644;
                        float _3690;
                        bool _3691;
                        for (;;)
                        {
                            uint _3571 = ((_3338 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3560));
                            _3561 = (_3560 + 4294967295u) & _3560;
                            uint _3573 = _3571 * 40u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3587 = _3586.w;
                            uint _3589 = (_3571 * 40u) + 4u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3571 * 40u) + 8u;
                            _3614 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x));
                            uint _3616 = (_3571 * 40u) + 16u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3571 * 40u) + 20u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3571 * 40u) + 24u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3665 = (_3571 * 40u) + 28u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3690 = fma(_2906, _3678.z, fma(_2905, _3678.y, _3678.x * _2904)) + _3678.w;
                            _3691 = !((fma(_2906, _3659.z, fma(_2905, _3659.y, _3659.x * _2904)) + _3659.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3691)
                            {
                                float _3718 = _3586.x - _2904;
                                float _3719 = _3586.y - _2905;
                                float _3720 = _3586.z - _2906;
                                float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                                float _3724 = inversesqrt(_3721);
                                float _3725 = _3724 * _3718;
                                float _3726 = _3724 * _3719;
                                float _3727 = _3724 * _3720;
                                float _3731 = 1.0 - (_3721 / (_3587 * _3587));
                                float _4934 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                                float _3736 = sqrt(_3721) * _3602.w;
                                float _3738 = 1.39999997615814208984375 / (_3736 + 1.39999997615814208984375);
                                float _3739 = _3738 * _3738;
                                float _3742 = ((1.0 - _3739) * dot(vec3(_3725, _3726, _3727), vec3(_1140, _1143, _1146))) + _3739;
                                float _3745 = _3736 * _3736;
                                float _3749 = (fma(_2906, _3629.z, fma(_2905, _3629.y, _3629.x * _2904)) + _3629.w) / _3690;
                                float _3750 = (fma(_2906, _3644.z, fma(_2905, _3644.y, _3644.x * _2904)) + _3644.w) / _3690;
                                float _3754 = 1.0 - dot(vec2(_3749, _3750), vec2(_3749, _3750));
                                float _4950 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                                float _3756 = _3755 * (((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3732) / ((_3745 * 0.699999988079071044921875) + 1.0));
                                float _3768 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                                float _3769 = 1.0 - _1215;
                                float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                                float _3777 = _3776 * _3776;
                                float _3778 = _3777 * _3777;
                                float _3779 = _3725 - _3198;
                                float _3780 = _3726 - _3199;
                                float _3781 = _3727 - _3200;
                                float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                                float _3789 = dot(vec3(_1140, _1143, _1146), vec3((-0.0) - _3198, (-0.0) - _3199, (-0.0) - _3200));
                                float _4961 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3793 = dot(vec3(_1140, _1143, _1146), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                                float _4972 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                                float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                                float _3801 = _3738 * _3777;
                                float _3802 = _3801 * _3801;
                                float _3808 = ((1.0 - _3802) * dot(vec3(_1140, _1143, _1146), vec3(_3725, _3726, _3727))) + _3802;
                                float _4983 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
                                float _3810 = 1.0 - _3777;
                                float _3820 = (0.5 / (((_3809 * ((_3792 * _3810) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3777) * _3792))) * _3809;
                                float _4994 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3830 = (_3755 * _3732) * (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) / ((_3800 * _3800) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3756 * _3602.y;
                                frontier_phi_83_pred_1 = _3756 * _3602.x;
                                frontier_phi_83_pred_2 = _3830 * _3614.z;
                                frontier_phi_83_pred_3 = _3830 * _3614.y;
                                frontier_phi_83_pred_4 = _3830 * _3614.x;
                                frontier_phi_83_pred_5 = _3756 * _3602.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3838 = frontier_phi_83_pred;
                            _3837 = frontier_phi_83_pred_1;
                            _3836 = frontier_phi_83_pred_2;
                            _3835 = frontier_phi_83_pred_3;
                            _3834 = frontier_phi_83_pred_4;
                            _3839 = frontier_phi_83_pred_5;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            if (_3561 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3561;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3546;
                        frontier_phi_77_pred_1 = _3545;
                        frontier_phi_77_pred_2 = _3544;
                        frontier_phi_77_pred_3 = _3543;
                        frontier_phi_77_pred_4 = _3542;
                        frontier_phi_77_pred_5 = _3541;
                    }
                    _3183 = frontier_phi_77_pred;
                    _3181 = frontier_phi_77_pred_1;
                    _3179 = frontier_phi_77_pred_2;
                    _3177 = frontier_phi_77_pred_3;
                    _3175 = frontier_phi_77_pred_4;
                    _3173 = frontier_phi_77_pred_5;
                    uint _3339 = _3338 + 1u;
                    if (_3339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3332 = _3173;
                        _3333 = _3175;
                        _3334 = _3177;
                        _3335 = _3179;
                        _3336 = _3181;
                        _3337 = _3183;
                        _3338 = _3339;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3177;
                frontier_phi_58_59_ladder_1 = _3183;
                frontier_phi_58_59_ladder_2 = _3181;
                frontier_phi_58_59_ladder_3 = _3179;
                frontier_phi_58_59_ladder_4 = _3175;
                frontier_phi_58_59_ladder_5 = _3173;
            }
            else
            {
                frontier_phi_58_59_ladder = _3055;
                frontier_phi_58_59_ladder_1 = _3061;
                frontier_phi_58_59_ladder_2 = _3059;
                frontier_phi_58_59_ladder_3 = _3057;
                frontier_phi_58_59_ladder_4 = _3053;
                frontier_phi_58_59_ladder_5 = _3051;
            }
            _3172 = frontier_phi_58_59_ladder_5;
            _3174 = frontier_phi_58_59_ladder_4;
            _3176 = frontier_phi_58_59_ladder;
            _3178 = frontier_phi_58_59_ladder_3;
            _3180 = frontier_phi_58_59_ladder_2;
            _3182 = frontier_phi_58_59_ladder_1;
        }
        float _3187 = isnan(1.0) ? _1199 : (isnan(_1199) ? 1.0 : min(_1199, 1.0));
        _2963 = (_3187 * _3178) + _2399;
        _2965 = (_3187 * _3180) + _2401;
        _2967 = (_3187 * _3182) + _2403;
        _2969 = ((_3172 * _1183) * _3187) + _2744;
        _2971 = ((_3174 * _1185) * _3187) + _2746;
        _2973 = ((_3176 * _1186) * _3187) + _2748;
    }
    else
    {
        _2963 = _2399;
        _2965 = _2401;
        _2967 = _2403;
        _2969 = _2744;
        _2971 = _2746;
        _2973 = _2748;
    }
    float _5010 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _5021 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _5032 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _2990 = ((isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_2963 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1199))) + ((_2969 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _2037)) * cbPerFrame._m0[3u].x);
    float _2991 = ((isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_2965 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1199))) + ((_2971 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2037)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0))) * (_2967 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1199))) + ((_2973 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2037)) * cbPerFrame._m0[3u].x);
    uint _2993 = _295 + 6u;
    float _3001 = _1121 / cbSceneParam._m0[86u].x;
    float _3002 = _1122 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _1044 : (isnan(_1044) ? cbSceneParam._m0[77u].w : min(_1044, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3114;
    float _3116;
    float _3118;
    float _3120;
    if (_1044 > cbSceneParam._m0[78u].w)
    {
        float _3076 = isnan(_1044) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1044 : min(cbSceneParam._m0[80u].w, _1044));
        float _3077 = _3076 / _1044;
        float _3088 = _3077 * _1094;
        float _3089 = _1095 * _3077;
        float _3090 = (-0.0) - _3089;
        float _3092 = _3077 * _1096;
        float _3094 = (cbSceneParam._m0[77u].w * _3090) / _3076;
        float _3095 = _3094 + cbSceneParam._m0[79u].w;
        float _3096 = cbSceneParam._m0[79u].w - _3089;
        float _3102 = sqrt(((_3088 * _3088) + (_3089 * _3089)) + (_3092 * _3092));
        float _3105 = (1.0 - (cbSceneParam._m0[77u].w / _3076)) * _3102;
        float _3110 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3112 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3289;
        if (abs((_3090 - _3094) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3289 = ((((_3095 > 0.0) ? exp2(_3110 * _3095) : (2.0 - exp2(_3112 * _3095))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3105;
        }
        else
        {
            float _3233 = 1.0 / cbSceneParam._m0[80u].x;
            float _3234 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : max(_3095, _3096));
            float _3235 = isnan(_3096) ? _3095 : (isnan(_3095) ? _3096 : min(_3095, _3096));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            _3289 = ((abs(_3102 / _3090) * cbSceneParam._m0[80u].y) * ((((_3244 - _3245) * 2.0) - ((exp2(_3110 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0)))) - exp2(_3110 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))))) * _3233)) - ((exp2(_3112 * _3244) - exp2(_3112 * _3245)) * _3233))) + (_3105 * cbSceneParam._m0[80u].z);
        }
        vec4 _3291 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3300 = exp2((_3289 * (-1.44269502162933349609375)) * (1.0 - _3291.w));
        float _3301 = log2(_3300);
        float _3317 = log2(_3021);
        _3114 = (exp2(_3317 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].x)) * _3291.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3116 = (exp2(_3317 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].y)) * _3291.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3118 = (exp2(_3317 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].z)) * _3291.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3120 = _3300 * _3021;
    }
    else
    {
        _3114 = _3018;
        _3116 = _3019;
        _3118 = _3020;
        _3120 = _3021;
    }
    bool _3327;
    vec4 _3130;
    vec4 _3152;
    float _3154;
    float _3158;
    float _3159;
    float _3160;
    float _3161;
    bool _3171;
    for (;;)
    {
        _3130 = cbMatDynParam._m0[0u];
        float _3132 = roundEven(_3130.y);
        bool _3133 = _3132 == 3.0;
        float _3134 = log2(_3120);
        float _3141 = exp2(_3134 * cbSceneParam._m0[78u].x) * _2990;
        float _3142 = exp2(_3134 * cbSceneParam._m0[78u].y) * _2991;
        float _3143 = exp2(_3134 * cbSceneParam._m0[78u].z) * _2992;
        float _3150 = _1110 + (-0.5);
        _3152 = cbMtdParam._m0[1u];
        _3154 = _3152.y * _3150;
        float _3157 = (_3132 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3158 = _3157 * (_3133 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3114)));
        _3159 = _3157 * (_3133 ? _3142 : (_3142 + (cbSceneParam._m0[72u].w * _3116)));
        _3160 = _3157 * (_3133 ? _3143 : (_3143 + (cbSceneParam._m0[72u].w * _3118)));
        _3161 = _3150 * 0.999000012874603271484375;
        _3171 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3171)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3161) < 0.5)
            {
                _3327 = true;
                break;
            }
        }
        uint _3268 = _1159 + uint(_3130.w);
        if ((cbInstanceData._m0[_3268].w < 1.0) && ((cbInstanceData._m0[_3268].w + _3161) < 0.5))
        {
            _3327 = true;
            break;
        }
        if ((_3154 + 1.0) < _3152.x)
        {
            _3327 = true;
            break;
        }
        _3327 = false;
        break;
    }
    float _3532;
    if (_3327)
    {
        discard_state = true;
        _3532 = 0.0;
    }
    else
    {
        _3532 = cbInstanceData._m0[_2993].w;
    }
    SV_Target.x = _3158;
    SV_Target.y = _3159;
    SV_Target.z = _3160;
    SV_Target.w = _3532;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2993].w;
    discard_exit();
}


