#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1465;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3815 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _446 = (_439 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _447 = (_439 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _448 = (_439 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3826 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _525 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446);
    float _528 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447);
    float _531 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448);
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    float _577 = ((_549.x - _568) * _439) + _568;
    float _578 = ((_549.y - _569) * _439) + _569;
    float _579 = ((_549.z - _570) * _439) + _570;
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _604 = ((_591.z - _579) * _512) + _579;
    float _607 = ((((_591.x - _577) * _512) + _577) * 2.0) + (-1.0);
    float _609 = ((((_591.y - _578) * _512) + _578) * 2.0) + (-1.0);
    float _610 = dot(vec2(_607, _609), vec2(_607, _609));
    float _3837 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _656 = _654.x;
    float _657 = 1.0 - _656;
    float _666 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _669 = ((isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : min(_666, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _678 = (_669 - ((((((_656 - _657) * cbMtdParam._m0[24u].z) + _657) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _669))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3858 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _686 = (_679 * (cbMtdParam._m0[17u].x - _525)) + _525;
    float _687 = (_679 * (cbMtdParam._m0[17u].y - _528)) + _528;
    float _688 = (_679 * (cbMtdParam._m0[17u].z - _531)) + _531;
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _702 = _700.x;
    float _703 = 1.0 - _702;
    float _728 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_702 - _703) * cbMtdParam._m0[24u].w) + _703) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3869 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _729 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _737 = ((((cbMtdParam._m0[10u].x - _686) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _729) + _686;
    float _738 = ((((cbMtdParam._m0[10u].y - _687) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _729) + _687;
    float _739 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _688)) * _729) + _688;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _767 = _765.x;
    float _784 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _767) * _439) + _767;
    float _801 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _784) * _512) + _784;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _801) * cbMtdParam._m0[19u].z) + _801;
    float _807 = _805 - (_805 * _679);
    float _809 = _807 - (_807 * _729);
    float _813 = (cbMtdParam._m0[19u].w * (_629.z - _604)) + _604;
    vec4 _827 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _834 = (_827.x * 2.0) + (-1.0);
    float _835 = (_827.y * 2.0) + (-1.0);
    float _836 = dot(vec2(_834, _835), vec2(_834, _835));
    float _3880 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _844 = (_679 * (_827.z - _813)) + _813;
    float _847 = ((cbMtdParam._m0[23u].x - _844) * _729) + _844;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _872 = (_866.x * 2.0) + (-1.0);
    float _873 = (_866.y * 2.0) + (-1.0);
    float _874 = dot(vec2(_872, _873), vec2(_872, _873));
    float _3891 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _882 = (((_629.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _607;
    float _883 = (((_629.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _609;
    float _895 = (((_834 - _882) + (cbMtdParam._m0[21u].x * _882)) * _679) + _882;
    float _896 = (((_835 - _883) + (cbMtdParam._m0[21u].x * _883)) * _679) + _883;
    float _897 = (_679 * (sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) - _615)) + _615;
    float _908 = (((_872 - _895) + (_895 * cbMtdParam._m0[22u].z)) * _729) + _895;
    float _909 = (((_873 - _896) + (_896 * cbMtdParam._m0[22u].z)) * _729) + _896;
    float _910 = ((sqrt(1.0 - (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) - _897) * _729) + _897;
    float _912 = cbMtdParam._m0[22u].x + _629.w;
    float _915 = fma(_910, _250 * NORMAL.x, fma(_909, _257 * TANGENT.x, (_243 * _235) * _908));
    float _918 = fma(_910, _250 * NORMAL.y, fma(_909, _257 * TANGENT.y, (_243 * _236) * _908));
    float _921 = fma(_910, _250 * NORMAL.z, fma(_909, _257 * TANGENT.z, (_243 * _237) * _908));
    float _925 = inversesqrt(dot(vec3(_915, _918, _921), vec3(_915, _918, _921)));
    float _926 = _925 * _915;
    float _927 = _925 * _918;
    float _928 = _925 * _921;
    float _3902 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _929 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _3924 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3935 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3946 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3957 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _934 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _948 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _998 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _988);
    float _999 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _988);
    float _1000 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _988);
    float _1004 = inversesqrt(dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000)));
    float _1005 = _998 * _1004;
    float _1006 = _999 * _1004;
    float _1007 = _1000 * _1004;
    float _1013 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1014 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1032 = fma(_928, cbSceneParam._m0[5u].z, fma(_927, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _926));
    float _1035 = fma(_928, cbSceneParam._m0[6u].z, fma(_927, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _926));
    float _1038 = fma(_928, cbSceneParam._m0[7u].z, fma(_927, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _926));
    uint _1052 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1058 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_1052].x;
    float _1059 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_1052].y;
    float _1060 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * cbInstanceData._m0[_1052].z;
    float _3968 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _1061 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _1064 = 1.0 - _934;
    float _1065 = _1061 * _1064;
    float _1066 = _1062 * _1064;
    float _1067 = _1063 * _1064;
    float _1072 = (_1061 + (-0.039999999105930328369140625)) * _934;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _934;
    float _1074 = (_1063 + (-0.039999999105930328369140625)) * _934;
    float _1075 = _1072 + 0.039999999105930328369140625;
    float _1077 = _1073 + 0.039999999105930328369140625;
    float _1078 = _1074 + 0.039999999105930328369140625;
    vec4 _1087 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1013, cbSceneParam._m0[86u].y * _1014));
    float _1091 = ((isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * TEXCOORD_5.w) * _1087.x;
    float _1092 = dot(vec3(_926, _927, _928), vec3(_1005, _1006, _1007));
    float _1095 = _1092 * 2.0;
    float _1099 = (_1095 * _926) - _1005;
    float _1100 = (_1095 * _927) - _1006;
    float _1101 = (_1095 * _928) - _1007;
    float _1105 = abs(dot(vec3(_1005, _1006, _1007), vec3(_926, _927, _928)));
    float _4001 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1107 = sqrt(_929);
    float _1120 = exp2((_1107 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1107 * 3.0));
    float _1126 = (1.0 - _1120) * ((_1107 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1127 = _1120 * _1107;
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1464;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1189 = fma(_1163, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1155));
        float _1193 = fma(_1163, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1155));
        float _1197 = fma(_1163, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1155));
        float _1222 = _1155 + _926;
        float _1223 = _1159 + _927;
        float _1224 = _1163 + _928;
        float _1234 = fma(_1224, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1222)) - _1189;
        float _1235 = fma(_1224, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1222)) - _1193;
        float _1236 = fma(_1224, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1222)) - _1197;
        float _1240 = inversesqrt(dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236)));
        float _1253 = ((_1240 * _1234) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1189 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1254 = ((_1240 * _1235) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1193 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1255 = ((_1240 * _1236) / cbModelParam._m0[34u].z) + ((((((_1197 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1253, _1254, _1255), 0.0);
        float _1292 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1258.x + (-0.5));
        float _1294 = _1292 * (_1258.y + (-0.5));
        float _1295 = _1292 * (_1258.z + (-0.5));
        float _1302 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1265.x + (-0.5));
        float _1304 = _1302 * (_1265.y + (-0.5));
        float _1305 = _1302 * (_1265.z + (-0.5));
        float _1312 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1272.x + (-0.5));
        float _1314 = _1312 * (_1272.y + (-0.5));
        float _1315 = _1312 * (_1272.z + (-0.5));
        float _1322 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1279.x + (-0.5));
        float _1324 = _1322 * (_1279.y + (-0.5));
        float _1325 = _1322 * (_1279.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1346 = (dot(vec3(_926, _927, _928), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1356 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4049 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1358 + 1.0))) + _1363) * _1326;
        float _1373 = _1294 * 0.5;
        float _1374 = _1304 * 0.5;
        float _1375 = _1314 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_926, _927, _928), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4082 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1400 + 1.0))) + _1405) * _1327;
        float _1415 = _1295 * 0.5;
        float _1416 = _1305 * 0.5;
        float _1417 = _1315 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_926, _927, _928), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4115 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1442 + 1.0))) + _1447) * _1328;
        _1464 = _1295;
        _1466 = _1294;
        _1467 = _1293;
        _1468 = _1305;
        _1469 = _1304;
        _1470 = _1303;
        _1471 = _1315;
        _1472 = _1314;
        _1473 = _1313;
        _1474 = _1328;
        _1475 = _1327;
        _1476 = _1326;
        _1477 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1478 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1479 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
    }
    else
    {
        _1464 = _1465;
        _1466 = _1465;
        _1467 = _1465;
        _1468 = _1465;
        _1469 = _1465;
        _1470 = _1465;
        _1471 = _1465;
        _1472 = _1465;
        _1473 = _1465;
        _1474 = _1465;
        _1475 = _1465;
        _1476 = _1465;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1503 = fma(_1163, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155));
        float _1507 = fma(_1163, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155));
        float _1511 = fma(_1163, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155));
        float _1534 = _1155 + _926;
        float _1535 = _1159 + _927;
        float _1536 = _1163 + _928;
        float _1546 = fma(_1536, cbModelParam._m0[30u].z, fma(_1535, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1534)) - _1503;
        float _1547 = fma(_1536, cbModelParam._m0[31u].z, fma(_1535, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1534)) - _1507;
        float _1548 = fma(_1536, cbModelParam._m0[32u].z, fma(_1535, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1534)) - _1511;
        float _1552 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
        float _1565 = ((_1552 * _1546) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1503 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1566 = ((_1552 * _1547) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1507 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1567 = ((_1552 * _1548) / cbModelParam._m0[35u].z) + ((((((_1511 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1565, _1566, _1567), 0.0);
        float _1602 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1569.x + (-0.5));
        float _1604 = _1602 * (_1569.y + (-0.5));
        float _1605 = _1602 * (_1569.z + (-0.5));
        float _1612 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1576.x + (-0.5));
        float _1614 = _1612 * (_1576.y + (-0.5));
        float _1615 = _1612 * (_1576.z + (-0.5));
        float _1622 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1583.x + (-0.5));
        float _1624 = _1622 * (_1583.y + (-0.5));
        float _1625 = _1622 * (_1583.z + (-0.5));
        float _1632 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1590.x + (-0.5));
        float _1634 = _1632 * (_1590.y + (-0.5));
        float _1635 = _1632 * (_1590.z + (-0.5));
        float _1636 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1637 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1638 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1639 = _1603 * 0.5;
        float _1640 = _1613 * 0.5;
        float _1641 = _1623 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_926, _927, _928), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1636 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4178 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1666 + 1.0))) + _1671) * _1636;
        float _1681 = _1604 * 0.5;
        float _1682 = _1614 * 0.5;
        float _1683 = _1624 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_926, _927, _928), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1637 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4211 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1708 + 1.0))) + _1713) * _1637;
        float _1723 = _1605 * 0.5;
        float _1724 = _1615 * 0.5;
        float _1725 = _1625 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_926, _927, _928), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1638 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4244 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1750 + 1.0))) + _1755) * _1638;
        _1772 = _1605;
        _1773 = _1604;
        _1774 = _1603;
        _1775 = _1615;
        _1776 = _1614;
        _1777 = _1613;
        _1778 = _1625;
        _1779 = _1624;
        _1780 = _1623;
        _1781 = _1638;
        _1782 = _1637;
        _1783 = _1636;
        _1784 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1785 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1786 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
    }
    else
    {
        _1772 = _1465;
        _1773 = _1465;
        _1774 = _1465;
        _1775 = _1465;
        _1776 = _1465;
        _1777 = _1465;
        _1778 = _1465;
        _1779 = _1465;
        _1780 = _1465;
        _1781 = _1465;
        _1782 = _1465;
        _1783 = _1465;
        _1784 = 0.0;
        _1785 = 0.0;
        _1786 = 0.0;
    }
    float _1796 = (cbModelParam._m0[1u].x * (_1784 - _1477)) + _1477;
    float _1797 = (cbModelParam._m0[1u].x * (_1785 - _1478)) + _1478;
    float _1798 = (cbModelParam._m0[1u].x * (_1786 - _1479)) + _1479;
    float _1819 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1796));
    float _1840 = _1099 * 0.5;
    float _1841 = _1100 * 0.5;
    float _1842 = _1101 * 0.5;
    float _1843 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1774, _1777, _1780, _1783));
    float _1846 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1773, _1776, _1779, _1782));
    float _1849 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1772, _1775, _1778, _1781));
    float _1883;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1856 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1464, _1468, _1471, _1474));
        float _1860 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1466, _1469, _1472, _1475));
        float _1864 = dot(vec4(_1840, _1841, _1842, 1.0), vec4(_1467, _1470, _1473, _1476));
        float _1871 = dot(vec4(cbModelParam._m0[39u]), vec4(_1840, _1841, _1842, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1871) ? 0.0 : (isnan(0.0) ? _1871 : max(0.0, _1871))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1894;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1885 = dot(vec4(cbModelParam._m0[40u]), vec4(_1840, _1841, _1842, 1.0));
        _1894 = dot(vec3(isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1894 = 1.0;
    }
    float _1898 = (_1894 * cbModelParam._m0[1u].x) + (_1883 * (1.0 - cbModelParam._m0[1u].x));
    float _1908 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _929);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1908 : min(cbModelParam._m0[25u].z, _1908));
    float _1990;
    float _1992;
    float _1994;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1957 = fma(_1163, cbModelParam._m0[13u].z, fma(_1159, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1155)) + cbModelParam._m0[13u].w;
        float _1961 = fma(_1163, cbModelParam._m0[14u].z, fma(_1159, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1155)) + cbModelParam._m0[14u].w;
        float _1965 = fma(_1163, cbModelParam._m0[15u].z, fma(_1159, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1155)) + cbModelParam._m0[15u].w;
        float _1968 = fma(_1101, cbModelParam._m0[13u].z, fma(_1100, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1099));
        float _1971 = fma(_1101, cbModelParam._m0[14u].z, fma(_1100, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1099));
        float _1974 = fma(_1101, cbModelParam._m0[15u].z, fma(_1100, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1099));
        float _2002;
        if (_1968 > 0.0)
        {
            _2002 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2002 = frontier_phi_14_12_ladder;
        }
        float _2226;
        if (_1971 > 0.0)
        {
            _2226 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2226 = frontier_phi_23_19_ladder;
        }
        float _2483;
        if (_1974 > 0.0)
        {
            _2483 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2483 = frontier_phi_35_30_ladder;
        }
        float _2485 = isnan(_2226) ? _2002 : (isnan(_2002) ? _2226 : min(_2002, _2226));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1968) + _1957;
        float _2491 = (_2486 * _1971) + _1961;
        float _2492 = (_2486 * _1974) + _1965;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2493;
        float _2497 = _2493 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 > _2497) || ((_2491 < _2495) || ((_2490 < _2495) || (_2490 > _2497))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2492, cbModelParam._m0[9u].z, fma(_2491, cbModelParam._m0[9u].y, _2490 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2492, cbModelParam._m0[10u].z, fma(_2491, cbModelParam._m0[10u].y, _2490 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2492, cbModelParam._m0[11u].z, fma(_2491, cbModelParam._m0[11u].y, _2490 * cbModelParam._m0[11u].x))), _1909);
            frontier_phi_13_35_ladder = _2620.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2620.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2620.x * cbModelParam._m0[1u].y;
        }
        _1990 = frontier_phi_13_35_ladder_2;
        _1992 = frontier_phi_13_35_ladder_1;
        _1994 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1099, _1100, _1101), _1909);
        _1990 = _1978.x * cbModelParam._m0[1u].y;
        _1992 = _1978.y * cbModelParam._m0[1u].y;
        _1994 = _1978.z * cbModelParam._m0[1u].y;
    }
    float _1998 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _929);
    float _1999 = isnan(_1998) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1998 : min(cbModelParam._m0[25u].w, _1998));
    float _2089;
    float _2091;
    float _2093;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2053 = fma(_1163, cbModelParam._m0[21u].z, fma(_1159, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1155)) + cbModelParam._m0[21u].w;
        float _2057 = fma(_1163, cbModelParam._m0[22u].z, fma(_1159, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1155)) + cbModelParam._m0[22u].w;
        float _2061 = fma(_1163, cbModelParam._m0[23u].z, fma(_1159, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1155)) + cbModelParam._m0[23u].w;
        float _2064 = fma(_1101, cbModelParam._m0[21u].z, fma(_1100, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1099));
        float _2067 = fma(_1101, cbModelParam._m0[22u].z, fma(_1100, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1099));
        float _2070 = fma(_1101, cbModelParam._m0[23u].z, fma(_1100, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1099));
        float _2231;
        if (_2064 > 0.0)
        {
            _2231 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2231 = frontier_phi_25_21_ladder;
        }
        float _2510;
        if (_2067 > 0.0)
        {
            _2510 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2510 = frontier_phi_37_32_ladder;
        }
        float _2723;
        if (_2070 > 0.0)
        {
            _2723 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2723 = frontier_phi_46_43_ladder;
        }
        float _2725 = isnan(_2510) ? _2231 : (isnan(_2231) ? _2510 : min(_2231, _2510));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _2064) + _2053;
        float _2731 = (_2726 * _2067) + _2057;
        float _2732 = (_2726 * _2070) + _2061;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _1999);
            frontier_phi_22_46_ladder = _2931.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2931.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2931.x * cbModelParam._m0[1u].z;
        }
        _2089 = frontier_phi_22_46_ladder_2;
        _2091 = frontier_phi_22_46_ladder_1;
        _2093 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2073 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1099, _1100, _1101), _1999);
        _2089 = _2073.x * cbModelParam._m0[1u].z;
        _2091 = _2073.y * cbModelParam._m0[1u].z;
        _2093 = _2073.z * cbModelParam._m0[1u].z;
    }
    float _2106 = (((_1126 * _1075) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2089 - _1990)) + _1990);
    float _2108 = (((_1126 * _1077) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2091 - _1992)) + _1992);
    float _2110 = (((_1126 * _1078) + _1127) * _1091) * ((cbModelParam._m0[1u].w * (_2093 - _1994)) + _1994);
    float _2113 = fma(_2110, cbSceneParam._m0[89u].z, fma(_2108, cbSceneParam._m0[89u].y, _2106 * cbSceneParam._m0[89u].x));
    float _2116 = fma(_2110, cbSceneParam._m0[90u].z, fma(_2108, cbSceneParam._m0[90u].y, _2106 * cbSceneParam._m0[90u].x));
    float _2119 = fma(_2110, cbSceneParam._m0[91u].z, fma(_2108, cbSceneParam._m0[91u].y, _2106 * cbSceneParam._m0[91u].x));
    vec4 _2127 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1013, _1014));
    float _2129 = _2127.w;
    float _2141 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2129);
    float _2142 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2129);
    float _2143 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2129);
    uvec4 _2147 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2149 = _2147.x * 14u;
    uint _2150 = _2149 + 13u;
    float _2157 = _1091 + (-1.0);
    float _2162 = (cbLight._m0[_2150].x * _2157) + 1.0;
    float _2163 = (cbLight._m0[_2150].y * _2157) + 1.0;
    float _2164 = (cbLight._m0[_2150].z * _2157) + 1.0;
    float _2165 = (cbLight._m0[_2150].w * _2157) + 1.0;
    uint _2166 = _2149 + 5u;
    float _2172 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
    uint _2176 = _2149 + 4u;
    float _2185 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
    uint _2189 = _2149 | 1u;
    float _2200 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_926, _927, _928));
    float _2203 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_926, _927, _928));
    float _4380 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _4391 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2208 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * 0.3183098733425140380859375;
    float _2210 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * 0.3183098733425140380859375;
    float _2217 = ((cbLight._m0[_2166].x * _2172) * _2210) + (((cbLight._m0[_2176].x * _2141) * _2185) * _2208);
    float _2218 = ((_2172 * cbLight._m0[_2166].y) * _2210) + (((cbLight._m0[_2176].y * _2142) * _2185) * _2208);
    float _2219 = ((_2172 * cbLight._m0[_2166].z) * _2210) + (((cbLight._m0[_2176].z * _2143) * _2185) * _2208);
    uvec4 _2223 = floatBitsToUint(cbLight._m0[_2149 + 12u]);
    bool _2225 = _2223.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2225)
    {
        _2236 = _2217;
        _2238 = _2218;
        _2240 = _2219;
    }
    else
    {
        uint _2244 = _2149 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2149 + 2u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4402 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2263 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2217;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2218;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2219;
    }
    bool _2243 = _2223.y == 0u;
    float _2281;
    float _2283;
    float _2285;
    if (_2243)
    {
        _2281 = _2236;
        _2283 = _2238;
        _2285 = _2240;
    }
    else
    {
        uint _2454 = _2149 + 7u;
        float _2470 = (dot(vec3(cbLight._m0[_2149 + 3u].xyz), vec3(_926, _927, _928)) * 0.5) + 0.5;
        float _2471 = _2470 * _2470;
        float _4418 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2472 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2473 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2281 = (((cbLight._m0[_2454].x * 0.3183098733425140380859375) * _2472) * _2473) + _2236;
        _2283 = (((cbLight._m0[_2454].y * 0.3183098733425140380859375) * _2472) * _2473) + _2238;
        _2285 = (((cbLight._m0[_2454].z * 0.3183098733425140380859375) * _2472) * _2473) + _2240;
    }
    uint _2288 = _2149 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2149].w)) * _929) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2149].x + _1005;
    float _2304 = cbLight._m0[_2149].y + _1006;
    float _2305 = cbLight._m0[_2149].z + _1007;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2149].xyz));
    float _4434 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _4445 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _2317 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2318 = dot(vec3(_926, _927, _928), vec3(_2310, _2311, _2312));
    float _4456 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2149].xyz), vec3(_2310, _2311, _2312));
    float _4467 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
    float _2339 = 0.959999978542327880859375 - _1072;
    float _2341 = 0.959999978542327880859375 - _1073;
    float _2342 = 0.959999978542327880859375 - _1074;
    float _2349 = 1.0 - _2302;
    float _2360 = (0.5 / (((_2317 * ((_2316 * _2349) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2349) + _2302) * _2316))) * _2316;
    float _4478 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2376 = _2149 + 9u;
    float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _929) * 0.949999988079071044921875);
    float _2388 = _2387 * _2387;
    float _2389 = cbLight._m0[_2189].x + _1005;
    float _2390 = cbLight._m0[_2189].y + _1006;
    float _2391 = cbLight._m0[_2189].z + _1007;
    float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
    float _2396 = _2395 * _2389;
    float _2397 = _2395 * _2390;
    float _2398 = _2395 * _2391;
    float _2399 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2189].xyz));
    float _4489 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2403 = dot(vec3(_926, _927, _928), vec3(_2396, _2397, _2398));
    float _4500 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2396, _2397, _2398));
    float _4511 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2388 * _2388;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
    float _2429 = 1.0 - _2388;
    float _2439 = (0.5 / (((_2317 * ((_2402 * _2429) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2429) + _2388) * _2402))) * _2402;
    float _4522 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2441 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    float _2451 = (((((_2422 * _2339) + _1075) * cbLight._m0[_2376].x) * _2441) * _2172) + ((((cbLight._m0[_2288].x * _2141) * ((_2338 * _2339) + _1075)) * _2362) * _2185);
    float _2452 = (((((_2422 * _2341) + _1077) * cbLight._m0[_2376].y) * _2441) * _2172) + ((((cbLight._m0[_2288].y * _2142) * ((_2338 * _2341) + _1077)) * _2362) * _2185);
    float _2453 = (((((_2422 * _2342) + _1078) * cbLight._m0[_2376].z) * _2441) * _2172) + ((((cbLight._m0[_2288].z * _2143) * ((_2338 * _2342) + _1078)) * _2362) * _2185);
    float _2515;
    float _2517;
    float _2519;
    if (_2225)
    {
        _2515 = _2451;
        _2517 = _2452;
        _2519 = _2453;
    }
    else
    {
        uint _2521 = _2149 + 2u;
        uint _2525 = _2149 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _929) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _1005;
        float _2542 = cbLight._m0[_2521].y + _1006;
        float _2543 = cbLight._m0[_2521].z + _1007;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2521].xyz));
        float _4533 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2555 = dot(vec3(_926, _927, _928), vec3(_2548, _2549, _2550));
        float _4544 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4555 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
        float _2581 = 1.0 - _2540;
        float _2591 = (0.5 / (((_2317 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2581) + _2540) * _2554))) * _2554;
        float _4566 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2593 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2594 = isnan(1.0) ? _2164 : (isnan(_2164) ? 1.0 : min(_2164, 1.0));
        _2515 = (((((_2574 * _2339) + _1075) * cbLight._m0[_2525].x) * _2593) * _2594) + _2451;
        _2517 = (((((_2574 * _2341) + _1077) * cbLight._m0[_2525].y) * _2593) * _2594) + _2452;
        _2519 = (((((_2574 * _2342) + _1078) * cbLight._m0[_2525].z) * _2593) * _2594) + _2453;
    }
    float _2629;
    float _2631;
    float _2633;
    if (_2243)
    {
        _2629 = _2515;
        _2631 = _2517;
        _2633 = _2519;
    }
    else
    {
        uint _2640 = _2149 + 3u;
        uint _2644 = _2149 + 11u;
        float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2640].w)) * _929) * 0.949999988079071044921875);
        float _2659 = _2658 * _2658;
        float _2660 = cbLight._m0[_2640].x + _1005;
        float _2661 = cbLight._m0[_2640].y + _1006;
        float _2662 = cbLight._m0[_2640].z + _1007;
        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
        float _2667 = _2666 * _2660;
        float _2668 = _2666 * _2661;
        float _2669 = _2666 * _2662;
        float _2670 = dot(vec3(_926, _927, _928), vec3(cbLight._m0[_2640].xyz));
        float _4582 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2674 = dot(vec3(_926, _927, _928), vec3(_2667, _2668, _2669));
        float _4593 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2678 = dot(vec3(cbLight._m0[_2640].xyz), vec3(_2667, _2668, _2669));
        float _4604 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2682 = _2659 * _2659;
        float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
        float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
        float _2700 = 1.0 - _2659;
        float _2710 = (0.5 / (((_2317 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2700) + _2659) * _2673))) * _2673;
        float _4615 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2165 : (isnan(_2165) ? 1.0 : min(_2165, 1.0));
        _2629 = (((((_2693 * _2339) + _1075) * cbLight._m0[_2644].x) * _2712) * _2713) + _2515;
        _2631 = (((((_2693 * _2341) + _1077) * cbLight._m0[_2644].y) * _2712) * _2713) + _2517;
        _2633 = (((((_2693 * _2342) + _1078) * cbLight._m0[_2644].z) * _2712) * _2713) + _2519;
    }
    float _2848;
    float _2850;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_2147.y == 0u)
    {
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2788;
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2788;
        float _2791 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2788;
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.x;
        uint _2815 = uint((float(_2803.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1014) / _2804))) + floor(float(uint(cbSceneParam._m0[85u].x * _1013) / _2804)));
        float _2825 = (log2(_2791 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2826 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        uint _2829 = uint(isnan(14.0) ? _2826 : (isnan(_2826) ? 14.0 : min(_2826, 14.0)));
        uvec4 _2834 = texelFetch(g_lightClusterGridBuffer, int(((_2829 << 2u) + (_2815 << 6u)) >> 2u));
        uint _2835 = _2834.x;
        uint _2836 = _2803.z;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        if (((((1u << ((_2836 >> 4u) & 15u)) + 4294967295u) & _2835) == 0u) || ((_2836 & 240u) == 0u))
        {
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
            _2942 = 0.0;
            _2944 = 0.0;
            _2946 = 0.0;
        }
        else
        {
            float _2937;
            float _2939;
            float _2941;
            float _2943;
            float _2945;
            float _2947;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            uint _3087 = 0u;
            uint _3096;
            bool _3097;
            for (;;)
            {
                _3096 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3087 << 2u)) >> 2u)).x;
                _3097 = _3096 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3097)
                {
                    frontier_phi_61_pred = _3081;
                    frontier_phi_61_pred_1 = _3086;
                    frontier_phi_61_pred_2 = _3085;
                    frontier_phi_61_pred_3 = _3084;
                    frontier_phi_61_pred_4 = _3083;
                    frontier_phi_61_pred_5 = _3082;
                }
                else
                {
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    uint _3211;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3085;
                    _3210 = _3086;
                    _3211 = _3096;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    float _3142;
                    for (;;)
                    {
                        uint _3215 = uint(findLSB(_3211)) + (_3087 << 5u);
                        uint _3212 = (_3211 + 4294967295u) & _3211;
                        uint _3217 = _3215 * 48u;
                        vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 3u)).x));
                        uint _3237 = (_3215 * 48u) + 4u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3237)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3237 + 3u)).x));
                        uint _3256 = (_3215 * 48u) + 8u;
                        vec3 _3267 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x));
                        float _3271 = _3231.x - _2789;
                        float _3272 = _3231.y - _2790;
                        float _3273 = _3231.z - _2791;
                        float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                        float _3277 = inversesqrt(_3274);
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3281 = dot(vec3(_1032, _1035, _1038), vec3(_3278, _3279, _3280));
                        float _3286 = 1.0 - (_3274 * _3231.w);
                        float _4641 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3288 = sqrt(_3274) * _3250.w;
                        float _3291 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3281) + _3292;
                        float _3298 = _3288 * _3288;
                        float _3302 = ((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3287) / ((_3298 * 0.699999988079071044921875) + 1.0);
                        float _3306 = (-0.0) - _2789;
                        float _3307 = (-0.0) - _2790;
                        float _3308 = (-0.0) - _2791;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3313 = _3312 * _3306;
                        float _3314 = _3312 * _3307;
                        float _3315 = _3312 * _3308;
                        float _3323 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                        float _3324 = 1.0 - _1107;
                        float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                        float _3332 = _3331 * _3331;
                        float _3333 = _3332 * _3332;
                        float _3334 = _3313 + _3278;
                        float _3335 = _3314 + _3279;
                        float _3336 = _3315 + _3280;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3344 = dot(vec3(_1032, _1035, _1038), vec3(_3313, _3314, _3315));
                        float _4657 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3348 = dot(vec3(_1032, _1035, _1038), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                        float _4668 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3351 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                        float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                        float _3356 = _3291 * _3332;
                        float _3357 = _3356 * _3356;
                        float _3360 = ((1.0 - _3357) * _3281) + _3357;
                        float _4679 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                        float _3362 = 1.0 - _3332;
                        float _3372 = (0.5 / (((_3361 * ((_3347 * _3362) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3332) * _3347))) * _3361;
                        float _4690 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3383 = (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0)))) / ((_3355 * _3355) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125))) * _3287;
                        _3140 = (_3302 * _3250.x) + _3208;
                        _3141 = (_3302 * _3250.y) + _3209;
                        _3142 = (_3302 * _3250.z) + _3210;
                        _3137 = (_3383 * _3267.x) + _3205;
                        _3138 = (_3383 * _3267.y) + _3206;
                        _3139 = (_3383 * _3267.z) + _3207;
                        if (_3212 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3141;
                            _3210 = _3142;
                            _3211 = _3212;
                        }
                    }
                    frontier_phi_61_pred = _3137;
                    frontier_phi_61_pred_1 = _3142;
                    frontier_phi_61_pred_2 = _3141;
                    frontier_phi_61_pred_3 = _3140;
                    frontier_phi_61_pred_4 = _3139;
                    frontier_phi_61_pred_5 = _3138;
                }
                _2937 = frontier_phi_61_pred;
                _2947 = frontier_phi_61_pred_1;
                _2945 = frontier_phi_61_pred_2;
                _2943 = frontier_phi_61_pred_3;
                _2941 = frontier_phi_61_pred_4;
                _2939 = frontier_phi_61_pred_5;
                uint _3088 = _3087 + 1u;
                if (_3088 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3081 = _2937;
                    _3082 = _2939;
                    _3083 = _2941;
                    _3084 = _2943;
                    _3085 = _2945;
                    _3086 = _2947;
                    _3087 = _3088;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
            _2942 = _2943;
            _2944 = _2945;
            _2946 = _2947;
        }
        uvec4 _2950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2951 = _2950.z;
        uint _2953 = (_2951 >> 8u) & 15u;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((4294967295u << _2953) & _2835) == 0u)
        {
            _3049 = _2936;
            _3051 = _2938;
            _3053 = _2940;
            _3055 = _2942;
            _3057 = _2944;
            _3059 = _2946;
        }
        else
        {
            float _3074 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
            float _3075 = _3074 * _2789;
            float _3076 = _3074 * _2790;
            float _3077 = _3074 * _2791;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2953 < ((_2951 >> 12u) & 15u))
            {
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3188 = _2936;
                float _3189 = _2938;
                float _3190 = _2940;
                float _3191 = _2942;
                float _3192 = _2944;
                float _3193 = _2946;
                uint _3194 = _2953;
                uint _3203;
                bool _3204;
                for (;;)
                {
                    _3203 = texelFetch(g_lightClassification, int((((_2829 << 5u) + (_2815 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                    _3204 = _3203 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3204)
                    {
                        frontier_phi_67_pred = _3191;
                        frontier_phi_67_pred_1 = _3192;
                        frontier_phi_67_pred_2 = _3193;
                        frontier_phi_67_pred_3 = _3190;
                        frontier_phi_67_pred_4 = _3189;
                        frontier_phi_67_pred_5 = _3188;
                    }
                    else
                    {
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        float _3404 = _3191;
                        float _3405 = _3192;
                        float _3406 = _3193;
                        uint _3407 = _3203;
                        uint _3408;
                        vec4 _3433;
                        float _3434;
                        vec4 _3449;
                        vec3 _3461;
                        vec4 _3476;
                        vec4 _3491;
                        float _3537;
                        bool _3538;
                        for (;;)
                        {
                            uint _3418 = ((_3194 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3407));
                            _3408 = (_3407 + 4294967295u) & _3407;
                            uint _3420 = _3418 * 40u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3434 = _3433.w;
                            uint _3436 = (_3418 * 40u) + 4u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3418 * 40u) + 8u;
                            _3461 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x));
                            uint _3463 = (_3418 * 40u) + 16u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3418 * 40u) + 20u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            uint _3493 = (_3418 * 40u) + 24u;
                            vec4 _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3512 = (_3418 * 40u) + 28u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            _3537 = fma(_2791, _3525.z, fma(_2790, _3525.y, _3525.x * _2789)) + _3525.w;
                            _3538 = !((fma(_2791, _3506.z, fma(_2790, _3506.y, _3506.x * _2789)) + _3506.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3538)
                            {
                                float _3565 = _3433.x - _2789;
                                float _3566 = _3433.y - _2790;
                                float _3567 = _3433.z - _2791;
                                float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                                float _3571 = inversesqrt(_3568);
                                float _3572 = _3571 * _3565;
                                float _3573 = _3571 * _3566;
                                float _3574 = _3571 * _3567;
                                float _3578 = 1.0 - (_3568 / (_3434 * _3434));
                                float _4701 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3583 = sqrt(_3568) * _3449.w;
                                float _3585 = 1.39999997615814208984375 / (_3583 + 1.39999997615814208984375);
                                float _3586 = _3585 * _3585;
                                float _3589 = ((1.0 - _3586) * dot(vec3(_3572, _3573, _3574), vec3(_1032, _1035, _1038))) + _3586;
                                float _3592 = _3583 * _3583;
                                float _3596 = (fma(_2791, _3476.z, fma(_2790, _3476.y, _3476.x * _2789)) + _3476.w) / _3537;
                                float _3597 = (fma(_2791, _3491.z, fma(_2790, _3491.y, _3491.x * _2789)) + _3491.w) / _3537;
                                float _3601 = 1.0 - dot(vec2(_3596, _3597), vec2(_3596, _3597));
                                float _4717 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3602 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3603 = _3602 * (((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3579) / ((_3592 * 0.699999988079071044921875) + 1.0));
                                float _3615 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                                float _3616 = 1.0 - _1107;
                                float _3623 = sqrt(1.0 - ((1.0 - (_3616 * _3616)) * (1.0 - (_3615 * _3615))));
                                float _3624 = _3623 * _3623;
                                float _3625 = _3624 * _3624;
                                float _3626 = _3572 - _3075;
                                float _3627 = _3573 - _3076;
                                float _3628 = _3574 - _3077;
                                float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                                float _3636 = dot(vec3(_1032, _1035, _1038), vec3((-0.0) - _3075, (-0.0) - _3076, (-0.0) - _3077));
                                float _4728 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3639 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3640 = dot(vec3(_1032, _1035, _1038), vec3(_3632 * _3626, _3632 * _3627, _3632 * _3628));
                                float _4739 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
                                float _3647 = ((_3643 * _3643) * (_3625 + (-1.0))) + 1.0;
                                float _3648 = _3585 * _3624;
                                float _3649 = _3648 * _3648;
                                float _3655 = ((1.0 - _3649) * dot(vec3(_1032, _1035, _1038), vec3(_3572, _3573, _3574))) + _3649;
                                float _4750 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3656 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3657 = 1.0 - _3624;
                                float _3667 = (0.5 / (((_3656 * ((_3639 * _3657) + _3624)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3624) * _3639))) * _3656;
                                float _4761 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3677 = (_3602 * _3579) * (((_3625 * 3.1415927410125732421875) * (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) / ((_3647 * _3647) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3677 * _3461.x;
                                frontier_phi_73_pred_1 = _3677 * _3461.y;
                                frontier_phi_73_pred_2 = _3603 * _3449.z;
                                frontier_phi_73_pred_3 = _3603 * _3449.y;
                                frontier_phi_73_pred_4 = _3603 * _3449.x;
                                frontier_phi_73_pred_5 = _3677 * _3461.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3681 = frontier_phi_73_pred;
                            _3682 = frontier_phi_73_pred_1;
                            _3686 = frontier_phi_73_pred_2;
                            _3685 = frontier_phi_73_pred_3;
                            _3684 = frontier_phi_73_pred_4;
                            _3683 = frontier_phi_73_pred_5;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3388 = _3681 + _3401;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            if (_3408 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3408;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3391;
                        frontier_phi_67_pred_1 = _3392;
                        frontier_phi_67_pred_2 = _3393;
                        frontier_phi_67_pred_3 = _3390;
                        frontier_phi_67_pred_4 = _3389;
                        frontier_phi_67_pred_5 = _3388;
                    }
                    _3056 = frontier_phi_67_pred;
                    _3058 = frontier_phi_67_pred_1;
                    _3060 = frontier_phi_67_pred_2;
                    _3054 = frontier_phi_67_pred_3;
                    _3052 = frontier_phi_67_pred_4;
                    _3050 = frontier_phi_67_pred_5;
                    uint _3195 = _3194 + 1u;
                    if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3188 = _3050;
                        _3189 = _3052;
                        _3190 = _3054;
                        _3191 = _3056;
                        _3192 = _3058;
                        _3193 = _3060;
                        _3194 = _3195;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3058;
                frontier_phi_55_56_ladder_1 = _3060;
                frontier_phi_55_56_ladder_2 = _3056;
                frontier_phi_55_56_ladder_3 = _3054;
                frontier_phi_55_56_ladder_4 = _3052;
                frontier_phi_55_56_ladder_5 = _3050;
            }
            else
            {
                frontier_phi_55_56_ladder = _2944;
                frontier_phi_55_56_ladder_1 = _2946;
                frontier_phi_55_56_ladder_2 = _2942;
                frontier_phi_55_56_ladder_3 = _2940;
                frontier_phi_55_56_ladder_4 = _2938;
                frontier_phi_55_56_ladder_5 = _2936;
            }
            _3049 = frontier_phi_55_56_ladder_5;
            _3051 = frontier_phi_55_56_ladder_4;
            _3053 = frontier_phi_55_56_ladder_3;
            _3055 = frontier_phi_55_56_ladder_2;
            _3057 = frontier_phi_55_56_ladder;
            _3059 = frontier_phi_55_56_ladder_1;
        }
        float _3064 = isnan(1.0) ? _1091 : (isnan(_1091) ? 1.0 : min(_1091, 1.0));
        _2848 = (_3064 * _3055) + _2281;
        _2850 = (_3064 * _3057) + _2283;
        _2852 = (_3064 * _3059) + _2285;
        _2854 = ((_3049 * _1075) * _3064) + _2629;
        _2856 = ((_3051 * _1077) * _3064) + _2631;
        _2858 = ((_3053 * _1078) * _3064) + _2633;
    }
    else
    {
        _2848 = _2281;
        _2850 = _2283;
        _2852 = _2285;
        _2854 = _2629;
        _2856 = _2631;
        _2858 = _2633;
    }
    float _4777 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _4788 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4799 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    uint _2878 = _263 + 6u;
    float _2886 = _1013 / cbSceneParam._m0[86u].x;
    float _2887 = _1014 / cbSceneParam._m0[86u].y;
    vec4 _2901 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, (log2((isnan(cbSceneParam._m0[77u].w) ? _948 : (isnan(_948) ? cbSceneParam._m0[77u].w : min(_948, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2903 = _2901.x;
    float _2904 = _2901.y;
    float _2905 = _2901.z;
    float _2906 = _2901.w;
    float _2999;
    float _3001;
    float _3003;
    float _3005;
    if (_948 > cbSceneParam._m0[78u].w)
    {
        float _2961 = isnan(_948) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _948 : min(cbSceneParam._m0[80u].w, _948));
        float _2962 = _2961 / _948;
        float _2973 = _2962 * _998;
        float _2974 = _999 * _2962;
        float _2975 = (-0.0) - _2974;
        float _2977 = _2962 * _1000;
        float _2979 = (cbSceneParam._m0[77u].w * _2975) / _2961;
        float _2980 = _2979 + cbSceneParam._m0[79u].w;
        float _2981 = cbSceneParam._m0[79u].w - _2974;
        float _2987 = sqrt(((_2973 * _2973) + (_2974 * _2974)) + (_2977 * _2977));
        float _2990 = (1.0 - (cbSceneParam._m0[77u].w / _2961)) * _2987;
        float _2995 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2997 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3150;
        if (abs((_2975 - _2979) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3150 = ((((_2980 > 0.0) ? exp2(_2995 * _2980) : (2.0 - exp2(_2997 * _2980))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2990;
        }
        else
        {
            float _3110 = 1.0 / cbSceneParam._m0[80u].x;
            float _3111 = isnan(_2981) ? _2980 : (isnan(_2980) ? _2981 : max(_2980, _2981));
            float _3112 = isnan(_2981) ? _2980 : (isnan(_2980) ? _2981 : min(_2980, _2981));
            float _3121 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : min(_3111, 0.0));
            float _3122 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : min(_3112, 0.0));
            _3150 = ((abs(_2987 / _2975) * cbSceneParam._m0[80u].y) * ((((_3121 - _3122) * 2.0) - ((exp2(_2995 * (isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0)))) - exp2(_2995 * (isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))))) * _3110)) - ((exp2(_2997 * _3121) - exp2(_2997 * _3122)) * _3110))) + (_2990 * cbSceneParam._m0[80u].z);
        }
        vec4 _3152 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2886, _2887, 1.0), 0.0);
        float _3161 = exp2((_3150 * (-1.44269502162933349609375)) * (1.0 - _3152.w));
        float _3162 = log2(_3161);
        float _3178 = log2(_2906);
        _2999 = (exp2(_3178 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].x)) * _3152.x) / cbSceneParam._m0[78u].x)) + _2903;
        _3001 = (exp2(_3178 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].y)) * _3152.y) / cbSceneParam._m0[78u].y)) + _2904;
        _3003 = (exp2(_3178 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3162 * cbSceneParam._m0[78u].z)) * _3152.z) / cbSceneParam._m0[78u].z)) + _2905;
        _3005 = _3161 * _2906;
    }
    else
    {
        _2999 = _2903;
        _3001 = _2904;
        _3003 = _2905;
        _3005 = _2906;
    }
    float _3017 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3018 = _3017 == 3.0;
    float _3019 = log2(_3005);
    float _3026 = exp2(_3019 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2848 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1091))) + ((_2854 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3027 = exp2(_3019 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2850 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1091))) + ((_2856 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3028 = exp2(_3019 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0))) * (_2852 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1091))) + ((_2858 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1898)) * cbPerFrame._m0[3u].x));
    float _3037 = (_3017 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3037 * (_3018 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _2999)));
    SV_Target.y = _3037 * (_3018 ? _3027 : (_3027 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.z = _3037 * (_3018 ? _3028 : (_3028 + (cbSceneParam._m0[72u].w * _3003)));
    SV_Target.w = cbInstanceData._m0[_2878].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2878].w;
}


