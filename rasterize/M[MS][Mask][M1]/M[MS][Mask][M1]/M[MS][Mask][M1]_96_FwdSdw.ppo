#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1484;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _309 = _303.x * cbMtdParam._m0[11u].x;
    float _310 = _303.y * cbMtdParam._m0[11u].y;
    float _311 = _303.z * cbMtdParam._m0[11u].z;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _387 = _385.x;
    float _399 = dot(vec4(_387, _385.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _416 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _349.x) * 2.0) - ((((_387 - _399) * cbMtdParam._m0[23u].w) + _399) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4090 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _424 = (_417 * ((_330.x * cbMtdParam._m0[12u].x) - _309)) + _309;
    float _425 = (_417 * ((_330.y * cbMtdParam._m0[12u].y) - _310)) + _310;
    float _426 = (_417 * ((_330.z * cbMtdParam._m0[12u].z) - _311)) + _311;
    vec4 _443 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _463 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _465 = _463.x;
    float _475 = dot(vec4(_465, _463.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _489 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _349.y) * 2.0) - ((((_465 - _475) * cbMtdParam._m0[23u].w) + _475) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4101 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _497 = (_490 * ((_443.x * cbMtdParam._m0[13u].x) - _424)) + _424;
    float _498 = (_490 * ((_443.y * cbMtdParam._m0[13u].y) - _425)) + _425;
    float _499 = (_490 * ((_443.z * cbMtdParam._m0[13u].z) - _426)) + _426;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _417) + _557;
    float _567 = ((_538.y - _558) * _417) + _558;
    float _568 = ((_538.z - _559) * _417) + _559;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _490) + _568;
    float _596 = ((((_580.x - _566) * _490) + _566) * 2.0) + (-1.0);
    float _598 = ((((_580.y - _567) * _490) + _567) * 2.0) + (-1.0);
    float _599 = dot(vec2(_596, _598), vec2(_596, _598));
    float _4112 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _630 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _631 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _634 = fma(_604, _251, fma(_631, _258, _630 * _244));
    float _637 = fma(_604, _252, fma(_631, _259, _630 * _245));
    float _640 = fma(_604, _253, fma(_631, _260, _630 * _246));
    float _644 = inversesqrt(dot(vec3(_634, _637, _640), vec3(_634, _637, _640)));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _673 = _671.x;
    float _674 = 1.0 - _673;
    float _683 = (cbMtdParam._m0[19u].x + dot(vec4(_644 * _634, _644 * _637, _644 * _640, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_673 - _674) * cbMtdParam._m0[24u].z) + _674) * cbMtdParam._m0[21u].z);
    float _4123 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _684 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _686 = (-0.0) - cbMtdParam._m0[24u].x;
    float _688 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
    float _696 = _684 - ((_684 * TEXCOORD_8.x) * _689);
    float _697 = _684 - ((_684 * TEXCOORD_8.y) * _689);
    float _698 = _684 - ((_684 * TEXCOORD_8.z) * _689);
    float _705 = (_696 * ((_518.x * cbMtdParam._m0[18u].x) - _497)) + _497;
    float _706 = (_697 * ((_518.y * cbMtdParam._m0[18u].y) - _498)) + _498;
    float _707 = (_698 * ((_518.z * cbMtdParam._m0[18u].z) - _499)) + _499;
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _721 = _719.x;
    float _722 = 1.0 - _721;
    float _748 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_721 - _722) * cbMtdParam._m0[24u].w) + _722) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4144 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _749 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _757 = ((((cbMtdParam._m0[10u].x - _705) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _749) + _705;
    float _758 = ((((cbMtdParam._m0[10u].y - _706) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _749) + _706;
    float _759 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _707)) * _749) + _707;
    vec4 _785 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _787 = _785.x;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _787) * _417) + _787;
    float _822 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _805) * _490) + _805;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _822) * cbMtdParam._m0[19u].z) + _822;
    float _828 = _826 - (_826 * _696);
    float _830 = _828 - (_828 * _749);
    float _834 = (cbMtdParam._m0[19u].w * (_618.z - _593)) + _593;
    vec4 _848 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _855 = (_848.x * 2.0) + (-1.0);
    float _856 = (_848.y * 2.0) + (-1.0);
    float _857 = dot(vec2(_855, _856), vec2(_855, _856));
    float _4155 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _865 = ((_848.z - _834) * _696) + _834;
    float _868 = ((cbMtdParam._m0[23u].x - _865) * _749) + _865;
    vec4 _887 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _893 = (_887.x * 2.0) + (-1.0);
    float _894 = (_887.y * 2.0) + (-1.0);
    float _895 = dot(vec2(_893, _894), vec2(_893, _894));
    float _4166 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _910 = ((sqrt(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) - _604) * _698) + _604;
    float _913 = (((_855 - _630) * _696) + _630) + (cbMtdParam._m0[21u].x * _630);
    float _914 = (((_856 - _631) * _697) + _631) + (cbMtdParam._m0[21u].x * _631);
    float _925 = (((_893 - _913) + (_913 * cbMtdParam._m0[22u].z)) * _749) + _913;
    float _926 = (((_894 - _914) + (_914 * cbMtdParam._m0[22u].z)) * _749) + _914;
    float _927 = (_749 * (sqrt(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) - _910)) + _910;
    float _931 = cbMtdParam._m0[22u].x + _618.w;
    float _934 = fma(_927, _251, fma(_926, _258, _925 * _244));
    float _937 = fma(_927, _252, fma(_926, _259, _925 * _245));
    float _940 = fma(_927, _253, fma(_926, _260, _925 * _246));
    float _944 = inversesqrt(dot(vec3(_934, _937, _940), vec3(_934, _937, _940)));
    float _945 = _944 * _934;
    float _946 = _944 * _937;
    float _947 = _944 * _940;
    float _4177 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _948 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4199 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4210 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4221 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4232 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _953 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _967 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1017 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1007);
    float _1018 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1007);
    float _1019 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1007);
    float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
    float _1024 = _1017 * _1023;
    float _1025 = _1018 * _1023;
    float _1026 = _1019 * _1023;
    float _1032 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1033 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1051 = fma(_947, cbSceneParam._m0[5u].z, fma(_946, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _945));
    float _1054 = fma(_947, cbSceneParam._m0[6u].z, fma(_946, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _945));
    float _1057 = fma(_947, cbSceneParam._m0[7u].z, fma(_946, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _945));
    uint _1071 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1077 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * cbInstanceData._m0[_1071].x;
    float _1078 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * cbInstanceData._m0[_1071].y;
    float _1079 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * cbInstanceData._m0[_1071].z;
    float _4243 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _1083 = 1.0 - _953;
    float _1084 = _1080 * _1083;
    float _1085 = _1081 * _1083;
    float _1086 = _1082 * _1083;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _953;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _953;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _953;
    float _1094 = _1091 + 0.039999999105930328369140625;
    float _1096 = _1092 + 0.039999999105930328369140625;
    float _1097 = _1093 + 0.039999999105930328369140625;
    vec4 _1106 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1032, cbSceneParam._m0[86u].y * _1033));
    float _1110 = ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * TEXCOORD_5.w) * _1106.x;
    float _1111 = dot(vec3(_945, _946, _947), vec3(_1024, _1025, _1026));
    float _1114 = _1111 * 2.0;
    float _1118 = (_1114 * _945) - _1024;
    float _1119 = (_1114 * _946) - _1025;
    float _1120 = (_1114 * _947) - _1026;
    float _1124 = abs(dot(vec3(_1024, _1025, _1026), vec3(_945, _946, _947)));
    float _4276 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1126 = sqrt(_948);
    float _1139 = exp2((_1126 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1126 * 3.0));
    float _1145 = (1.0 - _1139) * ((_1126 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1146 = _1139 * _1126;
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1483;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1208 = fma(_1182, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174));
        float _1212 = fma(_1182, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174));
        float _1216 = fma(_1182, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174));
        float _1241 = _1174 + _945;
        float _1242 = _1178 + _946;
        float _1243 = _1182 + _947;
        float _1253 = fma(_1243, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1241)) - _1208;
        float _1254 = fma(_1243, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1241)) - _1212;
        float _1255 = fma(_1243, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1241)) - _1216;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1208 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1212 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[34u].z) + ((((((_1216 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1311 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1277.x + (-0.5));
        float _1313 = _1311 * (_1277.y + (-0.5));
        float _1314 = _1311 * (_1277.z + (-0.5));
        float _1321 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1284.x + (-0.5));
        float _1323 = _1321 * (_1284.y + (-0.5));
        float _1324 = _1321 * (_1284.z + (-0.5));
        float _1331 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1291.x + (-0.5));
        float _1333 = _1331 * (_1291.y + (-0.5));
        float _1334 = _1331 * (_1291.z + (-0.5));
        float _1341 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1298.x + (-0.5));
        float _1343 = _1341 * (_1298.y + (-0.5));
        float _1344 = _1341 * (_1298.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1365 = (dot(vec3(_945, _946, _947), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1375 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4324 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1377 + 1.0))) + _1382) * _1345;
        float _1392 = _1313 * 0.5;
        float _1393 = _1323 * 0.5;
        float _1394 = _1333 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_945, _946, _947), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4357 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1419 + 1.0))) + _1424) * _1346;
        float _1434 = _1314 * 0.5;
        float _1435 = _1324 * 0.5;
        float _1436 = _1334 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_945, _946, _947), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4390 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1461 + 1.0))) + _1466) * _1347;
        _1483 = _1314;
        _1485 = _1313;
        _1486 = _1312;
        _1487 = _1324;
        _1488 = _1323;
        _1489 = _1322;
        _1490 = _1334;
        _1491 = _1333;
        _1492 = _1332;
        _1493 = _1347;
        _1494 = _1346;
        _1495 = _1345;
        _1496 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1484;
        _1485 = _1484;
        _1486 = _1484;
        _1487 = _1484;
        _1488 = _1484;
        _1489 = _1484;
        _1490 = _1484;
        _1491 = _1484;
        _1492 = _1484;
        _1493 = _1484;
        _1494 = _1484;
        _1495 = _1484;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1182, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174));
        float _1526 = fma(_1182, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174));
        float _1530 = fma(_1182, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174));
        float _1553 = _1174 + _945;
        float _1554 = _1178 + _946;
        float _1555 = _1182 + _947;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_945, _946, _947), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4453 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_945, _946, _947), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4486 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_945, _946, _947), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4497 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4508 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4519 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1484;
        _1792 = _1484;
        _1793 = _1484;
        _1794 = _1484;
        _1795 = _1484;
        _1796 = _1484;
        _1797 = _1484;
        _1798 = _1484;
        _1799 = _1484;
        _1800 = _1484;
        _1801 = _1484;
        _1802 = _1484;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1496)) + _1496;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1497)) + _1497;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1498)) + _1498;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1118 * 0.5;
    float _1860 = _1119 * 0.5;
    float _1861 = _1120 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1483, _1487, _1490, _1493));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1485, _1488, _1491, _1494));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _948);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1975 = fma(_1182, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1174)) + cbModelParam._m0[13u].w;
        float _1979 = fma(_1182, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1174)) + cbModelParam._m0[14u].w;
        float _1983 = fma(_1182, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1174)) + cbModelParam._m0[15u].w;
        float _1986 = fma(_1120, cbModelParam._m0[13u].z, fma(_1119, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118));
        float _1989 = fma(_1120, cbModelParam._m0[14u].z, fma(_1119, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118));
        float _1992 = fma(_1120, cbModelParam._m0[15u].z, fma(_1119, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118));
        float _2020;
        if (_1986 > 0.0)
        {
            _2020 = abs((1.0 - _1975) / _1986);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1975 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2020 = frontier_phi_14_12_ladder;
        }
        float _2191;
        if (_1989 > 0.0)
        {
            _2191 = abs((1.0 - _1979) / _1989);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1979 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2191 = frontier_phi_23_19_ladder;
        }
        float _2486;
        if (_1992 > 0.0)
        {
            _2486 = abs((1.0 - _1983) / _1992);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1992 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1983 + 1.0) / _1992);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2486 = frontier_phi_35_30_ladder;
        }
        float _2488 = isnan(_2191) ? _2020 : (isnan(_2020) ? _2191 : min(_2020, _2191));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1986) + _1975;
        float _2494 = (_2489 * _1989) + _1979;
        float _2495 = (_2489 * _1992) + _1983;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2496;
        float _2500 = _2496 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 > _2500) || ((_2494 < _2498) || ((_2493 < _2498) || (_2493 > _2500))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2495, cbModelParam._m0[9u].z, fma(_2494, cbModelParam._m0[9u].y, _2493 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2495, cbModelParam._m0[10u].z, fma(_2494, cbModelParam._m0[10u].y, _2493 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2495, cbModelParam._m0[11u].z, fma(_2494, cbModelParam._m0[11u].y, _2493 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_13_35_ladder = _2640.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2640.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2640.x * cbModelParam._m0[1u].y;
        }
        _2008 = frontier_phi_13_35_ladder_2;
        _2010 = frontier_phi_13_35_ladder_1;
        _2012 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1118, _1119, _1120), _1928);
        _2008 = _1996.x * cbModelParam._m0[1u].y;
        _2010 = _1996.y * cbModelParam._m0[1u].y;
        _2012 = _1996.z * cbModelParam._m0[1u].y;
    }
    float _2016 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _948);
    float _2017 = isnan(_2016) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2016 : min(cbModelParam._m0[25u].w, _2016));
    float _2106;
    float _2108;
    float _2110;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2070 = fma(_1182, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1174)) + cbModelParam._m0[21u].w;
        float _2074 = fma(_1182, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1174)) + cbModelParam._m0[22u].w;
        float _2078 = fma(_1182, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1174)) + cbModelParam._m0[23u].w;
        float _2081 = fma(_1120, cbModelParam._m0[21u].z, fma(_1119, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118));
        float _2084 = fma(_1120, cbModelParam._m0[22u].z, fma(_1119, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118));
        float _2087 = fma(_1120, cbModelParam._m0[23u].z, fma(_1119, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118));
        float _2196;
        if (_2081 > 0.0)
        {
            _2196 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2196 = frontier_phi_25_21_ladder;
        }
        float _2513;
        if (_2084 > 0.0)
        {
            _2513 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2513 = frontier_phi_37_32_ladder;
        }
        float _2851;
        if (_2087 > 0.0)
        {
            _2851 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2851 = frontier_phi_47_44_ladder;
        }
        float _2853 = isnan(_2513) ? _2196 : (isnan(_2196) ? _2513 : min(_2196, _2513));
        float _2854 = isnan(_2851) ? _2853 : (isnan(_2853) ? _2851 : min(_2853, _2851));
        float _2858 = (_2854 * _2081) + _2070;
        float _2859 = (_2854 * _2084) + _2074;
        float _2860 = (_2854 * _2087) + _2078;
        float _2861 = _2854 * 9.9999997473787516355514526367188e-05;
        float _2862 = (-1.0) - _2861;
        float _2864 = _2861 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2860 > _2864) || ((_2860 < _2862) || ((_2859 > _2864) || ((_2859 < _2862) || ((_2858 < _2862) || (_2858 > _2864))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2982 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2860, cbModelParam._m0[17u].z, fma(_2859, cbModelParam._m0[17u].y, _2858 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2860, cbModelParam._m0[18u].z, fma(_2859, cbModelParam._m0[18u].y, _2858 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2860, cbModelParam._m0[19u].z, fma(_2859, cbModelParam._m0[19u].y, _2858 * cbModelParam._m0[19u].x))), _2017);
            frontier_phi_22_47_ladder = _2982.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2982.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2982.x * cbModelParam._m0[1u].z;
        }
        _2106 = frontier_phi_22_47_ladder_2;
        _2108 = frontier_phi_22_47_ladder_1;
        _2110 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2090 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1118, _1119, _1120), _2017);
        _2106 = _2090.x * cbModelParam._m0[1u].z;
        _2108 = _2090.y * cbModelParam._m0[1u].z;
        _2110 = _2090.z * cbModelParam._m0[1u].z;
    }
    float _2123 = (((_1145 * _1094) + _1146) * _1110) * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2125 = (((_1145 * _1096) + _1146) * _1110) * ((cbModelParam._m0[1u].w * (_2108 - _2010)) + _2010);
    float _2127 = (((_1145 * _1097) + _1146) * _1110) * ((cbModelParam._m0[1u].w * (_2110 - _2012)) + _2012);
    float _2130 = fma(_2127, cbSceneParam._m0[89u].z, fma(_2125, cbSceneParam._m0[89u].y, _2123 * cbSceneParam._m0[89u].x));
    float _2133 = fma(_2127, cbSceneParam._m0[90u].z, fma(_2125, cbSceneParam._m0[90u].y, _2123 * cbSceneParam._m0[90u].x));
    float _2136 = fma(_2127, cbSceneParam._m0[91u].z, fma(_2125, cbSceneParam._m0[91u].y, _2123 * cbSceneParam._m0[91u].x));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2182 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2183 = _2170 / _2182;
    float _2184 = _2174 / _2182;
    float _2185 = _2178 / _2182;
    float _2332;
    float _2333;
    float _2334;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2212 = ((uint(_2185 > cbSceneParam._m0[59u].y) + uint(_2185 > cbSceneParam._m0[59u].x)) + uint(_2185 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2213 = _2212 + 43u;
        uint _2221 = _2212 + 44u;
        uint _2229 = _2212 + 45u;
        uint _2237 = _2212 + 46u;
        float _2248 = fma(_2182, cbSceneParam._m0[_2213].w, fma(_2178, cbSceneParam._m0[_2213].z, fma(_2174, cbSceneParam._m0[_2213].y, _2170 * cbSceneParam._m0[_2213].x)));
        float _2252 = fma(_2182, cbSceneParam._m0[_2221].w, fma(_2178, cbSceneParam._m0[_2221].z, fma(_2174, cbSceneParam._m0[_2221].y, _2170 * cbSceneParam._m0[_2221].x)));
        float _2260 = fma(_2182, cbSceneParam._m0[_2237].w, fma(_2178, cbSceneParam._m0[_2237].z, fma(_2174, cbSceneParam._m0[_2237].y, _2170 * cbSceneParam._m0[_2237].x)));
        float _2265 = cbSceneParam._m0[33u].z * _2260;
        float _2267 = cbSceneParam._m0[33u].w * _2260;
        float _2270 = fma(_2182, cbSceneParam._m0[_2229].w, fma(_2178, cbSceneParam._m0[_2229].z, fma(_2174, cbSceneParam._m0[_2229].y, _2170 * cbSceneParam._m0[_2229].x))) / _2260;
        float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
        float _4645 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2325 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2265 + _2248) / _2260, (_2267 + _2252) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2267 + _2248) / _2260, (_2252 - _2265) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2265) / _2260, (_2252 - _2267) / _2260), _2270), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2248 - _2267) / _2260, (_2265 + _2252) / _2260), _2270), 0.0)).x), vec4(0.25)));
        _2332 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
        _2333 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
        _2334 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2332 = 1.0;
        _2333 = 1.0;
        _2334 = 1.0;
    }
    float _2398;
    float _2400;
    float _2402;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2386 = fma(_2182, cbSceneParam._m0[63u].w, fma(_2178, cbSceneParam._m0[63u].z, fma(_2174, cbSceneParam._m0[63u].y, _2170 * cbSceneParam._m0[63u].x)));
        float _2387 = fma(_2182, cbSceneParam._m0[60u].w, fma(_2178, cbSceneParam._m0[60u].z, fma(_2174, cbSceneParam._m0[60u].y, _2170 * cbSceneParam._m0[60u].x))) / _2386;
        float _2388 = fma(_2182, cbSceneParam._m0[61u].w, fma(_2178, cbSceneParam._m0[61u].z, fma(_2174, cbSceneParam._m0[61u].y, _2170 * cbSceneParam._m0[61u].x))) / _2386;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2387 >= cbSceneParam._m0[64u].x) && (_2388 >= cbSceneParam._m0[64u].y)) && (_2387 <= cbSceneParam._m0[64u].z)) && (_2388 <= cbSceneParam._m0[64u].w))
        {
            float _2526 = fma(_2182, cbSceneParam._m0[62u].w, fma(_2178, cbSceneParam._m0[62u].z, fma(_2174, cbSceneParam._m0[62u].y, _2170 * cbSceneParam._m0[62u].x))) / _2386;
            float _2530 = isnan(cbSceneParam._m0[41u].w) ? _2526 : (isnan(_2526) ? cbSceneParam._m0[41u].w : max(_2526, cbSceneParam._m0[41u].w));
            float _2573 = (cbSceneParam._m0[33u].x - sqrt(((_2184 * _2184) + (_2183 * _2183)) + (_2185 * _2185))) * cbSceneParam._m0[33u].y;
            float _4661 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
            float _2580 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2387, cbSceneParam._m0[33u].w + _2388), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2387, _2388 - cbSceneParam._m0[33u].z), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].z, _2388 - cbSceneParam._m0[33u].w), _2530), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2387 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2388), _2530), 0.0)).x), vec4(0.25)));
            float _2584 = 1.0 - (_2580 * cbSceneParam._m0[34u].x);
            float _2585 = 1.0 - (_2580 * cbSceneParam._m0[34u].y);
            float _2586 = 1.0 - (_2580 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2586) ? _2334 : (isnan(_2334) ? _2586 : min(_2334, _2586));
            frontier_phi_34_33_ladder_1 = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
            frontier_phi_34_33_ladder_2 = isnan(_2584) ? _2332 : (isnan(_2332) ? _2584 : min(_2332, _2584));
        }
        else
        {
            frontier_phi_34_33_ladder = _2334;
            frontier_phi_34_33_ladder_1 = _2333;
            frontier_phi_34_33_ladder_2 = _2332;
        }
        _2398 = frontier_phi_34_33_ladder_2;
        _2400 = frontier_phi_34_33_ladder_1;
        _2402 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2398 = _2332;
        _2400 = _2333;
        _2402 = _2334;
    }
    uvec4 _2407 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2409 = _2407.x * 14u;
    uint _2410 = _2409 + 13u;
    float _2417 = _1110 + (-1.0);
    float _2422 = (cbLight._m0[_2410].x * _2417) + 1.0;
    float _2423 = (cbLight._m0[_2410].y * _2417) + 1.0;
    float _2424 = (cbLight._m0[_2410].z * _2417) + 1.0;
    float _2425 = (cbLight._m0[_2410].w * _2417) + 1.0;
    uint _2426 = _2409 + 5u;
    float _2432 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2436 = _2409 + 4u;
    float _2445 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
    uint _2449 = _2409 | 1u;
    float _2460 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_945, _946, _947));
    float _2463 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_945, _946, _947));
    float _4697 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _4708 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2468 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * 0.3183098733425140380859375;
    float _2470 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * 0.3183098733425140380859375;
    float _2477 = ((cbLight._m0[_2426].x * _2432) * _2470) + (((cbLight._m0[_2436].x * _2398) * _2445) * _2468);
    float _2478 = ((_2432 * cbLight._m0[_2426].y) * _2470) + (((cbLight._m0[_2436].y * _2400) * _2445) * _2468);
    float _2479 = ((_2432 * cbLight._m0[_2426].z) * _2470) + (((cbLight._m0[_2436].z * _2402) * _2445) * _2468);
    uvec4 _2483 = floatBitsToUint(cbLight._m0[_2409 + 12u]);
    bool _2485 = _2483.x == 0u;
    float _2587;
    float _2589;
    float _2591;
    if (_2485)
    {
        _2587 = _2477;
        _2589 = _2478;
        _2591 = _2479;
    }
    else
    {
        uint _2595 = _2409 + 6u;
        float _2611 = (dot(vec3(cbLight._m0[_2409 + 2u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2612 = _2611 * _2611;
        float _4719 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2613 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2614 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2587 = (((cbLight._m0[_2595].x * 0.3183098733425140380859375) * _2613) * _2614) + _2477;
        _2589 = (((cbLight._m0[_2595].y * 0.3183098733425140380859375) * _2613) * _2614) + _2478;
        _2591 = (((cbLight._m0[_2595].z * 0.3183098733425140380859375) * _2613) * _2614) + _2479;
    }
    bool _2594 = _2483.y == 0u;
    float _2649;
    float _2651;
    float _2653;
    if (_2594)
    {
        _2649 = _2587;
        _2651 = _2589;
        _2653 = _2591;
    }
    else
    {
        uint _2822 = _2409 + 7u;
        float _2838 = (dot(vec3(cbLight._m0[_2409 + 3u].xyz), vec3(_945, _946, _947)) * 0.5) + 0.5;
        float _2839 = _2838 * _2838;
        float _4735 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2840 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2841 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2649 = (((cbLight._m0[_2822].x * 0.3183098733425140380859375) * _2840) * _2841) + _2587;
        _2651 = (((cbLight._m0[_2822].y * 0.3183098733425140380859375) * _2840) * _2841) + _2589;
        _2653 = (((cbLight._m0[_2822].z * 0.3183098733425140380859375) * _2840) * _2841) + _2591;
    }
    uint _2656 = _2409 + 8u;
    float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _948) * 0.949999988079071044921875);
    float _2670 = _2669 * _2669;
    float _2671 = cbLight._m0[_2409].x + _1024;
    float _2672 = cbLight._m0[_2409].y + _1025;
    float _2673 = cbLight._m0[_2409].z + _1026;
    float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
    float _2678 = _2677 * _2671;
    float _2679 = _2677 * _2672;
    float _2680 = _2677 * _2673;
    float _2681 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2409].xyz));
    float _4751 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2684 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _4762 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _2685 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2686 = dot(vec3(_945, _946, _947), vec3(_2678, _2679, _2680));
    float _4773 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
    float _2690 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2678, _2679, _2680));
    float _4784 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2694 = _2670 * _2670;
    float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
    float _2706 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
    float _2707 = 0.959999978542327880859375 - _1091;
    float _2709 = 0.959999978542327880859375 - _1092;
    float _2710 = 0.959999978542327880859375 - _1093;
    float _2717 = 1.0 - _2670;
    float _2728 = (0.5 / (((_2685 * ((_2684 * _2717) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2717) + _2670) * _2684))) * _2684;
    float _4795 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2730 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
    uint _2744 = _2409 + 9u;
    float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2449].w)) * _948) * 0.949999988079071044921875);
    float _2756 = _2755 * _2755;
    float _2757 = cbLight._m0[_2449].x + _1024;
    float _2758 = cbLight._m0[_2449].y + _1025;
    float _2759 = cbLight._m0[_2449].z + _1026;
    float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
    float _2764 = _2763 * _2757;
    float _2765 = _2763 * _2758;
    float _2766 = _2763 * _2759;
    float _2767 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2449].xyz));
    float _4806 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2770 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2771 = dot(vec3(_945, _946, _947), vec3(_2764, _2765, _2766));
    float _4817 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2774 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
    float _2775 = dot(vec3(cbLight._m0[_2449].xyz), vec3(_2764, _2765, _2766));
    float _4828 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2779 = _2756 * _2756;
    float _2783 = ((_2774 * _2774) * (_2779 + (-1.0))) + 1.0;
    float _2790 = exp2(log2(1.0 - (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0)))) * 5.0);
    float _2797 = 1.0 - _2756;
    float _2807 = (0.5 / (((_2685 * ((_2770 * _2797) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2797) + _2756) * _2770))) * _2770;
    float _4839 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2809 = (isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2779 / ((_2783 * _2783) * 3.141590118408203125));
    float _2819 = (((((_2790 * _2707) + _1094) * cbLight._m0[_2744].x) * _2809) * _2432) + ((((cbLight._m0[_2656].x * _2398) * ((_2706 * _2707) + _1094)) * _2730) * _2445);
    float _2820 = (((((_2790 * _2709) + _1096) * cbLight._m0[_2744].y) * _2809) * _2432) + ((((cbLight._m0[_2656].y * _2400) * ((_2706 * _2709) + _1096)) * _2730) * _2445);
    float _2821 = (((((_2790 * _2710) + _1097) * cbLight._m0[_2744].z) * _2809) * _2432) + ((((cbLight._m0[_2656].z * _2402) * ((_2706 * _2710) + _1097)) * _2730) * _2445);
    float _2877;
    float _2879;
    float _2881;
    if (_2485)
    {
        _2877 = _2819;
        _2879 = _2820;
        _2881 = _2821;
    }
    else
    {
        uint _2883 = _2409 + 2u;
        uint _2887 = _2409 + 10u;
        float _2901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _948) * 0.949999988079071044921875);
        float _2902 = _2901 * _2901;
        float _2903 = cbLight._m0[_2883].x + _1024;
        float _2904 = cbLight._m0[_2883].y + _1025;
        float _2905 = cbLight._m0[_2883].z + _1026;
        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
        float _2910 = _2909 * _2903;
        float _2911 = _2909 * _2904;
        float _2912 = _2909 * _2905;
        float _2913 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2883].xyz));
        float _4850 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2917 = dot(vec3(_945, _946, _947), vec3(_2910, _2911, _2912));
        float _4861 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2921 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_2910, _2911, _2912));
        float _4872 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2925 = _2902 * _2902;
        float _2929 = ((_2920 * _2920) * (_2925 + (-1.0))) + 1.0;
        float _2936 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
        float _2943 = 1.0 - _2902;
        float _2953 = (0.5 / (((_2685 * ((_2916 * _2943) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2943) + _2902) * _2916))) * _2916;
        float _4883 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2955 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2925 / ((_2929 * _2929) * 3.141590118408203125));
        float _2956 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2877 = (((((_2936 * _2707) + _1094) * cbLight._m0[_2887].x) * _2955) * _2956) + _2819;
        _2879 = (((((_2936 * _2709) + _1096) * cbLight._m0[_2887].y) * _2955) * _2956) + _2820;
        _2881 = (((((_2936 * _2710) + _1097) * cbLight._m0[_2887].z) * _2955) * _2956) + _2821;
    }
    float _2987;
    float _2989;
    float _2991;
    if (_2594)
    {
        _2987 = _2877;
        _2989 = _2879;
        _2991 = _2881;
    }
    else
    {
        uint _2998 = _2409 + 3u;
        uint _3002 = _2409 + 11u;
        float _3016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2998].w)) * _948) * 0.949999988079071044921875);
        float _3017 = _3016 * _3016;
        float _3018 = cbLight._m0[_2998].x + _1024;
        float _3019 = cbLight._m0[_2998].y + _1025;
        float _3020 = cbLight._m0[_2998].z + _1026;
        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
        float _3025 = _3024 * _3018;
        float _3026 = _3024 * _3019;
        float _3027 = _3024 * _3020;
        float _3028 = dot(vec3(_945, _946, _947), vec3(cbLight._m0[_2998].xyz));
        float _4899 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3031 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _3032 = dot(vec3(_945, _946, _947), vec3(_3025, _3026, _3027));
        float _4910 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3035 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
        float _3036 = dot(vec3(cbLight._m0[_2998].xyz), vec3(_3025, _3026, _3027));
        float _4921 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3040 = _3017 * _3017;
        float _3044 = ((_3035 * _3035) * (_3040 + (-1.0))) + 1.0;
        float _3051 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
        float _3058 = 1.0 - _3017;
        float _3068 = (0.5 / (((_2685 * ((_3031 * _3058) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _3058) + _3017) * _3031))) * _3031;
        float _4932 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3070 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_3040 / ((_3044 * _3044) * 3.141590118408203125));
        float _3071 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2987 = (((((_3051 * _2707) + _1094) * cbLight._m0[_3002].x) * _3070) * _3071) + _2877;
        _2989 = (((((_3051 * _2709) + _1096) * cbLight._m0[_3002].y) * _3070) * _3071) + _2879;
        _2991 = (((((_3051 * _2710) + _1097) * cbLight._m0[_3002].z) * _3070) * _3071) + _2881;
    }
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    float _3145;
    float _3147;
    if (_2407.y == 0u)
    {
        uvec4 _3092 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3093 = _3092.x;
        uint _3104 = uint((float(_3092.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1033) / _3093))) + floor(float(uint(cbSceneParam._m0[85u].x * _1032) / _3093)));
        float _3114 = (log2(_2185 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3115 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
        uint _3118 = uint(isnan(14.0) ? _3115 : (isnan(_3115) ? 14.0 : min(_3115, 14.0)));
        uvec4 _3123 = texelFetch(g_lightClusterGridBuffer, int(((_3118 << 2u) + (_3104 << 6u)) >> 2u));
        uint _3124 = _3123.x;
        uint _3125 = _3092.z;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        if (((((1u << ((_3125 >> 4u) & 15u)) + 4294967295u) & _3124) == 0u) || ((_3125 & 240u) == 0u))
        {
            _3204 = 0.0;
            _3206 = 0.0;
            _3208 = 0.0;
            _3210 = 0.0;
            _3212 = 0.0;
            _3214 = 0.0;
        }
        else
        {
            float _3205;
            float _3207;
            float _3209;
            float _3211;
            float _3213;
            float _3215;
            float _3348 = 0.0;
            float _3349 = 0.0;
            float _3350 = 0.0;
            float _3351 = 0.0;
            float _3352 = 0.0;
            float _3353 = 0.0;
            uint _3354 = 0u;
            uint _3363;
            bool _3364;
            for (;;)
            {
                _3363 = texelFetch(g_lightClassification, int((((_3118 << 5u) + (_3104 << 9u)) + (_3354 << 2u)) >> 2u)).x;
                _3364 = _3363 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3364)
                {
                    frontier_phi_66_pred = _3353;
                    frontier_phi_66_pred_1 = _3352;
                    frontier_phi_66_pred_2 = _3351;
                    frontier_phi_66_pred_3 = _3350;
                    frontier_phi_66_pred_4 = _3349;
                    frontier_phi_66_pred_5 = _3348;
                }
                else
                {
                    float _3472;
                    float _3473;
                    float _3474;
                    float _3475;
                    float _3476;
                    float _3477;
                    uint _3478;
                    _3472 = _3348;
                    _3473 = _3349;
                    _3474 = _3350;
                    _3475 = _3351;
                    _3476 = _3352;
                    _3477 = _3353;
                    _3478 = _3363;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    for (;;)
                    {
                        uint _3482 = uint(findLSB(_3478)) + (_3354 << 5u);
                        uint _3479 = (_3478 + 4294967295u) & _3478;
                        uint _3484 = _3482 * 48u;
                        vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 3u)).x));
                        uint _3504 = (_3482 * 48u) + 4u;
                        vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3504)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 3u)).x));
                        uint _3523 = (_3482 * 48u) + 8u;
                        vec3 _3534 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3523)).x, texelFetch(g_PointLightRenderingBuffer, int(_3523 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3523 + 2u)).x));
                        float _3538 = _3498.x - _2183;
                        float _3539 = _3498.y - _2184;
                        float _3540 = _3498.z - _2185;
                        float _3541 = dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540));
                        float _3544 = inversesqrt(_3541);
                        float _3545 = _3544 * _3538;
                        float _3546 = _3544 * _3539;
                        float _3547 = _3544 * _3540;
                        float _3548 = dot(vec3(_1051, _1054, _1057), vec3(_3545, _3546, _3547));
                        float _3553 = 1.0 - (_3541 * _3498.w);
                        float _4958 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3554 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                        float _3555 = sqrt(_3541) * _3517.w;
                        float _3558 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                        float _3559 = _3558 * _3558;
                        float _3562 = ((1.0 - _3559) * _3548) + _3559;
                        float _3565 = _3555 * _3555;
                        float _3569 = ((isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0))) * _3554) / ((_3565 * 0.699999988079071044921875) + 1.0);
                        float _3573 = (-0.0) - _2183;
                        float _3574 = (-0.0) - _2184;
                        float _3575 = (-0.0) - _2185;
                        float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                        float _3580 = _3579 * _3573;
                        float _3581 = _3579 * _3574;
                        float _3582 = _3579 * _3575;
                        float _3589 = exp2(log2(1.0 / ((_3565 * 3.5) + 5.0)) * 0.25);
                        float _3590 = 1.0 - _1126;
                        float _3597 = sqrt(1.0 - ((1.0 - (_3590 * _3590)) * (1.0 - (_3589 * _3589))));
                        float _3598 = _3597 * _3597;
                        float _3599 = _3598 * _3598;
                        float _3600 = _3580 + _3545;
                        float _3601 = _3581 + _3546;
                        float _3602 = _3582 + _3547;
                        float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                        float _3610 = dot(vec3(_1051, _1054, _1057), vec3(_3580, _3581, _3582));
                        float _4974 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3613 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3614 = dot(vec3(_1051, _1054, _1057), vec3(_3606 * _3600, _3606 * _3601, _3606 * _3602));
                        float _4985 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                        float _3617 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3621 = ((_3617 * _3617) * (_3599 + (-1.0))) + 1.0;
                        float _3622 = _3558 * _3598;
                        float _3623 = _3622 * _3622;
                        float _3626 = ((1.0 - _3623) * _3548) + _3623;
                        float _4996 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                        float _3627 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                        float _3628 = 1.0 - _3598;
                        float _3638 = (0.5 / (((_3627 * ((_3613 * _3628) + _3598)) + 9.9999999392252902907785028219223e-09) + (((_3627 * _3628) + _3598) * _3613))) * _3627;
                        float _5007 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                        float _3649 = (((_3599 * 3.1415927410125732421875) * (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) / ((_3621 * _3621) * ((_3565 * 2.1991131305694580078125) + 3.141590118408203125))) * _3554;
                        _3407 = (_3569 * _3517.x) + _3475;
                        _3408 = (_3569 * _3517.y) + _3476;
                        _3409 = (_3569 * _3517.z) + _3477;
                        _3404 = (_3649 * _3534.x) + _3472;
                        _3405 = (_3649 * _3534.y) + _3473;
                        _3406 = (_3649 * _3534.z) + _3474;
                        if (_3479 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3472 = _3404;
                            _3473 = _3405;
                            _3474 = _3406;
                            _3475 = _3407;
                            _3476 = _3408;
                            _3477 = _3409;
                            _3478 = _3479;
                        }
                    }
                    frontier_phi_66_pred = _3409;
                    frontier_phi_66_pred_1 = _3408;
                    frontier_phi_66_pred_2 = _3407;
                    frontier_phi_66_pred_3 = _3406;
                    frontier_phi_66_pred_4 = _3405;
                    frontier_phi_66_pred_5 = _3404;
                }
                _3215 = frontier_phi_66_pred;
                _3213 = frontier_phi_66_pred_1;
                _3211 = frontier_phi_66_pred_2;
                _3209 = frontier_phi_66_pred_3;
                _3207 = frontier_phi_66_pred_4;
                _3205 = frontier_phi_66_pred_5;
                uint _3355 = _3354 + 1u;
                if (_3355 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3348 = _3205;
                    _3349 = _3207;
                    _3350 = _3209;
                    _3351 = _3211;
                    _3352 = _3213;
                    _3353 = _3215;
                    _3354 = _3355;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3204 = _3205;
            _3206 = _3207;
            _3208 = _3209;
            _3210 = _3211;
            _3212 = _3213;
            _3214 = _3215;
        }
        uvec4 _3218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3219 = _3218.z;
        uint _3221 = (_3219 >> 8u) & 15u;
        float _3316;
        float _3318;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        if (((4294967295u << _3221) & _3124) == 0u)
        {
            _3316 = _3204;
            _3318 = _3206;
            _3320 = _3208;
            _3322 = _3210;
            _3324 = _3212;
            _3326 = _3214;
        }
        else
        {
            float _3341 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
            float _3342 = _3341 * _2183;
            float _3343 = _3341 * _2184;
            float _3344 = _3341 * _2185;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3221 < ((_3219 >> 12u) & 15u))
            {
                float _3317;
                float _3319;
                float _3321;
                float _3323;
                float _3325;
                float _3327;
                float _3455 = _3204;
                float _3456 = _3206;
                float _3457 = _3208;
                float _3458 = _3210;
                float _3459 = _3212;
                float _3460 = _3214;
                uint _3461 = _3221;
                uint _3470;
                bool _3471;
                for (;;)
                {
                    _3470 = texelFetch(g_lightClassification, int((((_3118 << 5u) + (_3104 << 9u)) + (_3461 << 2u)) >> 2u)).x;
                    _3471 = _3470 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3471)
                    {
                        frontier_phi_72_pred = _3460;
                        frontier_phi_72_pred_1 = _3459;
                        frontier_phi_72_pred_2 = _3458;
                        frontier_phi_72_pred_3 = _3457;
                        frontier_phi_72_pred_4 = _3456;
                        frontier_phi_72_pred_5 = _3455;
                    }
                    else
                    {
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3667 = _3455;
                        float _3668 = _3456;
                        float _3669 = _3457;
                        float _3670 = _3458;
                        float _3671 = _3459;
                        float _3672 = _3460;
                        uint _3673 = _3470;
                        uint _3674;
                        vec4 _3699;
                        float _3700;
                        vec4 _3715;
                        vec3 _3727;
                        vec4 _3742;
                        vec4 _3757;
                        float _3803;
                        bool _3804;
                        for (;;)
                        {
                            uint _3684 = ((_3461 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3673));
                            _3674 = (_3673 + 4294967295u) & _3673;
                            uint _3686 = _3684 * 40u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            _3700 = _3699.w;
                            uint _3702 = (_3684 * 40u) + 4u;
                            _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3717 = (_3684 * 40u) + 8u;
                            _3727 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3717)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3717 + 2u)).x));
                            uint _3729 = (_3684 * 40u) + 16u;
                            _3742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3729 + 3u)).x));
                            uint _3744 = (_3684 * 40u) + 20u;
                            _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            uint _3759 = (_3684 * 40u) + 24u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3778 = (_3684 * 40u) + 28u;
                            vec4 _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            _3803 = fma(_2185, _3791.z, fma(_2184, _3791.y, _3791.x * _2183)) + _3791.w;
                            _3804 = !((fma(_2185, _3772.z, fma(_2184, _3772.y, _3772.x * _2183)) + _3772.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3804)
                            {
                                float _3831 = _3699.x - _2183;
                                float _3832 = _3699.y - _2184;
                                float _3833 = _3699.z - _2185;
                                float _3834 = dot(vec3(_3831, _3832, _3833), vec3(_3831, _3832, _3833));
                                float _3837 = inversesqrt(_3834);
                                float _3838 = _3837 * _3831;
                                float _3839 = _3837 * _3832;
                                float _3840 = _3837 * _3833;
                                float _3844 = 1.0 - (_3834 / (_3700 * _3700));
                                float _5018 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3849 = sqrt(_3834) * _3715.w;
                                float _3851 = 1.39999997615814208984375 / (_3849 + 1.39999997615814208984375);
                                float _3852 = _3851 * _3851;
                                float _3855 = ((1.0 - _3852) * dot(vec3(_3838, _3839, _3840), vec3(_1051, _1054, _1057))) + _3852;
                                float _3858 = _3849 * _3849;
                                float _3862 = (fma(_2185, _3742.z, fma(_2184, _3742.y, _3742.x * _2183)) + _3742.w) / _3803;
                                float _3863 = (fma(_2185, _3757.z, fma(_2184, _3757.y, _3757.x * _2183)) + _3757.w) / _3803;
                                float _3867 = 1.0 - dot(vec2(_3862, _3863), vec2(_3862, _3863));
                                float _5034 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3869 = _3868 * (((isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0))) * _3845) / ((_3858 * 0.699999988079071044921875) + 1.0));
                                float _3881 = exp2(log2(1.0 / ((_3858 * 3.5) + 5.0)) * 0.25);
                                float _3882 = 1.0 - _1126;
                                float _3889 = sqrt(1.0 - ((1.0 - (_3882 * _3882)) * (1.0 - (_3881 * _3881))));
                                float _3890 = _3889 * _3889;
                                float _3891 = _3890 * _3890;
                                float _3892 = _3838 - _3342;
                                float _3893 = _3839 - _3343;
                                float _3894 = _3840 - _3344;
                                float _3898 = inversesqrt(dot(vec3(_3892, _3893, _3894), vec3(_3892, _3893, _3894)));
                                float _3902 = dot(vec3(_1051, _1054, _1057), vec3((-0.0) - _3342, (-0.0) - _3343, (-0.0) - _3344));
                                float _5045 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3905 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3906 = dot(vec3(_1051, _1054, _1057), vec3(_3898 * _3892, _3898 * _3893, _3898 * _3894));
                                float _5056 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3909 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                                float _3913 = ((_3909 * _3909) * (_3891 + (-1.0))) + 1.0;
                                float _3914 = _3851 * _3890;
                                float _3915 = _3914 * _3914;
                                float _3921 = ((1.0 - _3915) * dot(vec3(_1051, _1054, _1057), vec3(_3838, _3839, _3840))) + _3915;
                                float _5067 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                                float _3923 = 1.0 - _3890;
                                float _3933 = (0.5 / (((_3922 * ((_3905 * _3923) + _3890)) + 9.9999999392252902907785028219223e-09) + (((_3922 * _3923) + _3890) * _3905))) * _3922;
                                float _5078 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3943 = (_3868 * _3845) * (((_3891 * 3.1415927410125732421875) * (isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0)))) / ((_3913 * _3913) * ((_3858 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3869 * _3715.y;
                                frontier_phi_78_pred_1 = _3869 * _3715.x;
                                frontier_phi_78_pred_2 = _3943 * _3727.z;
                                frontier_phi_78_pred_3 = _3943 * _3727.y;
                                frontier_phi_78_pred_4 = _3943 * _3727.x;
                                frontier_phi_78_pred_5 = _3869 * _3715.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3951 = frontier_phi_78_pred;
                            _3950 = frontier_phi_78_pred_1;
                            _3949 = frontier_phi_78_pred_2;
                            _3948 = frontier_phi_78_pred_3;
                            _3947 = frontier_phi_78_pred_4;
                            _3952 = frontier_phi_78_pred_5;
                            _3657 = _3950 + _3670;
                            _3658 = _3951 + _3671;
                            _3659 = _3952 + _3672;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            _3656 = _3949 + _3669;
                            if (_3674 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3659;
                                _3673 = _3674;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3659;
                        frontier_phi_72_pred_1 = _3658;
                        frontier_phi_72_pred_2 = _3657;
                        frontier_phi_72_pred_3 = _3656;
                        frontier_phi_72_pred_4 = _3655;
                        frontier_phi_72_pred_5 = _3654;
                    }
                    _3327 = frontier_phi_72_pred;
                    _3325 = frontier_phi_72_pred_1;
                    _3323 = frontier_phi_72_pred_2;
                    _3321 = frontier_phi_72_pred_3;
                    _3319 = frontier_phi_72_pred_4;
                    _3317 = frontier_phi_72_pred_5;
                    uint _3462 = _3461 + 1u;
                    if (_3462 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3455 = _3317;
                        _3456 = _3319;
                        _3457 = _3321;
                        _3458 = _3323;
                        _3459 = _3325;
                        _3460 = _3327;
                        _3461 = _3462;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3327;
                frontier_phi_60_61_ladder_1 = _3325;
                frontier_phi_60_61_ladder_2 = _3321;
                frontier_phi_60_61_ladder_3 = _3319;
                frontier_phi_60_61_ladder_4 = _3317;
                frontier_phi_60_61_ladder_5 = _3323;
            }
            else
            {
                frontier_phi_60_61_ladder = _3214;
                frontier_phi_60_61_ladder_1 = _3212;
                frontier_phi_60_61_ladder_2 = _3208;
                frontier_phi_60_61_ladder_3 = _3206;
                frontier_phi_60_61_ladder_4 = _3204;
                frontier_phi_60_61_ladder_5 = _3210;
            }
            _3316 = frontier_phi_60_61_ladder_4;
            _3318 = frontier_phi_60_61_ladder_3;
            _3320 = frontier_phi_60_61_ladder_2;
            _3322 = frontier_phi_60_61_ladder_5;
            _3324 = frontier_phi_60_61_ladder_1;
            _3326 = frontier_phi_60_61_ladder;
        }
        float _3331 = isnan(1.0) ? _1110 : (isnan(_1110) ? 1.0 : min(_1110, 1.0));
        _3137 = (_3331 * _3322) + _2649;
        _3139 = (_3331 * _3324) + _2651;
        _3141 = (_3331 * _3326) + _2653;
        _3143 = ((_3316 * _1094) * _3331) + _2987;
        _3145 = ((_3318 * _1096) * _3331) + _2989;
        _3147 = ((_3320 * _1097) * _3331) + _2991;
    }
    else
    {
        _3137 = _2649;
        _3139 = _2651;
        _3141 = _2653;
        _3143 = _2987;
        _3145 = _2989;
        _3147 = _2991;
    }
    float _5094 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _5105 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _5116 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    uint _3167 = _263 + 6u;
    float _3175 = _1032 / cbSceneParam._m0[86u].x;
    float _3176 = _1033 / cbSceneParam._m0[86u].y;
    vec4 _3190 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3175, _3176, (log2((isnan(cbSceneParam._m0[77u].w) ? _967 : (isnan(_967) ? cbSceneParam._m0[77u].w : min(_967, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3192 = _3190.x;
    float _3193 = _3190.y;
    float _3194 = _3190.z;
    float _3195 = _3190.w;
    float _3266;
    float _3268;
    float _3270;
    float _3272;
    if (_967 > cbSceneParam._m0[78u].w)
    {
        float _3229 = isnan(_967) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _967 : min(cbSceneParam._m0[80u].w, _967));
        float _3230 = _3229 / _967;
        float _3241 = _3230 * _1017;
        float _3242 = _1018 * _3230;
        float _3243 = (-0.0) - _3242;
        float _3244 = _3230 * _1019;
        float _3246 = (cbSceneParam._m0[77u].w * _3243) / _3229;
        float _3247 = _3246 + cbSceneParam._m0[79u].w;
        float _3248 = cbSceneParam._m0[79u].w - _3242;
        float _3254 = sqrt(((_3241 * _3241) + (_3242 * _3242)) + (_3244 * _3244));
        float _3257 = (1.0 - (cbSceneParam._m0[77u].w / _3229)) * _3254;
        float _3262 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3264 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3417;
        if (abs((_3243 - _3246) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3417 = ((((_3247 > 0.0) ? exp2(_3262 * _3247) : (2.0 - exp2(_3264 * _3247))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3257;
        }
        else
        {
            float _3377 = 1.0 / cbSceneParam._m0[80u].x;
            float _3378 = isnan(_3248) ? _3247 : (isnan(_3247) ? _3248 : max(_3247, _3248));
            float _3379 = isnan(_3248) ? _3247 : (isnan(_3247) ? _3248 : min(_3247, _3248));
            float _3388 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : min(_3378, 0.0));
            float _3389 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : min(_3379, 0.0));
            _3417 = ((abs(_3254 / _3243) * cbSceneParam._m0[80u].y) * ((((_3388 - _3389) * 2.0) - ((exp2(_3262 * (isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0)))) - exp2(_3262 * (isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))))) * _3377)) - ((exp2(_3264 * _3388) - exp2(_3264 * _3389)) * _3377))) + (_3257 * cbSceneParam._m0[80u].z);
        }
        vec4 _3419 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3175, _3176, 1.0), 0.0);
        float _3428 = exp2((_3417 * (-1.44269502162933349609375)) * (1.0 - _3419.w));
        float _3429 = log2(_3428);
        float _3445 = log2(_3195);
        _3266 = (exp2(_3445 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3429 * cbSceneParam._m0[78u].x)) * _3419.x) / cbSceneParam._m0[78u].x)) + _3192;
        _3268 = (exp2(_3445 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3429 * cbSceneParam._m0[78u].y)) * _3419.y) / cbSceneParam._m0[78u].y)) + _3193;
        _3270 = (exp2(_3445 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3429 * cbSceneParam._m0[78u].z)) * _3419.z) / cbSceneParam._m0[78u].z)) + _3194;
        _3272 = _3428 * _3195;
    }
    else
    {
        _3266 = _3192;
        _3268 = _3193;
        _3270 = _3194;
        _3272 = _3195;
    }
    float _3284 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3285 = _3284 == 3.0;
    float _3286 = log2(_3272);
    float _3293 = exp2(_3286 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3137 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1110))) + ((_3143 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3294 = exp2(_3286 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_3139 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1110))) + ((_3145 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3295 = exp2(_3286 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0))) * (_3141 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1110))) + ((_3147 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3304 = (_3284 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3304 * (_3285 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3266)));
    SV_Target.y = _3304 * (_3285 ? _3294 : (_3294 + (cbSceneParam._m0[72u].w * _3268)));
    SV_Target.z = _3304 * (_3285 ? _3295 : (_3295 + (cbSceneParam._m0[72u].w * _3270)));
    SV_Target.w = cbInstanceData._m0[_3167].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3167].w;
}


