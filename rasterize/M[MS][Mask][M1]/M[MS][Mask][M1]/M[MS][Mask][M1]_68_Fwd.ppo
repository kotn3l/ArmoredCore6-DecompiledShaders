#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1525;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3851 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3862 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3873 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3884 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _462 = (_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _463 = (_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _464 = (_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3895 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    float _541 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _535;
    float _544 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _536;
    float _547 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _537;
    float _554 = ((_535 - _541) * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) + _541;
    float _555 = ((_536 - _544) * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) + _544;
    float _556 = ((_537 - _547) * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) + _547;
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _613 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _615 = _613.x;
    float _616 = _613.y;
    float _617 = _613.z;
    float _624 = ((_596.x - _615) * _455) + _615;
    float _625 = ((_596.y - _616) * _455) + _616;
    float _626 = ((_596.z - _617) * _455) + _617;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _651 = ((_638.z - _626) * _528) + _626;
    float _654 = ((((_638.x - _624) * _528) + _624) * 2.0) + (-1.0);
    float _655 = ((((_638.y - _625) * _528) + _625) * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3906 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _661 = sqrt(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _700 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _702 = _700.x;
    float _703 = 1.0 - _702;
    float _712 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _715 = ((isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : min(_712, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _724 = (_715 - ((((((_702 - _703) * cbMtdParam._m0[24u].z) + _703) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _715))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3927 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _725 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _732 = (_725 * (cbMtdParam._m0[17u].x - _554)) + _554;
    float _733 = (_725 * (cbMtdParam._m0[17u].y - _555)) + _555;
    float _734 = (_725 * (cbMtdParam._m0[17u].z - _556)) + _556;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _748 = _746.x;
    float _749 = 1.0 - _748;
    float _774 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_748 - _749) * cbMtdParam._m0[24u].w) + _749) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3938 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _775 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _783 = ((((cbMtdParam._m0[10u].x - _732) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _775) + _732;
    float _784 = ((((cbMtdParam._m0[10u].y - _733) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _775) + _733;
    float _785 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _734)) * _775) + _734;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _813 = _811.x;
    float _831 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _813) * _455) + _813;
    float _848 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _831) * _528) + _831;
    float _852 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _848) * cbMtdParam._m0[19u].z) + _848;
    float _854 = _852 - (_852 * _725);
    float _856 = _854 - (_854 * _775);
    float _861 = (((_573.z - _651) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _651;
    float _865 = ((_675.z - _861) * cbMtdParam._m0[19u].w) + _861;
    vec4 _879 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _886 = (_879.x * 2.0) + (-1.0);
    float _887 = (_879.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _3949 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _896 = (_725 * (_879.z - _865)) + _865;
    float _899 = ((cbMtdParam._m0[23u].x - _896) * _775) + _896;
    vec4 _920 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _926 = (_920.x * 2.0) + (-1.0);
    float _927 = (_920.y * 2.0) + (-1.0);
    float _928 = dot(vec2(_926, _927), vec2(_926, _927));
    float _3960 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _942 = (_654 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_573.x * 2.0) + (-1.0)))) + (((_675.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _943 = (_655 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_573.y * 2.0) + (-1.0)))) + (((_675.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _955 = (((_886 - _942) + (cbMtdParam._m0[21u].x * _942)) * _725) + _942;
    float _956 = (((_887 - _943) + (cbMtdParam._m0[21u].x * _943)) * _725) + _943;
    float _957 = (_725 * (sqrt(1.0 - (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) - _661)) + _661;
    float _968 = (((_926 - _955) + (_955 * cbMtdParam._m0[22u].z)) * _775) + _955;
    float _969 = (((_927 - _956) + (_956 * cbMtdParam._m0[22u].z)) * _775) + _956;
    float _970 = ((sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) - _957) * _775) + _957;
    float _972 = cbMtdParam._m0[22u].x + _675.w;
    float _975 = fma(_970, _257 * NORMAL.x, fma(_969, _264 * TANGENT.x, (_250 * _242) * _968));
    float _978 = fma(_970, _257 * NORMAL.y, fma(_969, _264 * TANGENT.y, (_250 * _243) * _968));
    float _981 = fma(_970, _257 * NORMAL.z, fma(_969, _264 * TANGENT.z, (_250 * _244) * _968));
    float _985 = inversesqrt(dot(vec3(_975, _978, _981), vec3(_975, _978, _981)));
    float _986 = _985 * _975;
    float _987 = _985 * _978;
    float _988 = _985 * _981;
    float _3971 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _989 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _3993 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4004 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4015 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4026 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _994 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1008 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1058 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1048);
    float _1059 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1048);
    float _1060 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1048);
    float _1064 = inversesqrt(dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060)));
    float _1065 = _1058 * _1064;
    float _1066 = _1059 * _1064;
    float _1067 = _1060 * _1064;
    float _1073 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1074 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1092 = fma(_988, cbSceneParam._m0[5u].z, fma(_987, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _986));
    float _1095 = fma(_988, cbSceneParam._m0[6u].z, fma(_987, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _986));
    float _1098 = fma(_988, cbSceneParam._m0[7u].z, fma(_987, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _986));
    uint _1112 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1118 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) * cbInstanceData._m0[_1112].x;
    float _1119 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * cbInstanceData._m0[_1112].y;
    float _1120 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1112].z;
    float _4037 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
    float _1121 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1122 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1123 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1124 = 1.0 - _994;
    float _1125 = _1121 * _1124;
    float _1126 = _1122 * _1124;
    float _1127 = _1123 * _1124;
    float _1132 = (_1121 + (-0.039999999105930328369140625)) * _994;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _994;
    float _1134 = (_1123 + (-0.039999999105930328369140625)) * _994;
    float _1135 = _1132 + 0.039999999105930328369140625;
    float _1137 = _1133 + 0.039999999105930328369140625;
    float _1138 = _1134 + 0.039999999105930328369140625;
    vec4 _1147 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1073, cbSceneParam._m0[86u].y * _1074));
    float _1151 = ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * TEXCOORD_5.w) * _1147.x;
    float _1152 = dot(vec3(_986, _987, _988), vec3(_1065, _1066, _1067));
    float _1155 = _1152 * 2.0;
    float _1159 = (_1155 * _986) - _1065;
    float _1160 = (_1155 * _987) - _1066;
    float _1161 = (_1155 * _988) - _1067;
    float _1165 = abs(dot(vec3(_1065, _1066, _1067), vec3(_986, _987, _988)));
    float _4070 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1167 = sqrt(_989);
    float _1180 = exp2((_1167 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1167 * 3.0));
    float _1186 = (1.0 - _1180) * ((_1167 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1187 = _1180 * _1167;
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1524;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1249 = fma(_1223, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215));
        float _1253 = fma(_1223, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215));
        float _1257 = fma(_1223, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215));
        float _1282 = _1215 + _986;
        float _1283 = _1219 + _987;
        float _1284 = _1223 + _988;
        float _1294 = fma(_1284, cbModelParam._m0[26u].z, fma(_1283, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1282)) - _1249;
        float _1295 = fma(_1284, cbModelParam._m0[27u].z, fma(_1283, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1282)) - _1253;
        float _1296 = fma(_1284, cbModelParam._m0[28u].z, fma(_1283, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1282)) - _1257;
        float _1300 = inversesqrt(dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296)));
        float _1313 = ((_1300 * _1294) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1249 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1300 * _1295) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1253 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1300 * _1296) / cbModelParam._m0[34u].z) + ((((((_1257 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        float _1352 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1318.x + (-0.5));
        float _1354 = _1352 * (_1318.y + (-0.5));
        float _1355 = _1352 * (_1318.z + (-0.5));
        float _1362 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1325.x + (-0.5));
        float _1364 = _1362 * (_1325.y + (-0.5));
        float _1365 = _1362 * (_1325.z + (-0.5));
        float _1372 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1332.x + (-0.5));
        float _1374 = _1372 * (_1332.y + (-0.5));
        float _1375 = _1372 * (_1332.z + (-0.5));
        float _1382 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1339.x + (-0.5));
        float _1384 = _1382 * (_1339.y + (-0.5));
        float _1385 = _1382 * (_1339.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1406 = (dot(vec3(_986, _987, _988), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1416 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _4118 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1418 + 1.0))) + _1423) * _1386;
        float _1433 = _1354 * 0.5;
        float _1434 = _1364 * 0.5;
        float _1435 = _1374 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_986, _987, _988), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _4151 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1460 + 1.0))) + _1465) * _1387;
        float _1475 = _1355 * 0.5;
        float _1476 = _1365 * 0.5;
        float _1477 = _1375 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_986, _987, _988), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4184 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1502 + 1.0))) + _1507) * _1388;
        _1524 = _1355;
        _1526 = _1354;
        _1527 = _1353;
        _1528 = _1365;
        _1529 = _1364;
        _1530 = _1363;
        _1531 = _1375;
        _1532 = _1374;
        _1533 = _1373;
        _1534 = _1388;
        _1535 = _1387;
        _1536 = _1386;
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
    }
    else
    {
        _1524 = _1525;
        _1526 = _1525;
        _1527 = _1525;
        _1528 = _1525;
        _1529 = _1525;
        _1530 = _1525;
        _1531 = _1525;
        _1532 = _1525;
        _1533 = _1525;
        _1534 = _1525;
        _1535 = _1525;
        _1536 = _1525;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1563 = fma(_1223, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215));
        float _1567 = fma(_1223, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215));
        float _1571 = fma(_1223, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215));
        float _1594 = _1215 + _986;
        float _1595 = _1219 + _987;
        float _1596 = _1223 + _988;
        float _1606 = fma(_1596, cbModelParam._m0[30u].z, fma(_1595, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1594)) - _1563;
        float _1607 = fma(_1596, cbModelParam._m0[31u].z, fma(_1595, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1594)) - _1567;
        float _1608 = fma(_1596, cbModelParam._m0[32u].z, fma(_1595, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1594)) - _1571;
        float _1612 = inversesqrt(dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608)));
        float _1625 = ((_1612 * _1606) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1563 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1626 = ((_1612 * _1607) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1567 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1627 = ((_1612 * _1608) / cbModelParam._m0[35u].z) + ((((((_1571 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1643 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1625, _1626, _1627), 0.0);
        float _1662 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1629.x + (-0.5));
        float _1664 = _1662 * (_1629.y + (-0.5));
        float _1665 = _1662 * (_1629.z + (-0.5));
        float _1672 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1636.x + (-0.5));
        float _1674 = _1672 * (_1636.y + (-0.5));
        float _1675 = _1672 * (_1636.z + (-0.5));
        float _1682 = exp2((_1643.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1643.x + (-0.5));
        float _1684 = _1682 * (_1643.y + (-0.5));
        float _1685 = _1682 * (_1643.z + (-0.5));
        float _1692 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1650.x + (-0.5));
        float _1694 = _1692 * (_1650.y + (-0.5));
        float _1695 = _1692 * (_1650.z + (-0.5));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1698 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1699 = _1663 * 0.5;
        float _1700 = _1673 * 0.5;
        float _1701 = _1683 * 0.5;
        float _1702 = dot(vec3(_1699, _1700, _1701), vec3(_1699, _1700, _1701));
        float _1707 = (_1702 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1702);
        float _1715 = (dot(vec3(_986, _987, _988), vec3(_1707 * _1699, _1707 * _1700, _1707 * _1701)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1724 = sqrt(((_1700 * _1700) + (_1699 * _1699)) + (_1701 * _1701)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1726 = _1725 * 2.0;
        float _1730 = (1.0 - _1725) / (_1725 + 1.0);
        float _4247 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1740 = ((((1.0 - _1731) * (_1726 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1726 + 1.0))) + _1731) * _1696;
        float _1741 = _1664 * 0.5;
        float _1742 = _1674 * 0.5;
        float _1743 = _1684 * 0.5;
        float _1744 = dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743));
        float _1749 = (_1744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1744);
        float _1757 = (dot(vec3(_986, _987, _988), vec3(_1749 * _1741, _1749 * _1742, _1749 * _1743)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1766 = sqrt(((_1742 * _1742) + (_1741 * _1741)) + (_1743 * _1743)) / (_1697 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1768 = _1767 * 2.0;
        float _1772 = (1.0 - _1767) / (_1767 + 1.0);
        float _4280 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1782 = ((((1.0 - _1773) * (_1768 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1768 + 1.0))) + _1773) * _1697;
        float _1783 = _1665 * 0.5;
        float _1784 = _1675 * 0.5;
        float _1785 = _1685 * 0.5;
        float _1786 = dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785));
        float _1791 = (_1786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1786);
        float _1799 = (dot(vec3(_986, _987, _988), vec3(_1791 * _1783, _1791 * _1784, _1791 * _1785)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1808 = sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785)) / (_1698 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1810 = _1809 * 2.0;
        float _1814 = (1.0 - _1809) / (_1809 + 1.0);
        float _4313 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1824 = ((((1.0 - _1815) * (_1810 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1810 + 1.0))) + _1815) * _1698;
        _1832 = _1665;
        _1833 = _1664;
        _1834 = _1663;
        _1835 = _1675;
        _1836 = _1674;
        _1837 = _1673;
        _1838 = _1685;
        _1839 = _1684;
        _1840 = _1683;
        _1841 = _1698;
        _1842 = _1697;
        _1843 = _1696;
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)));
        _1845 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)));
        _1846 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)));
    }
    else
    {
        _1832 = _1525;
        _1833 = _1525;
        _1834 = _1525;
        _1835 = _1525;
        _1836 = _1525;
        _1837 = _1525;
        _1838 = _1525;
        _1839 = _1525;
        _1840 = _1525;
        _1841 = _1525;
        _1842 = _1525;
        _1843 = _1525;
        _1844 = 0.0;
        _1845 = 0.0;
        _1846 = 0.0;
    }
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1537)) + _1537;
    float _1857 = (cbModelParam._m0[1u].x * (_1845 - _1538)) + _1538;
    float _1858 = (cbModelParam._m0[1u].x * (_1846 - _1539)) + _1539;
    float _1879 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1857, cbSceneParam._m0[89u].y, _1856 * cbSceneParam._m0[89u].x));
    float _1882 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1857, cbSceneParam._m0[90u].y, _1856 * cbSceneParam._m0[90u].x));
    float _1885 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1857, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1856));
    float _1900 = _1159 * 0.5;
    float _1901 = _1160 * 0.5;
    float _1902 = _1161 * 0.5;
    float _1903 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1834, _1837, _1840, _1843));
    float _1906 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1833, _1836, _1839, _1842));
    float _1909 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1943;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1916 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1524, _1528, _1531, _1534));
        float _1920 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1526, _1529, _1532, _1535));
        float _1924 = dot(vec4(_1900, _1901, _1902, 1.0), vec4(_1527, _1530, _1533, _1536));
        float _1931 = dot(vec4(cbModelParam._m0[39u]), vec4(_1900, _1901, _1902, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1954;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1945 = dot(vec4(cbModelParam._m0[40u]), vec4(_1900, _1901, _1902, 1.0));
        _1954 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1945) ? 0.0 : (isnan(0.0) ? _1945 : max(0.0, _1945))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1954 = 1.0;
    }
    float _1958 = (_1954 * cbModelParam._m0[1u].x) + (_1943 * (1.0 - cbModelParam._m0[1u].x));
    float _1968 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _989);
    float _1969 = isnan(_1968) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1968 : min(cbModelParam._m0[25u].z, _1968));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2017 = fma(_1223, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215)) + cbModelParam._m0[13u].w;
        float _2021 = fma(_1223, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215)) + cbModelParam._m0[14u].w;
        float _2025 = fma(_1223, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215)) + cbModelParam._m0[15u].w;
        float _2028 = fma(_1161, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159));
        float _2031 = fma(_1161, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159));
        float _2034 = fma(_1161, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159));
        float _2062;
        if (_2028 > 0.0)
        {
            _2062 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2062 = frontier_phi_14_12_ladder;
        }
        float _2265;
        if (_2031 > 0.0)
        {
            _2265 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2265 = frontier_phi_23_19_ladder;
        }
        float _2519;
        if (_2034 > 0.0)
        {
            _2519 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2519 = frontier_phi_35_30_ladder;
        }
        float _2521 = isnan(_2265) ? _2062 : (isnan(_2062) ? _2265 : min(_2062, _2265));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _2028) + _2017;
        float _2527 = (_2522 * _2031) + _2021;
        float _2528 = (_2522 * _2034) + _2025;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2529;
        float _2533 = _2529 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 > _2533) || ((_2527 < _2531) || ((_2526 < _2531) || (_2526 > _2533))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2528, cbModelParam._m0[9u].z, fma(_2527, cbModelParam._m0[9u].y, _2526 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2528, cbModelParam._m0[10u].z, fma(_2527, cbModelParam._m0[10u].y, _2526 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2528, cbModelParam._m0[11u].z, fma(_2527, cbModelParam._m0[11u].y, _2526 * cbModelParam._m0[11u].x))), _1969);
            frontier_phi_13_35_ladder = _2656.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2656.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2656.x * cbModelParam._m0[1u].y;
        }
        _2050 = frontier_phi_13_35_ladder_2;
        _2052 = frontier_phi_13_35_ladder_1;
        _2054 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1159, _1160, _1161), _1969);
        _2050 = _2038.x * cbModelParam._m0[1u].y;
        _2052 = _2038.y * cbModelParam._m0[1u].y;
        _2054 = _2038.z * cbModelParam._m0[1u].y;
    }
    float _2058 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _989);
    float _2059 = isnan(_2058) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2058 : min(cbModelParam._m0[25u].w, _2058));
    float _2149;
    float _2151;
    float _2153;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2113 = fma(_1223, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215)) + cbModelParam._m0[21u].w;
        float _2117 = fma(_1223, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215)) + cbModelParam._m0[22u].w;
        float _2121 = fma(_1223, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215)) + cbModelParam._m0[23u].w;
        float _2124 = fma(_1161, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159));
        float _2127 = fma(_1161, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159));
        float _2130 = fma(_1161, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159));
        float _2270;
        if (_2124 > 0.0)
        {
            _2270 = abs((1.0 - _2113) / _2124);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2113 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2270 = frontier_phi_25_21_ladder;
        }
        float _2546;
        if (_2127 > 0.0)
        {
            _2546 = abs((1.0 - _2117) / _2127);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2117 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2546 = frontier_phi_37_32_ladder;
        }
        float _2759;
        if (_2130 > 0.0)
        {
            _2759 = abs((1.0 - _2121) / _2130);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2121 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2759 = frontier_phi_46_43_ladder;
        }
        float _2761 = isnan(_2546) ? _2270 : (isnan(_2270) ? _2546 : min(_2270, _2546));
        float _2762 = isnan(_2759) ? _2761 : (isnan(_2761) ? _2759 : min(_2761, _2759));
        float _2766 = (_2762 * _2124) + _2113;
        float _2767 = (_2762 * _2127) + _2117;
        float _2768 = (_2762 * _2130) + _2121;
        float _2769 = _2762 * 9.9999997473787516355514526367188e-05;
        float _2770 = (-1.0) - _2769;
        float _2772 = _2769 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2768 > _2772) || ((_2768 < _2770) || ((_2767 > _2772) || ((_2767 < _2770) || ((_2766 < _2770) || (_2766 > _2772))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2768, cbModelParam._m0[17u].z, fma(_2767, cbModelParam._m0[17u].y, _2766 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2768, cbModelParam._m0[18u].z, fma(_2767, cbModelParam._m0[18u].y, _2766 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2768, cbModelParam._m0[19u].z, fma(_2767, cbModelParam._m0[19u].y, _2766 * cbModelParam._m0[19u].x))), _2059);
            frontier_phi_22_46_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2149 = frontier_phi_22_46_ladder_2;
        _2151 = frontier_phi_22_46_ladder_1;
        _2153 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2133 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1159, _1160, _1161), _2059);
        _2149 = _2133.x * cbModelParam._m0[1u].z;
        _2151 = _2133.y * cbModelParam._m0[1u].z;
        _2153 = _2133.z * cbModelParam._m0[1u].z;
    }
    float _2166 = (((_1186 * _1135) + _1187) * _1151) * ((cbModelParam._m0[1u].w * (_2149 - _2050)) + _2050);
    float _2168 = (((_1186 * _1137) + _1187) * _1151) * ((cbModelParam._m0[1u].w * (_2151 - _2052)) + _2052);
    float _2170 = (((_1186 * _1138) + _1187) * _1151) * ((cbModelParam._m0[1u].w * (_2153 - _2054)) + _2054);
    float _2173 = fma(_2170, cbSceneParam._m0[89u].z, fma(_2168, cbSceneParam._m0[89u].y, _2166 * cbSceneParam._m0[89u].x));
    float _2176 = fma(_2170, cbSceneParam._m0[90u].z, fma(_2168, cbSceneParam._m0[90u].y, _2166 * cbSceneParam._m0[90u].x));
    float _2179 = fma(_2170, cbSceneParam._m0[91u].z, fma(_2168, cbSceneParam._m0[91u].y, _2166 * cbSceneParam._m0[91u].x));
    uvec4 _2189 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2191 = _2189.x * 14u;
    uint _2192 = _2191 + 13u;
    float _2199 = _1151 + (-1.0);
    float _2204 = (cbLight._m0[_2192].x * _2199) + 1.0;
    float _2205 = (cbLight._m0[_2192].y * _2199) + 1.0;
    float _2206 = (cbLight._m0[_2192].z * _2199) + 1.0;
    float _2207 = (cbLight._m0[_2192].w * _2199) + 1.0;
    uint _2208 = _2191 + 5u;
    float _2214 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2218 = _2191 + 4u;
    float _2224 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
    uint _2228 = _2191 | 1u;
    float _2239 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_986, _987, _988));
    float _2242 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_986, _987, _988));
    float _4449 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _4460 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2247 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * 0.3183098733425140380859375;
    float _2249 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * 0.3183098733425140380859375;
    float _2256 = ((cbLight._m0[_2208].x * _2214) * _2249) + ((cbLight._m0[_2218].x * _2224) * _2247);
    float _2257 = ((_2214 * cbLight._m0[_2208].y) * _2249) + ((_2224 * cbLight._m0[_2218].y) * _2247);
    float _2258 = ((_2214 * cbLight._m0[_2208].z) * _2249) + ((_2224 * cbLight._m0[_2218].z) * _2247);
    uvec4 _2262 = floatBitsToUint(cbLight._m0[_2191 + 12u]);
    bool _2264 = _2262.x == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2264)
    {
        _2275 = _2256;
        _2277 = _2257;
        _2279 = _2258;
    }
    else
    {
        uint _2283 = _2191 + 6u;
        float _2299 = (dot(vec3(cbLight._m0[_2191 + 2u].xyz), vec3(_986, _987, _988)) * 0.5) + 0.5;
        float _2300 = _2299 * _2299;
        float _4471 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2301 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2302 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2275 = (((cbLight._m0[_2283].x * 0.3183098733425140380859375) * _2301) * _2302) + _2256;
        _2277 = (((cbLight._m0[_2283].y * 0.3183098733425140380859375) * _2301) * _2302) + _2257;
        _2279 = (((cbLight._m0[_2283].z * 0.3183098733425140380859375) * _2301) * _2302) + _2258;
    }
    bool _2282 = _2262.y == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2282)
    {
        _2320 = _2275;
        _2322 = _2277;
        _2324 = _2279;
    }
    else
    {
        uint _2490 = _2191 + 7u;
        float _2506 = (dot(vec3(cbLight._m0[_2191 + 3u].xyz), vec3(_986, _987, _988)) * 0.5) + 0.5;
        float _2507 = _2506 * _2506;
        float _4487 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2508 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2509 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2320 = (((cbLight._m0[_2490].x * 0.3183098733425140380859375) * _2508) * _2509) + _2275;
        _2322 = (((cbLight._m0[_2490].y * 0.3183098733425140380859375) * _2508) * _2509) + _2277;
        _2324 = (((cbLight._m0[_2490].z * 0.3183098733425140380859375) * _2508) * _2509) + _2279;
    }
    uint _2327 = _2191 + 8u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _989) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2191].x + _1065;
    float _2343 = cbLight._m0[_2191].y + _1066;
    float _2344 = cbLight._m0[_2191].z + _1067;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2191].xyz));
    float _4503 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _4514 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _2356 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2357 = dot(vec3(_986, _987, _988), vec3(_2349, _2350, _2351));
    float _4525 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2349, _2350, _2351));
    float _4536 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2341 * _2341;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2377 = exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0);
    float _2378 = 0.959999978542327880859375 - _1132;
    float _2380 = 0.959999978542327880859375 - _1133;
    float _2381 = 0.959999978542327880859375 - _1134;
    float _2388 = 1.0 - _2341;
    float _2399 = (0.5 / (((_2356 * ((_2355 * _2388) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2388) + _2341) * _2355))) * _2355;
    float _4547 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    uint _2412 = _2191 + 9u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _989) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2228].x + _1065;
    float _2426 = cbLight._m0[_2228].y + _1066;
    float _2427 = cbLight._m0[_2228].z + _1067;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2228].xyz));
    float _4558 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2439 = dot(vec3(_986, _987, _988), vec3(_2432, _2433, _2434));
    float _4569 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2443 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2432, _2433, _2434));
    float _4580 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2447 = _2424 * _2424;
    float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
    float _2458 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
    float _2465 = 1.0 - _2424;
    float _2475 = (0.5 / (((_2356 * ((_2438 * _2465) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2465) + _2424) * _2438))) * _2438;
    float _4591 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2477 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
    float _2487 = (((((_2458 * _2378) + _1135) * cbLight._m0[_2412].x) * _2477) * _2214) + (((((_2377 * _2378) + _1135) * cbLight._m0[_2327].x) * _2401) * _2224);
    float _2488 = (((((_2458 * _2380) + _1137) * cbLight._m0[_2412].y) * _2477) * _2214) + (((((_2377 * _2380) + _1137) * cbLight._m0[_2327].y) * _2401) * _2224);
    float _2489 = (((((_2458 * _2381) + _1138) * cbLight._m0[_2412].z) * _2477) * _2214) + (((((_2377 * _2381) + _1138) * cbLight._m0[_2327].z) * _2401) * _2224);
    float _2551;
    float _2553;
    float _2555;
    if (_2264)
    {
        _2551 = _2487;
        _2553 = _2488;
        _2555 = _2489;
    }
    else
    {
        uint _2557 = _2191 + 2u;
        uint _2561 = _2191 + 10u;
        float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _989) * 0.949999988079071044921875);
        float _2576 = _2575 * _2575;
        float _2577 = cbLight._m0[_2557].x + _1065;
        float _2578 = cbLight._m0[_2557].y + _1066;
        float _2579 = cbLight._m0[_2557].z + _1067;
        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
        float _2584 = _2583 * _2577;
        float _2585 = _2583 * _2578;
        float _2586 = _2583 * _2579;
        float _2587 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2557].xyz));
        float _4602 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2591 = dot(vec3(_986, _987, _988), vec3(_2584, _2585, _2586));
        float _4613 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2595 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2584, _2585, _2586));
        float _4624 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2599 = _2576 * _2576;
        float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
        float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
        float _2617 = 1.0 - _2576;
        float _2627 = (0.5 / (((_2356 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2617) + _2576) * _2590))) * _2590;
        float _4635 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2629 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
        float _2630 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
        _2551 = (((((_2610 * _2378) + _1135) * cbLight._m0[_2561].x) * _2629) * _2630) + _2487;
        _2553 = (((((_2610 * _2380) + _1137) * cbLight._m0[_2561].y) * _2629) * _2630) + _2488;
        _2555 = (((((_2610 * _2381) + _1138) * cbLight._m0[_2561].z) * _2629) * _2630) + _2489;
    }
    float _2665;
    float _2667;
    float _2669;
    if (_2282)
    {
        _2665 = _2551;
        _2667 = _2553;
        _2669 = _2555;
    }
    else
    {
        uint _2676 = _2191 + 3u;
        uint _2680 = _2191 + 11u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _989) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _1065;
        float _2697 = cbLight._m0[_2676].y + _1066;
        float _2698 = cbLight._m0[_2676].z + _1067;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_986, _987, _988), vec3(cbLight._m0[_2676].xyz));
        float _4651 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2710 = dot(vec3(_986, _987, _988), vec3(_2703, _2704, _2705));
        float _4662 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4673 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0);
        float _2736 = 1.0 - _2695;
        float _2746 = (0.5 / (((_2356 * ((_2709 * _2736) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2736) + _2695) * _2709))) * _2709;
        float _4684 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2665 = (((((_2729 * _2378) + _1135) * cbLight._m0[_2680].x) * _2748) * _2749) + _2551;
        _2667 = (((((_2729 * _2380) + _1137) * cbLight._m0[_2680].y) * _2748) * _2749) + _2553;
        _2669 = (((((_2729 * _2381) + _1138) * cbLight._m0[_2680].z) * _2748) * _2749) + _2555;
    }
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_2189.y == 0u)
    {
        float _2824 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2825 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2824;
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2824;
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2824;
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.x;
        uint _2851 = uint((float(_2839.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1074) / _2840))) + floor(float(uint(cbSceneParam._m0[85u].x * _1073) / _2840)));
        float _2861 = (log2(_2827 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2862 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        uint _2865 = uint(isnan(14.0) ? _2862 : (isnan(_2862) ? 14.0 : min(_2862, 14.0)));
        uvec4 _2870 = texelFetch(g_lightClusterGridBuffer, int(((_2865 << 2u) + (_2851 << 6u)) >> 2u));
        uint _2871 = _2870.x;
        uint _2872 = _2839.z;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((((1u << ((_2872 >> 4u) & 15u)) + 4294967295u) & _2871) == 0u) || ((_2872 & 240u) == 0u))
        {
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
        }
        else
        {
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            uint _3123 = 0u;
            uint _3132;
            bool _3133;
            for (;;)
            {
                _3132 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3123 << 2u)) >> 2u)).x;
                _3133 = _3132 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3133)
                {
                    frontier_phi_61_pred = _3117;
                    frontier_phi_61_pred_1 = _3122;
                    frontier_phi_61_pred_2 = _3121;
                    frontier_phi_61_pred_3 = _3120;
                    frontier_phi_61_pred_4 = _3119;
                    frontier_phi_61_pred_5 = _3118;
                }
                else
                {
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    uint _3247;
                    _3241 = _3117;
                    _3242 = _3118;
                    _3243 = _3119;
                    _3244 = _3120;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3132;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    for (;;)
                    {
                        uint _3251 = uint(findLSB(_3247)) + (_3123 << 5u);
                        uint _3248 = (_3247 + 4294967295u) & _3247;
                        uint _3253 = _3251 * 48u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3273 = (_3251 * 48u) + 4u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3292 = (_3251 * 48u) + 8u;
                        vec3 _3303 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x));
                        float _3307 = _3267.x - _2825;
                        float _3308 = _3267.y - _2826;
                        float _3309 = _3267.z - _2827;
                        float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                        float _3313 = inversesqrt(_3310);
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3317 = dot(vec3(_1092, _1095, _1098), vec3(_3314, _3315, _3316));
                        float _3322 = 1.0 - (_3310 * _3267.w);
                        float _4710 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3324 = sqrt(_3310) * _3286.w;
                        float _3327 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3317) + _3328;
                        float _3334 = _3324 * _3324;
                        float _3338 = ((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3323) / ((_3334 * 0.699999988079071044921875) + 1.0);
                        float _3342 = (-0.0) - _2825;
                        float _3343 = (-0.0) - _2826;
                        float _3344 = (-0.0) - _2827;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3359 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                        float _3360 = 1.0 - _1167;
                        float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                        float _3368 = _3367 * _3367;
                        float _3369 = _3368 * _3368;
                        float _3370 = _3349 + _3314;
                        float _3371 = _3350 + _3315;
                        float _3372 = _3351 + _3316;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3380 = dot(vec3(_1092, _1095, _1098), vec3(_3349, _3350, _3351));
                        float _4726 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3383 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                        float _3384 = dot(vec3(_1092, _1095, _1098), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                        float _4737 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                        float _3392 = _3327 * _3368;
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3317) + _3393;
                        float _4748 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                        float _3398 = 1.0 - _3368;
                        float _3408 = (0.5 / (((_3397 * ((_3383 * _3398) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3368) * _3383))) * _3397;
                        float _4759 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3419 = (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3391 * _3391) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125))) * _3323;
                        _3176 = (_3338 * _3286.x) + _3244;
                        _3177 = (_3338 * _3286.y) + _3245;
                        _3178 = (_3338 * _3286.z) + _3246;
                        _3173 = (_3419 * _3303.x) + _3241;
                        _3174 = (_3419 * _3303.y) + _3242;
                        _3175 = (_3419 * _3303.z) + _3243;
                        if (_3248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3241 = _3173;
                            _3242 = _3174;
                            _3243 = _3175;
                            _3244 = _3176;
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3248;
                        }
                    }
                    frontier_phi_61_pred = _3173;
                    frontier_phi_61_pred_1 = _3178;
                    frontier_phi_61_pred_2 = _3177;
                    frontier_phi_61_pred_3 = _3176;
                    frontier_phi_61_pred_4 = _3175;
                    frontier_phi_61_pred_5 = _3174;
                }
                _2973 = frontier_phi_61_pred;
                _2983 = frontier_phi_61_pred_1;
                _2981 = frontier_phi_61_pred_2;
                _2979 = frontier_phi_61_pred_3;
                _2977 = frontier_phi_61_pred_4;
                _2975 = frontier_phi_61_pred_5;
                uint _3124 = _3123 + 1u;
                if (_3124 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3117 = _2973;
                    _3118 = _2975;
                    _3119 = _2977;
                    _3120 = _2979;
                    _3121 = _2981;
                    _3122 = _2983;
                    _3123 = _3124;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
        }
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.z;
        uint _2989 = (_2987 >> 8u) & 15u;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((4294967295u << _2989) & _2871) == 0u)
        {
            _3085 = _2972;
            _3087 = _2974;
            _3089 = _2976;
            _3091 = _2978;
            _3093 = _2980;
            _3095 = _2982;
        }
        else
        {
            float _3110 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
            float _3111 = _3110 * _2825;
            float _3112 = _3110 * _2826;
            float _3113 = _3110 * _2827;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2989 < ((_2987 >> 12u) & 15u))
            {
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3096;
                float _3224 = _2972;
                float _3225 = _2974;
                float _3226 = _2976;
                float _3227 = _2978;
                float _3228 = _2980;
                float _3229 = _2982;
                uint _3230 = _2989;
                uint _3239;
                bool _3240;
                for (;;)
                {
                    _3239 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3230 << 2u)) >> 2u)).x;
                    _3240 = _3239 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3240)
                    {
                        frontier_phi_67_pred = _3227;
                        frontier_phi_67_pred_1 = _3228;
                        frontier_phi_67_pred_2 = _3229;
                        frontier_phi_67_pred_3 = _3226;
                        frontier_phi_67_pred_4 = _3225;
                        frontier_phi_67_pred_5 = _3224;
                    }
                    else
                    {
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3437 = _3224;
                        float _3438 = _3225;
                        float _3439 = _3226;
                        float _3440 = _3227;
                        float _3441 = _3228;
                        float _3442 = _3229;
                        uint _3443 = _3239;
                        uint _3444;
                        vec4 _3469;
                        float _3470;
                        vec4 _3485;
                        vec3 _3497;
                        vec4 _3512;
                        vec4 _3527;
                        float _3573;
                        bool _3574;
                        for (;;)
                        {
                            uint _3454 = ((_3230 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3443));
                            _3444 = (_3443 + 4294967295u) & _3443;
                            uint _3456 = _3454 * 40u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3470 = _3469.w;
                            uint _3472 = (_3454 * 40u) + 4u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3454 * 40u) + 8u;
                            _3497 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x));
                            uint _3499 = (_3454 * 40u) + 16u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3454 * 40u) + 20u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3454 * 40u) + 24u;
                            vec4 _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3548 = (_3454 * 40u) + 28u;
                            vec4 _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            _3573 = fma(_2827, _3561.z, fma(_2826, _3561.y, _3561.x * _2825)) + _3561.w;
                            _3574 = !((fma(_2827, _3542.z, fma(_2826, _3542.y, _3542.x * _2825)) + _3542.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3574)
                            {
                                float _3601 = _3469.x - _2825;
                                float _3602 = _3469.y - _2826;
                                float _3603 = _3469.z - _2827;
                                float _3604 = dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603));
                                float _3607 = inversesqrt(_3604);
                                float _3608 = _3607 * _3601;
                                float _3609 = _3607 * _3602;
                                float _3610 = _3607 * _3603;
                                float _3614 = 1.0 - (_3604 / (_3470 * _3470));
                                float _4770 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3615 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3619 = sqrt(_3604) * _3485.w;
                                float _3621 = 1.39999997615814208984375 / (_3619 + 1.39999997615814208984375);
                                float _3622 = _3621 * _3621;
                                float _3625 = ((1.0 - _3622) * dot(vec3(_3608, _3609, _3610), vec3(_1092, _1095, _1098))) + _3622;
                                float _3628 = _3619 * _3619;
                                float _3632 = (fma(_2827, _3512.z, fma(_2826, _3512.y, _3512.x * _2825)) + _3512.w) / _3573;
                                float _3633 = (fma(_2827, _3527.z, fma(_2826, _3527.y, _3527.x * _2825)) + _3527.w) / _3573;
                                float _3637 = 1.0 - dot(vec2(_3632, _3633), vec2(_3632, _3633));
                                float _4786 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                                float _3639 = _3638 * (((isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0))) * _3615) / ((_3628 * 0.699999988079071044921875) + 1.0));
                                float _3651 = exp2(log2(1.0 / ((_3628 * 3.5) + 5.0)) * 0.25);
                                float _3652 = 1.0 - _1167;
                                float _3659 = sqrt(1.0 - ((1.0 - (_3652 * _3652)) * (1.0 - (_3651 * _3651))));
                                float _3660 = _3659 * _3659;
                                float _3661 = _3660 * _3660;
                                float _3662 = _3608 - _3111;
                                float _3663 = _3609 - _3112;
                                float _3664 = _3610 - _3113;
                                float _3668 = inversesqrt(dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664)));
                                float _3672 = dot(vec3(_1092, _1095, _1098), vec3((-0.0) - _3111, (-0.0) - _3112, (-0.0) - _3113));
                                float _4797 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3676 = dot(vec3(_1092, _1095, _1098), vec3(_3668 * _3662, _3668 * _3663, _3668 * _3664));
                                float _4808 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3679 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                                float _3683 = ((_3679 * _3679) * (_3661 + (-1.0))) + 1.0;
                                float _3684 = _3621 * _3660;
                                float _3685 = _3684 * _3684;
                                float _3691 = ((1.0 - _3685) * dot(vec3(_1092, _1095, _1098), vec3(_3608, _3609, _3610))) + _3685;
                                float _4819 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3693 = 1.0 - _3660;
                                float _3703 = (0.5 / (((_3692 * ((_3675 * _3693) + _3660)) + 9.9999999392252902907785028219223e-09) + (((_3692 * _3693) + _3660) * _3675))) * _3692;
                                float _4830 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3713 = (_3638 * _3615) * (((_3661 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3683 * _3683) * ((_3628 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3713 * _3497.x;
                                frontier_phi_73_pred_1 = _3713 * _3497.y;
                                frontier_phi_73_pred_2 = _3639 * _3485.z;
                                frontier_phi_73_pred_3 = _3639 * _3485.y;
                                frontier_phi_73_pred_4 = _3639 * _3485.x;
                                frontier_phi_73_pred_5 = _3713 * _3497.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3717 = frontier_phi_73_pred;
                            _3718 = frontier_phi_73_pred_1;
                            _3722 = frontier_phi_73_pred_2;
                            _3721 = frontier_phi_73_pred_3;
                            _3720 = frontier_phi_73_pred_4;
                            _3719 = frontier_phi_73_pred_5;
                            _3427 = _3720 + _3440;
                            _3428 = _3721 + _3441;
                            _3429 = _3722 + _3442;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3426 = _3719 + _3439;
                            if (_3444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3444;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3427;
                        frontier_phi_67_pred_1 = _3428;
                        frontier_phi_67_pred_2 = _3429;
                        frontier_phi_67_pred_3 = _3426;
                        frontier_phi_67_pred_4 = _3425;
                        frontier_phi_67_pred_5 = _3424;
                    }
                    _3092 = frontier_phi_67_pred;
                    _3094 = frontier_phi_67_pred_1;
                    _3096 = frontier_phi_67_pred_2;
                    _3090 = frontier_phi_67_pred_3;
                    _3088 = frontier_phi_67_pred_4;
                    _3086 = frontier_phi_67_pred_5;
                    uint _3231 = _3230 + 1u;
                    if (_3231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3224 = _3086;
                        _3225 = _3088;
                        _3226 = _3090;
                        _3227 = _3092;
                        _3228 = _3094;
                        _3229 = _3096;
                        _3230 = _3231;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3094;
                frontier_phi_55_56_ladder_1 = _3096;
                frontier_phi_55_56_ladder_2 = _3092;
                frontier_phi_55_56_ladder_3 = _3090;
                frontier_phi_55_56_ladder_4 = _3088;
                frontier_phi_55_56_ladder_5 = _3086;
            }
            else
            {
                frontier_phi_55_56_ladder = _2980;
                frontier_phi_55_56_ladder_1 = _2982;
                frontier_phi_55_56_ladder_2 = _2978;
                frontier_phi_55_56_ladder_3 = _2976;
                frontier_phi_55_56_ladder_4 = _2974;
                frontier_phi_55_56_ladder_5 = _2972;
            }
            _3085 = frontier_phi_55_56_ladder_5;
            _3087 = frontier_phi_55_56_ladder_4;
            _3089 = frontier_phi_55_56_ladder_3;
            _3091 = frontier_phi_55_56_ladder_2;
            _3093 = frontier_phi_55_56_ladder;
            _3095 = frontier_phi_55_56_ladder_1;
        }
        float _3100 = isnan(1.0) ? _1151 : (isnan(_1151) ? 1.0 : min(_1151, 1.0));
        _2884 = (_3100 * _3091) + _2320;
        _2886 = (_3100 * _3093) + _2322;
        _2888 = (_3100 * _3095) + _2324;
        _2890 = ((_3085 * _1135) * _3100) + _2665;
        _2892 = ((_3087 * _1137) * _3100) + _2667;
        _2894 = ((_3089 * _1138) * _3100) + _2669;
    }
    else
    {
        _2884 = _2320;
        _2886 = _2322;
        _2888 = _2324;
        _2890 = _2665;
        _2892 = _2667;
        _2894 = _2669;
    }
    float _4846 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _4857 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _4868 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    uint _2914 = _289 + 6u;
    float _2922 = _1073 / cbSceneParam._m0[86u].x;
    float _2923 = _1074 / cbSceneParam._m0[86u].y;
    vec4 _2937 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, (log2((isnan(cbSceneParam._m0[77u].w) ? _1008 : (isnan(_1008) ? cbSceneParam._m0[77u].w : min(_1008, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2939 = _2937.x;
    float _2940 = _2937.y;
    float _2941 = _2937.z;
    float _2942 = _2937.w;
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    if (_1008 > cbSceneParam._m0[78u].w)
    {
        float _2997 = isnan(_1008) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1008 : min(cbSceneParam._m0[80u].w, _1008));
        float _2998 = _2997 / _1008;
        float _3009 = _2998 * _1058;
        float _3010 = _1059 * _2998;
        float _3011 = (-0.0) - _3010;
        float _3013 = _2998 * _1060;
        float _3015 = (cbSceneParam._m0[77u].w * _3011) / _2997;
        float _3016 = _3015 + cbSceneParam._m0[79u].w;
        float _3017 = cbSceneParam._m0[79u].w - _3010;
        float _3023 = sqrt(((_3009 * _3009) + (_3010 * _3010)) + (_3013 * _3013));
        float _3026 = (1.0 - (cbSceneParam._m0[77u].w / _2997)) * _3023;
        float _3031 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3033 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3186;
        if (abs((_3011 - _3015) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3186 = ((((_3016 > 0.0) ? exp2(_3031 * _3016) : (2.0 - exp2(_3033 * _3016))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3026;
        }
        else
        {
            float _3146 = 1.0 / cbSceneParam._m0[80u].x;
            float _3147 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : max(_3016, _3017));
            float _3148 = isnan(_3017) ? _3016 : (isnan(_3016) ? _3017 : min(_3016, _3017));
            float _3157 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : min(_3147, 0.0));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            _3186 = ((abs(_3023 / _3011) * cbSceneParam._m0[80u].y) * ((((_3157 - _3158) * 2.0) - ((exp2(_3031 * (isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0)))) - exp2(_3031 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))))) * _3146)) - ((exp2(_3033 * _3157) - exp2(_3033 * _3158)) * _3146))) + (_3026 * cbSceneParam._m0[80u].z);
        }
        vec4 _3188 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, 1.0), 0.0);
        float _3197 = exp2((_3186 * (-1.44269502162933349609375)) * (1.0 - _3188.w));
        float _3198 = log2(_3197);
        float _3214 = log2(_2942);
        _3035 = (exp2(_3214 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].x)) * _3188.x) / cbSceneParam._m0[78u].x)) + _2939;
        _3037 = (exp2(_3214 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].y)) * _3188.y) / cbSceneParam._m0[78u].y)) + _2940;
        _3039 = (exp2(_3214 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3198 * cbSceneParam._m0[78u].z)) * _3188.z) / cbSceneParam._m0[78u].z)) + _2941;
        _3041 = _3197 * _2942;
    }
    else
    {
        _3035 = _2939;
        _3037 = _2940;
        _3039 = _2941;
        _3041 = _2942;
    }
    float _3053 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3054 = _3053 == 3.0;
    float _3055 = log2(_3041);
    float _3062 = exp2(_3055 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2884 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1151))) + ((_2890 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1958)) * cbPerFrame._m0[3u].x));
    float _3063 = exp2(_3055 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2886 + ((isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0))) * _1151))) + ((_2892 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1958)) * cbPerFrame._m0[3u].x));
    float _3064 = exp2(_3055 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2888 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1151))) + ((_2894 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1958)) * cbPerFrame._m0[3u].x));
    float _3073 = (_3053 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3073 * (_3054 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3035)));
    SV_Target.y = _3073 * (_3054 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3037)));
    SV_Target.z = _3073 * (_3054 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3039)));
    SV_Target.w = cbInstanceData._m0[_2914].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2914].w;
}


