#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1430;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3779 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3790 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3801 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _417 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _431 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _448 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_419 - _431) * cbMtdParam._m0[23u].w) + _431) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3812 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _456 = (_449 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _457 = (_449 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _458 = (_449 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _475 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _495 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _497 = _495.x;
    float _507 = dot(vec4(_497, _495.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _521 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_497 - _507) * cbMtdParam._m0[23u].w) + _507) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3823 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _529 = (_522 * ((_475.x * cbMtdParam._m0[13u].x) - _456)) + _456;
    float _530 = (_522 * ((_475.y * cbMtdParam._m0[13u].y) - _457)) + _457;
    float _531 = (_522 * ((_475.z * cbMtdParam._m0[13u].z) - _458)) + _458;
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _299) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _300) + cbTextureTilingScale._m0[24u].w));
    vec4 _567 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _569 = _567.x;
    float _579 = dot(vec4(_569, _567.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _591 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _382.z) * 2.0) - ((((_569 - _579) * cbMtdParam._m0[23u].w) + _579) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3834 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _592 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _599 = (_592 * ((_550.x * cbMtdParam._m0[14u].x) - _529)) + _529;
    float _600 = (_592 * ((_550.y * cbMtdParam._m0[14u].y) - _530)) + _530;
    float _601 = (_592 * ((_550.z * cbMtdParam._m0[14u].z) - _531)) + _531;
    float _605 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _599;
    float _608 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _600;
    float _611 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _601;
    float _618 = ((_599 - _605) * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) + _605;
    float _619 = ((_600 - _608) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _608;
    float _620 = ((_601 - _611) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) + _611;
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _674 = _672.x;
    float _675 = _672.y;
    float _676 = _672.z;
    float _683 = ((_655.x - _674) * _449) + _674;
    float _684 = ((_655.y - _675) * _449) + _675;
    float _685 = ((_655.z - _676) * _449) + _676;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _708 = ((_697.x - _683) * _522) + _683;
    float _709 = ((_697.y - _684) * _522) + _684;
    float _710 = ((_697.z - _685) * _522) + _685;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _299) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _300) + cbTextureTilingScale._m0[23u].w));
    float _735 = ((_722.z - _710) * _592) + _710;
    float _738 = ((((_722.x - _708) * _592) + _708) * 2.0) + (-1.0);
    float _739 = ((((_722.y - _709) * _592) + _709) * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _3845 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _745 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _777 = (_738 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_632.x * 2.0) + (-1.0)))) + (((_765.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _778 = (_739 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_632.y * 2.0) + (-1.0)))) + (((_765.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _804 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _806 = _804.x;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _806) * _449) + _806;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _824) * _522) + _824;
    float _860 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _299) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _300) + cbTextureTilingScale._m0[10u].w)).x - _842) * _592) + _842;
    float _864 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _860) * cbMtdParam._m0[19u].z) + _860;
    float _869 = (((_632.z - _735) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _735;
    float _873 = ((_765.z - _869) * cbMtdParam._m0[19u].w) + _869;
    float _877 = cbMtdParam._m0[22u].x + _765.w;
    float _880 = fma(_745, _246 * NORMAL.x, fma(_778, _253 * TANGENT.x, (_239 * _231) * _777));
    float _883 = fma(_745, _246 * NORMAL.y, fma(_778, _253 * TANGENT.y, (_239 * _232) * _777));
    float _886 = fma(_745, _246 * NORMAL.z, fma(_778, _253 * TANGENT.z, (_239 * _233) * _777));
    float _890 = inversesqrt(dot(vec3(_880, _883, _886), vec3(_880, _883, _886)));
    float _891 = _890 * _880;
    float _892 = _890 * _883;
    float _893 = _890 * _886;
    float _3856 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _894 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _3878 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3889 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3900 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3911 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _899 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _913 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _963 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _953);
    float _964 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _953);
    float _965 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _953);
    float _969 = inversesqrt(dot(vec3(_963, _964, _965), vec3(_963, _964, _965)));
    float _970 = _963 * _969;
    float _971 = _964 * _969;
    float _972 = _965 * _969;
    float _978 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _979 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _997 = fma(_893, cbSceneParam._m0[5u].z, fma(_892, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _891));
    float _1000 = fma(_893, cbSceneParam._m0[6u].z, fma(_892, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _891));
    float _1003 = fma(_893, cbSceneParam._m0[7u].z, fma(_892, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _891));
    uint _1017 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1023 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_1017].x;
    float _1024 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_1017].y;
    float _1025 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_1017].z;
    float _3922 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _1026 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1029 = 1.0 - _899;
    float _1030 = _1026 * _1029;
    float _1031 = _1027 * _1029;
    float _1032 = _1028 * _1029;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _899;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _899;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _899;
    float _1040 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    vec4 _1052 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _978, cbSceneParam._m0[86u].y * _979));
    float _1056 = ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * TEXCOORD_5.w) * _1052.x;
    float _1057 = dot(vec3(_891, _892, _893), vec3(_970, _971, _972));
    float _1060 = _1057 * 2.0;
    float _1064 = (_1060 * _891) - _970;
    float _1065 = (_1060 * _892) - _971;
    float _1066 = (_1060 * _893) - _972;
    float _1070 = abs(dot(vec3(_970, _971, _972), vec3(_891, _892, _893)));
    float _3955 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1072 = sqrt(_894);
    float _1085 = exp2((_1072 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1072 * 3.0));
    float _1091 = (1.0 - _1085) * ((_1072 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1092 = _1085 * _1072;
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1429;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1154 = fma(_1128, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120));
        float _1158 = fma(_1128, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120));
        float _1162 = fma(_1128, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120));
        float _1187 = _1120 + _891;
        float _1188 = _1124 + _892;
        float _1189 = _1128 + _893;
        float _1199 = fma(_1189, cbModelParam._m0[26u].z, fma(_1188, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1187)) - _1154;
        float _1200 = fma(_1189, cbModelParam._m0[27u].z, fma(_1188, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1187)) - _1158;
        float _1201 = fma(_1189, cbModelParam._m0[28u].z, fma(_1188, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1187)) - _1162;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1154 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1158 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[34u].z) + ((((((_1162 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1257 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1223.x + (-0.5));
        float _1259 = _1257 * (_1223.y + (-0.5));
        float _1260 = _1257 * (_1223.z + (-0.5));
        float _1267 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1230.x + (-0.5));
        float _1269 = _1267 * (_1230.y + (-0.5));
        float _1270 = _1267 * (_1230.z + (-0.5));
        float _1277 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1237.x + (-0.5));
        float _1279 = _1277 * (_1237.y + (-0.5));
        float _1280 = _1277 * (_1237.z + (-0.5));
        float _1287 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1244.x + (-0.5));
        float _1289 = _1287 * (_1244.y + (-0.5));
        float _1290 = _1287 * (_1244.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1311 = (dot(vec3(_891, _892, _893), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1321 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4003 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1323 + 1.0))) + _1328) * _1291;
        float _1338 = _1259 * 0.5;
        float _1339 = _1269 * 0.5;
        float _1340 = _1279 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_891, _892, _893), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4036 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1365 + 1.0))) + _1370) * _1292;
        float _1380 = _1260 * 0.5;
        float _1381 = _1270 * 0.5;
        float _1382 = _1280 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_891, _892, _893), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4069 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1407 + 1.0))) + _1412) * _1293;
        _1429 = _1260;
        _1431 = _1259;
        _1432 = _1258;
        _1433 = _1270;
        _1434 = _1269;
        _1435 = _1268;
        _1436 = _1280;
        _1437 = _1279;
        _1438 = _1278;
        _1439 = _1293;
        _1440 = _1292;
        _1441 = _1291;
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1430;
        _1431 = _1430;
        _1432 = _1430;
        _1433 = _1430;
        _1434 = _1430;
        _1435 = _1430;
        _1436 = _1430;
        _1437 = _1430;
        _1438 = _1430;
        _1439 = _1430;
        _1440 = _1430;
        _1441 = _1430;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1467 = fma(_1128, cbModelParam._m0[30u].z, fma(_1124, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120));
        float _1471 = fma(_1128, cbModelParam._m0[31u].z, fma(_1124, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120));
        float _1475 = fma(_1128, cbModelParam._m0[32u].z, fma(_1124, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120));
        float _1498 = _1120 + _891;
        float _1499 = _1124 + _892;
        float _1500 = _1128 + _893;
        float _1510 = fma(_1500, cbModelParam._m0[30u].z, fma(_1499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1498)) - _1467;
        float _1511 = fma(_1500, cbModelParam._m0[31u].z, fma(_1499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1498)) - _1471;
        float _1512 = fma(_1500, cbModelParam._m0[32u].z, fma(_1499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1498)) - _1475;
        float _1516 = inversesqrt(dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512)));
        float _1529 = ((_1516 * _1510) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1467 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1516 * _1511) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1471 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1531 = ((_1516 * _1512) / cbModelParam._m0[35u].z) + ((((((_1475 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1540 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1529, _1530, _1531), 0.0);
        float _1566 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1533.x + (-0.5));
        float _1568 = _1566 * (_1533.y + (-0.5));
        float _1569 = _1566 * (_1533.z + (-0.5));
        float _1576 = exp2((_1540.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1540.x + (-0.5));
        float _1578 = _1576 * (_1540.y + (-0.5));
        float _1579 = _1576 * (_1540.z + (-0.5));
        float _1586 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1587 = _1586 * (_1547.x + (-0.5));
        float _1588 = _1586 * (_1547.y + (-0.5));
        float _1589 = _1586 * (_1547.z + (-0.5));
        float _1596 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1554.x + (-0.5));
        float _1598 = _1596 * (_1554.y + (-0.5));
        float _1599 = _1596 * (_1554.z + (-0.5));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1603 = _1567 * 0.5;
        float _1604 = _1577 * 0.5;
        float _1605 = _1587 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_891, _892, _893), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4132 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1630 + 1.0))) + _1635) * _1600;
        float _1645 = _1568 * 0.5;
        float _1646 = _1578 * 0.5;
        float _1647 = _1588 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_891, _892, _893), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4165 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1672 + 1.0))) + _1677) * _1601;
        float _1687 = _1569 * 0.5;
        float _1688 = _1579 * 0.5;
        float _1689 = _1589 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_891, _892, _893), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1602 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4198 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1714 + 1.0))) + _1719) * _1602;
        _1736 = _1569;
        _1737 = _1568;
        _1738 = _1567;
        _1739 = _1579;
        _1740 = _1578;
        _1741 = _1577;
        _1742 = _1589;
        _1743 = _1588;
        _1744 = _1587;
        _1745 = _1602;
        _1746 = _1601;
        _1747 = _1600;
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1750 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
    }
    else
    {
        _1736 = _1430;
        _1737 = _1430;
        _1738 = _1430;
        _1739 = _1430;
        _1740 = _1430;
        _1741 = _1430;
        _1742 = _1430;
        _1743 = _1430;
        _1744 = _1430;
        _1745 = _1430;
        _1746 = _1430;
        _1747 = _1430;
        _1748 = 0.0;
        _1749 = 0.0;
        _1750 = 0.0;
    }
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1442)) + _1442;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1443)) + _1443;
    float _1762 = (cbModelParam._m0[1u].x * (_1750 - _1444)) + _1444;
    float _1783 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1760));
    float _1804 = _1064 * 0.5;
    float _1805 = _1065 * 0.5;
    float _1806 = _1066 * 0.5;
    float _1807 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1738, _1741, _1744, _1747));
    float _1810 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1813 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1847;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1820 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1429, _1433, _1436, _1439));
        float _1824 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1828 = dot(vec4(_1804, _1805, _1806, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1835 = dot(vec4(cbModelParam._m0[39u]), vec4(_1804, _1805, _1806, 1.0));
        _1847 = dot(vec3(isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)), isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1835) ? 0.0 : (isnan(0.0) ? _1835 : max(0.0, _1835))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1847 = 1.0;
    }
    float _1858;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1849 = dot(vec4(cbModelParam._m0[40u]), vec4(_1804, _1805, _1806, 1.0));
        _1858 = dot(vec3(isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1849) ? 0.0 : (isnan(0.0) ? _1849 : max(0.0, _1849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1858 = 1.0;
    }
    float _1862 = (_1858 * cbModelParam._m0[1u].x) + (_1847 * (1.0 - cbModelParam._m0[1u].x));
    float _1872 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _894);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1872 : min(cbModelParam._m0[25u].z, _1872));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1921 = fma(_1128, cbModelParam._m0[13u].z, fma(_1124, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1120)) + cbModelParam._m0[13u].w;
        float _1925 = fma(_1128, cbModelParam._m0[14u].z, fma(_1124, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1120)) + cbModelParam._m0[14u].w;
        float _1929 = fma(_1128, cbModelParam._m0[15u].z, fma(_1124, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1120)) + cbModelParam._m0[15u].w;
        float _1932 = fma(_1066, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064));
        float _1935 = fma(_1066, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064));
        float _1938 = fma(_1066, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064));
        float _1966;
        if (_1932 > 0.0)
        {
            _1966 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1966 = frontier_phi_14_12_ladder;
        }
        float _2190;
        if (_1935 > 0.0)
        {
            _2190 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2190 = frontier_phi_23_19_ladder;
        }
        float _2447;
        if (_1938 > 0.0)
        {
            _2447 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2447 = frontier_phi_35_30_ladder;
        }
        float _2449 = isnan(_2190) ? _1966 : (isnan(_1966) ? _2190 : min(_1966, _2190));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1932) + _1921;
        float _2455 = (_2450 * _1935) + _1925;
        float _2456 = (_2450 * _1938) + _1929;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2457;
        float _2461 = _2457 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 > _2461) || ((_2455 < _2459) || ((_2454 < _2459) || (_2454 > _2461))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2456, cbModelParam._m0[9u].z, fma(_2455, cbModelParam._m0[9u].y, _2454 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2456, cbModelParam._m0[10u].z, fma(_2455, cbModelParam._m0[10u].y, _2454 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2456, cbModelParam._m0[11u].z, fma(_2455, cbModelParam._m0[11u].y, _2454 * cbModelParam._m0[11u].x))), _1873);
            frontier_phi_13_35_ladder = _2584.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2584.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2584.x * cbModelParam._m0[1u].y;
        }
        _1954 = frontier_phi_13_35_ladder_2;
        _1956 = frontier_phi_13_35_ladder_1;
        _1958 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1942 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1064, _1065, _1066), _1873);
        _1954 = _1942.x * cbModelParam._m0[1u].y;
        _1956 = _1942.y * cbModelParam._m0[1u].y;
        _1958 = _1942.z * cbModelParam._m0[1u].y;
    }
    float _1962 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _894);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1962 : min(cbModelParam._m0[25u].w, _1962));
    float _2053;
    float _2055;
    float _2057;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2017 = fma(_1128, cbModelParam._m0[21u].z, fma(_1124, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1120)) + cbModelParam._m0[21u].w;
        float _2021 = fma(_1128, cbModelParam._m0[22u].z, fma(_1124, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1120)) + cbModelParam._m0[22u].w;
        float _2025 = fma(_1128, cbModelParam._m0[23u].z, fma(_1124, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1120)) + cbModelParam._m0[23u].w;
        float _2028 = fma(_1066, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064));
        float _2031 = fma(_1066, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064));
        float _2034 = fma(_1066, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064));
        float _2195;
        if (_2028 > 0.0)
        {
            _2195 = abs((1.0 - _2017) / _2028);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2017 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2195 = frontier_phi_25_21_ladder;
        }
        float _2474;
        if (_2031 > 0.0)
        {
            _2474 = abs((1.0 - _2021) / _2031);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2021 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2474 = frontier_phi_37_32_ladder;
        }
        float _2687;
        if (_2034 > 0.0)
        {
            _2687 = abs((1.0 - _2025) / _2034);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2025 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2687 = frontier_phi_46_43_ladder;
        }
        float _2689 = isnan(_2474) ? _2195 : (isnan(_2195) ? _2474 : min(_2195, _2474));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _2028) + _2017;
        float _2695 = (_2690 * _2031) + _2021;
        float _2696 = (_2690 * _2034) + _2025;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1963);
            frontier_phi_22_46_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2053 = frontier_phi_22_46_ladder_2;
        _2055 = frontier_phi_22_46_ladder_1;
        _2057 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2037 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1064, _1065, _1066), _1963);
        _2053 = _2037.x * cbModelParam._m0[1u].z;
        _2055 = _2037.y * cbModelParam._m0[1u].z;
        _2057 = _2037.z * cbModelParam._m0[1u].z;
    }
    float _2070 = (((_1091 * _1040) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2072 = (((_1091 * _1042) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2074 = (((_1091 * _1043) + _1092) * _1056) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2077 = fma(_2074, cbSceneParam._m0[89u].z, fma(_2072, cbSceneParam._m0[89u].y, _2070 * cbSceneParam._m0[89u].x));
    float _2080 = fma(_2074, cbSceneParam._m0[90u].z, fma(_2072, cbSceneParam._m0[90u].y, _2070 * cbSceneParam._m0[90u].x));
    float _2083 = fma(_2074, cbSceneParam._m0[91u].z, fma(_2072, cbSceneParam._m0[91u].y, _2070 * cbSceneParam._m0[91u].x));
    vec4 _2091 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_978, _979));
    float _2093 = _2091.w;
    float _2105 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2093);
    float _2106 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2093);
    float _2107 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2093);
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _1056 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2149 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2153 = _2113 | 1u;
    float _2164 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_891, _892, _893));
    float _2167 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_891, _892, _893));
    float _4334 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _4345 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2172 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2174 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2181 = ((cbLight._m0[_2130].x * _2136) * _2174) + (((cbLight._m0[_2140].x * _2105) * _2149) * _2172);
    float _2182 = ((_2136 * cbLight._m0[_2130].y) * _2174) + (((cbLight._m0[_2140].y * _2106) * _2149) * _2172);
    float _2183 = ((_2136 * cbLight._m0[_2130].z) * _2174) + (((cbLight._m0[_2140].z * _2107) * _2149) * _2172);
    uvec4 _2187 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2189 = _2187.x == 0u;
    float _2200;
    float _2202;
    float _2204;
    if (_2189)
    {
        _2200 = _2181;
        _2202 = _2182;
        _2204 = _2183;
    }
    else
    {
        uint _2208 = _2113 + 6u;
        float _2224 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4356 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2227 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2200 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _2181;
        _2202 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _2182;
        _2204 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _2183;
    }
    bool _2207 = _2187.y == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2207)
    {
        _2245 = _2200;
        _2247 = _2202;
        _2249 = _2204;
    }
    else
    {
        uint _2418 = _2113 + 7u;
        float _2434 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_891, _892, _893)) * 0.5) + 0.5;
        float _2435 = _2434 * _2434;
        float _4372 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2436 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2437 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2245 = (((cbLight._m0[_2418].x * 0.3183098733425140380859375) * _2436) * _2437) + _2200;
        _2247 = (((cbLight._m0[_2418].y * 0.3183098733425140380859375) * _2436) * _2437) + _2202;
        _2249 = (((cbLight._m0[_2418].z * 0.3183098733425140380859375) * _2436) * _2437) + _2204;
    }
    uint _2252 = _2113 + 8u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _894) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2113].x + _970;
    float _2268 = cbLight._m0[_2113].y + _971;
    float _2269 = cbLight._m0[_2113].z + _972;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2113].xyz));
    float _4388 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _4399 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _2281 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2282 = dot(vec3(_891, _892, _893), vec3(_2274, _2275, _2276));
    float _4410 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2286 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2274, _2275, _2276));
    float _4421 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2290 = _2266 * _2266;
    float _2294 = ((_2285 * _2285) * (_2290 + (-1.0))) + 1.0;
    float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
    float _2303 = 0.959999978542327880859375 - _1037;
    float _2305 = 0.959999978542327880859375 - _1038;
    float _2306 = 0.959999978542327880859375 - _1039;
    float _2313 = 1.0 - _2266;
    float _2324 = (0.5 / (((_2281 * ((_2280 * _2313) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2313) + _2266) * _2280))) * _2280;
    float _4432 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2326 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2290 / ((_2294 * _2294) * 3.141590118408203125));
    uint _2340 = _2113 + 9u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _894) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2153].x + _970;
    float _2354 = cbLight._m0[_2153].y + _971;
    float _2355 = cbLight._m0[_2153].z + _972;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2153].xyz));
    float _4443 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2367 = dot(vec3(_891, _892, _893), vec3(_2360, _2361, _2362));
    float _4454 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2360, _2361, _2362));
    float _4465 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2352 * _2352;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2393 = 1.0 - _2352;
    float _2403 = (0.5 / (((_2281 * ((_2366 * _2393) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2393) + _2352) * _2366))) * _2366;
    float _4476 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    float _2415 = (((((_2386 * _2303) + _1040) * cbLight._m0[_2340].x) * _2405) * _2136) + ((((cbLight._m0[_2252].x * _2105) * ((_2302 * _2303) + _1040)) * _2326) * _2149);
    float _2416 = (((((_2386 * _2305) + _1042) * cbLight._m0[_2340].y) * _2405) * _2136) + ((((cbLight._m0[_2252].y * _2106) * ((_2302 * _2305) + _1042)) * _2326) * _2149);
    float _2417 = (((((_2386 * _2306) + _1043) * cbLight._m0[_2340].z) * _2405) * _2136) + ((((cbLight._m0[_2252].z * _2107) * ((_2302 * _2306) + _1043)) * _2326) * _2149);
    float _2479;
    float _2481;
    float _2483;
    if (_2189)
    {
        _2479 = _2415;
        _2481 = _2416;
        _2483 = _2417;
    }
    else
    {
        uint _2485 = _2113 + 2u;
        uint _2489 = _2113 + 10u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _894) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _970;
        float _2506 = cbLight._m0[_2485].y + _971;
        float _2507 = cbLight._m0[_2485].z + _972;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2485].xyz));
        float _4487 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2519 = dot(vec3(_891, _892, _893), vec3(_2512, _2513, _2514));
        float _4498 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4509 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
        float _2545 = 1.0 - _2504;
        float _2555 = (0.5 / (((_2281 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2545) + _2504) * _2518))) * _2518;
        float _4520 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2479 = (((((_2538 * _2303) + _1040) * cbLight._m0[_2489].x) * _2557) * _2558) + _2415;
        _2481 = (((((_2538 * _2305) + _1042) * cbLight._m0[_2489].y) * _2557) * _2558) + _2416;
        _2483 = (((((_2538 * _2306) + _1043) * cbLight._m0[_2489].z) * _2557) * _2558) + _2417;
    }
    float _2593;
    float _2595;
    float _2597;
    if (_2207)
    {
        _2593 = _2479;
        _2595 = _2481;
        _2597 = _2483;
    }
    else
    {
        uint _2604 = _2113 + 3u;
        uint _2608 = _2113 + 11u;
        float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2604].w)) * _894) * 0.949999988079071044921875);
        float _2623 = _2622 * _2622;
        float _2624 = cbLight._m0[_2604].x + _970;
        float _2625 = cbLight._m0[_2604].y + _971;
        float _2626 = cbLight._m0[_2604].z + _972;
        float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
        float _2631 = _2630 * _2624;
        float _2632 = _2630 * _2625;
        float _2633 = _2630 * _2626;
        float _2634 = dot(vec3(_891, _892, _893), vec3(cbLight._m0[_2604].xyz));
        float _4536 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2638 = dot(vec3(_891, _892, _893), vec3(_2631, _2632, _2633));
        float _4547 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2642 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_2631, _2632, _2633));
        float _4558 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2646 = _2623 * _2623;
        float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
        float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0)))) * 5.0);
        float _2664 = 1.0 - _2623;
        float _2674 = (0.5 / (((_2281 * ((_2637 * _2664) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2281 * _2664) + _2623) * _2637))) * _2637;
        float _4569 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2593 = (((((_2657 * _2303) + _1040) * cbLight._m0[_2608].x) * _2676) * _2677) + _2479;
        _2595 = (((((_2657 * _2305) + _1042) * cbLight._m0[_2608].y) * _2676) * _2677) + _2481;
        _2597 = (((((_2657 * _2306) + _1043) * cbLight._m0[_2608].z) * _2676) * _2677) + _2483;
    }
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_2111.y == 0u)
    {
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2752;
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2752;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2752;
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _979) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _978) / _2768)));
        float _2789 = (log2(_2755 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            uint _3051 = 0u;
            uint _3060;
            bool _3061;
            for (;;)
            {
                _3060 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                _3061 = _3060 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3061)
                {
                    frontier_phi_61_pred = _3045;
                    frontier_phi_61_pred_1 = _3050;
                    frontier_phi_61_pred_2 = _3049;
                    frontier_phi_61_pred_3 = _3048;
                    frontier_phi_61_pred_4 = _3047;
                    frontier_phi_61_pred_5 = _3046;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3060;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3051 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _2753;
                        float _3236 = _3195.y - _2754;
                        float _3237 = _3195.z - _2755;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_997, _1000, _1003), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4595 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _2753;
                        float _3271 = (-0.0) - _2754;
                        float _3272 = (-0.0) - _2755;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3287 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3288 = 1.0 - _1072;
                        float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                        float _3296 = _3295 * _3295;
                        float _3297 = _3296 * _3296;
                        float _3298 = _3277 + _3242;
                        float _3299 = _3278 + _3243;
                        float _3300 = _3279 + _3244;
                        float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                        float _3308 = dot(vec3(_997, _1000, _1003), vec3(_3277, _3278, _3279));
                        float _4611 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3312 = dot(vec3(_997, _1000, _1003), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                        float _4622 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                        float _3320 = _3255 * _3296;
                        float _3321 = _3320 * _3320;
                        float _3324 = ((1.0 - _3321) * _3245) + _3321;
                        float _4633 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3326 = 1.0 - _3296;
                        float _3336 = (0.5 / (((_3325 * ((_3311 * _3326) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3296) * _3311))) * _3325;
                        float _4644 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3347 = (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3319 * _3319) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3104 = (_3266 * _3214.x) + _3172;
                        _3105 = (_3266 * _3214.y) + _3173;
                        _3106 = (_3266 * _3214.z) + _3174;
                        _3101 = (_3347 * _3231.x) + _3169;
                        _3102 = (_3347 * _3231.y) + _3170;
                        _3103 = (_3347 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_61_pred = _3101;
                    frontier_phi_61_pred_1 = _3106;
                    frontier_phi_61_pred_2 = _3105;
                    frontier_phi_61_pred_3 = _3104;
                    frontier_phi_61_pred_4 = _3103;
                    frontier_phi_61_pred_5 = _3102;
                }
                _2901 = frontier_phi_61_pred;
                _2911 = frontier_phi_61_pred_1;
                _2909 = frontier_phi_61_pred_2;
                _2907 = frontier_phi_61_pred_3;
                _2905 = frontier_phi_61_pred_4;
                _2903 = frontier_phi_61_pred_5;
                uint _3052 = _3051 + 1u;
                if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3045 = _2901;
                    _3046 = _2903;
                    _3047 = _2905;
                    _3048 = _2907;
                    _3049 = _2909;
                    _3050 = _2911;
                    _3051 = _3052;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((4294967295u << _2917) & _2799) == 0u)
        {
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
            _3021 = _2908;
            _3023 = _2910;
        }
        else
        {
            float _3038 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
            float _3039 = _3038 * _2753;
            float _3040 = _3038 * _2754;
            float _3041 = _3038 * _2755;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3152 = _2900;
                float _3153 = _2902;
                float _3154 = _2904;
                float _3155 = _2906;
                float _3156 = _2908;
                float _3157 = _2910;
                uint _3158 = _2917;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3168)
                    {
                        frontier_phi_67_pred = _3155;
                        frontier_phi_67_pred_1 = _3156;
                        frontier_phi_67_pred_2 = _3157;
                        frontier_phi_67_pred_3 = _3154;
                        frontier_phi_67_pred_4 = _3153;
                        frontier_phi_67_pred_5 = _3152;
                    }
                    else
                    {
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3365 = _3152;
                        float _3366 = _3153;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        uint _3371 = _3167;
                        uint _3372;
                        vec4 _3397;
                        float _3398;
                        vec4 _3413;
                        vec3 _3425;
                        vec4 _3440;
                        vec4 _3455;
                        float _3501;
                        bool _3502;
                        for (;;)
                        {
                            uint _3382 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3371));
                            _3372 = (_3371 + 4294967295u) & _3371;
                            uint _3384 = _3382 * 40u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3398 = _3397.w;
                            uint _3400 = (_3382 * 40u) + 4u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3382 * 40u) + 8u;
                            _3425 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x));
                            uint _3427 = (_3382 * 40u) + 16u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3382 * 40u) + 20u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3382 * 40u) + 24u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            uint _3476 = (_3382 * 40u) + 28u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3501 = fma(_2755, _3489.z, fma(_2754, _3489.y, _3489.x * _2753)) + _3489.w;
                            _3502 = !((fma(_2755, _3470.z, fma(_2754, _3470.y, _3470.x * _2753)) + _3470.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3502)
                            {
                                float _3529 = _3397.x - _2753;
                                float _3530 = _3397.y - _2754;
                                float _3531 = _3397.z - _2755;
                                float _3532 = dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531));
                                float _3535 = inversesqrt(_3532);
                                float _3536 = _3535 * _3529;
                                float _3537 = _3535 * _3530;
                                float _3538 = _3535 * _3531;
                                float _3542 = 1.0 - (_3532 / (_3398 * _3398));
                                float _4655 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3547 = sqrt(_3532) * _3413.w;
                                float _3549 = 1.39999997615814208984375 / (_3547 + 1.39999997615814208984375);
                                float _3550 = _3549 * _3549;
                                float _3553 = ((1.0 - _3550) * dot(vec3(_3536, _3537, _3538), vec3(_997, _1000, _1003))) + _3550;
                                float _3556 = _3547 * _3547;
                                float _3560 = (fma(_2755, _3440.z, fma(_2754, _3440.y, _3440.x * _2753)) + _3440.w) / _3501;
                                float _3561 = (fma(_2755, _3455.z, fma(_2754, _3455.y, _3455.x * _2753)) + _3455.w) / _3501;
                                float _3565 = 1.0 - dot(vec2(_3560, _3561), vec2(_3560, _3561));
                                float _4671 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3567 = _3566 * (((isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0))) * _3543) / ((_3556 * 0.699999988079071044921875) + 1.0));
                                float _3579 = exp2(log2(1.0 / ((_3556 * 3.5) + 5.0)) * 0.25);
                                float _3580 = 1.0 - _1072;
                                float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                                float _3588 = _3587 * _3587;
                                float _3589 = _3588 * _3588;
                                float _3590 = _3536 - _3039;
                                float _3591 = _3537 - _3040;
                                float _3592 = _3538 - _3041;
                                float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                                float _3600 = dot(vec3(_997, _1000, _1003), vec3((-0.0) - _3039, (-0.0) - _3040, (-0.0) - _3041));
                                float _4682 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3604 = dot(vec3(_997, _1000, _1003), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                                float _4693 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                                float _3612 = _3549 * _3588;
                                float _3613 = _3612 * _3612;
                                float _3619 = ((1.0 - _3613) * dot(vec3(_997, _1000, _1003), vec3(_3536, _3537, _3538))) + _3613;
                                float _4704 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3621 = 1.0 - _3588;
                                float _3631 = (0.5 / (((_3620 * ((_3603 * _3621) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3620 * _3621) + _3588) * _3603))) * _3620;
                                float _4715 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3641 = (_3566 * _3543) * (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3611 * _3611) * ((_3556 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3641 * _3425.x;
                                frontier_phi_73_pred_1 = _3641 * _3425.y;
                                frontier_phi_73_pred_2 = _3567 * _3413.z;
                                frontier_phi_73_pred_3 = _3567 * _3413.y;
                                frontier_phi_73_pred_4 = _3567 * _3413.x;
                                frontier_phi_73_pred_5 = _3641 * _3425.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3645 = frontier_phi_73_pred;
                            _3646 = frontier_phi_73_pred_1;
                            _3650 = frontier_phi_73_pred_2;
                            _3649 = frontier_phi_73_pred_3;
                            _3648 = frontier_phi_73_pred_4;
                            _3647 = frontier_phi_73_pred_5;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            if (_3372 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3372;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3355;
                        frontier_phi_67_pred_1 = _3356;
                        frontier_phi_67_pred_2 = _3357;
                        frontier_phi_67_pred_3 = _3354;
                        frontier_phi_67_pred_4 = _3353;
                        frontier_phi_67_pred_5 = _3352;
                    }
                    _3020 = frontier_phi_67_pred;
                    _3022 = frontier_phi_67_pred_1;
                    _3024 = frontier_phi_67_pred_2;
                    _3018 = frontier_phi_67_pred_3;
                    _3016 = frontier_phi_67_pred_4;
                    _3014 = frontier_phi_67_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _3014;
                        _3153 = _3016;
                        _3154 = _3018;
                        _3155 = _3020;
                        _3156 = _3022;
                        _3157 = _3024;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3022;
                frontier_phi_55_56_ladder_1 = _3024;
                frontier_phi_55_56_ladder_2 = _3020;
                frontier_phi_55_56_ladder_3 = _3018;
                frontier_phi_55_56_ladder_4 = _3016;
                frontier_phi_55_56_ladder_5 = _3014;
            }
            else
            {
                frontier_phi_55_56_ladder = _2908;
                frontier_phi_55_56_ladder_1 = _2910;
                frontier_phi_55_56_ladder_2 = _2906;
                frontier_phi_55_56_ladder_3 = _2904;
                frontier_phi_55_56_ladder_4 = _2902;
                frontier_phi_55_56_ladder_5 = _2900;
            }
            _3013 = frontier_phi_55_56_ladder_5;
            _3015 = frontier_phi_55_56_ladder_4;
            _3017 = frontier_phi_55_56_ladder_3;
            _3019 = frontier_phi_55_56_ladder_2;
            _3021 = frontier_phi_55_56_ladder;
            _3023 = frontier_phi_55_56_ladder_1;
        }
        float _3028 = isnan(1.0) ? _1056 : (isnan(_1056) ? 1.0 : min(_1056, 1.0));
        _2812 = (_3028 * _3019) + _2245;
        _2814 = (_3028 * _3021) + _2247;
        _2816 = (_3028 * _3023) + _2249;
        _2818 = ((_3013 * _1040) * _3028) + _2593;
        _2820 = ((_3015 * _1042) * _3028) + _2595;
        _2822 = ((_3017 * _1043) * _3028) + _2597;
    }
    else
    {
        _2812 = _2245;
        _2814 = _2247;
        _2816 = _2249;
        _2818 = _2593;
        _2820 = _2595;
        _2822 = _2597;
    }
    float _4731 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4742 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4753 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    uint _2842 = _280 + 6u;
    float _2850 = _978 / cbSceneParam._m0[86u].x;
    float _2851 = _979 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _913 : (isnan(_913) ? cbSceneParam._m0[77u].w : min(_913, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_913 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_913) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _913 : min(cbSceneParam._m0[80u].w, _913));
        float _2926 = _2925 / _913;
        float _2937 = _2926 * _963;
        float _2938 = _964 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2941 = _2926 * _965;
        float _2943 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2938;
        float _2951 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3114;
        if (abs((_2939 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3114 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3074 = 1.0 / cbSceneParam._m0[80u].x;
            float _3075 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3076 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            _3114 = ((abs(_2951 / _2939) * cbSceneParam._m0[80u].y) * ((((_3085 - _3086) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))))) * _3074)) - ((exp2(_2961 * _3085) - exp2(_2961 * _3086)) * _3074))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3125 = exp2((_3114 * (-1.44269502162933349609375)) * (1.0 - _3116.w));
        float _3126 = log2(_3125);
        float _3142 = log2(_2870);
        _2963 = (exp2(_3142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].x)) * _3116.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2965 = (exp2(_3142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].y)) * _3116.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2967 = (exp2(_3142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].z)) * _3116.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2969 = _3125 * _2870;
    }
    else
    {
        _2963 = _2867;
        _2965 = _2868;
        _2967 = _2869;
        _2969 = _2870;
    }
    float _2981 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2982 = _2981 == 3.0;
    float _2983 = log2(_2969);
    float _2990 = exp2(_2983 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2812 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1056))) + ((_2818 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1862)) * cbPerFrame._m0[3u].x));
    float _2991 = exp2(_2983 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2814 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1056))) + ((_2820 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1862)) * cbPerFrame._m0[3u].x));
    float _2992 = exp2(_2983 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2816 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1056))) + ((_2822 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1862)) * cbPerFrame._m0[3u].x));
    float _3001 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3001 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.y = _3001 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.z = _3001 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.w = cbInstanceData._m0[_2842].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
}


