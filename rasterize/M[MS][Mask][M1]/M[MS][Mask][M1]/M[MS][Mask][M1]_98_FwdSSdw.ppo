#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1575;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3922 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3933 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3944 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3955 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _464 = (_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _465 = (_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _466 = (_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3966 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    float _543 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _537;
    float _546 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _538;
    float _549 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _539;
    float _556 = ((_537 - _543) * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) + _543;
    float _557 = ((_538 - _546) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) + _546;
    float _558 = ((_539 - _549) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _549;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    float _649 = ((_621.x - _640) * _457) + _640;
    float _650 = ((_621.y - _641) * _457) + _641;
    float _651 = ((_621.z - _642) * _457) + _642;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _676 = ((_663.z - _651) * _530) + _651;
    float _679 = ((((_663.x - _649) * _530) + _649) * 2.0) + (-1.0);
    float _680 = ((((_663.y - _650) * _530) + _650) * 2.0) + (-1.0);
    float _681 = dot(vec2(_679, _680), vec2(_679, _680));
    float _3977 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _686 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _716 = (_679 + ((((_596.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_704.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _717 = (_680 + ((((_596.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_704.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _720 = fma(_686, _260, fma(_717, _267, _716 * _253));
    float _723 = fma(_686, _261, fma(_717, _268, _716 * _254));
    float _726 = fma(_686, _262, fma(_717, _269, _716 * _255));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _759 = _757.x;
    float _760 = 1.0 - _759;
    float _769 = (cbMtdParam._m0[19u].x + dot(vec4(_730 * _720, _730 * _723, _730 * _726, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_759 - _760) * cbMtdParam._m0[24u].z) + _760) * cbMtdParam._m0[21u].z);
    float _3988 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _770 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _772 = (-0.0) - cbMtdParam._m0[24u].x;
    float _774 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _774 : (isnan(_774) ? 1.0 : min(_774, 1.0));
    float _782 = _770 - ((_770 * TEXCOORD_8.x) * _775);
    float _783 = _770 - ((_770 * TEXCOORD_8.y) * _775);
    float _784 = _770 - ((_770 * TEXCOORD_8.z) * _775);
    float _791 = (_782 * ((_577.x * cbMtdParam._m0[18u].x) - _556)) + _556;
    float _792 = (_783 * ((_577.y * cbMtdParam._m0[18u].y) - _557)) + _557;
    float _793 = (_784 * ((_577.z * cbMtdParam._m0[18u].z) - _558)) + _558;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _807 = _805.x;
    float _808 = 1.0 - _807;
    float _834 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_807 - _808) * cbMtdParam._m0[24u].w) + _808) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4009 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _843 = ((((cbMtdParam._m0[10u].x - _791) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _835) + _791;
    float _844 = ((((cbMtdParam._m0[10u].y - _792) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _835) + _792;
    float _845 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _793)) * _835) + _793;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _873 = _871.x;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _873) * _457) + _873;
    float _908 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _891) * _530) + _891;
    float _912 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _908) * cbMtdParam._m0[19u].z) + _908;
    float _914 = _912 - (_912 * _782);
    float _916 = _914 - (_914 * _835);
    float _921 = (((_596.z - _676) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _676;
    float _925 = ((_704.z - _921) * cbMtdParam._m0[19u].w) + _921;
    vec4 _939 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _946 = (_939.x * 2.0) + (-1.0);
    float _947 = (_939.y * 2.0) + (-1.0);
    float _948 = dot(vec2(_946, _947), vec2(_946, _947));
    float _4020 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _956 = ((_939.z - _925) * _782) + _925;
    float _959 = ((cbMtdParam._m0[23u].x - _956) * _835) + _956;
    vec4 _980 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _986 = (_980.x * 2.0) + (-1.0);
    float _987 = (_980.y * 2.0) + (-1.0);
    float _988 = dot(vec2(_986, _987), vec2(_986, _987));
    float _4031 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _1003 = ((sqrt(1.0 - (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) - _686) * _784) + _686;
    float _1006 = (((_946 - _716) * _782) + _716) + (cbMtdParam._m0[21u].x * _716);
    float _1007 = (((_947 - _717) * _783) + _717) + (cbMtdParam._m0[21u].x * _717);
    float _1018 = (((_986 - _1006) + (_1006 * cbMtdParam._m0[22u].z)) * _835) + _1006;
    float _1019 = (((_987 - _1007) + (_1007 * cbMtdParam._m0[22u].z)) * _835) + _1007;
    float _1020 = (_835 * (sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) - _1003)) + _1003;
    float _1022 = cbMtdParam._m0[22u].x + _704.w;
    float _1025 = fma(_1020, _260, fma(_1019, _267, _1018 * _253));
    float _1028 = fma(_1020, _261, fma(_1019, _268, _1018 * _254));
    float _1031 = fma(_1020, _262, fma(_1019, _269, _1018 * _255));
    float _1035 = inversesqrt(dot(vec3(_1025, _1028, _1031), vec3(_1025, _1028, _1031)));
    float _1036 = _1035 * _1025;
    float _1037 = _1035 * _1028;
    float _1038 = _1035 * _1031;
    float _4042 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _1039 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4064 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4075 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4086 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4097 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _1044 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _1058 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1098 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1108 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1098);
    float _1109 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1098);
    float _1110 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1098);
    float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
    float _1115 = _1108 * _1114;
    float _1116 = _1109 * _1114;
    float _1117 = _1110 * _1114;
    float _1123 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1124 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1142 = fma(_1038, cbSceneParam._m0[5u].z, fma(_1037, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1036));
    float _1145 = fma(_1038, cbSceneParam._m0[6u].z, fma(_1037, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1036));
    float _1148 = fma(_1038, cbSceneParam._m0[7u].z, fma(_1037, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1036));
    uint _1162 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1168 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_1162].x;
    float _1169 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_1162].y;
    float _1170 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_1162].z;
    float _4108 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1171 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1172 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _1174 = 1.0 - _1044;
    float _1175 = _1171 * _1174;
    float _1176 = _1172 * _1174;
    float _1177 = _1173 * _1174;
    float _1182 = (_1171 + (-0.039999999105930328369140625)) * _1044;
    float _1183 = (_1172 + (-0.039999999105930328369140625)) * _1044;
    float _1184 = (_1173 + (-0.039999999105930328369140625)) * _1044;
    float _1185 = _1182 + 0.039999999105930328369140625;
    float _1187 = _1183 + 0.039999999105930328369140625;
    float _1188 = _1184 + 0.039999999105930328369140625;
    vec4 _1197 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1123, cbSceneParam._m0[86u].y * _1124));
    float _1201 = ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * TEXCOORD_5.w) * _1197.x;
    float _1202 = dot(vec3(_1036, _1037, _1038), vec3(_1115, _1116, _1117));
    float _1205 = _1202 * 2.0;
    float _1209 = (_1205 * _1036) - _1115;
    float _1210 = (_1205 * _1037) - _1116;
    float _1211 = (_1205 * _1038) - _1117;
    float _1215 = abs(dot(vec3(_1115, _1116, _1117), vec3(_1036, _1037, _1038)));
    float _4141 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1217 = sqrt(_1039);
    float _1230 = exp2((_1217 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1217 * 3.0));
    float _1236 = (1.0 - _1230) * ((_1217 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1237 = _1230 * _1217;
    float _1265 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1574;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1299 = fma(_1273, cbModelParam._m0[26u].z, fma(_1269, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1265));
        float _1303 = fma(_1273, cbModelParam._m0[27u].z, fma(_1269, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1265));
        float _1307 = fma(_1273, cbModelParam._m0[28u].z, fma(_1269, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1265));
        float _1332 = _1265 + _1036;
        float _1333 = _1269 + _1037;
        float _1334 = _1273 + _1038;
        float _1344 = fma(_1334, cbModelParam._m0[26u].z, fma(_1333, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1332)) - _1299;
        float _1345 = fma(_1334, cbModelParam._m0[27u].z, fma(_1333, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1332)) - _1303;
        float _1346 = fma(_1334, cbModelParam._m0[28u].z, fma(_1333, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1332)) - _1307;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1299 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1303 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[34u].z) + ((((((_1307 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1402 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1368.x + (-0.5));
        float _1404 = _1402 * (_1368.y + (-0.5));
        float _1405 = _1402 * (_1368.z + (-0.5));
        float _1412 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1375.x + (-0.5));
        float _1414 = _1412 * (_1375.y + (-0.5));
        float _1415 = _1412 * (_1375.z + (-0.5));
        float _1422 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1382.x + (-0.5));
        float _1424 = _1422 * (_1382.y + (-0.5));
        float _1425 = _1422 * (_1382.z + (-0.5));
        float _1432 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1389.x + (-0.5));
        float _1434 = _1432 * (_1389.y + (-0.5));
        float _1435 = _1432 * (_1389.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1456 = (dot(vec3(_1036, _1037, _1038), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1466 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4189 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1468 + 1.0))) + _1473) * _1436;
        float _1483 = _1404 * 0.5;
        float _1484 = _1414 * 0.5;
        float _1485 = _1424 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_1036, _1037, _1038), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4222 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1510 + 1.0))) + _1515) * _1437;
        float _1525 = _1405 * 0.5;
        float _1526 = _1415 * 0.5;
        float _1527 = _1425 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_1036, _1037, _1038), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4255 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1552 + 1.0))) + _1557) * _1438;
        _1574 = _1405;
        _1576 = _1404;
        _1577 = _1403;
        _1578 = _1415;
        _1579 = _1414;
        _1580 = _1413;
        _1581 = _1425;
        _1582 = _1424;
        _1583 = _1423;
        _1584 = _1438;
        _1585 = _1437;
        _1586 = _1436;
        _1587 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1588 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1589 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
    }
    else
    {
        _1574 = _1575;
        _1576 = _1575;
        _1577 = _1575;
        _1578 = _1575;
        _1579 = _1575;
        _1580 = _1575;
        _1581 = _1575;
        _1582 = _1575;
        _1583 = _1575;
        _1584 = _1575;
        _1585 = _1575;
        _1586 = _1575;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1613 = fma(_1273, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1265));
        float _1617 = fma(_1273, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1265));
        float _1621 = fma(_1273, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1265));
        float _1644 = _1265 + _1036;
        float _1645 = _1269 + _1037;
        float _1646 = _1273 + _1038;
        float _1656 = fma(_1646, cbModelParam._m0[30u].z, fma(_1645, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1644)) - _1613;
        float _1657 = fma(_1646, cbModelParam._m0[31u].z, fma(_1645, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1644)) - _1617;
        float _1658 = fma(_1646, cbModelParam._m0[32u].z, fma(_1645, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1644)) - _1621;
        float _1662 = inversesqrt(dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658)));
        float _1675 = ((_1662 * _1656) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1613 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1676 = ((_1662 * _1657) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1617 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1677 = ((_1662 * _1658) / cbModelParam._m0[35u].z) + ((((((_1621 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1675, _1676, _1677), 0.0);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1675, _1676, _1677), 0.0);
        vec4 _1693 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1675, _1676, _1677), 0.0);
        vec4 _1700 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1675, _1676, _1677), 0.0);
        float _1712 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1713 = _1712 * (_1679.x + (-0.5));
        float _1714 = _1712 * (_1679.y + (-0.5));
        float _1715 = _1712 * (_1679.z + (-0.5));
        float _1722 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1723 = _1722 * (_1686.x + (-0.5));
        float _1724 = _1722 * (_1686.y + (-0.5));
        float _1725 = _1722 * (_1686.z + (-0.5));
        float _1732 = exp2((_1693.w + (-0.5)) * 20.0) * 2.0;
        float _1733 = _1732 * (_1693.x + (-0.5));
        float _1734 = _1732 * (_1693.y + (-0.5));
        float _1735 = _1732 * (_1693.z + (-0.5));
        float _1742 = exp2((_1700.w + (-0.5)) * 20.0) * 2.0;
        float _1743 = _1742 * (_1700.x + (-0.5));
        float _1744 = _1742 * (_1700.y + (-0.5));
        float _1745 = _1742 * (_1700.z + (-0.5));
        float _1746 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1747 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = _1713 * 0.5;
        float _1750 = _1723 * 0.5;
        float _1751 = _1733 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_1036, _1037, _1038), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1746 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4318 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1776 + 1.0))) + _1781) * _1746;
        float _1791 = _1714 * 0.5;
        float _1792 = _1724 * 0.5;
        float _1793 = _1734 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_1036, _1037, _1038), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1747 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4351 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1818 + 1.0))) + _1823) * _1747;
        float _1833 = _1715 * 0.5;
        float _1834 = _1725 * 0.5;
        float _1835 = _1735 * 0.5;
        float _1836 = dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835));
        float _1841 = (_1836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1836);
        float _1849 = (dot(vec3(_1036, _1037, _1038), vec3(_1841 * _1833, _1841 * _1834, _1841 * _1835)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1858 = sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1860 = _1859 * 2.0;
        float _1864 = (1.0 - _1859) / (_1859 + 1.0);
        float _4384 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1874 = ((((1.0 - _1865) * (_1860 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1860 + 1.0))) + _1865) * _1748;
        _1882 = _1715;
        _1883 = _1714;
        _1884 = _1713;
        _1885 = _1725;
        _1886 = _1724;
        _1887 = _1723;
        _1888 = _1735;
        _1889 = _1734;
        _1890 = _1733;
        _1891 = _1748;
        _1892 = _1747;
        _1893 = _1746;
        _1894 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
        _1895 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)));
    }
    else
    {
        _1882 = _1575;
        _1883 = _1575;
        _1884 = _1575;
        _1885 = _1575;
        _1886 = _1575;
        _1887 = _1575;
        _1888 = _1575;
        _1889 = _1575;
        _1890 = _1575;
        _1891 = _1575;
        _1892 = _1575;
        _1893 = _1575;
        _1894 = 0.0;
        _1895 = 0.0;
        _1896 = 0.0;
    }
    float _1906 = (cbModelParam._m0[1u].x * (_1894 - _1587)) + _1587;
    float _1907 = (cbModelParam._m0[1u].x * (_1895 - _1588)) + _1588;
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1589)) + _1589;
    float _1929 = fma(_1908, cbSceneParam._m0[89u].z, fma(_1907, cbSceneParam._m0[89u].y, _1906 * cbSceneParam._m0[89u].x));
    float _1932 = fma(_1908, cbSceneParam._m0[90u].z, fma(_1907, cbSceneParam._m0[90u].y, _1906 * cbSceneParam._m0[90u].x));
    float _1935 = fma(_1908, cbSceneParam._m0[91u].z, fma(_1907, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1906));
    float _1950 = _1209 * 0.5;
    float _1951 = _1210 * 0.5;
    float _1952 = _1211 * 0.5;
    float _1953 = dot(vec4(_1950, _1951, _1952, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1956 = dot(vec4(_1950, _1951, _1952, 1.0), vec4(_1883, _1886, _1889, _1892));
    float _1959 = dot(vec4(_1950, _1951, _1952, 1.0), vec4(_1882, _1885, _1888, _1891));
    float _1993;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1966 = dot(vec4(_1950, _1951, _1952, 1.0), vec4(_1574, _1578, _1581, _1584));
        float _1970 = dot(vec4(_1950, _1951, _1952, 1.0), vec4(_1576, _1579, _1582, _1585));
        float _1974 = dot(vec4(_1950, _1951, _1952, 1.0), vec4(_1577, _1580, _1583, _1586));
        float _1981 = dot(vec4(cbModelParam._m0[39u]), vec4(_1950, _1951, _1952, 1.0));
        _1993 = dot(vec3(isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0)), isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0)), isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1981) ? 0.0 : (isnan(0.0) ? _1981 : max(0.0, _1981))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1993 = 1.0;
    }
    float _2004;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1995 = dot(vec4(cbModelParam._m0[40u]), vec4(_1950, _1951, _1952, 1.0));
        _2004 = dot(vec3(isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)), isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1995) ? 0.0 : (isnan(0.0) ? _1995 : max(0.0, _1995))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2004 = 1.0;
    }
    float _2008 = (_2004 * cbModelParam._m0[1u].x) + (_1993 * (1.0 - cbModelParam._m0[1u].x));
    float _2018 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1039);
    float _2019 = isnan(_2018) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2018 : min(cbModelParam._m0[25u].z, _2018));
    float _2099;
    float _2101;
    float _2103;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2066 = fma(_1273, cbModelParam._m0[13u].z, fma(_1269, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1265)) + cbModelParam._m0[13u].w;
        float _2070 = fma(_1273, cbModelParam._m0[14u].z, fma(_1269, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1265)) + cbModelParam._m0[14u].w;
        float _2074 = fma(_1273, cbModelParam._m0[15u].z, fma(_1269, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1265)) + cbModelParam._m0[15u].w;
        float _2077 = fma(_1211, cbModelParam._m0[13u].z, fma(_1210, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1209));
        float _2080 = fma(_1211, cbModelParam._m0[14u].z, fma(_1210, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1209));
        float _2083 = fma(_1211, cbModelParam._m0[15u].z, fma(_1210, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1209));
        float _2111;
        if (_2077 > 0.0)
        {
            _2111 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2111 = frontier_phi_14_12_ladder;
        }
        float _2334;
        if (_2080 > 0.0)
        {
            _2334 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2334 = frontier_phi_23_19_ladder;
        }
        float _2591;
        if (_2083 > 0.0)
        {
            _2591 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2591 = frontier_phi_35_30_ladder;
        }
        float _2593 = isnan(_2334) ? _2111 : (isnan(_2111) ? _2334 : min(_2111, _2334));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _2077) + _2066;
        float _2599 = (_2594 * _2080) + _2070;
        float _2600 = (_2594 * _2083) + _2074;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2601;
        float _2605 = _2601 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 > _2605) || ((_2599 < _2603) || ((_2598 < _2603) || (_2598 > _2605))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2728 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2600, cbModelParam._m0[9u].z, fma(_2599, cbModelParam._m0[9u].y, _2598 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2600, cbModelParam._m0[10u].z, fma(_2599, cbModelParam._m0[10u].y, _2598 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2600, cbModelParam._m0[11u].z, fma(_2599, cbModelParam._m0[11u].y, _2598 * cbModelParam._m0[11u].x))), _2019);
            frontier_phi_13_35_ladder = _2728.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2728.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2728.x * cbModelParam._m0[1u].y;
        }
        _2099 = frontier_phi_13_35_ladder_2;
        _2101 = frontier_phi_13_35_ladder_1;
        _2103 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1209, _1210, _1211), _2019);
        _2099 = _2087.x * cbModelParam._m0[1u].y;
        _2101 = _2087.y * cbModelParam._m0[1u].y;
        _2103 = _2087.z * cbModelParam._m0[1u].y;
    }
    float _2107 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1039);
    float _2108 = isnan(_2107) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2107 : min(cbModelParam._m0[25u].w, _2107));
    float _2197;
    float _2199;
    float _2201;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2161 = fma(_1273, cbModelParam._m0[21u].z, fma(_1269, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1265)) + cbModelParam._m0[21u].w;
        float _2165 = fma(_1273, cbModelParam._m0[22u].z, fma(_1269, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1265)) + cbModelParam._m0[22u].w;
        float _2169 = fma(_1273, cbModelParam._m0[23u].z, fma(_1269, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1265)) + cbModelParam._m0[23u].w;
        float _2172 = fma(_1211, cbModelParam._m0[21u].z, fma(_1210, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1209));
        float _2175 = fma(_1211, cbModelParam._m0[22u].z, fma(_1210, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1209));
        float _2178 = fma(_1211, cbModelParam._m0[23u].z, fma(_1210, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1209));
        float _2339;
        if (_2172 > 0.0)
        {
            _2339 = abs((1.0 - _2161) / _2172);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2161 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2339 = frontier_phi_25_21_ladder;
        }
        float _2618;
        if (_2175 > 0.0)
        {
            _2618 = abs((1.0 - _2165) / _2175);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2175 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2165 + 1.0) / _2175);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2618 = frontier_phi_37_32_ladder;
        }
        float _2831;
        if (_2178 > 0.0)
        {
            _2831 = abs((1.0 - _2169) / _2178);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2178 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2169 + 1.0) / _2178);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2831 = frontier_phi_46_43_ladder;
        }
        float _2833 = isnan(_2618) ? _2339 : (isnan(_2339) ? _2618 : min(_2339, _2618));
        float _2834 = isnan(_2831) ? _2833 : (isnan(_2833) ? _2831 : min(_2833, _2831));
        float _2838 = (_2834 * _2172) + _2161;
        float _2839 = (_2834 * _2175) + _2165;
        float _2840 = (_2834 * _2178) + _2169;
        float _2841 = _2834 * 9.9999997473787516355514526367188e-05;
        float _2842 = (-1.0) - _2841;
        float _2844 = _2841 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2840 > _2844) || ((_2840 < _2842) || ((_2839 > _2844) || ((_2839 < _2842) || ((_2838 < _2842) || (_2838 > _2844))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2840, cbModelParam._m0[17u].z, fma(_2839, cbModelParam._m0[17u].y, _2838 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2840, cbModelParam._m0[18u].z, fma(_2839, cbModelParam._m0[18u].y, _2838 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2840, cbModelParam._m0[19u].z, fma(_2839, cbModelParam._m0[19u].y, _2838 * cbModelParam._m0[19u].x))), _2108);
            frontier_phi_22_46_ladder = _3039.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3039.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3039.x * cbModelParam._m0[1u].z;
        }
        _2197 = frontier_phi_22_46_ladder_2;
        _2199 = frontier_phi_22_46_ladder_1;
        _2201 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1209, _1210, _1211), _2108);
        _2197 = _2181.x * cbModelParam._m0[1u].z;
        _2199 = _2181.y * cbModelParam._m0[1u].z;
        _2201 = _2181.z * cbModelParam._m0[1u].z;
    }
    float _2214 = (((_1236 * _1185) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2197 - _2099)) + _2099);
    float _2216 = (((_1236 * _1187) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2199 - _2101)) + _2101);
    float _2218 = (((_1236 * _1188) + _1237) * _1201) * ((cbModelParam._m0[1u].w * (_2201 - _2103)) + _2103);
    float _2221 = fma(_2218, cbSceneParam._m0[89u].z, fma(_2216, cbSceneParam._m0[89u].y, _2214 * cbSceneParam._m0[89u].x));
    float _2224 = fma(_2218, cbSceneParam._m0[90u].z, fma(_2216, cbSceneParam._m0[90u].y, _2214 * cbSceneParam._m0[90u].x));
    float _2227 = fma(_2218, cbSceneParam._m0[91u].z, fma(_2216, cbSceneParam._m0[91u].y, _2214 * cbSceneParam._m0[91u].x));
    vec4 _2235 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1123, _1124));
    float _2237 = _2235.w;
    float _2249 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2237);
    float _2250 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2237);
    float _2251 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2237);
    uvec4 _2255 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2257 = _2255.x * 14u;
    uint _2258 = _2257 + 13u;
    float _2265 = _1201 + (-1.0);
    float _2270 = (cbLight._m0[_2258].x * _2265) + 1.0;
    float _2271 = (cbLight._m0[_2258].y * _2265) + 1.0;
    float _2272 = (cbLight._m0[_2258].z * _2265) + 1.0;
    float _2273 = (cbLight._m0[_2258].w * _2265) + 1.0;
    uint _2274 = _2257 + 5u;
    float _2280 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2284 = _2257 + 4u;
    float _2293 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2297 = _2257 | 1u;
    float _2308 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_1036, _1037, _1038));
    float _2311 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_1036, _1037, _1038));
    float _4520 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _4531 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _2316 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * 0.3183098733425140380859375;
    float _2318 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * 0.3183098733425140380859375;
    float _2325 = ((cbLight._m0[_2274].x * _2280) * _2318) + (((cbLight._m0[_2284].x * _2249) * _2293) * _2316);
    float _2326 = ((_2280 * cbLight._m0[_2274].y) * _2318) + (((cbLight._m0[_2284].y * _2250) * _2293) * _2316);
    float _2327 = ((_2280 * cbLight._m0[_2274].z) * _2318) + (((cbLight._m0[_2284].z * _2251) * _2293) * _2316);
    uvec4 _2331 = floatBitsToUint(cbLight._m0[_2257 + 12u]);
    bool _2333 = _2331.x == 0u;
    float _2344;
    float _2346;
    float _2348;
    if (_2333)
    {
        _2344 = _2325;
        _2346 = _2326;
        _2348 = _2327;
    }
    else
    {
        uint _2352 = _2257 + 6u;
        float _2368 = (dot(vec3(cbLight._m0[_2257 + 2u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4542 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2371 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2344 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2325;
        _2346 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2326;
        _2348 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2327;
    }
    bool _2351 = _2331.y == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2351)
    {
        _2389 = _2344;
        _2391 = _2346;
        _2393 = _2348;
    }
    else
    {
        uint _2562 = _2257 + 7u;
        float _2578 = (dot(vec3(cbLight._m0[_2257 + 3u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2579 = _2578 * _2578;
        float _4558 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2580 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2581 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2389 = (((cbLight._m0[_2562].x * 0.3183098733425140380859375) * _2580) * _2581) + _2344;
        _2391 = (((cbLight._m0[_2562].y * 0.3183098733425140380859375) * _2580) * _2581) + _2346;
        _2393 = (((cbLight._m0[_2562].z * 0.3183098733425140380859375) * _2580) * _2581) + _2348;
    }
    uint _2396 = _2257 + 8u;
    float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _1039) * 0.949999988079071044921875);
    float _2410 = _2409 * _2409;
    float _2411 = cbLight._m0[_2257].x + _1115;
    float _2412 = cbLight._m0[_2257].y + _1116;
    float _2413 = cbLight._m0[_2257].z + _1117;
    float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
    float _2418 = _2417 * _2411;
    float _2419 = _2417 * _2412;
    float _2420 = _2417 * _2413;
    float _2421 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2257].xyz));
    float _4574 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _4585 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _2425 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2426 = dot(vec3(_1036, _1037, _1038), vec3(_2418, _2419, _2420));
    float _4596 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2430 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2418, _2419, _2420));
    float _4607 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2434 = _2410 * _2410;
    float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
    float _2446 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
    float _2447 = 0.959999978542327880859375 - _1182;
    float _2449 = 0.959999978542327880859375 - _1183;
    float _2450 = 0.959999978542327880859375 - _1184;
    float _2457 = 1.0 - _2410;
    float _2468 = (0.5 / (((_2425 * ((_2424 * _2457) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2457) + _2410) * _2424))) * _2424;
    float _4618 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2470 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
    uint _2484 = _2257 + 9u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2297].w)) * _1039) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2297].x + _1115;
    float _2498 = cbLight._m0[_2297].y + _1116;
    float _2499 = cbLight._m0[_2297].z + _1117;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2297].xyz));
    float _4629 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2511 = dot(vec3(_1036, _1037, _1038), vec3(_2504, _2505, _2506));
    float _4640 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
    float _2515 = dot(vec3(cbLight._m0[_2297].xyz), vec3(_2504, _2505, _2506));
    float _4651 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2519 = _2496 * _2496;
    float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
    float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
    float _2537 = 1.0 - _2496;
    float _2547 = (0.5 / (((_2425 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2537) + _2496) * _2510))) * _2510;
    float _4662 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
    float _2559 = (((((_2530 * _2447) + _1185) * cbLight._m0[_2484].x) * _2549) * _2280) + ((((cbLight._m0[_2396].x * _2249) * ((_2446 * _2447) + _1185)) * _2470) * _2293);
    float _2560 = (((((_2530 * _2449) + _1187) * cbLight._m0[_2484].y) * _2549) * _2280) + ((((cbLight._m0[_2396].y * _2250) * ((_2446 * _2449) + _1187)) * _2470) * _2293);
    float _2561 = (((((_2530 * _2450) + _1188) * cbLight._m0[_2484].z) * _2549) * _2280) + ((((cbLight._m0[_2396].z * _2251) * ((_2446 * _2450) + _1188)) * _2470) * _2293);
    float _2623;
    float _2625;
    float _2627;
    if (_2333)
    {
        _2623 = _2559;
        _2625 = _2560;
        _2627 = _2561;
    }
    else
    {
        uint _2629 = _2257 + 2u;
        uint _2633 = _2257 + 10u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _1039) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _1115;
        float _2650 = cbLight._m0[_2629].y + _1116;
        float _2651 = cbLight._m0[_2629].z + _1117;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2629].xyz));
        float _4673 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
        float _2663 = dot(vec3(_1036, _1037, _1038), vec3(_2656, _2657, _2658));
        float _4684 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4695 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2425 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2689) + _2648) * _2662))) * _2662;
        float _4706 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2623 = (((((_2682 * _2447) + _1185) * cbLight._m0[_2633].x) * _2701) * _2702) + _2559;
        _2625 = (((((_2682 * _2449) + _1187) * cbLight._m0[_2633].y) * _2701) * _2702) + _2560;
        _2627 = (((((_2682 * _2450) + _1188) * cbLight._m0[_2633].z) * _2701) * _2702) + _2561;
    }
    float _2737;
    float _2739;
    float _2741;
    if (_2351)
    {
        _2737 = _2623;
        _2739 = _2625;
        _2741 = _2627;
    }
    else
    {
        uint _2748 = _2257 + 3u;
        uint _2752 = _2257 + 11u;
        float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2748].w)) * _1039) * 0.949999988079071044921875);
        float _2767 = _2766 * _2766;
        float _2768 = cbLight._m0[_2748].x + _1115;
        float _2769 = cbLight._m0[_2748].y + _1116;
        float _2770 = cbLight._m0[_2748].z + _1117;
        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
        float _2775 = _2774 * _2768;
        float _2776 = _2774 * _2769;
        float _2777 = _2774 * _2770;
        float _2778 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2748].xyz));
        float _4722 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2782 = dot(vec3(_1036, _1037, _1038), vec3(_2775, _2776, _2777));
        float _4733 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _2786 = dot(vec3(cbLight._m0[_2748].xyz), vec3(_2775, _2776, _2777));
        float _4744 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2790 = _2767 * _2767;
        float _2794 = ((_2785 * _2785) * (_2790 + (-1.0))) + 1.0;
        float _2801 = exp2(log2(1.0 - (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0)))) * 5.0);
        float _2808 = 1.0 - _2767;
        float _2818 = (0.5 / (((_2425 * ((_2781 * _2808) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2425 * _2808) + _2767) * _2781))) * _2781;
        float _4755 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2820 = (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2790 / ((_2794 * _2794) * 3.141590118408203125));
        float _2821 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
        _2737 = (((((_2801 * _2447) + _1185) * cbLight._m0[_2752].x) * _2820) * _2821) + _2623;
        _2739 = (((((_2801 * _2449) + _1187) * cbLight._m0[_2752].y) * _2820) * _2821) + _2625;
        _2741 = (((((_2801 * _2450) + _1188) * cbLight._m0[_2752].z) * _2820) * _2821) + _2627;
    }
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_2255.y == 0u)
    {
        float _2896 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2897 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2896;
        float _2898 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2896;
        float _2899 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2896;
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.x;
        uint _2923 = uint((float(_2911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1124) / _2912))) + floor(float(uint(cbSceneParam._m0[85u].x * _1123) / _2912)));
        float _2933 = (log2(_2899 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2934 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        uint _2937 = uint(isnan(14.0) ? _2934 : (isnan(_2934) ? 14.0 : min(_2934, 14.0)));
        uvec4 _2942 = texelFetch(g_lightClusterGridBuffer, int(((_2937 << 2u) + (_2923 << 6u)) >> 2u));
        uint _2943 = _2942.x;
        uint _2944 = _2911.z;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((((1u << ((_2944 >> 4u) & 15u)) + 4294967295u) & _2943) == 0u) || ((_2944 & 240u) == 0u))
        {
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
        }
        else
        {
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            float _3193 = 0.0;
            uint _3194 = 0u;
            uint _3203;
            bool _3204;
            for (;;)
            {
                _3203 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3194 << 2u)) >> 2u)).x;
                _3204 = _3203 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3204)
                {
                    frontier_phi_61_pred = _3188;
                    frontier_phi_61_pred_1 = _3193;
                    frontier_phi_61_pred_2 = _3192;
                    frontier_phi_61_pred_3 = _3191;
                    frontier_phi_61_pred_4 = _3190;
                    frontier_phi_61_pred_5 = _3189;
                }
                else
                {
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    uint _3318;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3193;
                    _3318 = _3203;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    for (;;)
                    {
                        uint _3322 = uint(findLSB(_3318)) + (_3194 << 5u);
                        uint _3319 = (_3318 + 4294967295u) & _3318;
                        uint _3324 = _3322 * 48u;
                        vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 3u)).x));
                        uint _3344 = (_3322 * 48u) + 4u;
                        vec4 _3357 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 3u)).x));
                        uint _3363 = (_3322 * 48u) + 8u;
                        vec3 _3374 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3363)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3363 + 2u)).x));
                        float _3378 = _3338.x - _2897;
                        float _3379 = _3338.y - _2898;
                        float _3380 = _3338.z - _2899;
                        float _3381 = dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380));
                        float _3384 = inversesqrt(_3381);
                        float _3385 = _3384 * _3378;
                        float _3386 = _3384 * _3379;
                        float _3387 = _3384 * _3380;
                        float _3388 = dot(vec3(_1142, _1145, _1148), vec3(_3385, _3386, _3387));
                        float _3393 = 1.0 - (_3381 * _3338.w);
                        float _4781 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3394 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3395 = sqrt(_3381) * _3357.w;
                        float _3398 = 1.39999997615814208984375 / (_3395 + 1.39999997615814208984375);
                        float _3399 = _3398 * _3398;
                        float _3402 = ((1.0 - _3399) * _3388) + _3399;
                        float _3405 = _3395 * _3395;
                        float _3409 = ((isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0))) * _3394) / ((_3405 * 0.699999988079071044921875) + 1.0);
                        float _3413 = (-0.0) - _2897;
                        float _3414 = (-0.0) - _2898;
                        float _3415 = (-0.0) - _2899;
                        float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                        float _3420 = _3419 * _3413;
                        float _3421 = _3419 * _3414;
                        float _3422 = _3419 * _3415;
                        float _3430 = exp2(log2(1.0 / ((_3405 * 3.5) + 5.0)) * 0.25);
                        float _3431 = 1.0 - _1217;
                        float _3438 = sqrt(1.0 - ((1.0 - (_3431 * _3431)) * (1.0 - (_3430 * _3430))));
                        float _3439 = _3438 * _3438;
                        float _3440 = _3439 * _3439;
                        float _3441 = _3420 + _3385;
                        float _3442 = _3421 + _3386;
                        float _3443 = _3422 + _3387;
                        float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                        float _3451 = dot(vec3(_1142, _1145, _1148), vec3(_3420, _3421, _3422));
                        float _4797 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3454 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3455 = dot(vec3(_1142, _1145, _1148), vec3(_3447 * _3441, _3447 * _3442, _3447 * _3443));
                        float _4808 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3458 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3462 = ((_3458 * _3458) * (_3440 + (-1.0))) + 1.0;
                        float _3463 = _3398 * _3439;
                        float _3464 = _3463 * _3463;
                        float _3467 = ((1.0 - _3464) * _3388) + _3464;
                        float _4819 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3468 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3469 = 1.0 - _3439;
                        float _3479 = (0.5 / (((_3468 * ((_3454 * _3469) + _3439)) + 9.9999999392252902907785028219223e-09) + (((_3468 * _3469) + _3439) * _3454))) * _3468;
                        float _4830 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3490 = (((_3440 * 3.1415927410125732421875) * (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) / ((_3462 * _3462) * ((_3405 * 2.1991131305694580078125) + 3.141590118408203125))) * _3394;
                        _3247 = (_3409 * _3357.x) + _3315;
                        _3248 = (_3409 * _3357.y) + _3316;
                        _3249 = (_3409 * _3357.z) + _3317;
                        _3244 = (_3490 * _3374.x) + _3312;
                        _3245 = (_3490 * _3374.y) + _3313;
                        _3246 = (_3490 * _3374.z) + _3314;
                        if (_3319 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3249;
                            _3318 = _3319;
                        }
                    }
                    frontier_phi_61_pred = _3244;
                    frontier_phi_61_pred_1 = _3249;
                    frontier_phi_61_pred_2 = _3248;
                    frontier_phi_61_pred_3 = _3247;
                    frontier_phi_61_pred_4 = _3246;
                    frontier_phi_61_pred_5 = _3245;
                }
                _3045 = frontier_phi_61_pred;
                _3055 = frontier_phi_61_pred_1;
                _3053 = frontier_phi_61_pred_2;
                _3051 = frontier_phi_61_pred_3;
                _3049 = frontier_phi_61_pred_4;
                _3047 = frontier_phi_61_pred_5;
                uint _3195 = _3194 + 1u;
                if (_3195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3188 = _3045;
                    _3189 = _3047;
                    _3190 = _3049;
                    _3191 = _3051;
                    _3192 = _3053;
                    _3193 = _3055;
                    _3194 = _3195;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
        }
        uvec4 _3058 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3059 = _3058.z;
        uint _3061 = (_3059 >> 8u) & 15u;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        if (((4294967295u << _3061) & _2943) == 0u)
        {
            _3156 = _3044;
            _3158 = _3046;
            _3160 = _3048;
            _3162 = _3050;
            _3164 = _3052;
            _3166 = _3054;
        }
        else
        {
            float _3181 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
            float _3182 = _3181 * _2897;
            float _3183 = _3181 * _2898;
            float _3184 = _3181 * _2899;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3061 < ((_3059 >> 12u) & 15u))
            {
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3165;
                float _3167;
                float _3295 = _3044;
                float _3296 = _3046;
                float _3297 = _3048;
                float _3298 = _3050;
                float _3299 = _3052;
                float _3300 = _3054;
                uint _3301 = _3061;
                uint _3310;
                bool _3311;
                for (;;)
                {
                    _3310 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3301 << 2u)) >> 2u)).x;
                    _3311 = _3310 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3311)
                    {
                        frontier_phi_67_pred = _3298;
                        frontier_phi_67_pred_1 = _3299;
                        frontier_phi_67_pred_2 = _3300;
                        frontier_phi_67_pred_3 = _3297;
                        frontier_phi_67_pred_4 = _3296;
                        frontier_phi_67_pred_5 = _3295;
                    }
                    else
                    {
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3508 = _3295;
                        float _3509 = _3296;
                        float _3510 = _3297;
                        float _3511 = _3298;
                        float _3512 = _3299;
                        float _3513 = _3300;
                        uint _3514 = _3310;
                        uint _3515;
                        vec4 _3540;
                        float _3541;
                        vec4 _3556;
                        vec3 _3568;
                        vec4 _3583;
                        vec4 _3598;
                        float _3644;
                        bool _3645;
                        for (;;)
                        {
                            uint _3525 = ((_3301 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3514));
                            _3515 = (_3514 + 4294967295u) & _3514;
                            uint _3527 = _3525 * 40u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            _3541 = _3540.w;
                            uint _3543 = (_3525 * 40u) + 4u;
                            _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3558 = (_3525 * 40u) + 8u;
                            _3568 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x));
                            uint _3570 = (_3525 * 40u) + 16u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            uint _3585 = (_3525 * 40u) + 20u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3525 * 40u) + 24u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3619 = (_3525 * 40u) + 28u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3644 = fma(_2899, _3632.z, fma(_2898, _3632.y, _3632.x * _2897)) + _3632.w;
                            _3645 = !((fma(_2899, _3613.z, fma(_2898, _3613.y, _3613.x * _2897)) + _3613.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3645)
                            {
                                float _3672 = _3540.x - _2897;
                                float _3673 = _3540.y - _2898;
                                float _3674 = _3540.z - _2899;
                                float _3675 = dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674));
                                float _3678 = inversesqrt(_3675);
                                float _3679 = _3678 * _3672;
                                float _3680 = _3678 * _3673;
                                float _3681 = _3678 * _3674;
                                float _3685 = 1.0 - (_3675 / (_3541 * _3541));
                                float _4841 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3690 = sqrt(_3675) * _3556.w;
                                float _3692 = 1.39999997615814208984375 / (_3690 + 1.39999997615814208984375);
                                float _3693 = _3692 * _3692;
                                float _3696 = ((1.0 - _3693) * dot(vec3(_3679, _3680, _3681), vec3(_1142, _1145, _1148))) + _3693;
                                float _3699 = _3690 * _3690;
                                float _3703 = (fma(_2899, _3583.z, fma(_2898, _3583.y, _3583.x * _2897)) + _3583.w) / _3644;
                                float _3704 = (fma(_2899, _3598.z, fma(_2898, _3598.y, _3598.x * _2897)) + _3598.w) / _3644;
                                float _3708 = 1.0 - dot(vec2(_3703, _3704), vec2(_3703, _3704));
                                float _4857 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3710 = _3709 * (((isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0))) * _3686) / ((_3699 * 0.699999988079071044921875) + 1.0));
                                float _3722 = exp2(log2(1.0 / ((_3699 * 3.5) + 5.0)) * 0.25);
                                float _3723 = 1.0 - _1217;
                                float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                                float _3731 = _3730 * _3730;
                                float _3732 = _3731 * _3731;
                                float _3733 = _3679 - _3182;
                                float _3734 = _3680 - _3183;
                                float _3735 = _3681 - _3184;
                                float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                                float _3743 = dot(vec3(_1142, _1145, _1148), vec3((-0.0) - _3182, (-0.0) - _3183, (-0.0) - _3184));
                                float _4868 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3747 = dot(vec3(_1142, _1145, _1148), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                                float _4879 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                                float _3755 = _3692 * _3731;
                                float _3756 = _3755 * _3755;
                                float _3762 = ((1.0 - _3756) * dot(vec3(_1142, _1145, _1148), vec3(_3679, _3680, _3681))) + _3756;
                                float _4890 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3764 = 1.0 - _3731;
                                float _3774 = (0.5 / (((_3763 * ((_3746 * _3764) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3731) * _3746))) * _3763;
                                float _4901 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3784 = (_3709 * _3686) * (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) / ((_3754 * _3754) * ((_3699 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3784 * _3568.x;
                                frontier_phi_73_pred_1 = _3784 * _3568.y;
                                frontier_phi_73_pred_2 = _3710 * _3556.z;
                                frontier_phi_73_pred_3 = _3710 * _3556.y;
                                frontier_phi_73_pred_4 = _3710 * _3556.x;
                                frontier_phi_73_pred_5 = _3784 * _3568.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3788 = frontier_phi_73_pred;
                            _3789 = frontier_phi_73_pred_1;
                            _3793 = frontier_phi_73_pred_2;
                            _3792 = frontier_phi_73_pred_3;
                            _3791 = frontier_phi_73_pred_4;
                            _3790 = frontier_phi_73_pred_5;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3500 = _3793 + _3513;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            if (_3515 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3515;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3498;
                        frontier_phi_67_pred_1 = _3499;
                        frontier_phi_67_pred_2 = _3500;
                        frontier_phi_67_pred_3 = _3497;
                        frontier_phi_67_pred_4 = _3496;
                        frontier_phi_67_pred_5 = _3495;
                    }
                    _3163 = frontier_phi_67_pred;
                    _3165 = frontier_phi_67_pred_1;
                    _3167 = frontier_phi_67_pred_2;
                    _3161 = frontier_phi_67_pred_3;
                    _3159 = frontier_phi_67_pred_4;
                    _3157 = frontier_phi_67_pred_5;
                    uint _3302 = _3301 + 1u;
                    if (_3302 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3295 = _3157;
                        _3296 = _3159;
                        _3297 = _3161;
                        _3298 = _3163;
                        _3299 = _3165;
                        _3300 = _3167;
                        _3301 = _3302;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3165;
                frontier_phi_55_56_ladder_1 = _3167;
                frontier_phi_55_56_ladder_2 = _3163;
                frontier_phi_55_56_ladder_3 = _3161;
                frontier_phi_55_56_ladder_4 = _3159;
                frontier_phi_55_56_ladder_5 = _3157;
            }
            else
            {
                frontier_phi_55_56_ladder = _3052;
                frontier_phi_55_56_ladder_1 = _3054;
                frontier_phi_55_56_ladder_2 = _3050;
                frontier_phi_55_56_ladder_3 = _3048;
                frontier_phi_55_56_ladder_4 = _3046;
                frontier_phi_55_56_ladder_5 = _3044;
            }
            _3156 = frontier_phi_55_56_ladder_5;
            _3158 = frontier_phi_55_56_ladder_4;
            _3160 = frontier_phi_55_56_ladder_3;
            _3162 = frontier_phi_55_56_ladder_2;
            _3164 = frontier_phi_55_56_ladder;
            _3166 = frontier_phi_55_56_ladder_1;
        }
        float _3171 = isnan(1.0) ? _1201 : (isnan(_1201) ? 1.0 : min(_1201, 1.0));
        _2956 = (_3171 * _3162) + _2389;
        _2958 = (_3171 * _3164) + _2391;
        _2960 = (_3171 * _3166) + _2393;
        _2962 = ((_3156 * _1185) * _3171) + _2737;
        _2964 = ((_3158 * _1187) * _3171) + _2739;
        _2966 = ((_3160 * _1188) * _3171) + _2741;
    }
    else
    {
        _2956 = _2389;
        _2958 = _2391;
        _2960 = _2393;
        _2962 = _2737;
        _2964 = _2739;
        _2966 = _2741;
    }
    float _4917 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _4928 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
    float _4939 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    uint _2986 = _291 + 6u;
    float _2994 = _1123 / cbSceneParam._m0[86u].x;
    float _2995 = _1124 / cbSceneParam._m0[86u].y;
    vec4 _3009 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, (log2((isnan(cbSceneParam._m0[77u].w) ? _1058 : (isnan(_1058) ? cbSceneParam._m0[77u].w : min(_1058, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3011 = _3009.x;
    float _3012 = _3009.y;
    float _3013 = _3009.z;
    float _3014 = _3009.w;
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    if (_1058 > cbSceneParam._m0[78u].w)
    {
        float _3069 = isnan(_1058) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1058 : min(cbSceneParam._m0[80u].w, _1058));
        float _3070 = _3069 / _1058;
        float _3081 = _3070 * _1108;
        float _3082 = _1109 * _3070;
        float _3083 = (-0.0) - _3082;
        float _3084 = _3070 * _1110;
        float _3086 = (cbSceneParam._m0[77u].w * _3083) / _3069;
        float _3087 = _3086 + cbSceneParam._m0[79u].w;
        float _3088 = cbSceneParam._m0[79u].w - _3082;
        float _3094 = sqrt(((_3081 * _3081) + (_3082 * _3082)) + (_3084 * _3084));
        float _3097 = (1.0 - (cbSceneParam._m0[77u].w / _3069)) * _3094;
        float _3102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3257;
        if (abs((_3083 - _3086) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3257 = ((((_3087 > 0.0) ? exp2(_3102 * _3087) : (2.0 - exp2(_3104 * _3087))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3097;
        }
        else
        {
            float _3217 = 1.0 / cbSceneParam._m0[80u].x;
            float _3218 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : max(_3087, _3088));
            float _3219 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : min(_3087, _3088));
            float _3228 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : min(_3218, 0.0));
            float _3229 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : min(_3219, 0.0));
            _3257 = ((abs(_3094 / _3083) * cbSceneParam._m0[80u].y) * ((((_3228 - _3229) * 2.0) - ((exp2(_3102 * (isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0)))) - exp2(_3102 * (isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))))) * _3217)) - ((exp2(_3104 * _3228) - exp2(_3104 * _3229)) * _3217))) + (_3097 * cbSceneParam._m0[80u].z);
        }
        vec4 _3259 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, 1.0), 0.0);
        float _3268 = exp2((_3257 * (-1.44269502162933349609375)) * (1.0 - _3259.w));
        float _3269 = log2(_3268);
        float _3285 = log2(_3014);
        _3106 = (exp2(_3285 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].x)) * _3259.x) / cbSceneParam._m0[78u].x)) + _3011;
        _3108 = (exp2(_3285 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].y)) * _3259.y) / cbSceneParam._m0[78u].y)) + _3012;
        _3110 = (exp2(_3285 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3269 * cbSceneParam._m0[78u].z)) * _3259.z) / cbSceneParam._m0[78u].z)) + _3013;
        _3112 = _3268 * _3014;
    }
    else
    {
        _3106 = _3011;
        _3108 = _3012;
        _3110 = _3013;
        _3112 = _3014;
    }
    float _3124 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3125 = _3124 == 3.0;
    float _3126 = log2(_3112);
    float _3133 = exp2(_3126 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2956 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1201))) + ((_2962 + ((isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))) * _2008)) * cbPerFrame._m0[3u].x));
    float _3134 = exp2(_3126 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2958 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1201))) + ((_2964 + ((isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0))) * _2008)) * cbPerFrame._m0[3u].x));
    float _3135 = exp2(_3126 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2960 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1201))) + ((_2966 + ((isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0))) * _2008)) * cbPerFrame._m0[3u].x));
    float _3144 = (_3124 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3144 * (_3125 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3106)));
    SV_Target.y = _3144 * (_3125 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3108)));
    SV_Target.z = _3144 * (_3125 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3110)));
    SV_Target.w = cbInstanceData._m0[_2986].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2986].w;
}


