#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1550;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3873 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3884 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3895 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = _343.x * cbMtdParam._m0[11u].x;
    float _349 = _343.y * cbMtdParam._m0[11u].y;
    float _350 = _343.z * cbMtdParam._m0[11u].z;
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _388.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3906 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _462 = (_455 * ((_369.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _463 = (_455 * ((_369.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _464 = (_455 * ((_369.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _388.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3917 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _585 = dot(vec4(_575, _573.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _597 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _388.z) * 2.0) - ((((_575 - _585) * cbMtdParam._m0[23u].w) + _585) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3928 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _605 = (_598 * ((_556.x * cbMtdParam._m0[14u].x) - _535)) + _535;
    float _606 = (_598 * ((_556.y * cbMtdParam._m0[14u].y) - _536)) + _536;
    float _607 = (_598 * ((_556.z * cbMtdParam._m0[14u].z) - _537)) + _537;
    float _611 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _605;
    float _614 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _606;
    float _617 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _607;
    float _624 = ((_605 - _611) * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) + _611;
    float _625 = ((_606 - _614) * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) + _614;
    float _626 = ((_607 - _617) * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) + _617;
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _305) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _306) + cbTextureTilingScale._m0[14u].w));
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _705 = _703.x;
    float _706 = _703.y;
    float _707 = _703.z;
    float _714 = ((_686.x - _705) * _455) + _705;
    float _715 = ((_686.y - _706) * _455) + _706;
    float _716 = ((_686.z - _707) * _455) + _707;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _739 = ((_728.x - _714) * _528) + _714;
    float _740 = ((_728.y - _715) * _528) + _715;
    float _741 = ((_728.z - _716) * _528) + _716;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _766 = ((_753.z - _741) * _598) + _741;
    float _769 = ((((_753.x - _739) * _598) + _739) * 2.0) + (-1.0);
    float _770 = ((((_753.y - _740) * _598) + _740) * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3939 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _776 = sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))));
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _815 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _817 = _815.x;
    float _818 = 1.0 - _817;
    float _833 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_817 - _818) * cbMtdParam._m0[24u].z) + _818) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3950 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _834 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _841 = (_834 * ((_644.x * cbMtdParam._m0[18u].x) - _624)) + _624;
    float _842 = (_834 * ((_644.y * cbMtdParam._m0[18u].y) - _625)) + _625;
    float _843 = (_834 * ((_644.z * cbMtdParam._m0[18u].z) - _626)) + _626;
    vec4 _869 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _871 = _869.x;
    float _889 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _871) * _455) + _871;
    float _906 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _889) * _528) + _889;
    float _924 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _906) * _598) + _906;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _924) * cbMtdParam._m0[19u].z) + _924;
    float _930 = _928 - (_928 * _834);
    float _935 = (((_663.z - _766) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _766;
    float _939 = ((_790.z - _935) * cbMtdParam._m0[19u].w) + _935;
    vec4 _952 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _959 = (_952.x * 2.0) + (-1.0);
    float _960 = (_952.y * 2.0) + (-1.0);
    float _961 = dot(vec2(_959, _960), vec2(_959, _960));
    float _3961 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _969 = (_834 * (_952.z - _939)) + _939;
    float _978 = (_769 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_663.x * 2.0) + (-1.0)))) + (((_790.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _979 = (_770 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_663.y * 2.0) + (-1.0)))) + (((_790.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _991 = (((_959 - _978) + (cbMtdParam._m0[21u].x * _978)) * _834) + _978;
    float _992 = (((_960 - _979) + (cbMtdParam._m0[21u].x * _979)) * _834) + _979;
    float _993 = (_834 * (sqrt(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) - _776)) + _776;
    float _997 = cbMtdParam._m0[22u].x + _790.w;
    float _1000 = fma(_993, _252 * NORMAL.x, fma(_992, _259 * TANGENT.x, (_245 * _237) * _991));
    float _1003 = fma(_993, _252 * NORMAL.y, fma(_992, _259 * TANGENT.y, (_245 * _238) * _991));
    float _1006 = fma(_993, _252 * NORMAL.z, fma(_992, _259 * TANGENT.z, (_245 * _239) * _991));
    float _1010 = inversesqrt(dot(vec3(_1000, _1003, _1006), vec3(_1000, _1003, _1006)));
    float _1011 = _1010 * _1000;
    float _1012 = _1010 * _1003;
    float _1013 = _1010 * _1006;
    float _3972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _1014 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _3983 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _3994 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4005 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4016 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4027 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _1019 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1033 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1083 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1073);
    float _1084 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1073);
    float _1085 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1073);
    float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
    float _1090 = _1083 * _1089;
    float _1091 = _1084 * _1089;
    float _1092 = _1085 * _1089;
    float _1098 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1099 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1117 = fma(_1013, cbSceneParam._m0[5u].z, fma(_1012, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1011));
    float _1120 = fma(_1013, cbSceneParam._m0[6u].z, fma(_1012, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1011));
    float _1123 = fma(_1013, cbSceneParam._m0[7u].z, fma(_1012, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1011));
    uint _1137 = (_286 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1143 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_1137].x;
    float _1144 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_1137].y;
    float _1145 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_1137].z;
    float _4038 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1147 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1149 = 1.0 - _1019;
    float _1150 = _1146 * _1149;
    float _1151 = _1147 * _1149;
    float _1152 = _1148 * _1149;
    float _1157 = (_1146 + (-0.039999999105930328369140625)) * _1019;
    float _1158 = (_1147 + (-0.039999999105930328369140625)) * _1019;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1019;
    float _1160 = _1157 + 0.039999999105930328369140625;
    float _1162 = _1158 + 0.039999999105930328369140625;
    float _1163 = _1159 + 0.039999999105930328369140625;
    vec4 _1172 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1098, cbSceneParam._m0[86u].y * _1099));
    float _1176 = ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * TEXCOORD_5.w) * _1172.x;
    float _1177 = dot(vec3(_1011, _1012, _1013), vec3(_1090, _1091, _1092));
    float _1180 = _1177 * 2.0;
    float _1184 = (_1180 * _1011) - _1090;
    float _1185 = (_1180 * _1012) - _1091;
    float _1186 = (_1180 * _1013) - _1092;
    float _1190 = abs(dot(vec3(_1090, _1091, _1092), vec3(_1011, _1012, _1013)));
    float _4071 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _1192 = sqrt(_1014);
    float _1205 = exp2((_1192 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1192 * 3.0));
    float _1211 = (1.0 - _1205) * ((_1192 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1212 = _1205 * _1192;
    float _1240 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1248 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1549;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1274 = fma(_1248, cbModelParam._m0[26u].z, fma(_1244, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1240));
        float _1278 = fma(_1248, cbModelParam._m0[27u].z, fma(_1244, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1240));
        float _1282 = fma(_1248, cbModelParam._m0[28u].z, fma(_1244, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1240));
        float _1307 = _1240 + _1011;
        float _1308 = _1244 + _1012;
        float _1309 = _1248 + _1013;
        float _1319 = fma(_1309, cbModelParam._m0[26u].z, fma(_1308, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307)) - _1274;
        float _1320 = fma(_1309, cbModelParam._m0[27u].z, fma(_1308, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307)) - _1278;
        float _1321 = fma(_1309, cbModelParam._m0[28u].z, fma(_1308, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307)) - _1282;
        float _1325 = inversesqrt(dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321)));
        float _1338 = ((_1325 * _1319) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1274 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1325 * _1320) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1278 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1325 * _1321) / cbModelParam._m0[34u].z) + ((((((_1282 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1338, _1339, _1340), 0.0);
        float _1377 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1343.x + (-0.5));
        float _1379 = _1377 * (_1343.y + (-0.5));
        float _1380 = _1377 * (_1343.z + (-0.5));
        float _1387 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1350.x + (-0.5));
        float _1389 = _1387 * (_1350.y + (-0.5));
        float _1390 = _1387 * (_1350.z + (-0.5));
        float _1397 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1357.x + (-0.5));
        float _1399 = _1397 * (_1357.y + (-0.5));
        float _1400 = _1397 * (_1357.z + (-0.5));
        float _1407 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1364.x + (-0.5));
        float _1409 = _1407 * (_1364.y + (-0.5));
        float _1410 = _1407 * (_1364.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1431 = (dot(vec3(_1011, _1012, _1013), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1441 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _4119 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1443 + 1.0))) + _1448) * _1411;
        float _1458 = _1379 * 0.5;
        float _1459 = _1389 * 0.5;
        float _1460 = _1399 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_1011, _1012, _1013), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4152 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1485 + 1.0))) + _1490) * _1412;
        float _1500 = _1380 * 0.5;
        float _1501 = _1390 * 0.5;
        float _1502 = _1400 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_1011, _1012, _1013), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4185 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1527 + 1.0))) + _1532) * _1413;
        _1549 = _1380;
        _1551 = _1379;
        _1552 = _1378;
        _1553 = _1390;
        _1554 = _1389;
        _1555 = _1388;
        _1556 = _1400;
        _1557 = _1399;
        _1558 = _1398;
        _1559 = _1413;
        _1560 = _1412;
        _1561 = _1411;
        _1562 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1563 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1550;
        _1551 = _1550;
        _1552 = _1550;
        _1553 = _1550;
        _1554 = _1550;
        _1555 = _1550;
        _1556 = _1550;
        _1557 = _1550;
        _1558 = _1550;
        _1559 = _1550;
        _1560 = _1550;
        _1561 = _1550;
        _1562 = 0.0;
        _1563 = 0.0;
        _1564 = 0.0;
    }
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1587 = fma(_1248, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240));
        float _1591 = fma(_1248, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240));
        float _1595 = fma(_1248, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240));
        float _1618 = _1240 + _1011;
        float _1619 = _1244 + _1012;
        float _1620 = _1248 + _1013;
        float _1630 = fma(_1620, cbModelParam._m0[30u].z, fma(_1619, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1618)) - _1587;
        float _1631 = fma(_1620, cbModelParam._m0[31u].z, fma(_1619, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1618)) - _1591;
        float _1632 = fma(_1620, cbModelParam._m0[32u].z, fma(_1619, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1618)) - _1595;
        float _1636 = inversesqrt(dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632)));
        float _1649 = ((_1636 * _1630) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1587 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1650 = ((_1636 * _1631) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1591 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1651 = ((_1636 * _1632) / cbModelParam._m0[35u].z) + ((((((_1595 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1649, _1650, _1651), 0.0);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1649, _1650, _1651), 0.0);
        vec4 _1667 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1649, _1650, _1651), 0.0);
        vec4 _1674 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1649, _1650, _1651), 0.0);
        float _1686 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1653.x + (-0.5));
        float _1688 = _1686 * (_1653.y + (-0.5));
        float _1689 = _1686 * (_1653.z + (-0.5));
        float _1696 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1660.x + (-0.5));
        float _1698 = _1696 * (_1660.y + (-0.5));
        float _1699 = _1696 * (_1660.z + (-0.5));
        float _1706 = exp2((_1667.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1667.x + (-0.5));
        float _1708 = _1706 * (_1667.y + (-0.5));
        float _1709 = _1706 * (_1667.z + (-0.5));
        float _1716 = exp2((_1674.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1674.x + (-0.5));
        float _1718 = _1716 * (_1674.y + (-0.5));
        float _1719 = _1716 * (_1674.z + (-0.5));
        float _1720 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1721 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1722 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1723 = _1687 * 0.5;
        float _1724 = _1697 * 0.5;
        float _1725 = _1707 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_1011, _1012, _1013), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1720 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4248 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1750 + 1.0))) + _1755) * _1720;
        float _1765 = _1688 * 0.5;
        float _1766 = _1698 * 0.5;
        float _1767 = _1708 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_1011, _1012, _1013), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1721 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4281 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1792 + 1.0))) + _1797) * _1721;
        float _1807 = _1689 * 0.5;
        float _1808 = _1699 * 0.5;
        float _1809 = _1709 * 0.5;
        float _1810 = dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809));
        float _1815 = (_1810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1810);
        float _1823 = (dot(vec3(_1011, _1012, _1013), vec3(_1815 * _1807, _1815 * _1808, _1815 * _1809)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1832 = sqrt(((_1808 * _1808) + (_1807 * _1807)) + (_1809 * _1809)) / (_1722 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1834 = _1833 * 2.0;
        float _1838 = (1.0 - _1833) / (_1833 + 1.0);
        float _4314 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1848 = ((((1.0 - _1839) * (_1834 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1834 + 1.0))) + _1839) * _1722;
        _1856 = _1689;
        _1857 = _1688;
        _1858 = _1687;
        _1859 = _1699;
        _1860 = _1698;
        _1861 = _1697;
        _1862 = _1709;
        _1863 = _1708;
        _1864 = _1707;
        _1865 = _1722;
        _1866 = _1721;
        _1867 = _1720;
        _1868 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
        _1869 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
        _1870 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)));
    }
    else
    {
        _1856 = _1550;
        _1857 = _1550;
        _1858 = _1550;
        _1859 = _1550;
        _1860 = _1550;
        _1861 = _1550;
        _1862 = _1550;
        _1863 = _1550;
        _1864 = _1550;
        _1865 = _1550;
        _1866 = _1550;
        _1867 = _1550;
        _1868 = 0.0;
        _1869 = 0.0;
        _1870 = 0.0;
    }
    float _1880 = (cbModelParam._m0[1u].x * (_1868 - _1562)) + _1562;
    float _1881 = (cbModelParam._m0[1u].x * (_1869 - _1563)) + _1563;
    float _1882 = (cbModelParam._m0[1u].x * (_1870 - _1564)) + _1564;
    float _1903 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1906 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1909 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1880));
    float _1924 = _1184 * 0.5;
    float _1925 = _1185 * 0.5;
    float _1926 = _1186 * 0.5;
    float _1927 = dot(vec4(_1924, _1925, _1926, 1.0), vec4(_1858, _1861, _1864, _1867));
    float _1930 = dot(vec4(_1924, _1925, _1926, 1.0), vec4(_1857, _1860, _1863, _1866));
    float _1933 = dot(vec4(_1924, _1925, _1926, 1.0), vec4(_1856, _1859, _1862, _1865));
    float _1967;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1940 = dot(vec4(_1924, _1925, _1926, 1.0), vec4(_1549, _1553, _1556, _1559));
        float _1944 = dot(vec4(_1924, _1925, _1926, 1.0), vec4(_1551, _1554, _1557, _1560));
        float _1948 = dot(vec4(_1924, _1925, _1926, 1.0), vec4(_1552, _1555, _1558, _1561));
        float _1955 = dot(vec4(cbModelParam._m0[39u]), vec4(_1924, _1925, _1926, 1.0));
        _1967 = dot(vec3(isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0)), isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)), isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1955) ? 0.0 : (isnan(0.0) ? _1955 : max(0.0, _1955))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1967 = 1.0;
    }
    float _1978;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1969 = dot(vec4(cbModelParam._m0[40u]), vec4(_1924, _1925, _1926, 1.0));
        _1978 = dot(vec3(isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1969) ? 0.0 : (isnan(0.0) ? _1969 : max(0.0, _1969))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1978 = 1.0;
    }
    float _1982 = (_1978 * cbModelParam._m0[1u].x) + (_1967 * (1.0 - cbModelParam._m0[1u].x));
    float _1992 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1014);
    float _1993 = isnan(_1992) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1992 : min(cbModelParam._m0[25u].z, _1992));
    float _2073;
    float _2075;
    float _2077;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2040 = fma(_1248, cbModelParam._m0[13u].z, fma(_1244, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1240)) + cbModelParam._m0[13u].w;
        float _2044 = fma(_1248, cbModelParam._m0[14u].z, fma(_1244, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1240)) + cbModelParam._m0[14u].w;
        float _2048 = fma(_1248, cbModelParam._m0[15u].z, fma(_1244, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1240)) + cbModelParam._m0[15u].w;
        float _2051 = fma(_1186, cbModelParam._m0[13u].z, fma(_1185, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1184));
        float _2054 = fma(_1186, cbModelParam._m0[14u].z, fma(_1185, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1184));
        float _2057 = fma(_1186, cbModelParam._m0[15u].z, fma(_1185, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1184));
        float _2085;
        if (_2051 > 0.0)
        {
            _2085 = abs((1.0 - _2040) / _2051);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2040 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2085 = frontier_phi_14_12_ladder;
        }
        float _2287;
        if (_2054 > 0.0)
        {
            _2287 = abs((1.0 - _2044) / _2054);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2044 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2287 = frontier_phi_23_19_ladder;
        }
        float _2541;
        if (_2057 > 0.0)
        {
            _2541 = abs((1.0 - _2048) / _2057);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2048 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2541 = frontier_phi_35_30_ladder;
        }
        float _2543 = isnan(_2287) ? _2085 : (isnan(_2085) ? _2287 : min(_2085, _2287));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _2051) + _2040;
        float _2549 = (_2544 * _2054) + _2044;
        float _2550 = (_2544 * _2057) + _2048;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2551;
        float _2555 = _2551 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 > _2555) || ((_2549 < _2553) || ((_2548 < _2553) || (_2548 > _2555))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2550, cbModelParam._m0[9u].z, fma(_2549, cbModelParam._m0[9u].y, _2548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2550, cbModelParam._m0[10u].z, fma(_2549, cbModelParam._m0[10u].y, _2548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2550, cbModelParam._m0[11u].z, fma(_2549, cbModelParam._m0[11u].y, _2548 * cbModelParam._m0[11u].x))), _1993);
            frontier_phi_13_35_ladder = _2678.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2678.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2678.x * cbModelParam._m0[1u].y;
        }
        _2073 = frontier_phi_13_35_ladder_2;
        _2075 = frontier_phi_13_35_ladder_1;
        _2077 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2061 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1184, _1185, _1186), _1993);
        _2073 = _2061.x * cbModelParam._m0[1u].y;
        _2075 = _2061.y * cbModelParam._m0[1u].y;
        _2077 = _2061.z * cbModelParam._m0[1u].y;
    }
    float _2081 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1014);
    float _2082 = isnan(_2081) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2081 : min(cbModelParam._m0[25u].w, _2081));
    float _2171;
    float _2173;
    float _2175;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2135 = fma(_1248, cbModelParam._m0[21u].z, fma(_1244, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1240)) + cbModelParam._m0[21u].w;
        float _2139 = fma(_1248, cbModelParam._m0[22u].z, fma(_1244, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1240)) + cbModelParam._m0[22u].w;
        float _2143 = fma(_1248, cbModelParam._m0[23u].z, fma(_1244, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1240)) + cbModelParam._m0[23u].w;
        float _2146 = fma(_1186, cbModelParam._m0[21u].z, fma(_1185, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1184));
        float _2149 = fma(_1186, cbModelParam._m0[22u].z, fma(_1185, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1184));
        float _2152 = fma(_1186, cbModelParam._m0[23u].z, fma(_1185, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1184));
        float _2292;
        if (_2146 > 0.0)
        {
            _2292 = abs((1.0 - _2135) / _2146);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2146 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2135 + 1.0) / _2146);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2292 = frontier_phi_25_21_ladder;
        }
        float _2568;
        if (_2149 > 0.0)
        {
            _2568 = abs((1.0 - _2139) / _2149);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2149 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2139 + 1.0) / _2149);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2568 = frontier_phi_37_32_ladder;
        }
        float _2781;
        if (_2152 > 0.0)
        {
            _2781 = abs((1.0 - _2143) / _2152);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2152 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2143 + 1.0) / _2152);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2781 = frontier_phi_46_43_ladder;
        }
        float _2783 = isnan(_2568) ? _2292 : (isnan(_2292) ? _2568 : min(_2292, _2568));
        float _2784 = isnan(_2781) ? _2783 : (isnan(_2783) ? _2781 : min(_2783, _2781));
        float _2788 = (_2784 * _2146) + _2135;
        float _2789 = (_2784 * _2149) + _2139;
        float _2790 = (_2784 * _2152) + _2143;
        float _2791 = _2784 * 9.9999997473787516355514526367188e-05;
        float _2792 = (-1.0) - _2791;
        float _2794 = _2791 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2790 > _2794) || ((_2790 < _2792) || ((_2789 > _2794) || ((_2789 < _2792) || ((_2788 < _2792) || (_2788 > _2794))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2790, cbModelParam._m0[17u].z, fma(_2789, cbModelParam._m0[17u].y, _2788 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2790, cbModelParam._m0[18u].z, fma(_2789, cbModelParam._m0[18u].y, _2788 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2790, cbModelParam._m0[19u].z, fma(_2789, cbModelParam._m0[19u].y, _2788 * cbModelParam._m0[19u].x))), _2082);
            frontier_phi_22_46_ladder = _2989.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2989.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2989.x * cbModelParam._m0[1u].z;
        }
        _2171 = frontier_phi_22_46_ladder_2;
        _2173 = frontier_phi_22_46_ladder_1;
        _2175 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2155 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1184, _1185, _1186), _2082);
        _2171 = _2155.x * cbModelParam._m0[1u].z;
        _2173 = _2155.y * cbModelParam._m0[1u].z;
        _2175 = _2155.z * cbModelParam._m0[1u].z;
    }
    float _2188 = (((_1211 * _1160) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2171 - _2073)) + _2073);
    float _2190 = (((_1211 * _1162) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2173 - _2075)) + _2075);
    float _2192 = (((_1211 * _1163) + _1212) * _1176) * ((cbModelParam._m0[1u].w * (_2175 - _2077)) + _2077);
    float _2195 = fma(_2192, cbSceneParam._m0[89u].z, fma(_2190, cbSceneParam._m0[89u].y, _2188 * cbSceneParam._m0[89u].x));
    float _2198 = fma(_2192, cbSceneParam._m0[90u].z, fma(_2190, cbSceneParam._m0[90u].y, _2188 * cbSceneParam._m0[90u].x));
    float _2201 = fma(_2192, cbSceneParam._m0[91u].z, fma(_2190, cbSceneParam._m0[91u].y, _2188 * cbSceneParam._m0[91u].x));
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _1176 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2246 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2250 = _2213 | 1u;
    float _2261 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_1011, _1012, _1013));
    float _2264 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_1011, _1012, _1013));
    float _4450 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _4461 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2269 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2271 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2278 = ((cbLight._m0[_2230].x * _2236) * _2271) + ((cbLight._m0[_2240].x * _2246) * _2269);
    float _2279 = ((_2236 * cbLight._m0[_2230].y) * _2271) + ((_2246 * cbLight._m0[_2240].y) * _2269);
    float _2280 = ((_2236 * cbLight._m0[_2230].z) * _2271) + ((_2246 * cbLight._m0[_2240].z) * _2269);
    uvec4 _2284 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2286 = _2284.x == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2286)
    {
        _2297 = _2278;
        _2299 = _2279;
        _2301 = _2280;
    }
    else
    {
        uint _2305 = _2213 + 6u;
        float _2321 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_1011, _1012, _1013)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4472 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2324 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2297 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2278;
        _2299 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2279;
        _2301 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2280;
    }
    bool _2304 = _2284.y == 0u;
    float _2342;
    float _2344;
    float _2346;
    if (_2304)
    {
        _2342 = _2297;
        _2344 = _2299;
        _2346 = _2301;
    }
    else
    {
        uint _2512 = _2213 + 7u;
        float _2528 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_1011, _1012, _1013)) * 0.5) + 0.5;
        float _2529 = _2528 * _2528;
        float _4488 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2530 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2531 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2342 = (((cbLight._m0[_2512].x * 0.3183098733425140380859375) * _2530) * _2531) + _2297;
        _2344 = (((cbLight._m0[_2512].y * 0.3183098733425140380859375) * _2530) * _2531) + _2299;
        _2346 = (((cbLight._m0[_2512].z * 0.3183098733425140380859375) * _2530) * _2531) + _2301;
    }
    uint _2349 = _2213 + 8u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _1014) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2213].x + _1090;
    float _2365 = cbLight._m0[_2213].y + _1091;
    float _2366 = cbLight._m0[_2213].z + _1092;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2213].xyz));
    float _4504 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _4515 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
    float _2378 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2379 = dot(vec3(_1011, _1012, _1013), vec3(_2371, _2372, _2373));
    float _4526 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2371, _2372, _2373));
    float _4537 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2363 * _2363;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2399 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
    float _2400 = 0.959999978542327880859375 - _1157;
    float _2402 = 0.959999978542327880859375 - _1158;
    float _2403 = 0.959999978542327880859375 - _1159;
    float _2410 = 1.0 - _2363;
    float _2421 = (0.5 / (((_2378 * ((_2377 * _2410) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2410) + _2363) * _2377))) * _2377;
    float _4548 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2423 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    uint _2434 = _2213 + 9u;
    float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _1014) * 0.949999988079071044921875);
    float _2446 = _2445 * _2445;
    float _2447 = cbLight._m0[_2250].x + _1090;
    float _2448 = cbLight._m0[_2250].y + _1091;
    float _2449 = cbLight._m0[_2250].z + _1092;
    float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
    float _2454 = _2453 * _2447;
    float _2455 = _2453 * _2448;
    float _2456 = _2453 * _2449;
    float _2457 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2250].xyz));
    float _4559 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2461 = dot(vec3(_1011, _1012, _1013), vec3(_2454, _2455, _2456));
    float _4570 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2454, _2455, _2456));
    float _4581 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2446 * _2446;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
    float _2487 = 1.0 - _2446;
    float _2497 = (0.5 / (((_2378 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2487) + _2446) * _2460))) * _2460;
    float _4592 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    float _2509 = (((((_2480 * _2400) + _1160) * cbLight._m0[_2434].x) * _2499) * _2236) + (((((_2399 * _2400) + _1160) * cbLight._m0[_2349].x) * _2423) * _2246);
    float _2510 = (((((_2480 * _2402) + _1162) * cbLight._m0[_2434].y) * _2499) * _2236) + (((((_2399 * _2402) + _1162) * cbLight._m0[_2349].y) * _2423) * _2246);
    float _2511 = (((((_2480 * _2403) + _1163) * cbLight._m0[_2434].z) * _2499) * _2236) + (((((_2399 * _2403) + _1163) * cbLight._m0[_2349].z) * _2423) * _2246);
    float _2573;
    float _2575;
    float _2577;
    if (_2286)
    {
        _2573 = _2509;
        _2575 = _2510;
        _2577 = _2511;
    }
    else
    {
        uint _2579 = _2213 + 2u;
        uint _2583 = _2213 + 10u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _1014) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _1090;
        float _2600 = cbLight._m0[_2579].y + _1091;
        float _2601 = cbLight._m0[_2579].z + _1092;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2579].xyz));
        float _4603 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2613 = dot(vec3(_1011, _1012, _1013), vec3(_2606, _2607, _2608));
        float _4614 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4625 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2639 = 1.0 - _2598;
        float _2649 = (0.5 / (((_2378 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2639) + _2598) * _2612))) * _2612;
        float _4636 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2573 = (((((_2632 * _2400) + _1160) * cbLight._m0[_2583].x) * _2651) * _2652) + _2509;
        _2575 = (((((_2632 * _2402) + _1162) * cbLight._m0[_2583].y) * _2651) * _2652) + _2510;
        _2577 = (((((_2632 * _2403) + _1163) * cbLight._m0[_2583].z) * _2651) * _2652) + _2511;
    }
    float _2687;
    float _2689;
    float _2691;
    if (_2304)
    {
        _2687 = _2573;
        _2689 = _2575;
        _2691 = _2577;
    }
    else
    {
        uint _2698 = _2213 + 3u;
        uint _2702 = _2213 + 11u;
        float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2698].w)) * _1014) * 0.949999988079071044921875);
        float _2717 = _2716 * _2716;
        float _2718 = cbLight._m0[_2698].x + _1090;
        float _2719 = cbLight._m0[_2698].y + _1091;
        float _2720 = cbLight._m0[_2698].z + _1092;
        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
        float _2725 = _2724 * _2718;
        float _2726 = _2724 * _2719;
        float _2727 = _2724 * _2720;
        float _2728 = dot(vec3(_1011, _1012, _1013), vec3(cbLight._m0[_2698].xyz));
        float _4652 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2732 = dot(vec3(_1011, _1012, _1013), vec3(_2725, _2726, _2727));
        float _4663 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2736 = dot(vec3(cbLight._m0[_2698].xyz), vec3(_2725, _2726, _2727));
        float _4674 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2740 = _2717 * _2717;
        float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
        float _2751 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
        float _2758 = 1.0 - _2717;
        float _2768 = (0.5 / (((_2378 * ((_2731 * _2758) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2758) + _2717) * _2731))) * _2731;
        float _4685 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2770 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
        float _2771 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2687 = (((((_2751 * _2400) + _1160) * cbLight._m0[_2702].x) * _2770) * _2771) + _2573;
        _2689 = (((((_2751 * _2402) + _1162) * cbLight._m0[_2702].y) * _2770) * _2771) + _2575;
        _2691 = (((((_2751 * _2403) + _1163) * cbLight._m0[_2702].z) * _2770) * _2771) + _2577;
    }
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_2211.y == 0u)
    {
        float _2846 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2847 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2846;
        float _2848 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2846;
        float _2849 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2846;
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.x;
        uint _2873 = uint((float(_2861.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1099) / _2862))) + floor(float(uint(cbSceneParam._m0[85u].x * _1098) / _2862)));
        float _2883 = (log2(_2849 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2884 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        uint _2887 = uint(isnan(14.0) ? _2884 : (isnan(_2884) ? 14.0 : min(_2884, 14.0)));
        uvec4 _2892 = texelFetch(g_lightClusterGridBuffer, int(((_2887 << 2u) + (_2873 << 6u)) >> 2u));
        uint _2893 = _2892.x;
        uint _2894 = _2861.z;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        if (((((1u << ((_2894 >> 4u) & 15u)) + 4294967295u) & _2893) == 0u) || ((_2894 & 240u) == 0u))
        {
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
        }
        else
        {
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            uint _3145 = 0u;
            uint _3154;
            bool _3155;
            for (;;)
            {
                _3154 = texelFetch(g_lightClassification, int((((_2887 << 5u) + (_2873 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                _3155 = _3154 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3155)
                {
                    frontier_phi_61_pred = _3139;
                    frontier_phi_61_pred_1 = _3144;
                    frontier_phi_61_pred_2 = _3143;
                    frontier_phi_61_pred_3 = _3142;
                    frontier_phi_61_pred_4 = _3141;
                    frontier_phi_61_pred_5 = _3140;
                }
                else
                {
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    uint _3269;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3154;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    for (;;)
                    {
                        uint _3273 = uint(findLSB(_3269)) + (_3145 << 5u);
                        uint _3270 = (_3269 + 4294967295u) & _3269;
                        uint _3275 = _3273 * 48u;
                        vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3295 = (_3273 * 48u) + 4u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3314 = (_3273 * 48u) + 8u;
                        vec3 _3325 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x));
                        float _3329 = _3289.x - _2847;
                        float _3330 = _3289.y - _2848;
                        float _3331 = _3289.z - _2849;
                        float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                        float _3335 = inversesqrt(_3332);
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3339 = dot(vec3(_1117, _1120, _1123), vec3(_3336, _3337, _3338));
                        float _3344 = 1.0 - (_3332 * _3289.w);
                        float _4711 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3346 = sqrt(_3332) * _3308.w;
                        float _3349 = 1.39999997615814208984375 / (_3346 + 1.39999997615814208984375);
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3339) + _3350;
                        float _3356 = _3346 * _3346;
                        float _3360 = ((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3345) / ((_3356 * 0.699999988079071044921875) + 1.0);
                        float _3364 = (-0.0) - _2847;
                        float _3365 = (-0.0) - _2848;
                        float _3366 = (-0.0) - _2849;
                        float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3381 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                        float _3382 = 1.0 - _1192;
                        float _3389 = sqrt(1.0 - ((1.0 - (_3382 * _3382)) * (1.0 - (_3381 * _3381))));
                        float _3390 = _3389 * _3389;
                        float _3391 = _3390 * _3390;
                        float _3392 = _3371 + _3336;
                        float _3393 = _3372 + _3337;
                        float _3394 = _3373 + _3338;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3402 = dot(vec3(_1117, _1120, _1123), vec3(_3371, _3372, _3373));
                        float _4727 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3405 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3406 = dot(vec3(_1117, _1120, _1123), vec3(_3398 * _3392, _3398 * _3393, _3398 * _3394));
                        float _4738 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                        float _3409 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3413 = ((_3409 * _3409) * (_3391 + (-1.0))) + 1.0;
                        float _3414 = _3349 * _3390;
                        float _3415 = _3414 * _3414;
                        float _3418 = ((1.0 - _3415) * _3339) + _3415;
                        float _4749 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3419 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3420 = 1.0 - _3390;
                        float _3430 = (0.5 / (((_3419 * ((_3405 * _3420) + _3390)) + 9.9999999392252902907785028219223e-09) + (((_3419 * _3420) + _3390) * _3405))) * _3419;
                        float _4760 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3441 = (((_3391 * 3.1415927410125732421875) * (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) / ((_3413 * _3413) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125))) * _3345;
                        _3198 = (_3360 * _3308.x) + _3266;
                        _3199 = (_3360 * _3308.y) + _3267;
                        _3200 = (_3360 * _3308.z) + _3268;
                        _3195 = (_3441 * _3325.x) + _3263;
                        _3196 = (_3441 * _3325.y) + _3264;
                        _3197 = (_3441 * _3325.z) + _3265;
                        if (_3270 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3270;
                        }
                    }
                    frontier_phi_61_pred = _3195;
                    frontier_phi_61_pred_1 = _3200;
                    frontier_phi_61_pred_2 = _3199;
                    frontier_phi_61_pred_3 = _3198;
                    frontier_phi_61_pred_4 = _3197;
                    frontier_phi_61_pred_5 = _3196;
                }
                _2995 = frontier_phi_61_pred;
                _3005 = frontier_phi_61_pred_1;
                _3003 = frontier_phi_61_pred_2;
                _3001 = frontier_phi_61_pred_3;
                _2999 = frontier_phi_61_pred_4;
                _2997 = frontier_phi_61_pred_5;
                uint _3146 = _3145 + 1u;
                if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3139 = _2995;
                    _3140 = _2997;
                    _3141 = _2999;
                    _3142 = _3001;
                    _3143 = _3003;
                    _3144 = _3005;
                    _3145 = _3146;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
        }
        uvec4 _3008 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3009 = _3008.z;
        uint _3011 = (_3009 >> 8u) & 15u;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((4294967295u << _3011) & _2893) == 0u)
        {
            _3107 = _2994;
            _3109 = _2996;
            _3111 = _2998;
            _3113 = _3000;
            _3115 = _3002;
            _3117 = _3004;
        }
        else
        {
            float _3132 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
            float _3133 = _3132 * _2847;
            float _3134 = _3132 * _2848;
            float _3135 = _3132 * _2849;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3011 < ((_3009 >> 12u) & 15u))
            {
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3246 = _2994;
                float _3247 = _2996;
                float _3248 = _2998;
                float _3249 = _3000;
                float _3250 = _3002;
                float _3251 = _3004;
                uint _3252 = _3011;
                uint _3261;
                bool _3262;
                for (;;)
                {
                    _3261 = texelFetch(g_lightClassification, int((((_2887 << 5u) + (_2873 << 9u)) + (_3252 << 2u)) >> 2u)).x;
                    _3262 = _3261 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3262)
                    {
                        frontier_phi_67_pred = _3249;
                        frontier_phi_67_pred_1 = _3250;
                        frontier_phi_67_pred_2 = _3251;
                        frontier_phi_67_pred_3 = _3248;
                        frontier_phi_67_pred_4 = _3247;
                        frontier_phi_67_pred_5 = _3246;
                    }
                    else
                    {
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3459 = _3246;
                        float _3460 = _3247;
                        float _3461 = _3248;
                        float _3462 = _3249;
                        float _3463 = _3250;
                        float _3464 = _3251;
                        uint _3465 = _3261;
                        uint _3466;
                        vec4 _3491;
                        float _3492;
                        vec4 _3507;
                        vec3 _3519;
                        vec4 _3534;
                        vec4 _3549;
                        float _3595;
                        bool _3596;
                        for (;;)
                        {
                            uint _3476 = ((_3252 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3465));
                            _3466 = (_3465 + 4294967295u) & _3465;
                            uint _3478 = _3476 * 40u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3492 = _3491.w;
                            uint _3494 = (_3476 * 40u) + 4u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3476 * 40u) + 8u;
                            _3519 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x));
                            uint _3521 = (_3476 * 40u) + 16u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3476 * 40u) + 20u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3476 * 40u) + 24u;
                            vec4 _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3570 = (_3476 * 40u) + 28u;
                            vec4 _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3595 = fma(_2849, _3583.z, fma(_2848, _3583.y, _3583.x * _2847)) + _3583.w;
                            _3596 = !((fma(_2849, _3564.z, fma(_2848, _3564.y, _3564.x * _2847)) + _3564.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3596)
                            {
                                float _3623 = _3491.x - _2847;
                                float _3624 = _3491.y - _2848;
                                float _3625 = _3491.z - _2849;
                                float _3626 = dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625));
                                float _3629 = inversesqrt(_3626);
                                float _3630 = _3629 * _3623;
                                float _3631 = _3629 * _3624;
                                float _3632 = _3629 * _3625;
                                float _3636 = 1.0 - (_3626 / (_3492 * _3492));
                                float _4771 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                                float _3637 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3641 = sqrt(_3626) * _3507.w;
                                float _3643 = 1.39999997615814208984375 / (_3641 + 1.39999997615814208984375);
                                float _3644 = _3643 * _3643;
                                float _3647 = ((1.0 - _3644) * dot(vec3(_3630, _3631, _3632), vec3(_1117, _1120, _1123))) + _3644;
                                float _3650 = _3641 * _3641;
                                float _3654 = (fma(_2849, _3534.z, fma(_2848, _3534.y, _3534.x * _2847)) + _3534.w) / _3595;
                                float _3655 = (fma(_2849, _3549.z, fma(_2848, _3549.y, _3549.x * _2847)) + _3549.w) / _3595;
                                float _3659 = 1.0 - dot(vec2(_3654, _3655), vec2(_3654, _3655));
                                float _4787 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3661 = _3660 * (((isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0))) * _3637) / ((_3650 * 0.699999988079071044921875) + 1.0));
                                float _3673 = exp2(log2(1.0 / ((_3650 * 3.5) + 5.0)) * 0.25);
                                float _3674 = 1.0 - _1192;
                                float _3681 = sqrt(1.0 - ((1.0 - (_3674 * _3674)) * (1.0 - (_3673 * _3673))));
                                float _3682 = _3681 * _3681;
                                float _3683 = _3682 * _3682;
                                float _3684 = _3630 - _3133;
                                float _3685 = _3631 - _3134;
                                float _3686 = _3632 - _3135;
                                float _3690 = inversesqrt(dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686)));
                                float _3694 = dot(vec3(_1117, _1120, _1123), vec3((-0.0) - _3133, (-0.0) - _3134, (-0.0) - _3135));
                                float _4798 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3697 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3698 = dot(vec3(_1117, _1120, _1123), vec3(_3690 * _3684, _3690 * _3685, _3690 * _3686));
                                float _4809 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3701 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3705 = ((_3701 * _3701) * (_3683 + (-1.0))) + 1.0;
                                float _3706 = _3643 * _3682;
                                float _3707 = _3706 * _3706;
                                float _3713 = ((1.0 - _3707) * dot(vec3(_1117, _1120, _1123), vec3(_3630, _3631, _3632))) + _3707;
                                float _4820 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3715 = 1.0 - _3682;
                                float _3725 = (0.5 / (((_3714 * ((_3697 * _3715) + _3682)) + 9.9999999392252902907785028219223e-09) + (((_3714 * _3715) + _3682) * _3697))) * _3714;
                                float _4831 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3735 = (_3660 * _3637) * (((_3683 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3705 * _3705) * ((_3650 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3735 * _3519.x;
                                frontier_phi_73_pred_1 = _3735 * _3519.y;
                                frontier_phi_73_pred_2 = _3661 * _3507.z;
                                frontier_phi_73_pred_3 = _3661 * _3507.y;
                                frontier_phi_73_pred_4 = _3661 * _3507.x;
                                frontier_phi_73_pred_5 = _3735 * _3519.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3739 = frontier_phi_73_pred;
                            _3740 = frontier_phi_73_pred_1;
                            _3744 = frontier_phi_73_pred_2;
                            _3743 = frontier_phi_73_pred_3;
                            _3742 = frontier_phi_73_pred_4;
                            _3741 = frontier_phi_73_pred_5;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            if (_3466 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3466;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3449;
                        frontier_phi_67_pred_1 = _3450;
                        frontier_phi_67_pred_2 = _3451;
                        frontier_phi_67_pred_3 = _3448;
                        frontier_phi_67_pred_4 = _3447;
                        frontier_phi_67_pred_5 = _3446;
                    }
                    _3114 = frontier_phi_67_pred;
                    _3116 = frontier_phi_67_pred_1;
                    _3118 = frontier_phi_67_pred_2;
                    _3112 = frontier_phi_67_pred_3;
                    _3110 = frontier_phi_67_pred_4;
                    _3108 = frontier_phi_67_pred_5;
                    uint _3253 = _3252 + 1u;
                    if (_3253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3246 = _3108;
                        _3247 = _3110;
                        _3248 = _3112;
                        _3249 = _3114;
                        _3250 = _3116;
                        _3251 = _3118;
                        _3252 = _3253;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3116;
                frontier_phi_55_56_ladder_1 = _3118;
                frontier_phi_55_56_ladder_2 = _3114;
                frontier_phi_55_56_ladder_3 = _3112;
                frontier_phi_55_56_ladder_4 = _3110;
                frontier_phi_55_56_ladder_5 = _3108;
            }
            else
            {
                frontier_phi_55_56_ladder = _3002;
                frontier_phi_55_56_ladder_1 = _3004;
                frontier_phi_55_56_ladder_2 = _3000;
                frontier_phi_55_56_ladder_3 = _2998;
                frontier_phi_55_56_ladder_4 = _2996;
                frontier_phi_55_56_ladder_5 = _2994;
            }
            _3107 = frontier_phi_55_56_ladder_5;
            _3109 = frontier_phi_55_56_ladder_4;
            _3111 = frontier_phi_55_56_ladder_3;
            _3113 = frontier_phi_55_56_ladder_2;
            _3115 = frontier_phi_55_56_ladder;
            _3117 = frontier_phi_55_56_ladder_1;
        }
        float _3122 = isnan(1.0) ? _1176 : (isnan(_1176) ? 1.0 : min(_1176, 1.0));
        _2906 = (_3122 * _3113) + _2342;
        _2908 = (_3122 * _3115) + _2344;
        _2910 = (_3122 * _3117) + _2346;
        _2912 = ((_3107 * _1160) * _3122) + _2687;
        _2914 = ((_3109 * _1162) * _3122) + _2689;
        _2916 = ((_3111 * _1163) * _3122) + _2691;
    }
    else
    {
        _2906 = _2342;
        _2908 = _2344;
        _2910 = _2346;
        _2912 = _2687;
        _2914 = _2689;
        _2916 = _2691;
    }
    float _4847 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _4858 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _4869 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    uint _2936 = _286 + 6u;
    float _2944 = _1098 / cbSceneParam._m0[86u].x;
    float _2945 = _1099 / cbSceneParam._m0[86u].y;
    vec4 _2959 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2944, _2945, (log2((isnan(cbSceneParam._m0[77u].w) ? _1033 : (isnan(_1033) ? cbSceneParam._m0[77u].w : min(_1033, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2961 = _2959.x;
    float _2962 = _2959.y;
    float _2963 = _2959.z;
    float _2964 = _2959.w;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    if (_1033 > cbSceneParam._m0[78u].w)
    {
        float _3019 = isnan(_1033) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1033 : min(cbSceneParam._m0[80u].w, _1033));
        float _3020 = _3019 / _1033;
        float _3031 = _3020 * _1083;
        float _3032 = _1084 * _3020;
        float _3033 = (-0.0) - _3032;
        float _3035 = _3020 * _1085;
        float _3037 = (cbSceneParam._m0[77u].w * _3033) / _3019;
        float _3038 = _3037 + cbSceneParam._m0[79u].w;
        float _3039 = cbSceneParam._m0[79u].w - _3032;
        float _3045 = sqrt(((_3031 * _3031) + (_3032 * _3032)) + (_3035 * _3035));
        float _3048 = (1.0 - (cbSceneParam._m0[77u].w / _3019)) * _3045;
        float _3053 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3055 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3208;
        if (abs((_3033 - _3037) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3208 = ((((_3038 > 0.0) ? exp2(_3053 * _3038) : (2.0 - exp2(_3055 * _3038))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3048;
        }
        else
        {
            float _3168 = 1.0 / cbSceneParam._m0[80u].x;
            float _3169 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : max(_3038, _3039));
            float _3170 = isnan(_3039) ? _3038 : (isnan(_3038) ? _3039 : min(_3038, _3039));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            _3208 = ((abs(_3045 / _3033) * cbSceneParam._m0[80u].y) * ((((_3179 - _3180) * 2.0) - ((exp2(_3053 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0)))) - exp2(_3053 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))))) * _3168)) - ((exp2(_3055 * _3179) - exp2(_3055 * _3180)) * _3168))) + (_3048 * cbSceneParam._m0[80u].z);
        }
        vec4 _3210 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2944, _2945, 1.0), 0.0);
        float _3219 = exp2((_3208 * (-1.44269502162933349609375)) * (1.0 - _3210.w));
        float _3220 = log2(_3219);
        float _3236 = log2(_2964);
        _3057 = (exp2(_3236 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].x)) * _3210.x) / cbSceneParam._m0[78u].x)) + _2961;
        _3059 = (exp2(_3236 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].y)) * _3210.y) / cbSceneParam._m0[78u].y)) + _2962;
        _3061 = (exp2(_3236 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3220 * cbSceneParam._m0[78u].z)) * _3210.z) / cbSceneParam._m0[78u].z)) + _2963;
        _3063 = _3219 * _2964;
    }
    else
    {
        _3057 = _2961;
        _3059 = _2962;
        _3061 = _2963;
        _3063 = _2964;
    }
    float _3075 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3076 = _3075 == 3.0;
    float _3077 = log2(_3063);
    float _3084 = exp2(_3077 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2906 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1176))) + ((_2912 + ((isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))) * _1982)) * cbPerFrame._m0[3u].x));
    float _3085 = exp2(_3077 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2908 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1176))) + ((_2914 + ((isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0))) * _1982)) * cbPerFrame._m0[3u].x));
    float _3086 = exp2(_3077 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2910 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1176))) + ((_2916 + ((isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0))) * _1982)) * cbPerFrame._m0[3u].x));
    float _3095 = (_3075 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3095 * (_3076 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3057)));
    SV_Target.y = _3095 * (_3076 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3059)));
    SV_Target.z = _3095 * (_3076 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3061)));
    SV_Target.w = cbInstanceData._m0[_2936].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2936].w;
}


