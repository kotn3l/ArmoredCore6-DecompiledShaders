#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1653;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4001 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4012 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4023 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[23u].w) + _450) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4034 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[23u].w) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4045 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _548 = (_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475;
    float _549 = (_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476;
    float _550 = (_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _401.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[23u].w) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4056 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _618 = (_611 * ((_569.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _619 = (_611 * ((_569.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _620 = (_611 * ((_569.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _624 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _618;
    float _627 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _619;
    float _630 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _620;
    float _637 = ((_618 - _624) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) + _624;
    float _638 = ((_619 - _627) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) + _627;
    float _639 = ((_620 - _630) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) + _630;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _698 = _696.x;
    float _699 = _696.y;
    float _700 = _696.z;
    float _707 = ((_679.x - _698) * _468) + _698;
    float _708 = ((_679.y - _699) * _468) + _699;
    float _709 = ((_679.z - _700) * _468) + _700;
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _732 = ((_721.x - _707) * _541) + _707;
    float _733 = ((_721.y - _708) * _541) + _708;
    float _734 = ((_721.z - _709) * _541) + _709;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _759 = ((_746.z - _734) * _611) + _734;
    float _762 = ((((_746.x - _732) * _611) + _732) * 2.0) + (-1.0);
    float _763 = ((((_746.y - _733) * _611) + _733) * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _4067 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _769 = sqrt(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))));
    vec4 _783 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _808 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _810 = _808.x;
    float _811 = 1.0 - _810;
    float _819 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _822 = ((isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : min(_819, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _831 = (_822 - ((((((_810 - _811) * cbMtdParam._m0[24u].z) + _811) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _822))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4088 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _832 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _839 = (_832 * (cbMtdParam._m0[17u].x - _637)) + _637;
    float _840 = (_832 * (cbMtdParam._m0[17u].y - _638)) + _638;
    float _841 = (_832 * (cbMtdParam._m0[17u].z - _639)) + _639;
    vec4 _853 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _855 = _853.x;
    float _856 = 1.0 - _855;
    float _881 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_855 - _856) * cbMtdParam._m0[24u].w) + _856) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4099 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _882 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _890 = ((((cbMtdParam._m0[10u].x - _839) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _882) + _839;
    float _891 = ((((cbMtdParam._m0[10u].y - _840) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _882) + _840;
    float _892 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _841)) * _882) + _841;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _920 = _918.x;
    float _938 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _920) * _468) + _920;
    float _955 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _938) * _541) + _938;
    float _972 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _955) * _611) + _955;
    float _976 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _972) * cbMtdParam._m0[19u].z) + _972;
    float _978 = _976 - (_976 * _832);
    float _980 = _978 - (_978 * _882);
    float _985 = (((_656.z - _759) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _759;
    float _989 = ((_783.z - _985) * cbMtdParam._m0[19u].w) + _985;
    vec4 _1005 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _1012 = (_1005.x * 2.0) + (-1.0);
    float _1013 = (_1005.y * 2.0) + (-1.0);
    float _1014 = dot(vec2(_1012, _1013), vec2(_1012, _1013));
    float _4110 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1022 = (_832 * (_1005.z - _989)) + _989;
    float _1025 = ((cbMtdParam._m0[23u].x - _1022) * _882) + _1022;
    vec4 _1048 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1054 = (_1048.x * 2.0) + (-1.0);
    float _1055 = (_1048.y * 2.0) + (-1.0);
    float _1056 = dot(vec2(_1054, _1055), vec2(_1054, _1055));
    float _4121 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1070 = (_762 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_656.x * 2.0) + (-1.0)))) + (((_783.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1071 = (_763 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_656.y * 2.0) + (-1.0)))) + (((_783.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1083 = (((_1012 - _1070) + (cbMtdParam._m0[21u].x * _1070)) * _832) + _1070;
    float _1084 = (((_1013 - _1071) + (cbMtdParam._m0[21u].x * _1071)) * _832) + _1071;
    float _1085 = (_832 * (sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) - _769)) + _769;
    float _1096 = (((_1054 - _1083) + (_1083 * cbMtdParam._m0[22u].z)) * _882) + _1083;
    float _1097 = (((_1055 - _1084) + (_1084 * cbMtdParam._m0[22u].z)) * _882) + _1084;
    float _1098 = ((sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) - _1085) * _882) + _1085;
    float _1100 = cbMtdParam._m0[22u].x + _783.w;
    float _1103 = fma(_1098, _267 * NORMAL.x, fma(_1097, _274 * TANGENT.x, (_260 * _252) * _1096));
    float _1106 = fma(_1098, _267 * NORMAL.y, fma(_1097, _274 * TANGENT.y, (_260 * _253) * _1096));
    float _1109 = fma(_1098, _267 * NORMAL.z, fma(_1097, _274 * TANGENT.z, (_260 * _254) * _1096));
    float _1113 = inversesqrt(dot(vec3(_1103, _1106, _1109), vec3(_1103, _1106, _1109)));
    float _1114 = _1113 * _1103;
    float _1115 = _1113 * _1106;
    float _1116 = _1113 * _1109;
    float _4132 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1117 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4154 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _4165 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _4176 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4187 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _1122 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _1136 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1176 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1186 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1176);
    float _1187 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1176);
    float _1188 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1176);
    float _1192 = inversesqrt(dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188)));
    float _1193 = _1186 * _1192;
    float _1194 = _1187 * _1192;
    float _1195 = _1188 * _1192;
    float _1201 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1202 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1220 = fma(_1116, cbSceneParam._m0[5u].z, fma(_1115, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1114));
    float _1223 = fma(_1116, cbSceneParam._m0[6u].z, fma(_1115, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1114));
    float _1226 = fma(_1116, cbSceneParam._m0[7u].z, fma(_1115, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1114));
    uint _1240 = (_299 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1246 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_1240].x;
    float _1247 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_1240].y;
    float _1248 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_1240].z;
    float _4198 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _1249 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _1250 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _1251 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _1252 = 1.0 - _1122;
    float _1253 = _1249 * _1252;
    float _1254 = _1250 * _1252;
    float _1255 = _1251 * _1252;
    float _1260 = (_1249 + (-0.039999999105930328369140625)) * _1122;
    float _1261 = (_1250 + (-0.039999999105930328369140625)) * _1122;
    float _1262 = (_1251 + (-0.039999999105930328369140625)) * _1122;
    float _1263 = _1260 + 0.039999999105930328369140625;
    float _1265 = _1261 + 0.039999999105930328369140625;
    float _1266 = _1262 + 0.039999999105930328369140625;
    vec4 _1275 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1201, cbSceneParam._m0[86u].y * _1202));
    float _1279 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * TEXCOORD_5.w) * _1275.x;
    float _1280 = dot(vec3(_1114, _1115, _1116), vec3(_1193, _1194, _1195));
    float _1283 = _1280 * 2.0;
    float _1287 = (_1283 * _1114) - _1193;
    float _1288 = (_1283 * _1115) - _1194;
    float _1289 = (_1283 * _1116) - _1195;
    float _1293 = abs(dot(vec3(_1193, _1194, _1195), vec3(_1114, _1115, _1116)));
    float _4231 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _1295 = sqrt(_1117);
    float _1308 = exp2((_1295 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1295 * 3.0));
    float _1314 = (1.0 - _1308) * ((_1295 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1315 = _1308 * _1295;
    float _1343 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1347 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1351 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1652;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1377 = fma(_1351, cbModelParam._m0[26u].z, fma(_1347, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1343));
        float _1381 = fma(_1351, cbModelParam._m0[27u].z, fma(_1347, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1343));
        float _1385 = fma(_1351, cbModelParam._m0[28u].z, fma(_1347, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1343));
        float _1410 = _1343 + _1114;
        float _1411 = _1347 + _1115;
        float _1412 = _1351 + _1116;
        float _1422 = fma(_1412, cbModelParam._m0[26u].z, fma(_1411, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1410)) - _1377;
        float _1423 = fma(_1412, cbModelParam._m0[27u].z, fma(_1411, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1410)) - _1381;
        float _1424 = fma(_1412, cbModelParam._m0[28u].z, fma(_1411, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1410)) - _1385;
        float _1428 = inversesqrt(dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424)));
        float _1441 = ((_1428 * _1422) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1377 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1442 = ((_1428 * _1423) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1381 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1443 = ((_1428 * _1424) / cbModelParam._m0[34u].z) + ((((((_1385 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1441, _1442, _1443), 0.0);
        float _1480 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1446.x + (-0.5));
        float _1482 = _1480 * (_1446.y + (-0.5));
        float _1483 = _1480 * (_1446.z + (-0.5));
        float _1490 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1453.x + (-0.5));
        float _1492 = _1490 * (_1453.y + (-0.5));
        float _1493 = _1490 * (_1453.z + (-0.5));
        float _1500 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1460.x + (-0.5));
        float _1502 = _1500 * (_1460.y + (-0.5));
        float _1503 = _1500 * (_1460.z + (-0.5));
        float _1510 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1467.x + (-0.5));
        float _1512 = _1510 * (_1467.y + (-0.5));
        float _1513 = _1510 * (_1467.z + (-0.5));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = _1481 * 0.5;
        float _1518 = _1491 * 0.5;
        float _1519 = _1501 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1534 = (dot(vec3(_1114, _1115, _1116), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1544 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4279 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1546 + 1.0))) + _1551) * _1514;
        float _1561 = _1482 * 0.5;
        float _1562 = _1492 * 0.5;
        float _1563 = _1502 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_1114, _1115, _1116), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1515 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4312 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1588 + 1.0))) + _1593) * _1515;
        float _1603 = _1483 * 0.5;
        float _1604 = _1493 * 0.5;
        float _1605 = _1503 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_1114, _1115, _1116), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4345 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1630 + 1.0))) + _1635) * _1516;
        _1652 = _1483;
        _1654 = _1482;
        _1655 = _1481;
        _1656 = _1493;
        _1657 = _1492;
        _1658 = _1491;
        _1659 = _1503;
        _1660 = _1502;
        _1661 = _1501;
        _1662 = _1516;
        _1663 = _1515;
        _1664 = _1514;
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1666 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1667 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1653;
        _1654 = _1653;
        _1655 = _1653;
        _1656 = _1653;
        _1657 = _1653;
        _1658 = _1653;
        _1659 = _1653;
        _1660 = _1653;
        _1661 = _1653;
        _1662 = _1653;
        _1663 = _1653;
        _1664 = _1653;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1690 = fma(_1351, cbModelParam._m0[30u].z, fma(_1347, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343));
        float _1694 = fma(_1351, cbModelParam._m0[31u].z, fma(_1347, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343));
        float _1698 = fma(_1351, cbModelParam._m0[32u].z, fma(_1347, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343));
        float _1721 = _1343 + _1114;
        float _1722 = _1347 + _1115;
        float _1723 = _1351 + _1116;
        float _1733 = fma(_1723, cbModelParam._m0[30u].z, fma(_1722, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1721)) - _1690;
        float _1734 = fma(_1723, cbModelParam._m0[31u].z, fma(_1722, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1721)) - _1694;
        float _1735 = fma(_1723, cbModelParam._m0[32u].z, fma(_1722, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1721)) - _1698;
        float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
        float _1752 = ((_1739 * _1733) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1690 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1753 = ((_1739 * _1734) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1694 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1754 = ((_1739 * _1735) / cbModelParam._m0[35u].z) + ((((((_1698 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1756 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        vec4 _1763 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        vec4 _1770 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        vec4 _1777 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1752, _1753, _1754), 0.0);
        float _1789 = exp2((_1756.w + (-0.5)) * 20.0) * 2.0;
        float _1790 = _1789 * (_1756.x + (-0.5));
        float _1791 = _1789 * (_1756.y + (-0.5));
        float _1792 = _1789 * (_1756.z + (-0.5));
        float _1799 = exp2((_1763.w + (-0.5)) * 20.0) * 2.0;
        float _1800 = _1799 * (_1763.x + (-0.5));
        float _1801 = _1799 * (_1763.y + (-0.5));
        float _1802 = _1799 * (_1763.z + (-0.5));
        float _1809 = exp2((_1770.w + (-0.5)) * 20.0) * 2.0;
        float _1810 = _1809 * (_1770.x + (-0.5));
        float _1811 = _1809 * (_1770.y + (-0.5));
        float _1812 = _1809 * (_1770.z + (-0.5));
        float _1819 = exp2((_1777.w + (-0.5)) * 20.0) * 2.0;
        float _1820 = _1819 * (_1777.x + (-0.5));
        float _1821 = _1819 * (_1777.y + (-0.5));
        float _1822 = _1819 * (_1777.z + (-0.5));
        float _1823 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1824 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1825 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1826 = _1790 * 0.5;
        float _1827 = _1800 * 0.5;
        float _1828 = _1810 * 0.5;
        float _1829 = dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828));
        float _1834 = (_1829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1829);
        float _1842 = (dot(vec3(_1114, _1115, _1116), vec3(_1834 * _1826, _1834 * _1827, _1834 * _1828)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1851 = sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828)) / (_1823 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1853 = _1852 * 2.0;
        float _1857 = (1.0 - _1852) / (_1852 + 1.0);
        float _4408 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1867 = ((((1.0 - _1858) * (_1853 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1853 + 1.0))) + _1858) * _1823;
        float _1868 = _1791 * 0.5;
        float _1869 = _1801 * 0.5;
        float _1870 = _1811 * 0.5;
        float _1871 = dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870));
        float _1876 = (_1871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1871);
        float _1884 = (dot(vec3(_1114, _1115, _1116), vec3(_1876 * _1868, _1876 * _1869, _1876 * _1870)) + 1.0) * 0.5;
        float _4419 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1893 = sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870)) / (_1824 + 9.9999997473787516355514526367188e-06);
        float _4430 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1895 = _1894 * 2.0;
        float _1899 = (1.0 - _1894) / (_1894 + 1.0);
        float _4441 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1909 = ((((1.0 - _1900) * (_1895 + 2.0)) * exp2(log2(isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_1895 + 1.0))) + _1900) * _1824;
        float _1910 = _1792 * 0.5;
        float _1911 = _1802 * 0.5;
        float _1912 = _1812 * 0.5;
        float _1913 = dot(vec3(_1910, _1911, _1912), vec3(_1910, _1911, _1912));
        float _1918 = (_1913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1913);
        float _1926 = (dot(vec3(_1114, _1115, _1116), vec3(_1918 * _1910, _1918 * _1911, _1918 * _1912)) + 1.0) * 0.5;
        float _4452 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1935 = sqrt(((_1911 * _1911) + (_1910 * _1910)) + (_1912 * _1912)) / (_1825 + 9.9999997473787516355514526367188e-06);
        float _4463 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1937 = _1936 * 2.0;
        float _1941 = (1.0 - _1936) / (_1936 + 1.0);
        float _4474 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1942 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1951 = ((((1.0 - _1942) * (_1937 + 2.0)) * exp2(log2(isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_1937 + 1.0))) + _1942) * _1825;
        _1959 = _1792;
        _1960 = _1791;
        _1961 = _1790;
        _1962 = _1802;
        _1963 = _1801;
        _1964 = _1800;
        _1965 = _1812;
        _1966 = _1811;
        _1967 = _1810;
        _1968 = _1825;
        _1969 = _1824;
        _1970 = _1823;
        _1971 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)));
        _1972 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)));
        _1973 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0)));
    }
    else
    {
        _1959 = _1653;
        _1960 = _1653;
        _1961 = _1653;
        _1962 = _1653;
        _1963 = _1653;
        _1964 = _1653;
        _1965 = _1653;
        _1966 = _1653;
        _1967 = _1653;
        _1968 = _1653;
        _1969 = _1653;
        _1970 = _1653;
        _1971 = 0.0;
        _1972 = 0.0;
        _1973 = 0.0;
    }
    float _1983 = (cbModelParam._m0[1u].x * (_1971 - _1665)) + _1665;
    float _1984 = (cbModelParam._m0[1u].x * (_1972 - _1666)) + _1666;
    float _1985 = (cbModelParam._m0[1u].x * (_1973 - _1667)) + _1667;
    float _2006 = fma(_1985, cbSceneParam._m0[89u].z, fma(_1984, cbSceneParam._m0[89u].y, _1983 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_1985, cbSceneParam._m0[90u].z, fma(_1984, cbSceneParam._m0[90u].y, _1983 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_1985, cbSceneParam._m0[91u].z, fma(_1984, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1983));
    float _2027 = _1287 * 0.5;
    float _2028 = _1288 * 0.5;
    float _2029 = _1289 * 0.5;
    float _2030 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1961, _1964, _1967, _1970));
    float _2033 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1960, _1963, _1966, _1969));
    float _2036 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1959, _1962, _1965, _1968));
    float _2070;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2043 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1652, _1656, _1659, _1662));
        float _2047 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1654, _1657, _1660, _1663));
        float _2051 = dot(vec4(_2027, _2028, _2029, 1.0), vec4(_1655, _1658, _1661, _1664));
        float _2058 = dot(vec4(cbModelParam._m0[39u]), vec4(_2027, _2028, _2029, 1.0));
        _2070 = dot(vec3(isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)), isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)), isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2058) ? 0.0 : (isnan(0.0) ? _2058 : max(0.0, _2058))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2070 = 1.0;
    }
    float _2081;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2072 = dot(vec4(cbModelParam._m0[40u]), vec4(_2027, _2028, _2029, 1.0));
        _2081 = dot(vec3(isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0)), isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)), isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2072) ? 0.0 : (isnan(0.0) ? _2072 : max(0.0, _2072))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2081 = 1.0;
    }
    float _2085 = (_2081 * cbModelParam._m0[1u].x) + (_2070 * (1.0 - cbModelParam._m0[1u].x));
    float _2095 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1117);
    float _2096 = isnan(_2095) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2095 : min(cbModelParam._m0[25u].z, _2095));
    float _2176;
    float _2178;
    float _2180;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2143 = fma(_1351, cbModelParam._m0[13u].z, fma(_1347, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1343)) + cbModelParam._m0[13u].w;
        float _2147 = fma(_1351, cbModelParam._m0[14u].z, fma(_1347, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1343)) + cbModelParam._m0[14u].w;
        float _2151 = fma(_1351, cbModelParam._m0[15u].z, fma(_1347, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1343)) + cbModelParam._m0[15u].w;
        float _2154 = fma(_1289, cbModelParam._m0[13u].z, fma(_1288, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1287));
        float _2157 = fma(_1289, cbModelParam._m0[14u].z, fma(_1288, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1287));
        float _2160 = fma(_1289, cbModelParam._m0[15u].z, fma(_1288, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1287));
        float _2188;
        if (_2154 > 0.0)
        {
            _2188 = abs((1.0 - _2143) / _2154);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2143 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2188 = frontier_phi_14_12_ladder;
        }
        float _2412;
        if (_2157 > 0.0)
        {
            _2412 = abs((1.0 - _2147) / _2157);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2147 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2412 = frontier_phi_23_19_ladder;
        }
        float _2669;
        if (_2160 > 0.0)
        {
            _2669 = abs((1.0 - _2151) / _2160);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2151 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2669 = frontier_phi_35_30_ladder;
        }
        float _2671 = isnan(_2412) ? _2188 : (isnan(_2188) ? _2412 : min(_2188, _2412));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _2154) + _2143;
        float _2677 = (_2672 * _2157) + _2147;
        float _2678 = (_2672 * _2160) + _2151;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2679;
        float _2683 = _2679 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 > _2683) || ((_2677 < _2681) || ((_2676 < _2681) || (_2676 > _2683))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2678, cbModelParam._m0[9u].z, fma(_2677, cbModelParam._m0[9u].y, _2676 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2678, cbModelParam._m0[10u].z, fma(_2677, cbModelParam._m0[10u].y, _2676 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2678, cbModelParam._m0[11u].z, fma(_2677, cbModelParam._m0[11u].y, _2676 * cbModelParam._m0[11u].x))), _2096);
            frontier_phi_13_35_ladder = _2806.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2806.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2806.x * cbModelParam._m0[1u].y;
        }
        _2176 = frontier_phi_13_35_ladder_2;
        _2178 = frontier_phi_13_35_ladder_1;
        _2180 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1287, _1288, _1289), _2096);
        _2176 = _2164.x * cbModelParam._m0[1u].y;
        _2178 = _2164.y * cbModelParam._m0[1u].y;
        _2180 = _2164.z * cbModelParam._m0[1u].y;
    }
    float _2184 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1117);
    float _2185 = isnan(_2184) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2184 : min(cbModelParam._m0[25u].w, _2184));
    float _2275;
    float _2277;
    float _2279;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2239 = fma(_1351, cbModelParam._m0[21u].z, fma(_1347, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1343)) + cbModelParam._m0[21u].w;
        float _2243 = fma(_1351, cbModelParam._m0[22u].z, fma(_1347, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1343)) + cbModelParam._m0[22u].w;
        float _2247 = fma(_1351, cbModelParam._m0[23u].z, fma(_1347, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1343)) + cbModelParam._m0[23u].w;
        float _2250 = fma(_1289, cbModelParam._m0[21u].z, fma(_1288, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1287));
        float _2253 = fma(_1289, cbModelParam._m0[22u].z, fma(_1288, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1287));
        float _2256 = fma(_1289, cbModelParam._m0[23u].z, fma(_1288, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1287));
        float _2417;
        if (_2250 > 0.0)
        {
            _2417 = abs((1.0 - _2239) / _2250);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2239 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2417 = frontier_phi_25_21_ladder;
        }
        float _2696;
        if (_2253 > 0.0)
        {
            _2696 = abs((1.0 - _2243) / _2253);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2243 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2696 = frontier_phi_37_32_ladder;
        }
        float _2909;
        if (_2256 > 0.0)
        {
            _2909 = abs((1.0 - _2247) / _2256);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2247 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2909 = frontier_phi_46_43_ladder;
        }
        float _2911 = isnan(_2696) ? _2417 : (isnan(_2417) ? _2696 : min(_2417, _2696));
        float _2912 = isnan(_2909) ? _2911 : (isnan(_2911) ? _2909 : min(_2911, _2909));
        float _2916 = (_2912 * _2250) + _2239;
        float _2917 = (_2912 * _2253) + _2243;
        float _2918 = (_2912 * _2256) + _2247;
        float _2919 = _2912 * 9.9999997473787516355514526367188e-05;
        float _2920 = (-1.0) - _2919;
        float _2922 = _2919 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2918 > _2922) || ((_2918 < _2920) || ((_2917 > _2922) || ((_2917 < _2920) || ((_2916 < _2920) || (_2916 > _2922))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2918, cbModelParam._m0[17u].z, fma(_2917, cbModelParam._m0[17u].y, _2916 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2918, cbModelParam._m0[18u].z, fma(_2917, cbModelParam._m0[18u].y, _2916 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2918, cbModelParam._m0[19u].z, fma(_2917, cbModelParam._m0[19u].y, _2916 * cbModelParam._m0[19u].x))), _2185);
            frontier_phi_22_46_ladder = _3117.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3117.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3117.x * cbModelParam._m0[1u].z;
        }
        _2275 = frontier_phi_22_46_ladder_2;
        _2277 = frontier_phi_22_46_ladder_1;
        _2279 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2259 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1287, _1288, _1289), _2185);
        _2275 = _2259.x * cbModelParam._m0[1u].z;
        _2277 = _2259.y * cbModelParam._m0[1u].z;
        _2279 = _2259.z * cbModelParam._m0[1u].z;
    }
    float _2292 = (((_1314 * _1263) + _1315) * _1279) * ((cbModelParam._m0[1u].w * (_2275 - _2176)) + _2176);
    float _2294 = (((_1314 * _1265) + _1315) * _1279) * ((cbModelParam._m0[1u].w * (_2277 - _2178)) + _2178);
    float _2296 = (((_1314 * _1266) + _1315) * _1279) * ((cbModelParam._m0[1u].w * (_2279 - _2180)) + _2180);
    float _2299 = fma(_2296, cbSceneParam._m0[89u].z, fma(_2294, cbSceneParam._m0[89u].y, _2292 * cbSceneParam._m0[89u].x));
    float _2302 = fma(_2296, cbSceneParam._m0[90u].z, fma(_2294, cbSceneParam._m0[90u].y, _2292 * cbSceneParam._m0[90u].x));
    float _2305 = fma(_2296, cbSceneParam._m0[91u].z, fma(_2294, cbSceneParam._m0[91u].y, _2292 * cbSceneParam._m0[91u].x));
    vec4 _2313 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1201, _1202));
    float _2315 = _2313.w;
    float _2327 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2315);
    float _2328 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2315);
    float _2329 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2315);
    uvec4 _2333 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2335 = _2333.x * 14u;
    uint _2336 = _2335 + 13u;
    float _2343 = _1279 + (-1.0);
    float _2348 = (cbLight._m0[_2336].x * _2343) + 1.0;
    float _2349 = (cbLight._m0[_2336].y * _2343) + 1.0;
    float _2350 = (cbLight._m0[_2336].z * _2343) + 1.0;
    float _2351 = (cbLight._m0[_2336].w * _2343) + 1.0;
    uint _2352 = _2335 + 5u;
    float _2358 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2362 = _2335 + 4u;
    float _2371 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2375 = _2335 | 1u;
    float _2386 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_1114, _1115, _1116));
    float _2389 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_1114, _1115, _1116));
    float _4610 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _4621 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2394 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * 0.3183098733425140380859375;
    float _2396 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * 0.3183098733425140380859375;
    float _2403 = ((cbLight._m0[_2352].x * _2358) * _2396) + (((cbLight._m0[_2362].x * _2327) * _2371) * _2394);
    float _2404 = ((_2358 * cbLight._m0[_2352].y) * _2396) + (((cbLight._m0[_2362].y * _2328) * _2371) * _2394);
    float _2405 = ((_2358 * cbLight._m0[_2352].z) * _2396) + (((cbLight._m0[_2362].z * _2329) * _2371) * _2394);
    uvec4 _2409 = floatBitsToUint(cbLight._m0[_2335 + 12u]);
    bool _2411 = _2409.x == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2411)
    {
        _2422 = _2403;
        _2424 = _2404;
        _2426 = _2405;
    }
    else
    {
        uint _2430 = _2335 + 6u;
        float _2446 = (dot(vec3(cbLight._m0[_2335 + 2u].xyz), vec3(_1114, _1115, _1116)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4632 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2449 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2422 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2403;
        _2424 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2404;
        _2426 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2405;
    }
    bool _2429 = _2409.y == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2429)
    {
        _2467 = _2422;
        _2469 = _2424;
        _2471 = _2426;
    }
    else
    {
        uint _2640 = _2335 + 7u;
        float _2656 = (dot(vec3(cbLight._m0[_2335 + 3u].xyz), vec3(_1114, _1115, _1116)) * 0.5) + 0.5;
        float _2657 = _2656 * _2656;
        float _4648 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2658 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2659 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2467 = (((cbLight._m0[_2640].x * 0.3183098733425140380859375) * _2658) * _2659) + _2422;
        _2469 = (((cbLight._m0[_2640].y * 0.3183098733425140380859375) * _2658) * _2659) + _2424;
        _2471 = (((cbLight._m0[_2640].z * 0.3183098733425140380859375) * _2658) * _2659) + _2426;
    }
    uint _2474 = _2335 + 8u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _1117) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2335].x + _1193;
    float _2490 = cbLight._m0[_2335].y + _1194;
    float _2491 = cbLight._m0[_2335].z + _1195;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2335].xyz));
    float _4664 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _4675 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
    float _2503 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2504 = dot(vec3(_1114, _1115, _1116), vec3(_2496, _2497, _2498));
    float _4686 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2496, _2497, _2498));
    float _4697 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2488 * _2488;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
    float _2525 = 0.959999978542327880859375 - _1260;
    float _2527 = 0.959999978542327880859375 - _1261;
    float _2528 = 0.959999978542327880859375 - _1262;
    float _2535 = 1.0 - _2488;
    float _2546 = (0.5 / (((_2503 * ((_2502 * _2535) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2535) + _2488) * _2502))) * _2502;
    float _4708 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    uint _2562 = _2335 + 9u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _1117) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2375].x + _1193;
    float _2576 = cbLight._m0[_2375].y + _1194;
    float _2577 = cbLight._m0[_2375].z + _1195;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2375].xyz));
    float _4719 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2589 = dot(vec3(_1114, _1115, _1116), vec3(_2582, _2583, _2584));
    float _4730 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2582, _2583, _2584));
    float _4741 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2574 * _2574;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) * 5.0);
    float _2615 = 1.0 - _2574;
    float _2625 = (0.5 / (((_2503 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2615) + _2574) * _2588))) * _2588;
    float _4752 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    float _2637 = (((((_2608 * _2525) + _1263) * cbLight._m0[_2562].x) * _2627) * _2358) + ((((cbLight._m0[_2474].x * _2327) * ((_2524 * _2525) + _1263)) * _2548) * _2371);
    float _2638 = (((((_2608 * _2527) + _1265) * cbLight._m0[_2562].y) * _2627) * _2358) + ((((cbLight._m0[_2474].y * _2328) * ((_2524 * _2527) + _1265)) * _2548) * _2371);
    float _2639 = (((((_2608 * _2528) + _1266) * cbLight._m0[_2562].z) * _2627) * _2358) + ((((cbLight._m0[_2474].z * _2329) * ((_2524 * _2528) + _1266)) * _2548) * _2371);
    float _2701;
    float _2703;
    float _2705;
    if (_2411)
    {
        _2701 = _2637;
        _2703 = _2638;
        _2705 = _2639;
    }
    else
    {
        uint _2707 = _2335 + 2u;
        uint _2711 = _2335 + 10u;
        float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2707].w)) * _1117) * 0.949999988079071044921875);
        float _2726 = _2725 * _2725;
        float _2727 = cbLight._m0[_2707].x + _1193;
        float _2728 = cbLight._m0[_2707].y + _1194;
        float _2729 = cbLight._m0[_2707].z + _1195;
        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
        float _2734 = _2733 * _2727;
        float _2735 = _2733 * _2728;
        float _2736 = _2733 * _2729;
        float _2737 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2707].xyz));
        float _4763 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2741 = dot(vec3(_1114, _1115, _1116), vec3(_2734, _2735, _2736));
        float _4774 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
        float _2745 = dot(vec3(cbLight._m0[_2707].xyz), vec3(_2734, _2735, _2736));
        float _4785 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2749 = _2726 * _2726;
        float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
        float _2760 = exp2(log2(1.0 - (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) * 5.0);
        float _2767 = 1.0 - _2726;
        float _2777 = (0.5 / (((_2503 * ((_2740 * _2767) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2767) + _2726) * _2740))) * _2740;
        float _4796 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2701 = (((((_2760 * _2525) + _1263) * cbLight._m0[_2711].x) * _2779) * _2780) + _2637;
        _2703 = (((((_2760 * _2527) + _1265) * cbLight._m0[_2711].y) * _2779) * _2780) + _2638;
        _2705 = (((((_2760 * _2528) + _1266) * cbLight._m0[_2711].z) * _2779) * _2780) + _2639;
    }
    float _2815;
    float _2817;
    float _2819;
    if (_2429)
    {
        _2815 = _2701;
        _2817 = _2703;
        _2819 = _2705;
    }
    else
    {
        uint _2826 = _2335 + 3u;
        uint _2830 = _2335 + 11u;
        float _2844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2826].w)) * _1117) * 0.949999988079071044921875);
        float _2845 = _2844 * _2844;
        float _2846 = cbLight._m0[_2826].x + _1193;
        float _2847 = cbLight._m0[_2826].y + _1194;
        float _2848 = cbLight._m0[_2826].z + _1195;
        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
        float _2853 = _2852 * _2846;
        float _2854 = _2852 * _2847;
        float _2855 = _2852 * _2848;
        float _2856 = dot(vec3(_1114, _1115, _1116), vec3(cbLight._m0[_2826].xyz));
        float _4812 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2860 = dot(vec3(_1114, _1115, _1116), vec3(_2853, _2854, _2855));
        float _4823 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2864 = dot(vec3(cbLight._m0[_2826].xyz), vec3(_2853, _2854, _2855));
        float _4834 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2868 = _2845 * _2845;
        float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
        float _2879 = exp2(log2(1.0 - (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) * 5.0);
        float _2886 = 1.0 - _2845;
        float _2896 = (0.5 / (((_2503 * ((_2859 * _2886) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2886) + _2845) * _2859))) * _2859;
        float _4845 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2815 = (((((_2879 * _2525) + _1263) * cbLight._m0[_2830].x) * _2898) * _2899) + _2701;
        _2817 = (((((_2879 * _2527) + _1265) * cbLight._m0[_2830].y) * _2898) * _2899) + _2703;
        _2819 = (((((_2879 * _2528) + _1266) * cbLight._m0[_2830].z) * _2898) * _2899) + _2705;
    }
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    if (_2333.y == 0u)
    {
        float _2974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2974;
        float _2976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2974;
        float _2977 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2974;
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.x;
        uint _3001 = uint((float(_2989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1202) / _2990))) + floor(float(uint(cbSceneParam._m0[85u].x * _1201) / _2990)));
        float _3011 = (log2(_2977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3012 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        uint _3015 = uint(isnan(14.0) ? _3012 : (isnan(_3012) ? 14.0 : min(_3012, 14.0)));
        uvec4 _3020 = texelFetch(g_lightClusterGridBuffer, int(((_3015 << 2u) + (_3001 << 6u)) >> 2u));
        uint _3021 = _3020.x;
        uint _3022 = _2989.z;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        if (((((1u << ((_3022 >> 4u) & 15u)) + 4294967295u) & _3021) == 0u) || ((_3022 & 240u) == 0u))
        {
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
        }
        else
        {
            float _3123;
            float _3125;
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            float _3272 = 0.0;
            uint _3273 = 0u;
            uint _3282;
            bool _3283;
            for (;;)
            {
                _3282 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3273 << 2u)) >> 2u)).x;
                _3283 = _3282 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3283)
                {
                    frontier_phi_61_pred = _3267;
                    frontier_phi_61_pred_1 = _3272;
                    frontier_phi_61_pred_2 = _3271;
                    frontier_phi_61_pred_3 = _3270;
                    frontier_phi_61_pred_4 = _3269;
                    frontier_phi_61_pred_5 = _3268;
                }
                else
                {
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    uint _3397;
                    _3391 = _3267;
                    _3392 = _3268;
                    _3393 = _3269;
                    _3394 = _3270;
                    _3395 = _3271;
                    _3396 = _3272;
                    _3397 = _3282;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    for (;;)
                    {
                        uint _3401 = uint(findLSB(_3397)) + (_3273 << 5u);
                        uint _3398 = (_3397 + 4294967295u) & _3397;
                        uint _3403 = _3401 * 48u;
                        vec4 _3417 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 3u)).x));
                        uint _3423 = (_3401 * 48u) + 4u;
                        vec4 _3436 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 3u)).x));
                        uint _3442 = (_3401 * 48u) + 8u;
                        vec3 _3453 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3442)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3442 + 2u)).x));
                        float _3457 = _3417.x - _2975;
                        float _3458 = _3417.y - _2976;
                        float _3459 = _3417.z - _2977;
                        float _3460 = dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459));
                        float _3463 = inversesqrt(_3460);
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3467 = dot(vec3(_1220, _1223, _1226), vec3(_3464, _3465, _3466));
                        float _3472 = 1.0 - (_3460 * _3417.w);
                        float _4871 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                        float _3474 = sqrt(_3460) * _3436.w;
                        float _3477 = 1.39999997615814208984375 / (_3474 + 1.39999997615814208984375);
                        float _3478 = _3477 * _3477;
                        float _3481 = ((1.0 - _3478) * _3467) + _3478;
                        float _3484 = _3474 * _3474;
                        float _3488 = ((isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0))) * _3473) / ((_3484 * 0.699999988079071044921875) + 1.0);
                        float _3492 = (-0.0) - _2975;
                        float _3493 = (-0.0) - _2976;
                        float _3494 = (-0.0) - _2977;
                        float _3498 = inversesqrt(dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494)));
                        float _3499 = _3498 * _3492;
                        float _3500 = _3498 * _3493;
                        float _3501 = _3498 * _3494;
                        float _3509 = exp2(log2(1.0 / ((_3484 * 3.5) + 5.0)) * 0.25);
                        float _3510 = 1.0 - _1295;
                        float _3517 = sqrt(1.0 - ((1.0 - (_3510 * _3510)) * (1.0 - (_3509 * _3509))));
                        float _3518 = _3517 * _3517;
                        float _3519 = _3518 * _3518;
                        float _3520 = _3499 + _3464;
                        float _3521 = _3500 + _3465;
                        float _3522 = _3501 + _3466;
                        float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                        float _3530 = dot(vec3(_1220, _1223, _1226), vec3(_3499, _3500, _3501));
                        float _4887 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                        float _3533 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3534 = dot(vec3(_1220, _1223, _1226), vec3(_3526 * _3520, _3526 * _3521, _3526 * _3522));
                        float _4898 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3537 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3541 = ((_3537 * _3537) * (_3519 + (-1.0))) + 1.0;
                        float _3542 = _3477 * _3518;
                        float _3543 = _3542 * _3542;
                        float _3546 = ((1.0 - _3543) * _3467) + _3543;
                        float _4909 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3547 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3548 = 1.0 - _3518;
                        float _3558 = (0.5 / (((_3547 * ((_3533 * _3548) + _3518)) + 9.9999999392252902907785028219223e-09) + (((_3547 * _3548) + _3518) * _3533))) * _3547;
                        float _4920 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3569 = (((_3519 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3541 * _3541) * ((_3484 * 2.1991131305694580078125) + 3.141590118408203125))) * _3473;
                        _3326 = (_3488 * _3436.x) + _3394;
                        _3327 = (_3488 * _3436.y) + _3395;
                        _3328 = (_3488 * _3436.z) + _3396;
                        _3323 = (_3569 * _3453.x) + _3391;
                        _3324 = (_3569 * _3453.y) + _3392;
                        _3325 = (_3569 * _3453.z) + _3393;
                        if (_3398 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3391 = _3323;
                            _3392 = _3324;
                            _3393 = _3325;
                            _3394 = _3326;
                            _3395 = _3327;
                            _3396 = _3328;
                            _3397 = _3398;
                        }
                    }
                    frontier_phi_61_pred = _3323;
                    frontier_phi_61_pred_1 = _3328;
                    frontier_phi_61_pred_2 = _3327;
                    frontier_phi_61_pred_3 = _3326;
                    frontier_phi_61_pred_4 = _3325;
                    frontier_phi_61_pred_5 = _3324;
                }
                _3123 = frontier_phi_61_pred;
                _3133 = frontier_phi_61_pred_1;
                _3131 = frontier_phi_61_pred_2;
                _3129 = frontier_phi_61_pred_3;
                _3127 = frontier_phi_61_pred_4;
                _3125 = frontier_phi_61_pred_5;
                uint _3274 = _3273 + 1u;
                if (_3274 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3267 = _3123;
                    _3268 = _3125;
                    _3269 = _3127;
                    _3270 = _3129;
                    _3271 = _3131;
                    _3272 = _3133;
                    _3273 = _3274;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
        }
        uvec4 _3136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3137 = _3136.z;
        uint _3139 = (_3137 >> 8u) & 15u;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        float _3245;
        if (((4294967295u << _3139) & _3021) == 0u)
        {
            _3235 = _3122;
            _3237 = _3124;
            _3239 = _3126;
            _3241 = _3128;
            _3243 = _3130;
            _3245 = _3132;
        }
        else
        {
            float _3260 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
            float _3261 = _3260 * _2975;
            float _3262 = _3260 * _2976;
            float _3263 = _3260 * _2977;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3139 < ((_3137 >> 12u) & 15u))
            {
                float _3236;
                float _3238;
                float _3240;
                float _3242;
                float _3244;
                float _3246;
                float _3374 = _3122;
                float _3375 = _3124;
                float _3376 = _3126;
                float _3377 = _3128;
                float _3378 = _3130;
                float _3379 = _3132;
                uint _3380 = _3139;
                uint _3389;
                bool _3390;
                for (;;)
                {
                    _3389 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3380 << 2u)) >> 2u)).x;
                    _3390 = _3389 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3390)
                    {
                        frontier_phi_67_pred = _3377;
                        frontier_phi_67_pred_1 = _3378;
                        frontier_phi_67_pred_2 = _3379;
                        frontier_phi_67_pred_3 = _3376;
                        frontier_phi_67_pred_4 = _3375;
                        frontier_phi_67_pred_5 = _3374;
                    }
                    else
                    {
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3872;
                        float _3587 = _3374;
                        float _3588 = _3375;
                        float _3589 = _3376;
                        float _3590 = _3377;
                        float _3591 = _3378;
                        float _3592 = _3379;
                        uint _3593 = _3389;
                        uint _3594;
                        vec4 _3619;
                        float _3620;
                        vec4 _3635;
                        vec3 _3647;
                        vec4 _3662;
                        vec4 _3677;
                        float _3723;
                        bool _3724;
                        for (;;)
                        {
                            uint _3604 = ((_3380 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3593));
                            _3594 = (_3593 + 4294967295u) & _3593;
                            uint _3606 = _3604 * 40u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            _3620 = _3619.w;
                            uint _3622 = (_3604 * 40u) + 4u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3604 * 40u) + 8u;
                            _3647 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x));
                            uint _3649 = (_3604 * 40u) + 16u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            uint _3664 = (_3604 * 40u) + 20u;
                            _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3679 = (_3604 * 40u) + 24u;
                            vec4 _3692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3679 + 3u)).x));
                            uint _3698 = (_3604 * 40u) + 28u;
                            vec4 _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            _3723 = fma(_2977, _3711.z, fma(_2976, _3711.y, _3711.x * _2975)) + _3711.w;
                            _3724 = !((fma(_2977, _3692.z, fma(_2976, _3692.y, _3692.x * _2975)) + _3692.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3724)
                            {
                                float _3751 = _3619.x - _2975;
                                float _3752 = _3619.y - _2976;
                                float _3753 = _3619.z - _2977;
                                float _3754 = dot(vec3(_3751, _3752, _3753), vec3(_3751, _3752, _3753));
                                float _3757 = inversesqrt(_3754);
                                float _3758 = _3757 * _3751;
                                float _3759 = _3757 * _3752;
                                float _3760 = _3757 * _3753;
                                float _3764 = 1.0 - (_3754 / (_3620 * _3620));
                                float _4931 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3765 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                                float _3769 = sqrt(_3754) * _3635.w;
                                float _3771 = 1.39999997615814208984375 / (_3769 + 1.39999997615814208984375);
                                float _3772 = _3771 * _3771;
                                float _3775 = ((1.0 - _3772) * dot(vec3(_3758, _3759, _3760), vec3(_1220, _1223, _1226))) + _3772;
                                float _3778 = _3769 * _3769;
                                float _3782 = (fma(_2977, _3662.z, fma(_2976, _3662.y, _3662.x * _2975)) + _3662.w) / _3723;
                                float _3783 = (fma(_2977, _3677.z, fma(_2976, _3677.y, _3677.x * _2975)) + _3677.w) / _3723;
                                float _3787 = 1.0 - dot(vec2(_3782, _3783), vec2(_3782, _3783));
                                float _4947 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3789 = _3788 * (((isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0))) * _3765) / ((_3778 * 0.699999988079071044921875) + 1.0));
                                float _3801 = exp2(log2(1.0 / ((_3778 * 3.5) + 5.0)) * 0.25);
                                float _3802 = 1.0 - _1295;
                                float _3809 = sqrt(1.0 - ((1.0 - (_3802 * _3802)) * (1.0 - (_3801 * _3801))));
                                float _3810 = _3809 * _3809;
                                float _3811 = _3810 * _3810;
                                float _3812 = _3758 - _3261;
                                float _3813 = _3759 - _3262;
                                float _3814 = _3760 - _3263;
                                float _3818 = inversesqrt(dot(vec3(_3812, _3813, _3814), vec3(_3812, _3813, _3814)));
                                float _3822 = dot(vec3(_1220, _1223, _1226), vec3((-0.0) - _3261, (-0.0) - _3262, (-0.0) - _3263));
                                float _4958 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3825 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3826 = dot(vec3(_1220, _1223, _1226), vec3(_3818 * _3812, _3818 * _3813, _3818 * _3814));
                                float _4969 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3829 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3833 = ((_3829 * _3829) * (_3811 + (-1.0))) + 1.0;
                                float _3834 = _3771 * _3810;
                                float _3835 = _3834 * _3834;
                                float _3841 = ((1.0 - _3835) * dot(vec3(_1220, _1223, _1226), vec3(_3758, _3759, _3760))) + _3835;
                                float _4980 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3843 = 1.0 - _3810;
                                float _3853 = (0.5 / (((_3842 * ((_3825 * _3843) + _3810)) + 9.9999999392252902907785028219223e-09) + (((_3842 * _3843) + _3810) * _3825))) * _3842;
                                float _4991 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3863 = (_3788 * _3765) * (((_3811 * 3.1415927410125732421875) * (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) / ((_3833 * _3833) * ((_3778 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3863 * _3647.x;
                                frontier_phi_73_pred_1 = _3863 * _3647.y;
                                frontier_phi_73_pred_2 = _3789 * _3635.z;
                                frontier_phi_73_pred_3 = _3789 * _3635.y;
                                frontier_phi_73_pred_4 = _3789 * _3635.x;
                                frontier_phi_73_pred_5 = _3863 * _3647.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3867 = frontier_phi_73_pred;
                            _3868 = frontier_phi_73_pred_1;
                            _3872 = frontier_phi_73_pred_2;
                            _3871 = frontier_phi_73_pred_3;
                            _3870 = frontier_phi_73_pred_4;
                            _3869 = frontier_phi_73_pred_5;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            if (_3594 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3594;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3577;
                        frontier_phi_67_pred_1 = _3578;
                        frontier_phi_67_pred_2 = _3579;
                        frontier_phi_67_pred_3 = _3576;
                        frontier_phi_67_pred_4 = _3575;
                        frontier_phi_67_pred_5 = _3574;
                    }
                    _3242 = frontier_phi_67_pred;
                    _3244 = frontier_phi_67_pred_1;
                    _3246 = frontier_phi_67_pred_2;
                    _3240 = frontier_phi_67_pred_3;
                    _3238 = frontier_phi_67_pred_4;
                    _3236 = frontier_phi_67_pred_5;
                    uint _3381 = _3380 + 1u;
                    if (_3381 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3374 = _3236;
                        _3375 = _3238;
                        _3376 = _3240;
                        _3377 = _3242;
                        _3378 = _3244;
                        _3379 = _3246;
                        _3380 = _3381;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3244;
                frontier_phi_55_56_ladder_1 = _3246;
                frontier_phi_55_56_ladder_2 = _3242;
                frontier_phi_55_56_ladder_3 = _3240;
                frontier_phi_55_56_ladder_4 = _3238;
                frontier_phi_55_56_ladder_5 = _3236;
            }
            else
            {
                frontier_phi_55_56_ladder = _3130;
                frontier_phi_55_56_ladder_1 = _3132;
                frontier_phi_55_56_ladder_2 = _3128;
                frontier_phi_55_56_ladder_3 = _3126;
                frontier_phi_55_56_ladder_4 = _3124;
                frontier_phi_55_56_ladder_5 = _3122;
            }
            _3235 = frontier_phi_55_56_ladder_5;
            _3237 = frontier_phi_55_56_ladder_4;
            _3239 = frontier_phi_55_56_ladder_3;
            _3241 = frontier_phi_55_56_ladder_2;
            _3243 = frontier_phi_55_56_ladder;
            _3245 = frontier_phi_55_56_ladder_1;
        }
        float _3250 = isnan(1.0) ? _1279 : (isnan(_1279) ? 1.0 : min(_1279, 1.0));
        _3034 = (_3250 * _3241) + _2467;
        _3036 = (_3250 * _3243) + _2469;
        _3038 = (_3250 * _3245) + _2471;
        _3040 = ((_3235 * _1263) * _3250) + _2815;
        _3042 = ((_3237 * _1265) * _3250) + _2817;
        _3044 = ((_3239 * _1266) * _3250) + _2819;
    }
    else
    {
        _3034 = _2467;
        _3036 = _2469;
        _3038 = _2471;
        _3040 = _2815;
        _3042 = _2817;
        _3044 = _2819;
    }
    float _5007 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
    float _5018 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
    float _5029 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    uint _3064 = _299 + 6u;
    float _3072 = _1201 / cbSceneParam._m0[86u].x;
    float _3073 = _1202 / cbSceneParam._m0[86u].y;
    vec4 _3087 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3072, _3073, (log2((isnan(cbSceneParam._m0[77u].w) ? _1136 : (isnan(_1136) ? cbSceneParam._m0[77u].w : min(_1136, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3089 = _3087.x;
    float _3090 = _3087.y;
    float _3091 = _3087.z;
    float _3092 = _3087.w;
    float _3185;
    float _3187;
    float _3189;
    float _3191;
    if (_1136 > cbSceneParam._m0[78u].w)
    {
        float _3147 = isnan(_1136) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1136 : min(cbSceneParam._m0[80u].w, _1136));
        float _3148 = _3147 / _1136;
        float _3159 = _3148 * _1186;
        float _3160 = _1187 * _3148;
        float _3161 = (-0.0) - _3160;
        float _3163 = _3148 * _1188;
        float _3165 = (cbSceneParam._m0[77u].w * _3161) / _3147;
        float _3166 = _3165 + cbSceneParam._m0[79u].w;
        float _3167 = cbSceneParam._m0[79u].w - _3160;
        float _3173 = sqrt(((_3159 * _3159) + (_3160 * _3160)) + (_3163 * _3163));
        float _3176 = (1.0 - (cbSceneParam._m0[77u].w / _3147)) * _3173;
        float _3181 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3183 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3336;
        if (abs((_3161 - _3165) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3336 = ((((_3166 > 0.0) ? exp2(_3181 * _3166) : (2.0 - exp2(_3183 * _3166))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3176;
        }
        else
        {
            float _3296 = 1.0 / cbSceneParam._m0[80u].x;
            float _3297 = isnan(_3167) ? _3166 : (isnan(_3166) ? _3167 : max(_3166, _3167));
            float _3298 = isnan(_3167) ? _3166 : (isnan(_3166) ? _3167 : min(_3166, _3167));
            float _3307 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : min(_3297, 0.0));
            float _3308 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : min(_3298, 0.0));
            _3336 = ((abs(_3173 / _3161) * cbSceneParam._m0[80u].y) * ((((_3307 - _3308) * 2.0) - ((exp2(_3181 * (isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0)))) - exp2(_3181 * (isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))))) * _3296)) - ((exp2(_3183 * _3307) - exp2(_3183 * _3308)) * _3296))) + (_3176 * cbSceneParam._m0[80u].z);
        }
        vec4 _3338 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3072, _3073, 1.0), 0.0);
        float _3347 = exp2((_3336 * (-1.44269502162933349609375)) * (1.0 - _3338.w));
        float _3348 = log2(_3347);
        float _3364 = log2(_3092);
        _3185 = (exp2(_3364 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].x)) * _3338.x) / cbSceneParam._m0[78u].x)) + _3089;
        _3187 = (exp2(_3364 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].y)) * _3338.y) / cbSceneParam._m0[78u].y)) + _3090;
        _3189 = (exp2(_3364 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].z)) * _3338.z) / cbSceneParam._m0[78u].z)) + _3091;
        _3191 = _3347 * _3092;
    }
    else
    {
        _3185 = _3089;
        _3187 = _3090;
        _3189 = _3091;
        _3191 = _3092;
    }
    float _3203 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3204 = _3203 == 3.0;
    float _3205 = log2(_3191);
    float _3212 = exp2(_3205 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_3034 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1279))) + ((_3040 + ((isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0))) * _2085)) * cbPerFrame._m0[3u].x));
    float _3213 = exp2(_3205 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_3036 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1279))) + ((_3042 + ((isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * _2085)) * cbPerFrame._m0[3u].x));
    float _3214 = exp2(_3205 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_3038 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1279))) + ((_3044 + ((isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))) * _2085)) * cbPerFrame._m0[3u].x));
    float _3223 = (_3203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3223 * (_3204 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3185)));
    SV_Target.y = _3223 * (_3204 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3187)));
    SV_Target.z = _3223 * (_3204 ? _3214 : (_3214 + (cbSceneParam._m0[72u].w * _3189)));
    SV_Target.w = cbInstanceData._m0[_3064].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3064].w;
}


